{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_data_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeData_0800010c(undefined4 input)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_data_0800010c",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "sendString",
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_system_call_08000188",
            "code": "\nvoid executeSystemCall_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_system_call_08000188"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_afl_call_0800018c",
            "code": "\nundefined4 executeAflCall_0800018c(undefined4 inputParam,undefined4 unusedParam,undefined4 unusedParam2,undefined4 outputParam)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = aflCall(1,inputParam,0,0,outputParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_afl_call_0800018c",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "param_3": "unusedParam2",
                "param_4": "outputParam",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "set_pin_mode_and_state_08000214",
            "code": "\nvoid setPinModeAndState_08000214(uint pinNumber,undefined4 value,undefined4 mode,undefined4 state)\n\n{\n  bool isValidPin;\n  int pinMappingResult;\n  \n  if (0x3b < (int)pinNumber) {\n    return;\n  }\n  pinMappingResult = getPinMode(&DAT_200003d4,pinNumber,mode,state,state);\n  if (pinMappingResult == 3) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        pinMappingResult = 0;\n      }\n      else {\n        pinMappingResult = pinNametoDigitalPin();\n        if (pinMappingResult == 0) {\n          pinMappingResult = 0;\n        }\n        else {\n          pinMappingResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMappingResult == 1) {\n            pinMappingResult = 0;\n          }\n          else {\n            pinMappingResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pinMappingResult = 0;\n    }\n    if (pinMappingResult != 0) {\n      analogWrite(pinNumber,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n  }\n  else if (pinMappingResult == 4) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValidPin = false;\n      }\n      else {\n        pinMappingResult = pinNametoDigitalPin();\n        if (pinMappingResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinMappingResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMappingResult == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      write_pulse_duration_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3,value);\n    }\n    setPinState(&DAT_200003d4,pinNumber,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "set_pin_mode_and_state_08000214",
                "param_1": "pinNumber",
                "param_2": "value",
                "param_3": "mode",
                "param_4": "state",
                "bVar1": "isValidPin",
                "iVar2": "pinMappingResult"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "check_and_set_pin_state_0800021a",
            "code": "\nvoid checkAndSetPinState_0800021a(uint pinNumber,undefined4 state,undefined4 param3,undefined4 param4)\n\n{\n  bool isDefined;\n  int pinMode;\n  \n  pinMode = getPinMode(&DAT_200003d4,pinNumber,param3,param4,param4);\n  if (pinMode == 3) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        pinMode = 0;\n      }\n      else {\n        pinMode = getDigitalPinFromName();\n        if (pinMode == 0) {\n          pinMode = 0;\n        }\n        else {\n          pinMode = getDigitalPinFromName((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMode == 1) {\n            pinMode = 0;\n          }\n          else {\n            pinMode = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      pinMode = 0;\n    }\n    if (pinMode != 0) {\n      writeAnalogValue(pinNumber,state);\n    }\n    updatePinState(&DAT_200003d4,pinNumber,state);\n  }\n  else if (pinMode == 4) {\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isDefined = false;\n      }\n      else {\n        pinMode = getDigitalPinFromName();\n        if (pinMode == 0) {\n          isDefined = false;\n        }\n        else {\n          pinMode = getDigitalPinFromName((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinMode == 1) {\n            isDefined = false;\n          }\n          else {\n            isDefined = true;\n          }\n        }\n      }\n    }\n    else {\n      isDefined = false;\n    }\n    if (isDefined) {\n      writePulseDuration(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3,state);\n    }\n    updatePinState(&DAT_200003d4,pinNumber,state);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "check_and_set_pin_state_0800021a",
                "param_1": "pinNumber",
                "param_2": "state",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "isDefined",
                "iVar2": "pinMode",
                "pinNametoDigitalPin": "getDigitalPinFromName",
                "analogWrite": "writeAnalogValue",
                "setPinState": "updatePinState",
                "write_pulse_duration_080026b0": "writePulseDuration"
            },
            "calling": [
                "analogWriteCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "analogWrite",
                "FUN_080026b0",
                "setPinState",
                "getPinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint index,int status)\n\n{\n  undefined4 analogValue;\n  \n  if ((int)index < 0xe) {\n    if (status == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      analogValue = analogRead();\n      send_analog_data_08002ef2(&DAT_200003d4,index,analogValue);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "status",
                "uVar1": "analogValue"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [
                "analogRead",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "activate_servos_080004d4",
            "code": "\nvoid activateServos_080004d4(int condition,int value)\n\n{\n  int counter;\n  undefined *servoData;\n  \n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    servoData = &DAT_2000022c;\n    for (counter = 0xb; -1 < counter; counter = counter + -1) {\n      Servo(servoData);\n      servoData = servoData + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "activate_servos_080004d4",
                "param_1": "condition",
                "param_2": "value",
                "iVar1": "counter",
                "puVar2": "servoData"
            },
            "calling": [],
            "called": [
                "Servo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "initialize_servo_08000500",
            "code": "\nvoid initialize_servo_08000500(int servo_index,int pin_mode,int timer_duration,undefined4 undefined_param)\n\n{\n  if (0xb < DAT_200001ed) {\n    send_string_plus_offset_08002f14(&DAT_200003d4,\"Max servos attached\",timer_duration,undefined_param,undefined_param);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servo_index] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servo_index] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < pin_mode) && (0 < timer_duration)) {\n    pin_mode_and_set_timer_080025ac(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_index] * 3,servo_index,pin_mode,timer_duration);\n    return;\n  }\n  initialize_timer_08002634(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[servo_index] * 3,servo_index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "initialize_servo_08000500",
                "param_1": "servo_index",
                "param_2": "pin_mode",
                "param_3": "timer_duration",
                "param_4": "undefined_param"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [
                "FUN_080025ac",
                "FUN_08002634",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "detach_and_update_data_08000588",
            "code": "\nvoid detachAndUpdateData_08000588(int index)\n\n{\n  detach(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "detach_and_update_data_08000588",
                "param_1": "index"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [
                "detach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "set_pin_mode_and_state_080005f8",
            "code": "\nvoid setPinModeAndState_080005f8(uint pinNumber,int mode)\n\n{\n  int pinModeResult;\n  char pinModeSixResult;\n  bool isValidPin;\n  uint analogPinIndex;\n  \n  pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n  if (pinModeResult != 0x7f) {\n    pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n    if (pinModeResult == 6) {\n      if (DAT_20000170 == '\\0') {\n        pinModeSixResult = '\\0';\n      }\n      else {\n        pinModeSixResult = DAT_20000170;\n        if (mode == 6) {\n          pinModeSixResult = '\\0';\n        }\n      }\n    }\n    else {\n      pinModeSixResult = '\\0';\n    }\n    if (pinModeSixResult != '\\0') {\n      disableI2CPins();\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValidPin = false;\n      }\n      else {\n        pinModeResult = pinNametoDigitalPin();\n        if (pinModeResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinModeResult == 1) {\n            isValidPin = false;\n          }\n          else if (mode == 4) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      if ((byte)(&DAT_200001f0)[pinNumber] < 0xc) {\n        pinModeResult = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3);\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        detachServo(pinNumber);\n      }\n    }\n    analogPinIndex = pinNumber - 0x2e & 0xff;\n    if (analogPinIndex < 0xe) {\n      if (pinNumber < 0x3c) {\n        pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n      }\n      else {\n        pinModeResult = -1;\n      }\n      pinModeResult = pinNametoDigitalPin(pinModeResult);\n      if (pinModeResult == 0) {\n        isValidPin = false;\n      }\n      else {\n        if (pinNumber < 0x3c) {\n          pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          pinModeResult = -1;\n        }\n        pinModeResult = pinNametoDigitalPin(pinModeResult);\n        if (pinModeResult == 1) {\n          isValidPin = false;\n        }\n        else {\n          isValidPin = true;\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      reportAnalogCallback(analogPinIndex,mode == 2);\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValidPin = false;\n      }\n      else {\n        pinModeResult = pinNametoDigitalPin();\n        if (pinModeResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (pinModeResult == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n    }\n    else {\n      isValidPin = false;\n    }\n    if (isValidPin) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] | (byte)(1 << (pinNumber & 7));\n      }\n      else {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] & ~(byte)(1 << (pinNumber & 7));\n      }\n    }\n    setPinState(&DAT_200003d4,pinNumber,0);\n    switch(mode) {\n    case 0:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinMode(pinNumber,0);\n        setPinMode(&DAT_200003d4,pinNumber,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinModeResult = getPinMode(&DAT_200003d4,pinNumber);\n        if (pinModeResult == 3) {\n          digitalWrite(pinNumber,0);\n        }\n        pinMode(pinNumber,1);\n        setPinMode(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n      break;\n    case 2:\n      if (analogPinIndex < 0xe) {\n        if (pinNumber < 0x3c) {\n          pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          pinModeResult = -1;\n        }\n        pinModeResult = pinNametoDigitalPin(pinModeResult);\n        if (pinModeResult == 0) {\n          isValidPin = false;\n        }\n        else {\n          if (pinNumber < 0x3c) {\n            pinModeResult = (int)(char)(&DAT_0800a908)[pinNumber];\n          }\n          else {\n            pinModeResult = -1;\n          }\n          pinModeResult = pinNametoDigitalPin(pinModeResult);\n          if (pinModeResult == 1) {\n            isValidPin = false;\n          }\n          else {\n            isValidPin = true;\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        if (pinNumber < 0x3c) {\n          if ((&DAT_0800a908)[pinNumber] == -1) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin();\n            if (pinModeResult == 0) {\n              isValidPin = false;\n            }\n            else {\n              pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n              if (pinModeResult == 1) {\n                isValidPin = false;\n              }\n            }\n          }\n        }\n        else {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          pinMode(pinNumber,0);\n        }\n        setPinMode(&DAT_200003d4,pinNumber,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          pinModeResult = 0;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            pinModeResult = 0;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              pinModeResult = 0;\n            }\n            else {\n              pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        pinMode(pinNumber,1);\n        analogWrite(pinNumber,0);\n        setPinMode(&DAT_200003d4,pinNumber,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        setPinMode(&DAT_200003d4,pinNumber,4);\n        if (((byte)(&DAT_200001f0)[pinNumber] != 0xff) &&\n           (pinModeResult = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3), pinModeResult != 0))\n        {\n          isValidPin = false;\n        }\n        if (isValidPin) {\n          attachServo(pinNumber,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      send_string_plus_offset_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          pinModeResult = 0;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            pinModeResult = 0;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              pinModeResult = 0;\n            }\n            else {\n              pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a69c);\n              if (pinModeResult == 0) {\n                pinModeResult = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        pinModeResult = 0;\n      }\n      if (pinModeResult != 0) {\n        setPinMode(&DAT_200003d4,pinNumber,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValidPin = false;\n        }\n        else {\n          pinModeResult = pinNametoDigitalPin();\n          if (pinModeResult == 0) {\n            isValidPin = false;\n          }\n          else {\n            pinModeResult = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (pinModeResult == 1) {\n              isValidPin = false;\n            }\n            else {\n              isValidPin = true;\n            }\n          }\n        }\n      }\n      else {\n        isValidPin = false;\n      }\n      if (isValidPin) {\n        pinMode(pinNumber,2);\n        setPinMode(&DAT_200003d4,pinNumber,0xb);\n        setPinState(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "set_pin_mode_and_state_080005f8",
                "param_1": "pinNumber",
                "param_2": "mode",
                "iVar1": "pinModeResult",
                "cVar2": "pinModeSixResult",
                "bVar3": "isValidPin",
                "uVar4": "analogPinIndex"
            },
            "calling": [
                "sysexCallback",
                "enableI2CPins",
                "systemResetCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "analogWrite",
                "FUN_08002f14",
                "digitalWrite",
                "setPinState",
                "setPinMode",
                "attachServo",
                "pinNametoDigitalPin",
                "reportAnalogCallback",
                "disableI2CPins",
                "getPinMode",
                "attached",
                "pinMode",
                "detachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "initialize_pins_and_i2c_08000a64",
            "code": "\nvoid initialize_pins_and_i2c_08000a64(void)\n\n{\n  int pinStatus;\n  uint pinIndex;\n  \n  for (pinIndex = 0; pinIndex < 0x3c; pinIndex = pinIndex + 1 & 0xff) {\n    if (pinIndex < 0x3c) {\n      if ((&DAT_0800a908)[pinIndex] == -1) {\n        pinStatus = 0;\n      }\n      else {\n        pinStatus = pinNametoDigitalPin();\n        if (pinStatus == 0) {\n          pinStatus = 0;\n        }\n        else {\n          pinStatus = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[pinIndex]);\n          if (pinStatus == 1) {\n            pinStatus = 0;\n          }\n          else {\n            pinStatus = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinIndex],&DAT_0800a69c);\n            if (pinStatus == 0) {\n              pinStatus = pin_in_pinmap((int)(char)(&DAT_0800a908)[pinIndex],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      pinStatus = 0;\n    }\n    if (pinStatus != 0) {\n      setPinModeCallback(pinIndex,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_i2c_device_08002a26(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "initialize_pins_and_i2c_08000a64",
                "iVar1": "pinStatus",
                "uVar2": "pinIndex"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "pinNametoDigitalPin",
                "FUN_08002a26",
                "setPinModeCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_io_08000aec",
            "code": "\nvoid initializeIO_08000aec(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint uVar3;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    disableI2CPins();\n  }\n  for (uVar3 = 0; uVar3 < 5; uVar3 = uVar3 + 1 & 0xff) {\n    (&DAT_200001e8)[uVar3] = 0;\n    (&DAT_20000174)[uVar3] = 0;\n    (&DAT_20000180)[uVar3] = 0;\n  }\n  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1 & 0xff) {\n    if ((uVar3 - 0x2e & 0xff) < 0xe) {\n      if (uVar3 < 0x3c) {\n        iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = convertPinNameToDigitalPin(iVar2);\n      if (iVar2 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar3 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = convertPinNameToDigitalPin(iVar2);\n        if (iVar2 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      setPinMode(uVar3,2);\n    }\n    else {\n      if ((((uVar3 < 0x3c) && ((&DAT_0800a908)[uVar3] != -1)) &&\n          (iVar2 = convertPinNameToDigitalPin(), iVar2 != 0)) &&\n         (iVar2 = convertPinNameToDigitalPin((int)(char)(&DAT_0800a908)[uVar3]), iVar2 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        setPinMode(uVar3,1);\n      }\n    }\n    (&DAT_200001f0)[uVar3] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_io_08000aec",
                "pinNametoDigitalPin": "convertPinNameToDigitalPin",
                "setPinModeCallback": "setPinMode"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinNametoDigitalPin",
                "disableI2CPins",
                "setPinModeCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "send_port_data_08000be8",
            "code": "\nvoid send_port_data_08000be8(int index,uint mask,int condition,undefined4 param)\n\n{\n  undefined1 *ptr_data1;\n  undefined1 *ptr_data2;\n  \n  ptr_data1 = &DAT_20000174;\n  ptr_data2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((condition != 0) ||\n     (ptr_data1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], ptr_data2 != ptr_data1)) {\n    send_port_data_08000be8_08002efe(&DAT_200003d4,index,ptr_data2,ptr_data1,param);\n    (&DAT_20000180)[index] = (char)ptr_data2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "send_port_data_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "condition",
                "param_4": "param",
                "puVar1": "ptr_data1",
                "puVar2": "ptr_data2"
            },
            "calling": [
                "checkDigitalInputs"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "update_output_ports_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid updateOutputPorts_08000ef8(void)\n\n{\n  byte inputValue;\n  int pinValue;\n  bool isReadSuccess;\n  byte outputValue;\n  \n  inputValue = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(3);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((inputValue & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(2);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 2) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(1);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(10);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 4) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(2);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x13);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 8) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(3);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x15);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x10) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(4);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x14);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x20) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(5);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1a);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x40) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(6);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(8);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x80) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(7);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(0,outputValue);\n  }\n  inputValue = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(9);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((inputValue & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(8);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x27);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 2) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(9);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x16);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 4) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(10);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(7);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 8) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0xb);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(6);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x10) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0xc);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(5);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x20) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0xd);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x19);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x40) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0xe);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x18);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x80) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0xf);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(1,outputValue,0);\n  }\n  inputValue = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2a);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((inputValue & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x10);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2c);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 2) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x11);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xd);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 8) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x13);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xe);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x10) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x14);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xf);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x20) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x15);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x17);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x40) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x16);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2d);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x80) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x17);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(2,outputValue,0);\n  }\n  inputValue = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2e);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((inputValue & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x18);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2f);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 2) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x19);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x30);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 4) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x1a);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x31);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 8) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x1b);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x22);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x10) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x1c);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x23);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x20) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x1d);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x2b);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x40) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x1e);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x32);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x80) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x1f);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(3,outputValue,0);\n  }\n  inputValue = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      outputValue = 0;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x29);\n      if (pinValue == 1) {\n        outputValue = 0;\n      }\n      else if ((inputValue & 1) == 0) {\n        outputValue = 0;\n      }\n      else {\n        pinValue = digitalRead(0x20);\n        if (pinValue == 0) {\n          outputValue = 0;\n        }\n        else {\n          outputValue = 1;\n        }\n      }\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x28);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 2) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x21);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 2;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x26);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 4) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x22);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 4;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x25);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 8) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x23);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 8;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xc);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x10) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x24);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x10;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0xb);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x20) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x25);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x20;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1c);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x40) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x26);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x40;\n    }\n    pinValue = pinNametoDigitalPin();\n    if (pinValue == 0) {\n      isReadSuccess = false;\n    }\n    else {\n      pinValue = pinNametoDigitalPin(0x1b);\n      if (pinValue == 1) {\n        isReadSuccess = false;\n      }\n      else if ((inputValue & 0x80) == 0) {\n        isReadSuccess = false;\n      }\n      else {\n        pinValue = digitalRead(0x27);\n        if (pinValue == 0) {\n          isReadSuccess = false;\n        }\n        else {\n          isReadSuccess = true;\n        }\n      }\n    }\n    if (isReadSuccess) {\n      outputValue = outputValue | 0x80;\n    }\n    outputPort(4,outputValue,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "update_output_ports_08000ef8",
                "bVar1": "inputValue",
                "iVar2": "pinValue",
                "bVar3": "isReadSuccess",
                "bVar4": "outputValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "outputPort",
                "pinNametoDigitalPin",
                "digitalRead"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  setFirmwareNameAndVersion\n            (&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",2,\n             5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,&refToLAB_080002ec_1);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,&refToLAB_08000c18_1);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,&refToLAB_080001a8_1);\n  initializeData(&DAT_200003d4,0xf0,0x8001cd1);\n  updateParameter(&DAT_200003d4,0xff,0x8000aed);\n  initializeFirmwareUpdate(&DAT_200003d4,0xe100);\n  performSystemReset();\n  startForkServer(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "update_data_08002f2c": "updateData",
                "&LAB_080002ec_1": "&refToLAB_080002ec_1",
                "&LAB_08000c18_1": "&refToLAB_08000c18_1",
                "&LAB_080001a8_1": "&refToLAB_080001a8_1",
                "initialize_data_08002f94": "initializeData",
                "update_parameter_08002f84": "updateParameter",
                "initialize_firmware_update_08003048": "initializeFirmwareUpdate",
                "systemResetCallback": "performSystemReset",
                "startForkserver": "startForkServer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "FUN_08002f2c",
                "FUN_08003048",
                "FUN_08002f84",
                "FUN_08002f94",
                "startForkserver",
                "setFirmwareNameAndVersion",
                "systemResetCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "write_data_08001bf8",
            "code": "\nvoid write_data_08001bf8(undefined4 data_ptr,undefined4 unused_param,undefined4 size,undefined4 value)\n\n{\n  write_data_08001bf8_0800288c(&DAT_20000314,data_ptr,size,value,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "write_data_08001bf8",
                "param_1": "data_ptr",
                "param_2": "unused_param",
                "param_3": "size",
                "param_4": "value"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "get_next_byte_from_array_08001c08",
            "code": "\nundefined get_next_byte_from_array_08001c08(void)\n\n{\n  undefined nextByte;\n  \n  nextByte = get_next_byte_from_array_08001c08_08002720(&DAT_20000314);\n  return nextByte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "get_next_byte_from_array_08001c08",
                "uVar1": "nextByte"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_i2_c_data_08001c18",
            "code": "\nvoid processI2CData_08001c18(undefined4 deviceAddress,uint registerAddress,int expectedDataLength,undefined4 dataToWrite)\n\n{\n  undefined receivedData;\n  int dataDifference;\n  int currentDataDifference;\n  bool isDataPresent;\n  \n  if (registerAddress == 0xffffffff) {\n    registerAddress = 0;\n  }\n  else {\n    beginTransmission(&DAT_20000314,deviceAddress);\n    wireWrite(registerAddress & 0xff);\n    perform_i2_c_write_08002a58(&DAT_20000314,dataToWrite);\n  }\n  requestFrom(&DAT_20000314,deviceAddress,expectedDataLength);\n  dataDifference = get_data_difference_0800270c(&DAT_20000314);\n  if (expectedDataLength < dataDifference) {\n    printErrorMessage(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    dataDifference = get_data_difference_0800270c(&DAT_20000314);\n    if (dataDifference < expectedDataLength) {\n      printErrorMessage(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)deviceAddress;\n  DAT_20000131 = (undefined)registerAddress;\n  dataDifference = 0;\n  while( true ) {\n    if (dataDifference < expectedDataLength) {\n      currentDataDifference = get_data_difference_0800270c(&DAT_20000314);\n      if (currentDataDifference == 0) {\n        isDataPresent = false;\n      }\n      else {\n        isDataPresent = true;\n      }\n    }\n    else {\n      isDataPresent = false;\n    }\n    if (!isDataPresent) break;\n    receivedData = wireRead();\n    (&DAT_20000132)[dataDifference] = receivedData;\n    dataDifference = dataDifference + 1;\n  }\n  sendSysexMessage(&DAT_200003d4,0x77,expectedDataLength + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_i2_c_data_08001c18",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "expectedDataLength",
                "param_4": "dataToWrite",
                "uVar1": "receivedData",
                "iVar2": "dataDifference",
                "iVar3": "currentDataDifference",
                "bVar4": "isDataPresent",
                "send_string_plus_offset_08002f14": "printErrorMessage",
                "send_sysex_with_offset_08002f0a": "sendSysexMessage"
            },
            "calling": [
                "loop",
                "sysexCallback"
            ],
            "called": [
                "FUN_08002a58",
                "requestFrom",
                "FUN_08002f14",
                "FUN_0800270c",
                "beginTransmission",
                "FUN_08002f0a",
                "wireRead",
                "wireWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "execute_command_08001cd0",
            "code": "\nvoid executeCommand_08001cd0(undefined4 command,int length,byte *data,undefined4 param_4)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  undefined4 result;\n  byte byte4;\n  char char1;\n  int var1;\n  int var2;\n  uint loopIndex;\n  uint loopIndex2;\n  int loopVar;\n  bool condition;\n  \n  switch(command) {\n  case 0x69:\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_function_08002f1e(&DAT_200003d4,0x6a);\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      loopIndex2 = loopIndex - 0x2e & 0xff;\n      if (loopIndex2 < 0xe) {\n        if (loopIndex < 0x3c) {\n          var1 = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          var1 = -1;\n        }\n        var1 = pinNametoDigitalPin(var1);\n        if (var1 == 0) {\n          loopIndex2 = 0x7f;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            var1 = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            var1 = -1;\n          }\n          var1 = pinNametoDigitalPin(var1);\n          if (var1 == 1) {\n            loopIndex2 = 0x7f;\n          }\n        }\n      }\n      else {\n        loopIndex2 = 0x7f;\n      }\n      execute_callback_function_08002f1e(&DAT_200003d4,loopIndex2);\n    }\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_callback_function_08002f1e(&DAT_200003d4,0x6c);\n    for (loopIndex = 0; loopIndex < 0x3c; loopIndex = loopIndex + 1 & 0xff) {\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          condition = false;\n        }\n        else {\n          var1 = pinNametoDigitalPin();\n          if (var1 == 0) {\n            condition = false;\n          }\n          else {\n            var1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (var1 == 1) {\n              condition = false;\n            }\n            else {\n              condition = true;\n            }\n          }\n        }\n      }\n      else {\n        condition = false;\n      }\n      if (condition) {\n        execute_callback_function_08002f1e(&DAT_200003d4,0);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n        execute_callback_function_08002f1e(&DAT_200003d4,0xb);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((loopIndex - 0x2e & 0xff) < 0xe) {\n        if (loopIndex < 0x3c) {\n          var1 = (int)(char)(&DAT_0800a908)[loopIndex];\n        }\n        else {\n          var1 = -1;\n        }\n        var1 = pinNametoDigitalPin(var1);\n        if (var1 == 0) {\n          condition = false;\n        }\n        else {\n          if (loopIndex < 0x3c) {\n            var1 = (int)(char)(&DAT_0800a908)[loopIndex];\n          }\n          else {\n            var1 = -1;\n          }\n          var1 = pinNametoDigitalPin(var1);\n          if (var1 == 1) {\n            condition = false;\n          }\n          else {\n            condition = true;\n          }\n        }\n      }\n      else {\n        condition = false;\n      }\n      if (condition) {\n        execute_callback_function_08002f1e(&DAT_200003d4,2);\n        execute_callback_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          var1 = 0;\n        }\n        else {\n          var1 = pinNametoDigitalPin();\n          if (var1 == 0) {\n            var1 = 0;\n          }\n          else {\n            var1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (var1 == 1) {\n              var1 = 0;\n            }\n            else {\n              var1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        var1 = 0;\n      }\n      if (var1 != 0) {\n        execute_callback_function_08002f1e(&DAT_200003d4,3);\n        execute_callback_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          condition = false;\n        }\n        else {\n          var1 = pinNametoDigitalPin();\n          if (var1 == 0) {\n            condition = false;\n          }\n          else {\n            var1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (var1 == 1) {\n              condition = false;\n            }\n            else {\n              condition = true;\n            }\n          }\n        }\n      }\n      else {\n        condition = false;\n      }\n      if (condition) {\n        execute_callback_function_08002f1e(&DAT_200003d4,4);\n        execute_callback_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          var1 = 0;\n        }\n        else {\n          var1 = pinNametoDigitalPin();\n          if (var1 == 0) {\n            var1 = 0;\n          }\n          else {\n            var1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (var1 == 1) {\n              var1 = 0;\n            }\n            else {\n              var1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a69c);\n              if (var1 == 0) {\n                var1 = pin_in_pinmap((int)(char)(&DAT_0800a908)[loopIndex],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        var1 = 0;\n      }\n      if (var1 != 0) {\n        execute_callback_function_08002f1e(&DAT_200003d4,6);\n        execute_callback_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_callback_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_callback_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byte1 = *data;\n      execute_callback_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_callback_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_callback_function_08002f1e(&DAT_200003d4,byte1);\n      if (byte1 < 0x3c) {\n        result = getPinMode(&DAT_200003d4,byte1);\n        execute_callback_function_08002f1e(&DAT_200003d4,result);\n        loopIndex = getPinState(&DAT_200003d4,byte1);\n        execute_callback_function_08002f1e(&DAT_200003d4,loopIndex & 0x7f);\n        loopIndex = getPinState(&DAT_200003d4,byte1);\n        if ((loopIndex & 0xff80) != 0) {\n          var1 = getPinState(&DAT_200003d4,byte1);\n          execute_callback_function_08002f1e(&DAT_200003d4,(uint)(var1 << 0x12) >> 0x19);\n        }\n        loopIndex = getPinState(&DAT_200003d4,byte1);\n        if ((loopIndex & 0xc000) != 0) {\n          var1 = getPinState(&DAT_200003d4,byte1);\n          execute_callback_function_08002f1e(&DAT_200003d4,(uint)(var1 << 0xb) >> 0x19);\n        }\n      }\n      execute_callback_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      loopIndex = (uint)data[1];\n      if (2 < length) {\n        loopIndex = loopIndex | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        loopIndex = loopIndex | (uint)data[3] << 0xe;\n      }\n      analogWriteCallback(*data,loopIndex);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      loopIndex = (uint)*data;\n      byte1 = data[1];\n      byte4 = data[2];\n      byte2 = data[3];\n      byte3 = data[4];\n      if (loopIndex < 0x3c) {\n        if ((&DAT_0800a908)[loopIndex] == -1) {\n          condition = false;\n        }\n        else {\n          var1 = pinNametoDigitalPin();\n          if (var1 == 0) {\n            condition = false;\n          }\n          else {\n            var1 = pinNametoDigitalPin((int)(char)(&DAT_0800a908)[loopIndex]);\n            if (var1 == 1) {\n              condition = false;\n            }\n            else {\n              condition = true;\n            }\n          }\n        }\n      }\n      else {\n        condition = false;\n      }\n      if (condition) {\n        if ((byte)(&DAT_200001f0)[loopIndex] < 0xc) {\n          var1 = attached(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[loopIndex] * 3);\n        }\n        else {\n          var1 = 0;\n        }\n        if (var1 != 0) {\n          detachServo(loopIndex);\n        }\n        attachServo(loopIndex,(uint)byte1 + (uint)byte4 * 0x80,(uint)byte2 + (uint)byte3 * 0x80);\n        setPinModeCallback(loopIndex,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byte1 = data[1];\n    byte4 = byte1 & 0x18;\n    if ((byte1 & 0x20) != 0) {\n      send_string_plus_offset_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byte4,byte1,param_4);\n      return;\n    }\n    byte2 = *data;\n    condition = (byte1 & 0x40) == 0;\n    if (byte4 < 0x19) {\n      switch(byte4) {\n      case 0:\n        beginTransmission(&DAT_20000314,byte2);\n        for (loopIndex = 2; (int)loopIndex < length; loopIndex = loopIndex + 2 & 0xff) {\n          wireWrite(data[loopIndex + 1] * -0x80 + data[loopIndex]);\n        }\n        endTransmission(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          var1 = (uint)data[2] + (uint)data[3] * 0x80;\n          char1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          char1 = data[2] + data[3] * -0x80;\n          var1 = -1;\n        }\n        readAndReportData(byte2,var1,char1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            var1 = (uint)data[2] + (uint)data[3] * 0x80;\n            char1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            char1 = data[2] + data[3] * -0x80;\n            var1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          var2 = (int)DAT_20000004;\n          loopVar = var2 * 0xc;\n          (&DAT_20000188)[loopVar] = byte2;\n          (&DAT_2000018c)[var2 * 3] = var1;\n          (&DAT_20000190)[loopVar] = char1;\n          (&DAT_20000191)[loopVar] = condition;\n          return;\n        }\n        send_string_plus_offset_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,condition,param_4);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (loopIndex = 0; var1 = DAT_20000004 + 1, (int)loopIndex < var1; loopIndex = loopIndex + 1 & 0xff) {\n        if (byte2 == (&DAT_20000188)[loopIndex * 0xc]) goto LAB_08001e66;\n      }\n      loopIndex = 0;\nLAB_08001e66:\n      for (; (int)loopIndex < var1; loopIndex = loopIndex + 1 & 0xff) {\n        if (loopIndex < 8) {\n          var2 = (loopIndex + 1) * 0xc;\n          loopVar = loopIndex * 0xc;\n          (&DAT_20000188)[loopVar] = (&DAT_20000188)[var2];\n          (&DAT_2000018c)[loopIndex * 3] = (&DAT_2000018c)[(loopIndex + 1) * 3];\n          (&DAT_20000190)[loopVar] = (&DAT_20000190)[var2];\n          (&DAT_20000191)[loopVar] = (&DAT_20000191)[var2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    var1 = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (var1 != 0)) {\n      DAT_2000012c = var1;\n    }\n    if (DAT_20000170 == '\\0') {\n      enableI2CPins();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "execute_command_08001cd0",
                "param_1": "command",
                "param_2": "length",
                "param_3": "data",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "uVar4": "result",
                "bVar5": "byte4",
                "cVar6": "char1",
                "iVar7": "var1",
                "iVar8": "var2",
                "uVar9": "loopIndex",
                "uVar10": "loopIndex2",
                "iVar11": "loopVar",
                "bVar12": "condition"
            },
            "calling": [],
            "called": [
                "pin_in_pinmap",
                "FUN_08002f14",
                "readAndReportData",
                "attachServo",
                "pinNametoDigitalPin",
                "FUN_08002f1e",
                "endTransmission",
                "getPinState",
                "enableI2CPins",
                "analogWriteCallback",
                "beginTransmission",
                "getPinMode",
                "attached",
                "setPinModeCallback",
                "wireWrite",
                "detachServo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_digital_inputs_080022f8",
            "code": "\nvoid processDigitalInputs_080022f8(void)\n\n{\n  bool bVar1;\n  int result;\n  undefined4 analogValue;\n  uint index;\n  uint pinIndex;\n  \n  checkDigitalInputs();\n  while (result = execute_function_08002ec4(&DAT_200003d4), result != 0) {\n    processInput(&DAT_200003d4);\n  }\n  DAT_20000118 = millis();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (index = 0; index < 0x3c; index = index + 1 & 0xff) {\n      pinIndex = index - 0x2e & 0xff;\n      if (pinIndex < 0xe) {\n        if (index < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[index];\n        }\n        else {\n          result = -1;\n        }\n        result = pinNametoDigitalPin(result);\n        if (result == 0) {\n          bVar1 = false;\n        }\n        else {\n          if (index < 0x3c) {\n            result = (int)(char)(&DAT_0800a908)[index];\n          }\n          else {\n            result = -1;\n          }\n          result = pinNametoDigitalPin(result);\n          if (result == 1) {\n            bVar1 = false;\n          }\n          else {\n            result = getPinMode(&DAT_200003d4,index);\n            if (result == 2) {\n              bVar1 = true;\n            }\n            else {\n              bVar1 = false;\n            }\n          }\n        }\n      }\n      else {\n        bVar1 = false;\n      }\n      if ((bVar1) && ((DAT_20000114 >> pinIndex & 1U) != 0)) {\n        analogValue = analogRead(pinIndex);\n        send_analog_data_08002ef2(&DAT_200003d4,pinIndex,analogValue);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (index = 0; (int)index < DAT_20000004 + 1; index = index + 1 & 0xff) {\n        result = index * 0xc;\n        readAndReportData((&DAT_20000188)[result],(&DAT_2000018c)[index * 3],(&DAT_20000190)[result],\n                          (&DAT_20000191)[result]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_digital_inputs_080022f8",
                "iVar2": "result",
                "uVar3": "analogValue",
                "uVar4": "index",
                "uVar5": "pinIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "processInput",
                "analogRead",
                "readAndReportData",
                "FUN_08002ec4",
                "pinNametoDigitalPin",
                "millis",
                "checkDigitalInputs",
                "getPinMode",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_data_item_08002400",
            "code": "\nundefined4 check_data_item_08002400(int index)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(index * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_data_item_08002400",
                "param_1": "index",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_080025ac",
                "detach"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_timer_pulse_0800242c",
            "code": "\nvoid initializeTimerPulse_0800242c(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initializePulseWithTimer(param_1,60000,0x5dc,&pulseTriggerCallback,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_timer_pulse_0800242c",
                "TimerPulseInit": "initializePulseWithTimer",
                "LAB_08002444_1": "pulseTriggerCallback"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "TimerPulseInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "deinitialize_timer_pulse_08002578",
            "code": "\nvoid deinitializeTimerPulse_08002578(void)\n\n{\n  TimerPulseDeinit();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "deinitialize_timer_pulse_08002578"
            },
            "calling": [
                "detach"
            ],
            "called": [
                "TimerPulseDeinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *dataPointer)\n\n{\n  char nextCharacter;\n  uint dataSize;\n  \n  dataSize = (uint)DAT_20000250;\n  if (0xb < dataSize) {\n    *dataPointer = 0xff;\n    return;\n  }\n  nextCharacter = DAT_20000250 + 1;\n  *dataPointer = DAT_20000250;\n  DAT_20000250 = nextCharacter;\n  *(undefined4 *)(&DAT_2000025c + dataSize * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "dataPointer",
                "cVar1": "nextCharacter",
                "uVar2": "dataSize"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "pin_mode_and_set_timer_080025ac",
            "code": "\nbyte pinModeAndSetTimer_080025ac(byte *data,uint pin,int value_1,int value_2)\n\n{\n  uint updated_data;\n  uint index;\n  uint divided_data;\n  int temp_var;\n  \n  if (*data < 0xc) {\n    setPinMode(pin,1,value_1,*data,value_2);\n    index = (uint)*data;\n    updated_data = (byte)(&DAT_20000258)[index * 8] & 0xffffffc0 | pin & 0x3f;\n    (&DAT_20000258)[index * 8] = (char)updated_data;\n    temp_var = -value_1 + 0x220;\n    if (temp_var < 0) {\n      temp_var = -value_1 + 0x223;\n    }\n    data[1] = (byte)((uint)(temp_var << 0x16) >> 0x18);\n    temp_var = -value_2 + 0x960;\n    if (temp_var < 0) {\n      temp_var = -value_2 + 0x963;\n    }\n    data[2] = (byte)((uint)(temp_var << 0x16) >> 0x18);\n    divided_data = *data / 0xc;\n    temp_var = checkTimerActivity(divided_data,updated_data,index,(uint)*data * -0x55555555);\n    if (temp_var == 0) {\n      DAT_200002fc = (undefined)divided_data;\n      initializeISR();\n    }\n    (&DAT_20000258)[(uint)*data * 8] = (&DAT_20000258)[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "pin_mode_and_set_timer_080025ac",
                "param_1": "data",
                "param_2": "pin",
                "param_3": "value_1",
                "param_4": "value_2",
                "uVar1": "updated_data",
                "uVar2": "index",
                "uVar3": "divided_data",
                "iVar4": "temp_var",
                "pinMode": "setPinMode",
                "isTimerActive": "checkTimerActivity",
                "initISR": "initializeISR"
            },
            "calling": [
                "attachServo",
                "FUN_08002634"
            ],
            "called": [
                "initISR",
                "isTimerActive",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "initialize_timer_08002634",
            "code": "\nvoid initializeTimer_08002634(undefined4 pin1,undefined4 pin2,undefined4 constant1,undefined4 constant2)\n\n{\n  pin_mode_and_set_timer_080025ac(pin1,pin2,0x220,0x960,constant2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "initialize_timer_08002634",
                "param_1": "pin1",
                "param_2": "pin2",
                "param_3": "constant1",
                "param_4": "constant2"
            },
            "calling": [
                "attachServo"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "execute_timer_action_08002644",
            "code": "\nvoid executeTimerAction_08002644(byte *byteArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte currentByte;\n  uint firstByte;\n  int isActive;\n  \n  firstByte = (uint)*byteArray;\n  currentByte = (andDAT_20000258)[firstByte * 8];\n  (andDAT_20000258)[firstByte * 8] = currentByte and 0xbf;\n  isActive = checkTimerStatus(firstByte / 0xc,param2,currentByte and 0xbf,firstByte * -0x55555555,param4);\n  if (isActive equalTo 0) {\n    finishInterruptServiceRoutine(andDAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "execute_timer_action_08002644",
                "param_1": "byteArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "currentByte",
                "uVar2": "firstByte",
                "iVar3": "isActive",
                "isTimerActive": "checkTimerStatus",
                "finISR": "finishInterruptServiceRoutine",
                "&": "and",
                "==": "equalTo"
            },
            "calling": [
                "detachServo"
            ],
            "called": [
                "finISR",
                "isTimerActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "update_array_value_0800267c",
            "code": "\nvoid updateArrayValue_0800267c(byte *param_1,int value)\n\n{\n  int index;\n  \n  if (*param_1 < 0xc) {\n    index = (0x88 - (char)param_1[1]) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - (char)param_1[2]) * 4,\n       value == index || value + (600 - (char)param_1[2]) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*param_1 * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "update_array_value_0800267c",
                "param_2": "value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "write_pulse_duration_080026b0",
            "code": "\nvoid write_pulse_duration_080026b0(int pin_number,int input_value)\n\n{\n  if (input_value < 0x220) {\n    if (input_value < 0) {\n      input_value = 0;\n    }\n    else if (0xb4 < input_value) {\n      input_value = 0xb4;\n    }\n    input_value = map(input_value,0,0xb4,(0x88 - *(char *)(pin_number + 1)) * 4,\n                  (600 - *(char *)(pin_number + 2)) * 4);\n  }\n  write_pulse_duration_080026b0_to_pin;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "write_pulse_duration_080026b0",
                "param_1": "pin_number",
                "param_2": "input_value",
                "writeMicroseconds(param_1,param_2)": "write_pulse_duration_to_pin"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "writeMicroseconds",
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_bit_080026f8",
            "code": "\nuint extractBit_080026f8(byte *inputData)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*inputData * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_bit_080026f8",
                "param_1": "inputData"
            },
            "calling": [
                "sysexCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "get_data_difference_0800270c",
            "code": "\nint get_data_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "get_data_difference_0800270c"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "get_next_byte_from_array_08002720",
            "code": "\nuint get_next_byte_from_array_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "get_next_byte_from_array_08002720",
                "uVar1": "index"
            },
            "calling": [
                "wireRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "write_data_080027f0",
            "code": "\nuint write_data_080027f0(int device_address,undefined4 data,uint data_size)\n\n{\n  int result;\n  uint new_data_size;\n  \n  if (DAT_200003b4 == '\\0') {\n    result = i2c_slave_write_IT(device_address + 0x14,data,data_size & 0xffff);\n    if (result == 0) {\n      return data_size;\n    }\n    return 0;\n  }\n  new_data_size = DAT_200003b8 + data_size;\n  if (DAT_200003c5 < new_data_size) {\n    if (new_data_size < 0x20) {\n      new_data_size = 0x20;\n    }\n    DAT_200003cc = realloc(DAT_200003cc,new_data_size);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)new_data_size;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(device_address + 4) = 1;\n    return 0;\n  }\n  memcpy((uint)DAT_200003b6 + DAT_200003cc,data,data_size);\n  DAT_200003b6 = DAT_200003b6 + (char)data_size;\n  DAT_200003b8 = DAT_200003b6;\n  return data_size;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "write_data_080027f0",
                "param_1": "device_address",
                "param_2": "data",
                "param_3": "data_size",
                "iVar1": "result",
                "uVar2": "new_data_size"
            },
            "calling": [],
            "called": [
                "memcpy",
                "realloc",
                "i2c_slave_write_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "write_data_0800288c",
            "code": "\nundefined4 writeData_0800288c(int deviceAddress,undefined data)\n\n{\n  undefined4 returnValue;\n  int writeResult;\n  uint newSize;\n  undefined byteValue;\n  \n  byteValue = data;\n  if (DAT_200003b4 == '\\0') {\n    writeResult = i2c_slave_write_IT(deviceAddress + 0x14,&byteValue,1);\n    if (writeResult == 0) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    newSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newSize) {\n      if (newSize < 0x20) {\n        newSize = 0x20;\n      }\n      DAT_200003cc = realloc(DAT_200003cc,newSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(deviceAddress + 4) = 1;\n      returnValue = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = byteValue;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      returnValue = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "write_data_0800288c",
                "param_1": "deviceAddress",
                "param_2": "data",
                "uVar1": "returnValue",
                "iVar2": "writeResult",
                "uVar3": "newSize",
                "local_11": "byteValue"
            },
            "calling": [
                "wireWrite"
            ],
            "called": [
                "realloc",
                "i2c_slave_write_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_param_0800291c",
            "code": "\nvoid initializeParam_0800291c(undefined4 *paramArray)\n\n{\n  paramArray[1] = 0;\n  paramArray[2] = 1000;\n  *paramArray = &PTR_FUN_0800288c_1_0800a5a0;\n  *(undefined *)(paramArray + 0x1b) = 0x19;\n  *(undefined *)((int)paramArray + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_param_0800291c",
                "param_1": "paramArray"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "handle_param_08002948",
            "code": "\nvoid handle_param_08002948(int param_status,int param_value)\n\n{\n  if (param_status != 1) {\n    return;\n  }\n  if (param_value == 0xffff) {\n    TwoWire(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "handle_param_08002948",
                "param_1": "param_status",
                "param_2": "param_value"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN7TwoWire8rxBufferE"
            ],
            "called": [
                "TwoWire"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_i2_c_08002968",
            "code": "\nvoid initializeI2C_08002968(int i2cPort,uint configData)\n\n{\n  int shiftedConfigData;\n  int i2cDevice;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    memset(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    memset(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedConfigData = (configData & 0x7f) << 1;\n  *(char *)(i2cPort + 0x10) = (char)shiftedConfigData;\n  if (configData == 0x33) {\n    *(undefined *)(i2cPort + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(i2cPort + 0x11) = 0;\n  }\n  i2cDevice = i2cPort + 0x14;\n  i2c_custom_init(i2cDevice,100000,0x4000,shiftedConfigData,*(undefined *)(i2cPort + 0x11));\n  if (*(char *)(i2cPort + 0x11) == '\\0') {\n    i2c_attachSlaveTxEvent(i2cDevice,&LAB_08002774_1);\n    i2c_attachSlaveRxEvent(i2cDevice,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_i2_c_08002968",
                "param_1": "i2cPort",
                "param_2": "configData",
                "iVar1": "shiftedConfigData",
                "iVar2": "i2cDevice"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "i2c_attachSlaveRxEvent",
                "i2c_custom_init",
                "memset",
                "i2c_attachSlaveTxEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_i2c_08002a1c",
            "code": "\nvoid initialize_i2c_08002a1c(undefined4 param_address,undefined param_undefined,undefined4 param_value1,undefined4 param_value2)\n\n{\n  initialize_i2_c_08002968(param_address,param_undefined,param_value1,param_value2,param_value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_i2c_08002a1c",
                "param_1": "param_address",
                "param_2": "param_undefined",
                "param_3": "param_value1",
                "param_4": "param_value2"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_i2c_device_08002a26",
            "code": "\nvoid initialize_i2c_device_08002a26(undefined4 param_1,undefined4 param_2,undefined4 device_address,undefined4 param_4)\n\n{\n  initialize_i2c_08002a1c(param_1,0x33,device_address,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_i2c_device_08002a26",
                "param_3": "device_address"
            },
            "calling": [
                "enableI2CPins"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 param1,int param2)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(param2 << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "readAndReportData",
                "FUN_08002b68",
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "perform_i2_c_write_08002a58",
            "code": "\nundefined4 performI2CWrite_08002a58(int deviceAddress)\n\n{\n  int writeResult;\n  undefined4 returnCode;\n  \n  if (*(char *)(deviceAddress + 0x11) == '\\0') {\n    returnCode = 4;\n  }\n  else {\n    writeResult = i2c_master_write(deviceAddress + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (writeResult == 0) {\n      returnCode = 0;\n    }\n    else if (writeResult == 1) {\n      returnCode = 1;\n    }\n    else {\n      returnCode = 4;\n    }\n    if (DAT_200003cc != 0) {\n      memset(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "perform_i2_c_write_08002a58",
                "param_1": "deviceAddress",
                "iVar1": "writeResult",
                "uVar2": "returnCode"
            },
            "calling": [
                "readAndReportData",
                "FUN_08002b68",
                "endTransmission"
            ],
            "called": [
                "i2c_master_write",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "perform_i2c_write_08002ac0",
            "code": "\nvoid perform_i2c_write_08002ac0(undefined4 device_address,undefined4 unused_param,undefined4 register_address,undefined4 data)\n\n{\n  perform_i2_c_write_08002a58(device_address,1,register_address,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "perform_i2c_write_08002ac0",
                "param_1": "device_address",
                "param_2": "unused_param",
                "param_3": "register_address",
                "param_4": "data"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "resize_array_08002acc",
            "code": "\nvoid resizeArray_08002acc(uint currentSize,undefined4 unused1,undefined4 unused2,undefined4 unused3)\n\n{\n  if (DAT_200003c4 < currentSize) {\n    if (currentSize < 0x20) {\n      currentSize = 0x20;\n    }\n    DAT_200003c8 = realloc(DAT_200003c8,currentSize,unused2,(uint)DAT_200003c4,unused3);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)currentSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "resize_array_08002acc",
                "param_1": "currentSize",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "read_and_process_data_08002b68",
            "code": "\nundefined4\nreadAndProcessData_08002b68(undefined4 *buffer,uint length,undefined4 bufferSize,uint data,byte flags)\n\n{\n  int result;\n  uint flagCount;\n  uint dataSize;\n  \n  flagCount = (uint)flags;\n  if (*(char *)((int)buffer + 0x11) == '\\0') {\n    return 0;\n  }\n  dataSize = data;\n  allocateRxBuffer(bufferSize);\n  if (DAT_200003c8 != 0) {\n    if (flagCount != 0) {\n      beginTransmission(buffer,length);\n      if (3 < flagCount) {\n        flagCount = 3;\n      }\n      while( true ) {\n        if (flagCount == 0) break;\n        (**(code **)*buffer)(buffer,data >> ((flagCount - 1 & 0x1f) << 3) & 0xff);\n        flagCount = flagCount - 1 & 0xff;\n      }\n      perform_i2_c_write_08002a58(buffer,0);\n    }\n    result = i2c_master_read(buffer + 5,(length & 0x7f) << 1,DAT_200003c8,bufferSize,dataSize);\n    if (result != 0) {\n      bufferSize = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)bufferSize;\n    return bufferSize;\n  }\n  buffer[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "read_and_process_data_08002b68",
                "param_1": "buffer",
                "param_2": "length",
                "param_3": "bufferSize",
                "param_4": "data",
                "param_5": "flags",
                "iVar1": "result",
                "uVar2": "flagCount",
                "uVar3": "dataSize"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "beginTransmission",
                "i2c_master_read",
                "allocateRxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "read_and_process_data_08002c00",
            "code": "\nvoid read_and_process_data_08002c00(void)\n\n{\n  read_and_process_data_08002c00_08002b68();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "read_and_process_data_08002c00"
            },
            "calling": [
                "requestFrom"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "parse_and_process_data_08002c14",
            "code": "\nvoid parse_and_process_data_08002c14(void)\n\n{\n  read_and_process_data_08002c00();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "parse_and_process_data_08002c14"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_handle_08002c1e",
            "code": "\nvoid initializeHandle_08002c1e(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  handle_param_08002948(1,0xffff,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_handle_08002c1e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "execute_callback_08002c2c",
            "code": "\nvoid executeCallback_08002c2c(undefined4 unusedParam,undefined4 callbackParam1,undefined4 callbackParam2,undefined4 callbackParam3)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(callbackParam1,callbackParam2,callbackParam2,DAT_200005d4,callbackParam3);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "execute_callback_08002c2c",
                "param_1": "unusedParam",
                "param_2": "callbackParam1",
                "param_3": "callbackParam2",
                "param_4": "callbackParam3"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_device_08002ce0",
            "code": "\nint initializeDevice_08002ce0(int param_1)\n\n{\n  int iVar1;\n  \n  initializeFirmataMarshaller(param_1 + 0x40);\n  iVar1 = param_1 + 0x44;\n  parseFirmata(iVar1,param_1,0x40);\n  *(undefined *)(param_1 + 0xc4) = 0;\n  *(undefined4 *)(param_1 + 200) = 0;\n  *(undefined *)(param_1 + 0x1f8) = 0;\n  updateParameter(iVar1,0xe0,staticAnalogCallback + 1,0);\n  updateParameter(iVar1,0x90,&LAB_08002c40_1,0);\n  updateParameter(iVar1,0xc0,&LAB_08002c7c_1,0);\n  updateParameter(iVar1,0xd0,&LAB_08002c90_1,0);\n  updateParameter(iVar1,0xf4,&LAB_08002c54_1,0);\n  updateParameter(iVar1,0xf5,&LAB_08002c68_1,0);\n  update_parameters_08003366(iVar1,0x71,&LAB_08002ca4_1,0);\n  attachDevice(iVar1,0xf0,&LAB_08002cb8_1,0);\n  updateData(iVar1,0x79,&LAB_08002e1a_1,param_1);\n  updateParameters(iVar1,0xf9,&LAB_08002dea_1,param_1);\n  updateParameters(iVar1,0xff,&LAB_08002cd0_1,0);\n  return param_1;\n}\n\n",
            "renaming": {
                "FirmataMarshaller": "initializeFirmataMarshaller",
                "FirmataParser": "parseFirmata",
                "update_params_08003306": "updateParameter",
                "attach": "attachDevice",
                "update_data_08003346": "updateData",
                "update_parameters_08003350": "updateParameters",
                "FUN_08002ce0": "initialize_device_08002ce0"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003350",
                "FirmataMarshaller",
                "FUN_08003346",
                "FUN_08003306",
                "FirmataParser",
                "FUN_08003366",
                "attach"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "process_param_08002dbc",
            "code": "\nvoid processParam_08002dbc(int inputParam,int flagParam)\n\n{\n  if (inputParam != 1) {\n    return;\n  }\n  if (flagParam == 0xffff) {\n    FirmataClass(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "process_param_08002dbc",
                "param_1": "inputParam",
                "param_2": "flagParam"
            },
            "calling": [],
            "called": [
                "FirmataClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "send_version_with_offset_08002ddc",
            "code": "\nvoid sendVersionWithOffset_08002ddc(int originalAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  sendVersion(originalAddress + 0x40,2,5,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "send_version_with_offset_08002ddc",
                "param_1": "originalAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "sendVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "send_firmware_version_if_not_zero_08002df6",
            "code": "\nvoid send_firmware_version_if_not_zero_08002df6(int device_address)\n\n{\n  undefined *firmware_info;\n  \n  if (*(byte *)(device_address + 0xc4) == 0) {\n    return;\n  }\n  firmware_info = *(undefined **)(device_address + 200);\n  send_firmware_version(device_address + 0x40,*firmware_info,firmware_info_length,*(byte *)(device_address + 0xc4) - 2,firmware_info + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "send_firmware_version_if_not_zero_08002df6",
                "param_1": "device_address",
                "puVar1": "firmware_info",
                "sendFirmwareVersion": "send_firmware_version",
                "puVar1[1]": "firmware_info_length"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "sendFirmwareVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_firmware_08002e26",
            "code": "\nvoid updateFirmware_08002e26(int deviceAddress,undefined4 firmwareVersion)\n\n{\n  *(undefined4 *)(deviceAddress + 0xc0) = firmwareVersion;\n  copyFirmwareData(deviceAddress + 0x40);\n  printDeviceVersion(deviceAddress);\n  printFirmwareVersion(deviceAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_firmware_08002e26",
                "param_1": "deviceAddress",
                "param_2": "firmwareVersion",
                "copy_value_08003154": "copyFirmwareData",
                "printVersion": "printDeviceVersion"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "printFirmwareVersion",
                "printVersion"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_filename_08002e44",
            "code": "\nvoid extractFilename_08002e44(int filePath,int str,undefined undefined1,undefined undefined2)\n\n{\n  byte bufferSize;\n  char strLength;\n  int cppIndex;\n  int fileSeparatorIndex;\n  undefined *buffer;\n  \n  cppIndex = strstr(str,\".cpp\");\n  fileSeparatorIndex = strrchr(str,0x2f);\n  if (fileSeparatorIndex == 0) {\n    fileSeparatorIndex = strrchr(str,0x5c);\n  }\n  if (fileSeparatorIndex != 0) {\n    str = fileSeparatorIndex + 1;\n  }\n  if (cppIndex == 0) {\n    strLength = strlen(str);\n    *(char *)(filePath + 0xc4) = strLength + '\\x02';\n  }\n  else {\n    *(char *)(filePath + 0xc4) = ((char)cppIndex - (char)str) + '\\x02';\n  }\n  free(*(undefined4 *)(filePath + 200));\n  bufferSize = *(byte *)(filePath + 0xc4);\n  buffer = (undefined *)malloc(bufferSize + 1);\n  *(undefined **)(filePath + 200) = buffer;\n  buffer[bufferSize] = 0;\n  *buffer = undefined1;\n  buffer[1] = undefined2;\n  strncpy(buffer + 2,str,*(byte *)(filePath + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_filename_08002e44",
                "param_1": "filePath",
                "param_2": "str",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "iVar3": "cppIndex",
                "iVar4": "fileSeparatorIndex",
                "puVar5": "buffer",
                "bVar1": "bufferSize",
                "cVar2": "strLength"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "strlen",
                "free",
                "strrchr",
                "strstr",
                "malloc",
                "strncpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid executeFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "parse_and_execute_08002ed2",
            "code": "\nvoid parse_and_execute_08002ed2(int binary_offset)\n\n{\n  uint result_code;\n  \n  result_code = (**(code **)(**(int **)(binary_offset + 0xc0) + 0xc))();\n  if (result_code != 0xffffffff) {\n    parse(binary_offset + 0x44,result_code & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "parse_and_execute_08002ed2",
                "param_1": "binary_offset",
                "uVar1": "result_code"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "parse"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "send_analog_data_08002ef2",
            "code": "\nvoid sendAnalogData_08002ef2(int deviceOffset,undefined4 param1,undefined2 param2,undefined4 param3)\n\n{\n  sendAnalog(deviceOffset + 0x40,param1,param2,param3,param3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "send_analog_data_08002ef2",
                "param_1": "deviceOffset",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "sendAnalog"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "send_port_data_08002efe",
            "code": "\nvoid send_port_data_08002efe(int port_offset,undefined4 data_1,undefined2 data_2,undefined4 data_3)\n\n{\n  sendDigitalPort(port_offset + 0x40,data_1,data_2,data_3,data_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "send_port_data_08002efe",
                "param_1": "port_offset",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3"
            },
            "calling": [
                "outputPort"
            ],
            "called": [
                "sendDigitalPort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "send_sysex_with_offset_08002f0a",
            "code": "\nvoid sendSysexWithOffset_08002f0a(int offset)\n\n{\n  sendSysex(offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "send_sysex_with_offset_08002f0a",
                "param_1": "offset"
            },
            "calling": [
                "readAndReportData"
            ],
            "called": [
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "send_string_plus_offset_08002f14",
            "code": "\nvoid sendStringPlusOffset_08002f14(int input)\n\n{\n  sendString(input + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "send_string_plus_offset_08002f14",
                "param_1": "input"
            },
            "calling": [
                "readAndReportData",
                "sysexCallback",
                "attachServo",
                "setPinModeCallback"
            ],
            "called": [
                "sendString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_callback_function_08002f1e",
            "code": "\nvoid execute_callback_function_08002f1e(int callback_function_address)\n\n{\n  (**(code **)**(undefined4 **)(callback_function_address + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_callback_function_08002f1e",
                "param_1": "callback_function_address"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 tempVar1;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    tempVar1 = param3;\n    if ((param2 != 0xf5) && (tempVar1 = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = tempVar1;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "tempVar1"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_parameter_08002f84",
            "code": "\nvoid updateParameter_08002f84(undefined4 newValue,int comparisonValue,undefined4 newValueToSet)\n\n{\n  if (comparisonValue == 0xff) {\n    DAT_200005e8 = newValueToSet;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_parameter_08002f84",
                "param_1": "newValue",
                "param_2": "comparisonValue",
                "param_3": "newValueToSet"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "initialize_data_08002f94",
            "code": "\nvoid initializeData_08002f94(undefined4 inputParam,undefined4 outputParam,undefined4 data)\n\n{\n  DAT_200005d0 = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "initialize_data_08002f94",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "param_3": "data"
            },
            "calling": [
                "setup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_value_at_offset_08002fa0",
            "code": "\nundefined getValueAtOffset_08002fa0(int offset,int baseAddress)\n\n{\n  return *(undefined *)(baseAddress + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_value_at_offset_08002fa0",
                "param_1": "offset",
                "param_2": "baseAddress"
            },
            "calling": [
                "loop",
                "sysexCallback",
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_character_08002fa8",
            "code": "\nvoid updateCharacter_08002fa8(int baseAddress,int offset,undefined newCharacter)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newCharacter;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_character_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newCharacter"
            },
            "calling": [
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_offset_value_08002fba",
            "code": "\nundefined4 getOffsetValue_08002fba(int baseAddress,int offsetIndex)\n\n{\n  return *(undefined4 *)(baseAddress + (offsetIndex + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_offset_value_08002fba",
                "param_1": "baseAddress",
                "param_2": "offsetIndex"
            },
            "calling": [
                "sysexCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "store_value_at_index_08002fc2",
            "code": "\nvoid storeValueAtIndex_08002fc2(int array,int index,undefined4 value)\n\n{\n  *(undefined4 *)(array + (index + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "store_value_at_index_08002fc2",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "blink_led_08002fca",
            "code": "\nvoid blinkLED_08002fca(undefined4 pinMode,undefined4 ledPin,int numBlinks,undefined4 delayOn,\n                 undefined4 delayOff)\n\n{\n  uint blinkCount;\n  \n  for (blinkCount = 0; (int)blinkCount < numBlinks; blinkCount = blinkCount + 1 & 0xff) {\n    delay(delayOff);\n    digitalWrite(ledPin,1);\n    delay(delayOn);\n    digitalWrite(ledPin,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "blink_led_08002fca",
                "param_1": "pinMode",
                "param_2": "ledPin",
                "param_3": "numBlinks",
                "param_4": "delayOn",
                "param_5": "delayOff",
                "uVar1": "blinkCount"
            },
            "calling": [
                "blinkVersion"
            ],
            "called": [
                "delay",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "initialize_pin_and_blink_08003002",
            "code": "\nvoid initializePinAndBlink_08003002(int pinNumber)\n\n{\n  if (*(char *)(pinNumber + 0x1f8) != '\\0') {\n    return;\n  }\n  setPinMode(0xd,1);\n  blinkPin(pinNumber,0xd,2,0x28,0xd2);\n  customDelay(0xfa);\n  blinkPin(pinNumber,0xd,5,0x28,0xd2);\n  customDelay(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "initialize_pin_and_blink_08003002",
                "param_1": "pinNumber",
                "pinMode": "setPinMode",
                "strobeBlinkPin": "blinkPin",
                "delay": "customDelay"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "strobeBlinkPin",
                "delay",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_firmware_update_08003048",
            "code": "\nvoid initializeFirmwareUpdate_08003048(undefined4 version,undefined4 data,undefined4 length,undefined4 crc)\n\n{\n  begin(&DAT_20000700,data,6,crc,crc);\n  blinkVersion(version);\n  updateFirmware(version,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_firmware_update_08003048",
                "param_1": "version",
                "param_2": "data",
                "param_3": "length",
                "param_4": "crc",
                "update_firmware_08002e26": "updateFirmware"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "FUN_08002e26",
                "blinkVersion",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_process_data_0800307a",
            "code": "\nvoid decode_and_process_data_0800307a(undefined4 *function_ptr,uint data_length,byte *data,uint max_iterations)\n\n{\n  uint current_byte;\n  uint bit_position;\n  uint iteration_count;\n  uint byte_index;\n  \n  current_byte = (uint)*data;\n  if (max_iterations == 0) {\n    max_iterations = 0xffffffff;\n  }\n  byte_index = 0;\n  bit_position = 0;\n  iteration_count = 0;\n  while ((byte_index < data_length && (iteration_count < max_iterations))) {\n    (***(code ***)(undefined4 *)*function_ptr)\n              ((undefined4 *)*function_ptr,((uint)data[byte_index] << (bit_position & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)data[byte_index] >> (7 - bit_position & 0xff) & 0xff;\n    bit_position = bit_position + 1;\n    while ((iteration_count = iteration_count + 1, 6 < bit_position && (iteration_count < max_iterations))) {\n      (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_position = bit_position - 7;\n    }\n    byte_index = byte_index + 1;\n  }\n  if ((bit_position != 0) && (iteration_count < max_iterations)) {\n    (***(code ***)(undefined4 *)*function_ptr)((undefined4 *)*function_ptr,(1 << (bit_position & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_process_data_0800307a",
                "param_1": "function_ptr",
                "param_2": "data_length",
                "param_3": "data",
                "param_4": "max_iterations",
                "uVar1": "current_byte",
                "uVar2": "bit_position",
                "uVar3": "iteration_count",
                "uVar4": "byte_index"
            },
            "calling": [
                "sendExtendedAnalog",
                "sendDigitalPort",
                "sendFirmwareVersion",
                "sendSysex",
                "sendAnalog"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "process_data_08003106",
            "code": "\nvoid processData_08003106(undefined4 *dataPtr,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 *functionPtr;\n  \n  functionPtr = (undefined4 *)*dataPtr;\n  if (functionPtr != (undefined4 *)0x0) {\n    (**(code **)*functionPtr)(functionPtr,0xf0);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0x6f);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,value1);\n    encodeByteStream(dataPtr,value2,value3,value2);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "process_data_08003106",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "puVar1": "functionPtr"
            },
            "calling": [
                "sendAnalog"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_variable_0800314e",
            "code": "\nvoid initializeVariable_0800314e(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_variable_0800314e",
                "param_1": "outputPointer"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_08003154",
            "code": "\nvoid copyValue_08003154(undefined4 *destination,undefined4 source)\n\n{\n  *destination = source;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_08003154",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "send_data_08003158",
            "code": "\nvoid sendData_08003158(undefined4 *dataPtr,uint dataSize,ushort dataValue)\n\n{\n  undefined4 *ptr;\n  ushort encodedData;\n  \n  ptr = (undefined4 *)*dataPtr;\n  if (ptr != (undefined4 *)0x0) {\n    encodedData = dataValue;\n    if (((int)dataSize < 0x10) && (dataValue < 0x4000)) {\n      (**(code **)*ptr)(ptr,dataSize | 0xe0);\n      encodeByteStream(dataPtr,2,&encodedData);\n    }\n    else {\n      sendExtendedAnalog(dataPtr,dataSize,2,&encodedData);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "send_data_08003158",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "param_3": "dataValue",
                "puVar1": "ptr",
                "local_a": "encodedData"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "sendExtendedAnalog",
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_operation_0800319e",
            "code": "\nvoid executeOperation_0800319e(undefined4 *operation,uint flags,undefined2 value)\n\n{\n  undefined4 *functionPointer;\n  undefined2 encodedValue;\n  \n  functionPointer = (undefined4 *)*operation;\n  if (functionPointer != (undefined4 *)0x0) {\n    encodedValue = value;\n    (**(code **)*functionPointer)(functionPointer,flags & 0xf | 0x90);\n    encodeByteStream(operation,2,&encodedValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_operation_0800319e",
                "param_1": "operation",
                "param_2": "flags",
                "param_3": "value",
                "puVar1": "functionPointer",
                "local_a": "encodedValue"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "process_data_080031ce",
            "code": "\nvoid processData_080031ce(undefined4 *dataPtr,undefined4 value1,undefined4 value2,uint size,int offset\n                 )\n\n{\n  undefined4 *funcPtr;\n  uint i;\n  \n  funcPtr = (undefined4 *)*dataPtr;\n  if (funcPtr != (undefined4 *)0x0) {\n    (**(code **)*funcPtr)(funcPtr,0xf0,value2,*(code **)*funcPtr,size);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0x79);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,value1);\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,value2);\n    for (i = 0; i < size; i = i + 1) {\n      encodeByteStream(dataPtr,1,offset + i,0);\n    }\n    (***(code ***)(undefined4 *)*dataPtr)((undefined4 *)*dataPtr,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "process_data_080031ce",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "size",
                "param_5": "offset",
                "puVar1": "funcPtr",
                "uVar2": "i"
            },
            "calling": [
                "printFirmwareVersion"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_function_0800322c",
            "code": "\nvoid executeFunction_0800322c(undefined4 *functionPointer,undefined4 parameter1,undefined4 parameter2)\n\n{\n  undefined4 *pointerToFunction;\n  \n  pointerToFunction = (undefined4 *)*functionPointer;\n  if (pointerToFunction != (undefined4 *)0x0) {\n    (**(code **)*pointerToFunction)(pointerToFunction,0xf9);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,parameter1);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,parameter2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_function_0800322c",
                "param_1": "functionPointer",
                "param_2": "parameter1",
                "param_3": "parameter2",
                "puVar1": "pointerToFunction"
            },
            "calling": [
                "printVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "encode_and_transmit_data_0800325a",
            "code": "\nvoid encode_and_transmit_data_0800325a(undefined4 *data_pointer,undefined4 param_2,uint stream_length,int starting_index)\n\n{\n  undefined4 *function_pointer;\n  uint index;\n  \n  function_pointer = (undefined4 *)*data_pointer;\n  if (function_pointer != (undefined4 *)0x0) {\n    (**(code **)*function_pointer)(function_pointer,0xf0);\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,param_2);\n    for (index = 0; index < stream_length; index = index + 1) {\n      encodeByteStream(data_pointer,1,starting_index + index,0);\n    }\n    (***(code ***)(undefined4 *)*data_pointer)((undefined4 *)*data_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "encode_and_transmit_data_0800325a",
                "param_1": "data_pointer",
                "param_3": "stream_length",
                "param_4": "starting_index",
                "puVar1": "function_pointer",
                "uVar2": "index"
            },
            "calling": [
                "sendString",
                "FUN_08002f0a"
            ],
            "called": [
                "encodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "send_sysex_data_080032a2",
            "code": "\nvoid sendSysexData_080032a2(undefined4 deviceHandle,undefined4 data,undefined4 size,undefined4 options)\n\n{\n  undefined4 dataLength;\n  \n  dataLength = strlen(data);\n  sendSysex(deviceHandle,0x71,dataLength,data,options);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "send_sysex_data_080032a2",
                "param_1": "deviceHandle",
                "param_2": "data",
                "param_3": "size",
                "param_4": "options",
                "uVar1": "dataLength"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "strlen",
                "sendSysex"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_data_080032bc",
            "code": "\nvoid initializeData_080032bc(int data,int value,undefined4 param)\n\n{\n  *(int *)(data + 4) = value;\n  *(undefined4 *)(data + 8) = param;\n  *(undefined *)(data + 0xc) = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined4 *)(data + 0x10) = 0;\n  *(undefined *)(data + 0x14) = 0;\n  *(undefined4 *)(data + 0x18) = 0;\n  *(undefined4 *)(data + 0x1c) = 0;\n  *(undefined4 *)(data + 0x20) = 0;\n  *(undefined4 *)(data + 0x24) = 0;\n  *(undefined4 *)(data + 0x28) = 0;\n  *(undefined4 *)(data + 0x2c) = 0;\n  *(undefined4 *)(data + 0x30) = 0;\n  *(undefined4 *)(data + 0x34) = 0;\n  *(undefined4 *)(data + 0x38) = 0;\n  *(undefined4 *)(data + 0x3c) = 0;\n  *(undefined4 *)(data + 0x40) = 0;\n  *(undefined4 *)(data + 0x44) = 0;\n  *(undefined4 *)(data + 0x48) = 0;\n  *(undefined4 *)(data + 0x4c) = 0;\n  *(undefined4 *)(data + 0x50) = 0;\n  *(undefined4 *)(data + 0x54) = 0;\n  *(undefined4 *)(data + 0x58) = 0;\n  *(undefined4 *)(data + 0x5c) = 0;\n  *(undefined4 *)(data + 0x60) = 0;\n  *(undefined4 *)(data + 100) = 0;\n  *(undefined4 *)(data + 0x68) = 0;\n  *(undefined4 *)(data + 0x6c) = 0;\n  *(undefined4 *)(data + 0x70) = 0;\n  *(undefined4 *)(data + 0x74) = 0;\n  *(undefined4 *)(data + 0x78) = 0;\n  *(bool *)data = value == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_data_080032bc",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_params_08003306",
            "code": "\nvoid updateParams_08003306(int ptr,uint value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(ptr + 0x58) = newValue1;\n    *(undefined4 *)(ptr + 0x28) = newValue2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(ptr + 0x5c) = newValue1;\n      *(undefined4 *)(ptr + 0x2c) = newValue2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(ptr + 0x60) = newValue1;\n      *(undefined4 *)(ptr + 0x30) = newValue2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(ptr + 0x4c) = newValue1;\n      *(undefined4 *)(ptr + 0x1c) = newValue2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(ptr + 0x50) = newValue1;\n    *(undefined4 *)(ptr + 0x20) = newValue2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(ptr + 0x54) = newValue1;\n    *(undefined4 *)(ptr + 0x24) = newValue2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_params_08003306",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_data_08003346",
            "code": "\nvoid updateData_08003346(int baseAddress,int value,undefined4 data1,undefined4 data2)\n\n{\n  if (value == 0x79) {\n    *(undefined4 *)(baseAddress + 0x70) = data1;\n    *(undefined4 *)(baseAddress + 0x34) = data2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_data_08003346",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_parameters_08003350",
            "code": "\nvoid updateParameters_08003350(int dataStruct,int condition,undefined4 value1,undefined4 value2)\n\n{\n  if (condition == 0xf9) {\n    *(undefined4 *)(dataStruct + 0x74) = value1;\n    *(undefined4 *)(dataStruct + 0x38) = value2;\n    return;\n  }\n  if (condition != 0xff) {\n    return;\n  }\n  *(undefined4 *)(dataStruct + 0x78) = value1;\n  *(undefined4 *)(dataStruct + 0x48) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "dataStruct",
                "param_2": "condition",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_parameters_08003366",
            "code": "\nvoid updateParameters_08003366(int objectAddress,int value,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (value == 0x71) {\n    *(undefined4 *)(objectAddress + 0x68) = newValue1;\n    *(undefined4 *)(objectAddress + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_parameters_08003366",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_params_08003370",
            "code": "\nvoid setParams_08003370(int objAddress,undefined4 reserved1,undefined4 newParam1,undefined4 newParam2)\n\n{\n  *(undefined4 *)(objAddress + 0x6c) = newParam1;\n  *(undefined4 *)(objAddress + 0x44) = newParam2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_params_08003370",
                "param_1": "objAddress",
                "param_2": "reserved1",
                "param_3": "newParam1",
                "param_4": "newParam2"
            },
            "calling": [
                "FirmataClass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "update_value_08003376",
            "code": "\nvoid updateValue_08003376(undefined *data,undefined value,uint index)\n\n{\n  bool isOutOfBounds;\n  \n  if (index < *(uint *)(data + 8)) {\n    isOutOfBounds = false;\n  }\n  else {\n    isOutOfBounds = true;\n    if (*(code **)(data + 100) != (code *)0x0) {\n      *data = 1;\n      (**(code **)(data + 100))(*(undefined4 *)(data + 0x3c));\n      if (index < *(uint *)(data + 8)) {\n        isOutOfBounds = false;\n      }\n      else {\n        isOutOfBounds = true;\n      }\n    }\n  }\n  if (!isOutOfBounds) {\n    *(undefined *)(*(int *)(data + 4) + index) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "update_value_08003376",
                "param_1": "data",
                "param_2": "value",
                "param_3": "index",
                "bVar1": "isOutOfBounds"
            },
            "calling": [
                "processSysexMessage",
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bits_080033a8",
            "code": "\nvoid copyAndShiftBits_080033a8(undefined4 outputBuffer,uint bufferSize,int inputBuffer)\n\n{\n  byte currentByte;\n  int outputIndex;\n  uint inputIndex;\n  \n  outputIndex = 0;\n  for (inputIndex = 0; inputIndex < bufferSize; inputIndex = inputIndex + 2) {\n    currentByte = *(byte *)(inputBuffer + inputIndex);\n    *(byte *)(inputBuffer + outputIndex) = currentByte;\n    *(byte *)(inputBuffer + outputIndex) = *(char *)(inputBuffer + inputIndex + 1) << 7 | currentByte;\n    outputIndex = outputIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bits_080033a8",
                "param_1": "outputBuffer",
                "param_2": "bufferSize",
                "param_3": "inputBuffer",
                "bVar1": "currentByte",
                "iVar2": "outputIndex",
                "uVar3": "inputIndex"
            },
            "calling": [
                "processSysexMessage"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_080033cc",
            "code": "\nvoid processInput_080033cc(int inputStruct,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int decodedLength;\n  char *inputString;\n  \n  inputString = *(char **)(inputStruct + 4);\n  firstChar = *inputString;\n  if (firstChar == 'q') {\n    if (*(int *)(inputStruct + 0x68) != 0) {\n      decodedLength = decodeByteStream(inputStruct,*(int *)(inputStruct + 0x18) + -1,inputString + 1,inputString,param4);\n      bufferDataAtPosition(inputStruct,0,decodedLength + 1);\n      (**(code **)(inputStruct + 0x68))(*(undefined4 *)(inputStruct + 0x40),*(int *)(inputStruct + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputStruct + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputStruct + 0x18) < 3) {\n        (**(code **)(inputStruct + 0x70))(*(undefined4 *)(inputStruct + 0x34),0,0);\n        return;\n      }\n      decodedLength = decodeByteStream(inputStruct,*(uint *)(inputStruct + 0x18) - 3,inputString + 3,inputString,param4);\n      bufferDataAtPosition(inputStruct,0,decodedLength + 3);\n      decodedLength = *(int *)(inputStruct + 4);\n      (**(code **)(inputStruct + 0x70))\n                (*(undefined4 *)(inputStruct + 0x34),*(undefined *)(decodedLength + 1),*(undefined *)(decodedLength + 2)\n                 ,decodedLength + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputStruct + 0x6c) != (code *)0x0) {\n    (**(code **)(inputStruct + 0x6c))\n              (*(undefined4 *)(inputStruct + 0x44),firstChar,*(int *)(inputStruct + 0x18) + -1,inputString + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "inputStruct",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "decodedLength",
                "pcVar3": "inputString"
            },
            "calling": [
                "parse"
            ],
            "called": [
                "bufferDataAtPosition",
                "decodeByteStream"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_data_0800344a",
            "code": "\nvoid initializeData_0800344a(int dataAddress)\n\n{\n  uint index;\n  \n  *(undefined4 *)(dataAddress + 0x10) = 0;\n  *(undefined *)(dataAddress + 0xc) = 0;\n  *(undefined *)(dataAddress + 0xd) = 0;\n  for (index = 0; index < *(uint *)(dataAddress + 8); index = index + 1) {\n    *(undefined *)(*(int *)(dataAddress + 4) + index) = 0;\n  }\n  *(undefined *)(dataAddress + 0x14) = 0;\n  *(undefined4 *)(dataAddress + 0x18) = 0;\n  if (*(code **)(dataAddress + 0x78) != (code *)0x0) {\n    (**(code **)(dataAddress + 0x78))(*(undefined4 *)(dataAddress + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "dataAddress",
                "uVar1": "index"
            },
            "calling": [
                "parse"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_midi_event_08003474",
            "code": "\nvoid processMIDIEvent_08003474(int eventData,uint eventCode)\n\n{\n  byte tempByte;\n  \n  if (*(char *)(eventData + 0x14) != '\\0') {\n    if (eventCode != 0xf7) {\n      storeDataAtPosition(eventData,eventCode,*(undefined4 *)(eventData + 0x18));\n      *(int *)(eventData + 0x18) = *(int *)(eventData + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(eventData + 0x14) = 0;\n    handleSysexMessage();\n    return;\n  }\n  if ((*(int *)(eventData + 0x10) == 0) || (0x7f < (int)eventCode)) {\n    if ((int)eventCode < 0xf0) {\n      *(byte *)(eventData + 0xd) = (byte)eventCode & 0xf;\n      eventCode = eventCode & 0xf0;\n    }\n    if (eventCode == 0xf0) {\n      *(undefined *)(eventData + 0x14) = 1;\n      *(undefined4 *)(eventData + 0x18) = 0;\n      return;\n    }\n    if (eventCode < 0xf1) {\n      if (eventCode != 0xc0) {\n        if (eventCode < 0xc1) {\n          if (eventCode != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (eventCode == 0xd0) goto LAB_0800359c;\n          if (eventCode != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(eventData + 0x10) = 2;\n        *(char *)(eventData + 0xc) = (char)eventCode;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(eventData + 0x10) = 1;\n      *(char *)(eventData + 0xc) = (char)eventCode;\n      return;\n    }\n    if (eventCode != 0xf9) {\n      if (0xf9 < eventCode) {\n        if (eventCode == 0xff) {\n          performSystemReset(eventData);\n          return;\n        }\n        return;\n      }\n      if (1 < eventCode - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(eventData + 0x74) != (code *)0x0) {\n      (**(code **)(eventData + 0x74))(*(undefined4 *)(eventData + 0x38));\n    }\n  }\n  else {\n    *(int *)(eventData + 0x10) = *(int *)(eventData + 0x10) + -1;\n    storeDataAtPosition();\n    if ((*(int *)(eventData + 0x10) == 0) && (tempByte = *(byte *)(eventData + 0xc), tempByte != 0)) {\n      if (tempByte == 0xd0) {\n        if (*(code **)(eventData + 0x58) != (code *)0x0) {\n          (**(code **)(eventData + 0x58))\n                    (*(undefined4 *)(eventData + 0x28),*(undefined *)(eventData + 0xd),\n                     **(undefined **)(eventData + 4));\n        }\n      }\n      else if (tempByte < 0xd1) {\n        if (tempByte == 0x90) {\n          if (*(code **)(eventData + 0x50) != (code *)0x0) {\n            (**(code **)(eventData + 0x50))\n                      (*(undefined4 *)(eventData + 0x20),*(undefined *)(eventData + 0xd),\n                       (uint)(*(byte **)(eventData + 4))[1] + (uint)**(byte **)(eventData + 4) * 0x80);\n          }\n        }\n        else if ((tempByte == 0xc0) && (*(code **)(eventData + 0x54) != (code *)0x0)) {\n          (**(code **)(eventData + 0x54))\n                    (*(undefined4 *)(eventData + 0x24),*(undefined *)(eventData + 0xd),\n                     **(undefined **)(eventData + 4));\n        }\n      }\n      else if (tempByte == 0xf4) {\n        if (*(code **)(eventData + 0x5c) != (code *)0x0) {\n          (**(code **)(eventData + 0x5c))\n                    (*(undefined4 *)(eventData + 0x2c),(*(undefined **)(eventData + 4))[1],\n                     **(undefined **)(eventData + 4));\n        }\n      }\n      else if (tempByte == 0xf5) {\n        if (*(code **)(eventData + 0x60) != (code *)0x0) {\n          (**(code **)(eventData + 0x60))\n                    (*(undefined4 *)(eventData + 0x30),(*(undefined **)(eventData + 4))[1],\n                     **(undefined **)(eventData + 4));\n        }\n      }\n      else if ((tempByte == 0xe0) && (*(code **)(eventData + 0x4c) != (code *)0x0)) {\n        (**(code **)(eventData + 0x4c))\n                  (*(undefined4 *)(eventData + 0x1c),*(undefined *)(eventData + 0xd),\n                   (uint)(*(byte **)(eventData + 4))[1] + (uint)**(byte **)(eventData + 4) * 0x80);\n      }\n      *(undefined *)(eventData + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_midi_event_08003474",
                "param_1": "eventData",
                "param_2": "eventCode",
                "bVar1": "tempByte",
                "bufferDataAtPosition": "storeDataAtPosition",
                "processSysexMessage": "handleSysexMessage",
                "systemReset": "performSystemReset"
            },
            "calling": [
                "processInput"
            ],
            "called": [
                "systemReset",
                "processSysexMessage",
                "bufferDataAtPosition"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "configure_system_clock_080035b8",
            "code": "\nvoid configureSystemClock_080035b8(void)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 RCC_PeriphCLKInitTypeDef [2];\n  undefined4 uint32_t;\n  undefined4 RCC_OscInitTypeDef;\n  undefined4 uint32_t;\n  undefined4 uint32_t;\n  undefined4 uint32_t;\n  undefined4 uint32_t;\n  undefined4 RCC_OscInitTypeDef [4];\n  undefined4 RCC_ClkInitTypeDef;\n  undefined4 RCC_PeriphCLKInitTypeDef;\n  undefined4 RCC_OscInitTypeDef;\n  undefined4 RCC_ClkInitTypeDef;\n  undefined4 uint32_t;\n  \n  RCC_OscInitTypeDef[0] = 2;\n  RCC_ClkInitTypeDef = 1;\n  RCC_PeriphCLKInitTypeDef = 0x10;\n  RCC_OscInitTypeDef = 2;\n  RCC_ClkInitTypeDef = 0;\n  uint32_t = 0x380000;\n  iVar1 = HAL_RCC_OscConfig(RCC_OscInitTypeDef);\n  if (iVar1 != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x88);\n  }\n  RCC_OscInitTypeDef = 0xf;\n  uint32_t = 2;\n  uint32_t = 0;\n  uint32_t = 0x400;\n  uint32_t = 0;\n  iVar1 = HAL_RCC_ClockConfig(&RCC_OscInitTypeDef);\n  if (iVar1 != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x95);\n  }\n  RCC_PeriphCLKInitTypeDef[0] = 2;\n  uint32_t = 0x8000;\n  iVar1 = HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef);\n  if (iVar1 != 0) {\n    _Error_Handler(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                   ,0x9c);\n  }\n  uVar2 = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(uVar2 / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "configure_system_clock_080035b8",
                "local_30": "RCC_OscInitTypeDef",
                "local_20": "RCC_ClkInitTypeDef",
                "local_1c": "RCC_PeriphCLKInitTypeDef",
                "local_14": "RCC_OscInitTypeDef",
                "local_10": "RCC_ClkInitTypeDef",
                "local_c": "uint32_t",
                "local_54": "RCC_PeriphCLKInitTypeDef",
                "local_4c": "uint32_t",
                "local_44": "RCC_OscInitTypeDef",
                "local_40": "uint32_t",
                "local_3c": "uint32_t",
                "local_38": "uint32_t",
                "local_34": "uint32_t"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_RCC_GetHCLKFreq",
                "_Error_Handler",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig",
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003658": {
            "entrypoint": "0x08003658",
            "current_name": "initialize_system_08003658",
            "code": "\nvoid initializeSystem_08003658(void)\n\n{\n  int index;\n  undefined4 *dataPointer;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_200000f4; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800ac18);\n  }\n  for (dataPointer = &DAT_200000f4; dataPointer < &DAT_20000a3c; dataPointer = dataPointer + 1) {\n    *dataPointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x800368a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003658": "initialize_system_08003658",
                "iVar1": "index",
                "puVar2": "dataPointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "__libc_init_array",
                "SystemInit",
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_hardware_configuration_080036a2",
            "code": "\nvoid initializeHardwareConfiguration_080036a2(void)\n\n{\n  initializeHardware();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_hardware_configuration_080036a2",
                "hw_config_init": "initializeHardware"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_array_value_080036ac",
            "code": "\nuint check_array_value_080036ac(int input_value)\n\n{\n  uint index;\n  \n  if ((uint)(input_value << 0x18) >> 0x1c < 5) {\n    for (index = 0; (index < 0x3c && (input_value != (char)(&DAT_0800a908)[index])); index = index + 1)\n    {\n    }\n  }\n  else {\n    index = 0xffffffff;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_array_value_080036ac",
                "param_1": "input_value",
                "uVar1": "index"
            },
            "calling": [
                "loop",
                "sysexCallback",
                "checkDigitalInputs",
                "enableI2CPins",
                "FUN_0800021a",
                "systemResetCallback",
                "setPinModeCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "configure_systick_080036d8",
            "code": "\nundefined4 configureSystick_080036d8(uint priority)\n\n{\n  int status;\n  \n  status = configureSysTickTimer(DAT_20000018 / (1000 / DAT_2000000c));\n  if (status != 0) {\n    return 1;\n  }\n  if (0xf < priority) {\n    return 1;\n  }\n  setInterruptPriority(0xffffffff,priority,0);\n  DAT_20000010 = priority;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "configure_systick_080036d8",
                "param_1": "priority",
                "iVar1": "status",
                "HAL_SYSTICK_Config": "configureSysTickTimer",
                "HAL_NVIC_SetPriority": "setInterruptPriority"
            },
            "calling": [
                "FUN_080058d2",
                "HAL_Init"
            ],
            "called": [
                "HAL_SYSTICK_Config",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_peripheral_08003724",
            "code": "\n\n\nundefined4 initializePeripheral_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGrouping(3);\n  initializeSysTick(0xf);\n  initializePeripheral_08003724Specific();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_peripheral_08003724",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_InitTick": "initializeSysTick",
                "HAL_MspInit": "initializePeripheralSpecific"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_InitTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "add_values_08003748",
            "code": "\nvoid addValues_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "add_values_08003748"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_from_memory_08003760",
            "code": "\nundefined4 get_data_from_memory_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_from_memory_08003760"
            },
            "calling": [
                "HAL_RCCEx_PeriphCLKConfig",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "i2c_master_write",
                "FUN_080058d2",
                "ADC_Enable",
                "HAL_RCC_OscConfig",
                "HAL_UART_Transmit",
                "UART_WaitOnFlagUntilTimeout",
                "i2c_master_read",
                "uart_debug_write",
                "ADC_ConversionStop_Disable",
                "GetCurrentMilli"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_time_elapsed_0800376c",
            "code": "\nundefined4 calculateTimeElapsed_0800376c(uint **dataArray,uint maxExecutionTime)\n\n{\n  int startTick;\n  uint peripheralFrequency;\n  int tickElapsed;\n  undefined4 result;\n  uint *dataArrayPtr;\n  uint calculatedTime;\n  uint counter;\n  \n  counter = 0;\n  startTick = HAL_GetTick();\n  calculatedTime = DAT_20000018;\n  dataArrayPtr = *dataArray;\n  if ((dataArrayPtr[2] & 0x100) == 0) {\n    if (((dataArrayPtr[1] & 0x100) == 0) && ((dataArrayPtr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**dataArray & 2) != 0) goto LAB_0800387e;\n      } while ((maxExecutionTime == 0xffffffff) ||\n              ((maxExecutionTime != 0 && (tickElapsed = HAL_GetTick(), (uint)(tickElapsed - startTick) <= maxExecutionTime))));\n      dataArray[10] = (uint *)((uint)dataArray[10] | 4);\n      *(undefined *)(dataArray + 9) = 0;\n      result = 3;\n    }\n    else {\n      peripheralFrequency = HAL_RCCEx_GetPeriphCLKFreq(2);\n      dataArrayPtr = *dataArray;\n      if (((dataArrayPtr[4] & 0x24924924) == 0) && ((dataArrayPtr[3] & 0x924924) == 0)) {\n        if ((dataArrayPtr[4] & 0x12492492) == 0) {\n          if ((dataArrayPtr[3] & 0x492492) == 0) {\n            tickElapsed = 0x14;\n          }\n          else {\n            tickElapsed = 0x29;\n          }\n        }\n        else {\n          tickElapsed = 0x29;\n        }\n      }\n      else if (((dataArrayPtr[4] & 0x12492492) == 0) && ((dataArrayPtr[3] & 0x492492) == 0)) {\n        tickElapsed = 0x54;\n      }\n      else if ((dataArrayPtr[4] & 0x249249) == 0) {\n        if ((dataArrayPtr[3] & 0x249249) == 0) {\n          tickElapsed = 0x54;\n        }\n        else {\n          tickElapsed = 0xfc;\n        }\n      }\n      else {\n        tickElapsed = 0xfc;\n      }\n      calculatedTime = (calculatedTime / peripheralFrequency) * tickElapsed;\n      for (; counter <= calculatedTime && calculatedTime - counter != 0; counter = counter + 1) {\n        if ((maxExecutionTime != 0xffffffff) &&\n           ((maxExecutionTime == 0 || (tickElapsed = HAL_GetTick(), maxExecutionTime < (uint)(tickElapsed - startTick))))) {\n          dataArray[10] = (uint *)((uint)dataArray[10] | 4);\n          *(undefined *)(dataArray + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **dataArray = 0xffffffed;\n      dataArray[10] = (uint *)((uint)dataArray[10] | 0x200);\n      if (((*dataArray)[2] & 0xe0000) == 0xe0000) {\n        if (dataArray[3] == (uint *)0x0) {\n          dataArray[10] = (uint *)((uint)dataArray[10] & 0xfffffeff);\n          if (((uint)dataArray[10] & 0x1000) == 0) {\n            dataArray[10] = (uint *)((uint)dataArray[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    dataArray[10] = (uint *)((uint)dataArray[10] | 0x20);\n    *(undefined *)(dataArray + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_time_elapsed_0800376c",
                "param_1": "dataArray",
                "param_2": "maxExecutionTime",
                "iVar1": "startTick",
                "uVar2": "peripheralFrequency",
                "iVar3": "tickElapsed",
                "uVar4": "result",
                "puVar5": "dataArrayPtr",
                "uVar6": "calculatedTime",
                "local_1c": "counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 getOffsetValue_080038dc(int *inputArray)\n\n{\n  return *(undefined4 *)(*inputArray + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "inputArray"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "modify_bits_080038e4",
            "code": "\nundefined4 modifyBits_080038e4(int *array,uint *values)\n\n{\n  undefined4 returnValue;\n  uint shiftValue;\n  int counter;\n  \n  if (*(char *)(array + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(array + 9) = 1;\n    shiftValue = values[1];\n    if (shiftValue < 7) {\n      shiftValue = shiftValue * 5 - 5;\n      *(uint *)(*array + 0x34) =\n           *values << (shiftValue & 0xff) | *(uint *)(*array + 0x34) & ~(0x1f << (shiftValue & 0xff));\n    }\n    else if (shiftValue < 0xd) {\n      shiftValue = shiftValue * 5 - 0x23;\n      *(uint *)(*array + 0x30) =\n           *values << (shiftValue & 0xff) | *(uint *)(*array + 0x30) & ~(0x1f << (shiftValue & 0xff));\n    }\n    else {\n      shiftValue = shiftValue * 5 - 0x41;\n      *(uint *)(*array + 0x2c) =\n           *values << (shiftValue & 0xff) | *(uint *)(*array + 0x2c) & ~(0x1f << (shiftValue & 0xff));\n    }\n    shiftValue = *values;\n    if (shiftValue < 10) {\n      *(uint *)(*array + 0x10) =\n           values[2] << (shiftValue * 3 & 0xff) |\n           *(uint *)(*array + 0x10) & ~(7 << (shiftValue * 3 & 0xff));\n    }\n    else {\n      shiftValue = shiftValue * 3 - 0x1e;\n      *(uint *)(*array + 0xc) =\n           values[2] << (shiftValue & 0xff) | *(uint *)(*array + 0xc) & ~(7 << (shiftValue & 0xff));\n    }\n    if (*values - 0x10 < 2) {\n      if (*array == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*values == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        array[10] = array[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(array + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "modify_bits_080038e4",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "returnValue",
                "uVar2": "shiftValue",
                "local_c": "counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_offset_value_08003a1c",
            "code": "\nundefined4 getOffsetValue_08003a1c(int address)\n\n{\n  return *(undefined4 *)(address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_offset_value_08003a1c",
                "param_1": "address"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "initialize_device_08003a20",
            "code": "\nundefined4 initializeDevice_08003a20(int *deviceData,undefined4 param)\n\n{\n  int previousTick;\n  undefined4 result;\n  int deviceAddress;\n  uint delayCount;\n  \n  deviceAddress = *deviceData;\n  if ((*(uint *)(deviceAddress + 8) & 1) == 0) {\n    *(uint *)(deviceAddress + 8) = *(uint *)(deviceAddress + 8) | 1;\n    for (delayCount = DAT_20000018 / 1000000; delayCount != 0; delayCount = delayCount - 1) {\n    }\n    deviceAddress = HAL_GetTick(deviceData,param,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*deviceData + 8) & 1) != 0) {\n        return 0;\n      }\n      previousTick = HAL_GetTick();\n    } while ((uint)(previousTick - deviceAddress) < 3);\n    deviceData[10] = deviceData[10] | 0x10;\n    deviceData[0xb] = deviceData[0xb] | 1;\n    *(undefined *)(deviceData + 9) = 0;\n    result = 1;\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "initialize_device_08003a20",
                "param_1": "deviceData",
                "param_2": "param",
                "iVar1": "previousTick",
                "iVar3": "deviceAddress",
                "uVar2": "result",
                "local_14": "delayCount"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Start"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_adc_08003aa0",
            "code": "\n\n\nint initializeADC_08003aa0(int *parameters)\n\n{\n  int result;\n  undefined4 *pointer;\n  int value;\n  \n  if (*(char *)(parameters + 9) != '\\x01') {\n    *(undefined *)(parameters + 9) = 1;\n    result = ADC_Enable();\n    if (result == 0) {\n      parameters[10] = parameters[10] & 0xfffffcfeU | 0x100;\n      pointer = (undefined4 *)*parameters;\n      if ((pointer == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        parameters[10] = parameters[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          parameters[10] = parameters[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        parameters[10] = parameters[10] & 0xffefffff;\n        if ((pointer[1] & 0x400) != 0) {\n          parameters[10] = parameters[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((parameters[10] & 0x1000U) == 0) {\n        parameters[0xb] = 0;\n      }\n      else {\n        parameters[0xb] = parameters[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(parameters + 9) = 0;\n      *pointer = 0xfffffffd;\n      value = *parameters;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(parameters + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_adc_08003aa0",
                "param_1": "parameters",
                "iVar1": "result",
                "puVar2": "pointer",
                "iVar3": "value"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_Enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "check_connection_08003b8c",
            "code": "\nundefined4 checkConnection_08003b8c(int *connectionPtr)\n\n{\n  int currentTick;\n  int baseTick;\n  \n  baseTick = *connectionPtr;\n  if ((*(uint *)(baseTick + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(baseTick + 8) = *(uint *)(baseTick + 8) & 0xfffffffe;\n  baseTick = HAL_GetTick();\n  do {\n    if ((*(uint *)(*connectionPtr + 8) & 1) == 0) {\n      return 0;\n    }\n    currentTick = HAL_GetTick();\n  } while ((uint)(currentTick - baseTick) < 3);\n  connectionPtr[10] = connectionPtr[10] | 0x10;\n  connectionPtr[0xb] = connectionPtr[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "check_connection_08003b8c",
                "param_1": "connectionPtr",
                "iVar1": "currentTick",
                "iVar2": "baseTick"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_Init",
                "HAL_ADC_DeInit",
                "HAL_ADC_Stop"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "initialize_adc_08003bd8",
            "code": "\nundefined4 initialize_ADC_08003bd8(int *ADC_data)\n\n{\n  int conversion_result;\n  uint mask_1;\n  uint mask_2;\n  \n  if (ADC_data == (int *)0x0) {\n    return 1;\n  }\n  if (ADC_data[10] == 0) {\n    ADC_data[0xb] = 0;\n    *(undefined *)(ADC_data + 9) = 0;\n    HAL_ADC_MspInit();\n  }\n  conversion_result = ADC_ConversionStop_Disable(ADC_data);\n  if (((ADC_data[10] & 0x10U) == 0) && (conversion_result == 0)) {\n    ADC_data[10] = ADC_data[10] & 0xffffeefdU | 2;\n    mask_1 = ADC_data[1] | ADC_data[7] | ADC_data[3] << 1;\n    if (ADC_data[2] == 0x100) {\n      mask_2 = 0x100;\n    }\n    else {\n      mask_2 = 0;\n      if (ADC_data[2] == 1) {\n        mask_2 = 0x100;\n      }\n    }\n    if (ADC_data[5] == 1) {\n      if (ADC_data[3] == 0) {\n        mask_2 = mask_2 | (ADC_data[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        ADC_data[10] = ADC_data[10] | 0x20;\n        ADC_data[0xb] = ADC_data[0xb] | 1;\n      }\n    }\n    *(uint *)(*ADC_data + 4) = mask_2 | *(uint *)(*ADC_data + 4) & 0xffff16ff;\n    *(uint *)(*ADC_data + 8) = *(uint *)(*ADC_data + 8) & 0xffe1f7fd | mask_1;\n    if ((ADC_data[2] == 0x100) || (ADC_data[2] == 1)) {\n      mask_2 = (ADC_data[4] + -1) * 0x100000;\n    }\n    else {\n      mask_2 = 0;\n    }\n    *(uint *)(*ADC_data + 0x2c) = mask_2 | *(uint *)(*ADC_data + 0x2c) & 0xff0fffff;\n    if (mask_1 != (*(uint *)(*ADC_data + 8) & 0xff1f0efe)) {\n      ADC_data[10] = ADC_data[10] & 0xffffffedU | 0x10;\n      ADC_data[0xb] = ADC_data[0xb] | 1;\n      return 1;\n    }\n    ADC_data[0xb] = 0;\n    ADC_data[10] = ADC_data[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  ADC_data[10] = ADC_data[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "initialize_adc_08003bd8",
                "param_1": "ADC_data",
                "iVar1": "conversion_result",
                "uVar2": "mask_1",
                "uVar3": "mask_2"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable",
                "HAL_ADC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "disable_adc_conversion_08003ce8",
            "code": "\nint disableADCConversion_08003ce8(int *parameters)\n\n{\n  int result;\n  \n  if (parameters == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    parameters[10] = parameters[10] | 2;\n    result = ADC_ConversionStop_Disable();\n    if (result == 0) {\n      *(undefined4 *)*parameters = 0xffffffe0;\n      *(uint *)(*parameters + 4) = *(uint *)(*parameters + 4) & 0xff3f0000;\n      *(uint *)(*parameters + 8) = *(uint *)(*parameters + 8) & 0xff0106f0;\n      *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) & 0xff000000;\n      *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xc0000000;\n      *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xfffff000;\n      *(uint *)(*parameters + 0x18) = *(uint *)(*parameters + 0x18) & 0xfffff000;\n      *(uint *)(*parameters + 0x1c) = *(uint *)(*parameters + 0x1c) & 0xfffff000;\n      *(uint *)(*parameters + 0x20) = *(uint *)(*parameters + 0x20) & 0xfffff000;\n      *(uint *)(*parameters + 0x24) = *(uint *)(*parameters + 0x24) & 0xfffff000;\n      *(uint *)(*parameters + 0x28) = *(uint *)(*parameters + 0x28) & 0xfffff000;\n      *(uint *)(*parameters + 0x2c) = *(uint *)(*parameters + 0x2c) & 0xff000000;\n      *(uint *)(*parameters + 0x2c) = *(uint *)(*parameters + 0x2c) & 0xff000000;\n      *(uint *)(*parameters + 0x30) = *(uint *)(*parameters + 0x30) & 0xc0000000;\n      *(uint *)(*parameters + 0x34) = *(uint *)(*parameters + 0x34) & 0xc0000000;\n      *(uint *)(*parameters + 0x38) = *(uint *)(*parameters + 0x38) & 0xffc00000;\n      *(uint *)(*parameters + 0x38) = *(uint *)(*parameters + 0x38) & 0xffc00000;\n      deinitializeADCHandler(parameters);\n      parameters[0xb] = 0;\n      parameters[10] = 0;\n    }\n    *(undefined *)(parameters + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "disable_adc_conversion_08003ce8",
                "param_1": "parameters",
                "iVar1": "result",
                "HAL_ADC_MspDeInit": "deinitializeADCHandler"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_ADC_MspDeInit",
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "check_and_modify_status_08003de4",
            "code": "\nint checkAndModifyStatus_08003de4(int input_parameter)\n\n{\n  int result;\n  \n  if (*(char *)(input_parameter + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(input_parameter + 0x24) = 1;\n  result = ADC_ConversionStop_Disable();\n  if (result == 0) {\n    *(uint *)(input_parameter + 0x28) = *(uint *)(input_parameter + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(input_parameter + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "check_and_modify_status_08003de4",
                "param_1": "input_parameter",
                "iVar1": "result"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "ADC_ConversionStop_Disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "initialize_adc_08003e20",
            "code": "\nint initialize_ADC_08003e20(int *adc_parameters)\n\n{\n  uint sys_clk_freq;\n  int conversion_stop_result;\n  uint periph_clk_freq;\n  int start_time;\n  int current_time;\n  int loop_counter;\n  \n  if (*(char *)(adc_parameters + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(adc_parameters + 9) = 1;\n  conversion_stop_result = ADC_ConversionStop_Disable();\n  if (conversion_stop_result == 0) {\n    adc_parameters[10] = adc_parameters[10] & 0xffffeefdU | 2;\n    sys_clk_freq = DAT_20000018;\n    periph_clk_freq = HAL_RCCEx_GetPeriphCLKFreq(2);\n    for (loop_counter = sys_clk_freq / periph_clk_freq << 1; loop_counter != 0; loop_counter = loop_counter + -1) {\n    }\n    ADC_Enable(adc_parameters);\n    *(uint *)(*adc_parameters + 8) = *(uint *)(*adc_parameters + 8) | 8;\n    start_time = HAL_GetTick();\n    while (current_time = *adc_parameters, (*(uint *)(current_time + 8) & 8) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_parameters[10] = adc_parameters[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_parameters + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current_time + 8) = *(uint *)(current_time + 8) | 4;\n    start_time = HAL_GetTick();\n    while ((*(uint *)(*adc_parameters + 8) & 4) != 0) {\n      current_time = HAL_GetTick();\n      if (10 < (uint)(current_time - start_time)) {\n        adc_parameters[10] = adc_parameters[10] & 0xffffffedU | 0x10;\n        *(undefined *)(adc_parameters + 9) = 0;\n        return 1;\n      }\n    }\n    adc_parameters[10] = adc_parameters[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(adc_parameters + 9) = 0;\n  return conversion_stop_result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "initialize_adc_08003e20",
                "param_1": "adc_parameters",
                "uVar1": "sys_clk_freq",
                "iVar2": "conversion_stop_result",
                "uVar3": "periph_clk_freq",
                "iVar4": "start_time",
                "iVar5": "current_time",
                "local_14": "loop_counter"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "ADC_Enable",
                "ADC_ConversionStop_Disable",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_config_values_08003f0c",
            "code": "\n\n\nvoid updateConfigValues_08003f0c(uint value)\n\n{\n  _DAT_e000ed0c = (value & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_config_values_08003f0c",
                "param_1": "value"
            },
            "calling": [
                "HAL_Init",
                "premain"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "update_character_08003f30",
            "code": "\n\n\nvoid updateCharacter_08003f30(uint characterIndex,uint bitmask1,uint bitmask2)\n\n{\n  uint shiftAmount;\n  uint adjustedShiftAmount;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  adjustedShiftAmount = 7 - shiftAmount;\n  if (3 < adjustedShiftAmount) {\n    adjustedShiftAmount = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitmask1 & (1 << (adjustedShiftAmount & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & bitmask2;\n  if ((int)characterIndex < 0) {\n    *(char *)((characterIndex & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(characterIndex + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "update_character_08003f30",
                "param_1": "characterIndex",
                "param_2": "bitmask1",
                "param_3": "bitmask2",
                "uVar1": "shiftAmount",
                "uVar2": "adjustedShiftAmount"
            },
            "calling": [
                "i2c_custom_init",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "SystemClock_Config",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_at_offset_08003f94",
            "code": "\nvoid setBitAtOffset_08003f94(uint bitOffset)\n\n{\n  if (-1 < (int)bitOffset) {\n    *(int *)((bitOffset >> 5) * 4 + -0x1fff1f00) = 1 << (bitOffset & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_at_offset_08003f94",
                "param_1": "bitOffset"
            },
            "calling": [
                "i2c_custom_init",
                "TimerPulseInit",
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n    performDataSyncBarrier(0xf);\n    performInstrSyncBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitIndex",
                "DataSynchronizationBarrier": "performDataSyncBarrier",
                "InstructionSynchronizationBarrier": "performInstrSyncBarrier"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_parameters_08003fd8",
            "code": "\n\n\nundefined4 set_parameters_08003fd8(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_parameters_08003fd8",
                "param_1": "input_value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_in_memory_08004004",
            "code": "\nvoid setBitInMemory_08004004(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_in_memory_08004004",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "update_data_flag_08004024",
            "code": "\n\n\nvoid updateDataFlag_08004024(int inputValue)\n\n{\n  if (inputValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "update_data_flag_08004024",
                "param_1": "inputValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "initialize_system_timer_08004046",
            "code": "\nvoid initializeSystemTimer_08004046(void)\n\n{\n  handleSystemTimerInterrupt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "initialize_system_timer_08004046",
                "HAL_SYSTICK_Callback": "handleSystemTimerInterrupt"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "set_configuration_08004050",
            "code": "\n\n\nundefined4 set_configuration_08004050(uint **config_ptr)\n\n{\n  uint *config_value;\n  \n  if (*(char *)((int)config_ptr + 0x21) != '\\x02') {\n    error_code = (uint *)0x4;\n    return 1;\n  }\n  **config_ptr = **config_ptr & 0xfffffff1;\n  **config_ptr = **config_ptr & 0xfffffffe;\n  config_value = *config_ptr;\n  if (config_value == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (config_value == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (config_value == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (config_value == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (config_value == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (config_value == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)config_ptr + 0x21) = 1;\n  *(undefined *)(config_ptr + 8) = 0;\n  if (callback_func != (uint *)0x0) {\n    (*(code *)callback_func)();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "set_configuration_08004050",
                "param_1": "config_ptr",
                "puVar1": "config_value",
                "param_1[0xe]": "error_code",
                "param_1[0xd]": "callback_func"
            },
            "calling": [
                "HAL_UART_IRQHandler",
                "I2C_ITError"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_params_080040e8",
            "code": "\n\n\nvoid updateParams_080040e8(uint *outputParams,uint *inputParams)\n\n{\n  uint *outputPtr;\n  uint bitMask;\n  uint inputBit;\n  uint bitIndex;\n  uint opcode;\n  uint updatedValue;\n  int offset;\n  int index;\n  \n  updatedValue = 0;\n  bitIndex = 0;\n  do {\n    if (0xf < bitIndex) {\n      return;\n    }\n    bitMask = 1 << (bitIndex & 0xff);\n    inputBit = *inputParams & bitMask;\n    if (bitMask == inputBit) {\n      opcode = inputParams[1];\n      if (opcode == 0x12) {\n        updatedValue = inputParams[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          updatedValue = inputParams[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_0800423a;\n          if (opcode == 1) {\n            updatedValue = inputParams[3];\n          }\n        }\n        else if (opcode == 3) {\n          updatedValue = 0;\n        }\n        else if (opcode == 0x11) {\n          updatedValue = inputParams[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_0800423a:\n        if (inputParams[2] == 0) {\n          updatedValue = 4;\n        }\n        else if (inputParams[2] == 1) {\n          outputParams[4] = bitMask;\n          updatedValue = 8;\n        }\n        else {\n          outputParams[5] = bitMask;\n          updatedValue = 8;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((opcode == 0x10310000) || ((opcode == 0x10320000 || (opcode == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = bitIndex;\n      outputPtr = outputParams;\n      if (0xff < inputBit) {\n        bitMask = bitIndex - 8;\n        outputPtr = outputParams + 1;\n      }\n      *outputPtr = *outputPtr & ~(0xf << (bitMask << 2 & 0xff)) | updatedValue << (bitMask << 2 & 0xff);\n      if ((inputParams[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        offset = (bitIndex & 3) << 2;\n        if (outputParams == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (outputParams == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (outputParams == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (outputParams == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((bitIndex >> 2) + 2) * 4 + 0x40010000) & ~(0xf << offset) | index << offset;\n        if ((inputParams[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~inputBit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | inputBit;\n        }\n        if ((inputParams[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~inputBit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | inputBit;\n        }\n        if ((inputParams[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~inputBit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | inputBit;\n        }\n        if ((inputParams[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~inputBit;\n        }\n        else {\n          _DAT_4001040c = inputBit | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_params_080040e8",
                "param_1": "outputParams",
                "param_2": "inputParams",
                "puVar1": "outputPtr",
                "uVar2": "bitMask",
                "uVar3": "inputBit",
                "uVar4": "bitIndex",
                "uVar5": "opcode",
                "uVar6": "updatedValue",
                "iVar7": "offset",
                "iVar8": "index"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int num,uint flags)\n\n{\n  if ((flags & *(uint *)(num + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "num",
                "param_2": "flags"
            },
            "calling": [
                "digital_io_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "update_param_080042e2",
            "code": "\nvoid updateParam_080042e2(int baseAddress,int newValue,int shiftValue)\n\n{\n  if (shiftValue == 0) {\n    *(int *)(baseAddress + 0x10) = newValue << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "update_param_080042e2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "shiftValue"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_gpio_on_interrupt_080042f0",
            "code": "\n\n\nvoid update_GPIO_on_interrupt_080042f0(uint interrupt_flag)\n\n{\n  if ((_DAT_40010414 & interrupt_flag) != 0) {\n    _DAT_40010414 = interrupt_flag;\n    handle_GPIO_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_gpio_on_interrupt_080042f0",
                "param_1": "interrupt_flag",
                "HAL_GPIO_EXTI_Callback": "handle_GPIO_interrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "apply_configuration_0800430c",
            "code": "\nundefined4 applyConfiguration_0800430c(int *config)\n\n{\n  if (*(char *)((int)config + 0x3e) == '@') {\n    if (configOption == 0) {\n      *(uint *)(*config + 0x10) = configData & 0xfe;\n    }\n    else {\n      *(uint *)(*config + 0x10) = configData & 0xffU | 1;\n    }\n  }\n  else if (config[4] == 0x4000) {\n    if (*(char *)((int)config + 0x3d) == '!') {\n      *(uint *)(*config + 0x10) = configData & 0xfe;\n    }\n    else {\n      *(uint *)(*config + 0x10) = configData & 0xffU | 1;\n    }\n  }\n  else if (configOption == 0) {\n    *(uint *)(*config + 0x10) = (uint)(configData << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (configOption == 1) {\n    *(uint *)(*config + 0x10) = (uint)(configData << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "apply_configuration_0800430c",
                "param_1": "config",
                "param_1[0x14]": "configOption",
                "param_1[0x11]": "configData"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "update_memory_08004396",
            "code": "\nundefined4 updateMemory_08004396(int *memory_ptr)\n\n{\n  *(uint *)(*memory_ptr + 0x10) = data & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "update_memory_08004396",
                "param_1": "memory_ptr",
                "param_1[0x11]": "data"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "process_flags_080043a2",
            "code": "\nundefined4 processFlags_080043a2(uint **flags)\n\n{\n  uint *flag_ptr;\n  \n  flag_ptr = flags[0xb];\n  if ((*(char *)((int)flags + 0x3d) == '\\\"') &&\n     ((flags[0x14] != (uint *)0x0 || (*(char *)((int)flags + 0x3e) != '@')))) {\n    if ((flags[0x14] == (uint *)0x0) && (flags[4] == (uint *)0xc000)) {\n      **flags = **flags | 0x100;\n      flags[0x14] = (uint *)((int)flags[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)flags + 0x2a) == 0) {\n        **flags = **flags | 0x200;\n      }\n      else if (*(short *)((int)flags + 0x2a) == 1) {\n        if (flag_ptr == (uint *)0xffff0000) {\n          **flags = **flags & 0xfffffbff;\n          flag_ptr = *flags;\n          if ((flag_ptr[1] & 0x800) == 0) {\n            *flag_ptr = *flag_ptr | 0x200;\n          }\n          else {\n            *flag_ptr = *flag_ptr & 0xfffffbff;\n          }\n        }\n        else if (((flag_ptr == (uint *)0x4) || (flag_ptr == (uint *)0x8)) ||\n                (flags[0xc] == (uint *)0x12)) {\n          **flags = **flags & 0xfffffbff;\n          **flags = **flags | 0x200;\n        }\n        else if (flags[0xb] == (uint *)0x2) {\n          **flags = **flags | 0x400;\n        }\n        else {\n          **flags = **flags & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)flags + 0x2a) == 2) {\n        if (flags[0xb] == (uint *)0x2) {\n          **flags = **flags | 0x400;\n        }\n        else {\n          **flags = **flags | 0x800;\n          **flags = **flags & 0xfffffbff;\n        }\n        flag_ptr = *flags;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      else {\n        **flags = **flags | 0x400;\n        flag_ptr = *flags;\n        if ((flag_ptr[1] & 0x800) != 0) {\n          flag_ptr[1] = flag_ptr[1] | 0x1000;\n        }\n      }\n      flags[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "process_flags_080043a2",
                "param_1": "flags",
                "puVar1": "flag_ptr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_data_0800457c",
            "code": "\nundefined4 updateData_0800457c(int *dataArray)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)dataArray + 0x2a) != 0) {\n    bytePointer = (byte *)dataArray[9];\n    dataArray[9] = (int)(bytePointer + 1);\n    *(uint *)(*dataArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)dataArray + 0x2a) = *(short *)((int)dataArray + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_data_0800457c",
                "param_1": "dataArray",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_array_element_0800459c",
            "code": "\nundefined4 updateArrayElement_0800459c(int *array)\n\n{\n  undefined *elementPointer;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    elementPointer = (undefined *)array[9];\n    array[9] = (int)(elementPointer + 1);\n    *elementPointer = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_array_element_0800459c",
                "param_1": "array",
                "puVar1": "elementPointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "initialize_i2_c_device_080045c0",
            "code": "\nundefined4 initializeI2CDevice_080045c0(uint **deviceConfig)\n\n{\n  bool isPCLK1LessThan2M;\n  uint pclk1Freq;\n  uint *i2cClockCycles;\n  uint i2cTiming;\n  \n  if (deviceConfig == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)deviceConfig + 0x3d) == '\\0') {\n    *(undefined *)(deviceConfig + 0xf) = 0;\n    initializeI2CHardware();\n  }\n  *(undefined *)((int)deviceConfig + 0x3d) = 0x24;\n  **deviceConfig = **deviceConfig & 0xfffffffe;\n  pclk1Freq = HAL_RCC_GetPCLK1Freq();\n  if (i2cPrescaler < (uint *)0x186a1) {\n    if (pclk1Freq < 2000000) {\n      isPCLK1LessThan2M = true;\n    }\n    else {\n      isPCLK1LessThan2M = false;\n    }\n  }\n  else {\n    isPCLK1LessThan2M = pclk1Freq < 4000000;\n  }\n  if (isPCLK1LessThan2M) {\n    return 1;\n  }\n  i2cTiming = pclk1Freq / 1000000;\n  (*deviceConfig)[1] = i2cTiming;\n  if ((uint *)0x186a0 < i2cPrescaler) {\n    i2cTiming = (i2cTiming * 300) / 1000;\n  }\n  (*deviceConfig)[8] = i2cTiming + 1;\n  i2cClockCycles = i2cPrescaler;\n  if (i2cClockCycles < (uint *)0x186a1) {\n    pclk1Freq = (pclk1Freq - 1) / (uint)((int)i2cClockCycles << 1) + 1 & 0xfff;\n    if (pclk1Freq < 4) {\n      pclk1Freq = 4;\n    }\n  }\n  else {\n    if (i2cDutyCycle == (uint *)0x0) {\n      i2cTiming = (pclk1Freq - 1) / (uint)((int)i2cClockCycles * 3);\n    }\n    else {\n      i2cTiming = (pclk1Freq - 1) / (uint)((int)i2cClockCycles * 0x19);\n    }\n    if ((i2cTiming + 1 & 0xfff) == 0) {\n      pclk1Freq = 1;\n    }\n    else if (i2cDutyCycle == (uint *)0x0) {\n      pclk1Freq = (pclk1Freq - 1) / (uint)((int)i2cClockCycles * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      pclk1Freq = (pclk1Freq - 1) / (uint)((int)i2cClockCycles * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*deviceConfig)[7] = pclk1Freq;\n  **deviceConfig = (uint)i2cCCRValue | (uint)i2cPrescalerValue;\n  (*deviceConfig)[2] = (uint)i2cCkMode | (uint)i2cTrMode;\n  (*deviceConfig)[3] = (uint)i2cRiseTime | (uint)i2cFallTime;\n  **deviceConfig = **deviceConfig | 1;\n  deviceConfig[0x10] = (uint *)0x0;\n  *(undefined *)((int)deviceConfig + 0x3d) = 0x20;\n  deviceConfig[0xc] = (uint *)0x0;\n  *(undefined *)((int)deviceConfig + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "initialize_i2_c_device_080045c0",
                "param_1": "deviceConfig",
                "bVar1": "isPCLK1LessThan2M",
                "uVar2": "pclk1Freq",
                "puVar3": "i2cClockCycles",
                "uVar4": "i2cTiming",
                "HAL_I2C_MspInit": "initializeI2CHardware",
                "param_1[1]": "i2cPrescaler",
                "param_1[8]": "i2cPrescalerValue",
                "param_1[2]": "i2cDutyCycle",
                "param_1[7]": "i2cCCRValue",
                "param_1[4]": "i2cCkMode",
                "param_1[3]": "i2cTrMode",
                "param_1[5]": "i2cRiseTime",
                "param_1[6]": "i2cFallTime"
            },
            "calling": [
                "i2c_custom_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "process_data_08004728",
            "code": "\nundefined4 processData_08004728(uint **data,uint *paramA,uint *paramB,undefined2 paramC)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data[0xc] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        *(undefined *)(data + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x21;\n      *(undefined *)((int)data + 0x3e) = 0x10;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = paramB;\n      *(undefined2 *)((int)data + 0x2a) = paramC;\n      data[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      data[0x11] = paramA;\n      **data = **data | 0x100;\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004728": "process_data_08004728",
                "param_1": "data",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "i2c_master_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_data_080047f4",
            "code": "\nundefined4 processData_080047f4(uint **inputArray,uint *param1,uint *param2,undefined2 param3)\n\n{\n  undefined4 result;\n  uint *dataPtr;\n  int counter;\n  \n  if (*(char *)((int)inputArray + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        inputArray[0xc] = (uint *)0x0;\n        *(undefined *)((int)inputArray + 0x3d) = 0x20;\n        *(undefined *)(inputArray + 0xf) = 0;\n        return 3;\n      }\n      dataPtr = *inputArray;\n      counter = counter + -1;\n    } while ((dataPtr[6] & 2) != 0);\n    if (*(char *)(inputArray + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(inputArray + 0xf) = 1;\n      if ((*dataPtr & 1) == 0) {\n        *dataPtr = *dataPtr | 1;\n      }\n      **inputArray = **inputArray & 0xfffff7ff;\n      *(undefined *)((int)inputArray + 0x3d) = 0x22;\n      *(undefined *)((int)inputArray + 0x3e) = 0x10;\n      result = 0;\n      inputArray[0x10] = (uint *)0x0;\n      inputArray[9] = param2;\n      *(undefined2 *)((int)inputArray + 0x2a) = param3;\n      inputArray[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(inputArray + 10) = *(undefined2 *)((int)inputArray + 0x2a);\n      inputArray[0x11] = param1;\n      **inputArray = **inputArray | 0x400;\n      **inputArray = **inputArray | 0x100;\n      *(undefined *)(inputArray + 0xf) = 0;\n      (*inputArray)[1] = (*inputArray)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "inputArray",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uVar1": "result",
                "puVar2": "dataPtr",
                "local_c": "counter"
            },
            "calling": [
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "validate_input_080048c8",
            "code": "\nundefined4 validate_input_080048c8(uint **param_list,uint *data_ptr,int size,uint *config_ptr)\n\n{\n  undefined4 result;\n  uint *first_element;\n  \n  if (*(char *)((int)param_list + 0x3d) == '(') {\n    if (data_ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(param_list + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(param_list + 0xf) = 1;\n      first_element = *param_list;\n      if ((*first_element & 1) == 0) {\n        *first_element = *first_element | 1;\n      }\n      **param_list = **param_list & 0xfffff7ff;\n      *(undefined *)((int)param_list + 0x3d) = 0x29;\n      *(undefined *)((int)param_list + 0x3e) = 0x20;\n      result = 0;\n      param_list[0x10] = (uint *)0x0;\n      param_list[9] = data_ptr;\n      *(short *)((int)param_list + 0x2a) = (short)size;\n      param_list[0xb] = config_ptr;\n      *(undefined2 *)(param_list + 10) = *(undefined2 *)((int)param_list + 0x2a);\n      *(undefined *)(param_list + 0xf) = 0;\n      (*param_list)[1] = (*param_list)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "validate_input_080048c8",
                "param_1": "param_list",
                "param_2": "data_ptr",
                "param_3": "size",
                "param_4": "config_ptr",
                "uVar1": "result",
                "puVar2": "first_element"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "parse_input_08004954",
            "code": "\nundefined4 parseInput_08004954(uint **input,uint *value1,int length,uint *value2)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)input + 0x3d) == '(') {\n    if (value1 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (length == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input + 0xf) = 1;\n      ptr = *input;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **input = **input & 0xfffff7ff;\n      *(undefined *)((int)input + 0x3d) = 0x2a;\n      *(undefined *)((int)input + 0x3e) = 0x20;\n      result = 0;\n      input[0x10] = (uint *)0x0;\n      input[9] = value1;\n      *(short *)((int)input + 0x2a) = (short)length;\n      input[0xb] = value2;\n      *(undefined2 *)(input + 10) = *(undefined2 *)((int)input + 0x2a);\n      *(undefined *)(input + 0xf) = 0;\n      (*input)[1] = (*input)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004954": "parse_input_08004954",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "length",
                "param_4": "value2",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "update_param_080049e0",
            "code": "\nundefined4 updateParam_080049e0(uint **paramArray)\n\n{\n  uint *paramPtr;\n  \n  if (*(char *)((int)paramArray + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)paramArray + 0x3d) = 0x28;\n  paramPtr = *paramArray;\n  if ((*paramPtr & 1) == 0) {\n    *paramPtr = *paramPtr | 1;\n  }\n  **paramArray = **paramArray | 0x400;\n  (*paramArray)[1] = (*paramArray)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "update_param_080049e0",
                "param_1": "paramArray",
                "puVar1": "paramPtr"
            },
            "calling": [
                "i2c_attachSlaveRxEvent",
                "HAL_I2C_ErrorCallback",
                "i2c_attachSlaveTxEvent",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "update_data_and_notify_08004a24",
            "code": "\nundefined4 updateDataAndNotify_08004a24(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "update_data_and_notify_08004a24",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_data_08004a76",
            "code": "\nundefined4 updateData_08004a76(int *data)\n\n{\n  char char1;\n  undefined *pointer;\n  \n  char1 = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    pointer = (undefined *)data[9];\n    data[9] = (int)(pointer + 1);\n    *pointer = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (char1 == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      handleI2CComplete();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_data_08004a76",
                "param_1": "data",
                "cVar1": "char1",
                "puVar2": "pointer",
                "HAL_I2C_SlaveRxCpltCallback()": "handleI2CComplete()"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "i2c_address_callback_08004ac2",
            "code": "\nundefined4 i2cAddressCallback_08004ac2(int *addressPtr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 targetAddress;\n  uint addressValue;\n  \n  addressValue = *(uint *)(*addressPtr + 0x18);\n  if ((addressValue & 0x80) == 0) {\n    targetAddress = *(undefined2 *)(addressPtr + 3);\n  }\n  else {\n    targetAddress = *(undefined2 *)(addressPtr + 6);\n  }\n  HAL_I2C_AddrCallback(addressPtr,(*(uint *)(*addressPtr + 0x18) & 4) == 0,targetAddress,addressValue,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "i2c_address_callback_08004ac2",
                "param_1": "addressPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "targetAddress",
                "uVar2": "addressValue"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "handle_i2_c_operations_08004aec",
            "code": "\nundefined4 handle_I2C_operations_08004aec(uint **parameters)\n\n{\n  if (((operation_type == (uint *)0x4) || (operation_type == (uint *)0x8)) &&\n     (*(char *)(base_address + 0x3d) == '(')) {\n    operation_type = (uint *)0xffff0000;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    callback_type = (uint *)0x0;\n    *(undefined *)(base_address + 0x3d) = 0x20;\n    *(undefined *)(base_address + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback();\n  }\n  else if (*(char *)(base_address + 0x3d) == '!') {\n    operation_type = (uint *)0xffff0000;\n    callback_type = (uint *)0x21;\n    *(undefined *)(base_address + 0x3d) = 0x20;\n    *(undefined *)(base_address + 0x3e) = 0;\n    (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n    (*parameters)[5] = 0xfffffbff;\n    **parameters = **parameters & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback();\n  }\n  else {\n    (*parameters)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "handle_i2_c_operations_08004aec",
                "param_1": "parameters",
                "param_1[0xb]": "operation_type",
                "param_1[0xc]": "callback_type",
                "(int)param_1": "base_address"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 processData_08004b82(uint **data)\n\n{\n  char char1;\n  uint *pointerVar;\n  \n  char1 = *(char *)((int)data + 0x3d);\n  pointerVar = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (char1 == 'exclamationChar2')) {\n    if ((pointerVar == (uint *)0x4) || ((pointerVar == (uint *)0x8 || (pointerVar == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      callbackPointer = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == 'atChar') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        HAL_I2C_MemTxCpltCallback();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      callbackPointer = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      HAL_I2C_MasterTxCpltCallback();\n    }\n  }\n  else if ((char1 == 'exclamationChar2') || ((*(char *)((int)data + 0x3e) == 'atChar' && (char1 == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == 'atChar') {\n      if (lengthPointer == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          lengthPointer = (uint *)((int)lengthPointer + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          lengthPointer = (uint *)((int)lengthPointer + 1);\n        }\n      }\n      else if (lengthPointer == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        lengthPointer = (uint *)((int)lengthPointer + 1);\n      }\n      else if (lengthPointer == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == 'exclamationChar2') {\n          pointerVar = data[9];\n          data[9] = (uint *)((int)pointerVar + 1);\n          (*data)[4] = (uint)*(byte *)pointerVar;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointerVar = data[9];\n      data[9] = (uint *)((int)pointerVar + 1);\n      (*data)[4] = (uint)*(byte *)pointerVar;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "data",
                "cVar1": "char1",
                "puVar2": "pointerVar",
                "param_1[0xc]": "callbackPointer",
                "@": "atChar",
                "!": "exclamationChar2",
                "param_1[0x14]": "lengthPointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "process_i2_c_data_08004ccc",
            "code": "\nundefined4 processI2CData_08004ccc(uint **data)\n\n{\n  uint *ptr;\n  \n  ptr = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((ptr == (uint *)0x4) || (ptr == (uint *)0x8)) || (ptr == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        callback_ptr = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MasterTxCpltCallback();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        callback_ptr = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      ptr = data[9];\n      data[9] = (uint *)((int)ptr + 1);\n      (*data)[4] = (uint)*(byte *)ptr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "process_i2_c_data_08004ccc",
                "param_1": "data",
                "puVar1": "ptr",
                "param_1[0xc]": "callback_ptr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "update_control_register_08004d6c",
            "code": "\nundefined4 updateControlRegister_08004d6c(uint **controlRegister)\n\n{\n  uint *tempPointer;\n  \n  if (*(char *)((int)controlRegister + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)controlRegister + 0x2a) < 4) {\n      if (*(ushort *)((int)controlRegister + 0x2a) - 2 < 2) {\n        if (controlRegister[0xb] == (uint *)0x2) {\n          **controlRegister = **controlRegister | 0x400;\n        }\n        else {\n          **controlRegister = **controlRegister & 0xfffffbff;\n          **controlRegister = **controlRegister | 0x800;\n        }\n        (*controlRegister)[1] = (*controlRegister)[1] & 0xfffffbff;\n      }\n      else {\n        if (controlRegister[0xb] == (uint *)0x2) {\n          **controlRegister = **controlRegister | 0x400;\n        }\n        else {\n          **controlRegister = **controlRegister & 0xfffffbff;\n        }\n        (*controlRegister)[1] = (*controlRegister)[1] & 0xfffff8ff;\n        tempPointer = controlRegister[9];\n        controlRegister[9] = (uint *)((int)tempPointer + 1);\n        *(char *)tempPointer = (char)(*controlRegister)[4];\n        *(short *)((int)controlRegister + 0x2a) = *(short *)((int)controlRegister + 0x2a) + -1;\n        *(undefined *)((int)controlRegister + 0x3d) = 0x20;\n        controlRegister[0xc] = (uint *)0x0;\n        if (*(char *)((int)controlRegister + 0x3e) == '@') {\n          *(undefined *)((int)controlRegister + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)controlRegister + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      tempPointer = controlRegister[9];\n      controlRegister[9] = (uint *)((int)tempPointer + 1);\n      *(char *)tempPointer = (char)(*controlRegister)[4];\n      *(short *)((int)controlRegister + 0x2a) = *(short *)((int)controlRegister + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "update_control_register_08004d6c",
                "param_1": "controlRegister",
                "puVar1": "tempPointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "process_data_08004e3c",
            "code": "\nundefined4 processData_08004e3c(uint **data)\n\n{\n  uint *pointer_2;\n  \n  pointer_2 = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((pointer_2 == (uint *)0x4) || (pointer_2 == (uint *)0x8)) || (pointer_2 == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    pointer_2 = data[9];\n    data[9] = (uint *)((int)pointer_2 + 1);\n    *(char *)pointer_2 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((pointer_2 == (uint *)0x4) || (pointer_2 == (uint *)0x8)) || (pointer_2 == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (pointer_2 == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    pointer_2 = data[9];\n    data[9] = (uint *)((int)pointer_2 + 1);\n    *(char *)pointer_2 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    pointer_2 = data[9];\n    data[9] = (uint *)((int)pointer_2 + 1);\n    *(char *)pointer_2 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    pointer_2 = data[9];\n    data[9] = (uint *)((int)pointer_2 + 1);\n    *(char *)pointer_2 = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "process_data_08004e3c",
                "param_1": "data",
                "puVar1": "pointer_2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "process_i2_c_data_08004f3c",
            "code": "\nvoid processI2CData_08004f3c(uint **data)\n\n{\n  int result;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      HAL_I2C_ErrorCallback(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x21) == '\\x01') {\n      data[0xe][0xd] = (uint)&LAB_080053cc_1;\n      result = HAL_DMA_Abort_IT(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0xd])();\n      }\n    }\n    else {\n      data[0xd][0xd] = (uint)&LAB_080053cc_1;\n      result = HAL_DMA_Abort_IT(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "process_i2_c_data_08004f3c",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "process_i2_c_data_08005084",
            "code": "\nundefined4 processI2CData_08005084(uint **dataPtr)\n\n{\n  char charValue;\n  uint *ptrValue1;\n  uint *ptrValue2;\n  \n  charValue = *(char *)((int)dataPtr + 0x3d);\n  (*dataPtr)[1] = (*dataPtr)[1] & 0xfffff8ff;\n  **dataPtr = **dataPtr | 1;\n  **dataPtr = **dataPtr & 0xfffffbff;\n  ptrValue1 = *dataPtr;\n  if ((ptrValue1[1] & 0x800) != 0) {\n    if ((*(char *)((int)dataPtr + 0x3d) == '\\\"') || (*(char *)((int)dataPtr + 0x3d) == '*')) {\n      *(short *)((int)dataPtr + 0x2a) = (short)*(undefined4 *)(*dataPtr[0xe] + 4);\n    }\n    else {\n      *(short *)((int)dataPtr + 0x2a) = (short)*(undefined4 *)(*dataPtr[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)dataPtr + 0x2a) != 0) {\n    if ((ptrValue1[5] & 4) != 0) {\n      ptrValue2 = dataPtr[9];\n      dataPtr[9] = (uint *)((int)ptrValue2 + 1);\n      *(char *)ptrValue2 = (char)ptrValue1[4];\n      *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n    }\n    if (((*dataPtr)[5] & 0x40) != 0) {\n      ptrValue1 = dataPtr[9];\n      dataPtr[9] = (uint *)((int)ptrValue1 + 1);\n      *(char *)ptrValue1 = (char)(*dataPtr)[4];\n      *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n    }\n    dataPtr[0x10] = (uint *)((uint)dataPtr[0x10] | 4);\n  }\n  if (dataPtr[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      dataPtr[0xb] = (uint *)0xffff0000;\n      dataPtr[0xc] = (uint *)0x0;\n      *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n      *(undefined *)((int)dataPtr + 0x3e) = 0;\n      HAL_I2C_ListenCpltCallback();\n    }\n    else if ((dataPtr[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      dataPtr[0xc] = (uint *)0x0;\n      *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n      *(undefined *)((int)dataPtr + 0x3e) = 0;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  else {\n    I2C_ITError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "process_i2_c_data_08005084",
                "param_1": "dataPtr",
                "cVar1": "charValue",
                "puVar2": "ptrValue1",
                "puVar3": "ptrValue2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback",
                "HAL_I2C_ListenCpltCallback",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "handle_i2_c_events_08005188",
            "code": "\nvoid handleI2CEvents_08005188(int *eventData)\n\n{\n  int eventDataPtr;\n  uint eventStatus;\n  uint eventFlag;\n  uint eventFlag2;\n  \n  eventDataPtr = *eventData;\n  eventFlag2 = *(uint *)(eventDataPtr + 0x18);\n  eventStatus = *(uint *)(eventDataPtr + 0x14);\n  eventFlag = *(uint *)(eventDataPtr + 4);\n  if ((*(char *)((int)eventData + 0x3e) == '\\x10') || (*(char *)((int)eventData + 0x3e) == '@')) {\n    if (((eventStatus & 0x10001) == 0) || ((eventFlag & 0x200) == 0)) {\n      if (((eventStatus & 0x10008) == 0) || ((eventFlag & 0x200) == 0)) {\n        if (((eventStatus & 0x10002) != 0) && ((eventFlag & 0x200) != 0)) {\n          I2C_Master_ADDR(eventData);\n        }\n      }\n      else {\n        I2C_Master_ADD10(eventData);\n      }\n    }\n    else {\n      I2C_Master_SB(eventData);\n    }\n    if ((eventFlag2 & 0x100004) == 0) {\n      if ((((eventStatus & 0x10040) != 0) && ((eventFlag & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((eventFlag & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(eventData);\n        return;\n      }\n    }\n    else {\n      if ((((eventStatus & 0x10080) != 0) && ((eventFlag & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((eventFlag & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(eventData);\n        return;\n      }\n    }\n  }\n  else {\n    if (((eventStatus & 0x10002) != 0) && ((eventFlag & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((eventStatus & 0x10010) != 0) && ((eventFlag & 0x200) != 0)) {\n      I2C_Slave_STOPF(eventData);\n      return;\n    }\n    if ((eventFlag2 & 0x100004) == 0) {\n      if ((((eventStatus & 0x10040) != 0) && ((eventFlag & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((eventFlag & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(eventData);\n      }\n    }\n    else {\n      if ((((eventStatus & 0x10080) != 0) && ((eventFlag & 0x400) != 0)) && ((eventStatus & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(eventData);\n        return;\n      }\n      if (((eventStatus & 0x10004) != 0) && ((eventFlag & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(eventData);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "handle_i2_c_events_08005188",
                "param_1": "eventData",
                "iVar1": "eventDataPtr",
                "uVar2": "eventStatus",
                "uVar3": "eventFlag",
                "uVar4": "eventFlag2"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_Master_ADD10",
                "I2C_SlaveReceive_RXNE",
                "I2C_SlaveReceive_BTF",
                "I2C_SlaveTransmit_BTF",
                "I2C_SlaveTransmit_TXE",
                "I2C_MasterReceive_BTF",
                "I2C_Slave_ADDR",
                "I2C_MasterTransmit_BTF",
                "I2C_Master_ADDR",
                "I2C_MasterTransmit_TXE",
                "I2C_Master_SB",
                "I2C_Slave_STOPF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "update_i2_c_configuration_080052f0",
            "code": "\nvoid updateI2CConfiguration_080052f0(uint **param)\n\n{\n  char charVar1;\n  uint *pointerVar;\n  uint configVar;\n  uint flagVar;\n  \n  pointerVar = *param;\n  configVar = pointerVar[5];\n  flagVar = pointerVar[1];\n  if (((configVar & 0x10100) != 0) && ((flagVar & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 1);\n    pointerVar[5] = 0xfffffeff;\n    **param = **param | 0x8000;\n  }\n  if (((configVar & 0x10200) != 0) && ((flagVar & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 2);\n    (*param)[5] = 0xfffffdff;\n  }\n  if (((configVar & 0x10400) != 0) && ((flagVar & 0x100) != 0)) {\n    charVar1 = *(char *)((int)param + 0x3d);\n    if (((*(char *)((int)param + 0x3e) == ' ') && (*(short *)((int)param + 0x2a) == 0)) &&\n       (((charVar1 == '!' || (charVar1 == ')')) || ((charVar1 == '(' && (param[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(param);\n    }\n    else {\n      param[0x10] = (uint *)((uint)param[0x10] | 4);\n      if (*(char *)((int)param + 0x3e) == '\\x10') {\n        **param = **param | 0x200;\n      }\n      (*param)[5] = 0xfffffbff;\n    }\n  }\n  if (((configVar & 0x10800) != 0) && ((flagVar & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 8);\n    (*param)[5] = 0xfffff7ff;\n  }\n  if (param[0x10] != (uint *)0x0) {\n    I2C_ITError(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "update_i2_c_configuration_080052f0",
                "param_1": "param",
                "cVar1": "charVar1",
                "puVar2": "pointerVar",
                "uVar3": "configVar",
                "uVar4": "flagVar"
            },
            "calling": [],
            "called": [
                "I2C_Slave_AF",
                "I2C_ITError"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_byte_value_0800542a",
            "code": "\nundefined getByteValue_0800542a(int inputAddress)\n\n{\n  return *(undefined *)(inputAddress + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_byte_value_0800542a",
                "param_1": "inputAddress"
            },
            "calling": [
                "i2c_master_write",
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_value_from_offset_08005430",
            "code": "\nundefined4 get_value_from_offset_08005430(int base_address)\n\n{\n  return *(undefined4 *)(base_address + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_value_from_offset_08005430",
                "param_1": "base_address"
            },
            "calling": [
                "i2c_master_write",
                "i2c_master_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int inputValue)\n\n{\n  bool bVar1;\n  int calculatedValue;\n  \n  calculatedValue = inputValue * (DAT_20000018 / 8000);\n  do {\n    bVar1 = calculatedValue != 0;\n    calculatedValue = calculatedValue + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "inputValue",
                "local_4": "calculatedValue"
            },
            "calling": [
                "HAL_RCC_OscConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "perform_operation_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 performOperation_08005460(uint *inputParams)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint tempVar;\n  bool flag;\n  \n  if ((*inputParams & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (inputParams[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tempVar = inputParams[1];\n      if (tempVar == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (tempVar == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (tempVar == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (inputParams[1] == 0) {\n        startTime = getCurrentTime();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = getCurrentTime();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = getCurrentTime();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = getCurrentTime();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*inputParams & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (inputParams[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | inputParams[5] << 3;\n    }\n    else if (inputParams[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = getCurrentTime();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = getCurrentTime();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = getCurrentTime();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = getCurrentTime();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | inputParams[5] << 3;\n    }\n  }\n  if ((*inputParams & 8) != 0) {\n    if (inputParams[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = getCurrentTime();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = getCurrentTime();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = getCurrentTime();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = getCurrentTime();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      delayFunction(1);\n    }\n  }\n  if ((*inputParams & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = getCurrentTime();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = getCurrentTime();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    tempVar = inputParams[3];\n    if (tempVar == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (tempVar == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (tempVar == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (inputParams[3] == 0) {\n      startTime = getCurrentTime();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = getCurrentTime();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (inputParams[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (inputParams[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = getCurrentTime();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (inputParams[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | inputParams[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | inputParams[8] | inputParams[9];\n        _DAT_42420060 = 1;\n        startTime = getCurrentTime();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = getCurrentTime();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = getCurrentTime();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = getCurrentTime();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = getCurrentTime();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "perform_operation_08005460",
                "param_1": "inputParams",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "tempVar",
                "bVar5": "flag",
                "HAL_GetTick": "getCurrentTime",
                "param_1[4]": "inputParams[4]",
                "RCC_Delay": "delayFunction",
                "param_1[6]": "inputParams[6]",
                "param_1[3]": "inputParams[3]",
                "param_1[5]": "inputParams[5]",
                "param_1[7]": "inputParams[7]",
                "param_1[8]": "inputParams[8]",
                "param_1[9]": "inputParams[9]"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "RCC_Delay",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_processing_time_08005840",
            "code": "\n\n\nuint calculateProcessingTime_08005840(void)\n\n{\n  uint processingTime;\n  undefined2 inputValue;\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  \n  constant_4 = 0x10100f0e;\n  constant_3 = 0xd0c0b0a;\n  constant_2 = 0x9080706;\n  constant_1 = 0x5040302;\n  inputValue = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    processingTime = (uint)*(byte *)((int)&constant_1 + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      processingTime = processingTime * 4000000;\n    }\n    else {\n      processingTime = (processingTime * 8000000) /\n              (uint)*(byte *)((int)&inputValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    processingTime = 8000000;\n  }\n  return processingTime;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_processing_time_08005840",
                "local_1c": "inputValue",
                "uStack_18": "constant_1",
                "uStack_14": "constant_2",
                "uStack_10": "constant_3",
                "uStack_c": "constant_4",
                "uVar1": "processingTime"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "initialize_system_080058ac",
            "code": "\n\n\nundefined4 initializeSystem_080058ac(uint *configFlags,uint systemInfo)\n\n{\n  int startTime;\n  int currentTime;\n  uint sysClockFreq;\n  \n  if ((_DAT_40022000 & 7) < systemInfo) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | systemInfo;\n    if (systemInfo != (systemInfo & 7)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configFlags[2];\n  }\n  if ((*configFlags & 1) != 0) {\n    sysClockFreq = configFlags[1];\n    if (sysClockFreq == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((sysClockFreq != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = sysClockFreq | _DAT_40021004 & 0xfffffffc;\n    startTime = HAL_GetTick();\n    if (configFlags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (configFlags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (systemInfo < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | systemInfo;\n    if (systemInfo != (systemInfo & 7)) {\n      return 1;\n    }\n  }\n  if ((*configFlags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configFlags[3];\n  }\n  if ((*configFlags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configFlags[4] << 3;\n  }\n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000018 = sysClockFreq >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "initialize_system_080058ac",
                "param_1": "configFlags",
                "param_2": "systemInfo",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "sysClockFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_system_080058d2",
            "code": "\n\n\nundefined4 initializeSystem_080058d2(uint *flagsPtr,uint priority)\n\n{\n  int startTime;\n  int currentTime;\n  uint clockFrequency;\n  \n  if ((*flagsPtr & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flagsPtr[2];\n  }\n  if ((*flagsPtr & 1) != 0) {\n    clockFrequency = flagsPtr[1];\n    if (clockFrequency == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((clockFrequency != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = clockFrequency | _DAT_40021004 & 0xfffffffc;\n    startTime = getCurrentTime();\n    if (flagsPtr[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (flagsPtr[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = getCurrentTime();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (priority < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | priority;\n    if (priority != (priority & 7)) {\n      return 1;\n    }\n  }\n  if ((*flagsPtr & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flagsPtr[3];\n  }\n  if ((*flagsPtr & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flagsPtr[4] << 3;\n  }\n  clockFrequency = getSysClockFrequency();\n  DAT_20000018 = clockFrequency >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  initializeTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_system_080058d2",
                "param_1": "flagsPtr",
                "param_2": "priority",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "clockFrequency",
                "HAL_GetTick": "getCurrentTime",
                "HAL_RCC_GetSysClockFreq": "getSysClockFrequency",
                "HAL_InitTick": "initializeTick"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq",
                "HAL_InitTick",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_data_value_08005a1c",
            "code": "\nundefined4 get_data_value_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_data_value_08005a1c"
            },
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_adjusted_hclk_freq_08005a28",
            "code": "\n\n\nuint getAdjustedHCLKFreq_08005a28(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_adjusted_hclk_freq_08005a28",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig",
                "getTimerClkFreq",
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "get_adjusted_hclk_08005a48",
            "code": "\n\n\nuint getAdjustedHCLK_08005a48(void)\n\n{\n  uint HCLKFreq;\n  \n  HCLKFreq = HAL_RCC_GetHCLKFreq();\n  return HCLKFreq >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "get_adjusted_hclk_08005a48",
                "uVar1": "HCLKFreq"
            },
            "calling": [
                "HAL_RCCEx_GetPeriphCLKFreq",
                "UART_SetConfig",
                "getTimerClkFreq"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_parameters_08005a68",
            "code": "\n\n\nvoid initialize_parameters_08005a68(undefined4 *output_values,uint *input_values)\n\n{\n  *output_values = 0xf;\n  output_values[1] = _DAT_40021004 & 3;\n  output_values[2] = _DAT_40021004 & 0xf0;\n  output_values[3] = _DAT_40021004 & 0x700;\n  output_values[4] = _DAT_40021004 >> 3 & 0x700;\n  *input_values = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_parameters_08005a68",
                "param_1": "output_values",
                "param_2": "input_values"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_flags_and_values_08005aa4",
            "code": "\n\n\nundefined4 updateFlagsAndValues_08005aa4(uint *flags)\n\n{\n  uint flag1;\n  uint flag2;\n  int startTime;\n  int currentTime;\n  bool isFlagSet;\n  \n  if ((*flags & 1) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (flags[1] & 0x300))) {\n      flag2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      flag1 = _DAT_40021020 & 1;\n      _DAT_40021020 = flag2;\n      if (flag1 != 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentTime = HAL_GetTick();\n          if (5000 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | flags[1];\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | flags[2];\n  }\n  if ((*flags & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | flags[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_flags_and_values_08005aa4",
                "param_1": "flags",
                "uVar1": "flag1",
                "uVar2": "flag2",
                "iVar3": "startTime",
                "iVar4": "currentTime",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "get_clock_frequency_08005bb8",
            "code": "\n\n\nuint getClockFrequency_08005bb8(int mode)\n\n{\n  uint clockFreq;\n  undefined2 prescaler;\n  undefined4 multiplier;\n  undefined4 divider;\n  undefined4 delay;\n  undefined4 constant;\n  \n  constant = 0x10100f0e;\n  delay = 0xd0c0b0a;\n  divider = 0x9080706;\n  multiplier = 0x5040302;\n  prescaler = 0x201;\n  if (mode == 2) {\n    clockFreq = HAL_RCC_GetPCLK2Freq();\n    clockFreq = clockFreq / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (mode == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      clockFreq = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        clockFreq = 4000000;\n      }\n      else {\n        clockFreq = 8000000 / *(byte *)((int)&prescaler - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      clockFreq = clockFreq * *(byte *)((int)&multiplier + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        clockFreq = (clockFreq * 2) / 3;\n      }\n    }\n  }\n  else if (mode == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      clockFreq = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      clockFreq = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        clockFreq = 0;\n      }\n      else {\n        clockFreq = 0xf424;\n      }\n    }\n    else {\n      clockFreq = 0;\n    }\n  }\n  else {\n    clockFreq = 0;\n  }\n  return clockFreq;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "get_clock_frequency_08005bb8",
                "param_1": "mode",
                "uVar1": "clockFreq",
                "local_24": "prescaler",
                "uStack_20": "multiplier",
                "uStack_1c": "divider",
                "uStack_18": "delay",
                "uStack_14": "constant"
            },
            "calling": [
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "handle_alarm_events_08005cb4",
            "code": "\n\n\nvoid handleAlarmEvents_08005cb4(uint **parameter)\n\n{\n  if (((**parameter & 2) != 0) && (((*parameter)[1] & 2) != 0)) {\n    handleAlarmACallback();\n    (*parameter)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)parameter + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "handle_alarm_events_08005cb4",
                "param_1": "parameter",
                "HAL_RTC_AlarmAEventCallback": "handleAlarmACallback"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_memory_08005cec",
            "code": "\nvoid updateMemory_08005cec(int memoryAddress,uint *data)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(memoryAddress + 4);\n  updatedValue3 = *data;\n  updatedValue1 = *(uint *)(memoryAddress + 0x20) & 0xfffffffd | data[2];\n  if (memoryAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | data[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | data[5] | data[6];\n  }\n  *(uint *)(memoryAddress + 4) = updatedValue2;\n  *(uint *)(memoryAddress + 0x18) = *(uint *)(memoryAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(memoryAddress + 0x34) = data[1];\n  *(uint *)(memoryAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_memory_08005cec",
                "param_1": "memoryAddress",
                "param_2": "data",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_parameters_08005d48",
            "code": "\nvoid updateParameters_08005d48(int address,uint *data)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  uint updatedVar3;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  updatedVar2 = *(uint *)(address + 4);\n  updatedVar3 = *data;\n  updatedVar1 = *(uint *)(address + 0x20) & 0xfffffdff | data[2] << 8;\n  if (address == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xfffff7ff | data[3] << 8) & 0xfffffbff;\n    updatedVar2 = updatedVar2 & 0xffffcfff | data[5] << 4 | data[6] << 4;\n  }\n  *(uint *)(address + 4) = updatedVar2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | updatedVar3;\n  *(uint *)(address + 0x3c) = data[1];\n  *(uint *)(address + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_parameters_08005d48",
                "param_1": "address",
                "param_2": "data",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "update_data_08005dac",
            "code": "\nvoid updateData_08005dac(int dataAddress,int *dataArray)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  value1 = *(uint *)(dataAddress + 4);\n  value2 = *dataArray;\n  value3 = dataArray[2];\n  if (dataAddress == 0x40012c00) {\n    value1 = value1 & 0xffffbfff | dataArray[5] << 6;\n  }\n  *(uint *)(dataAddress + 4) = value1;\n  *(uint *)(dataAddress + 0x1c) = *(uint *)(dataAddress + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(dataAddress + 0x40) = dataArray[1];\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "update_data_08005dac",
                "param_1": "dataAddress",
                "param_2": "dataArray",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "reset_timer_08005df4",
            "code": "\nvoid resetTimer_08005df4(uint **timerPointer)\n\n{\n  uint *timerData;\n  \n  *(undefined *)((int)timerPointer + 0x3d) = 2;\n  timerData = *timerPointer;\n  if ((timerData[8] & 0x1111) == 0) {\n    if ((timerData[8] & 0x444) == 0) {\n      *timerData = *timerData & 0xfffffffe;\n    }\n  }\n  deinitializeTIM(timerPointer);\n  *(undefined *)((int)timerPointer + 0x3d) = 0;\n  *(undefined *)(timerPointer + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "reset_timer_08005df4",
                "param_1": "timerPointer",
                "puVar1": "timerData",
                "HAL_TIM_OC_MspDeInit": "deinitializeTIM"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "HAL_TIM_OC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "deinit_pwm_08005e2e",
            "code": "\nvoid deinit_PWM_08005e2e(uint **param)\n\n{\n  uint *ptr1;\n  \n  *(undefined *)((int)param + 0x3d) = 2;\n  ptr1 = *param;\n  if ((ptr1[8] & 0x1111) == 0) {\n    if ((ptr1[8] & 0x444) == 0) {\n      *ptr1 = *ptr1 & 0xfffffffe;\n    }\n  }\n  HAL_TIM_PWM_MspDeInit(param);\n  *(undefined *)((int)param + 0x3d) = 0;\n  *(undefined *)(param + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "deinit_pwm_08005e2e",
                "param_1": "param",
                "puVar1": "ptr1"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "process_callbacks_08005e6e",
            "code": "\nvoid processCallbacks_08005e6e(int *callbackData)\n\n{\n  int callbackValue;\n  \n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 2) != 0) && ((*(uint *)(callbackValue + 0xc) & 2) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xfffffffd;\n    *(undefined *)(callbackData + 7) = 1;\n    if ((*(uint *)(*callbackData + 0x18) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback();\n      HAL_TIM_PWM_PulseFinishedCallback(callbackData);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback();\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 4) != 0) && ((*(uint *)(callbackValue + 0xc) & 4) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xfffffffb;\n    *(undefined *)(callbackData + 7) = 2;\n    if ((*(uint *)(*callbackData + 0x18) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackData);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackData);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackData);\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 8) != 0) && ((*(uint *)(callbackValue + 0xc) & 8) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xfffffff7;\n    *(undefined *)(callbackData + 7) = 4;\n    if ((*(uint *)(*callbackData + 0x1c) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackData);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackData);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackData);\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 0x10) != 0) && ((*(uint *)(callbackValue + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xffffffef;\n    *(undefined *)(callbackData + 7) = 8;\n    if ((*(uint *)(*callbackData + 0x1c) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackData);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackData);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackData);\n    }\n    *(undefined *)(callbackData + 7) = 0;\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 1) != 0) && ((*(uint *)(callbackValue + 0xc) & 1) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(callbackData);\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 0x80) != 0) && ((*(uint *)(callbackValue + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(callbackData);\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 0x40) != 0) && ((*(uint *)(callbackValue + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xffffffbf;\n    HAL_TIM_TriggerCallback(callbackData);\n  }\n  callbackValue = *callbackData;\n  if (((*(uint *)(callbackValue + 0x10) & 0x20) != 0) && ((*(uint *)(callbackValue + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(callbackValue + 0x10) = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(callbackData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "process_callbacks_08005e6e",
                "param_1": "callbackData",
                "iVar1": "callbackValue"
            },
            "calling": [],
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_memory_registers_08005fe8",
            "code": "\nvoid updateMemoryRegisters_08005fe8(uint *memoryRegister,uint *newValues)\n\n{\n  uint oldValue;\n  \n  oldValue = *memoryRegister;\n  if ((((memoryRegister == (uint *)0x40012c00) || (memoryRegister == (uint *)0x40000000)) ||\n      (memoryRegister == (uint *)0x40000400)) || (memoryRegister == (uint *)0x40000800)) {\n    oldValue = oldValue & 0xffffff8f | newValues[1];\n  }\n  if (((memoryRegister == (uint *)0x40012c00) || (memoryRegister == (uint *)0x40000000)) ||\n     ((memoryRegister == (uint *)0x40000400 || (memoryRegister == (uint *)0x40000800)))) {\n    oldValue = oldValue & 0xfffffcff | newValues[3];\n  }\n  *memoryRegister = oldValue & 0xffffff7f | newValues[5];\n  memoryRegister[11] = newValues[2];\n  memoryRegister[10] = *newValues;\n  if (memoryRegister == (uint *)0x40012c00) {\n    extraValue = newValues[4];\n  }\n  memoryRegister[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_memory_registers_08005fe8",
                "param_1": "memoryRegister",
                "param_2": "newValues",
                "uVar1": "oldValue",
                "uRam40012c30": "extraValue",
                "param_1[0xb]": "memoryRegister[11]",
                "param_1[10]": "memoryRegister[10]",
                "param_2[4]": "newValues[4]",
                "param_1[5]": "memoryRegister[5]"
            },
            "calling": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_OC_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "init_timer_08006060",
            "code": "\nundefined4 initTimer_08006060(undefined4 *timerConfig)\n\n{\n  if (timerConfig != (undefined4 *)0x0) {\n    if (*(char *)((int)timerConfig + 0x3d) == '\\0') {\n      *(undefined *)(timerConfig + 0xf) = 0;\n      HAL_TIM_OC_MspInit();\n    }\n    *(undefined *)((int)timerConfig + 0x3d) = 2;\n    TIM_Base_SetConfig(*timerConfig,timerConfig + 1);\n    *(undefined *)((int)timerConfig + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "init_timer_08006060",
                "param_1": "timerConfig"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_OC_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "initialize_pwm_08006092",
            "code": "\nundefined4 initialize_PWM_08006092(undefined4 *config_data)\n\n{\n  if (config_data != (undefined4 *)0x0) {\n    if (*(char *)((int)config_data + 0x3d) == '\\0') {\n      *(undefined *)(config_data + 0xf) = 0;\n      initialize_PWM_08006092_peripheral;\n    }\n    *(undefined *)((int)config_data + 0x3d) = 2;\n    TIM_Base_SetConfig(*config_data,config_data + 1);\n    *(undefined *)((int)config_data + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "initialize_pwm_08006092",
                "param_1": "config_data",
                "HAL_TIM_PWM_MspInit()": "initialize_PWM_peripheral"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "modify_parameters_080060c4",
            "code": "\nvoid modifyParameters_080060c4(int functionAddress,int *parametersArray)\n\n{\n  uint modifiedValue1;\n  uint modifiedValue2;\n  int inputValue;\n  \n  *(uint *)(functionAddress + 0x20) = *(uint *)(functionAddress + 0x20) & 0xffffffef;\n  modifiedValue2 = *(uint *)(functionAddress + 4);\n  inputValue = *parametersArray;\n  modifiedValue1 = *(uint *)(functionAddress + 0x20) & 0xffffffdf | paramValue2 << 4;\n  if (functionAddress == 0x40012c00) {\n    modifiedValue1 = (modifiedValue1 & 0xffffff7f | paramValue3 << 4) & 0xffffffbf;\n    modifiedValue2 = modifiedValue2 & 0xfffff3ff | paramValue4 << 2 | paramValue5 << 2;\n  }\n  *(uint *)(functionAddress + 4) = modifiedValue2;\n  *(uint *)(functionAddress + 0x18) = *(uint *)(functionAddress + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(functionAddress + 0x38) = parametersArray[1];\n  *(uint *)(functionAddress + 0x20) = modifiedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "modify_parameters_080060c4",
                "param_1": "functionAddress",
                "param_2": "parametersArray",
                "uVar1": "modifiedValue1",
                "uVar2": "modifiedValue2",
                "iVar3": "inputValue",
                "param_2[2]": "paramValue2",
                "param_2[3]": "paramValue3",
                "param_2[5]": "paramValue4",
                "param_2[6]": "paramValue5"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_TIM_OC_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "configure_tim_oc_08006128",
            "code": "\nundefined4 configure_TIM_OC_08006128(undefined4 *config,undefined4 param2,undefined4 channel)\n\n{\n  if (*(char *)(config + 0xf) != '\\x01') {\n    *(undefined *)(config + 0xf) = 1;\n    *(undefined *)((int)config + 0x3d) = 2;\n    switch(channel) {\n    case 0:\n      TIM_OC1_SetConfig(*config);\n      break;\n    case 4:\n      TIM_OC2_SetConfig(*config);\n      break;\n    case 8:\n      TIM_OC3_SetConfig(*config);\n      break;\n    case 0xc:\n      TIM_OC4_SetConfig(*config);\n    }\n    *(undefined *)((int)config + 0x3d) = 1;\n    *(undefined *)(config + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "configure_tim_oc_08006128",
                "param_1": "config",
                "param_2": "param2",
                "param_3": "channel"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "initialize_timer_output_channel_08006186",
            "code": "\nundefined4 initializeTimerOutputChannel_08006186(int *timerParams,int configParams,undefined4 channelNumber)\n\n{\n  if (*(char *)(timerParams + 0xf) != '\\x01') {\n    *(undefined *)(timerParams + 0xf) = 1;\n    *(undefined *)((int)timerParams + 0x3d) = 2;\n    switch(channelNumber) {\n    case 0:\n      configureOutputCompare1(*timerParams);\n      *(uint *)(*timerParams + 0x18) = *(uint *)(*timerParams + 0x18) | 8;\n      *(uint *)(*timerParams + 0x18) = *(uint *)(*timerParams + 0x18) & 0xfffffffb;\n      *(uint *)(*timerParams + 0x18) = *(uint *)(*timerParams + 0x18) | *(uint *)(configParams + 0x10);\n      break;\n    case 4:\n      configureOutputCompare2(*timerParams);\n      *(uint *)(*timerParams + 0x18) = *(uint *)(*timerParams + 0x18) | 0x800;\n      *(uint *)(*timerParams + 0x18) = *(uint *)(*timerParams + 0x18) & 0xfffffbff;\n      *(uint *)(*timerParams + 0x18) = *(uint *)(*timerParams + 0x18) | *(int *)(configParams + 0x10) << 8;\n      break;\n    case 8:\n      configureOutputCompare3(*timerParams);\n      *(uint *)(*timerParams + 0x1c) = *(uint *)(*timerParams + 0x1c) | 8;\n      *(uint *)(*timerParams + 0x1c) = *(uint *)(*timerParams + 0x1c) & 0xfffffffb;\n      *(uint *)(*timerParams + 0x1c) = *(uint *)(*timerParams + 0x1c) | *(uint *)(configParams + 0x10);\n      break;\n    case 0xc:\n      configureOutputCompare4(*timerParams);\n      *(uint *)(*timerParams + 0x1c) = *(uint *)(*timerParams + 0x1c) | 0x800;\n      *(uint *)(*timerParams + 0x1c) = *(uint *)(*timerParams + 0x1c) & 0xfffffbff;\n      *(uint *)(*timerParams + 0x1c) = *(uint *)(*timerParams + 0x1c) | *(int *)(configParams + 0x10) << 8;\n    }\n    *(undefined *)((int)timerParams + 0x3d) = 1;\n    *(undefined *)(timerParams + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "initialize_timer_output_channel_08006186",
                "param_1": "timerParams",
                "param_2": "configParams",
                "param_3": "channelNumber",
                "TIM_OC1_SetConfig": "configureOutputCompare1",
                "TIM_OC2_SetConfig": "configureOutputCompare2",
                "TIM_OC3_SetConfig": "configureOutputCompare3",
                "TIM_OC4_SetConfig": "configureOutputCompare4"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC2_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bit_value_08006262",
            "code": "\nvoid updateBitValue_08006262(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bit_value_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_PWM_Start",
                "HAL_TIM_PWM_Stop",
                "HAL_TIM_OC_Stop_IT"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_flags_and_timers_08006280",
            "code": "\nundefined4 updateFlagsAndTimers_08006280(uint **flagsAndTimers,undefined4 flag)\n\n{\n  switch(flag) {\n  case 0:\n    (*flagsAndTimers)[3] = (*flagsAndTimers)[3] | 2;\n    break;\n  case 4:\n    (*flagsAndTimers)[3] = (*flagsAndTimers)[3] | 4;\n    break;\n  case 8:\n    (*flagsAndTimers)[3] = (*flagsAndTimers)[3] | 8;\n    break;\n  case 0xc:\n    (*flagsAndTimers)[3] = (*flagsAndTimers)[3] | 0x10;\n  }\n  setTimerChannel(*flagsAndTimers,flag,1);\n  if (*flagsAndTimers == (uint *)0x40012c00) {\n    timerStatus = timerStatus | 0x8000;\n  }\n  **flagsAndTimers = **flagsAndTimers | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_flags_and_timers_08006280",
                "param_1": "flagsAndTimers",
                "param_2": "flag",
                "TIM_CCxChannelCmd": "setTimerChannel",
                "uRam40012c44": "timerStatus"
            },
            "calling": [
                "TimerPulseInit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "modify_and_disable_timer_channel_080062f4",
            "code": "\nundefined4 modifyAndDisableTimerChannel_080062f4(uint **timerParameters,undefined4 channel)\n\n{\n  uint *tempPointer;\n  \n  switch(channel) {\n  case 0:\n    (*timerParameters)[3] = (*timerParameters)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*timerParameters)[3] = (*timerParameters)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*timerParameters)[3] = (*timerParameters)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*timerParameters)[3] = (*timerParameters)[3] & 0xffffffef;\n  }\n  TIM_CCxChannelCmd(*timerParameters,channel,0);\n  if (((*timerParameters == (uint *)0x40012c00) && ((uRam40012c20 & 0x1111) == 0)) &&\n     ((uRam40012c20 & 0x444) == 0)) {\n    uRam40012c44 = uRam40012c44 & 0xffff7fff;\n  }\n  tempPointer = *timerParameters;\n  if (((tempPointer[8] & 0x1111) == 0) && ((tempPointer[8] & 0x444) == 0)) {\n    *tempPointer = *tempPointer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "modify_and_disable_timer_channel_080062f4",
                "param_1": "timerParameters",
                "param_2": "channel",
                "puVar1": "tempPointer"
            },
            "calling": [
                "TimerPulseDeinit"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "configure_channel_08006390",
            "code": "\nundefined4 configureChannel_08006390(uint **channelPtr,undefined4 channelCmd)\n\n{\n  TIM_CCxChannelCmd(*channelPtr,channelCmd,1);\n  if (*channelPtr == (uint *)0x40012c00) {\n    channelFlag = channelFlag | 0x8000;\n  }\n  **channelPtr = **channelPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "configure_channel_08006390",
                "param_1": "channelPtr",
                "param_2": "channelCmd",
                "uRam40012c44": "channelFlag"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "initialize_timers_080063c0",
            "code": "\nundefined4 initializeTimers_080063c0(uint **timerArray,undefined4 command)\n\n{\n  uint *currentTimer;\n  \n  TIM_CCxChannelCmd(*timerArray,command,0);\n  if (((*timerArray == (uint *)0x40012c00) && ((timerStatus & 0x1111) == 0)) &&\n     ((timerStatus & 0x444) == 0)) {\n    timerControl = timerControl & 0xffff7fff;\n  }\n  currentTimer = *timerArray;\n  if (((currentTimer[8] & 0x1111) == 0) && ((currentTimer[8] & 0x444) == 0)) {\n    *currentTimer = *currentTimer & 0xfffffffe;\n  }\n  *(undefined *)((int)timerArray + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "initialize_timers_080063c0",
                "param_1": "timerArray",
                "param_2": "command",
                "puVar1": "currentTimer",
                "uRam40012c20": "timerStatus",
                "uRam40012c44": "timerControl"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_value_08006420",
            "code": "\nvoid updateValue_08006420(int baseAddress,uint bitOffset,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_value_08006420",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Start",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_tim_channel_and_flags_0800643c",
            "code": "\nundefined4 setTimChannelAndFlags_0800643c(uint **channelData,undefined4 channelCommand)\n\n{\n  TIM_CCxNChannelCmd(*channelData,channelCommand,4);\n  (*channelData)[0x11] = (*channelData)[0x11] | 0x8000;\n  **channelData = **channelData | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_tim_channel_and_flags_0800643c",
                "param_1": "channelData",
                "param_2": "channelCommand"
            },
            "calling": [
                "pwm_start"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "disable_timer_channel_08006460",
            "code": "\nundefined4 disableTimerChannel_08006460(uint **timerPtr,undefined4 channel)\n\n{\n  uint *timer;\n  \n  disableChannel(*timerPtr,channel,0);\n  timer = *timerPtr;\n  if (((timer[8] & 0x1111) == 0) && ((timer[8] & 0x444) == 0)) {\n    timer[0x11] = timer[0x11] & 0xffff7fff;\n  }\n  timer = *timerPtr;\n  if (((timer[8] & 0x1111) == 0) && ((timer[8] & 0x444) == 0)) {\n    *timer = *timer & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "disable_timer_channel_08006460",
                "param_1": "timerPtr",
                "param_2": "channel",
                "puVar1": "timer",
                "TIM_CCxNChannelCmd": "disableChannel"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "set_flags_and_values_080064b0",
            "code": "\nvoid setFlagsAndValues_080064b0(int *param)\n\n{\n  *(uint *)(*param + 0xc) = *(uint *)(*param + 0xc) & 0xfffffedf;\n  *(uint *)(*param + 0x14) = *(uint *)(*param + 0x14) & 0xfffffffe;\n  *(undefined *)((int)param + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "set_flags_and_values_080064b0",
                "param_1": "param"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "update_data_080064cc",
            "code": "\nundefined4 updateData_080064cc(int *data)\n\n{\n  short counter;\n  byte *bytePtr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)data[8];\n    data[8] = (int)(bytePtr + 1);\n    *(uint *)(*data + 4) = (uint)*bytePtr;\n  }\n  counter = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = counter;\n  if (counter == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "update_data_080064cc",
                "param_1": "data",
                "sVar1": "counter",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_frequency_08006538",
            "code": "\nvoid calculateFrequency_08006538(int *input)\n\n{\n  int pclk1_freq;\n  int pclk1_freq;\n  int pclk1_freq;\n  int pclk1_freq;\n  int pclk1_freq;\n  int input[1];\n  int input[1];\n  int input[1];\n  int input[1];\n  int input[0];\n  \n  *(uint *)(*input + 0x10) = *(uint *)(*input + 0x10) & 0xffffcfff | input[3];\n  *(uint *)(*input + 0xc) =\n       input[2] | input[4] | input[5] | *(uint *)(*input + 0xc) & 0xffffe9f3;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffcff | input[6];\n  input[0] = *input;\n  if (input[0] != 0x40013800) {\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    input[1] = input[1];\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    input[1] = input[1];\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    input[1] = input[1];\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    input[1] = input[1];\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(input[0] + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1_freq * 0x19) / (uint)(input[1] << 2) +\n                        (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(input[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1_freq * 0x19) / (uint)(input[1] << 2) +\n           (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) * 0x10;\n    return;\n  }\n  input[0] = HAL_RCC_GetPCLK2Freq();\n  pclk1_freq = input[1];\n  pclk1_freq = HAL_RCC_GetPCLK2Freq();\n  input[1] = input[1];\n  pclk1_freq = HAL_RCC_GetPCLK2Freq();\n  input[1] = input[1];\n  pclk1_freq = HAL_RCC_GetPCLK2Freq();\n  input[1] = input[1];\n  pclk1_freq = HAL_RCC_GetPCLK2Freq();\n  input[8] = ((uint)((int)((ulonglong)\n                               (((uint)(pclk1_freq * 0x19) / (uint)(input[1] << 2) +\n                                (int)(((ulonglong)(uint)(pclk1_freq * 0x19) /\n                                      (ulonglong)(uint)(input[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(pclk1_freq * 0x19) / (uint)(input[1] << 2) +\n                   (int)(((ulonglong)(uint)(pclk1_freq * 0x19) / (ulonglong)(uint)(input[1] << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(input[0] * 0x19) / (ulonglong)(uint)(pclk1_freq << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_frequency_08006538",
                "param_1": "input",
                "iVar1": "pclk1_freq",
                "iVar2": "pclk1_freq",
                "iVar3": "pclk1_freq",
                "iVar4": "pclk1_freq",
                "iVar5": "pclk1_freq",
                "iVar6": "input[1]",
                "iVar7": "input[1]",
                "iVar8": "input[1]",
                "iVar9": "input[1]",
                "iVar10": "input[0]",
                "iRam40013808": "input[8]"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "check_parameters_080066e8",
            "code": "\nundefined4 checkParameters_080066e8(uint **paramPointer,uint condition,uint expectedResult,int startTime,uint timeout)\n\n{\n  int currentTick;\n  \n  do {\n    if (((condition & ~**paramPointer) == 0) != expectedResult) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), (uint)(currentTick - startTime) <= timeout))));\n  (*paramPointer)[3] = (*paramPointer)[3] & 0xfffffe5f;\n  (*paramPointer)[5] = (*paramPointer)[5] & 0xfffffffe;\n  *(undefined *)((int)paramPointer + 0x39) = 0x20;\n  *(undefined *)((int)paramPointer + 0x3a) = 0x20;\n  *(undefined *)(paramPointer + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "check_parameters_080066e8",
                "param_1": "paramPointer",
                "param_2": "condition",
                "param_3": "expectedResult",
                "param_4": "startTime",
                "param_5": "timeout",
                "iVar1": "currentTick"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "initialize_uart_0800674e",
            "code": "\nundefined4 initialize_uart_0800674e(int *uart_handle)\n\n{\n  if (uart_handle != (int *)0x0) {\n    if (*(char *)((int)uart_handle + 0x39) == '\\0') {\n      *(undefined *)(uart_handle + 0xe) = 0;\n      initialize_uart_0800674e_peripherals();\n    }\n    *(undefined *)((int)uart_handle + 0x39) = 0x24;\n    *(uint *)(*uart_handle + 0xc) = *(uint *)(*uart_handle + 0xc) & 0xffffdfff;\n    set_uart_configuration(uart_handle);\n    *(uint *)(*uart_handle + 0x10) = *(uint *)(*uart_handle + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_handle + 0x14) = *(uint *)(*uart_handle + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_handle + 0xc) = *(uint *)(*uart_handle + 0xc) | 0x2000;\n    uart_handle[0xf] = 0;\n    *(undefined *)((int)uart_handle + 0x39) = 0x20;\n    *(undefined *)((int)uart_handle + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "initialize_uart_0800674e",
                "param_1": "uart_handle",
                "HAL_UART_MspInit": "initialize_uart_peripherals",
                "UART_SetConfig": "set_uart_configuration"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 processData_080067ac(int *dataPtr,ushort *dataBuffer,int bufferSize,undefined4 tickValue)\n\n{\n  int flagWaitResult;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (dataBuffer == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (bufferSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      returnValue = HAL_GetTick();\n      *(short *)(dataPtr + 9) = (short)bufferSize;\n      *(short *)((int)dataPtr + 0x26) = (short)bufferSize;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          flagWaitResult = UART_WaitOnFlagUntilTimeout(dataPtr,0x80,0,returnValue,tickValue);\n          if (flagWaitResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *dataBuffer & 0x1ff;\n          if (dataPtr[4] == 0) {\n            dataBuffer = dataBuffer + 1;\n          }\n          else {\n            dataBuffer = (ushort *)((int)dataBuffer + 1);\n          }\n        }\n        else {\n          flagWaitResult = UART_WaitOnFlagUntilTimeout(dataPtr,0x80,0,returnValue,tickValue);\n          if (flagWaitResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)dataBuffer;\n          dataBuffer = (ushort *)((int)dataBuffer + 1);\n        }\n      }\n      flagWaitResult = UART_WaitOnFlagUntilTimeout(dataPtr,0x40,0,returnValue,tickValue);\n      if (flagWaitResult == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "dataPtr",
                "param_2": "dataBuffer",
                "param_3": "bufferSize",
                "param_4": "tickValue",
                "iVar1": "flagWaitResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_and_update_data_0800688e",
            "code": "\nundefined4 validate_and_update_data_0800688e(int *data_ptr,int value1,int value2)\n\n{\n  if (*(char *)((int)data_ptr + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(data_ptr + 0xe) != '\\x01') {\n    data_ptr[8] = value1;\n    *(short *)(data_ptr + 9) = (short)value2;\n    *(short *)((int)data_ptr + 0x26) = (short)value2;\n    data_ptr[0xf] = 0;\n    *(undefined *)((int)data_ptr + 0x39) = 0x21;\n    *(undefined *)(data_ptr + 0xe) = 0;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_and_update_data_0800688e",
                "param_1": "data_ptr",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[8]": "data_ptr[8]",
                "param_1[0xf]": "data_ptr[0xf]"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "check_input_validity_080068d6",
            "code": "\nundefined4 check_input_validity_080068d6(int *input_buffer,int value1,int value2)\n\n{\n  if (*(char *)((int)input_buffer + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_buffer + 0xe) != '\\x01') {\n    input_buffer[10] = value1;\n    *(short *)(input_buffer + 0xb) = (short)value2;\n    *(short *)((int)input_buffer + 0x2e) = (short)value2;\n    input_buffer[0xf] = 0;\n    *(undefined *)((int)input_buffer + 0x3a) = 0x22;\n    *(undefined *)(input_buffer + 0xe) = 0;\n    *(uint *)(*input_buffer + 0xc) = *(uint *)(*input_buffer + 0xc) | 0x100;\n    *(uint *)(*input_buffer + 0x14) = *(uint *)(*input_buffer + 0x14) | 1;\n    *(uint *)(*input_buffer + 0xc) = *(uint *)(*input_buffer + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "check_input_validity_080068d6",
                "param_1": "input_buffer",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_uart_settings_08006932",
            "code": "\nundefined_value4 update_uart_settings_08006932(integer *settings_ptr)\n\n{\n  *(unsigned_int *)(*settings_ptr + 0xc) = *(unsigned_int *)(*settings_ptr + 0xc) & 0xffffffbf;\n  *(undefined_value *)((integer)settings_ptr + 0x39) = 0x20;\n  handle_uart_transmission_complete();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_uart_settings_08006932",
                "param_1": "settings_ptr",
                "HAL_UART_TxCpltCallback": "handle_uart_transmission_complete",
                "uint": "unsigned_int",
                "int": "integer",
                "undefined": "undefined_value"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *inputData)\n\n{\n  byte *bytePointer;\n  short counter;\n  undefined *undefinedPointer;\n  \n  if (*(char *)((int)inputData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      *(ushort *)inputData[10] = (ushort)((uint)(*(int *)(*inputData + 4) << 0x17) >> 0x17);\n      inputData[10] = inputData[10] + 2;\n    }\n    else {\n      *(ushort *)inputData[10] = (ushort)*(undefined4 *)(*inputData + 4) & 0xff;\n      inputData[10] = inputData[10] + 1;\n    }\n  }\n  else if (inputData[4] == 0) {\n    undefinedPointer = (undefined *)inputData[10];\n    inputData[10] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*inputData + 4);\n  }\n  else {\n    bytePointer = (byte *)inputData[10];\n    inputData[10] = (int)(bytePointer + 1);\n    *bytePointer = (byte)*(undefined4 *)(*inputData + 4) & 0x7f;\n  }\n  counter = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffffdf;\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xfffffeff;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "inputData",
                "pbVar1": "bytePointer",
                "sVar2": "counter",
                "puVar3": "undefinedPointer"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_input_080069ec",
            "code": "\nvoid processInput_080069ec(uint **inputParams)\n\n{\n  int variable1;\n  uint variable2;\n  uint *pointerVar;\n  uint variable3;\n  uint variable4;\n  \n  pointerVar = *inputParams;\n  variable4 = *pointerVar;\n  variable2 = pointerVar[3];\n  if ((((variable4 & 0xf) == 0) && ((variable4 & 0x20) != 0)) && ((variable2 & 0x20) != 0)) {\n    UART_Receive_IT(inputParams);\n    return;\n  }\n  if (((variable4 & 0xf) == 0) || ((variable3 = pointerVar[5] & 1, variable3 == 0 && ((variable2 & 0x120) == 0)))) {\n    if (((variable4 & 0x80) != 0) && ((variable2 & 0x80) != 0)) {\n      UART_Transmit_IT(inputParams);\n      return;\n    }\n    if (((variable4 & 0x40) != 0) && ((variable2 & 0x40) != 0)) {\n      UART_EndTransmit_IT(inputParams);\n    }\n  }\n  else {\n    if (((variable4 & 1) != 0) && ((variable2 & 0x100) != 0)) {\n      inputParams[0xf] = (uint *)((uint)inputParams[0xf] | 1);\n    }\n    if (((variable4 & 4) != 0) && (variable3 != 0)) {\n      inputParams[0xf] = (uint *)((uint)inputParams[0xf] | 2);\n    }\n    if (((variable4 & 2) != 0) && (variable3 != 0)) {\n      inputParams[0xf] = (uint *)((uint)inputParams[0xf] | 4);\n    }\n    if (((variable4 & 8) != 0) && (variable3 != 0)) {\n      inputParams[0xf] = (uint *)((uint)inputParams[0xf] | 8);\n    }\n    if (inputParams[0xf] != (uint *)0x0) {\n      if (((variable4 & 0x20) != 0) && ((variable2 & 0x20) != 0)) {\n        UART_Receive_IT(inputParams);\n      }\n      if ((((uint)inputParams[0xf] & 8) == 0) && (((*inputParams)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(inputParams);\n        inputParams[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(inputParams);\n      pointerVar = *inputParams;\n      if ((pointerVar[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(inputParams);\n        return;\n      }\n      pointerVar[5] = pointerVar[5] & 0xffffffbf;\n      if (inputParams[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(inputParams);\n        return;\n      }\n      inputParams[0xd][0xd] = (uint)&LAB_08006b0c_1;\n      variable1 = HAL_DMA_Abort_IT(inputParams[0xd]);\n      if (variable1 != 0) {\n        (*(code *)inputParams[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_input_080069ec",
                "param_1": "inputParams",
                "iVar1": "variable1",
                "uVar2": "variable2",
                "puVar3": "pointerVar",
                "uVar4": "variable3",
                "uVar5": "variable4"
            },
            "calling": [],
            "called": [
                "UART_EndRxTransfer",
                "UART_EndTransmit_IT",
                "UART_Receive_IT",
                "HAL_UART_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "UART_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int baseAddress)\n\n{\n  return *(byte *)(baseAddress + 0x3a) | *(byte *)(baseAddress + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "baseAddress"
            },
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "get_bit_08006b28",
            "code": "\nuint getBit_08006b28(uint input,int offset)\n\n{\n  return *(uint *)(offset + ((input << 0x18) >> 0x1c) * 4) >> (input & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "get_bit_08006b28",
                "param_1": "input",
                "param_2": "offset"
            },
            "calling": [
                "analogWrite",
                "digitalWrite",
                "digitalRead",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "update_bit_array_08006b3e",
            "code": "\nvoid updateBitArray_08006b3e(uint inputValue,int arrayAddress)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedIndex * 4) = *(uint *)(arrayAddress + shiftedIndex * 4) | 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "update_bit_array_08006b3e",
                "param_1": "inputValue",
                "param_2": "arrayAddress",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "analogWrite",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "set_bit_08006b5c",
            "code": "\nvoid setBit_08006b5c(uint bitPosition,int array)\n\n{\n  uint index;\n  \n  index = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "set_bit_08006b5c",
                "param_1": "bitPosition",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "map_param_to_value_08006b7c",
            "code": "\nundefined4 mapParamToValue_08006b7c(undefined4 param)\n\n{\n  switch(param) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "map_param_to_value_08006b7c",
                "param_1": "param"
            },
            "calling": [
                "digitalWrite",
                "digitalRead"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_region_permissions_08006bb8",
            "code": "\n\n\nundefined4 setMemoryRegionPermissions_08006bb8(undefined4 regionIndex)\n\n{\n  undefined4 address;\n  \n  switch(regionIndex) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    address = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    address = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    address = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    address = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    address = 0x40011800;\n    break;\n  default:\n    address = 0;\n  }\n  return address;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_region_permissions_08006bb8",
                "param_1": "regionIndex",
                "uVar1": "address"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "HAL_TIM_PWM_MspInit",
                "HAL_ADC_MspInit",
                "digital_io_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "map_and_check_value_08006c60",
            "code": "\nuint map_and_check_value_08006c60(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = pinmap_function(input1,&DAT_0800a5b8,input3,input4,input4);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "map_and_check_value_08006c60",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "adc_read_value"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "pinmap_function_result_08006c7c",
            "code": "\nundefined4 pinmap_function_result_08006c7c(undefined4 input_param,undefined4 unused_param,undefined4 pinmap,undefined4 data)\n\n{\n  int result;\n  uint shifted_result;\n  \n  result = pinmap_function(input_param,&DAT_0800a6cc,pinmap,data,data);\n  shifted_result = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_result == 3) {\n    return 8;\n  }\n  if (shifted_result != 4) {\n    if (shifted_result != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "pinmap_function_result_08006c7c",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "pinmap",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "shifted_result"
            },
            "calling": [
                "pwm_start",
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "initialize_gpio_port_08006ca8",
            "code": "\n\n\nvoid initialize_GPIO_Port_08006ca8(int *port_address,undefined4 param_value)\n\n{\n  undefined4 gpio_init_result;\n  uint gpio_port_value;\n  int port_configuration;\n  uint pin_mask;\n  undefined4 gpio_speed;\n  undefined4 gpio_pull;\n  \n  port_configuration = *port_address;\n  if (port_configuration == 0x40012400) {\n    gpio_port_value = _DAT_40021018 | 0x200;\n    port_configuration = 0x200;\n    _DAT_40021018 = gpio_port_value;\n  }\n  else {\n    gpio_port_value = 0x40012800;\n    if (port_configuration == 0x40012800) {\n      gpio_port_value = _DAT_40021018 | 0x400;\n      port_configuration = 0x400;\n      _DAT_40021018 = gpio_port_value;\n    }\n  }\n  gpio_init_result = configure_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param_value,gpio_port_value,port_configuration);\n  pin_mask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  gpio_speed = 3;\n  gpio_pull = 0;\n  initialize_GPIO(gpio_init_result,&pin_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "initialize_gpio_port_08006ca8",
                "param_1": "port_address",
                "param_2": "param_value",
                "uVar1": "gpio_init_result",
                "uVar2": "gpio_port_value",
                "iVar3": "port_configuration",
                "local_18": "pin_mask",
                "local_14": "gpio_speed",
                "local_10": "gpio_pull",
                "set_GPIO_Port_Clock": "configure_GPIO_Port_Clock",
                "HAL_GPIO_Init": "initialize_GPIO"
            },
            "calling": [
                "HAL_ADC_Init"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_control_registers_08006d24",
            "code": "\n\n\nvoid updateControlRegisters_08006d24(int *registerValue)\n\n{\n  if (*registerValue != 0x40012400) {\n    if (*registerValue == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_control_registers_08006d24",
                "param_1": "registerValue"
            },
            "calling": [
                "HAL_ADC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "read_adc_value_08006d80",
            "code": "\nundefined2 read_adc_value_08006d80(undefined4 peripheral)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 adc_value;\n  uint channel;\n  undefined4 config1;\n  undefined4 config2;\n  int adc_handle;\n  undefined4 var_34;\n  undefined4 var_30;\n  undefined4 var_2c;\n  undefined4 var_28;\n  undefined4 var_24;\n  undefined4 var_20;\n  undefined4 var_1c;\n  undefined4 var_10;\n  \n  set_zero(&adc_handle,0,0x30);\n  channel = 0;\n  config1 = 0;\n  config2 = 0;\n  adc_value = 0;\n  adc_handle = get_pinmap_peripheral(peripheral,&DAT_0800a5b8);\n  if (adc_handle == 0) {\n    adc_value = 0;\n  }\n  else {\n    var_34 = 0;\n    var_30 = 0;\n    var_2c = 0;\n    var_24 = 0;\n    var_1c = 0xe0000;\n    var_10 = 0;\n    var_28 = 1;\n    var_20 = 0;\n    DAT_20000014 = (undefined)peripheral;\n    iVar1 = initialize_adc(&adc_handle);\n    if (iVar1 == 0) {\n      channel = get_channel_from_pinmap(peripheral);\n      if (channel < 0x12) {\n        config1 = 1;\n        config2 = 2;\n        iVar1 = configure_adc_channel(&adc_handle,&channel);\n        if (iVar1 == 0) {\n          iVar1 = start_adc_calibration(&adc_handle);\n          if (iVar1 == 0) {\n            iVar1 = start_adc(&adc_handle);\n            if (iVar1 == 0) {\n              iVar1 = poll_adc_conversion(&adc_handle,10);\n              if (iVar1 == 0) {\n                uVar2 = get_adc_state(&adc_handle);\n                if ((uVar2 & 0x200) != 0) {\n                  adc_value = get_adc_value(&adc_handle);\n                }\n                iVar1 = stop_adc(&adc_handle);\n                if (iVar1 == 0) {\n                  iVar1 = deinitialize_adc(&adc_handle);\n                  if (iVar1 != 0) {\n                    adc_value = 0;\n                  }\n                }\n                else {\n                  adc_value = 0;\n                }\n              }\n              else {\n                adc_value = 0;\n              }\n            }\n            else {\n              adc_value = 0;\n            }\n          }\n          else {\n            adc_value = 0;\n          }\n        }\n        else {\n          adc_value = 0;\n        }\n      }\n      else {\n        adc_value = 0;\n      }\n    }\n    else {\n      adc_value = 0;\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "read_adc_value_08006d80",
                "param_1": "peripheral",
                "local_46": "adc_value",
                "local_44": "channel",
                "local_40": "config1",
                "local_3c": "config2",
                "local_38": "adc_handle",
                "local_34": "var_34",
                "local_30": "var_30",
                "local_2c": "var_2c",
                "local_28": "var_28",
                "local_24": "var_24",
                "local_20": "var_20",
                "local_1c": "var_1c",
                "local_10": "var_10",
                "memset": "set_zero",
                "pinmap_peripheral": "get_pinmap_peripheral",
                "HAL_ADC_Init": "initialize_adc",
                "get_adc_channel": "get_channel_from_pinmap",
                "HAL_ADC_ConfigChannel": "configure_adc_channel",
                "HAL_ADCEx_Calibration_Start": "start_adc_calibration",
                "HAL_ADC_Start": "start_adc",
                "HAL_ADC_PollForConversion": "poll_adc_conversion",
                "HAL_ADC_GetState": "get_adc_state",
                "HAL_ADC_GetValue": "get_adc_value",
                "HAL_ADC_Stop": "stop_adc",
                "HAL_ADC_DeInit": "deinitialize_adc"
            },
            "calling": [
                "analogRead"
            ],
            "called": [
                "HAL_ADC_ConfigChannel",
                "HAL_ADCEx_Calibration_Start",
                "HAL_ADC_PollForConversion",
                "HAL_ADC_GetValue",
                "HAL_ADC_Init",
                "HAL_ADC_Start",
                "memset",
                "HAL_ADC_Stop",
                "HAL_ADC_DeInit",
                "get_adc_channel",
                "pinmap_peripheral",
                "HAL_ADC_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "configure_gpio_08006e68",
            "code": "\n\n\nvoid configureGPIO_08006e68(undefined4 clockPin)\n\n{\n  int pin;\n  undefined4 gpioPort;\n  uint gpioConfig;\n  undefined4 mode1;\n  undefined4 mode2;\n  undefined4 mode3;\n  \n  pin = pinmap_function((int)(char)DAT_20000014,&DAT_0800a6cc);\n  timer_enable_clock(clockPin);\n  gpioPort = set_GPIO_Port_Clock((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  mode1 = 2;\n  mode2 = 0;\n  mode3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(pin << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  gpioConfig = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  HAL_GPIO_Init(gpioPort,&gpioConfig);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "configure_gpio_08006e68",
                "param_1": "clockPin",
                "iVar1": "pin",
                "uVar2": "gpioPort",
                "local_20": "gpioConfig",
                "local_1c": "mode1",
                "local_18": "mode2",
                "local_14": "mode3"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [
                "timer_enable_clock",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "disable_timer_clock_08007110",
            "code": "\nvoid disable_timer_clock_08007110(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "disable_timer_clock_08007110"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_peripheral_08007118",
            "code": "\nvoid initializePeripheral_08007118(undefined4 peripheralAddress,uint timerFrequency,int param3Value,undefined4 param4Value,char flag)\n\n{\n  uint timerClockFreq;\n  int pwmChannel;\n  int pwmConfigResult;\n  undefined4 pwmConfig0;\n  undefined4 pwmConfig1;\n  undefined4 pwmConfig2;\n  undefined4 pwmConfig3;\n  undefined4 pwmConfig4;\n  undefined4 pwmConfig5;\n  undefined4 pwmConfig6;\n  int pinmapResult;\n  int timerCount;\n  undefined4 pwmConfig7;\n  int param3Copy;\n  undefined4 pwmConfig8;\n  undefined4 pwmConfig9;\n  undefined flagCopy;\n  \n  memset(&pinmapResult,0,0x40);\n  pwmConfig0 = 0;\n  pwmConfig1 = 0;\n  pwmConfig2 = 0;\n  pwmConfig3 = 0;\n  pwmConfig4 = 0;\n  pwmConfig5 = 0;\n  pwmConfig6 = 0;\n  pinmapResult = pinmap_peripheral(peripheralAddress,&DAT_0800a6cc);\n  if (pinmapResult != 0) {\n    timerClockFreq = getTimerClkFreq();\n    timerCount = timerClockFreq / timerFrequency - 1;\n    param3Copy = param3Value + -1;\n    pwmConfig8 = 0;\n    pwmConfig7 = 0;\n    pwmConfig9 = 0;\n    flagCopy = 0;\n    if (flag == '\\x01') {\n      DAT_20000014 = (undefined)peripheralAddress;\n      pwmChannel = HAL_TIM_PWM_Init(&pinmapResult);\n      if (pwmChannel != 0) {\n        return;\n      }\n    }\n    pwmChannel = get_pwm_channel(peripheralAddress);\n    if ((((pwmChannel == 0) || (pwmChannel == 4)) || (pwmChannel == 8)) || ((pwmChannel == 0xc || (pwmChannel == 0x18)))) {\n      pwmConfig0 = 0x60;\n      pwmConfig2 = 0;\n      pwmConfig4 = 0;\n      pwmConfig3 = 0;\n      pwmConfig6 = 0;\n      pwmConfig5 = 0;\n      pwmConfig1 = param4Value;\n      pwmConfigResult = HAL_TIM_PWM_ConfigChannel(&pinmapResult,&pwmConfig0,pwmChannel);\n      if (pwmConfigResult == 0) {\n        timerClockFreq = pinmap_function(peripheralAddress,&DAT_0800a6cc);\n        if ((timerClockFreq & 0x100000) == 0) {\n          HAL_TIM_PWM_Start(&pinmapResult,pwmChannel);\n        }\n        else {\n          HAL_TIMEx_PWMN_Start(&pinmapResult,pwmChannel);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_peripheral_08007118",
                "param_1": "peripheralAddress",
                "param_2": "timerFrequency",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "param_5": "flag",
                "uVar1": "timerClockFreq",
                "iVar2": "pwmChannel",
                "iVar3": "pwmConfigResult",
                "local_74": "pwmConfig0",
                "local_70": "pwmConfig1",
                "local_6c": "pwmConfig2",
                "local_68": "pwmConfig3",
                "local_64": "pwmConfig4",
                "local_60": "pwmConfig5",
                "local_5c": "pwmConfig6",
                "local_58": "pinmapResult",
                "local_54": "timerCount",
                "local_50": "pwmConfig7",
                "local_4c": "param3Copy",
                "local_48": "pwmConfig8",
                "local_44": "pwmConfig9",
                "local_1b": "flagCopy"
            },
            "calling": [
                "analogWrite"
            ],
            "called": [
                "HAL_TIM_PWM_Init",
                "HAL_TIM_PWM_ConfigChannel",
                "pinmap_function",
                "HAL_TIMEx_PWMN_Start",
                "memset",
                "get_pwm_channel",
                "HAL_TIM_PWM_Start",
                "getTimerClkFreq",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "stop_pwm_if_compatible_080071e4",
            "code": "\nvoid stopPwmIfCompatible_080071e4(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint functionResult;\n  int peripheralArray [17];\n  \n  peripheralArray[0] = pinmap_peripheral(peripheral,&DAT_0800a6cc);\n  if ((peripheralArray[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    functionResult = pinmap_function(peripheral,&DAT_0800a6cc);\n    if ((functionResult & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(peripheralArray,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(peripheralArray,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(peripheralArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "stop_pwm_if_compatible_080071e4",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "functionResult",
                "local_50": "peripheralArray"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "pinmap_function",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop",
                "pinmap_peripheral",
                "HAL_TIMEx_PWMN_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "get_current_tick_0800723c",
            "code": "\nvoid get_current_tick_0800723c(void)\n\n{\n  current_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "get_current_tick_0800723c",
                "HAL_GetTick": "current_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "handle_sys_tick_08007246",
            "code": "\nvoid handleSysTick_08007246(void)\n\n{\n  incrementTick();\n  handleSysTick_08007246Interrupt();\n  handleNoOsSysTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "handle_sys_tick_08007246",
                "HAL_IncTick": "incrementTick",
                "HAL_SYSTICK_IRQHandler": "handleSysTickInterrupt",
                "noOsSystickHandler": "handleNoOsSysTick"
            },
            "calling": [],
            "called": [
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_gpio_08007258",
            "code": "\n\n\nvoid initializeGPIO_08007258(uint pinNumber,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 clockPort;\n  uint pinMask;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 someValue;\n  \n  clockPort = set_GPIO_Port_Clock((pinNumber << 0x18) >> 0x1c);\n  pinMask = 1 << (pinNumber & 0xf) & 0xffff;\n  someValue = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((pinNumber - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((pinNumber == 0xf) || (pinNumber == 0x13)) || (pinNumber == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2_copy = param2;\n  param3_copy = param3;\n  HAL_GPIO_Init(clockPort,&pinMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_gpio_08007258",
                "param_1": "pinNumber",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "clockPort",
                "local_20": "pinMask",
                "local_1c": "param2_copy",
                "local_18": "param3_copy",
                "local_14": "someValue"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "set_GPIO_Port_Clock",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_pin_state_080072d8",
            "code": "\nvoid setPinState_080072d8(undefined4 gpioPort,undefined2 pinNumber,int state,undefined4 param)\n\n{\n  if (state == 0) {\n    HAL_GPIO_WritePin(gpioPort,pinNumber,0,param,param);\n    return;\n  }\n  HAL_GPIO_WritePin(gpioPort,pinNumber,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_pin_state_080072d8",
                "param_1": "gpioPort",
                "param_2": "pinNumber",
                "param_3": "state",
                "param_4": "param"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "read_gpi_opin_080072f0",
            "code": "\nvoid readGPIOpin_080072f0(undefined4 port,undefined2 pin,undefined4 param3,undefined4 param4)\n\n{\n  HAL_GPIO_ReadPin(port,pin,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "read_gpi_opin_080072f0",
                "param_1": "port",
                "param_2": "pin",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "digitalRead"
            ],
            "called": [
                "HAL_GPIO_ReadPin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_hardware_080072fa",
            "code": "\nvoid initializeHardware_080072fa(void)\n\n{\n  initializeHAL();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_hardware_080072fa",
                "HAL_Init": "initializeHAL",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "HAL_Init",
                "SystemClock_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_in_list_08007306",
            "code": "\nundefined4 find_value_in_list_08007306(int value_to_find,char *list)\n\n{\n  while( true ) {\n    if (*list == -1) {\n      return 0;\n    }\n    if (*list == value_to_find) break;\n    list = list + 0xc;\n  }\n  return *(undefined4 *)(list + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_in_list_08007306",
                "param_1": "value_to_find",
                "param_2": "list"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "find_peripheral_08007320",
            "code": "\nundefined4 find_peripheral_08007320(int value)\n\n{\n  undefined4 result;\n  \n  if (value != -1) {\n    result = pinmap_find_peripheral_08007320();\n    return result;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "find_peripheral_08007320",
                "param_1": "value",
                "uVar1": "result"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "uart_debug_write",
                "pwm_start",
                "adc_read_value",
                "uart_debug_init",
                "pwm_stop"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_index_08007332",
            "code": "\nint find_value_index_08007332(int value,char *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 4) == value) break;\n    array_ptr = array_ptr + 0xc;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_index_08007332",
                "param_1": "value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinmap_find_pin",
                "pinmap_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_pin_from_param_0800734a",
            "code": "\nundefined4 findPinFromParam_0800734a(int inputParam)\n\n{\n  undefined4 pinResult;\n  \n  if (inputParam != 0) {\n    pinResult = pinmap_find_pin();\n    return pinResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_pin_from_param_0800734a",
                "param_1": "inputParam",
                "uVar1": "pinResult"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_index_0800735a",
            "code": "\nundefined4 find_value_index_0800735a(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_index_0800735a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_function_08007376",
            "code": "\nundefined4 find_function_08007376(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function_08007376();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_function_08007376",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "pwm_start",
                "HAL_TIM_PWM_MspInit",
                "get_adc_channel",
                "pwm_stop",
                "get_pwm_channel"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_parameter_0800738a",
            "code": "\nundefined4 check_parameter_0800738a(int value1,char *string_array)\n\n{\n  if (value1 == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*string_array == -1) {\n      return 0;\n    }\n    if (value1 == *string_array) break;\n    string_array = string_array + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_parameter_0800738a",
                "param_1": "value1",
                "param_2": "string_array"
            },
            "calling": [
                "sysexCallback",
                "analogWrite",
                "enableI2CPins",
                "FUN_0800021a",
                "setPinModeCallback",
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "find_nonzero_parameter_080073ae",
            "code": "\nint find_nonzero_parameter_080073ae(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    if (input_1 == 0) {\n      return input_2;\n    }\n    if (input_2 == 0) {\n      return input_1;\n    }\n    input_1 = 0;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "find_nonzero_parameter_080073ae",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid executeCallback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "run_infinite_loop_080073e8",
            "code": "\nvoid run_infinite_loop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "run_infinite_loop_080073e8"
            },
            "calling": [
                "_Error_Handler",
                "SystemClock_Config"
            ],
            "called": [
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "initialize_registers_080073ec",
            "code": "\n\n\nvoid initializeRegisters_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "initialize_registers_080073ec"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "update_flags_and_data_addresses_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlagsAndDataAddresses_08007438(int *dataAddress)\n\n{\n  if (*dataAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = dataAddress;\n  }\n  if (*dataAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = dataAddress;\n  }\n  if (*dataAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = dataAddress;\n  }\n  if (*dataAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = dataAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "update_flags_and_data_addresses_08007438",
                "param_1": "dataAddress"
            },
            "calling": [
                "HAL_TIM_PWM_MspInit",
                "HAL_TIM_OC_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_memory_080074e0",
            "code": "\n\n\nvoid updateMemory_080074e0(int *pointer)\n\n{\n  if (*pointer == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*pointer == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*pointer == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*pointer == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_memory_080074e0",
                "param_1": "pointer"
            },
            "calling": [
                "HAL_TIM_OC_MspDeInit",
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_08007544",
            "code": "\nundefined4 getTimerIRQn_08007544(uint timerValue)\n\n{\n  if (timerValue == 0xffffffff) {\n    return 0;\n  }\n  if (timerValue == 0x40000400) {\n    return 0x1d;\n  }\n  if (timerValue < 0x40000401) {\n    if (timerValue == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timerValue == 0x40000800) {\n      return 0x1e;\n    }\n    if (timerValue == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  printUnknownTimer(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "param_1": "timerValue",
                "iprintf": "printUnknownTimer"
            },
            "calling": [
                "TimerPulseDeinit",
                "TimerPulseInit"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  printMessage(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "iprintf": "printMessage"
            },
            "calling": [
                "getTimerClkFreq"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_timer_frequency_080075dc",
            "code": "\nint calculateTimerFrequency_080075dc(undefined4 timerId)\n\n{\n  uint pclk1Freq;\n  int timerClkSrc;\n  uint pclk2Freq;\n  undefined4 clockConfig2;\n  undefined4 clockConfig1;\n  undefined4 unused;\n  undefined4 unused;\n  uint clockSource;\n  uint unused;\n  \n  clockConfig1 = 0;\n  unused = 0;\n  unused = 0;\n  clockSource = 0;\n  unused = 0;\n  clockConfig2 = 0;\n  HAL_RCC_GetClockConfig(&clockConfig1,&clockConfig2);\n  timerClkSrc = getTimerClkSrc(timerId);\n  pclk1Freq = unused;\n  pclk2Freq = clockSource;\n  if (timerClkSrc == 1) {\n    timerClkSrc = HAL_RCC_GetPCLK1Freq();\n  }\n  else if (timerClkSrc == 2) {\n    timerClkSrc = HAL_RCC_GetPCLK2Freq();\n    pclk2Freq = pclk1Freq;\n  }\n  else {\n    iprintf(\"TIM: Unknown clock source\");\n    timerClkSrc = 0;\n    pclk2Freq = 0;\n  }\n  if (pclk2Freq != 0x500) {\n    if (pclk2Freq < 0x501) {\n      if (pclk2Freq != 0x400) {\n        return timerClkSrc;\n      }\n    }\n    else if ((pclk2Freq != 0x600) && (pclk2Freq != 0x700)) {\n      return timerClkSrc;\n    }\n  }\n  return timerClkSrc << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_timer_frequency_080075dc",
                "param_1": "timerId",
                "uVar1": "pclk1Freq",
                "iVar2": "timerClkSrc",
                "uVar3": "pclk2Freq",
                "local_20": "clockConfig2",
                "local_1c": "clockConfig1",
                "local_18": "unused",
                "local_14": "unused",
                "local_10": "clockSource",
                "local_c": "unused"
            },
            "calling": [
                "TimerPulseInit",
                "pwm_start"
            ],
            "called": [
                "HAL_RCC_GetClockConfig",
                "HAL_RCC_GetPCLK2Freq",
                "getTimerClkSrc",
                "HAL_RCC_GetPCLK1Freq",
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_timer_08007648",
            "code": "\nvoid initializeTimer_08007648(undefined4 *timerConfig,undefined4 param2,undefined4 param3,undefined4 irqPriority)\n\n{\n  char irqHandler;\n  uint timerClkFreq;\n  int initStatus;\n  undefined4 *timerHandle;\n  undefined4 channelConfig1;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  \n  channelConfig1 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  localVar3 = 0;\n  localVar4 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  timerHandle = timerConfig + 1;\n  *timerConfig = 0x40000000;\n  timerConfig[1] = 0x40000000;\n  timerConfig[4] = param2;\n  timerClkFreq = getTimerClkFreq();\n  timerConfig[2] = timerClkFreq / 1000000 - 1;\n  timerConfig[5] = 0;\n  timerConfig[3] = 0;\n  timerConfig[6] = 0;\n  timerConfig[0x13] = irqPriority;\n  channelConfig1 = 0;\n  localVar2 = 0;\n  localVar4 = 0;\n  localVar3 = 0;\n  localVar5 = 0;\n  localVar6 = 0;\n  localVar1 = param3;\n  irqHandler = getTimerIrq(*timerConfig);\n  HAL_NVIC_SetPriority((int)irqHandler,0xe,0);\n  irqHandler = getTimerIrq(*timerConfig);\n  HAL_NVIC_EnableIRQ((int)irqHandler);\n  initStatus = HAL_TIM_OC_Init(timerHandle);\n  if ((initStatus == 0) && (initStatus = HAL_TIM_OC_ConfigChannel(timerHandle,&channelConfig1,0), initStatus == 0)) {\n    HAL_TIM_OC_Start_IT(timerHandle,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_timer_08007648",
                "param_1": "timerConfig",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "irqPriority",
                "cVar1": "irqHandler",
                "uVar2": "timerClkFreq",
                "iVar3": "initStatus",
                "puVar4": "timerHandle",
                "local_34": "channelConfig1",
                "local_30": "localVar1",
                "local_2c": "localVar2",
                "local_28": "localVar3",
                "local_24": "localVar4",
                "local_20": "localVar5",
                "local_1c": "localVar6"
            },
            "calling": [
                "initISR"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_TIM_OC_Start_IT",
                "HAL_TIM_OC_ConfigChannel",
                "getTimerIrq",
                "HAL_TIM_OC_Init",
                "getTimerClkFreq",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "disable_timer_irq_080076e0",
            "code": "\nvoid disableTimerIRQ_080076e0(undefined4 *timerParams)\n\n{\n  char irq;\n  int deinitResult;\n  \n  timerParams[0x13] = 0;\n  irq = getTimerIrq(*timerParams);\n  HAL_NVIC_DisableIRQ((int)irq);\n  deinitResult = HAL_TIM_OC_DeInit(timerParams + 1);\n  if (deinitResult == 0) {\n    HAL_TIM_OC_Stop_IT(timerParams + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "disable_timer_irq_080076e0",
                "param_1": "timerParams",
                "cVar1": "irq",
                "iVar2": "deinitResult"
            },
            "calling": [
                "finISR"
            ],
            "called": [
                "HAL_NVIC_DisableIRQ",
                "getTimerIrq",
                "HAL_TIM_OC_DeInit",
                "HAL_TIM_OC_Stop_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "enable_timer_clock_08007708",
            "code": "\nvoid enable_timer_clock_08007708(void)\n\n{\n  enable_timer_clock_08007708();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "enable_timer_clock_08007708",
                "timer_enable_clock": "enable_timer_clock"
            },
            "calling": [
                "HAL_TIM_OC_Init"
            ],
            "called": [
                "timer_enable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "disable_timer_clock_08007710",
            "code": "\nvoid disableTimerClock_08007710(void)\n\n{\n  timerDisableClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "disable_timer_clock_08007710",
                "timer_disable_clock": "timerDisableClock"
            },
            "calling": [
                "HAL_TIM_OC_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtractFour_08007718(int inputNumber)\n\n{\n  return inputNumber + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "inputNumber"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_timer_function_0800771c",
            "code": "\nvoid executeTimerFunction_0800771c(int timerIndex)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if ((*(code **)(timerObject + 0x4c) != (code *)0x0) && (*(char *)(timerIndex + 0x1c) == '\\x01')) {\n    (**(code **)(timerObject + 0x4c))(timerObject,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_timer_function_0800771c",
                "param_1": "timerIndex",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_timer_function_08007736",
            "code": "\nvoid executeTimerFunction_08007736(void)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if (*(code **)(timerObj + 0x48) != (code *)0x0) {\n    (**(code **)(timerObj + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_timer_function_08007736",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_derived_value_08007744",
            "code": "\nundefined4 getDerivedValue_08007744(int inputValue)\n\n{\n  return *(undefined4 *)(*(int *)(inputValue + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_derived_value_08007744",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "set_ptr_value_0800774a",
            "code": "\nvoid setPtrValue_0800774a(int original,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(original + 4) + 0x24) = newValue;\n  void;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "set_ptr_value_0800774a",
                "param_1": "original",
                "param_2": "newValue",
                "return": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "update_parameter_value_08007750",
            "code": "\nvoid updateParameterValue_08007750(int ptr,int index,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(ptr + 4) + 0x34 + index * 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "update_parameter_value_08007750",
                "param_1": "ptr",
                "param_2": "index",
                "param_3": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_080077b0",
            "code": "\n\n\nvoid initializeI2C_080077b0(int *settings,int param2,int param3,int param4,undefined param5)\n\n{\n  int peripheral1;\n  int peripheral2;\n  undefined4 gpioPortClock;\n  uint pinFunction1;\n  uint pinFunction2;\n  int *i2cPeriph;\n  uint gpioPinMask1;\n  uint pinConfig;\n  uint pinConfigMask;\n  undefined4 pinctrlConfig;\n  \n  if (settings != (int *)0x0) {\n    i2cPeriph = settings + 1;\n    peripheral1 = pinmap_peripheral((int)*(char *)(settings + 0x16),&DAT_0800a69c);\n    peripheral2 = pinmap_peripheral((int)*(char *)((int)settings + 0x59),&DAT_0800a66c);\n    if ((peripheral1 == 0) || (peripheral2 == 0)) {\n      iprintf(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      peripheral1 = pinmap_merge_peripheral(peripheral1,peripheral2);\n      *settings = peripheral1;\n      if (peripheral1 == 0) {\n        iprintf(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (peripheral1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)settings + 0x5a) = 0x1f;\n          *(undefined *)((int)settings + 0x5b) = 0x20;\n          DAT_20000668 = i2cPeriph;\n        }\n        if (*settings == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)settings + 0x5a) = 0x21;\n          *(undefined *)((int)settings + 0x5b) = 0x22;\n          DAT_2000066c = i2cPeriph;\n        }\n        gpioPortClock = set_GPIO_Port_Clock((uint)((int)*(char *)((int)settings + 0x59) << 0x18) >> 0x1c);\n        gpioPinMask1 = 1 << ((int)*(char *)((int)settings + 0x59) & 0xfU) & 0xffff;\n        pinFunction1 = pinmap_function((int)*(char *)((int)settings + 0x59),&DAT_0800a66c);\n        pinFunction2 = pinmap_function((int)*(char *)((int)settings + 0x59),&DAT_0800a66c);\n        pinConfig = (pinFunction1 >> 3 & 1) << 4 | pinFunction2 & 7;\n        pinctrlConfig = 3;\n        peripheral1 = pinmap_function((int)*(char *)((int)settings + 0x59),&DAT_0800a66c);\n        pinConfigMask = (uint)(peripheral1 << 0x1a) >> 0x1e;\n        peripheral1 = pinmap_function((int)*(char *)((int)settings + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        pinFunction2 = 1;\n        pinFunction1 = _DAT_40021018;\n        switch((uint)(peripheral1 << 0x11) >> 0x19) {\n        case 1:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 2:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 3:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 4:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 5:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 6:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 7:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 8:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 9:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xb:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xc:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xd:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xe:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xf:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x11:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x12:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x13:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x14:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x15:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x16:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x17:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1b:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1c:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x21:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x22:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x23:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x24:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = pinFunction2;\n        }\n        HAL_GPIO_Init(gpioPortClock,&gpioPinMask1,pinFunction1,pinFunction2);\n        gpioPortClock = set_GPIO_Port_Clock((uint)((int)*(char *)(settings + 0x16) << 0x18) >> 0x1c);\n        gpioPinMask1 = 1 << ((int)*(char *)(settings + 0x16) & 0xfU) & 0xffff;\n        pinFunction1 = pinmap_function((int)*(char *)(settings + 0x16),&DAT_0800a69c);\n        pinFunction2 = pinmap_function((int)*(char *)(settings + 0x16),&DAT_0800a69c);\n        pinConfig = (pinFunction1 >> 3 & 1) << 4 | pinFunction2 & 7;\n        pinctrlConfig = 3;\n        peripheral1 = pinmap_function((int)*(char *)(settings + 0x16),&DAT_0800a69c);\n        pinConfigMask = (uint)(peripheral1 << 0x1a) >> 0x1e;\n        peripheral1 = pinmap_function((int)*(char *)(settings + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        pinFunction2 = 1;\n        pinFunction1 = _DAT_40021018;\n        switch((uint)(peripheral1 << 0x11) >> 0x19) {\n        case 1:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 2:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 3:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 4:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 5:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 6:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 7:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 8:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 9:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xb:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xc:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xd:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xe:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0xf:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x10:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x11:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x12:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x13:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x14:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x15:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x16:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x17:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1b:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x1c:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x21:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x22:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x23:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = pinFunction2;\n          break;\n        case 0x24:\n          pinFunction1 = 0x40010000;\n          pinFunction2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = pinFunction2;\n        }\n        HAL_GPIO_Init(gpioPortClock,&gpioPinMask1,pinFunction1,pinFunction2);\n        settings[1] = *settings;\n        settings[2] = param2;\n        settings[3] = 0;\n        settings[4] = param4;\n        settings[7] = 0xff;\n        settings[5] = param3;\n        settings[6] = 0;\n        settings[8] = 0;\n        settings[9] = 0;\n        *(undefined *)((int)settings + 0x41) = 0;\n        HAL_NVIC_SetPriority((int)*(char *)((int)settings + 0x5a),0,1);\n        HAL_NVIC_EnableIRQ((int)*(char *)((int)settings + 0x5a));\n        HAL_NVIC_SetPriority((int)*(char *)((int)settings + 0x5b),0,1);\n        HAL_NVIC_EnableIRQ((int)*(char *)((int)settings + 0x5b));\n        HAL_I2C_Init(i2cPeriph);\n        *(undefined *)((int)settings + 0x5d) = param5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_080077b0",
                "param_1": "settings",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "peripheral1",
                "iVar2": "peripheral2",
                "uVar3": "gpioPortClock",
                "uVar4": "pinFunction1",
                "uVar5": "pinFunction2",
                "piVar6": "i2cPeriph",
                "local_38": "gpioPinMask1",
                "local_34": "pinConfig",
                "local_30": "pinConfigMask",
                "local_2c": "pinctrlConfig"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "iprintf",
                "pinmap_merge_peripheral",
                "HAL_I2C_Init",
                "HAL_GPIO_Init",
                "HAL_NVIC_SetPriority",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "transmit_data_with_timeout_08007e74",
            "code": "\nint transmitDataWithTimeout_08007e74(int dataBuffer,undefined4 slaveAddress,undefined4 byteCount,undefined4 timeout)\n\n{\n  int startTime;\n  int transmitStatus;\n  uint elapsedTime;\n  int errorCode;\n  int i2cHandle;\n  undefined4 initialTimeout;\n  \n  initialTimeout = timeout;\n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  errorCode = 2;\n  do {\n    i2cHandle = dataBuffer + 4;\n    transmitStatus = HAL_I2C_Master_Transmit_IT(i2cHandle,slaveAddress,byteCount,timeout,initialTimeout);\n    if (transmitStatus == 0) {\n      errorCode = 0;\n      while ((transmitStatus = HAL_I2C_GetState(i2cHandle), transmitStatus != 0x20 && (errorCode == 0))) {\n        transmitStatus = HAL_GetTick();\n        elapsedTime = transmitStatus - startTime;\n        if (elapsedTime < 0x65) {\n          transmitStatus = HAL_I2C_GetError(i2cHandle);\n          if (transmitStatus != 0) {\n            errorCode = 2;\n          }\n        }\n        else {\n          errorCode = 1;\n        }\n      }\n    }\n    transmitStatus = HAL_I2C_GetError(i2cHandle);\n  } while ((transmitStatus == 4) && (elapsedTime < 100));\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "transmit_data_with_timeout_08007e74",
                "param_1": "dataBuffer",
                "param_2": "slaveAddress",
                "param_3": "byteCount",
                "param_4": "timeout",
                "iVar1": "startTime",
                "iVar2": "transmitStatus",
                "uVar3": "elapsedTime",
                "iVar4": "errorCode",
                "iVar5": "i2cHandle",
                "uVar6": "initialTimeout"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "HAL_I2C_Master_Transmit_IT",
                "HAL_I2C_GetState",
                "HAL_I2C_GetError",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_08007ede",
            "code": "\nundefined4 copy_data_08007ede(int dest_offset,int src_offset,uint data_length)\n\n{\n  uint index;\n  \n  if (0x20 < data_length) {\n    return 2;\n  }\n  for (index = 0; index < data_length; index = index + 1 & 0xff) {\n    *(undefined *)(dest_offset + index + 0x68) = *(undefined *)(src_offset + index);\n    *(char *)(dest_offset + 0x88) = *(char *)(dest_offset + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_08007ede",
                "param_1": "dest_offset",
                "param_2": "src_offset",
                "param_3": "data_length",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "receive_data_with_timeout_08007f0e",
            "code": "\nint receiveDataWithTimeout_08007f0e(int deviceAddress,undefined4 dataBuffer,undefined4 dataSize,undefined4 timeout)\n\n{\n  int startTime;\n  int i2cStatus;\n  uint elapsedTime;\n  int result;\n  int i2cHandle;\n  undefined4 tempVar;\n  \n  tempVar = timeout;\n  startTime = HAL_GetTick();\n  elapsedTime = 0;\n  result = 2;\n  do {\n    i2cHandle = deviceAddress + 4;\n    i2cStatus = HAL_I2C_Master_Receive_IT(i2cHandle,dataBuffer,dataSize,timeout,tempVar);\n    if (i2cStatus == 0) {\n      result = 0;\n      while ((i2cStatus = HAL_I2C_GetState(i2cHandle), i2cStatus != 0x20 && (result == 0))) {\n        i2cStatus = HAL_GetTick();\n        elapsedTime = i2cStatus - startTime;\n        if (elapsedTime < 0x65) {\n          i2cStatus = HAL_I2C_GetError(i2cHandle);\n          if (i2cStatus != 0) {\n            result = 2;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n    }\n    i2cStatus = HAL_I2C_GetError(i2cHandle);\n  } while ((i2cStatus == 4) && (elapsedTime < 100));\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "receive_data_with_timeout_08007f0e",
                "param_1": "deviceAddress",
                "param_2": "dataBuffer",
                "param_3": "dataSize",
                "param_4": "timeout",
                "iVar1": "startTime",
                "iVar2": "i2cStatus",
                "uVar3": "elapsedTime",
                "iVar4": "result",
                "iVar5": "i2cHandle",
                "uVar6": "tempVar"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "HAL_I2C_GetState",
                "HAL_I2C_Master_Receive_IT",
                "HAL_I2C_GetError",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtractFour_08007f78(int value)\n\n{\n  return value + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "value"
            },
            "calling": [
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_i2_c_register_08007f7c",
            "code": "\nvoid updateI2CRegister_08007f7c(int deviceAddress,int registerValue)\n\n{\n  if (deviceAddress != 0) {\n    if (registerValue != 0) {\n      *(int *)(deviceAddress + 0x60) = registerValue;\n      HAL_I2C_EnableListen_IT(deviceAddress + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_i2_c_register_08007f7c",
                "param_1": "deviceAddress",
                "param_2": "registerValue"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_i2_c_data_08007f8e",
            "code": "\nvoid updateI2CData_08007f8e(int sourceAddress,int data)\n\n{\n  if (sourceAddress != 0) {\n    if (data != 0) {\n      *(int *)(sourceAddress + 100) = data;\n      enableI2CListening(sourceAddress + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_i2_c_data_08007f8e",
                "param_1": "sourceAddress",
                "param_2": "data",
                "HAL_I2C_EnableListen_IT": "enableI2CListening"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "transmit_or_receive_data_08007fa0",
            "code": "\nvoid transmitOrReceiveData_08007fa0(int inputParam,int isReceive,int paramToCheck,undefined4 callbackFunction)\n\n{\n  int i2cObject;\n  \n  i2cObject = getI2CObject();\n  if (paramToCheck == *(int *)(inputParam + 0xc)) {\n    if (isReceive == 0) {\n      *(undefined *)(i2cObject + 0x88) = 0;\n      *(undefined *)(i2cObject + 0x5c) = 0;\n      if (*(code **)(i2cObject + 100) != (code *)0x0) {\n        (**(code **)(i2cObject + 100))();\n      }\n      transmitDataSequentially(inputParam,i2cObject + 0x68,*(undefined *)(i2cObject + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObject + 0x5c) = 1;\n    receiveDataSequentially(inputParam,i2cObject + 0x68,0x20,8,callbackFunction);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "transmit_or_receive_data_08007fa0",
                "param_1": "inputParam",
                "param_2": "isReceive",
                "param_3": "paramToCheck",
                "param_4": "callbackFunction",
                "iVar1": "i2cObject",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmitDataSequentially",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receiveDataSequentially"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "get_i2c_obj",
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "enable_i2_c_and_enable_listen_interrupt_08007ff0",
            "code": "\nvoid enableI2CAndEnableListenInterrupt_08007ff0(undefined4 i2cObject)\n\n{\n  int i2cObjectHandle;\n  \n  i2cObjectHandle = get_i2c_obj();\n  if (((*(code **)(i2cObjectHandle + 0x60) != (code *)0x0) && (*(char *)(i2cObjectHandle + 0x5c) == '\\x01')) &&\n     (*(char *)(i2cObjectHandle + 0x2c) != ' ')) {\n    (**(code **)(i2cObjectHandle + 0x60))(i2cObjectHandle + 0x68);\n  }\n  HAL_I2C_EnableListen_IT(i2cObject);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "enable_i2_c_and_enable_listen_interrupt_08007ff0",
                "param_1": "i2cObject",
                "iVar1": "i2cObjectHandle"
            },
            "calling": [
                "I2C_Slave_AF",
                "I2C_ITError",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "enable_i2_c_listen_interrupt_08008020",
            "code": "\nvoid enableI2CListenInterrupt_08008020(undefined4 param)\n\n{\n  int i2cObj;\n  \n  i2cObj = get_i2c_obj();\n  if (*(char *)(i2cObj + 0x5d) == '\\0') {\n    enableI2CListen(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "enable_i2_c_listen_interrupt_08008020",
                "param_1": "param",
                "iVar1": "i2cObj",
                "HAL_I2C_EnableListen_IT": "enableI2CListen"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "configure_uart_pins_08008078",
            "code": "\n\n\nvoid configureUARTPins_08008078(int *pins)\n\n{\n  int uartPin1;\n  int uartPin2;\n  undefined4 gpioClock1;\n  uint gpioClock2;\n  uint gpioMask1;\n  uint gpioConfig1;\n  uint gpioConfig2;\n  undefined4 gpioConfig3;\n  \n  if (pins != (int *)0x0) {\n    uartPin1 = pinmap_peripheral((int)*(char *)(pins + 0x16),&DAT_0800a864);\n    uartPin2 = pinmap_peripheral((int)*(char *)((int)pins + 0x59),&DAT_0800a81c);\n    if ((uartPin2 == 0) || (uartPin1 == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2);\n    }\n    else {\n      uartPin1 = pinmap_merge_peripheral(uartPin1);\n      *pins = uartPin1;\n      if (uartPin1 == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pins + 0x11) = 0;\n          *(undefined *)((int)pins + 0x5a) = 0x25;\n        }\n        else if (uartPin1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pins + 0x11) = 1;\n          *(undefined *)((int)pins + 0x5a) = 0x26;\n        }\n        else if (uartPin1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pins + 0x11) = 2;\n          *(undefined *)((int)pins + 0x5a) = 0x27;\n        }\n        gpioClock1 = set_GPIO_Port_Clock((uint)((int)*(char *)((int)pins + 0x59) << 0x18) >> 0x1c);\n        gpioClock2 = pinmap_function((int)*(char *)((int)pins + 0x59),&DAT_0800a81c);\n        gpioMask1 = 1 << (*(byte *)((int)pins + 0x59) & 0xf) & 0xffff;\n        gpioConfig1 = (gpioClock2 >> 3 & 1) << 4 | gpioClock2 & 7;\n        gpioConfig2 = (gpioClock2 << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((gpioClock2 << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        gpioConfig3 = 3;\n        HAL_GPIO_Init(gpioClock1,&gpioMask1);\n        gpioClock1 = set_GPIO_Port_Clock((uint)((int)*(char *)(pins + 0x16) << 0x18) >> 0x1c);\n        gpioClock2 = pinmap_function((int)*(char *)(pins + 0x16),&DAT_0800a864);\n        gpioMask1 = 1 << (*(byte *)(pins + 0x16) & 0xf) & 0xffff;\n        gpioConfig1 = (gpioClock2 >> 3 & 1) << 4 | gpioClock2 & 7;\n        gpioConfig2 = (gpioClock2 << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(gpioClock1,&gpioMask1);\n        (&DAT_200006c0)[*(byte *)(pins + 0x11)] = pins + 1;\n        pins[1] = *pins;\n        pins[2] = pins[0x12];\n        pins[3] = pins[0x13];\n        pins[4] = pins[0x14];\n        pins[5] = pins[0x15];\n        pins[6] = 0xc;\n        pins[7] = 0;\n        pins[8] = 0;\n        HAL_UART_Init(pins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "configure_uart_pins_08008078",
                "param_1": "pins",
                "iVar1": "uartPin1",
                "iVar2": "uartPin2",
                "uVar3": "gpioClock1",
                "uVar4": "gpioClock2",
                "local_20": "gpioMask1",
                "local_1c": "gpioConfig1",
                "local_18": "gpioConfig2",
                "local_14": "gpioConfig3"
            },
            "calling": [
                "uart_debug_init",
                "begin"
            ],
            "called": [
                "pinmap_function",
                "set_GPIO_Port_Clock",
                "HAL_UART_Init",
                "pinmap_merge_peripheral",
                "iprintf",
                "HAL_GPIO_Init",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int peripheral_result;\n  undefined4 pin_result;\n  \n  peripheral_result = pinmap_peripheral(2,&DAT_0800a864);\n  if (peripheral_result != 0) {\n    pin_result = pinmap_peripheral(2,&DAT_0800a864);\n    DAT_20000075 = pinmap_pin(pin_result,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    uart_init(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "peripheral_result",
                "uVar2": "pin_result"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "uart_init",
                "pinmap_pin",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "transmit_data_08008500",
            "code": "\nuint transmitData_08008500(undefined4 data,uint size)\n\n{\n  int startTime;\n  int peripheralValue;\n  uint index;\n  \n  startTime = HAL_GetTick();\n  peripheralValue = pinmap_peripheral(2,&DAT_0800a864);\n  if (peripheralValue == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (peripheralValue = pinmap_peripheral(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != peripheralValue))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (uart_debug_init(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    peripheralValue = HAL_UART_Transmit((&DAT_200006c0)[index],data,size & 0xffff,1000);\n    if (peripheralValue == 0) {\n      return size;\n    }\n    peripheralValue = HAL_GetTick();\n  } while ((uint)(peripheralValue - startTime) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "transmit_data_08008500",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "startTime",
                "iVar2": "peripheralValue",
                "uVar3": "index"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "uart_debug_init",
                "HAL_UART_Transmit",
                "HAL_GetTick",
                "pinmap_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_uart_state_080085b8",
            "code": "\nbool check_UART_state_080085b8(int index)\n\n{\n  uint UART_state;\n  \n  UART_state = HAL_UART_GetState((&DAT_200006c0)[*(byte *)(index + 0x44)]);\n  return (UART_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_uart_state_080085b8",
                "param_1": "index",
                "uVar1": "UART_state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "is_uart_state_valid_080085dc",
            "code": "\nbool isUartStateValid_080085dc(int dataIndex)\n\n{\n  uint uartState;\n  \n  uartState = HAL_UART_GetState((&DAT_200006c0)[*(byte *)(dataIndex + 0x44)]);\n  return (uartState & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "is_uart_state_valid_080085dc",
                "param_1": "dataIndex",
                "uVar1": "uartState"
            },
            "calling": [],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "extract_serial_data_08008600",
            "code": "\nundefined4 extract_serial_data_08008600(int buffer_size,undefined *data_buffer,undefined4 param_3,undefined4 param_4)\n\n{\n  int is_serial_rx_active;\n  \n  if (buffer_size == 0) {\n    return 0xffffffff;\n  }\n  is_serial_rx_active = serial_rx_active();\n  if (is_serial_rx_active == 0) {\n    *data_buffer = *(undefined *)(buffer_size + 0x45);\n    HAL_UART_Receive_IT((&DAT_200006c0)[*(byte *)(buffer_size + 0x44)],buffer_size + 0x45,1,&DAT_200006c0,\n                        param_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "extract_serial_data_08008600",
                "param_1": "buffer_size",
                "param_2": "data_buffer",
                "iVar1": "is_serial_rx_active"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "configure_serial_port_0800863c",
            "code": "\nvoid configureSerialPort_0800863c(int serialPort,undefined4 priority,undefined4 unused1,undefined4 unused2)\n\n{\n  int isSerialRxActive;\n  uint index;\n  \n  if (serialPort != 0) {\n    isSerialRxActive = serial_rx_active();\n    if (isSerialRxActive == 0) {\n      index = (uint)*(byte *)(serialPort + 0x44);\n      *(undefined4 *)(&DAT_20000670 + index * 4) = priority;\n      *(int *)(&DAT_20000684 + index * 4) = serialPort;\n      HAL_NVIC_SetPriority((int)*(char *)(serialPort + 0x5a),0,1,index,unused2);\n      HAL_NVIC_EnableIRQ((int)*(char *)(serialPort + 0x5a));\n      HAL_UART_Receive_IT((&DAT_200006c0)[*(byte *)(serialPort + 0x44)],serialPort + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "configure_serial_port_0800863c",
                "param_1": "serialPort",
                "param_2": "priority",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "isSerialRxActive",
                "uVar2": "index"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Receive_IT",
                "HAL_NVIC_SetPriority",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "set_priority_and_transmit_data_08008694",
            "code": "\nvoid setPriorityAndTransmitData_08008694(int data,undefined4 priority)\n\n{\n  byte byteValue;\n  \n  if (data != 0) {\n    byteValue = *(byte *)(data + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)byteValue * 4) = priority;\n    *(int *)(&DAT_200006ac + (uint)byteValue * 4) = data;\n    HAL_NVIC_SetPriority((int)*(char *)(data + 0x5a),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(data + 0x5a));\n    HAL_UART_Transmit_IT\n              ((&DAT_200006c0)[*(byte *)(data + 0x44)],\n               *(int *)(data + 100) + (uint)*(ushort *)(data + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "set_priority_and_transmit_data_08008694",
                "param_1": "data",
                "param_2": "priority",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "HAL_NVIC_EnableIRQ",
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_index_in_array_080086e8",
            "code": "\nuint find_index_in_array_080086e8(int input_value)\n\n{\n  uint index;\n  \n  if (input_value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (input_value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_index_in_array_080086e8",
                "param_1": "input_value",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_uart_command_0800870c",
            "code": "\nvoid executeUartCommand_0800870c(void)\n\n{\n  uint uartIndex;\n  \n  uartIndex = uart_index();\n  if (uartIndex < 5) {\n    (**(code **)(&DAT_20000670 + uartIndex * 4))(*(undefined4 *)(&DAT_20000684 + uartIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_uart_command_0800870c",
                "uVar1": "uartIndex"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "transmit_data_08008730",
            "code": "\nvoid transmitData_08008730(void)\n\n{\n  uint uartIndex;\n  int result;\n  int uartDescriptor;\n  \n  uartIndex = uart_index();\n  uartDescriptor = *(int *)(&DAT_200006ac + uartIndex * 4);\n  if ((uartIndex < 5) && (result = (**(code **)(&DAT_20000698 + uartIndex * 4))(uartDescriptor), result != -1)) {\n    HAL_UART_Transmit_IT\n              ((&DAT_200006c0)[*(byte *)(uartDescriptor + 0x44)],\n               *(int *)(uartDescriptor + 100) + (uint)*(ushort *)(uartDescriptor + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "transmit_data_08008730",
                "uVar1": "uartIndex",
                "iVar2": "result",
                "iVar3": "uartDescriptor"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocate_memory_08008804(int size)\n\n{\n  undefined *allocated_memory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocated_memory = DAT_200006d4;\n  if (DAT_200006d4 + size <= &stack_bottom) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocated_memory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocated_memory",
                "&stack0x00000000": "&stack_bottom"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_error_code_08008840",
            "code": "\nErrorCode get_error_code_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_error_code_08008840",
                "undefined4": "ErrorCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_memory_page_size_08008846",
            "code": "\nundefined4 setMemoryPageSize_08008846(undefined4 pageDescriptor,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_memory_page_size_08008846",
                "param_1": "pageDescriptor",
                "param_2": "memoryAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "initialize_08008850",
            "code": "\nundefined4 initialize_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "initialize_08008850"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "get_default_value_08008854",
            "code": "\nundefined4 getDefaultValue_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "get_default_value_08008854"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "initialize_application_08008858",
            "code": "\ninteger initializeApplication_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "initialize_application_08008858",
                "undefined4": "integer"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "write_debug_message_0800885c",
            "code": "\nvoid write_debug_message_0800885c(undefined4 unused_param,undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  uart_debug_write(data1,data2,data2,data3,data3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "write_debug_message_0800885c",
                "param_1": "unused_param",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "endless_loop_08008868",
            "code": "\nvoid endlessLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "endless_loop_08008868"
            },
            "calling": [
                "abort",
                "_exit"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "is_return_value_one_0800887c",
            "code": "\nundefined4 is_return_value_one_0800887c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "is_return_value_one_0800887c"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "extract_adc_value_08008880",
            "code": "\nuint extract_adc_value_08008880(uint input_value)\n\n{\n  bool is_valid_input;\n  char extracted_value;\n  uint adc_value;\n  \n  if (input_value < 0xe) {\n    if (input_value + 0x2e < 0x3c) {\n      is_valid_input = true;\n    }\n    else {\n      is_valid_input = false;\n    }\n  }\n  else {\n    is_valid_input = input_value < 0x3c;\n  }\n  if (is_valid_input) {\n    if (input_value < 0xe) {\n      input_value = input_value + 0x2e;\n    }\n    extracted_value = (&DAT_0800a908)[input_value];\n  }\n  else {\n    extracted_value = -1;\n  }\n  if (extracted_value == -1) {\n    adc_value = 0;\n  }\n  else {\n    adc_value = adc_read_value();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return adc_value >> (0xc - DAT_20000088 & 0xff);\n      }\n      return adc_value << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return adc_value;\n}\n\n",
            "renaming": {
                "FUN_08008880": "extract_adc_value_08008880",
                "param_1": "input_value",
                "bVar1": "is_valid_input",
                "cVar2": "extracted_value",
                "uVar3": "adc_value"
            },
            "calling": [
                "loop",
                "reportAnalogCallback"
            ],
            "called": [
                "adc_read_value"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "configure_pin_080088e0",
            "code": "\nvoid configurePin_080088e0(uint pinNumber,uint value)\n\n{\n  int pinStatus;\n  int pinIndex;\n  \n  if (pinNumber < 0x3c) {\n    pinIndex = (int)(char)(&DAT_0800a908)[pinNumber];\n  }\n  else {\n    pinIndex = -1;\n  }\n  if (pinIndex != -1) {\n    pinStatus = pin_in_pinmap(pinIndex,&DAT_0800a6cc);\n    if (pinStatus == 0) {\n      pinMode(pinNumber,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        digitalWrite(pinNumber,0);\n      }\n      else {\n        digitalWrite(pinNumber,1);\n      }\n    }\n    else {\n      pinStatus = is_pin_configured(pinIndex,&DAT_200006d8);\n      if (pinStatus == 0) {\n        set_pin_configured(pinIndex,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      pwm_start(pinIndex,0x3e418,0xff,value,pinStatus == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "configure_pin_080088e0",
                "param_1": "pinNumber",
                "param_2": "value",
                "iVar1": "pinStatus",
                "iVar2": "pinIndex"
            },
            "calling": [
                "FUN_0800021a",
                "setPinModeCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "pwm_start",
                "is_pin_configured",
                "digitalWrite",
                "pinMode"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "configure_pin_08008990",
            "code": "\nvoid configurePin_08008990(uint pinIndex,undefined4 configType,undefined4 param3,undefined1 *pinConfigurations)\n\n{\n  int isConfigured;\n  undefined1 *pinConfigArray;\n  int pinConfigData;\n  \n  if (pinIndex < 0x3c) {\n    pinConfigData = (int)(char)(&DAT_0800a908)[pinIndex];\n    pinConfigArray = &DAT_0800a908;\n  }\n  else {\n    pinConfigData = -1;\n    pinConfigArray = pinConfigurations;\n  }\n  if (pinConfigData != -1) {\n    isConfigured = is_pin_configured(pinConfigData,&DAT_200006d8,param3,pinConfigArray,pinConfigurations);\n    if (isConfigured != 0) {\n      isConfigured = pin_in_pinmap(pinConfigData,&DAT_0800a6cc);\n      if (isConfigured != 0) {\n        pwm_stop(pinConfigData);\n      }\n      reset_pin_configured(pinConfigData,&DAT_200006d8);\n    }\n    switch(configType) {\n    case 0:\n      digital_io_init(pinConfigData,0);\n      break;\n    case 1:\n      digital_io_init(pinConfigData,1,0);\n      break;\n    case 2:\n      digital_io_init(pinConfigData,0,1);\n      break;\n    case 3:\n      digital_io_init(pinConfigData,0,2);\n    }\n    set_pin_configured(pinConfigData,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "configure_pin_08008990",
                "param_1": "pinIndex",
                "param_2": "configType",
                "param_3": "param3",
                "param_4": "pinConfigurations",
                "iVar1": "isConfigured",
                "puVar2": "pinConfigArray",
                "iVar3": "pinConfigData"
            },
            "calling": [
                "FUN_080025ac",
                "blinkVersion",
                "analogWrite",
                "setPinModeCallback"
            ],
            "called": [
                "pin_in_pinmap",
                "set_pin_configured",
                "is_pin_configured",
                "pwm_stop",
                "reset_pin_configured",
                "digital_io_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "configure_and_write_digital_io_08008a24",
            "code": "\nvoid configureAndWriteDigitalIO_08008a24(uint pinIndex,undefined4 data,undefined4 pinConfig,undefined1 *pinConfigTable)\n\n{\n  int isConfigured;\n  undefined4 port;\n  undefined1 *pinConfigPtr;\n  uint pinValue;\n  \n  if (pinIndex < 0x3c) {\n    pinValue = (uint)(char)(&DAT_0800a908)[pinIndex];\n    pinConfigPtr = &DAT_0800a908;\n  }\n  else {\n    pinValue = 0xffffffff;\n    pinConfigPtr = pinConfigTable;\n  }\n  if ((pinValue != 0xffffffff) &&\n     (isConfigured = is_pin_configured(pinValue,&DAT_200006ec,pinConfig,pinConfigPtr,pinConfigTable), isConfigured != 0)) {\n    port = get_GPIO_Port((pinValue << 0x18) >> 0x1c);\n    digital_io_write(port,1 << (pinValue & 0xf) & 0xffff,data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "configure_and_write_digital_io_08008a24",
                "param_1": "pinIndex",
                "param_2": "data",
                "param_3": "pinConfig",
                "param_4": "pinConfigTable",
                "iVar1": "isConfigured",
                "uVar2": "port",
                "puVar3": "pinConfigPtr",
                "uVar4": "pinValue"
            },
            "calling": [
                "strobeBlinkPin",
                "analogWrite",
                "setPinModeCallback"
            ],
            "called": [
                "is_pin_configured",
                "get_GPIO_Port",
                "digital_io_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_pin_status_08008a6c",
            "code": "\nchar check_pin_status_08008a6c(uint pin_number)\n\n{\n  char is_pin_configured;\n  int pin_is_configured;\n  undefined4 gpio_port;\n  uint pin_mask;\n  \n  if (pin_number < 0x3c) {\n    pin_mask = (uint)(char)(&DAT_0800a908)[pin_number];\n  }\n  else {\n    pin_mask = 0xffffffff;\n  }\n  if (pin_mask == 0xffffffff) {\n    is_pin_configured = '\\0';\n  }\n  else {\n    pin_is_configured = is_pin_configured(pin_mask,&DAT_200006ec);\n    if (pin_is_configured == 0) {\n      is_pin_configured = '\\0';\n    }\n    else {\n      gpio_port = get_GPIO_Port((pin_mask << 0x18) >> 0x1c);\n      is_pin_configured = digital_io_read(gpio_port,1 << (pin_mask & 0xf) & 0xffff);\n    }\n  }\n  if (is_pin_configured != '\\0') {\n    is_pin_configured = '\\x01';\n  }\n  return is_pin_configured;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_pin_status_08008a6c",
                "param_1": "pin_number",
                "cVar1": "is_pin_configured",
                "iVar2": "pin_is_configured",
                "uVar3": "gpio_port",
                "uVar4": "pin_mask"
            },
            "calling": [
                "checkDigitalInputs"
            ],
            "called": [
                "digital_io_read",
                "is_pin_configured",
                "get_GPIO_Port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "get_current_time_in_milliseconds_08008abc",
            "code": "\nvoid getCurrentTimeInMilliseconds_08008abc(void)\n\n{\n  GetCurrentMilli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "get_current_time_in_milliseconds_08008abc"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "blinkVersion",
                "strobeBlinkPin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_value_08008afa",
            "code": "\nushort calculate_value_08008afa(int input)\n\n{\n  return (*(short *)(input + 0x134) + 0x40) - *(short *)(input + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_value_08008afa",
                "param_1": "input"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "update_uart_buffer_08008b66",
            "code": "\nvoid updateUARTBuffer_08008b66(int uartDevice)\n\n{\n  int readResult;\n  ushort newBufferIndex;\n  undefined receivedChar;\n  \n  readResult = uart_getc(uartDevice,&receivedChar);\n  if ((readResult == 0) &&\n     (newBufferIndex = *(short *)(uartDevice + 0x60) + 1U & 0x3f, newBufferIndex != *(ushort *)(uartDevice + 0x62))) {\n    *(undefined *)(*(int *)(uartDevice + 0x5c) + (uint)*(ushort *)(uartDevice + 0x60)) = receivedChar;\n    *(ushort *)(uartDevice + 0x60) = newBufferIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "update_uart_buffer_08008b66",
                "param_1": "uartDevice",
                "iVar1": "readResult",
                "uVar2": "newBufferIndex",
                "local_9": "receivedChar"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_data_structure_08008c20",
            "code": "\nvoid initializeDataStructure_08008c20(int dataStructure)\n\n{\n  *(int *)(dataStructure + 0x130) = dataStructure + 0x11;\n  *(undefined2 *)(dataStructure + 0x134) = 0;\n  *(undefined2 *)(dataStructure + 0x136) = 0;\n  *(int *)(dataStructure + 0x138) = dataStructure + 0x51;\n  *(undefined2 *)(dataStructure + 0x13c) = 0;\n  *(undefined2 *)(dataStructure + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_data_structure_08008c20",
                "param_1": "dataStructure"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_communication_08008c44",
            "code": "\nvoid initializeSerialCommunication_08008c44(int deviceAddress,undefined4 baudRate,byte serialSettings)\n\n{\n  uint extraOutput;\n  byte serialSettingsMask;\n  int bitmaskCounter;\n  code *jumpTableFuncPtr;\n  \n  *(undefined4 *)(deviceAddress + 0x11c) = baudRate;\n  *(byte *)(deviceAddress + 0x140) = serialSettings;\n  serialSettingsMask = serialSettings & 7;\n  if (serialSettingsMask == 4) {\n    bitmaskCounter = 7;\n  }\n  else if (serialSettingsMask == 6) {\n    bitmaskCounter = 8;\n  }\n  else if (serialSettingsMask == 2) {\n    bitmaskCounter = 6;\n  }\n  else {\n    bitmaskCounter = 0;\n  }\n  if ((serialSettings & 0x30) == 0x30) {\n    *(undefined4 *)(deviceAddress + 0x128) = 0x600;\n    bitmaskCounter = bitmaskCounter + 1;\n  }\n  else if ((serialSettings & 0x20) == 0) {\n    *(undefined4 *)(deviceAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(deviceAddress + 0x128) = 0x400;\n    bitmaskCounter = bitmaskCounter + 1;\n  }\n  if ((serialSettings & 8) == 0) {\n    *(undefined4 *)(deviceAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(deviceAddress + 0x124) = 0x2000;\n  }\n  if (bitmaskCounter == 8) {\n    *(undefined4 *)(deviceAddress + 0x120) = 0;\n  }\n  else if (bitmaskCounter == 9) {\n    *(undefined4 *)(deviceAddress + 0x120) = 0x1000;\n  }\n  else {\n    bitmaskCounter = 0;\n  }\n  if (bitmaskCounter != 0) {\n    uart_init(deviceAddress + 0xd4);\n    uart_attach_rx_callback(deviceAddress + 0xd4,0x8008b67);\n    return;\n  }\n  jumpTableFuncPtr = (code *)0x8008cee;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (extraOutput < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[extraOutput];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFuncPtr)(0,extraOutput,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_communication_08008c44",
                "param_1": "deviceAddress",
                "param_2": "baudRate",
                "param_3": "serialSettings",
                "extraout_r1": "extraOutput",
                "bVar1": "serialSettingsMask",
                "iVar2": "bitmaskCounter",
                "UNRECOVERED_JUMPTABLE": "jumpTableFuncPtr"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "uart_init",
                "uart_attach_rx_callback",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_byte_based_on_index_08008d00",
            "code": "\nvoid setByteBasedOnIndex_08008d00(int baseAddress,uint index)\n\n{\n  undefined value;\n  code *jumpTable;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(baseAddress + 0x12d) = value;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_byte_based_on_index_08008d00",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_memory_value_08008d18",
            "code": "\nvoid setMemoryValue_08008d18(int address,uint index)\n\n{\n  undefined value;\n  \n  if (index < 0x3c) {\n    value = (&DAT_0800a908)[index];\n  }\n  else {\n    value = 0xff;\n  }\n  *(undefined *)(address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_memory_value_08008d18",
                "param_1": "address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "FUNC_08008d30",
            "code": "\nundefined4 *\nFUNC_08008d30(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined uVar1;\n  \n  param_1[1] = 0;\n  param_1[2] = 1000;\n  *param_1 = &PTR_LAB_08008ba4_1_0800aab8;\n  if (param_1 == (undefined4 *)&DAT_20000700) {\n    setRx(&DAT_20000700,0,param_3,&DAT_20000700,param_4);\n    setTx(&DAT_20000700,1);\n  }\n  else {\n    uVar1 = pinmap_pin(param_2,&DAT_0800a81c);\n    *(undefined *)((int)param_1 + 0x12d) = uVar1;\n    uVar1 = pinmap_pin(param_2,&DAT_0800a864);\n    *(undefined *)(param_1 + 0x4b) = uVar1;\n  }\n  init(param_1);\n  return param_1;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "FUNC_08008d30"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "setRx",
                "init",
                "setTx",
                "pinmap_pin"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_serial_port_08008d8c",
            "code": "\nvoid initializeSerialPort_08008d8c(int flag,int value,undefined4 param1,undefined4 param2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    HardwareSerial(&DAT_20000700,0x40004400,param1,0xffff,param2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_serial_port_08008d8c",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "set_data_08008df8",
            "code": "\nvoid set_data_08008df8(undefined4 *data_array,undefined value_1,undefined value_2,undefined value_3,\n                 undefined value_4)\n\n{\n  *data_array = &DAT_0800ab0c;\n  *(undefined *)(data_array + 1) = value_1;\n  *(undefined *)((int)data_array + 5) = value_2;\n  *(undefined *)((int)data_array + 6) = value_3;\n  *(undefined *)((int)data_array + 7) = value_4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "set_data_08008df8",
                "param_1": "data_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_ip_address_08008e14",
            "code": "\nvoid initializeIPAddress_08008e14(int param1,int param2)\n\n{\n  if ((param1 == 1) && (param2 == 0xffff)) {\n    IPAddress(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_ip_address_08008e14",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolation_08008ef4",
            "code": "\nint calculate_interpolation_08008ef4(int start_value,int start_position,int end_position,int start_offset,int end_offset)\n\n{\n  return (uint)((end_offset - start_offset) * (start_value - start_position)) / (uint)(end_position - start_position) + start_offset;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolation_08008ef4",
                "param_1": "start_value",
                "param_2": "start_position",
                "param_3": "end_position",
                "param_4": "start_offset",
                "param_5": "end_offset"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_system_08008f0e",
            "code": "\nvoid initialize_system_08008f0e(void)\n\n{\n  set_priority_grouping(3);\n  initialize_hardware_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_system_08008f0e",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "initialize_hardware_configuration_080036a2": "initialize_hardware_configuration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "FUN_080036a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "run_microcontroller_08008f1c",
            "code": "\nvoid runMicrocontroller_08008f1c(void)\n\n{\n  initializeVariant();\n  initializeSetup();\n  do {\n    executeLoop();\n    runSerialEvent();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "run_microcontroller_08008f1c",
                "initVariant": "initializeVariant",
                "setup": "initializeSetup",
                "loop": "executeLoop",
                "serialEventRun": "runSerialEvent"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "initVariant",
                "loop",
                "serialEventRun",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar count_set_bits_08008f3c(uint input_num)\n\n{\n  char bit_count;\n  \n  bit_count = '\\0';\n  for (; input_num != 1; input_num = input_num >> 1) {\n    bit_count = bit_count + '\\x01';\n  }\n  return bit_count;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "input_num",
                "cVar1": "bit_count"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initializeData_08008f78(int inputCondition,int flagValue,undefined4 param3,undefined4 param4)\n\n{\n  if (inputCondition != 1) {\n    return;\n  }\n  if (flagValue == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    __aeabi_atexit(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "inputCondition",
                "param_2": "flagValue",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "check_and_process_function_08009084",
            "code": "\nvoid checkAndProcessFunction_08009084(int inputParam)\n\n{\n  int pinId;\n  \n  if (*(int *)(inputParam + 8) != 0) {\n    (**(code **)(inputParam + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pinId = retrievePinId();\n  if ((&DAT_20000858)[pinId * 5] != 0) {\n    checkAndProcessFunction_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "check_and_process_function_08009084",
                "param_1": "inputParam",
                "iVar1": "pinId",
                "get_pin_id": "retrievePinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_pin_and_invoke_operator_08009094",
            "code": "\nvoid checkPinAndInvokeOperator_08009094(void)\n\n{\n  int pinId;\n  \n  pinId = fetchPinId();\n  if ((&DAT_20000858)[pinId * 5] != 0) {\n    invokeOperator();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_pin_and_invoke_operator_08009094",
                "iVar1": "pinId",
                "get_pin_id": "fetchPinId",
                "operator()": "invokeOperator"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "install_exit_handler_080090c2",
            "code": "\nvoid installExitHandler_080090c2(undefined4 handler,undefined4 dsoHandle)\n\n{\n  __cxa_atexit(dsoHandle,handler);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "install_exit_handler_080090c2",
                "param_1": "handler",
                "param_2": "dsoHandle"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "print_assertion_failure_080090cc",
            "code": "\nvoid printAssertionFailure_080090cc(undefined4 fileName,undefined4 lineNumber,char *errorMessage,undefined4 functionName)\n\n{\n  undefined4 filePointer;\n  char *description;\n  undefined8 result;\n  undefined4 functionArg;\n  \n  filePointer = *(undefined4 *)(DAT_20000090 + 0xc);\n  functionArg = functionName;\n  if (errorMessage == (char *)0x0) goto LAB_080090f0;\n  description = \", function: \";\n  do {\n    fiprintf(filePointer,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,fileName,lineNumber,\n             description,errorMessage,functionArg);\n    result = abort();\n    lineNumber = (undefined4)((ulonglong)result >> 0x20);\n    filePointer = (undefined4)result;\nLAB_080090f0:\n    errorMessage = \"\";\n    description = errorMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "print_assertion_failure_080090cc",
                "param_1": "fileName",
                "param_2": "lineNumber",
                "param_3": "errorMessage",
                "param_4": "functionName",
                "uVar1": "filePointer",
                "pcVar2": "description",
                "uVar3": "result",
                "uVar4": "functionArg"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "convert_u_int64_to_long_long_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong convertUInt64ToLongLong_08009108(undefined4 inputFlags,uint inputValue)\n\n{\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "convert_u_int64_to_long_long_08009108",
                "param_1": "inputFlags",
                "param_2": "inputValue"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "print_formatted_data_08009124",
            "code": "\nvoid printFormattedData_08009124(undefined4 format,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  _vfiprintf_r(DAT_20000090,format,arg1,&arg2_copy,format,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "print_formatted_data_08009124",
                "param_1": "format",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_functions_08009148",
            "code": "\nvoid executeFunctions_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  _init();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_functions_08009148",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "premain"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_memory_08009190",
            "code": "\nvoid allocateMemory_08009190(undefined4 size)\n\n{\n  _malloc_r(DAT_20000090,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_memory_08009190",
                "param_1": "size"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "free_memory_080091a0",
            "code": "\nvoid freeMemory_080091a0(undefined4 memoryBlock)\n\n{\n  _free_r(DAT_20000090,memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "free_memory_080091a0",
                "param_1": "memoryBlock"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copy_data_080091b0(int start_address,undefined *source,int num_elements)\n\n{\n  undefined *dest_end;\n  undefined *dest_current;\n  \n  dest_current = (undefined *)(start_address + -1);\n  dest_end = source + num_elements;\n  for (; source != dest_end; source = source + 1) {\n    dest_current = dest_current + 1;\n    *dest_current = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "start_address",
                "param_2": "source",
                "param_3": "num_elements",
                "puVar1": "dest_end",
                "puVar2": "dest_current"
            },
            "calling": [
                "realloc",
                "FUN_080027f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "memset_080091c6",
            "code": "\nvoid memset_080091c6(undefined *destination,undefined value,int num_elements)\n\n{\n  undefined *end_ptr;\n  \n  end_ptr = destination + num_elements;\n  for (; destination != end_ptr; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "memset_080091c6",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "num_elements",
                "puVar1": "end_ptr"
            },
            "calling": [
                "std.isra.0",
                "__sfp",
                "FUN_08002a58",
                "pwm_start",
                "adc_read_value",
                "FUN_08002968",
                "__sfmoreglue"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "allocate_memory_080091d8",
            "code": "\nvoid allocateMemory_080091d8(undefined4 *result,int size,undefined4 var_3,undefined4 var_4)\n\n{\n  int **var_extra_r1;\n  int **var_p1;\n  int **var_p2;\n  int *var_p3;\n  int **var_p4;\n  int **var_p5;\n  \n  if (size == 0) {\n    return;\n  }\n  var_p5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    var_p5 = (int **)((int)var_p5 + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  var_p2 = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    var_p5[1] = (int *)0x0;\n    var_p1 = var_extra_r1;\n    DAT_2000098c = var_p5;\n  }\n  else {\n    var_p2 = DAT_2000098c;\n    if (var_p5 < DAT_2000098c) {\n      var_p1 = (int **)*var_p5;\n      var_p2 = (int **)((int)var_p5 + (int)var_p1);\n      if (DAT_2000098c == var_p2) {\n        var_p3 = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        var_p2 = (int **)((int)var_p3 + (int)var_p1);\n        *var_p5 = (int *)var_p2;\n      }\n      var_p5[1] = (int *)DAT_2000098c;\n      DAT_2000098c = var_p5;\n    }\n    else {\n      do {\n        var_p4 = var_p2;\n        var_p2 = (int **)var_p4[1];\n        if (var_p2 == (int **)0x0) break;\n      } while (var_p2 <= var_p5);\n      var_p1 = (int **)*var_p4;\n      if ((int **)((int)var_p4 + (int)var_p1) == var_p5) {\n        var_p1 = (int **)((int)var_p1 + (int)*var_p5);\n        *var_p4 = (int *)var_p1;\n        if (var_p2 == (int **)((int)var_p4 + (int)var_p1)) {\n          var_p3 = *var_p2;\n          var_p2 = (int **)var_p2[1];\n          var_p1 = (int **)((int)var_p1 + (int)var_p3);\n          *var_p4 = (int *)var_p1;\n          var_p4[1] = (int *)var_p2;\n        }\n      }\n      else if (var_p5 < (int **)((int)var_p4 + (int)var_p1)) {\n        *result = 0xc;\n      }\n      else {\n        var_p1 = (int **)((int)var_p5 + (int)*var_p5);\n        if (var_p2 == var_p1) {\n          var_p3 = *var_p2;\n          var_p2 = (int **)var_p2[1];\n          var_p1 = (int **)((int)var_p3 + (int)*var_p5);\n          *var_p5 = (int *)var_p1;\n        }\n        var_p5[1] = (int *)var_p2;\n        var_p4[1] = (int *)var_p5;\n      }\n    }\n  }\n  __malloc_unlock(result,var_p1,var_p2,var_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "allocate_memory_080091d8",
                "param_1": "result",
                "param_2": "size",
                "param_3": "var_3",
                "param_4": "var_4",
                "extraout_r1": "var_extra_r1",
                "ppiVar1": "var_p1",
                "ppiVar2": "var_p2",
                "piVar3": "var_p3",
                "ppiVar4": "var_p4",
                "ppiVar5": "var_p5"
            },
            "calling": [
                "abort",
                "realloc",
                "free",
                "__swsetup_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_memory_08009270",
            "code": "\nuint allocateMemory_08009270(undefined4 *sizePtr,uint size)\n\n{\n  uint *currentBlock;\n  int blockSize;\n  uint *nextBlock;\n  uint diffSize;\n  uint *previousBlock;\n  uint allocatedSize;\n  \n  allocatedSize = (size + 3 & 0xfffffffc) + 8;\n  if (allocatedSize < 0xc) {\n    allocatedSize = 0xc;\n  }\n  if (((int)allocatedSize < 0) || (allocatedSize < size)) {\n    *sizePtr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    currentBlock = DAT_2000098c;\n    previousBlock = DAT_2000098c;\n    while (nextBlock = currentBlock, nextBlock != (uint *)0x0) {\n      diffSize = *nextBlock - allocatedSize;\n      if (-1 < (int)diffSize) {\n        if (diffSize < 0xc) {\n          if (previousBlock == nextBlock) {\n            currentBlock = (uint *)previousBlock[1];\n            DAT_2000098c = currentBlock;\n          }\n          else {\n            currentBlock = (uint *)nextBlock[1];\n          }\n          if (previousBlock != nextBlock) {\n            previousBlock[1] = (uint)currentBlock;\n            previousBlock = nextBlock;\n          }\n        }\n        else {\n          *nextBlock = diffSize;\n          *(uint *)((int)nextBlock + diffSize) = allocatedSize;\n          previousBlock = (uint *)((int)nextBlock + diffSize);\n        }\n        goto LAB_080092d4;\n      }\n      previousBlock = nextBlock;\n      currentBlock = (uint *)nextBlock[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = _sbrk_r(sizePtr);\n    }\n    currentBlock = (uint *)_sbrk_r(sizePtr,allocatedSize);\n    if ((currentBlock != (uint *)0xffffffff) &&\n       ((previousBlock = (uint *)((int)currentBlock + 3U & 0xfffffffc), currentBlock == previousBlock ||\n        (blockSize = _sbrk_r(sizePtr,(int)previousBlock - (int)currentBlock), blockSize != -1)))) {\n      *previousBlock = allocatedSize;\nLAB_080092d4:\n      __malloc_unlock(sizePtr);\n      allocatedSize = (int)previousBlock + 0xbU & 0xfffffff8;\n      blockSize = allocatedSize - (int)(previousBlock + 1);\n      if (blockSize != 0) {\n        *(int *)((int)previousBlock + blockSize) = -blockSize;\n        return allocatedSize;\n      }\n      return allocatedSize;\n    }\n    *sizePtr = 0xc;\n    __malloc_unlock(sizePtr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_memory_08009270",
                "param_1": "sizePtr",
                "param_2": "size",
                "puVar1": "currentBlock",
                "iVar2": "blockSize",
                "puVar3": "nextBlock",
                "uVar4": "diffSize",
                "puVar5": "previousBlock",
                "uVar6": "allocatedSize"
            },
            "calling": [
                "realloc",
                "__smakebuf_r",
                "malloc",
                "__sfmoreglue"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint process_input_0800932c(int input_data,byte byte_value,byte **buffer)\n\n{\n  int temp_var_1;\n  byte *temp_var_2;\n  byte *temp_var_3;\n  uint result;\n  \n  temp_var_2 = buffer[2] + -1;\n  buffer[2] = temp_var_2;\n  if ((-1 < (int)temp_var_2) ||\n     (((int)buffer[6] <= (int)temp_var_2 && (temp_var_2 = (byte *)(uint)byte_value, temp_var_2 != (byte *)0xa))))\n  {\n    temp_var_2 = *buffer;\n    *buffer = temp_var_2 + 1;\n    *temp_var_2 = byte_value;\n    return (uint)byte_value;\n  }\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    init_stream();\n  }\n  if (buffer == (byte **)&DAT_0800aba4) {\n    buffer = *(byte ***)(input_data + 4);\n  }\n  else if (buffer == (byte **)&DAT_0800abc4) {\n    buffer = *(byte ***)(input_data + 8);\n  }\n  else if (buffer == (byte **)&DAT_0800ab84) {\n    buffer = *(byte ***)(input_data + 0xc);\n  }\n  buffer[2] = buffer[6];\n  temp_var_3 = (byte *)(uint)*(ushort *)(buffer + 3);\n  temp_var_1 = (int)temp_var_3 << 0x1c;\n  if (((temp_var_1 < 0) && (temp_var_3 = buffer[4], temp_var_3 != (byte *)0x0)) ||\n     (temp_var_1 = setup_stream(input_data,buffer,temp_var_1,temp_var_3,temp_var_2), temp_var_1 == 0)) {\n    result = (uint)byte_value;\n    temp_var_1 = (int)*buffer - (int)buffer[4];\n    if ((temp_var_1 < (int)buffer[5]) || (temp_var_1 = flush_stream(input_data,buffer), temp_var_1 == 0)) {\n      buffer[2] = buffer[2] + -1;\n      temp_var_2 = *buffer;\n      *buffer = temp_var_2 + 1;\n      *temp_var_2 = byte_value;\n      if ((byte *)(temp_var_1 + 1) != buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var_1 = flush_stream(input_data,buffer);\n      if (temp_var_1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "input_data",
                "param_2": "byte_value",
                "param_3": "buffer",
                "iVar1": "temp_var_1",
                "pbVar2": "temp_var_2",
                "pbVar3": "temp_var_3",
                "uVar4": "result",
                "__sinit": "init_stream",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_stream"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__sinit",
                "_fflush_r",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "write_to_stream_08009358",
            "code": "\nint write_to_stream_08009358(undefined4 stream,undefined4 character,undefined *data,int length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int remaining_length;\n  \n  end_of_data = data + length;\n  remaining_length = length;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    result = __sfputc_r(stream,*data,character,length,remaining_length);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "write_to_stream_08009358",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "remaining_length"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "parse_printf_format_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint parse_printf_format_0800937c(int fmt_str,undefined4 *arg_ptr,byte *buffer,int *ret_size)\n\n{\n  int result;\n  int *int_ptr;\n  bool found_num;\n  byte *ptr;\n  byte *next_ptr;\n  int unused;\n  int temp;\n  int *num_ptr;\n  uint flags;\n  int width;\n  undefined4 precision;\n  int num_digits;\n  int total_chars;\n  byte specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined alt_flag;\n  undefined4 zero_flag;\n  \n  num_ptr = ret_size;\n  if ((fmt_str != 0) && (*(int *)(fmt_str + 0x18) == 0)) {\n    __sinit();\n  }\n  if (arg_ptr == &DAT_0800aba4) {\n    arg_ptr = *(undefined4 **)(fmt_str + 4);\n  }\n  else if (arg_ptr == (undefined4 *)&DAT_0800abc4) {\n    arg_ptr = *(undefined4 **)(fmt_str + 8);\n  }\n  else if (arg_ptr == (undefined4 *)&DAT_0800ab84) {\n    arg_ptr = *(undefined4 **)(fmt_str + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(arg_ptr + 3) << 0x1c)) || (arg_ptr[4] == 0)) &&\n     (temp = __swsetup_r(fmt_str,arg_ptr), temp != 0)) {\n    return -1;\n  }\n  total_chars = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  ptr = buffer;\nLAB_080093be:\n  next_ptr = ptr;\n  if (*next_ptr != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  ptr = next_ptr + 1;\n  if (*next_ptr != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  temp = (int)next_ptr - (int)buffer;\n  if (temp != 0) {\n    result = __sfputs_r(fmt_str,arg_ptr,buffer,temp);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(arg_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars;\n    }\n    total_chars = total_chars + temp;\n  }\n  if (*next_ptr == 0) goto LAB_08009568;\n  flags = 0;\n  num_digits = 0;\n  width = -1;\n  precision = 0;\n  alt_flag = 0;\n  zero_flag = 0;\n  ptr = next_ptr + 1;\n  while( true ) {\n    temp = memchr(\"#-0+ \",*ptr);\n    buffer = ptr + 1;\n    if (temp == 0) break;\n    flags = 1 << (temp + 0xf7ff54b0U & 0xff) | flags;\n    ptr = buffer;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    alt_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    alt_flag = 0x2b;\n  }\n  if (*ptr == 0x2a) {\n    int_ptr = num_ptr + 1;\n    temp = *num_ptr;\n    num_ptr = int_ptr;\n    if (temp < 0) {\n      num_digits = -temp;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    found_num = false;\n    temp = num_digits;\n    buffer = ptr;\n    while( true ) {\n      if (9 < *buffer - 0x30) break;\n      temp = temp * 10 + (*buffer - 0x30);\n      found_num = true;\n      buffer = buffer + 1;\n    }\n    if (!found_num) goto LAB_080094a6;\n  }\n  num_digits = temp;\nLAB_080094a6:\n  if (*buffer == 0x2e) {\n    if (buffer[1] == 0x2a) {\n      buffer = buffer + 2;\n      int_ptr = num_ptr + 1;\n      width = *num_ptr;\n      num_ptr = int_ptr;\n      if (width < 0) {\n        width = -1;\n      }\n    }\n    else {\n      found_num = false;\n      temp = 0;\n      width = 0;\n      while( true ) {\n        buffer = buffer + 1;\n        if (9 < *buffer - 0x30) break;\n        temp = temp * 10 + (*buffer - 0x30);\n        found_num = true;\n      }\n      if (found_num) {\n        width = temp;\n      }\n    }\n  }\n  temp = memchr(&DAT_0800ab56,*buffer,3);\n  if (temp != 0) {\n    buffer = buffer + 1;\n    flags = flags | 0x40 << (temp + 0xf7ff54aaU & 0xff);\n  }\n  specifier = *buffer;\n  buffer = buffer + 1;\n  temp = memchr(\"efgEFG\",specifier,6);\n  if (temp == 0) {\n    unused = _printf_i(fmt_str,&flags,arg_ptr,0x8009359,&num_ptr);\n    if (unused == -1) goto LAB_08009568;\n  }\n  else {\n    num_ptr = (int *)(((int)num_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_chars = total_chars + unused;\n  ptr = buffer;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "parse_printf_format_0800937c",
                "param_1": "fmt_str",
                "param_2": "arg_ptr",
                "param_3": "buffer",
                "param_4": "ret_size",
                "iVar1": "result",
                "piVar2": "int_ptr",
                "bVar3": "found_num",
                "pbVar4": "ptr",
                "pbVar5": "next_ptr",
                "unaff_r9": "unused",
                "iVar6": "temp",
                "local_8c": "num_ptr",
                "local_88": "flags",
                "local_84": "width",
                "local_80": "precision",
                "local_7c": "num_digits",
                "local_74": "total_chars",
                "local_70": "specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "alt_flag",
                "local_30": "zero_flag"
            },
            "calling": [
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__sinit",
                "memchr",
                "_printf_i",
                "__sfputs_r",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "validate_and_process_data_080095a8",
            "code": "\nundefined4\nvalidate_and_process_data_080095a8(undefined4 data_ptr,uint *header_ptr,uint *output_ptr,undefined4 param_ptr,code *callback_func)\n\n{\n  int loop_counter;\n  int callback_result;\n  uint max_length;\n  uint additional_length;\n  bool is_condition_true;\n  \n  max_length = header_ptr[4];\n  if ((int)header_ptr[4] < (int)header_ptr[2]) {\n    max_length = header_ptr[2];\n  }\n  *output_ptr = max_length;\n  if (*(char *)((int)header_ptr + 0x43) != '\\0') {\n    *output_ptr = max_length + 1;\n  }\n  if ((int)(*header_ptr << 0x1a) < 0) {\n    *output_ptr = *output_ptr + 2;\n  }\n  if ((*header_ptr & 6) == 0) {\n    for (loop_counter = 0; loop_counter < (int)(header_ptr[3] - *output_ptr); loop_counter = loop_counter + 1) {\n      callback_result = (*callback_func)(data_ptr,param_ptr,(int)header_ptr + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_length = (uint)*(byte *)((int)header_ptr + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  additional_length = max_length;\n  if ((int)(*header_ptr << 0x1a) < 0) {\n    *(undefined *)((int)header_ptr + max_length + 0x43) = 0x30;\n    additional_length = max_length + 2;\n    *(undefined *)((int)header_ptr + max_length + 0x44) = *(undefined *)((int)header_ptr + 0x45);\n  }\n  loop_counter = (*callback_func)(data_ptr,param_ptr,(int)header_ptr + 0x43,additional_length);\n  if (loop_counter != -1) {\n    max_length = header_ptr[3];\n    is_condition_true = (*header_ptr & 6) != 4;\n    if (is_condition_true) {\n      max_length = 0;\n    }\n    additional_length = 0;\n    if (!is_condition_true) {\n      max_length = max_length - *output_ptr;\n    }\n    if (!is_condition_true) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    if ((int)header_ptr[4] < (int)header_ptr[2]) {\n      max_length = max_length + (header_ptr[2] - header_ptr[4]);\n    }\n    while( true ) {\n      if (max_length == additional_length) {\n        return 0;\n      }\n      loop_counter = (*callback_func)(data_ptr,param_ptr,(int)header_ptr + 0x1a,1);\n      if (loop_counter == -1) break;\n      additional_length = additional_length + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "validate_and_process_data_080095a8",
                "param_1": "data_ptr",
                "param_2": "header_ptr",
                "param_3": "output_ptr",
                "param_4": "param_ptr",
                "param_5": "callback_func",
                "iVar1": "loop_counter",
                "iVar2": "callback_result",
                "uVar3": "max_length",
                "uVar4": "additional_length",
                "bVar5": "is_condition_true"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "format_and_print_08009698",
            "code": "\nuint format_and_print_08009698(undefined4 format_str,uint *format_args,undefined4 arg_size,code *printer_func,uint **num_printed)\n\n{\n  byte mode;\n  int result;\n  uint *format_arg_ptr;\n  int format_arg;\n  char *hex_chars;\n  uint format_flag;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint temp;\n  char *str_end;\n  char *buf_end;\n  uint result_buf [2];\n  \n  mode = *(byte *)(format_args + 6);\n  buf_end = (char *)((int)format_args + 0x43);\n  if (mode != 0x6e) {\n    if (mode < 0x6f) {\n      if (mode != 99) {\n        if (mode < 100) {\n          if (mode == 0) goto LAB_08009852;\n          if (mode != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)format_args + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_080097e2:\n          format_flag = *format_args;\n          format_arg_ptr = *num_printed;\n          *num_printed = format_arg_ptr + 1;\n          if (((format_flag & 0x80) == 0) && ((int)(format_flag << 0x19) < 0)) {\n            value = (uint)*(ushort *)format_arg_ptr;\n          }\n          else {\n            value = *format_arg_ptr;\n          }\n          if ((int)(format_flag << 0x1f) < 0) {\n            *format_args = format_flag | 0x20;\n          }\n          if (value == 0) {\n            *format_args = *format_args & 0xffffffdf;\n          }\n          format_flag = 0x10;\nLAB_08009778:\n          *(undefined *)((int)format_args + 0x43) = 0;\n        }\n        else {\n          if ((mode != 100) && (mode != 0x69)) goto LAB_080096c8;\n          value = *format_args;\n          format_arg_ptr = *num_printed;\n          if ((value & 0x80) == 0) {\n            *num_printed = format_arg_ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_080096e8;\n            value = (uint)(short)*(ushort *)format_arg_ptr;\n          }\n          else {\n            *num_printed = format_arg_ptr + 1;\nLAB_080096e8:\n            value = *format_arg_ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)format_args + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          format_flag = 10;\n        }\n        temp = format_args[1];\n        format_args[2] = temp;\n        str_end = buf_end;\n        if ((int)temp < 0) {\n          if (value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)format_args + 0x42) = *hex_chars;\n          str_end = (char *)((int)format_args + 0x42);\n        }\n        else {\n          *format_args = *format_args & 0xfffffffb;\n          if (value == 0) {\n            if (temp != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              temp = value / format_flag;\n              str_end = str_end + -1;\n              *str_end = hex_chars[value - format_flag * temp];\n              value = temp;\n            } while (temp != 0);\n          }\n        }\n        if (((format_flag == 8) && ((int)(*format_args << 0x1f) < 0)) && ((int)format_args[1] <= (int)format_args[4]))\n        {\n          str_end[-1] = '0';\n          str_end = str_end + -1;\n        }\n        format_args[4] = (int)buf_end - (int)str_end;\n        buf_end = str_end;\n        goto LAB_080097be;\n      }\n      format_arg_ptr = *num_printed;\n      *num_printed = format_arg_ptr + 1;\n      *(char *)((int)format_args + 0x42) = (char)*format_arg_ptr;\nLAB_08009728:\n      buf_end = (char *)((int)format_args + 0x42);\n      value = 1;\n    }\n    else {\n      if (mode != 0x73) {\n        if (mode < 0x74) {\n          if (mode == 0x6f) {\nLAB_0800974e:\n            value = *format_args;\n            format_arg_ptr = *num_printed;\n            if ((value & 0x80) == 0) {\n              *num_printed = format_arg_ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_0800975c;\n              value = (uint)*(ushort *)format_arg_ptr;\n            }\n            else {\n              *num_printed = format_arg_ptr + 1;\nLAB_0800975c:\n              value = *format_arg_ptr;\n            }\n            if (mode == 0x6f) {\n              format_flag = 8;\n            }\n            else {\n              format_flag = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (mode == 0x70) {\n            *format_args = *format_args | 0x20;\nLAB_0800970e:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)format_args + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (mode == 0x75) goto LAB_0800974e;\n          if (mode == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)format_args + 0x42) = mode;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*num_printed;\n      *num_printed = (uint *)(ppcVar8 + 1);\n      buf_end = *ppcVar8;\n      result = memchr(buf_end,0,format_args[1]);\n      if (result != 0) {\n        format_args[1] = result - (int)buf_end;\n      }\n      value = format_args[1];\n    }\n    format_args[4] = value;\n    *(undefined *)((int)format_args + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  value = *format_args;\n  ppuVar7 = (uint **)*num_printed;\n  format_flag = format_args[5];\n  if ((value & 0x80) == 0) {\n    *num_printed = (uint *)(ppuVar7 + 1);\n    format_arg_ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)format_arg_ptr = (short)format_flag;\n  }\n  else {\n    *num_printed = (uint *)(ppuVar7 + 1);\n    format_arg_ptr = *ppuVar7;\nLAB_0800983e:\n    *format_arg_ptr = format_flag;\n  }\nLAB_08009852:\n  format_args[4] = 0;\nLAB_080097be:\n  result = _printf_common(format_str,format_args,result_buf,arg_size,printer_func);\n  if ((result == -1) || (result = (*printer_func)(format_str,arg_size,buf_end,format_args[4]), result == -1)) {\nLAB_080097d2:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_args << 0x1e) < 0) {\n      for (result = 0; result < (int)(format_args[3] - result_buf[0]); result = result + 1) {\n        format_arg = (*printer_func)(format_str,arg_size,(int)format_args + 0x19,1);\n        if (format_arg == -1) goto LAB_080097d2;\n      }\n    }\n    value = format_args[3];\n    if ((int)format_args[3] < (int)result_buf[0]) {\n      value = result_buf[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "format_and_print_08009698",
                "param_1": "format_str",
                "param_2": "format_args",
                "param_3": "arg_size",
                "param_4": "printer_func",
                "param_5": "num_printed",
                "bVar1": "mode",
                "iVar2": "result",
                "puVar3": "format_arg_ptr",
                "iVar4": "format_arg",
                "pcVar5": "hex_chars",
                "uVar6": "format_flag",
                "uVar9": "value",
                "uVar10": "temp",
                "pcVar11": "str_end",
                "pcVar12": "buf_end",
                "local_24": "result_buf"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "print_formatted_string_080098d8",
            "code": "\nvoid printFormattedString_080098d8(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int dataPointer;\n  undefined4 formatPointer;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  dataPointer = DAT_20000090;\n  formatPointer = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    __sinit(DAT_20000090);\n  }\n  _vfiprintf_r(dataPointer,*(undefined4 *)(dataPointer + 8),formatString,&arg1Copy,formatPointer,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "print_formatted_string_080098d8",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "dataPointer",
                "uVar2": "formatPointer",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "uart_init",
                "i2c_custom_init",
                "getTimerClkSrc",
                "getTimerIrq",
                "getTimerClkFreq"
            ],
            "called": [
                "__sinit",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_or_copy_memory_08009908",
            "code": "\nint allocate_or_copy_memory_08009908(int source_address,uint num_bytes)\n\n{\n  undefined4 default_alloc_size;\n  int result;\n  uint usable_size;\n  \n  default_alloc_size = DAT_20000090;\n  if (source_address != 0) {\n    if (num_bytes == 0) {\n      release_memory();\n      result = 0;\n    }\n    else {\n      usable_size = get_usable_memory_size();\n      result = source_address;\n      if ((usable_size < num_bytes) && (result = allocate_memory(default_alloc_size,num_bytes), result != 0)) {\n        copy_memory(result,source_address,num_bytes);\n        release_memory(default_alloc_size,source_address);\n      }\n    }\n    return result;\n  }\n  result = allocate_memory(DAT_20000090,num_bytes,num_bytes,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_or_copy_memory_08009908",
                "param_1": "source_address",
                "param_2": "num_bytes",
                "uVar1": "default_alloc_size",
                "iVar2": "result",
                "uVar3": "usable_size",
                "_free_r": "release_memory",
                "_malloc_usable_size_r": "get_usable_memory_size",
                "_malloc_r": "allocate_memory",
                "memcpy": "copy_memory"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c",
                "allocateRxBuffer"
            ],
            "called": [
                "memcpy",
                "_malloc_usable_size_r",
                "_malloc_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_08009918",
            "code": "\nvoid allocate_memory_08009918(int *output_address,undefined4 size)\n\n{\n  int memory_allocated;\n  \n  DAT_20000a38 = 0;\n  memory_allocated = _sbrk(size);\n  if ((memory_allocated == -1) && (DAT_20000a38 != 0)) {\n    *output_address = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_08009918",
                "param_1": "output_address",
                "param_2": "size",
                "iVar1": "memory_allocated"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_character;\n  \n  do {\n    current_character = string;\n    if (*current_character == '\\0') {\n      if (character != '\\0') {\n        current_character = (char *)0x0;\n      }\n      return current_character;\n    }\n    string = current_character + 1;\n  } while (character != *current_character);\n  return current_character;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_character"
            },
            "calling": [
                "strrchr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *currentPosition;\n  \n  do {\n    currentPosition = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = currentPosition + 1;\n    *currentPosition = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != currentPosition + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "currentPosition"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_occurrence_0800997e",
            "code": "\nint find_last_occurrence_0800997e(int search_str,int search_char,undefined4 arg3,undefined4 arg4)\n\n{\n  int occurrence;\n  int last_occurrence;\n  \n  if (search_char != 0) {\n    last_occurrence = 0;\n    while (occurrence = strchr(search_str,search_char,arg3,search_str,arg4), occurrence != 0) {\n      search_str = occurrence + 1;\n      last_occurrence = occurrence;\n    }\n    return last_occurrence;\n  }\n  last_occurrence = strchr();\n  return last_occurrence;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_occurrence_0800997e",
                "param_1": "search_str",
                "param_2": "search_char",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "occurrence",
                "iVar2": "last_occurrence"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [
                "strchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string1,char *string2)\n\n{\n  char *current_char1;\n  char *current_char2;\n  char *temp_char;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char1 = string1;\n    if (*current_char1 == '\\0') {\n      return (char *)0x0;\n    }\n    temp_char = string2 + -1;\n    current_char2 = current_char1 + -1;\n    do {\n      temp_char = temp_char + 1;\n      if (*temp_char == '\\0') {\n        return current_char1;\n      }\n      current_char2 = current_char2 + 1;\n      string1 = current_char1 + 1;\n    } while (*current_char2 == *temp_char);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char1",
                "pcVar2": "current_char2",
                "pcVar3": "temp_char"
            },
            "calling": [
                "setFirmwareNameAndVersion"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "process_data_08009a80",
            "code": "\nuint processData_08009a80(undefined4 *outputPointer,undefined4 *inputPointer)\n\n{\n  int dataOffset;\n  uint returnValue;\n  ushort flags;\n  \n  dataOffset = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    __sinit(DAT_20000090);\n  }\n  if (inputPointer == &DAT_0800aba4) {\n    inputPointer = *(undefined4 **)(dataOffset + 4);\n  }\n  else if (inputPointer == (undefined4 *)&DAT_0800abc4) {\n    inputPointer = *(undefined4 **)(dataOffset + 8);\n  }\n  else if (inputPointer == (undefined4 *)&DAT_0800ab84) {\n    inputPointer = *(undefined4 **)(dataOffset + 0xc);\n  }\n  flags = *(ushort *)(inputPointer + 3);\n  returnValue = (uint)flags;\n  if (-1 < (int)(returnValue << 0x1c)) {\n    if (-1 < (int)(returnValue << 0x1b)) {\n      *outputPointer = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(returnValue << 0x1d) < 0) {\n      if ((undefined4 *)inputPointer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPointer[0xd] != inputPointer + 0x11) {\n          _free_r(outputPointer);\n        }\n        inputPointer[0xd] = 0;\n      }\n      *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) & 0xffdb;\n      inputPointer[1] = 0;\n      *inputPointer = inputPointer[4];\n    }\n    *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) | 8;\n  }\n  if ((inputPointer[4] == 0) && ((*(ushort *)(inputPointer + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputPointer,inputPointer);\n  }\n  flags = *(ushort *)(inputPointer + 3);\n  returnValue = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      returnValue = inputPointer[5];\n    }\n    inputPointer[2] = returnValue;\n  }\n  else {\n    inputPointer[2] = 0;\n    inputPointer[6] = -inputPointer[5];\n  }\n  if (inputPointer[4] == 0) {\n    flags = *(ushort *)(inputPointer + 3);\n    returnValue = (int)(short)flags & 0x80;\n    if (returnValue != 0) {\nLAB_08009ab0:\n      *(ushort *)(inputPointer + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "process_data_08009a80",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "iVar1": "dataOffset",
                "uVar2": "returnValue",
                "uVar3": "flags"
            },
            "calling": [
                "_vfiprintf_r",
                "__sfputc_r"
            ],
            "called": [
                "__sinit",
                "__smakebuf_r",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "execute_task_08009b5c",
            "code": "\nvoid executeTask_08009b5c(void)\n\n{\n  uint *dataPointer;\n  int tempVar;\n  int *arrayPointer;\n  int *secondaryArrayPointer;\n  uint ushortValue;\n  ushort flags;\n  int loopCounter;\n  code *functionPointer;\n  int initialValue;\n  uint tempValue;\n  code *unrecoveredJump;\n  bool flag;\n  undefined8 returnValue;\n  \n  raise(6);\n  unrecoveredJump = (code *)0x8009b6b;\n  returnValue = _exit(1);\n  arrayPointer = (int *)((ulonglong)returnValue >> 0x20);\n  dataPointer = (uint *)returnValue;\n  flags = *(ushort *)(arrayPointer + 3);\n  ushortValue = (uint)flags;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    tempVar = arrayPointer[4];\n    if (tempVar != 0) {\n      loopCounter = ushortValue << 0x1e;\n      flag = loopCounter != 0;\n      if (flag) {\n        loopCounter = 0;\n      }\n      initialValue = *arrayPointer;\n      if (!flag) {\n        loopCounter = arrayPointer[5];\n      }\n      *arrayPointer = tempVar;\n      arrayPointer[2] = loopCounter;\n      for (initialValue = initialValue - tempVar; 0 < initialValue; initialValue = initialValue - loopCounter) {\n        loopCounter = (*(code *)arrayPointer[10])(dataPointer,arrayPointer[8],tempVar,initialValue);\n        if (loopCounter < 1) {\n          flags = *(ushort *)(arrayPointer + 3);\n          goto LAB_08009c62;\n        }\n        tempVar = tempVar + loopCounter;\n      }\n    }\n  }\n  else if (((0 < arrayPointer[1]) || (0 < arrayPointer[0x10])) &&\n          (functionPointer = (code *)arrayPointer[0xb], functionPointer != (code *)0x0)) {\n    tempValue = *dataPointer;\n    *dataPointer = 0;\n    if ((flags & 0x1000) == 0) {\n      tempVar = (*functionPointer)(dataPointer,arrayPointer[8],ushortValue & 0x1000,1);\n      if ((tempVar == -1) && (ushortValue = *dataPointer, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(arrayPointer + 3) = *(ushort *)(arrayPointer + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecoveredJump)();\n          return;\n        }\n        *dataPointer = tempValue;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      tempVar = arrayPointer[0x15];\n    }\n    if (((int)((uint)*(ushort *)(arrayPointer + 3) << 0x1d) < 0) &&\n       (tempVar = tempVar - arrayPointer[1], arrayPointer[0xd] != 0)) {\n      tempVar = tempVar - arrayPointer[0x10];\n    }\n    tempVar = (*(code *)arrayPointer[0xb])(dataPointer,arrayPointer[8],tempVar,0);\n    flags = *(ushort *)(arrayPointer + 3);\n    if ((tempVar == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(arrayPointer + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJump)(0xffffffff);\n      return;\n    }\n    arrayPointer[1] = 0;\n    *arrayPointer = arrayPointer[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((tempVar != -1 || (*dataPointer == 0)))) {\n      arrayPointer[0x15] = tempVar;\n    }\n    secondaryArrayPointer = (int *)arrayPointer[0xd];\n    *dataPointer = tempValue;\n    if (secondaryArrayPointer != (int *)0x0) {\n      if (secondaryArrayPointer != arrayPointer + 0x11) {\n        _free_r(dataPointer);\n      }\n      arrayPointer[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJump)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJump)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "execute_task_08009b5c",
                "puVar1": "dataPointer",
                "iVar2": "tempVar",
                "piVar3": "arrayPointer",
                "piVar4": "secondaryArrayPointer",
                "uVar5": "ushortValue",
                "uVar6": "flags",
                "iVar7": "loopCounter",
                "pcVar8": "functionPointer",
                "iVar9": "initialValue",
                "uVar10": "tempValue",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJump",
                "bVar11": "flag",
                "uVar12": "returnValue"
            },
            "calling": [
                "__assert_func",
                "__throw_bad_function_call"
            ],
            "called": [
                "raise",
                "_exit",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "perform_operation_08009c7c",
            "code": "\nundefined4 performOperation_08009c7c(uint *dataBuffer,int *operationParams)\n\n{\n  undefined4 returnValue;\n  int offset;\n  int *tempPtr;\n  uint tempVar1;\n  ushort tempVar2;\n  int tempVar3;\n  undefined4 param4;\n  undefined4 param5;\n  code *functionPointer;\n  int tempVar4;\n  uint tempVar5;\n  code *jumptable;\n  bool boolVar;\n  \n  if (operationParams[4] != 0) {\n    if ((dataBuffer != (uint *)0x0) && (dataBuffer[6] == 0)) {\n      __sinit();\n    }\n    if (operationParams == &DAT_0800aba4) {\n      operationParams = (int *)dataBuffer[1];\n    }\n    else if (operationParams == (int *)&DAT_0800abc4) {\n      operationParams = (int *)dataBuffer[2];\n    }\n    else if (operationParams == (int *)&DAT_0800ab84) {\n      operationParams = (int *)dataBuffer[3];\n    }\n    if (*(short *)(operationParams + 3) != 0) {\n      tempVar2 = *(ushort *)(operationParams + 3);\n      tempVar1 = (uint)tempVar2;\n      if ((int)(tempVar1 << 0x1c) < 0) {\n        offset = operationParams[4];\n        if (offset != 0) {\n          tempVar3 = tempVar1 << 0x1e;\n          boolVar = tempVar3 != 0;\n          if (boolVar) {\n            tempVar3 = 0;\n          }\n          tempVar4 = *operationParams;\n          if (!boolVar) {\n            tempVar3 = operationParams[5];\n          }\n          *operationParams = offset;\n          operationParams[2] = tempVar3;\n          for (tempVar4 = tempVar4 - offset; 0 < tempVar4; tempVar4 = tempVar4 - tempVar3) {\n            tempVar3 = (*(code *)operationParams[10])(dataBuffer,operationParams[8],offset,tempVar4,param4,param5);\n            if (tempVar3 < 1) {\n              tempVar2 = *(ushort *)(operationParams + 3);\n              goto LAB_08009c62;\n            }\n            offset = offset + tempVar3;\n          }\n        }\n      }\n      else if (((0 < operationParams[1]) || (0 < operationParams[0x10])) &&\n              (functionPointer = (code *)operationParams[0xb], functionPointer != (code *)0x0)) {\n        tempVar5 = *dataBuffer;\n        *dataBuffer = 0;\n        if ((tempVar2 & 0x1000) == 0) {\n          offset = (*functionPointer)(dataBuffer,operationParams[8],tempVar1 & 0x1000,1);\n          if ((offset == -1) && (tempVar1 = *dataBuffer, tempVar1 != 0)) {\n            if ((tempVar1 != 0x1d) && (tempVar1 != 0x16)) {\n              *(ushort *)(operationParams + 3) = *(ushort *)(operationParams + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumptable)();\n              return returnValue;\n            }\n            *dataBuffer = tempVar5;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          offset = operationParams[0x15];\n        }\n        if (((int)((uint)*(ushort *)(operationParams + 3) << 0x1d) < 0) &&\n           (offset = offset - operationParams[1], operationParams[0xd] != 0)) {\n          offset = offset - operationParams[0x10];\n        }\n        offset = (*(code *)operationParams[0xb])(dataBuffer,operationParams[8],offset,0);\n        tempVar2 = *(ushort *)(operationParams + 3);\n        if ((offset == -1) &&\n           ((0x1d < *dataBuffer || (-1 < (int)((0x20400001U >> (*dataBuffer & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(operationParams + 3) = tempVar2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumptable)(0xffffffff);\n          return returnValue;\n        }\n        operationParams[1] = 0;\n        *operationParams = operationParams[4];\n        if (((int)((uint)tempVar2 << 0x13) < 0) && ((offset != -1 || (*dataBuffer == 0)))) {\n          operationParams[0x15] = offset;\n        }\n        tempPtr = (int *)operationParams[0xd];\n        *dataBuffer = tempVar5;\n        if (tempPtr != (int *)0x0) {\n          if (tempPtr != operationParams + 0x11) {\n            _free_r(dataBuffer);\n          }\n          operationParams[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumptable)();\n          return returnValue;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumptable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "perform_operation_08009c7c",
                "param_1": "dataBuffer",
                "param_2": "operationParams",
                "uVar1": "returnValue",
                "iVar2": "offset",
                "piVar3": "tempPtr",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "iVar6": "tempVar3",
                "unaff_r4": "param4",
                "unaff_r5": "param5",
                "pcVar7": "functionPointer",
                "iVar8": "tempVar4",
                "uVar9": "tempVar5",
                "UNRECOVERED_JUMPTABLE_00": "jumptable",
                "bVar10": "boolVar"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_structure_08009cdc",
            "code": "\nvoid initializeStructure_08009cdc(undefined4 *structureArray,undefined2 value1,undefined2 value2)\n\n{\n  *structureArray = 0;\n  structureArray[1] = 0;\n  structureArray[2] = 0;\n  *(undefined2 *)(structureArray + 3) = value1;\n  value3 = 0;\n  *(undefined2 *)((int)structureArray + 0xe) = value2;\n  structureArray[4] = 0;\n  structureArray[5] = 0;\n  structureArray[6] = 0;\n  memset(structureArray + 0x17,0,8);\n  structureArray[8] = structureArray;\n  structureArray[9] = 0x800a021;\n  structureArray[10] = 0x800a043;\n  structureArray[0xb] = 0x800a07b;\n  structureArray[0xc] = &constantValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_structure_08009cdc",
                "param_1": "structureArray",
                "param_2": "value1",
                "param_3": "value2",
                "LAB_0800a09e_1": "constantValue",
                "param_1[0x19]": "value3"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_memory_08009d24",
            "code": "\nundefined4 * allocate_memory_08009d24(undefined4 size,int count)\n\n{\n  undefined4 *ptr;\n  int total_size;\n  \n  total_size = (count + -1) * 0x68;\n  ptr = (undefined4 *)_malloc_r(size,total_size + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = count;\n    ptr[2] = ptr + 3;\n    memset(ptr + 3,0,total_size + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_memory_08009d24",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "ptr",
                "iVar2": "total_size"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_data_08009d50",
            "code": "\nvoid initializeData_08009d50(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    pointer = &DAT_20000094;\n    data[10] = &LAB_08009cd0_1;\n    if (data == &DAT_20000094) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data == &DAT_20000094) {\n      data[6] = pointer;\n    }\n    result = getFloatValue();\n    data[1] = result;\n    result = getFloatValue(data);\n    data[2] = result;\n    result = getFloatValue(data);\n    data[3] = result;\n    standardizeData(data[1],4,0);\n    standardizeData(data[2],9,1);\n    standardizeData(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_data_08009d50",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "pointer",
                "__sfp": "getFloatValue",
                "std_isra_0": "standardizeData"
            },
            "calling": [
                "_fflush_r",
                "_vfiprintf_r",
                "__sfp",
                "iprintf",
                "__sfputc_r",
                "__swsetup_r"
            ],
            "called": [
                "std.isra.0",
                "__sfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_data_structure_08009db0",
            "code": "\nint * initializeDataStructure_08009db0(undefined4 *inputBuffer,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int *currentPointer;\n  int *innerPointer;\n  int **dataStructurePointer;\n  \n  if (DAT_200000ac == 0) {\n    __sinit(&DAT_20000094);\n  }\n  dataStructurePointer = (int **)&DAT_200000dc;\n  do {\n    innerPointer = dataStructurePointer[2];\n    currentPointer = dataStructurePointer[1];\n    while (currentPointer = (int *)((int)currentPointer + -1), -1 < (int)currentPointer) {\n      if (*(short *)(innerPointer + 3) == 0) {\n        *(undefined2 *)((int)innerPointer + 0xe) = 0xffff;\n        innerPointer[0x19] = 0;\n        *(undefined2 *)(innerPointer + 3) = 1;\n        *innerPointer = 0;\n        innerPointer[2] = 0;\n        innerPointer[1] = 0;\n        innerPointer[4] = 0;\n        innerPointer[5] = 0;\n        innerPointer[6] = 0;\n        memset(innerPointer + 0x17,0,8,1,param3);\n        innerPointer[0xd] = 0;\n        innerPointer[0xe] = 0;\n        innerPointer[0x12] = 0;\n        innerPointer[0x13] = 0;\n        return innerPointer;\n      }\n      innerPointer = innerPointer + 0x1a;\n    }\n    if (*dataStructurePointer == (int *)0x0) {\n      currentPointer = (int *)__sfmoreglue(inputBuffer,4);\n      *dataStructurePointer = currentPointer;\n      if (currentPointer == (int *)0x0) {\n        *inputBuffer = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataStructurePointer = (int **)*dataStructurePointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_data_structure_08009db0",
                "param_1": "inputBuffer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "piVar1": "currentPointer",
                "piVar2": "innerPointer",
                "ppiVar3": "dataStructurePointer"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sinit",
                "memset",
                "__sfmoreglue"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_file_permissions_08009e64",
            "code": "\nundefined4 checkFilePermissions_08009e64(undefined4 fileDescriptor,int fileInfo,undefined4 *result,uint *isExecutable)\n\n{\n  int status;\n  undefined4 permission;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  if ((*(short *)(fileInfo + 0xe) < 0) ||\n     (status = _fstat_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe),statBuffer), status < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInfo + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileMode & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_08009ea4:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_file_permissions_08009e64",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "param_3": "result",
                "param_4": "isExecutable",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_4c": "statBuffer",
                "local_48": "fileMode"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "initialize_device_08009eac",
            "code": "\nvoid initializeDevice_08009eac(int device_id,int *device_info)\n\n{\n  ushort result;\n  int allocation_result;\n  int device_data_length;\n  int *additional_data;\n  \n  if (-1 < (int)((uint)*(ushort *)(device_info + 3) << 0x1e)) {\n    device_data_length = device_id;\n    additional_data = device_info;\n    result = __swhatbuf_r(device_id,device_info,&device_data_length,&additional_data);\n    allocation_result = _malloc_r(device_id,device_data_length);\n    if (allocation_result != 0) {\n      *(undefined **)(device_id + 0x28) = &LAB_08009cd0_1;\n      *device_info = allocation_result;\n      *(ushort *)(device_info + 3) = *(ushort *)(device_info + 3) | 0x80;\n      device_info[4] = allocation_result;\n      device_info[5] = device_data_length;\n      if ((additional_data != (int *)0x0) &&\n         (allocation_result = _isatty_r(device_id,(int)*(short *)((int)device_info + 0xe)), allocation_result != 0)) {\n        *(ushort *)(device_info + 3) = *(ushort *)(device_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(device_info + 3) = result | *(ushort *)(device_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(device_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(device_info + 3) = *(ushort *)(device_info + 3) & 0xfffc | 2;\n  }\n  *device_info = (int)device_info + 0x47;\n  device_info[4] = (int)device_info + 0x47;\n  device_info[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "initialize_device_08009eac",
                "param_1": "device_id",
                "param_2": "device_info",
                "uVar1": "result",
                "iVar2": "allocation_result",
                "local_18": "device_data_length",
                "local_14": "additional_data"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "__swhatbuf_r",
                "_malloc_r",
                "_isatty_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_in_string_08009f2c",
            "code": "\nchar * find_character_in_string_08009f2c(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_in_string_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "process_signal_08009fe8",
            "code": "\nint processSignal_08009fe8(uint signal)\n\n{\n  int *signalArray;\n  undefined4 pid;\n  int index;\n  code *signalHandler;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *signalArrayPtr;\n  \n  signalArray = DAT_20000090;\n  signalArrayPtr = &DAT_20000090;\n  if (0x1f < signal) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  index = DAT_20000090[0x11];\n  if ((index != 0) && (signalHandler = *(code **)(index + signal * 4), signalHandler != (code *)0x0)) {\n    if (signalHandler != (code *)0x1) {\n      if (signalHandler == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(index + signal * 4) = 0;\n      (*signalHandler)(signal);\n    }\n    return 0;\n  }\n  pid = _getpid_r(DAT_20000090);\n  DAT_20000a38 = 0;\n  index = _kill(pid,signal,signal,0,signalArrayPtr,unaff_r4,unaff_r5,in_lr);\n  if ((index == -1) && (DAT_20000a38 != 0)) {\n    *signalArray = DAT_20000a38;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "process_signal_08009fe8",
                "param_1": "signal",
                "piVar1": "signalArray",
                "uVar2": "pid",
                "iVar3": "index",
                "pcVar4": "signalHandler",
                "puVar5": "signalArrayPtr"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a01c": {
            "entrypoint": "0x0800a01c",
            "current_name": "FUN_0800a01c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_data_0800a020",
            "code": "\nvoid updateData_0800a020(undefined4 arg1,int arg2)\n\n{\n  int returnValue;\n  uint updatedValue;\n  bool isValid;\n  \n  returnValue = _read_r(arg1,(int)*(short *)(arg2 + 0xe));\n  isValid = -1 < returnValue;\n  if (isValid) {\n    updatedValue = *(int *)(arg2 + 0x54) + returnValue;\n  }\n  else {\n    updatedValue = *(ushort *)(arg2 + 0xc) & 0xffffefff;\n  }\n  if (isValid) {\n    *(uint *)(arg2 + 0x54) = updatedValue;\n  }\n  if (!isValid) {\n    *(short *)(arg2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_data_0800a020",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "returnValue",
                "uVar2": "updatedValue",
                "bVar3": "isValid"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "write_data_to_file_0800a042",
            "code": "\nvoid write_data_to_file_0800a042(int *file_descriptor,int header_offset,undefined4 buffer,undefined4 size)\n\n{\n  int write_result;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  undefined4 unused_var3;\n  \n  if ((int)((uint)*(ushort *)(header_offset + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(header_offset + 0xe),0,2);\n  }\n  *(ushort *)(header_offset + 0xc) = *(ushort *)(header_offset + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  write_result = _write((int)*(short *)(header_offset + 0xe),buffer,size,size,size,unused_var1,unused_var2,\n                 unused_var3);\n  if ((write_result == -1) && (DAT_20000a38 != 0)) {\n    *file_descriptor = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "write_data_to_file_0800a042",
                "param_1": "file_descriptor",
                "param_2": "header_offset",
                "param_3": "buffer",
                "param_4": "size",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2",
                "in_lr": "unused_var3",
                "iVar1": "write_result"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_file_pointer_0800a07a",
            "code": "\nvoid updateFilePointer_0800a07a(undefined4 fileDescriptor,int data)\n\n{\n  int seekResult;\n  ushort updatedFlag;\n  bool isSeekFailed;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(data + 0xe));\n  isSeekFailed = seekResult == -1;\n  if (isSeekFailed) {\n    updatedFlag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = seekResult;\n    updatedFlag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isSeekFailed) {\n    *(ushort *)(data + 0xc) = updatedFlag;\n  }\n  if (!isSeekFailed) {\n    *(ushort *)(data + 0xc) = updatedFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_file_pointer_0800a07a",
                "param_1": "fileDescriptor",
                "param_2": "data",
                "iVar1": "seekResult",
                "uVar2": "updatedFlag",
                "bVar3": "isSeekFailed"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "get_stat_and_assign_0800a0ec",
            "code": "\nvoid getStatAndAssign_0800a0ec(int *resultPointer,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 bufferSize)\n\n{\n  int statResult;\n  \n  DAT_20000a38 = 0;\n  statResult = _fstat(fileDescriptor,statBuffer,statBuffer,0,bufferSize);\n  if ((statResult == -1) && (DAT_20000a38 != 0)) {\n    *resultPointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "get_stat_and_assign_0800a0ec",
                "param_1": "resultPointer",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "bufferSize",
                "iVar1": "statResult"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "check_and_assign_tty_0800a110",
            "code": "\nvoid checkAndAssignTTY_0800a110(int *result,undefined4 fileDescriptor)\n\n{\n  int isTTY;\n  \n  DAT_20000a38 = 0;\n  isTTY = _isatty(fileDescriptor);\n  if ((isTTY == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "check_and_assign_tty_0800a110",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "isTTY"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "set_file_position_0800a130",
            "code": "\nvoid setFilePosition_0800a130(int *result,undefined4 fileDescriptor,undefined4 offset,undefined4 origin)\n\n{\n  int seekResult;\n  \n  DAT_20000a38 = 0;\n  seekResult = _lseek(fileDescriptor,offset,origin,origin,origin);\n  if ((seekResult == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "set_file_position_0800a130",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "origin",
                "iVar1": "seekResult"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_result_0800a154",
            "code": "\nint calculateResult_0800a154(undefined4 param,int arrayPtr)\n\n{\n  int calculatedValue;\n  \n  calculatedValue = *(int *)(arrayPtr + -4) + -4;\n  if (*(int *)(arrayPtr + -4) < 0) {\n    calculatedValue = calculatedValue + *(int *)(arrayPtr + calculatedValue);\n  }\n  return calculatedValue;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_result_0800a154",
                "param_1": "param",
                "param_2": "arrayPtr",
                "iVar1": "calculatedValue"
            },
            "calling": [
                "realloc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "read_and_assign_value_0800a168",
            "code": "\nvoid readAndAssignValue_0800a168(int *outputResult,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20000a38 = 0;\n  readResult = _read(fileDescriptor,buffer,count,count,count);\n  if ((readResult == -1) && (DAT_20000a38 != 0)) {\n    *outputResult = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "read_and_assign_value_0800a168",
                "param_1": "outputResult",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "initialize_data_0800a18c",
            "code": "\nvoid initializeData_0800a18c(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeData_0800a18c;\n  abort();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "initialize_data_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 204720,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08000588",
            "FUN_080005e0",
            "FUN_08000aec",
            "FUN_08000ef8",
            "FUN_08002400",
            "FUN_0800242c",
            "FUN_08002578",
            "FUN_08002580",
            "FUN_080025ac",
            "FUN_08002644",
            "FUN_0800267c",
            "FUN_080026b0",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_0800291c",
            "FUN_08002948",
            "FUN_08002968",
            "FUN_08002a30",
            "FUN_08002a58",
            "FUN_08002acc",
            "FUN_08002c2c",
            "FUN_08002dbc",
            "FUN_08002ddc",
            "FUN_08002df6",
            "FUN_08002e44",
            "FUN_08002ec4",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08002f14",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_08002fca",
            "FUN_08003002",
            "FUN_0800307a",
            "FUN_08003106",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_08003158",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800322c",
            "FUN_0800325a",
            "FUN_080032a2",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_080033cc",
            "FUN_0800344a",
            "FUN_08003474",
            "FUN_080035b8",
            "FUN_08003658",
            "FUN_080036a2",
            "FUN_080036ac",
            "FUN_080036d8",
            "FUN_08003724",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_0800376c",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003a20",
            "FUN_08003aa0",
            "FUN_08003b8c",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_08003e20",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_080042f0",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_080045c0",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_08004f3c",
            "FUN_08005084",
            "FUN_08005188",
            "FUN_080052f0",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005460",
            "FUN_08005840",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005a1c",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005a68",
            "FUN_08005aa4",
            "FUN_08005bb8",
            "FUN_08005cb4",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08005fe8",
            "FUN_08006060",
            "FUN_08006092",
            "FUN_080060c4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006262",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_08006420",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_08006538",
            "FUN_080066e8",
            "FUN_0800674e",
            "FUN_080067ac",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_080069ec",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006ca8",
            "FUN_08006d24",
            "FUN_08006d80",
            "FUN_08006e68",
            "FUN_08007110",
            "FUN_08007118",
            "FUN_080071e4",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_080072fa",
            "FUN_08007306",
            "FUN_08007320",
            "FUN_08007332",
            "FUN_0800734a",
            "FUN_0800735a",
            "FUN_08007376",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080075dc",
            "FUN_08007648",
            "FUN_080076e0",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_08007718",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_080077b0",
            "FUN_08007e74",
            "FUN_08007ede",
            "FUN_08007f0e",
            "FUN_08007f78",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_08008078",
            "FUN_080084b0",
            "FUN_08008500",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008694",
            "FUN_080086e8",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_0800885c",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008880",
            "FUN_080088e0",
            "FUN_08008990",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008afa",
            "FUN_08008b66",
            "FUN_08008c20",
            "FUN_08008c44",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008d30",
            "FUN_08008d8c",
            "FUN_08008df8",
            "FUN_08008e14",
            "FUN_08008ef4",
            "FUN_08008f1c",
            "FUN_08008f3c",
            "FUN_08008f78",
            "FUN_08009094",
            "FUN_080090c2",
            "FUN_080090cc",
            "FUN_08009108",
            "FUN_08009124",
            "FUN_08009148",
            "FUN_08009190",
            "FUN_080091a0",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_08009270",
            "FUN_0800932c",
            "FUN_08009358",
            "FUN_0800937c",
            "FUN_080095a8",
            "FUN_08009698",
            "FUN_080098d8",
            "FUN_08009908",
            "FUN_08009918",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_0800997e",
            "FUN_080099a4",
            "FUN_08009a80",
            "FUN_08009b5c",
            "FUN_08009c7c",
            "FUN_08009cdc",
            "FUN_08009d24",
            "FUN_08009d50",
            "FUN_08009db0",
            "FUN_08009e64",
            "FUN_08009eac",
            "FUN_08009f2c",
            "FUN_08009fe8",
            "FUN_0800a020",
            "FUN_0800a042",
            "FUN_0800a07a",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a154",
            "FUN_0800a168"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000488",
            "FUN_080005f8",
            "FUN_08000be8",
            "FUN_08001bf8",
            "FUN_08001c08",
            "FUN_08001c18",
            "FUN_08001cd0",
            "FUN_080022f8",
            "FUN_08002634",
            "FUN_08002a1c",
            "FUN_08002ac0",
            "FUN_08002b68",
            "FUN_08002c1e",
            "FUN_08002ce0",
            "FUN_08002e26",
            "FUN_08008f0e"
        ],
        [
            "FUN_08000500",
            "FUN_08002a26",
            "FUN_08002c00",
            "FUN_08003048"
        ],
        [
            "FUN_08000a64",
            "FUN_08001b48",
            "FUN_08002c14"
        ],
        [
            "FUN_08009084",
            "FUN_0800a18c"
        ]
    ],
    "locked_functions": []
}