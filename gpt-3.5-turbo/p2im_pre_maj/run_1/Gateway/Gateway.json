{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "update_flag_if_not_set_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 updateFlagIfNotSet_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_200000f4 == '\\0') {\n    DAT_200000f4._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "update_flag_if_not_set_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800a424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "get_string_length_08000178",
            "code": "\nchar * getStringLength_08000178(char *str)\n\n{\n  char currentChar;\n  char *currentChar;\n  char *strPtr;\n  \n  strPtr = str;\n  do {\n    currentChar = strPtr + 1;\n    currentChar = *strPtr;\n    strPtr = currentChar;\n  } while (currentChar != '\\0');\n  return currentChar + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000178": "get_string_length_08000178",
                "param_1": "str",
                "pcVar2": "currentChar",
                "pcVar3": "strPtr",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_08002e44",
                "FUN_080032a2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "execute_software_interrupt_08000188",
            "code": "\nvoid executeSoftwareInterrupt_08000188(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000188": "execute_software_interrupt_08000188"
            },
            "calling": [
                "FUN_0800018c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800018c": {
            "entrypoint": "0x0800018c",
            "current_name": "execute_interrupt_0800018c",
            "code": "\nundefined4 execute_interrupt_0800018c(undefined4 input_param,undefined4 ignored_param,undefined4 unused_param,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000110 != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_08000188(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800018c": "execute_interrupt_0800018c",
                "param_1": "input_param",
                "param_2": "ignored_param",
                "param_3": "unused_param",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08000188"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000214": {
            "entrypoint": "0x08000214",
            "current_name": "process_data_08000214",
            "code": "\nvoid processData_08000214(uint value,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  bool isValid;\n  int result;\n  \n  if (0x3b < (int)value) {\n    return;\n  }\n  result = getOffsetValue(&DAT_200003d4,value,param3,param4,param4);\n  if (result == 3) {\n    if (value < 0x3c) {\n      if ((&DAT_0800a908)[value] == -1) {\n        result = 0;\n      }\n      else {\n        result = checkValidParam();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = checkValidParam((int)(char)(&DAT_0800a908)[value]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = checkMatch((int)(char)(&DAT_0800a908)[value],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      processData_08000214Entry(value,param2);\n    }\n    storeValueAtIndex(&DAT_200003d4,value,param2);\n  }\n  else if (result == 4) {\n    if (value < 0x3c) {\n      if ((&DAT_0800a908)[value] == -1) {\n        isValid = false;\n      }\n      else {\n        result = checkValidParam();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = checkValidParam((int)(char)(&DAT_0800a908)[value]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      interpolationAndValueAssignment(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[value] * 3,param2);\n    }\n    storeValueAtIndex(&DAT_200003d4,value,param2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000214": "process_data_08000214",
                "param_1": "value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "isValid",
                "iVar2": "result",
                "get_offset_value_08002fa0": "getOffsetValue",
                "check_valid_param_080036ac": "checkValidParam",
                "check_match_0800738a": "checkMatch",
                "process_data_080088e0": "processDataEntry",
                "store_value_at_index_08002fc2": "storeValueAtIndex",
                "interpolation_and_value_assignment_080026b0": "interpolationAndValueAssignment"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800021a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800021a": {
            "entrypoint": "0x0800021a",
            "current_name": "validate_and_store_data_0800021a",
            "code": "\nvoid validate_and_store_data_0800021a(uint index,undefined4 value,undefined4 param_3,undefined4 param_4)\n\n{\n  bool isValid;\n  int result;\n  \n  result = get_offset_value_08002fa0(&DAT_200003d4,index,param_3,param_4,param_4);\n  if (result == 3) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        result = 0;\n      }\n      else {\n        result = check_valid_param_080036ac();\n        if (result == 0) {\n          result = 0;\n        }\n        else {\n          result = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            result = 0;\n          }\n          else {\n            result = check_match_0800738a((int)(char)(&DAT_0800a908)[index],&DAT_0800a6cc);\n          }\n        }\n      }\n    }\n    else {\n      result = 0;\n    }\n    if (result != 0) {\n      process_data_080088e0(index,value);\n    }\n    store_value_at_index_08002fc2(&DAT_200003d4,index,value);\n  }\n  else if (result == 4) {\n    if (index < 0x3c) {\n      if ((&DAT_0800a908)[index] == -1) {\n        isValid = false;\n      }\n      else {\n        result = check_valid_param_080036ac();\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          result = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[index]);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      interpolation_and_value_assignment_080026b0(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3,value);\n    }\n    store_value_at_index_08002fc2(&DAT_200003d4,index,value);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800021a": "validate_and_store_data_0800021a",
                "param_1": "index",
                "param_2": "value",
                "bVar1": "isValid",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08000214"
            ],
            "called": [
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_080088e0",
                "FUN_080026b0",
                "FUN_0800738a",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000488": {
            "entrypoint": "0x08000488",
            "current_name": "update_data_08000488",
            "code": "\nvoid updateData_08000488(uint index,int flag)\n\n{\n  undefined4 validationStatus;\n  \n  if ((int)index < 0xe) {\n    if (flag == 0) {\n      DAT_20000114 = DAT_20000114 & ~(1 << (index & 0xff));\n      return;\n    }\n    DAT_20000114 = 1 << (index & 0xff) | DAT_20000114;\n    if (DAT_20000171 == '\\0') {\n      validationStatus = configure_and_validate_data_08008880();\n      execute_and_decode_08002ef2(&DAT_200003d4,index,validationStatus);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000488": "update_data_08000488",
                "param_1": "index",
                "param_2": "flag",
                "uVar1": "validationStatus"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d4": {
            "entrypoint": "0x080004d4",
            "current_name": "initialize_data_if_param1_is_1_080004d4",
            "code": "\nvoid initialize_data_if_param1_is_1_080004d4(int is_param1,int param2)\n\n{\n  int iteration_count;\n  undefined *data_pointer;\n  \n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    data_pointer = &DAT_2000022c;\n    for (iteration_count = 0xb; -1 < iteration_count; iteration_count = iteration_count + -1) {\n      initialize_data_08002580(data_pointer);\n      data_pointer = data_pointer + 3;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004d4": "initialize_data_if_param1_is_1_080004d4",
                "param_1": "is_param1",
                "param_2": "param2",
                "iVar1": "iteration_count",
                "puVar2": "data_pointer"
            },
            "calling": [],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000500": {
            "entrypoint": "0x08000500",
            "current_name": "process_servo_08000500",
            "code": "\nvoid processServo_08000500(int servoIndex,int param2,int param3,undefined4 param4)\n\n{\n  if (0xb < DAT_200001ed) {\n    executeInstructions(&DAT_200003d4,\"Max servos attached\",param3,param4,param4);\n    return;\n  }\n  if (DAT_2000011c == 0) {\n    (&DAT_200001f0)[servoIndex] = DAT_200001ed;\n    DAT_200001ed = DAT_200001ed + 1;\n  }\n  else {\n    (&DAT_200001f0)[servoIndex] = (&DAT_2000011f)[DAT_2000011c];\n    DAT_2000011c = DAT_2000011c - 1;\n  }\n  if ((0 < param2) && (0 < param3)) {\n    processAndInitMemory(&DAT_2000022c + (uint)(byteValue)(&DAT_200001f0)[servoIndex] * 3,servoIndex,param2,param3);\n    return;\n  }\n  initMemory(&DAT_2000022c + (uint)(byteValue)(&DAT_200001f0)[servoIndex] * 3,servoIndex);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000500": "process_servo_08000500",
                "param_1": "servoIndex",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "execute_decoded_instructions_08002f14": "executeInstructions",
                "process_and_initialize_memory_080025ac": "processAndInitMemory",
                "initialize_memory_08002634": "initMemory",
                "byte": "byteValue"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002634",
                "FUN_080025ac",
                "FUN_08002f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000588": {
            "entrypoint": "0x08000588",
            "current_name": "initialize_data_08000588",
            "code": "\nvoid initialize_data_08000588(int index)\n\n{\n  initialize_data_08000588_08002644(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[index] * 3);\n  if (((&DAT_200001f0)[index] == DAT_200001ed) && (DAT_200001ed != '\\0')) {\n    DAT_200001ed = DAT_200001ed + -1;\n  }\n  else if (DAT_200001ed != '\\0') {\n    DAT_2000011c = DAT_2000011c + 1;\n    (&DAT_2000011f)[DAT_2000011c] = (&DAT_200001f0)[index];\n  }\n  (&DAT_200001f0)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000588": "initialize_data_08000588",
                "param_1": "index"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [
                "FUN_08002644"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "initialize_data_080005e0",
            "code": "\nvoid initializeData_080005e0(void)\n\n{\n  DAT_20000170 = 0;\n  DAT_20000004 = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "initialize_data_080005e0"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005f8": {
            "entrypoint": "0x080005f8",
            "current_name": "process_pin_080005f8",
            "code": "\nvoid processPin_080005f8(uint pinNumber,int mode)\n\n{\n  int offsetValue;\n  char flag;\n  bool isValid;\n  uint adjustedPinNumber;\n  \n  offsetValue = get_offset_value_08002fa0(&DAT_200003d4,pinNumber);\n  if (offsetValue != 0x7f) {\n    offsetValue = get_offset_value_08002fa0(&DAT_200003d4,pinNumber);\n    if (offsetValue == 6) {\n      if (DAT_20000170 == '\\0') {\n        flag = '\\0';\n      }\n      else {\n        flag = DAT_20000170;\n        if (mode == 6) {\n          flag = '\\0';\n        }\n      }\n    }\n    else {\n      flag = '\\0';\n    }\n    if (flag != '\\0') {\n      initialize_data_080005e0();\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValid = false;\n      }\n      else {\n        offsetValue = check_valid_param_080036ac();\n        if (offsetValue == 0) {\n          isValid = false;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (offsetValue == 1) {\n            isValid = false;\n          }\n          else if (mode == 4) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((byte)(&DAT_200001f0)[pinNumber] < 0xc) {\n        offsetValue = extract_bit_from_data_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3);\n      }\n      else {\n        offsetValue = 0;\n      }\n      if (offsetValue != 0) {\n        initialize_data_08000588(pinNumber);\n      }\n    }\n    adjustedPinNumber = pinNumber - 0x2e & 0xff;\n    if (adjustedPinNumber < 0xe) {\n      if (pinNumber < 0x3c) {\n        offsetValue = (int)(char)(&DAT_0800a908)[pinNumber];\n      }\n      else {\n        offsetValue = -1;\n      }\n      offsetValue = check_valid_param_080036ac(offsetValue);\n      if (offsetValue == 0) {\n        isValid = false;\n      }\n      else {\n        if (pinNumber < 0x3c) {\n          offsetValue = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          offsetValue = -1;\n        }\n        offsetValue = check_valid_param_080036ac(offsetValue);\n        if (offsetValue == 1) {\n          isValid = false;\n        }\n        else {\n          isValid = true;\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      update_data_08000488(adjustedPinNumber,mode == 2);\n    }\n    if (pinNumber < 0x3c) {\n      if ((&DAT_0800a908)[pinNumber] == -1) {\n        isValid = false;\n      }\n      else {\n        offsetValue = check_valid_param_080036ac();\n        if (offsetValue == 0) {\n          isValid = false;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n          if (offsetValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n    }\n    else {\n      isValid = false;\n    }\n    if (isValid) {\n      if ((mode == 0) || (mode == 0xb)) {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] | (byte)(1 << (pinNumber & 7));\n      }\n      else {\n        (&DAT_20000174)[pinNumber >> 3] = (&DAT_20000174)[pinNumber >> 3] & ~(byte)(1 << (pinNumber & 7));\n      }\n    }\n    store_value_at_index_08002fc2(&DAT_200003d4,pinNumber,0);\n    switch(mode) {\n    case 0:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac();\n          if (offsetValue == 0) {\n            isValid = false;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (offsetValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        initialize_and_process_memory_08008990(pinNumber,0);\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,0);\n        return;\n      }\n      break;\n    case 1:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac();\n          if (offsetValue == 0) {\n            isValid = false;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (offsetValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        offsetValue = get_offset_value_08002fa0(&DAT_200003d4,pinNumber);\n        if (offsetValue == 3) {\n          process_param_08008a24(pinNumber,0);\n        }\n        initialize_and_process_memory_08008990(pinNumber,1);\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n      break;\n    case 2:\n      if (adjustedPinNumber < 0xe) {\n        if (pinNumber < 0x3c) {\n          offsetValue = (int)(char)(&DAT_0800a908)[pinNumber];\n        }\n        else {\n          offsetValue = -1;\n        }\n        offsetValue = check_valid_param_080036ac(offsetValue);\n        if (offsetValue == 0) {\n          isValid = false;\n        }\n        else {\n          if (pinNumber < 0x3c) {\n            offsetValue = (int)(char)(&DAT_0800a908)[pinNumber];\n          }\n          else {\n            offsetValue = -1;\n          }\n          offsetValue = check_valid_param_080036ac(offsetValue);\n          if (offsetValue == 1) {\n            isValid = false;\n          }\n          else {\n            isValid = true;\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        if (pinNumber < 0x3c) {\n          if ((&DAT_0800a908)[pinNumber] == -1) {\n            isValid = false;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac();\n            if (offsetValue == 0) {\n              isValid = false;\n            }\n            else {\n              offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n              if (offsetValue == 1) {\n                isValid = false;\n              }\n            }\n          }\n        }\n        else {\n          isValid = false;\n        }\n        if (isValid) {\n          initialize_and_process_memory_08008990(pinNumber,0);\n        }\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,2);\n        return;\n      }\n      break;\n    case 3:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          offsetValue = 0;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac();\n          if (offsetValue == 0) {\n            offsetValue = 0;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (offsetValue == 1) {\n              offsetValue = 0;\n            }\n            else {\n              offsetValue = check_match_0800738a((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        offsetValue = 0;\n      }\n      if (offsetValue != 0) {\n        initialize_and_process_memory_08008990(pinNumber,1);\n        process_data_080088e0(pinNumber,0);\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,3);\n        return;\n      }\n      break;\n    case 4:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac();\n          if (offsetValue == 0) {\n            isValid = false;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (offsetValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,4);\n        if (((byte)(&DAT_200001f0)[pinNumber] != 0xff) &&\n           (offsetValue = extract_bit_from_data_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[pinNumber] * 3),\n           offsetValue != 0)) {\n          isValid = false;\n        }\n        if (isValid) {\n          process_servo_08000500(pinNumber,0xffffffff);\n          return;\n        }\n      }\n      break;\n    default:\n      execute_decoded_instructions_08002f14(&DAT_200003d4,\"Unknown pin mode\");\n      break;\n    case 6:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          offsetValue = 0;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac();\n          if (offsetValue == 0) {\n            offsetValue = 0;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (offsetValue == 1) {\n              offsetValue = 0;\n            }\n            else {\n              offsetValue = check_match_0800738a((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a69c);\n              if (offsetValue == 0) {\n                offsetValue = check_match_0800738a((int)(char)(&DAT_0800a908)[pinNumber],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        offsetValue = 0;\n      }\n      if (offsetValue != 0) {\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,6);\n        return;\n      }\n      break;\n    case 10:\n      break;\n    case 0xb:\n      if (pinNumber < 0x3c) {\n        if ((&DAT_0800a908)[pinNumber] == -1) {\n          isValid = false;\n        }\n        else {\n          offsetValue = check_valid_param_080036ac();\n          if (offsetValue == 0) {\n            isValid = false;\n          }\n          else {\n            offsetValue = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[pinNumber]);\n            if (offsetValue == 1) {\n              isValid = false;\n            }\n            else {\n              isValid = true;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if (isValid) {\n        initialize_and_process_memory_08008990(pinNumber,2);\n        update_value_if_needed_08002fa8(&DAT_200003d4,pinNumber,0xb);\n        store_value_at_index_08002fc2(&DAT_200003d4,pinNumber,1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005f8": "process_pin_080005f8",
                "param_1": "pinNumber",
                "param_2": "mode",
                "iVar1": "offsetValue",
                "cVar2": "flag",
                "bVar3": "isValid",
                "uVar4": "adjustedPinNumber"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08000a64",
                "FUN_08000aec"
            ],
            "called": [
                "FUN_080026f8",
                "FUN_08002fc2",
                "FUN_080036ac",
                "FUN_08002fa8",
                "FUN_080088e0",
                "FUN_08008a24",
                "FUN_080005e0",
                "FUN_08000588",
                "FUN_08000488",
                "FUN_08002f14",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a64": {
            "entrypoint": "0x08000a64",
            "current_name": "process_and_initialize_08000a64",
            "code": "\nvoid process_and_initialize_08000a64(void)\n\n{\n  int validity_check_result;\n  uint pin_number;\n  \n  for (pin_number = 0; pin_number < 0x3c; pin_number = pin_number + 1 & 0xff) {\n    if (pin_number < 0x3c) {\n      if ((&DAT_0800a908)[pin_number] == -1) {\n        validity_check_result = 0;\n      }\n      else {\n        validity_check_result = check_parameter_validity();\n        if (validity_check_result == 0) {\n          validity_check_result = 0;\n        }\n        else {\n          validity_check_result = check_parameter_validity((int)(char)(&DAT_0800a908)[pin_number]);\n          if (validity_check_result == 1) {\n            validity_check_result = 0;\n          }\n          else {\n            validity_check_result = check_pin_match((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a69c);\n            if (validity_check_result == 0) {\n              validity_check_result = check_pin_match((int)(char)(&DAT_0800a908)[pin_number],&DAT_0800a66c);\n            }\n          }\n        }\n      }\n    }\n    else {\n      validity_check_result = 0;\n    }\n    if (validity_check_result != 0) {\n      process_pin(pin_number,6);\n    }\n  }\n  DAT_20000170 = 1;\n  initialize_peripherals(&DAT_20000314);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000a64": "process_and_initialize_08000a64",
                "iVar1": "validity_check_result",
                "uVar2": "pin_number",
                "check_valid_param_080036ac": "check_parameter_validity",
                "check_match_0800738a": "check_pin_match",
                "process_pin_080005f8": "process_pin",
                "initialize_peripherals_08002a26": "initialize_peripherals"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_080005f8",
                "FUN_080036ac",
                "FUN_08002a26",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "initialize_pin_configuration_08000aec",
            "code": "\nvoid initialize_pin_configuration_08000aec(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  uint uVar3;\n  \n  DAT_20000171 = 1;\n  if (DAT_20000170 != '\\0') {\n    initialize_data();\n  }\n  for (uVar3 = 0; uVar3 < 5; uVar3 = uVar3 + 1 & 0xff) {\n    (&DAT_200001e8)[uVar3] = 0;\n    (&DAT_20000174)[uVar3] = 0;\n    (&DAT_20000180)[uVar3] = 0;\n  }\n  for (uVar3 = 0; uVar3 < 0x3c; uVar3 = uVar3 + 1 & 0xff) {\n    if ((uVar3 - 0x2e & 0xff) < 0xe) {\n      if (uVar3 < 0x3c) {\n        iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n      }\n      else {\n        iVar2 = -1;\n      }\n      iVar2 = check_valid_param(iVar2);\n      if (iVar2 == 0) {\n        bVar1 = false;\n      }\n      else {\n        if (uVar3 < 0x3c) {\n          iVar2 = (int)(char)(&DAT_0800a908)[uVar3];\n        }\n        else {\n          iVar2 = -1;\n        }\n        iVar2 = check_valid_param(iVar2);\n        if (iVar2 == 1) {\n          bVar1 = false;\n        }\n        else {\n          bVar1 = true;\n        }\n      }\n    }\n    else {\n      bVar1 = false;\n    }\n    if (bVar1) {\n      process_pin(uVar3,2);\n    }\n    else {\n      if ((((uVar3 < 0x3c) && ((&DAT_0800a908)[uVar3] != -1)) &&\n          (iVar2 = check_valid_param(), iVar2 != 0)) &&\n         (iVar2 = check_valid_param((int)(char)(&DAT_0800a908)[uVar3]), iVar2 != 1)) {\n        bVar1 = true;\n      }\n      if (bVar1) {\n        process_pin(uVar3,1);\n      }\n    }\n    (&DAT_200001f0)[uVar3] = 0xff;\n  }\n  DAT_20000114 = 0;\n  DAT_2000011c = 0;\n  DAT_200001ed = 0;\n  DAT_20000171 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "initialize_pin_configuration_08000aec",
                "initialize_data_080005e0": "initialize_data",
                "check_valid_param_080036ac": "check_valid_param",
                "process_pin_080005f8": "process_pin"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000be8": {
            "entrypoint": "0x08000be8",
            "current_name": "execute_and_decode_08000be8",
            "code": "\nvoid executeAndDecode_08000be8(int index,uint mask,int flag,undefined4 param)\n\n{\n  undefined1 *dataAddress1;\n  undefined1 *dataAddress2;\n  \n  dataAddress1 = &DAT_20000174;\n  dataAddress2 = (undefined1 *)((byte)(&DAT_20000174)[index] & mask);\n  if ((flag != 0) ||\n     (dataAddress1 = (undefined1 *)(uint)(byte)(&DAT_20000180)[index], dataAddress2 != dataAddress1)) {\n    execute_and_decode_08002efe(&DAT_200003d4,index,dataAddress2,dataAddress1,param);\n    (&DAT_20000180)[index] = (char)dataAddress2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000be8": "execute_and_decode_08000be8",
                "param_1": "index",
                "param_2": "mask",
                "param_3": "flag",
                "param_4": "param",
                "puVar1": "dataAddress1",
                "puVar2": "dataAddress2"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_08002efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ef8": {
            "entrypoint": "0x08000ef8",
            "current_name": "configure_permissions_08000ef8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001ade) */\n/* WARNING: Removing unreachable block (ram,0x08001a4a) */\n/* WARNING: Removing unreachable block (ram,0x080019b6) */\n/* WARNING: Removing unreachable block (ram,0x08001912) */\n/* WARNING: Removing unreachable block (ram,0x08001866) */\n/* WARNING: Removing unreachable block (ram,0x080017d2) */\n/* WARNING: Removing unreachable block (ram,0x0800173e) */\n/* WARNING: Removing unreachable block (ram,0x0800169a) */\n/* WARNING: Removing unreachable block (ram,0x080015ee) */\n/* WARNING: Removing unreachable block (ram,0x0800155a) */\n/* WARNING: Removing unreachable block (ram,0x08001490) */\n/* WARNING: Removing unreachable block (ram,0x080014a2) */\n/* WARNING: Removing unreachable block (ram,0x080014e4) */\n/* WARNING: Removing unreachable block (ram,0x080014b0) */\n/* WARNING: Removing unreachable block (ram,0x080014ba) */\n/* WARNING: Removing unreachable block (ram,0x080014e8) */\n/* WARNING: Removing unreachable block (ram,0x080014c2) */\n/* WARNING: Removing unreachable block (ram,0x080014b6) */\n/* WARNING: Removing unreachable block (ram,0x08001496) */\n/* WARNING: Removing unreachable block (ram,0x08001430) */\n/* WARNING: Removing unreachable block (ram,0x08001376) */\n/* WARNING: Removing unreachable block (ram,0x080012e2) */\n/* WARNING: Removing unreachable block (ram,0x0800124e) */\n/* WARNING: Removing unreachable block (ram,0x080011b8) */\n/* WARNING: Removing unreachable block (ram,0x08001100) */\n/* WARNING: Removing unreachable block (ram,0x0800106c) */\n/* WARNING: Removing unreachable block (ram,0x08000fd8) */\n/* WARNING: Removing unreachable block (ram,0x08000f42) */\n/* WARNING: Removing unreachable block (ram,0x08000f8e) */\n/* WARNING: Removing unreachable block (ram,0x08001022) */\n/* WARNING: Removing unreachable block (ram,0x080010b6) */\n/* WARNING: Removing unreachable block (ram,0x0800114a) */\n/* WARNING: Removing unreachable block (ram,0x08001204) */\n/* WARNING: Removing unreachable block (ram,0x08001298) */\n/* WARNING: Removing unreachable block (ram,0x0800132c) */\n/* WARNING: Removing unreachable block (ram,0x080013c0) */\n/* WARNING: Removing unreachable block (ram,0x0800147c) */\n/* WARNING: Removing unreachable block (ram,0x08001510) */\n/* WARNING: Removing unreachable block (ram,0x080015a4) */\n/* WARNING: Removing unreachable block (ram,0x08001638) */\n/* WARNING: Removing unreachable block (ram,0x080016f4) */\n/* WARNING: Removing unreachable block (ram,0x08001788) */\n/* WARNING: Removing unreachable block (ram,0x0800181c) */\n/* WARNING: Removing unreachable block (ram,0x080018b0) */\n/* WARNING: Removing unreachable block (ram,0x0800196c) */\n/* WARNING: Removing unreachable block (ram,0x08001a00) */\n/* WARNING: Removing unreachable block (ram,0x08001a94) */\n/* WARNING: Removing unreachable block (ram,0x08001b28) */\n/* WARNING: Removing unreachable block (ram,0x080014ca) */\n\nvoid configurePermissions_08000ef8(void)\n\n{\n  byte permissions;\n  int result;\n  bool isValidParam;\n  byte bits;\n  \n  permissions = DAT_20000174;\n  if (DAT_200001e8 != '\\0') {\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      bits = 0;\n    }\n    else {\n      result = check_valid_param_080036ac(3);\n      if (result == 1) {\n        bits = 0;\n      }\n      else if ((permissions & 1) == 0) {\n        bits = 0;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0);\n        if (result == 0) {\n          bits = 0;\n        }\n        else {\n          bits = 1;\n        }\n      }\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(2);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 2) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(1);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 2;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(10);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 4) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(2);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 4;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x13);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 8) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(3);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 8;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x15);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x10) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(4);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x10;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x14);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x20) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(5);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x20;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x1a);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x40) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(6);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x40;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(8);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x80) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(7);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x80;\n    }\n    execute_and_decode_08000be8(0,bits);\n  }\n  permissions = DAT_20000175;\n  if (DAT_200001e9 != '\\0') {\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      bits = 0;\n    }\n    else {\n      result = check_valid_param_080036ac(9);\n      if (result == 1) {\n        bits = 0;\n      }\n      else if ((permissions & 1) == 0) {\n        bits = 0;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(8);\n        if (result == 0) {\n          bits = 0;\n        }\n        else {\n          bits = 1;\n        }\n      }\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x27);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 2) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(9);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 2;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x16);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 4) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(10);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 4;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(7);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 8) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0xb);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 8;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(6);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x10) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0xc);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x10;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(5);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x20) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0xd);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x20;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x19);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x40) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0xe);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x40;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x18);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x80) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0xf);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x80;\n    }\n    execute_and_decode_08000be8(1,bits,0);\n  }\n  permissions = DAT_20000176;\n  if (DAT_200001ea != '\\0') {\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      bits = 0;\n    }\n    else {\n      result = check_valid_param_080036ac(0x2a);\n      if (result == 1) {\n        bits = 0;\n      }\n      else if ((permissions & 1) == 0) {\n        bits = 0;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x10);\n        if (result == 0) {\n          bits = 0;\n        }\n        else {\n          bits = 1;\n        }\n      }\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x2c);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 2) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x11);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 2;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0xd);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 8) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x13);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 8;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0xe);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x10) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x14);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x10;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0xf);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x20) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x15);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x20;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x17);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x40) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x16);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x40;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x2d);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x80) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x17);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x80;\n    }\n    execute_and_decode_08000be8(2,bits,0);\n  }\n  permissions = DAT_20000177;\n  if (DAT_200001eb != '\\0') {\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      bits = 0;\n    }\n    else {\n      result = check_valid_param_080036ac(0x2e);\n      if (result == 1) {\n        bits = 0;\n      }\n      else if ((permissions & 1) == 0) {\n        bits = 0;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x18);\n        if (result == 0) {\n          bits = 0;\n        }\n        else {\n          bits = 1;\n        }\n      }\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x2f);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 2) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x19);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 2;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x30);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 4) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x1a);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 4;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x31);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 8) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x1b);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 8;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x22);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x10) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x1c);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x10;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x23);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x20) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x1d);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x20;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x2b);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x40) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x1e);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x40;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x32);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x80) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x1f);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x80;\n    }\n    execute_and_decode_08000be8(3,bits,0);\n  }\n  permissions = DAT_20000178;\n  if (DAT_200001ec != '\\0') {\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      bits = 0;\n    }\n    else {\n      result = check_valid_param_080036ac(0x29);\n      if (result == 1) {\n        bits = 0;\n      }\n      else if ((permissions & 1) == 0) {\n        bits = 0;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x20);\n        if (result == 0) {\n          bits = 0;\n        }\n        else {\n          bits = 1;\n        }\n      }\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x28);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 2) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x21);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 2;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x26);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 4) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x22);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 4;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x25);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 8) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x23);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 8;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0xc);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x10) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x24);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x10;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0xb);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x20) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x25);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x20;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x1c);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x40) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x26);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x40;\n    }\n    result = check_valid_param_080036ac();\n    if (result == 0) {\n      isValidParam = false;\n    }\n    else {\n      result = check_valid_param_080036ac(0x1b);\n      if (result == 1) {\n        isValidParam = false;\n      }\n      else if ((permissions & 0x80) == 0) {\n        isValidParam = false;\n      }\n      else {\n        result = check_and_return_bit_08008a6c(0x27);\n        if (result == 0) {\n          isValidParam = false;\n        }\n        else {\n          isValidParam = true;\n        }\n      }\n    }\n    if (isValidParam) {\n      bits = bits | 0x80;\n    }\n    execute_and_decode_08000be8(4,bits,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ef8": "configure_permissions_08000ef8",
                "bVar1": "permissions",
                "iVar2": "result",
                "bVar3": "isValidParam",
                "bVar4": "bits"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_080036ac",
                "FUN_08008a6c",
                "FUN_08000be8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_gateway_08001b48",
            "code": "\nvoid initializeGateway_08001b48(void)\n\n{\n  extractFileNameFromPath(&DAT_200003d4,\"/home/bo/p2im/p2im-real_firmware_scratch/Gateway/StandardFirmata.ino\",\n               2,5);\n  updateData(&DAT_200003d4,0xe0,0x8000215);\n  updateData(&DAT_200003d4,0x90,&LAB_080002ec_1);\n  updateData(&DAT_200003d4,0xc0,0x8000489);\n  updateData(&DAT_200003d4,0xd0,&LAB_08000c18_1);\n  updateData(&DAT_200003d4,0xf4,0x80005f9);\n  updateData(&DAT_200003d4,0xf5,&LAB_080001a8_1);\n  initializeData(&DAT_200003d4,0xf0,0x8001cd1);\n  update_data_08002f84(&DAT_200003d4,0xff,0x8000aed);\n  initializeAndUpdateSerialCommunication(&DAT_200003d4,0xe100);\n  initializePinConfiguration();\n  executeInterrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_gateway_08001b48",
                "extract_file_name_from_path_08002e44": "extractFileNameFromPath",
                "update_data_08002f2c": "updateData",
                "initialize_data_08002f94": "initializeData",
                "initialize_and_update_serial_communication_08003048": "initializeAndUpdateSerialCommunication",
                "initialize_pin_configuration_08000aec": "initializePinConfiguration",
                "execute_interrupt_0800018c": "executeInterrupt"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08003048",
                "FUN_08000aec",
                "FUN_08002f2c",
                "FUN_08002e44",
                "FUN_0800018c",
                "FUN_08002f94",
                "FUN_08002f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bf8": {
            "entrypoint": "0x08001bf8",
            "current_name": "copy_data_08001bf8",
            "code": "\nvoid copyData_08001bf8(undefined4 targetAddress,undefined4 sourceAddress,undefined4 length,undefined4 offset)\n\n{\n  copy_data_0800288c(&DAT_20000314,targetAddress,length,offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001bf8": "copy_data_08001bf8",
                "param_1": "targetAddress",
                "param_2": "sourceAddress",
                "param_3": "length",
                "param_4": "offset"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_0800288c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c08": {
            "entrypoint": "0x08001c08",
            "current_name": "read_next_byte_from_data_08001c08",
            "code": "\nundefined readNextByteFromData_08001c08(void)\n\n{\n  undefined nextByte;\n  \n  nextByte = read_next_byte_08002720(&DAT_20000314);\n  return nextByte;\n}\n\n",
            "renaming": {
                "FUN_08001c08": "read_next_byte_from_data_08001c08",
                "uVar1": "nextByte"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002720"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c18": {
            "entrypoint": "0x08001c18",
            "current_name": "process_received_data_08001c18",
            "code": "\nvoid processReceivedData_08001c18(undefined4 dataFormat,uint dataLength,int expectedLength,undefined4 checkSum)\n\n{\n  undefined nextByte;\n  int difference;\n  int nextDifference;\n  bool isDataRemaining;\n  \n  if (dataLength == 0xffffffff) {\n    dataLength = 0;\n  }\n  else {\n    initialize_data_08002a30(&DAT_20000314,dataFormat);\n    copy_data_08001bf8(dataLength & 0xff);\n    check_data_validity_08002a58(&DAT_20000314,checkSum);\n  }\n  initialize_data_processing_08002c14(&DAT_20000314,dataFormat,expectedLength);\n  difference = calculate_difference_0800270c(&DAT_20000314);\n  if (expectedLength < difference) {\n    execute_decoded_instructions_08002f14(&DAT_200003d4,\"I2C: Too many bytes received\");\n  }\n  else {\n    difference = calculate_difference_0800270c(&DAT_20000314);\n    if (difference < expectedLength) {\n      execute_decoded_instructions_08002f14(&DAT_200003d4,\"I2C: Too few bytes received\");\n    }\n  }\n  DAT_20000130 = (undefined)dataFormat;\n  DAT_20000131 = (undefined)dataLength;\n  difference = 0;\n  while( true ) {\n    if (difference < expectedLength) {\n      nextDifference = calculate_difference_0800270c(&DAT_20000314);\n      if (nextDifference == 0) {\n        isDataRemaining = false;\n      }\n      else {\n        isDataRemaining = true;\n      }\n    }\n    else {\n      isDataRemaining = false;\n    }\n    if (!isDataRemaining) break;\n    nextByte = read_next_byte_from_data_08001c08();\n    (&DAT_20000132)[difference] = nextByte;\n    difference = difference + 1;\n  }\n  execute_decoded_instructions_08002f0a(&DAT_200003d4,0x77,expectedLength + 2U & 0xff,&DAT_20000130);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c18": "process_received_data_08001c18",
                "param_1": "dataFormat",
                "param_2": "dataLength",
                "param_3": "expectedLength",
                "param_4": "checkSum",
                "uVar1": "nextByte",
                "iVar2": "difference",
                "iVar3": "nextDifference",
                "bVar4": "isDataRemaining"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800270c",
                "FUN_08002c14",
                "FUN_08002a58",
                "FUN_08002f0a",
                "FUN_08001c08",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_08001bf8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "process_command_08001cd0",
            "code": "\nvoid processCommand_08001cd0(undefined4 command,int length,byte *data,undefined4 param)\n\n{\n  byte byteVar1;\n  byte byteVar2;\n  byte byteVar3;\n  undefined4 uintVar1;\n  byte byteVar4;\n  char charVar1;\n  int intVar1;\n  int intVar2;\n  uint uintVar2;\n  uint uintVar3;\n  int intVar3;\n  bool boolVar1;\n  \n  switch(command) {\n  case 0x69:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6a);\n    for (uintVar2 = 0; uintVar2 < 0x3c; uintVar2 = uintVar2 + 1 & 0xff) {\n      uintVar3 = uintVar2 - 0x2e & 0xff;\n      if (uintVar3 < 0xe) {\n        if (uintVar2 < 0x3c) {\n          intVar1 = (int)(char)(&DAT_0800a908)[uintVar2];\n        }\n        else {\n          intVar1 = -1;\n        }\n        intVar1 = check_valid_param_080036ac(intVar1);\n        if (intVar1 == 0) {\n          uintVar3 = 0x7f;\n        }\n        else {\n          if (uintVar2 < 0x3c) {\n            intVar1 = (int)(char)(&DAT_0800a908)[uintVar2];\n          }\n          else {\n            intVar1 = -1;\n          }\n          intVar1 = check_valid_param_080036ac(intVar1);\n          if (intVar1 == 1) {\n            uintVar3 = 0x7f;\n          }\n        }\n      }\n      else {\n        uintVar3 = 0x7f;\n      }\n      execute_function_08002f1e(&DAT_200003d4,uintVar3);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    break;\n  case 0x6b:\n    execute_function_08002f1e(&DAT_200003d4,0xf0);\n    execute_function_08002f1e(&DAT_200003d4,0x6c);\n    for (uintVar2 = 0; uintVar2 < 0x3c; uintVar2 = uintVar2 + 1 & 0xff) {\n      if (uintVar2 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar2] == -1) {\n          boolVar1 = false;\n        }\n        else {\n          intVar1 = check_valid_param_080036ac();\n          if (intVar1 == 0) {\n            boolVar1 = false;\n          }\n          else {\n            intVar1 = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[uintVar2]);\n            if (intVar1 == 1) {\n              boolVar1 = false;\n            }\n            else {\n              boolVar1 = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar1 = false;\n      }\n      if (boolVar1) {\n        execute_function_08002f1e(&DAT_200003d4,0);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,0xb);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      if ((uintVar2 - 0x2e & 0xff) < 0xe) {\n        if (uintVar2 < 0x3c) {\n          intVar1 = (int)(char)(&DAT_0800a908)[uintVar2];\n        }\n        else {\n          intVar1 = -1;\n        }\n        intVar1 = check_valid_param_080036ac(intVar1);\n        if (intVar1 == 0) {\n          boolVar1 = false;\n        }\n        else {\n          if (uintVar2 < 0x3c) {\n            intVar1 = (int)(char)(&DAT_0800a908)[uintVar2];\n          }\n          else {\n            intVar1 = -1;\n          }\n          intVar1 = check_valid_param_080036ac(intVar1);\n          if (intVar1 == 1) {\n            boolVar1 = false;\n          }\n          else {\n            boolVar1 = true;\n          }\n        }\n      }\n      else {\n        boolVar1 = false;\n      }\n      if (boolVar1) {\n        execute_function_08002f1e(&DAT_200003d4,2);\n        execute_function_08002f1e(&DAT_200003d4,10);\n      }\n      if (uintVar2 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar2] == -1) {\n          intVar1 = 0;\n        }\n        else {\n          intVar1 = check_valid_param_080036ac();\n          if (intVar1 == 0) {\n            intVar1 = 0;\n          }\n          else {\n            intVar1 = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[uintVar2]);\n            if (intVar1 == 1) {\n              intVar1 = 0;\n            }\n            else {\n              intVar1 = check_match_0800738a((int)(char)(&DAT_0800a908)[uintVar2],&DAT_0800a6cc);\n            }\n          }\n        }\n      }\n      else {\n        intVar1 = 0;\n      }\n      if (intVar1 != 0) {\n        execute_function_08002f1e(&DAT_200003d4,3);\n        execute_function_08002f1e(&DAT_200003d4,8);\n      }\n      if (uintVar2 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar2] == -1) {\n          boolVar1 = false;\n        }\n        else {\n          intVar1 = check_valid_param_080036ac();\n          if (intVar1 == 0) {\n            boolVar1 = false;\n          }\n          else {\n            intVar1 = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[uintVar2]);\n            if (intVar1 == 1) {\n              boolVar1 = false;\n            }\n            else {\n              boolVar1 = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar1 = false;\n      }\n      if (boolVar1) {\n        execute_function_08002f1e(&DAT_200003d4,4);\n        execute_function_08002f1e(&DAT_200003d4,0xe);\n      }\n      if (uintVar2 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar2] == -1) {\n          intVar1 = 0;\n        }\n        else {\n          intVar1 = check_valid_param_080036ac();\n          if (intVar1 == 0) {\n            intVar1 = 0;\n          }\n          else {\n            intVar1 = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[uintVar2]);\n            if (intVar1 == 1) {\n              intVar1 = 0;\n            }\n            else {\n              intVar1 = check_match_0800738a((int)(char)(&DAT_0800a908)[uintVar2],&DAT_0800a69c);\n              if (intVar1 == 0) {\n                intVar1 = check_match_0800738a((int)(char)(&DAT_0800a908)[uintVar2],&DAT_0800a66c);\n              }\n            }\n          }\n        }\n      }\n      else {\n        intVar1 = 0;\n      }\n      if (intVar1 != 0) {\n        execute_function_08002f1e(&DAT_200003d4,6);\n        execute_function_08002f1e(&DAT_200003d4,1);\n      }\n      execute_function_08002f1e(&DAT_200003d4,0x7f);\n    }\n    execute_function_08002f1e(&DAT_200003d4,0xf7);\n    return;\n  case 0x6d:\n    if (length != 0) {\n      byteVar1 = *data;\n      execute_function_08002f1e(&DAT_200003d4,0xf0);\n      execute_function_08002f1e(&DAT_200003d4,0x6e);\n      execute_function_08002f1e(&DAT_200003d4,byteVar1);\n      if (byteVar1 < 0x3c) {\n        uintVar1 = get_offset_value_08002fa0(&DAT_200003d4,byteVar1);\n        execute_function_08002f1e(&DAT_200003d4,uintVar1);\n        uintVar2 = get_value_at_index_08002fba(&DAT_200003d4,byteVar1);\n        execute_function_08002f1e(&DAT_200003d4,uintVar2 & 0x7f);\n        uintVar2 = get_value_at_index_08002fba(&DAT_200003d4,byteVar1);\n        if ((uintVar2 & 0xff80) != 0) {\n          intVar1 = get_value_at_index_08002fba(&DAT_200003d4,byteVar1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(intVar1 << 0x12) >> 0x19);\n        }\n        uintVar2 = get_value_at_index_08002fba(&DAT_200003d4,byteVar1);\n        if ((uintVar2 & 0xc000) != 0) {\n          intVar1 = get_value_at_index_08002fba(&DAT_200003d4,byteVar1);\n          execute_function_08002f1e(&DAT_200003d4,(uint)(intVar1 << 0xb) >> 0x19);\n        }\n      }\n      execute_function_08002f1e(&DAT_200003d4,0xf7);\n      return;\n    }\n    break;\n  case 0x6f:\n    if (1 < length) {\n      uintVar2 = (uint)data[1];\n      if (2 < length) {\n        uintVar2 = uintVar2 | (uint)data[2] << 7;\n      }\n      if (3 < length) {\n        uintVar2 = uintVar2 | (uint)data[3] << 0xe;\n      }\n      process_data_08000214(*data,uintVar2);\n      return;\n    }\n    break;\n  case 0x70:\n    if (4 < length) {\n      uintVar2 = (uint)*data;\n      byteVar1 = data[1];\n      byteVar4 = data[2];\n      byteVar2 = data[3];\n      byteVar3 = data[4];\n      if (uintVar2 < 0x3c) {\n        if ((&DAT_0800a908)[uintVar2] == -1) {\n          boolVar1 = false;\n        }\n        else {\n          intVar1 = check_valid_param_080036ac();\n          if (intVar1 == 0) {\n            boolVar1 = false;\n          }\n          else {\n            intVar1 = check_valid_param_080036ac((int)(char)(&DAT_0800a908)[uintVar2]);\n            if (intVar1 == 1) {\n              boolVar1 = false;\n            }\n            else {\n              boolVar1 = true;\n            }\n          }\n        }\n      }\n      else {\n        boolVar1 = false;\n      }\n      if (boolVar1) {\n        if ((byte)(&DAT_200001f0)[uintVar2] < 0xc) {\n          intVar1 = extract_bit_from_data_080026f8(&DAT_2000022c + (uint)(byte)(&DAT_200001f0)[uintVar2] * 3);\n        }\n        else {\n          intVar1 = 0;\n        }\n        if (intVar1 != 0) {\n          initialize_data_08000588(uintVar2);\n        }\n        process_servo_08000500(uintVar2,(uint)byteVar1 + (uint)byteVar4 * 0x80,(uint)byteVar2 + (uint)byteVar3 * 0x80);\n        process_pin_080005f8(uintVar2,4);\n        return;\n      }\n    }\n    break;\n  case 0x76:\n    byteVar1 = data[1];\n    byteVar4 = byteVar1 & 0x18;\n    if ((byteVar1 & 0x20) != 0) {\n      execute_decoded_instructions_08002f14(&DAT_200003d4,\"10-bit addressing not supported\",byteVar4,byteVar1,param);\n      return;\n    }\n    byteVar2 = *data;\n    boolVar1 = (byteVar1 & 0x40) == 0;\n    if (byteVar4 < 0x19) {\n      switch(byteVar4) {\n      case 0:\n        initialize_data_08002a30(&DAT_20000314,byteVar2);\n        for (uintVar2 = 2; (int)uintVar2 < length; uintVar2 = uintVar2 + 2 & 0xff) {\n          copy_data_08001bf8(data[uintVar2 + 1] * -0x80 + data[uintVar2]);\n        }\n        check_validity_08002ac0(&DAT_20000314);\n        return;\n      case 8:\n        if (length == 6) {\n          intVar1 = (uint)data[2] + (uint)data[3] * 0x80;\n          charVar1 = data[4] + data[5] * -0x80;\n        }\n        else {\n          charVar1 = data[2] + data[3] * -0x80;\n          intVar1 = -1;\n        }\n        process_received_data_08001c18(byteVar2,intVar1,charVar1);\n        return;\n      case 0x10:\n        if (DAT_20000004 + 1 < 8) {\n          if (length == 6) {\n            intVar1 = (uint)data[2] + (uint)data[3] * 0x80;\n            charVar1 = data[4] + data[5] * -0x80;\n          }\n          else {\n            charVar1 = data[2] + data[3] * -0x80;\n            intVar1 = -1;\n          }\n          DAT_20000004 = DAT_20000004 + '\\x01';\n          intVar2 = (int)DAT_20000004;\n          intVar3 = intVar2 * 0xc;\n          (&DAT_20000188)[intVar3] = byteVar2;\n          (&DAT_2000018c)[intVar2 * 3] = intVar1;\n          (&DAT_20000190)[intVar3] = charVar1;\n          (&DAT_20000191)[intVar3] = boolVar1;\n          return;\n        }\n        execute_decoded_instructions_08002f14(&DAT_200003d4,\"too many queries\",(int)DAT_20000004,boolVar1,param);\n        return;\n      case 0x18:\n        if (DAT_20000004 < 1) {\n          DAT_20000004 = 0xff;\n          return;\n        }\n      }\n      for (uintVar2 = 0; intVar1 = DAT_20000004 + 1, (int)uintVar2 < intVar1; uintVar2 = uintVar2 + 1 & 0xff) {\n        if (byteVar2 == (&DAT_20000188)[uintVar2 * 0xc]) goto LAB_08001e66;\n      }\n      uintVar2 = 0;\nLAB_08001e66:\n      for (; (int)uintVar2 < intVar1; uintVar2 = uintVar2 + 1 & 0xff) {\n        if (uintVar2 < 8) {\n          intVar2 = (uintVar2 + 1) * 0xc;\n          intVar3 = uintVar2 * 0xc;\n          (&DAT_20000188)[intVar3] = (&DAT_20000188)[intVar2];\n          (&DAT_2000018c)[uintVar2 * 3] = (&DAT_2000018c)[(uintVar2 + 1) * 3];\n          (&DAT_20000190)[intVar3] = (&DAT_20000190)[intVar2];\n          (&DAT_20000191)[intVar3] = (&DAT_20000191)[intVar2];\n        }\n      }\n      DAT_20000004 = DAT_20000004 + -1;\n      return;\n    }\n    break;\n  case 0x78:\n    intVar1 = (uint)*data + (uint)data[1] * 0x80;\n    if ((1 < length) && (intVar1 != 0)) {\n      DAT_2000012c = intVar1;\n    }\n    if (DAT_20000170 == '\\0') {\n      process_and_initialize_08000a64();\n      return;\n    }\n    break;\n  case 0x7a:\n    if ((1 < length) &&\n       (DAT_20000008 = (uint)*data + (uint)data[1] * 0x80, DAT_20000008 == 0)) {\n      DAT_20000008 = 1;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "process_command_08001cd0",
                "param_1": "command",
                "param_2": "length",
                "param_3": "data",
                "param_4": "param",
                "bVar1": "byteVar1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "uVar4": "uintVar1",
                "bVar5": "byteVar4",
                "cVar6": "charVar1",
                "iVar7": "intVar1",
                "iVar8": "intVar2",
                "uVar9": "uintVar2",
                "uVar10": "uintVar3",
                "iVar11": "intVar3",
                "bVar12": "boolVar1"
            },
            "calling": [],
            "called": [
                "FUN_080026f8",
                "FUN_080036ac",
                "FUN_080005f8",
                "FUN_08002ac0",
                "FUN_08000a64",
                "FUN_08000588",
                "FUN_08001bf8",
                "FUN_08001c18",
                "FUN_08002f1e",
                "FUN_08002fba",
                "FUN_08002f14",
                "FUN_08002a30",
                "FUN_0800738a",
                "FUN_08000500",
                "FUN_08002fa0",
                "FUN_08000214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022f8": {
            "entrypoint": "0x080022f8",
            "current_name": "process_function_080022f8",
            "code": "\nvoid processFunction_080022f8(void)\n\n{\n  bool isValid;\n  int result;\n  undefined4 configuredValue;\n  uint counter1;\n  uint counter2;\n  \n  configure_permissions_08000ef8();\n  while (result = execute_function_08002ec4(&DAT_200003d4), result != 0) {\n    process_data_08002ed2(&DAT_200003d4);\n  }\n  DAT_20000118 = initialize_data_08008abc();\n  if (DAT_20000008 < (uint)(DAT_20000118 - DAT_2000017c)) {\n    DAT_2000017c = DAT_2000017c + DAT_20000008;\n    for (counter1 = 0; counter1 < 0x3c; counter1 = counter1 + 1 & 0xff) {\n      counter2 = counter1 - 0x2e & 0xff;\n      if (counter2 < 0xe) {\n        if (counter1 < 0x3c) {\n          result = (int)(char)(&DAT_0800a908)[counter1];\n        }\n        else {\n          result = -1;\n        }\n        result = check_valid_param_080036ac(result);\n        if (result == 0) {\n          isValid = false;\n        }\n        else {\n          if (counter1 < 0x3c) {\n            result = (int)(char)(&DAT_0800a908)[counter1];\n          }\n          else {\n            result = -1;\n          }\n          result = check_valid_param_080036ac(result);\n          if (result == 1) {\n            isValid = false;\n          }\n          else {\n            result = get_offset_value_08002fa0(&DAT_200003d4,counter1);\n            if (result == 2) {\n              isValid = true;\n            }\n            else {\n              isValid = false;\n            }\n          }\n        }\n      }\n      else {\n        isValid = false;\n      }\n      if ((isValid) && ((DAT_20000114 >> counter2 & 1U) != 0)) {\n        configuredValue = configure_and_validate_data_08008880(counter2);\n        execute_and_decode_08002ef2(&DAT_200003d4,counter2,configuredValue);\n      }\n    }\n    if (-1 < DAT_20000004) {\n      for (counter1 = 0; (int)counter1 < DAT_20000004 + 1; counter1 = counter1 + 1 & 0xff) {\n        result = counter1 * 0xc;\n        process_received_data_08001c18((&DAT_20000188)[result],(&DAT_2000018c)[counter1 * 3],(&DAT_20000190)[result],\n                     (&DAT_20000191)[result]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022f8": "process_function_080022f8",
                "iVar2": "result",
                "bVar1": "isValid",
                "uVar3": "configuredValue",
                "uVar4": "counter1",
                "uVar5": "counter2"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008880",
                "FUN_08002ef2",
                "FUN_08001c18",
                "FUN_080036ac",
                "FUN_08002ec4",
                "FUN_08002ed2",
                "FUN_08008abc",
                "FUN_08000ef8",
                "FUN_08002fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002400": {
            "entrypoint": "0x08002400",
            "current_name": "check_if_bit_set_08002400",
            "code": "\nundefined4 check_if_bit_set_08002400(int value)\n\n{\n  uint counter;\n  \n  counter = 0;\n  while( true ) {\n    if (0xb < counter) {\n      return 0;\n    }\n    if (((&DAT_20000258)[(value * 0xc + counter) * 8] & 0x40) != 0) break;\n    counter = counter + 1 & 0xff;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002400": "check_if_bit_set_08002400",
                "param_1": "value",
                "uVar1": "counter"
            },
            "calling": [
                "FUN_08002644",
                "FUN_080025ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800242c": {
            "entrypoint": "0x0800242c",
            "current_name": "initialize_data_and_update_0800242c",
            "code": "\nvoid initializeDataAndUpdate_0800242c(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initializeAndUpdateData(param1,60000,0x5dc,&label_08002444_1,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800242c": "initialize_data_and_update_0800242c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_and_update_data_08007648": "initializeAndUpdateData",
                "LAB_08002444_1": "label_08002444_1"
            },
            "calling": [
                "FUN_080025ac"
            ],
            "called": [
                "FUN_08007648"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002578": {
            "entrypoint": "0x08002578",
            "current_name": "initialize_data_08002578",
            "code": "\nvoid initialize_data_08002578(void)\n\n{\n  initialize_data_08002578_080076e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002578": "initialize_data_08002578"
            },
            "calling": [
                "FUN_08002644"
            ],
            "called": [
                "FUN_080076e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "initialize_data_08002580",
            "code": "\nvoid initializeData_08002580(byte *outputBuffer)\n\n{\n  char nextValue;\n  uint dataLength;\n  \n  dataLength = (uint)DAT_20000250;\n  if (0xb < dataLength) {\n    *outputBuffer = 0xff;\n    return;\n  }\n  nextValue = DAT_20000250 + 1;\n  *outputBuffer = DAT_20000250;\n  DAT_20000250 = nextValue;\n  *(undefined4 *)(&DAT_2000025c + dataLength * 8) = 0x5dc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "initialize_data_08002580",
                "param_1": "outputBuffer",
                "cVar1": "nextValue",
                "uVar2": "dataLength"
            },
            "calling": [
                "FUN_080004d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ac": {
            "entrypoint": "0x080025ac",
            "current_name": "process_and_initialize_memory_080025ac",
            "code": "\nbyte processAndInitializeMemory_080025ac(byte *data,uint value,int offset1,int offset2)\n\n{\n  uint maskedValue;\n  uint index;\n  uint dividedValue;\n  int temp;\n  \n  if (*data < 0xc) {\n    initializeAndProcessMemory(value,1,offset1,*data,offset2);\n    index = (uint)*data;\n    maskedValue = (byte)(&DAT_20000258)[index * 8] & 0xffffffc0 | value & 0x3f;\n    (&DAT_20000258)[index * 8] = (char)maskedValue;\n    temp = -offset1 + 0x220;\n    if (temp < 0) {\n      temp = -offset1 + 0x223;\n    }\n    data[1] = (byte)((uint)(temp << 0x16) >> 0x18);\n    temp = -offset2 + 0x960;\n    if (temp < 0) {\n      temp = -offset2 + 0x963;\n    }\n    data[2] = (byte)((uint)(temp << 0x16) >> 0x18);\n    dividedValue = *data / 0xc;\n    temp = checkIfBitSet(dividedValue,maskedValue,index,(uint)*data * -0x55555555);\n    if (temp == 0) {\n      DAT_200002fc = (undefined)dividedValue;\n      initializeDataAndUpdate();\n    }\n    (&DAT_20000258)[(uint)*data * 8] = (&DAT_20000258)[(uint)*data * 8] | 0x40;\n  }\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_080025ac": "process_and_initialize_memory_080025ac",
                "param_1": "data",
                "param_2": "value",
                "param_3": "offset1",
                "param_4": "offset2",
                "uVar1": "maskedValue",
                "uVar2": "index",
                "uVar3": "dividedValue",
                "iVar4": "temp",
                "initialize_and_process_memory_08008990": "initializeAndProcessMemory",
                "check_if_bit_set_08002400": "checkIfBitSet",
                "initialize_data_and_update_0800242c": "initializeDataAndUpdate"
            },
            "calling": [
                "FUN_08002634",
                "FUN_08000500"
            ],
            "called": [
                "FUN_08002400",
                "FUN_0800242c",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002634": {
            "entrypoint": "0x08002634",
            "current_name": "initialize_memory_08002634",
            "code": "\nvoid initialize_memory_08002634(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  process_and_initialize_memory_08002634_080025ac(input_param_1,input_param_2,0x220,0x960,input_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002634": "initialize_memory_08002634",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_08000500"
            ],
            "called": [
                "FUN_080025ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002644": {
            "entrypoint": "0x08002644",
            "current_name": "initialize_data_08002644",
            "code": "\nvoid initialize_data_08002644(byte *data,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  byte current_byte;\n  uint first_byte;\n  int check_result;\n  \n  first_byte = (uint)*data;\n  current_byte = (&DAT_20000258)[first_byte * 8];\n  (&DAT_20000258)[first_byte * 8] = current_byte & 0xbf;\n  check_result = check_if_bit_set_08002400(first_byte / 0xc,param_2,current_byte & 0xbf,first_byte * -0x55555555,param_4);\n  if (check_result == 0) {\n    initialize_data_08002644_08002578(&DAT_200002b8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002644": "initialize_data_08002644",
                "param_1": "data",
                "bVar1": "current_byte",
                "uVar2": "first_byte",
                "iVar3": "check_result"
            },
            "calling": [
                "FUN_08000588"
            ],
            "called": [
                "FUN_08002400",
                "FUN_08002578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800267c": {
            "entrypoint": "0x0800267c",
            "current_name": "set_array_value_0800267c",
            "code": "\nvoid setArrayValue_0800267c(byte *array,int value)\n\n{\n  int index;\n  \n  if (*array < 0xc) {\n    index = (0x88 - (char)array[1]) * 4;\n    if ((index - value == 0 || index < value) &&\n       (index = (600 - (char)array[2]) * 4,\n       value == index || value + (600 - (char)array[2]) * -4 < 0 != SBORROW4(value,index)))\n    {\n      index = value;\n    }\n    *(int *)(&DAT_2000025c + (uint)*array * 8) = index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800267c": "set_array_value_0800267c",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026b0": {
            "entrypoint": "0x080026b0",
            "current_name": "interpolation_and_value_assignment_080026b0",
            "code": "\nvoid interpolationAndValueAssignment_080026b0(int arg1,int arg2)\n\n{\n  if (arg2 < 0x220) {\n    if (arg2 < 0) {\n      arg2 = 0;\n    }\n    else if (0xb4 < arg2) {\n      arg2 = 0xb4;\n    }\n    arg2 = interpolationCalculation(arg2,0,0xb4,(0x88 - *(char *)(arg1 + 1)) * 4,\n                           (600 - *(char *)(arg1 + 2)) * 4);\n  }\n  arrayValueAssignment(arg1,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026b0": "interpolation_and_value_assignment_080026b0",
                "param_1": "arg1",
                "param_2": "arg2",
                "calculate_interpolation_08008ef4": "interpolationCalculation",
                "set_array_value_0800267c": "arrayValueAssignment"
            },
            "calling": [
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08008ef4",
                "FUN_0800267c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026f8": {
            "entrypoint": "0x080026f8",
            "current_name": "extract_bit_from_data_080026f8",
            "code": "\nuint extractBitFromData_080026f8(byte *data)\n\n{\n  return ((uint)(byte)(&DAT_20000258)[(uint)*data * 8] << 0x19) >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_080026f8": "extract_bit_from_data_080026f8",
                "param_1": "data"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800270c": {
            "entrypoint": "0x0800270c",
            "current_name": "calculate_difference_0800270c",
            "code": "\nint calculate_difference_0800270c(void)\n\n{\n  return (uint)DAT_200003b7 - (uint)DAT_200003b5;\n}\n\n",
            "renaming": {
                "FUN_0800270c": "calculate_difference_0800270c"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002720": {
            "entrypoint": "0x08002720",
            "current_name": "read_next_byte_08002720",
            "code": "\nuint read_next_byte_08002720(void)\n\n{\n  uint index;\n  \n  index = (uint)DAT_200003b5;\n  if (index < DAT_200003b7) {\n    DAT_200003b5 = DAT_200003b5 + 1;\n    return (uint)*(byte *)(DAT_200003c8 + index);\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08002720": "read_next_byte_08002720",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08001c08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f0": {
            "entrypoint": "0x080027f0",
            "current_name": "copy_data_and_update_080027f0",
            "code": "\nuint copy_data_and_update_080027f0(int source_ptr,undefined4 destination_ptr,uint data_length)\n\n{\n  int copy_result;\n  uint updated_length;\n  \n  if (DAT_200003b4 == '\\0') {\n    copy_result = copy_data_to_destination_08007ede(source_ptr + 0x14,destination_ptr,data_length & 0xffff);\n    if (copy_result == 0) {\n      return data_length;\n    }\n    return 0;\n  }\n  updated_length = DAT_200003b8 + data_length;\n  if (DAT_200003c5 < updated_length) {\n    if (updated_length < 0x20) {\n      updated_length = 0x20;\n    }\n    DAT_200003cc = allocate_and_copy_data_08009908(DAT_200003cc,updated_length);\n    if (DAT_200003cc == 0) {\n      DAT_200003c5 = 0;\n    }\n    else {\n      DAT_200003c5 = (byte)updated_length;\n    }\n  }\n  if (DAT_200003cc == 0) {\n    *(undefined4 *)(source_ptr + 4) = 1;\n    return 0;\n  }\n  copy_data_080091b0((uint)DAT_200003b6 + DAT_200003cc,destination_ptr,data_length);\n  DAT_200003b6 = DAT_200003b6 + (char)data_length;\n  DAT_200003b8 = DAT_200003b6;\n  return data_length;\n}\n\n",
            "renaming": {
                "FUN_080027f0": "copy_data_and_update_080027f0",
                "param_1": "source_ptr",
                "param_2": "destination_ptr",
                "param_3": "data_length",
                "iVar1": "copy_result",
                "uVar2": "updated_length"
            },
            "calling": [],
            "called": [
                "FUN_080091b0",
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800288c": {
            "entrypoint": "0x0800288c",
            "current_name": "copy_data_0800288c",
            "code": "\nundefined4 copyData_0800288c(int sourceAddress,undefined data)\n\n{\n  undefined4 result;\n  int copyResult;\n  uint newDataSize;\n  undefined localData;\n  \n  localData = data;\n  if (DAT_200003b4 == '\\0') {\n    copyResult = copy_data_to_destination_08007ede(sourceAddress + 0x14,&localData,1);\n    if (copyResult == 0) {\n      result = 1;\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    newDataSize = DAT_200003b8 + 1;\n    if (DAT_200003c5 < newDataSize) {\n      if (newDataSize < 0x20) {\n        newDataSize = 0x20;\n      }\n      DAT_200003cc = allocate_and_copy_data_08009908(DAT_200003cc,newDataSize);\n      if (DAT_200003cc == 0) {\n        DAT_200003c5 = 0;\n      }\n      else {\n        DAT_200003c5 = (byte)newDataSize;\n      }\n    }\n    if (DAT_200003cc == 0) {\n      *(undefined4 *)(sourceAddress + 4) = 1;\n      result = 0;\n    }\n    else {\n      *(undefined *)(DAT_200003cc + (uint)DAT_200003b6) = localData;\n      DAT_200003b6 = DAT_200003b6 + 1;\n      result = 1;\n      DAT_200003b8 = DAT_200003b6;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800288c": "copy_data_0800288c",
                "param_1": "sourceAddress",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "copyResult",
                "uVar3": "newDataSize",
                "local_11": "localData"
            },
            "calling": [
                "FUN_08001bf8"
            ],
            "called": [
                "FUN_08009908",
                "FUN_08007ede"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800291c": {
            "entrypoint": "0x0800291c",
            "current_name": "initialize_parameters_0800291c",
            "code": "\nvoid initializeParameters_0800291c(undefined4 *parameters)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  *parameters = &PTR_copy_data_0800288c_1_0800a5a0;\n  *(undefined *)(parameters + 0x1b) = 0x19;\n  *(undefined *)((int)parameters + 0x6d) = 0x18;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800291c": "initialize_parameters_0800291c",
                "param_1": "parameters"
            },
            "calling": [
                "FUN_08002948"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002948": {
            "entrypoint": "0x08002948",
            "current_name": "initialize_if_parameter_is_1_08002948",
            "code": "\nvoid initialize_if_parameter_is_1_08002948(int input_param,int flag_param)\n\n{\n  if (input_param != 1) {\n    return;\n  }\n  if (flag_param == 0xffff) {\n    initialize_parameters(&DAT_20000314);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002948": "initialize_if_parameter_is_1_08002948",
                "param_1": "input_param",
                "param_2": "flag_param",
                "initialize_parameters_0800291c": "initialize_parameters"
            },
            "calling": [
                "FUN_08002c1e"
            ],
            "called": [
                "FUN_0800291c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002968": {
            "entrypoint": "0x08002968",
            "current_name": "initialize_peripherals_08002968",
            "code": "\nvoid initializePeripherals_08002968(int outputAddress,uint configValue)\n\n{\n  int shiftedConfig;\n  int peripheralAddress;\n  \n  DAT_200003b5 = 0;\n  DAT_200003b7 = 0;\n  if (DAT_200003c8 != 0) {\n    fill_memory_080091c6(DAT_200003c8,0,DAT_200003c4);\n  }\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  if (DAT_200003cc != 0) {\n    fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n  }\n  DAT_200003b4 = 0;\n  shiftedConfig = (configValue & 0x7f) << 1;\n  *(char *)(outputAddress + 0x10) = (char)shiftedConfig;\n  if (configValue == 0x33) {\n    *(undefined *)(outputAddress + 0x11) = 1;\n  }\n  else {\n    *(undefined *)(outputAddress + 0x11) = 0;\n  }\n  peripheralAddress = outputAddress + 0x14;\n  initialize_i2_c_peripheral_080077b0(peripheralAddress,100000,0x4000,shiftedConfig,*(undefined *)(outputAddress + 0x11));\n  if (*(char *)(outputAddress + 0x11) == '\\0') {\n    update_data_structure_08007f8e(peripheralAddress,&LAB_08002774_1);\n    update_data_structure_08007f7c(peripheralAddress,&LAB_08002b00_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002968": "initialize_peripherals_08002968",
                "param_1": "outputAddress",
                "param_2": "configValue",
                "iVar1": "shiftedConfig",
                "iVar2": "peripheralAddress"
            },
            "calling": [
                "FUN_08002a1c"
            ],
            "called": [
                "FUN_08007f7c",
                "FUN_080077b0",
                "FUN_080091c6",
                "FUN_08007f8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a1c": {
            "entrypoint": "0x08002a1c",
            "current_name": "initialize_peripherals_08002a1c",
            "code": "\nvoid initializePeripherals_08002a1c(undefined4 ptrParameter1,undefined param2,undefined4 ptrParameter3,undefined4 ptrParameter4)\n\n{\n  initialize_peripherals_08002968(ptrParameter1,param2,ptrParameter3,ptrParameter4,ptrParameter4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a1c": "initialize_peripherals_08002a1c",
                "param_1": "ptrParameter1",
                "param_2": "param2",
                "param_3": "ptrParameter3",
                "param_4": "ptrParameter4"
            },
            "calling": [
                "FUN_08002a26"
            ],
            "called": [
                "FUN_08002968"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a26": {
            "entrypoint": "0x08002a26",
            "current_name": "initialize_peripherals_08002a26",
            "code": "\nvoid initialize_peripherals_08002a26(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  initialize_peripherals_08002a26_08002a1c(param1,0x33,param3,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a26": "initialize_peripherals_08002a26",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08000a64"
            ],
            "called": [
                "FUN_08002a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a30": {
            "entrypoint": "0x08002a30",
            "current_name": "initialize_data_08002a30",
            "code": "\nvoid initializeData_08002a30(undefined4 unused,int bitShiftAmount)\n\n{\n  DAT_200003b4 = 1;\n  DAT_200003d0 = (char)(bitShiftAmount << 1);\n  DAT_200003b6 = 0;\n  DAT_200003b8 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a30": "initialize_data_08002a30",
                "param_1": "unused",
                "param_2": "bitShiftAmount"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_08002b68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a58": {
            "entrypoint": "0x08002a58",
            "current_name": "check_data_validity_08002a58",
            "code": "\nundefined4 checkDataValidity_08002a58(int dataAddress)\n\n{\n  int extractionResult;\n  undefined4 returnCode;\n  \n  if (*(char *)(dataAddress + 0x11) == '\\0') {\n    returnCode = 4;\n  }\n  else {\n    extractionResult = extract_and_verify_data_08007e74(dataAddress + 0x14,DAT_200003d0,DAT_200003cc,DAT_200003b8);\n    if (extractionResult == 0) {\n      returnCode = 0;\n    }\n    else if (extractionResult == 1) {\n      returnCode = 1;\n    }\n    else {\n      returnCode = 4;\n    }\n    if (DAT_200003cc != 0) {\n      fill_memory_080091c6(DAT_200003cc,0,DAT_200003c5);\n    }\n    DAT_200003b6 = 0;\n    DAT_200003b8 = 0;\n    DAT_200003b4 = 0;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_08002a58": "check_data_validity_08002a58",
                "param_1": "dataAddress",
                "iVar1": "extractionResult",
                "uVar2": "returnCode"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08002b68",
                "FUN_08002ac0"
            ],
            "called": [
                "FUN_08007e74",
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ac0": {
            "entrypoint": "0x08002ac0",
            "current_name": "check_validity_08002ac0",
            "code": "\nvoid check_validity_08002ac0(undefined4 data_ptr,undefined4 unused_param,undefined4 size,undefined4 data)\n\n{\n  check_data_validity_08002a58(data_ptr,1,size,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ac0": "check_validity_08002ac0",
                "param_1": "data_ptr",
                "param_2": "unused_param",
                "param_3": "size",
                "param_4": "data"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [
                "FUN_08002a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002acc": {
            "entrypoint": "0x08002acc",
            "current_name": "allocate_and_copy_data_08002acc",
            "code": "\nvoid allocateAndCopyData_08002acc(uint inputSize,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  if (DAT_200003c4 < inputSize) {\n    if (inputSize < 0x20) {\n      inputSize = 0x20;\n    }\n    DAT_200003c8 = allocate_and_copy_data_08009908(DAT_200003c8,inputSize,param3,(uint)DAT_200003c4,param4);\n    if (DAT_200003c8 == 0) {\n      DAT_200003c4 = 0;\n    }\n    else {\n      DAT_200003c4 = (byte)inputSize;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002acc": "allocate_and_copy_data_08002acc",
                "param_1": "inputSize",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_08009908"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b68": {
            "entrypoint": "0x08002b68",
            "current_name": "process_data_08002b68",
            "code": "\nundefined4\nprocess_data_08002b68(undefined4 *data_ptr,uint data_size,undefined4 param_3,uint param_4,byte byte_val)\n\n{\n  int result;\n  uint byte_counter;\n  uint copy_size;\n  \n  byte_counter = (uint)byte_val;\n  if (*(char *)((int)data_ptr + 0x11) == '\\0') {\n    return 0;\n  }\n  copy_size = param_4;\n  allocate_and_copy_data_08002acc(param_3);\n  if (DAT_200003c8 != 0) {\n    if (byte_counter != 0) {\n      initialize_data_08002a30(data_ptr,data_size);\n      if (3 < byte_counter) {\n        byte_counter = 3;\n      }\n      while( true ) {\n        if (byte_counter == 0) break;\n        (**(code **)*data_ptr)(data_ptr,param_4 >> ((byte_counter - 1 & 0x1f) << 3) & 0xff);\n        byte_counter = byte_counter - 1 & 0xff;\n      }\n      check_data_validity_08002a58(data_ptr,0);\n    }\n    result = process_data_08002b68_08007f0e(data_ptr + 5,(data_size & 0x7f) << 1,DAT_200003c8,param_3,copy_size);\n    if (result != 0) {\n      param_3 = 0;\n    }\n    DAT_200003b5 = 0;\n    DAT_200003b7 = (char)param_3;\n    return param_3;\n  }\n  data_ptr[1] = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002b68": "process_data_08002b68",
                "param_1": "data_ptr",
                "param_2": "data_size",
                "param_5": "byte_val",
                "iVar1": "result",
                "uVar2": "byte_counter",
                "uVar3": "copy_size"
            },
            "calling": [
                "FUN_08002c00"
            ],
            "called": [
                "FUN_08002a58",
                "FUN_08002acc",
                "FUN_08002a30",
                "FUN_08007f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c00": {
            "entrypoint": "0x08002c00",
            "current_name": "process_data_08002c00",
            "code": "\nvoid process_data_08002c00(void)\n\n{\n  process_data_08002c00_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c00": "process_data_08002c00",
                "process_data_08002b68": "process_data_helper"
            },
            "calling": [
                "FUN_08002c14"
            ],
            "called": [
                "FUN_08002b68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c14": {
            "entrypoint": "0x08002c14",
            "current_name": "initialize_data_processing_08002c14",
            "code": "\nvoid initializeDataProcessing_08002c14(void)\n\n{\n  processData();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c14": "initialize_data_processing_08002c14",
                "process_data_08002c00": "processData"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_08002c00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c1e": {
            "entrypoint": "0x08002c1e",
            "current_name": "initialize_with_parameter_08002c1e",
            "code": "\nvoid initializeWithParameter_08002c1e(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  initialize_if_parameter_is_1_08002948(1,0xffff,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c1e": "initialize_with_parameter_08002c1e"
            },
            "calling": [],
            "called": [
                "FUN_08002948"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2c": {
            "entrypoint": "0x08002c2c",
            "current_name": "call_callback_08002c2c",
            "code": "\nvoid callCallback_08002c2c(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  if (DAT_200005d4 != (code *)0x0) {\n    (*DAT_200005d4)(arg2,arg3,arg3,DAT_200005d4,arg4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c2c": "call_callback_08002c2c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ce0": {
            "entrypoint": "0x08002ce0",
            "current_name": "initialize_and_setup_08002ce0",
            "code": "\nint initializeAndSetup_08002ce0(int baseAddress)\n\n{\n  int offset;\n  \n  initializeVariable(baseAddress + 0x40);\n  offset = baseAddress + 0x44;\n  initializeFunction(offset,baseAddress,0x40);\n  *(undefined *)(baseAddress + 0xc4) = 0;\n  *(undefined4 *)(baseAddress + 200) = 0;\n  *(undefined *)(baseAddress + 0x1f8) = 0;\n  updateParameters(offset,0xe0,callbackFunction + 1,0);\n  updateParameters(offset,0x90,&label1,0);\n  updateParameters(offset,0xc0,&label2,0);\n  updateParameters(offset,0xd0,&label3,0);\n  updateParameters(offset,0xf4,&label4,0);\n  updateParameters(offset,0xf5,&label5,0);\n  updateValues(offset,0x71,&label6,0);\n  setPointers(offset,0xf0,&label7,0);\n  updateParameter(offset,0x79,&label8,baseAddress);\n  updateParameter2(offset,0xf9,&label9,baseAddress);\n  updateParameter2(offset,0xff,&label10,0);\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_08002ce0": "initialize_and_setup_08002ce0",
                "param_1": "baseAddress",
                "iVar1": "offset",
                "initialize_variable_0800314e": "initializeVariable",
                "initialize_function_080032bc": "initializeFunction",
                "update_parameters_08003306": "updateParameters",
                "call_callback_08002c2c": "callbackFunction",
                "update_values_08003366": "updateValues",
                "set_pointers_08003370": "setPointers",
                "update_parameters_08003346": "updateParameter",
                "update_parameters_08003350": "updateParameter2",
                "LAB_08002c40_1": "label1",
                "LAB_08002c7c_1": "label2",
                "LAB_08002c90_1": "label3",
                "LAB_08002c54_1": "label4",
                "LAB_08002c68_1": "label5",
                "LAB_08002ca4_1": "label6",
                "LAB_08002cb8_1": "label7",
                "LAB_08002e1a_1": "label8",
                "LAB_08002dea_1": "label9",
                "LAB_08002cd0_1": "label10"
            },
            "calling": [
                "FUN_08002dbc"
            ],
            "called": [
                "FUN_08003306",
                "FUN_08003346",
                "FUN_08003366",
                "FUN_0800314e",
                "FUN_080032bc",
                "FUN_08003350",
                "FUN_08003370"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dbc": {
            "entrypoint": "0x08002dbc",
            "current_name": "check_and_initialize_08002dbc",
            "code": "\nvoid checkAndInitialize_08002dbc(int input1,int input2)\n\n{\n  if (input1 != 1) {\n    return;\n  }\n  if (input2 == 0xffff) {\n    initialize_and_setup_08002ce0(&DAT_200003d4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002dbc": "check_and_initialize_08002dbc",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [],
            "called": [
                "FUN_08002ce0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ddc": {
            "entrypoint": "0x08002ddc",
            "current_name": "execute_functions_with_params_08002ddc",
            "code": "\nvoid execute_functions_with_params_08002ddc(int base_address,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  execute_functions_with_params_08002ddc_0800322c(base_address + 0x40,2,5,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ddc": "execute_functions_with_params_08002ddc",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_0800322c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002df6": {
            "entrypoint": "0x08002df6",
            "current_name": "decode_and_execute_08002df6",
            "code": "\nvoid decode_and_execute_08002df6(int input)\n\n{\n  undefined *data;\n  \n  if (*(byte *)(input + 0xc4) == 0) {\n    return;\n  }\n  data = *(undefined **)(input + 200);\n  execute_decoding_080031ce(input + 0x40,*data,second_parameter,*(byte *)(input + 0xc4) - 2,data + 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002df6": "decode_and_execute_08002df6",
                "param_1": "input",
                "puVar1": "data",
                "puVar1[1]": "second_parameter"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [
                "FUN_080031ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e26": {
            "entrypoint": "0x08002e26",
            "current_name": "update_config_parameter_08002e26",
            "code": "\nvoid updateConfigParameter_08002e26(int configPtr,undefined4 value)\n\n{\n  *(undefined4 *)(configPtr + 0xc0) = value;\n  copyValue(configPtr + 0x40);\n  executeFunctionsWithParams(configPtr);\n  decodeAndExecute(configPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e26": "update_config_parameter_08002e26",
                "param_1": "configPtr",
                "param_2": "value",
                "copy_value_08003154": "copyValue",
                "execute_functions_with_params_08002ddc": "executeFunctionsWithParams",
                "decode_and_execute_08002df6": "decodeAndExecute"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08003154",
                "FUN_08002ddc",
                "FUN_08002df6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e44": {
            "entrypoint": "0x08002e44",
            "current_name": "extract_file_name_from_path_08002e44",
            "code": "\nvoid extractFileNameFromPath_08002e44(int sourceBuffer,int filePath,undefined undefined1,undefined undefined2)\n\n{\n  byte subStringSize;\n  char fileNameLength;\n  int substringIndex;\n  int lastSlashIndex;\n  undefined *memoryBuffer;\n  \n  substringIndex = find_substring_080099a4(filePath,\".cpp\");\n  lastSlashIndex = find_last_character_0800997e(filePath,0x2f);\n  if (lastSlashIndex == 0) {\n    lastSlashIndex = find_last_character_0800997e(filePath,0x5c);\n  }\n  if (lastSlashIndex != 0) {\n    filePath = lastSlashIndex + 1;\n  }\n  if (substringIndex == 0) {\n    fileNameLength = get_string_length_08000178(filePath);\n    *(char *)(sourceBuffer + 0xc4) = fileNameLength + '\\x02';\n  }\n  else {\n    *(char *)(sourceBuffer + 0xc4) = ((char)substringIndex - (char)filePath) + '\\x02';\n  }\n  extract_integer_from_binary_080091a0(*(undefined4 *)(sourceBuffer + 200));\n  subStringSize = *(byte *)(sourceBuffer + 0xc4);\n  memoryBuffer = (undefined *)allocate_and_initialize_memory_08009190(subStringSize + 1);\n  *(undefined **)(sourceBuffer + 200) = memoryBuffer;\n  memoryBuffer[subStringSize] = 0;\n  *memoryBuffer = undefined1;\n  memoryBuffer[1] = undefined2;\n  copy_string_08009954(memoryBuffer + 2,filePath,*(byte *)(sourceBuffer + 0xc4) - 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e44": "extract_file_name_from_path_08002e44",
                "param_1": "sourceBuffer",
                "param_2": "filePath",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "bVar1": "subStringSize",
                "cVar2": "fileNameLength",
                "iVar3": "substringIndex",
                "iVar4": "lastSlashIndex",
                "puVar5": "memoryBuffer"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08009190",
                "FUN_0800997e",
                "FUN_08009954",
                "FUN_080091a0",
                "FUN_08000178",
                "FUN_080099a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec4": {
            "entrypoint": "0x08002ec4",
            "current_name": "execute_function_08002ec4",
            "code": "\nvoid executeFunction_08002ec4(int functionPointer)\n\n{\n  (**(code **)(**(int **)(functionPointer + 0xc0) + 8))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec4": "execute_function_08002ec4",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed2": {
            "entrypoint": "0x08002ed2",
            "current_name": "process_data_08002ed2",
            "code": "\nvoid processData_08002ed2(int data)\n\n{\n  uint result;\n  \n  result = (**(code **)(**(int **)(data + 0xc0) + 0xc))();\n  if (result != 0xffffffff) {\n    process_08003474(data + 0x44,result & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed2": "process_data_08002ed2",
                "param_1": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003474"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef2": {
            "entrypoint": "0x08002ef2",
            "current_name": "execute_and_decode_08002ef2",
            "code": "\nvoid execute_and_decode_08002ef2(int input_param,undefined4 param_2,undefined2 param_3,undefined4 param_4)\n\n{\n  execute_or_decode_and_execute_08003158(input_param + 0x40,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef2": "execute_and_decode_08002ef2",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08003158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efe": {
            "entrypoint": "0x08002efe",
            "current_name": "execute_and_decode_08002efe",
            "code": "\nvoid execute_and_decode_08002efe(int input_offset,undefined4 param_2,undefined2 param_3,undefined4 param_4)\n\n{\n  execute_and_decode_08002efe(input_offset + 0x40,param_2,param_3,param_4,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002efe": "execute_and_decode_08002efe",
                "param_1": "input_offset",
                "execute_and_decode_function_0800319e": "execute_and_decode"
            },
            "calling": [
                "FUN_08000be8"
            ],
            "called": [
                "FUN_0800319e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f0a": {
            "entrypoint": "0x08002f0a",
            "current_name": "execute_decoded_instructions_08002f0a",
            "code": "\nvoid execute_decoded_instructions_08002f0a(int input_offset)\n\n{\n  execute_decoded_instructions_08002f0a_0800325a(input_offset + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f0a": "execute_decoded_instructions_08002f0a",
                "param_1": "input_offset"
            },
            "calling": [
                "FUN_08001c18"
            ],
            "called": [
                "FUN_0800325a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f14": {
            "entrypoint": "0x08002f14",
            "current_name": "execute_decoded_instructions_08002f14",
            "code": "\nvoid execute_decoded_instructions_08002f14(int input_value)\n\n{\n  execute_decoded_instructions_08002f14_080032a2(input_value + 0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f14": "execute_decoded_instructions_08002f14",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001c18",
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000500"
            ],
            "called": [
                "FUN_080032a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f1e": {
            "entrypoint": "0x08002f1e",
            "current_name": "execute_function_08002f1e",
            "code": "\nvoid executeFunction_08002f1e(int functionPointer)\n\n{\n  (**(code **)**(undefined4 **)(functionPointer + 0xc0))();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f1e": "execute_function_08002f1e",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f2c": {
            "entrypoint": "0x08002f2c",
            "current_name": "update_data_08002f2c",
            "code": "\nvoid updateData_08002f2c(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 tempVar1;\n  \n  if (param2 == 0xd0) {\n    DAT_200005f0 = param3;\n    return;\n  }\n  if (0xd0 < param2) {\n    if (param2 == 0xf4) {\n      DAT_200005e0 = param3;\n      return;\n    }\n    tempVar1 = param3;\n    if ((param2 != 0xf5) && (tempVar1 = DAT_200005e4, param2 == 0xe0)) {\n      DAT_200005d4 = param3;\n      return;\n    }\n    DAT_200005e4 = tempVar1;\n    return;\n  }\n  if (param2 == 0x90) {\n    DAT_200005dc = param3;\n    return;\n  }\n  if (param2 != 0xc0) {\n    return;\n  }\n  DAT_200005ec = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f2c": "update_data_08002f2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "tempVar1"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f84": {
            "entrypoint": "0x08002f84",
            "current_name": "update_data_08002f84",
            "code": "\nvoid updateData_08002f84(undefined4 inputData,int condition,undefined4 newValue)\n\n{\n  if (condition == 0xff) {\n    DAT_200005e8 = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f84": "update_data_08002f84",
                "param_1": "inputData",
                "param_2": "condition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f94": {
            "entrypoint": "0x08002f94",
            "current_name": "initialize_data_08002f94",
            "code": "\nvoid initializeData_08002f94(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  DAT_200005d0 = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f94": "initialize_data_08002f94",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa0": {
            "entrypoint": "0x08002fa0",
            "current_name": "get_offset_value_08002fa0",
            "code": "\nundefined get_offset_value_08002fa0(int offset,int base_address)\n\n{\n  return *(undefined *)(base_address + offset + 0xcc);\n}\n\n",
            "renaming": {
                "FUN_08002fa0": "get_offset_value_08002fa0",
                "param_1": "offset",
                "param_2": "base_address"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fa8": {
            "entrypoint": "0x08002fa8",
            "current_name": "update_value_if_needed_08002fa8",
            "code": "\nvoid updateValueIfNeeded_08002fa8(int baseAddress,int offset,undefined newValue)\n\n{\n  if (*(char *)(baseAddress + offset + 0xcc) != '\\x7f') {\n    *(undefined *)(baseAddress + offset + 0xcc) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fa8": "update_value_if_needed_08002fa8",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_080005f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fba": {
            "entrypoint": "0x08002fba",
            "current_name": "get_value_at_index_08002fba",
            "code": "\nundefined4 get_value_at_index_08002fba(int base_address,int index)\n\n{\n  return *(undefined4 *)(base_address + (index + 0x42) * 4);\n}\n\n",
            "renaming": {
                "FUN_08002fba": "get_value_at_index_08002fba",
                "param_1": "base_address",
                "param_2": "index"
            },
            "calling": [
                "FUN_08001cd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fc2": {
            "entrypoint": "0x08002fc2",
            "current_name": "store_value_at_index_08002fc2",
            "code": "\nvoid storeValueAtIndex_08002fc2(int arrayBaseAddress,int arrayIndex,undefined4 value)\n\n{\n  *(undefined4 *)(arrayBaseAddress + (arrayIndex + 0x42) * 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fc2": "store_value_at_index_08002fc2",
                "param_1": "arrayBaseAddress",
                "param_2": "arrayIndex",
                "param_3": "value"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fca": {
            "entrypoint": "0x08002fca",
            "current_name": "perform_repeated_task_08002fca",
            "code": "\nvoid performRepeatedTask_08002fca(undefined4 unusedParam1,undefined4 inputParam,int taskCount,undefined4 paramA,\n                 undefined4 paramB)\n\n{\n  uint iterationCounter;\n  \n  for (iterationCounter = 0; (int)iterationCounter < taskCount; iterationCounter = iterationCounter + 1 & 0xff) {\n    FUNC_08008ac4(paramB);\n    process_param_08008a24(inputParam,1);\n    FUNC_08008ac4(paramA);\n    process_param_08008a24(inputParam,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fca": "perform_repeated_task_08002fca",
                "param_1": "unusedParam1",
                "param_2": "inputParam",
                "param_3": "taskCount",
                "param_4": "paramA",
                "param_5": "paramB",
                "uVar1": "iterationCounter"
            },
            "calling": [
                "FUN_08003002"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08008a24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003002": {
            "entrypoint": "0x08003002",
            "current_name": "process_memory_08003002",
            "code": "\nvoid processMemory_08003002(int input)\n\n{\n  if (*(char *)(input + 0x1f8) != '\\0') {\n    return;\n  }\n  initializeAndProcessMemory(0xd,1);\n  performRepeatedTask(input,0xd,2,0x28,0xd2);\n  FUNC_08008ac4(0xfa);\n  performRepeatedTask(input,0xd,5,0x28,0xd2);\n  FUNC_08008ac4(0x7d);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003002": "process_memory_08003002",
                "param_1": "input",
                "initialize_and_process_memory_08008990": "initializeAndProcessMemory",
                "perform_repeated_task_08002fca": "performRepeatedTask"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_08008ac4",
                "FUN_08002fca",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003048": {
            "entrypoint": "0x08003048",
            "current_name": "initialize_and_update_serial_communication_08003048",
            "code": "\nvoid initialize_and_update_serial_communication_08003048(undefined4 input_parameter,undefined4 serial_communication_parameter,undefined4 unused_parameter,undefined4 config_parameter)\n\n{\n  initialize_serial_communication(&DAT_20000700,serial_communication_parameter,6,config_parameter,config_parameter);\n  process_memory(input_parameter);\n  update_config_parameter(input_parameter,&DAT_20000700);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003048": "initialize_and_update_serial_communication_08003048",
                "param_1": "input_parameter",
                "param_2": "serial_communication_parameter",
                "param_3": "unused_parameter",
                "param_4": "config_parameter",
                "initialize_serial_communication_08008c44": "initialize_serial_communication",
                "process_memory_08003002": "process_memory",
                "update_config_parameter_08002e26": "update_config_parameter"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08002e26",
                "FUN_08008c44",
                "FUN_08003002"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800307a": {
            "entrypoint": "0x0800307a",
            "current_name": "decode_and_execute_0800307a",
            "code": "\nvoid decode_and_execute_0800307a(undefined4 *function_pointers,uint input_size,byte *input_data,uint max_iterations)\n\n{\n  uint current_byte;\n  uint bit_offset;\n  uint iteration_count;\n  uint current_index;\n  \n  current_byte = (uint)*input_data;\n  if (max_iterations == 0) {\n    max_iterations = 0xffffffff;\n  }\n  current_index = 0;\n  bit_offset = 0;\n  iteration_count = 0;\n  while ((current_index < input_size && (iteration_count < max_iterations))) {\n    (***(code ***)(undefined4 *)*function_pointers)\n              ((undefined4 *)*function_pointers,((uint)input_data[current_index] << (bit_offset & 0xff) | current_byte) & 0x7f);\n    current_byte = (int)(uint)input_data[current_index] >> (7 - bit_offset & 0xff) & 0xff;\n    bit_offset = bit_offset + 1;\n    while ((iteration_count = iteration_count + 1, 6 < bit_offset && (iteration_count < max_iterations))) {\n      (***(code ***)(undefined4 *)*function_pointers)((undefined4 *)*function_pointers,current_byte & 0x7f);\n      current_byte = current_byte >> 7;\n      bit_offset = bit_offset - 7;\n    }\n    current_index = current_index + 1;\n  }\n  if ((bit_offset != 0) && (iteration_count < max_iterations)) {\n    (***(code ***)(undefined4 *)*function_pointers)((undefined4 *)*function_pointers,(1 << (bit_offset & 0xff)) - 1U & current_byte)\n    ;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800307a": "decode_and_execute_0800307a",
                "param_1": "function_pointers",
                "param_2": "input_size",
                "param_3": "input_data",
                "param_4": "max_iterations",
                "uVar1": "current_byte",
                "uVar2": "bit_offset",
                "uVar3": "iteration_count",
                "uVar4": "current_index"
            },
            "calling": [
                "FUN_0800325a",
                "FUN_08003158",
                "FUN_0800319e",
                "FUN_08003106",
                "FUN_080031ce"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003106": {
            "entrypoint": "0x08003106",
            "current_name": "execute_function_08003106",
            "code": "\nvoid execute_function_08003106(undefined4 *function_pointer,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 *ptr_to_function;\n  \n  ptr_to_function = (undefined4 *)*function_pointer;\n  if (ptr_to_function != (undefined4 *)0x0) {\n    (**(code **)*ptr_to_function)(ptr_to_function,0xf0);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0x6f);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,arg1);\n    decode_and_execute(function_pointer,arg2,arg3,arg2);\n    (***(code ***)(undefined4 *)*function_pointer)((undefined4 *)*function_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003106": "execute_function_08003106",
                "param_1": "function_pointer",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "puVar1": "ptr_to_function",
                "decode_and_execute_0800307a": "decode_and_execute"
            },
            "calling": [
                "FUN_08003158"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "initialize_variable_0800314e",
            "code": "\nvoid initializeVariable_0800314e(undefined4 *ptr_result)\n\n{\n  *ptr_result = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "initialize_variable_0800314e",
                "param_1": "ptr_result"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003154": {
            "entrypoint": "0x08003154",
            "current_name": "copy_value_08003154",
            "code": "\nvoid copyValue_08003154(undefined4 *destination,undefined4 value)\n\n{\n  *destination = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003154": "copy_value_08003154",
                "param_1": "destination",
                "param_2": "value"
            },
            "calling": [
                "FUN_08002e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003158": {
            "entrypoint": "0x08003158",
            "current_name": "execute_or_decode_and_execute_08003158",
            "code": "\nvoid executeOrDecodeAndExecute_08003158(undefined4 *functionPointer,uint value1,ushort value2)\n\n{\n  undefined4 *pointer;\n  ushort decodedValue;\n  \n  pointer = (undefined4 *)*functionPointer;\n  if (pointer != (undefined4 *)0x0) {\n    decodedValue = value2;\n    if (((int)value1 < 0x10) && (value2 < 0x4000)) {\n      (**(code **)*pointer)(pointer,value1 | 0xe0);\n      decode_and_execute_0800307a(functionPointer,2,&decodedValue);\n    }\n    else {\n      execute_function_08003106(functionPointer,value1,2,&decodedValue);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003158": "execute_or_decode_and_execute_08003158",
                "param_1": "functionPointer",
                "param_2": "value1",
                "param_3": "value2",
                "puVar1": "pointer",
                "local_a": "decodedValue"
            },
            "calling": [
                "FUN_08002ef2"
            ],
            "called": [
                "FUN_0800307a",
                "FUN_08003106"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800319e": {
            "entrypoint": "0x0800319e",
            "current_name": "execute_and_decode_function_0800319e",
            "code": "\nvoid execute_and_decode_function_0800319e(undefined4 *function_pointer,uint argument,undefined2 data)\n\n{\n  undefined4 *pointer;\n  undefined2 decoded_data;\n  \n  pointer = (undefined4 *)*function_pointer;\n  if (pointer != (undefined4 *)0x0) {\n    decoded_data = data;\n    (**(code **)*pointer)(pointer,argument & 0xf | 0x90);\n    decode_and_execute_0800307a(function_pointer,2,&decoded_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800319e": "execute_and_decode_function_0800319e",
                "param_1": "function_pointer",
                "param_2": "argument",
                "param_3": "data",
                "puVar1": "pointer",
                "local_a": "decoded_data"
            },
            "calling": [
                "FUN_08002efe"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031ce": {
            "entrypoint": "0x080031ce",
            "current_name": "execute_decoding_080031ce",
            "code": "\nvoid executeDecoding_080031ce(undefined4 *functionPointer,undefined4 parameter2,undefined4 parameter3,uint iterationCount,int startValue\n                 )\n\n{\n  undefined4 *pointer;\n  uint iterator;\n  \n  pointer = (undefined4 *)*functionPointer;\n  if (pointer != (undefined4 *)0x0) {\n    (**(code **)*pointer)(pointer,0xf0,parameter3,*(code **)*pointer,iterationCount);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,0x79);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,parameter2);\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,parameter3);\n    for (iterator = 0; iterator < iterationCount; iterator = iterator + 1) {\n      decode_and_execute_0800307a(functionPointer,1,startValue + iterator,0);\n    }\n    (***(code ***)(undefined4 *)*functionPointer)((undefined4 *)*functionPointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080031ce": "execute_decoding_080031ce",
                "param_1": "functionPointer",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "iterationCount",
                "param_5": "startValue",
                "puVar1": "pointer",
                "uVar2": "iterator"
            },
            "calling": [
                "FUN_08002df6"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800322c": {
            "entrypoint": "0x0800322c",
            "current_name": "execute_functions_with_params_0800322c",
            "code": "\nvoid executeFunctionsWithParams_0800322c(undefined4 *functionList,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 *functionPtr;\n  \n  functionPtr = (undefined4 *)*functionList;\n  if (functionPtr != (undefined4 *)0x0) {\n    (**(code **)*functionPtr)(functionPtr,0xf9);\n    (***(code ***)(undefined4 *)*functionList)((undefined4 *)*functionList,param2);\n    (***(code ***)(undefined4 *)*functionList)((undefined4 *)*functionList,param3);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800322c": "execute_functions_with_params_0800322c",
                "param_1": "functionList",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "functionPtr"
            },
            "calling": [
                "FUN_08002ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800325a": {
            "entrypoint": "0x0800325a",
            "current_name": "execute_decoded_instructions_0800325a",
            "code": "\nvoid execute_decoded_instructions_0800325a(undefined4 *instruction_pointer,undefined4 execution_mode,uint instruction_count,int base_address)\n\n{\n  undefined4 *next_instruction;\n  uint instruction_index;\n  \n  next_instruction = (undefined4 *)*instruction_pointer;\n  if (next_instruction != (undefined4 *)0x0) {\n    (**(code **)*next_instruction)(next_instruction,0xf0);\n    (***(code ***)(undefined4 *)*instruction_pointer)((undefined4 *)*instruction_pointer,execution_mode);\n    for (instruction_index = 0; instruction_index < instruction_count; instruction_index = instruction_index + 1) {\n      decode_and_execute_0800307a(instruction_pointer,1,base_address + instruction_index,0);\n    }\n    (***(code ***)(undefined4 *)*instruction_pointer)((undefined4 *)*instruction_pointer,0xf7);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800325a": "execute_decoded_instructions_0800325a",
                "param_1": "instruction_pointer",
                "param_2": "execution_mode",
                "param_3": "instruction_count",
                "param_4": "base_address",
                "puVar1": "next_instruction",
                "uVar2": "instruction_index"
            },
            "calling": [
                "FUN_08002f0a",
                "FUN_080032a2"
            ],
            "called": [
                "FUN_0800307a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032a2": {
            "entrypoint": "0x080032a2",
            "current_name": "execute_decoded_instructions_080032a2",
            "code": "\nvoid execute_decoded_instructions_080032a2(undefined4 instruction_ptr,undefined4 string_ptr,undefined4 unused_param,undefined4 data_ptr)\n\n{\n  undefined4 string_length;\n  \n  string_length = get_string_length_08000178(string_ptr);\n  execute_decoded_instructions_080032a2_0800325a(instruction_ptr,0x71,string_length,string_ptr,data_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032a2": "execute_decoded_instructions_080032a2",
                "param_1": "instruction_ptr",
                "param_2": "string_ptr",
                "param_3": "unused_param",
                "param_4": "data_ptr",
                "uVar1": "string_length"
            },
            "calling": [
                "FUN_08002f14"
            ],
            "called": [
                "FUN_0800325a",
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032bc": {
            "entrypoint": "0x080032bc",
            "current_name": "initialize_function_080032bc",
            "code": "\nvoid initializeFunction_080032bc(int functionData,int paramValue,undefined4 paramValue2)\n\n{\n  *(int *)(functionData + 4) = paramValue;\n  *(undefined4 *)(functionData + 8) = paramValue2;\n  *(undefined *)(functionData + 0xc) = 0;\n  *(undefined *)(functionData + 0xd) = 0;\n  *(undefined4 *)(functionData + 0x10) = 0;\n  *(undefined *)(functionData + 0x14) = 0;\n  *(undefined4 *)(functionData + 0x18) = 0;\n  *(undefined4 *)(functionData + 0x1c) = 0;\n  *(undefined4 *)(functionData + 0x20) = 0;\n  *(undefined4 *)(functionData + 0x24) = 0;\n  *(undefined4 *)(functionData + 0x28) = 0;\n  *(undefined4 *)(functionData + 0x2c) = 0;\n  *(undefined4 *)(functionData + 0x30) = 0;\n  *(undefined4 *)(functionData + 0x34) = 0;\n  *(undefined4 *)(functionData + 0x38) = 0;\n  *(undefined4 *)(functionData + 0x3c) = 0;\n  *(undefined4 *)(functionData + 0x40) = 0;\n  *(undefined4 *)(functionData + 0x44) = 0;\n  *(undefined4 *)(functionData + 0x48) = 0;\n  *(undefined4 *)(functionData + 0x4c) = 0;\n  *(undefined4 *)(functionData + 0x50) = 0;\n  *(undefined4 *)(functionData + 0x54) = 0;\n  *(undefined4 *)(functionData + 0x58) = 0;\n  *(undefined4 *)(functionData + 0x5c) = 0;\n  *(undefined4 *)(functionData + 0x60) = 0;\n  *(undefined4 *)(functionData + 100) = 0;\n  *(undefined4 *)(functionData + 0x68) = 0;\n  *(undefined4 *)(functionData + 0x6c) = 0;\n  *(undefined4 *)(functionData + 0x70) = 0;\n  *(undefined4 *)(functionData + 0x74) = 0;\n  *(undefined4 *)(functionData + 0x78) = 0;\n  *(bool *)functionData = paramValue == 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080032bc": "initialize_function_080032bc",
                "param_1": "functionData",
                "param_2": "paramValue",
                "param_3": "paramValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003306": {
            "entrypoint": "0x08003306",
            "current_name": "update_parameters_08003306",
            "code": "\nvoid updateParameters_08003306(int baseAddress,uint value,undefined4 newParam1,undefined4 newParam2)\n\n{\n  if (value == 0xd0) {\n    *(undefined4 *)(baseAddress + 0x58) = newParam1;\n    *(undefined4 *)(baseAddress + 0x28) = newParam2;\n    return;\n  }\n  if (0xd0 < value) {\n    if (value == 0xf4) {\n      *(undefined4 *)(baseAddress + 0x5c) = newParam1;\n      *(undefined4 *)(baseAddress + 0x2c) = newParam2;\n      return;\n    }\n    if (value == 0xf5) {\n      *(undefined4 *)(baseAddress + 0x60) = newParam1;\n      *(undefined4 *)(baseAddress + 0x30) = newParam2;\n    }\n    else if (value == 0xe0) {\n      *(undefined4 *)(baseAddress + 0x4c) = newParam1;\n      *(undefined4 *)(baseAddress + 0x1c) = newParam2;\n      return;\n    }\n    return;\n  }\n  if (value == 0x90) {\n    *(undefined4 *)(baseAddress + 0x50) = newParam1;\n    *(undefined4 *)(baseAddress + 0x20) = newParam2;\n    return;\n  }\n  if (value == 0xc0) {\n    *(undefined4 *)(baseAddress + 0x54) = newParam1;\n    *(undefined4 *)(baseAddress + 0x24) = newParam2;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003306": "update_parameters_08003306",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "newParam1",
                "param_4": "newParam2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003346": {
            "entrypoint": "0x08003346",
            "current_name": "update_parameters_08003346",
            "code": "\nvoid updateParameters_08003346(int baseAddress,int comparisonValue,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (comparisonValue == 0x79) {\n    *(undefined4 *)(baseAddress + 0x70) = newValue1;\n    *(undefined4 *)(baseAddress + 0x34) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003346": "update_parameters_08003346",
                "param_1": "baseAddress",
                "param_2": "comparisonValue",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003350": {
            "entrypoint": "0x08003350",
            "current_name": "update_parameters_08003350",
            "code": "\nvoid updateParameters_08003350(int objAddress,int condition,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (condition == 0xf9) {\n    *(undefined4 *)(objAddress + 0x74) = newValue1;\n    *(undefined4 *)(objAddress + 0x38) = newValue2;\n    return;\n  }\n  if (condition != 0xff) {\n    return;\n  }\n  *(undefined4 *)(objAddress + 0x78) = newValue1;\n  *(undefined4 *)(objAddress + 0x48) = newValue2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003350": "update_parameters_08003350",
                "param_1": "objAddress",
                "param_2": "condition",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003366": {
            "entrypoint": "0x08003366",
            "current_name": "update_values_08003366",
            "code": "\nvoid updateValues_08003366(int baseAddress,int valueToCheck,undefined4 newValue1,undefined4 newValue2)\n\n{\n  if (valueToCheck == 0x71) {\n    *(undefined4 *)(baseAddress + 0x68) = newValue1;\n    *(undefined4 *)(baseAddress + 0x40) = newValue2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003366": "update_values_08003366",
                "param_1": "baseAddress",
                "param_2": "valueToCheck",
                "param_3": "newValue1",
                "param_4": "newValue2"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003370": {
            "entrypoint": "0x08003370",
            "current_name": "set_pointers_08003370",
            "code": "\nvoid setPointers_08003370(int baseAddress,undefined4 unusedParam,undefined4 newPtrValue,undefined4 newDataValue)\n\n{\n  *(undefined4 *)(baseAddress + 0x6c) = newPtrValue;\n  *(undefined4 *)(baseAddress + 0x44) = newDataValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003370": "set_pointers_08003370",
                "param_1": "baseAddress",
                "param_2": "unusedParam",
                "param_3": "newPtrValue",
                "param_4": "newDataValue"
            },
            "calling": [
                "FUN_08002ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003376": {
            "entrypoint": "0x08003376",
            "current_name": "store_byte_if_valid_08003376",
            "code": "\nvoid storeByteIfValid_08003376(undefined *dataStruct,undefined byteValue,uint index)\n\n{\n  bool isValidIndex;\n  \n  if (index < *(uint *)(dataStruct + 8)) {\n    isValidIndex = false;\n  }\n  else {\n    isValidIndex = true;\n    if (*(code **)(dataStruct + 100) != (code *)0x0) {\n      *dataStruct = 1;\n      (**(code **)(dataStruct + 100))(*(undefined4 *)(dataStruct + 0x3c));\n      if (index < *(uint *)(dataStruct + 8)) {\n        isValidIndex = false;\n      }\n      else {\n        isValidIndex = true;\n      }\n    }\n  }\n  if (!isValidIndex) {\n    *(undefined *)(*(int *)(dataStruct + 4) + index) = byteValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003376": "store_byte_if_valid_08003376",
                "param_1": "dataStruct",
                "param_2": "byteValue",
                "param_3": "index",
                "bVar1": "isValidIndex"
            },
            "calling": [
                "FUN_080033cc",
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033a8": {
            "entrypoint": "0x080033a8",
            "current_name": "copy_and_shift_bytes_080033a8",
            "code": "\nvoid copyAndShiftBytes_080033a8(undefined4 inputSize,uint numBytes,int buffer)\n\n{\n  byte currentByte;\n  int outputIndex;\n  uint inputIndex;\n  \n  outputIndex = 0;\n  for (inputIndex = 0; inputIndex < numBytes; inputIndex = inputIndex + 2) {\n    currentByte = *(byte *)(buffer + inputIndex);\n    *(byte *)(buffer + outputIndex) = currentByte;\n    *(byte *)(buffer + outputIndex) = *(char *)(buffer + inputIndex + 1) << 7 | currentByte;\n    outputIndex = outputIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033a8": "copy_and_shift_bytes_080033a8",
                "param_1": "inputSize",
                "param_2": "numBytes",
                "param_3": "buffer",
                "bVar1": "currentByte",
                "iVar2": "outputIndex",
                "uVar3": "inputIndex"
            },
            "calling": [
                "FUN_080033cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033cc": {
            "entrypoint": "0x080033cc",
            "current_name": "process_input_080033cc",
            "code": "\nvoid processInput_080033cc(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  char firstChar;\n  int copyShiftResult;\n  char *inputPtr;\n  \n  inputPtr = *(char **)(inputData + 4);\n  firstChar = *inputPtr;\n  if (firstChar == 'q') {\n    if (*(int *)(inputData + 0x68) != 0) {\n      copyShiftResult = copy_and_shift_bytes_080033a8(inputData,*(int *)(inputData + 0x18) + -1,inputPtr + 1,inputPtr,param4);\n      store_byte_if_valid_08003376(inputData,0,copyShiftResult + 1);\n      (**(code **)(inputData + 0x68))(*(undefined4 *)(inputData + 0x40),*(int *)(inputData + 4) + 1);\n      return;\n    }\n  }\n  else if (firstChar == 'y') {\n    if (*(code **)(inputData + 0x70) != (code *)0x0) {\n      if (*(uint *)(inputData + 0x18) < 3) {\n        (**(code **)(inputData + 0x70))(*(undefined4 *)(inputData + 0x34),0,0);\n        return;\n      }\n      copyShiftResult = copy_and_shift_bytes_080033a8(inputData,*(uint *)(inputData + 0x18) - 3,inputPtr + 3,inputPtr,param4);\n      store_byte_if_valid_08003376(inputData,0,copyShiftResult + 3);\n      copyShiftResult = *(int *)(inputData + 4);\n      (**(code **)(inputData + 0x70))\n                (*(undefined4 *)(inputData + 0x34),*(undefined *)(copyShiftResult + 1),*(undefined *)(copyShiftResult + 2)\n                 ,copyShiftResult + 3);\n      return;\n    }\n  }\n  else if (*(code **)(inputData + 0x6c) != (code *)0x0) {\n    (**(code **)(inputData + 0x6c))\n              (*(undefined4 *)(inputData + 0x44),firstChar,*(int *)(inputData + 0x18) + -1,inputPtr + 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033cc": "process_input_080033cc",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "firstChar",
                "iVar2": "copyShiftResult",
                "pcVar3": "inputPtr"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [
                "FUN_08003376",
                "FUN_080033a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800344a": {
            "entrypoint": "0x0800344a",
            "current_name": "initialize_data_0800344a",
            "code": "\nvoid initializeData_0800344a(int dataPtr)\n\n{\n  uint i;\n  \n  *(undefined4 *)(dataPtr + 0x10) = 0;\n  *(undefined *)(dataPtr + 0xc) = 0;\n  *(undefined *)(dataPtr + 0xd) = 0;\n  for (i = 0; i < *(uint *)(dataPtr + 8); i = i + 1) {\n    *(undefined *)(*(int *)(dataPtr + 4) + i) = 0;\n  }\n  *(undefined *)(dataPtr + 0x14) = 0;\n  *(undefined4 *)(dataPtr + 0x18) = 0;\n  if (*(code **)(dataPtr + 0x78) != (code *)0x0) {\n    (**(code **)(dataPtr + 0x78))(*(undefined4 *)(dataPtr + 0x48));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800344a": "initialize_data_0800344a",
                "param_1": "dataPtr",
                "uVar1": "i"
            },
            "calling": [
                "FUN_08003474"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "process_08003474",
            "code": "\nvoid process_08003474(int address,uint value)\n\n{\n  byte byteValue;\n  \n  if (*(char *)(address + 0x14) != '\\0') {\n    if (value != 0xf7) {\n      storeByteIfValid(address,value,*(undefined4 *)(address + 0x18));\n      *(int *)(address + 0x18) = *(int *)(address + 0x18) + 1;\n      return;\n    }\n    *(undefined *)(address + 0x14) = 0;\n    process_08003474Input();\n    return;\n  }\n  if ((*(int *)(address + 0x10) == 0) || (0x7f < (int)value)) {\n    if ((int)value < 0xf0) {\n      *(byte *)(address + 0xd) = (byte)value & 0xf;\n      value = value & 0xf0;\n    }\n    if (value == 0xf0) {\n      *(undefined *)(address + 0x14) = 1;\n      *(undefined4 *)(address + 0x18) = 0;\n      return;\n    }\n    if (value < 0xf1) {\n      if (value != 0xc0) {\n        if (value < 0xc1) {\n          if (value != 0x90) {\n            return;\n          }\n        }\n        else {\n          if (value == 0xd0) goto LAB_0800359c;\n          if (value != 0xe0) {\n            return;\n          }\n        }\nLAB_08003586:\n        *(undefined4 *)(address + 0x10) = 2;\n        *(char *)(address + 0xc) = (char)value;\n        return;\n      }\nLAB_0800359c:\n      *(undefined4 *)(address + 0x10) = 1;\n      *(char *)(address + 0xc) = (char)value;\n      return;\n    }\n    if (value != 0xf9) {\n      if (0xf9 < value) {\n        if (value == 0xff) {\n          initializeData(address);\n          return;\n        }\n        return;\n      }\n      if (1 < value - 0xf4) {\n        return;\n      }\n      goto LAB_08003586;\n    }\n    if (*(code **)(address + 0x74) != (code *)0x0) {\n      (**(code **)(address + 0x74))(*(undefined4 *)(address + 0x38));\n    }\n  }\n  else {\n    *(int *)(address + 0x10) = *(int *)(address + 0x10) + -1;\n    storeByteIfValid();\n    if ((*(int *)(address + 0x10) == 0) && (byteValue = *(byte *)(address + 0xc), byteValue != 0)) {\n      if (byteValue == 0xd0) {\n        if (*(code **)(address + 0x58) != (code *)0x0) {\n          (**(code **)(address + 0x58))\n                    (*(undefined4 *)(address + 0x28),*(undefined *)(address + 0xd),\n                     **(undefined **)(address + 4));\n        }\n      }\n      else if (byteValue < 0xd1) {\n        if (byteValue == 0x90) {\n          if (*(code **)(address + 0x50) != (code *)0x0) {\n            (**(code **)(address + 0x50))\n                      (*(undefined4 *)(address + 0x20),*(undefined *)(address + 0xd),\n                       (uint)(*(byte **)(address + 4))[1] + (uint)**(byte **)(address + 4) * 0x80);\n          }\n        }\n        else if ((byteValue == 0xc0) && (*(code **)(address + 0x54) != (code *)0x0)) {\n          (**(code **)(address + 0x54))\n                    (*(undefined4 *)(address + 0x24),*(undefined *)(address + 0xd),\n                     **(undefined **)(address + 4));\n        }\n      }\n      else if (byteValue == 0xf4) {\n        if (*(code **)(address + 0x5c) != (code *)0x0) {\n          (**(code **)(address + 0x5c))\n                    (*(undefined4 *)(address + 0x2c),(*(undefined **)(address + 4))[1],\n                     **(undefined **)(address + 4));\n        }\n      }\n      else if (byteValue == 0xf5) {\n        if (*(code **)(address + 0x60) != (code *)0x0) {\n          (**(code **)(address + 0x60))\n                    (*(undefined4 *)(address + 0x30),(*(undefined **)(address + 4))[1],\n                     **(undefined **)(address + 4));\n        }\n      }\n      else if ((byteValue == 0xe0) && (*(code **)(address + 0x4c) != (code *)0x0)) {\n        (**(code **)(address + 0x4c))\n                  (*(undefined4 *)(address + 0x1c),*(undefined *)(address + 0xd),\n                   (uint)(*(byte **)(address + 4))[1] + (uint)**(byte **)(address + 4) * 0x80);\n      }\n      *(undefined *)(address + 0xc) = 0;\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "process_08003474",
                "param_1": "address",
                "param_2": "value",
                "bVar1": "byteValue",
                "store_byte_if_valid_08003376": "storeByteIfValid",
                "process_input_080033cc": "processInput",
                "initialize_data_0800344a": "initializeData"
            },
            "calling": [
                "FUN_08002ed2"
            ],
            "called": [
                "FUN_080033cc",
                "FUN_0800344a",
                "FUN_08003376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035b8": {
            "entrypoint": "0x080035b8",
            "current_name": "initialize_device_080035b8",
            "code": "\nvoid initializeDevice_080035b8(void)\n\n{\n  int result;\n  uint globalData;\n  undefined4 configurationA [2];\n  undefined4 configurationB;\n  undefined4 settingsA;\n  undefined4 settingsB;\n  undefined4 settingsC;\n  undefined4 settingsD;\n  undefined4 settingsE;\n  undefined4 inputData [4];\n  undefined4 configA;\n  undefined4 configB;\n  undefined4 configC;\n  undefined4 configD;\n  undefined4 configE;\n  \n  inputData[0] = 2;\n  configA = 1;\n  configB = 0x10;\n  configC = 2;\n  configD = 0;\n  configE = 0x380000;\n  result = process_input_08005460(inputData);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  settingsA = 0xf;\n  settingsB = 2;\n  settingsC = 0;\n  settingsD = 0x400;\n  settingsE = 0;\n  result = update_settings_080058ac(&settingsA);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  configurationA[0] = 2;\n  configurationB = 0x8000;\n  result = update_configuration_08005aa4(configurationA);\n  if (result != 0) {\n    infinite_loop_080073e8(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  globalData = get_global_data_08005a1c();\n  set_parameters_08003fd8(globalData / 1000);\n  set_flag_08004024(4);\n  apply_mask_and_store_08003f30(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035b8": "initialize_device_080035b8",
                "local_30": "inputData",
                "local_20": "configA",
                "local_1c": "configB",
                "local_14": "configC",
                "local_10": "configD",
                "local_c": "configE",
                "iVar1": "result",
                "local_44": "settingsA",
                "local_40": "settingsB",
                "local_3c": "settingsC",
                "local_38": "settingsD",
                "local_34": "settingsE",
                "local_54": "configurationA",
                "local_4c": "configurationB",
                "uVar2": "globalData"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080073e8",
                "FUN_08005460",
                "FUN_08003f30",
                "FUN_08003fd8",
                "FUN_08004024",
                "FUN_08005a1c",
                "FUN_08005aa4",
                "FUN_080058ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08003658",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200000f4; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800ac18);\n  }\n  for (puVar2 = &DAT_200000f4; puVar2 < &DAT_20000a3c; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  configure_hardware_080073ec();\n  execute_function_set_08009148();\n  UNRECOVERED_JUMPTABLE = (code *)0x800368a;\n  execute_main_loop_08008f1c();\n                    /* WARNING: Could not recover jumptable at 0x0800368a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080073ec",
                "FUN_08009148",
                "FUN_08008f1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036a2": {
            "entrypoint": "0x080036a2",
            "current_name": "initialize_system_and_device_080036a2",
            "code": "\nvoid initialize_system_and_device_080036a2(void)\n\n{\n  initialize_system_and_device_080036a2_080072fa();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036a2": "initialize_system_and_device_080036a2"
            },
            "calling": [
                "FUN_08008f0e"
            ],
            "called": [
                "FUN_080072fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036ac": {
            "entrypoint": "0x080036ac",
            "current_name": "check_valid_param_080036ac",
            "code": "\nuint check_valid_param_080036ac(int input_param)\n\n{\n  uint result;\n  \n  if ((uint)(input_param << 0x18) >> 0x1c < 5) {\n    for (result = 0; (result < 0x3c && (input_param != (char)(&DAT_0800a908)[result])); result = result + 1)\n    {\n    }\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080036ac": "check_valid_param_080036ac",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_08000aec",
                "FUN_08000ef8",
                "FUN_080022f8",
                "FUN_0800021a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036d4": {
            "entrypoint": "0x080036d4",
            "current_name": "FUNC_080036d4",
            "code": "\nvoid FUNC_080036d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036d4": "FUNC_080036d4"
            },
            "calling": [
                "FUN_08003724"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036d8": {
            "entrypoint": "0x080036d8",
            "current_name": "set_and_store_parameters_080036d8",
            "code": "\nundefined4 setAndStoreParameters_080036d8(uint parameter)\n\n{\n  int result;\n  \n  result = set_parameters_08003fd8(DAT_20000018 / (1000 / DAT_2000000c));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < parameter) {\n    return 1;\n  }\n  apply_mask_and_store_08003f30(0xffffffff,parameter,0);\n  DAT_20000010 = parameter;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036d8": "set_and_store_parameters_080036d8",
                "param_1": "parameter",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003724",
                "FUN_080058d2"
            ],
            "called": [
                "FUN_08003f30",
                "FUN_08003fd8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003724": {
            "entrypoint": "0x08003724",
            "current_name": "initialize_system_08003724",
            "code": "\n\n\nundefined4 initialize_system_08003724(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  update_configuration(3);\n  set_default_parameters(0xf);\n  FUNC_080036d4();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003724": "initialize_system_08003724",
                "update_configuration_08003f0c": "update_configuration",
                "set_and_store_parameters_080036d8": "set_default_parameters"
            },
            "calling": [
                "FUN_080072fa"
            ],
            "called": [
                "FUN_080036d4",
                "FUN_080036d8",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003748": {
            "entrypoint": "0x08003748",
            "current_name": "addition_and_update_08003748",
            "code": "\nvoid additionAndUpdate_08003748(void)\n\n{\n  DAT_20000a34 = (uint)DAT_2000000c + DAT_20000a34;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003748": "addition_and_update_08003748"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003760": {
            "entrypoint": "0x08003760",
            "current_name": "get_data_08003760",
            "code": "\nundefined4 get_data_08003760(void)\n\n{\n  return DAT_20000a34;\n}\n\n",
            "renaming": {
                "FUN_08003760": "get_data_08003760"
            },
            "calling": [
                "FUN_08003b8c",
                "FUN_08005460",
                "FUN_080067ac",
                "FUN_08008500",
                "FUN_0800376c",
                "FUN_08007e74",
                "FUN_080058d2",
                "FUN_08003a20",
                "FUN_080066e8",
                "FUN_08003e20",
                "FUN_0800723c",
                "FUN_08007f0e",
                "FUN_08005aa4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376c": {
            "entrypoint": "0x0800376c",
            "current_name": "calculate_performance_0800376c",
            "code": "\nundefined4 calculatePerformance_0800376c(uint **inputParams,uint limit)\n\n{\n  int startValue;\n  uint performanceFactor;\n  int iterationCount;\n  undefined4 result;\n  uint *dataPointer;\n  uint calculationResult;\n  uint currentValue;\n  \n  currentValue = 0;\n  startValue = get_data_08003760();\n  calculationResult = DAT_20000018;\n  dataPointer = *inputParams;\n  if ((dataPointer[2] & 0x100) == 0) {\n    if (((dataPointer[1] & 0x100) == 0) && ((dataPointer[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**inputParams & 2) != 0) goto LAB_0800387e;\n      } while ((limit == 0xffffffff) ||\n              ((limit != 0 && (iterationCount = get_data_08003760(), (uint)(iterationCount - startValue) <= limit))));\n      inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n      *(undefined *)(inputParams + 9) = 0;\n      result = 3;\n    }\n    else {\n      performanceFactor = calculate_performance_08005bb8(2);\n      dataPointer = *inputParams;\n      if (((dataPointer[4] & 0x24924924) == 0) && ((dataPointer[3] & 0x924924) == 0)) {\n        if ((dataPointer[4] & 0x12492492) == 0) {\n          if ((dataPointer[3] & 0x492492) == 0) {\n            iterationCount = 0x14;\n          }\n          else {\n            iterationCount = 0x29;\n          }\n        }\n        else {\n          iterationCount = 0x29;\n        }\n      }\n      else if (((dataPointer[4] & 0x12492492) == 0) && ((dataPointer[3] & 0x492492) == 0)) {\n        iterationCount = 0x54;\n      }\n      else if ((dataPointer[4] & 0x249249) == 0) {\n        if ((dataPointer[3] & 0x249249) == 0) {\n          iterationCount = 0x54;\n        }\n        else {\n          iterationCount = 0xfc;\n        }\n      }\n      else {\n        iterationCount = 0xfc;\n      }\n      calculationResult = (calculationResult / performanceFactor) * iterationCount;\n      for (; currentValue <= calculationResult && calculationResult - currentValue != 0; currentValue = currentValue + 1) {\n        if ((limit != 0xffffffff) &&\n           ((limit == 0 || (iterationCount = get_data_08003760(), limit < (uint)(iterationCount - startValue))))) {\n          inputParams[10] = (uint *)((uint)inputParams[10] | 4);\n          *(undefined *)(inputParams + 9) = 0;\n          return 3;\n        }\n      }\nLAB_0800387e:\n      **inputParams = 0xffffffed;\n      inputParams[10] = (uint *)((uint)inputParams[10] | 0x200);\n      if (((*inputParams)[2] & 0xe0000) == 0xe0000) {\n        if (inputParams[3] == (uint *)0x0) {\n          inputParams[10] = (uint *)((uint)inputParams[10] & 0xfffffeff);\n          if (((uint)inputParams[10] & 0x1000) == 0) {\n            inputParams[10] = (uint *)((uint)inputParams[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    inputParams[10] = (uint *)((uint)inputParams[10] | 0x20);\n    *(undefined *)(inputParams + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800376c": "calculate_performance_0800376c",
                "param_1": "inputParams",
                "param_2": "limit",
                "iVar1": "startValue",
                "uVar2": "performanceFactor",
                "iVar3": "iterationCount",
                "uVar4": "result",
                "puVar5": "dataPointer",
                "uVar6": "calculationResult",
                "local_1c": "currentValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038dc": {
            "entrypoint": "0x080038dc",
            "current_name": "get_offset_value_080038dc",
            "code": "\nundefined4 getOffsetValue_080038dc(int *ptr)\n\n{\n  return *(undefined4 *)(*ptr + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_080038dc": "get_offset_value_080038dc",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038e4": {
            "entrypoint": "0x080038e4",
            "current_name": "update_config_080038e4",
            "code": "\nundefined4 updateConfig_080038e4(int *configArray,uint *valuesArray)\n\n{\n  undefined4 returnValue;\n  uint tempValue;\n  int counter;\n  \n  if (*(char *)(configArray + 9) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(configArray + 9) = 1;\n    tempValue = valuesArray[1];\n    if (tempValue < 7) {\n      tempValue = tempValue * 5 - 5;\n      *(uint *)(*configArray + 0x34) =\n           *valuesArray << (tempValue & 0xff) | *(uint *)(*configArray + 0x34) & ~(0x1f << (tempValue & 0xff));\n    }\n    else if (tempValue < 0xd) {\n      tempValue = tempValue * 5 - 0x23;\n      *(uint *)(*configArray + 0x30) =\n           *valuesArray << (tempValue & 0xff) | *(uint *)(*configArray + 0x30) & ~(0x1f << (tempValue & 0xff));\n    }\n    else {\n      tempValue = tempValue * 5 - 0x41;\n      *(uint *)(*configArray + 0x2c) =\n           *valuesArray << (tempValue & 0xff) | *(uint *)(*configArray + 0x2c) & ~(0x1f << (tempValue & 0xff));\n    }\n    tempValue = *valuesArray;\n    if (tempValue < 10) {\n      *(uint *)(*configArray + 0x10) =\n           valuesArray[2] << (tempValue * 3 & 0xff) |\n           *(uint *)(*configArray + 0x10) & ~(7 << (tempValue * 3 & 0xff));\n    }\n    else {\n      tempValue = tempValue * 3 - 0x1e;\n      *(uint *)(*configArray + 0xc) =\n           valuesArray[2] << (tempValue & 0xff) | *(uint *)(*configArray + 0xc) & ~(7 << (tempValue & 0xff));\n    }\n    if (*valuesArray - 0x10 < 2) {\n      if (*configArray == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*valuesArray == 0x10) {\n            for (counter = (DAT_20000018 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            returnValue = 0;\n          }\n          else {\n            returnValue = 0;\n          }\n        }\n        else {\n          returnValue = 0;\n        }\n      }\n      else {\n        configArray[10] = configArray[10] | 0x20;\n        returnValue = 1;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n    *(undefined *)(configArray + 9) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080038e4": "update_config_080038e4",
                "param_1": "configArray",
                "param_2": "valuesArray",
                "uVar1": "returnValue",
                "uVar2": "tempValue",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a1c": {
            "entrypoint": "0x08003a1c",
            "current_name": "get_value_at_offset_08003a1c",
            "code": "\nundefined4 getValueAtOffset_08003a1c(int address)\n\n{\n  return *(undefined4 *)(address + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08003a1c": "get_value_at_offset_08003a1c",
                "param_1": "address"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a20": {
            "entrypoint": "0x08003a20",
            "current_name": "disable_and_check_flag_08003a20",
            "code": "\nundefined4 disableAndCheckFlag_08003a20(int *dataPtr,undefined4 flag)\n\n{\n  int result;\n  undefined4 returnValue;\n  int data;\n  uint counter;\n  \n  data = *dataPtr;\n  if ((*(uint *)(data + 8) & 1) == 0) {\n    *(uint *)(data + 8) = *(uint *)(data + 8) | 1;\n    for (counter = DAT_20000018 / 1000000; counter != 0; counter = counter - 1) {\n    }\n    data = get_data_08003760(dataPtr,flag,DAT_20000018 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPtr + 8) & 1) != 0) {\n        return 0;\n      }\n      result = get_data_08003760();\n    } while ((uint)(result - data) < 3);\n    dataPtr[10] = dataPtr[10] | 0x10;\n    dataPtr[0xb] = dataPtr[0xb] | 1;\n    *(undefined *)(dataPtr + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003a20": "disable_and_check_flag_08003a20",
                "param_1": "dataPtr",
                "param_2": "flag",
                "iVar1": "result",
                "iVar3": "data",
                "uVar2": "returnValue",
                "local_14": "counter"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_08003aa0"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003aa0": {
            "entrypoint": "0x08003aa0",
            "current_name": "initialize_flags_08003aa0",
            "code": "\n\n\nint initializeFlags_08003aa0(int *flags)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(flags + 9) != '\\x01') {\n    *(undefined *)(flags + 9) = 1;\n    result = disable_and_check_flag_08003a20();\n    if (result == 0) {\n      flags[10] = flags[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*flags;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        flags[10] = flags[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          flags[10] = flags[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        flags[10] = flags[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          flags[10] = flags[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((flags[10] & 0x1000U) == 0) {\n        flags[0xb] = 0;\n      }\n      else {\n        flags[0xb] = flags[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(flags + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *flags;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(flags + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08003aa0": "initialize_flags_08003aa0",
                "param_1": "flags",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003a20"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b8c": {
            "entrypoint": "0x08003b8c",
            "current_name": "update_data_08003b8c",
            "code": "\nundefined4 updateData_08003b8c(int *dataPtr)\n\n{\n  int currentData;\n  int initialData;\n  \n  initialData = *dataPtr;\n  if ((*(uint *)(initialData + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(initialData + 8) = *(uint *)(initialData + 8) & 0xfffffffe;\n  initialData = get_data_08003760();\n  do {\n    if ((*(uint *)(*dataPtr + 8) & 1) == 0) {\n      return 0;\n    }\n    currentData = get_data_08003760();\n  } while ((uint)(currentData - initialData) < 3);\n  dataPtr[10] = dataPtr[10] | 0x10;\n  dataPtr[0xb] = dataPtr[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003b8c": "update_data_08003b8c",
                "param_1": "dataPtr",
                "iVar1": "currentData",
                "iVar2": "initialData"
            },
            "calling": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08003e20",
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003bd8": {
            "entrypoint": "0x08003bd8",
            "current_name": "update_param_values_08003bd8",
            "code": "\nundefined4 update_param_values_08003bd8(int *param_array)\n\n{\n  int update_result;\n  uint combined_values;\n  uint secondary_value;\n  \n  if (param_array == (int *)0x0) {\n    return 1;\n  }\n  if (flag_value == 0) {\n    flag_update = 0;\n    *(undefined *)(param_array + 9) = 0;\n    update_offset_and_param_values();\n  }\n  update_result = update_data_result(param_array);\n  if (((flag_value & 0x10U) == 0) && (update_result == 0)) {\n    flag_value = flag_value & 0xffffeefdU | 2;\n    combined_values = param_1_value | param_2_value | param_3_value << 1;\n    if (param_4_value == 0x100) {\n      secondary_value = 0x100;\n    }\n    else {\n      secondary_value = 0;\n      if (param_4_value == 1) {\n        secondary_value = 0x100;\n      }\n    }\n    if (param_5_value == 1) {\n      if (param_3_value == 0) {\n        secondary_value = secondary_value | (param_6_value + -1) * 0x2000 | 0x800;\n      }\n      else {\n        flag_value = flag_value | 0x20;\n        flag_update = flag_update | 1;\n      }\n    }\n    *(uint *)(*param_array + 4) = secondary_value | *(uint *)(*param_array + 4) & 0xffff16ff;\n    *(uint *)(*param_array + 8) = *(uint *)(*param_array + 8) & 0xffe1f7fd | combined_values;\n    if ((param_4_value == 0x100) || (param_4_value == 1)) {\n      secondary_value = (param_7_value + -1) * 0x100000;\n    }\n    else {\n      secondary_value = 0;\n    }\n    *(uint *)(*param_array + 0x2c) = secondary_value | *(uint *)(*param_array + 0x2c) & 0xff0fffff;\n    if (combined_values != (*(uint *)(*param_array + 8) & 0xff1f0efe)) {\n      flag_value = flag_value & 0xffffffedU | 0x10;\n      flag_update = flag_update | 1;\n      return 1;\n    }\n    flag_update = 0;\n    flag_value = flag_value & 0xfffffffcU | 1;\n    return 0;\n  }\n  flag_value = flag_value | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003bd8": "update_param_values_08003bd8",
                "param_1": "param_array",
                "iVar1": "update_result",
                "uVar2": "combined_values",
                "uVar3": "secondary_value",
                "update_offset_and_param_08006ca8": "update_offset_and_param_values",
                "update_data_08003b8c": "update_data_result",
                "param_1[10]": "flag_value",
                "param_1[0xb]": "flag_update",
                "param_1[1]": "param_1_value",
                "param_1[7]": "param_2_value",
                "param_1[3]": "param_3_value",
                "param_1[2]": "param_4_value",
                "param_1[5]": "param_5_value",
                "param_1[6]": "param_6_value",
                "param_1[4]": "param_7_value"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006ca8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ce8": {
            "entrypoint": "0x08003ce8",
            "current_name": "configure_data_08003ce8",
            "code": "\nint configureData_08003ce8(int *configParams)\n\n{\n  int result;\n  \n  if (configParams == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    configParams[10] = configParams[10] | 2;\n    result = update_data_08003b8c();\n    if (result == 0) {\n      *(undefined4 *)*configParams = 0xffffffe0;\n      *(uint *)(*configParams + 4) = *(uint *)(*configParams + 4) & 0xff3f0000;\n      *(uint *)(*configParams + 8) = *(uint *)(*configParams + 8) & 0xff0106f0;\n      *(uint *)(*configParams + 0xc) = *(uint *)(*configParams + 0xc) & 0xff000000;\n      *(uint *)(*configParams + 0x10) = *(uint *)(*configParams + 0x10) & 0xc0000000;\n      *(uint *)(*configParams + 0x14) = *(uint *)(*configParams + 0x14) & 0xfffff000;\n      *(uint *)(*configParams + 0x18) = *(uint *)(*configParams + 0x18) & 0xfffff000;\n      *(uint *)(*configParams + 0x1c) = *(uint *)(*configParams + 0x1c) & 0xfffff000;\n      *(uint *)(*configParams + 0x20) = *(uint *)(*configParams + 0x20) & 0xfffff000;\n      *(uint *)(*configParams + 0x24) = *(uint *)(*configParams + 0x24) & 0xfffff000;\n      *(uint *)(*configParams + 0x28) = *(uint *)(*configParams + 0x28) & 0xfffff000;\n      *(uint *)(*configParams + 0x2c) = *(uint *)(*configParams + 0x2c) & 0xff000000;\n      *(uint *)(*configParams + 0x2c) = *(uint *)(*configParams + 0x2c) & 0xff000000;\n      *(uint *)(*configParams + 0x30) = *(uint *)(*configParams + 0x30) & 0xc0000000;\n      *(uint *)(*configParams + 0x34) = *(uint *)(*configParams + 0x34) & 0xc0000000;\n      *(uint *)(*configParams + 0x38) = *(uint *)(*configParams + 0x38) & 0xffc00000;\n      *(uint *)(*configParams + 0x38) = *(uint *)(*configParams + 0x38) & 0xffc00000;\n      update_configuration_08006d24(configParams);\n      configParams[0xb] = 0;\n      configParams[10] = 0;\n    }\n    *(undefined *)(configParams + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003ce8": "configure_data_08003ce8",
                "param_1": "configParams",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08006d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003de4": {
            "entrypoint": "0x08003de4",
            "current_name": "update_data_status_08003de4",
            "code": "\nint update_data_status_08003de4(int data_ptr)\n\n{\n  int result;\n  \n  if (*(char *)(data_ptr + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data_ptr + 0x24) = 1;\n  result = update_data();\n  if (result == 0) {\n    *(uint *)(data_ptr + 0x28) = *(uint *)(data_ptr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(data_ptr + 0x24) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003de4": "update_data_status_08003de4",
                "param_1": "data_ptr",
                "iVar1": "result",
                "update_data_08003b8c": "update_data"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e20": {
            "entrypoint": "0x08003e20",
            "current_name": "check_and_update_data_08003e20",
            "code": "\nint checkAndUpdateData_08003e20(int *data)\n\n{\n  uint constant;\n  int result;\n  uint performance;\n  int start;\n  int current;\n  int iterationCount;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_data_08003b8c();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    constant = DAT_20000018;\n    performance = calculate_performance_08005bb8(2);\n    for (iterationCount = constant / performance << 1; iterationCount != 0; iterationCount = iterationCount + -1) {\n    }\n    disable_and_check_flag_08003a20(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    start = get_data_08003760();\n    while (current = *data, (*(uint *)(current + 8) & 8) != 0) {\n      current = get_data_08003760();\n      if (10 < (uint)(current - start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(current + 8) = *(uint *)(current + 8) | 4;\n    start = get_data_08003760();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      current = get_data_08003760();\n      if (10 < (uint)(current - start)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003e20": "check_and_update_data_08003e20",
                "param_1": "data",
                "uVar1": "constant",
                "iVar2": "result",
                "uVar3": "performance",
                "iVar4": "start",
                "iVar5": "current",
                "local_14": "iterationCount"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08003b8c",
                "FUN_08003a20",
                "FUN_08003760",
                "FUN_08005bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f0c": {
            "entrypoint": "0x08003f0c",
            "current_name": "update_configuration_08003f0c",
            "code": "\n\n\nvoid updateConfiguration_08003f0c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f0c": "update_configuration_08003f0c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08003724",
                "FUN_08008f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f30": {
            "entrypoint": "0x08003f30",
            "current_name": "apply_mask_and_store_08003f30",
            "code": "\n\n\nvoid applyMaskAndStore_08003f30(uint address,uint mask,uint data)\n\n{\n  uint shiftedBits;\n  uint bitOffset;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  bitOffset = 7 - shiftedBits;\n  if (3 < bitOffset) {\n    bitOffset = 4;\n  }\n  if (shiftedBits + 4 < 7) {\n    shiftedBits = 0;\n  }\n  else {\n    shiftedBits = shiftedBits - 3;\n  }\n  shiftedBits = (mask & (1 << (bitOffset & 0xff)) - 1U) << (shiftedBits & 0xff) |\n          (1 << (shiftedBits & 0xff)) - 1U & data;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftedBits << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftedBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f30": "apply_mask_and_store_08003f30",
                "param_1": "address",
                "param_2": "mask",
                "param_3": "data",
                "uVar1": "shiftedBits",
                "uVar2": "bitOffset"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080036d8",
                "FUN_080077b0",
                "FUN_080035b8",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "set_bit_at_index_08003f94",
            "code": "\nvoid setBitAtIndex_08003f94(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "set_bit_at_index_08003f94",
                "param_1": "index"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080077b0",
                "FUN_08008694",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fb0": {
            "entrypoint": "0x08003fb0",
            "current_name": "set_bit_in_memory_08003fb0",
            "code": "\nvoid setBitInMemory_08003fb0(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n    DataSynchronizationBarrier(0xf);\n    InstructionSynchronizationBarrier(0xf);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fb0": "set_bit_in_memory_08003fb0",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd8": {
            "entrypoint": "0x08003fd8",
            "current_name": "set_parameters_08003fd8",
            "code": "\n\n\nundefined4 set_parameters_08003fd8(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003fd8": "set_parameters_08003fd8",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_080036d8",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004004": {
            "entrypoint": "0x08004004",
            "current_name": "set_bit_at_position_08004004",
            "code": "\nvoid setBitAtPosition_08004004(uint position)\n\n{\n  if (-1 < intPosition) {\n    *(int *)(((position >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (position & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004004": "set_bit_at_position_08004004",
                "param_1": "position",
                "(int)param_1": "intPosition"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004024": {
            "entrypoint": "0x08004024",
            "current_name": "set_flag_08004024",
            "code": "\n\n\nvoid setFlag_08004024(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004024": "set_flag_08004024",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004044": {
            "entrypoint": "0x08004044",
            "current_name": "FUNC_08004044",
            "code": "\nvoid FUNC_08004044(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004044": "FUNC_08004044"
            },
            "calling": [
                "FUN_08004046"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004046": {
            "entrypoint": "0x08004046",
            "current_name": "call_initialize_process_08004046",
            "code": "\nvoid callInitializeProcess_08004046(void)\n\n{\n  FUNC_08004044();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004046": "call_initialize_process_08004046"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [
                "FUN_08004044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004050": {
            "entrypoint": "0x08004050",
            "current_name": "initialize_flags_08004050",
            "code": "\n\n\nundefined4 initializeFlags_08004050(uint **flags)\n\n{\n  uint *currentFlag;\n  \n  if (*(char *)((int)flags + 0x21) != '\\x02') {\n    flags[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **flags = **flags & 0xfffffff1;\n  **flags = **flags & 0xfffffffe;\n  currentFlag = *flags;\n  if (currentFlag == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentFlag == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentFlag == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentFlag == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentFlag == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentFlag == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)flags + 0x21) = 1;\n  *(undefined *)(flags + 8) = 0;\n  if (flags[0xd] != (uint *)0x0) {\n    (*(code *)flags[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004050": "initialize_flags_08004050",
                "param_1": "flags",
                "puVar1": "currentFlag"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "update_param_080040e8",
            "code": "\n\n\nvoid updateParam_080040e8(uint *paramArray,uint *inputParams)\n\n{\n  uint *ptr;\n  uint bitMask;\n  uint bitValue;\n  uint index;\n  uint tempValue;\n  uint newValue;\n  int shift1;\n  int shift2;\n  \n  newValue = 0;\n  index = 0;\n  do {\n    if (0xf < index) {\n      return;\n    }\n    bitMask = 1 << (index & 0xff);\n    bitValue = *inputParams & bitMask;\n    if (bitMask == bitValue) {\n      tempValue = inputParams[1];\n      if (tempValue == 0x12) {\n        newValue = inputParams[3] + 0xc;\n      }\n      else if (tempValue < 0x13) {\n        if (tempValue == 2) {\n          newValue = inputParams[3] + 8;\n        }\n        else if (tempValue < 3) {\n          if (tempValue == 0) goto LAB_0800423a;\n          if (tempValue == 1) {\n            newValue = inputParams[3];\n          }\n        }\n        else if (tempValue == 3) {\n          newValue = 0;\n        }\n        else if (tempValue == 0x11) {\n          newValue = inputParams[3] + 4;\n        }\n      }\n      else if (tempValue == 0x10210000) {\nLAB_0800423a:\n        if (inputParams[2] == 0) {\n          newValue = 4;\n        }\n        else if (inputParams[2] == 1) {\n          paramArray[4] = bitMask;\n          newValue = 8;\n        }\n        else {\n          paramArray[5] = bitMask;\n          newValue = 8;\n        }\n      }\n      else if (tempValue < 0x10210001) {\n        if ((tempValue == 0x10110000) || (tempValue == 0x10120000)) goto LAB_0800423a;\n      }\n      else if ((tempValue == 0x10310000) || ((tempValue == 0x10320000 || (tempValue == 0x10220000))))\n      goto LAB_0800423a;\n      bitMask = index;\n      ptr = paramArray;\n      if (0xff < bitValue) {\n        bitMask = index - 8;\n        ptr = paramArray + 1;\n      }\n      *ptr = *ptr & ~(0xf << (bitMask << 2 & 0xff)) | newValue << (bitMask << 2 & 0xff);\n      if ((inputParams[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift1 = (index & 3) << 2;\n        if (paramArray == (uint *)0x40010800) {\n          shift2 = 0;\n        }\n        else if (paramArray == (uint *)0x40010c00) {\n          shift2 = 1;\n        }\n        else if (paramArray == (uint *)0x40011000) {\n          shift2 = 2;\n        }\n        else if (paramArray == (uint *)0x40011400) {\n          shift2 = 3;\n        }\n        else {\n          shift2 = 4;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40010000) & ~(0xf << shift1) | shift2 << shift1;\n        if ((inputParams[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if ((inputParams[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if ((inputParams[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if ((inputParams[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040e8": "update_param_080040e8",
                "param_1": "paramArray",
                "param_2": "inputParams",
                "puVar1": "ptr",
                "uVar2": "bitMask",
                "uVar3": "bitValue",
                "uVar4": "index",
                "uVar5": "tempValue",
                "uVar6": "newValue",
                "iVar7": "shift1",
                "iVar8": "shift2"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042d4": {
            "entrypoint": "0x080042d4",
            "current_name": "check_bit_080042d4",
            "code": "\nundefined4 check_bit_080042d4(int input_param,uint bit_mask)\n\n{\n  if ((bit_mask & *(uint *)(input_param + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042d4": "check_bit_080042d4",
                "param_1": "input_param",
                "param_2": "bit_mask"
            },
            "calling": [
                "FUN_080072f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e2": {
            "entrypoint": "0x080042e2",
            "current_name": "set_param_value_080042e2",
            "code": "\nvoid set_param_value_080042e2(int data_address,int new_value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(data_address + 0x10) = new_value << 0x10;\n    return;\n  }\n  *(int *)(data_address + 0x10) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042e2": "set_param_value_080042e2",
                "param_1": "data_address",
                "param_2": "new_value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_080072d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042f0": {
            "entrypoint": "0x080042f0",
            "current_name": "update_and_process_data_080042f0",
            "code": "\n\n\nvoid update_and_process_data_080042f0(uint data)\n\n{\n  if ((_DAT_40010414 & data) != 0) {\n    _DAT_40010414 = data;\n    check_and_process_data_08009094();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042f0": "update_and_process_data_080042f0",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_08009094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800430c": {
            "entrypoint": "0x0800430c",
            "current_name": "update_status_0800430c",
            "code": "\nundefined4 updateStatus_0800430c(int *status)\n\n{\n  if (*(char *)((int)status + 0x3e) == '@') {\n    if (statusFlag == 0) {\n      *(uint *)(*status + 0x10) = statusValue & 0xfe;\n    }\n    else {\n      *(uint *)(*status + 0x10) = statusValue & 0xffU | 1;\n    }\n  }\n  else if (status[4] == 0x4000) {\n    if (*(char *)((int)status + 0x3d) == '!') {\n      *(uint *)(*status + 0x10) = statusValue & 0xfe;\n    }\n    else {\n      *(uint *)(*status + 0x10) = statusValue & 0xffU | 1;\n    }\n  }\n  else if (statusFlag == 0) {\n    *(uint *)(*status + 0x10) = (uint)(statusValue << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (statusFlag == 1) {\n    *(uint *)(*status + 0x10) = (uint)(statusValue << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800430c": "update_status_0800430c",
                "param_1": "status",
                "param_1[0x14]": "statusFlag",
                "param_1[0x11]": "statusValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004396": {
            "entrypoint": "0x08004396",
            "current_name": "update_memory_value_08004396",
            "code": "\nundefined4 update_memory_value_08004396(int *memory_address)\n\n{\n  *(uint *)(*memory_address + 0x10) = memory_address[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004396": "update_memory_value_08004396",
                "param_1": "memory_address"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043a2": {
            "entrypoint": "0x080043a2",
            "current_name": "update_flags_080043a2",
            "code": "\nundefined4 updateFlags_080043a2(uint **parameters)\n\n{\n  uint *tempPtr1;\n  \n  tempPtr1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (tempPtr1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          tempPtr1 = *parameters;\n          if ((tempPtr1[1] & 0x800) == 0) {\n            *tempPtr1 = *tempPtr1 | 0x200;\n          }\n          else {\n            *tempPtr1 = *tempPtr1 & 0xfffffbff;\n          }\n        }\n        else if (((tempPtr1 == (uint *)0x4) || (tempPtr1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters | 0x800;\n          **parameters = **parameters & 0xfffffbff;\n        }\n        tempPtr1 = *parameters;\n        if ((tempPtr1[1] & 0x800) != 0) {\n          tempPtr1[1] = tempPtr1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        tempPtr1 = *parameters;\n        if ((tempPtr1[1] & 0x800) != 0) {\n          tempPtr1[1] = tempPtr1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080043a2": "update_flags_080043a2",
                "param_1": "parameters",
                "puVar1": "tempPtr1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800457c": {
            "entrypoint": "0x0800457c",
            "current_name": "update_and_decrement_0800457c",
            "code": "\nundefined4 updateAndDecrement_0800457c(int *ptr)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)ptr + 0x2a) != 0) {\n    bytePtr = (byte *)ptr[9];\n    ptr[9] = (int)(bytePtr + 1);\n    *(uint *)(*ptr + 0x10) = (uint)*bytePtr;\n    *(short *)((int)ptr + 0x2a) = *(short *)((int)ptr + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800457c": "update_and_decrement_0800457c",
                "param_1": "ptr",
                "pbVar1": "bytePtr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800459c": {
            "entrypoint": "0x0800459c",
            "current_name": "update_data_0800459c",
            "code": "\nundefined4 updateData_0800459c(int *data)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800459c": "update_data_0800459c",
                "param_1": "data",
                "puVar1": "ptr"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045bc": {
            "entrypoint": "0x080045bc",
            "current_name": "FUNC_080045bc",
            "code": "\nvoid FUNC_080045bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080045bc": "FUNC_080045bc"
            },
            "calling": [
                "FUN_080045c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080045c0": {
            "entrypoint": "0x080045c0",
            "current_name": "calculate_parameters_080045c0",
            "code": "\nundefined4 calculateParameters_080045c0(uint **paramPointer)\n\n{\n  bool isConditionMet;\n  uint shiftedValue;\n  uint *countPointer;\n  uint calculatedValue;\n  \n  if (paramPointer == (uint **)0x0) {\n    return 1;\n  }\n  if (*(char *)((int)paramPointer + 0x3d) == '\\0') {\n    *(undefined *)(paramPointer + 0xf) = 0;\n    FUNC_080045bc();\n  }\n  *(undefined *)((int)paramPointer + 0x3d) = 0x24;\n  **paramPointer = **paramPointer & 0xfffffffe;\n  shiftedValue = get_shifted_value_08005a28();\n  if (paramPointer[1] < (uint *)0x186a1) {\n    if (shiftedValue < 2000000) {\n      isConditionMet = true;\n    }\n    else {\n      isConditionMet = false;\n    }\n  }\n  else {\n    isConditionMet = shiftedValue < 4000000;\n  }\n  if (isConditionMet) {\n    return 1;\n  }\n  calculatedValue = shiftedValue / 1000000;\n  (*paramPointer)[1] = calculatedValue;\n  if ((uint *)0x186a0 < paramPointer[1]) {\n    calculatedValue = (calculatedValue * 300) / 1000;\n  }\n  (*paramPointer)[8] = calculatedValue + 1;\n  countPointer = paramPointer[1];\n  if (countPointer < (uint *)0x186a1) {\n    shiftedValue = (shiftedValue - 1) / (uint)((int)countPointer << 1) + 1 & 0xfff;\n    if (shiftedValue < 4) {\n      shiftedValue = 4;\n    }\n  }\n  else {\n    if (paramPointer[2] == (uint *)0x0) {\n      calculatedValue = (shiftedValue - 1) / (uint)((int)countPointer * 3);\n    }\n    else {\n      calculatedValue = (shiftedValue - 1) / (uint)((int)countPointer * 0x19);\n    }\n    if ((calculatedValue + 1 & 0xfff) == 0) {\n      shiftedValue = 1;\n    }\n    else if (paramPointer[2] == (uint *)0x0) {\n      shiftedValue = (shiftedValue - 1) / (uint)((int)countPointer * 3) + 1 & 0xfff | 0x8000;\n    }\n    else {\n      shiftedValue = (shiftedValue - 1) / (uint)((int)countPointer * 0x19) + 1 & 0xfff | 0xc000;\n    }\n  }\n  (*paramPointer)[7] = shiftedValue;\n  **paramPointer = (uint)paramPointer[7] | (uint)paramPointer[8];\n  (*paramPointer)[2] = (uint)paramPointer[4] | (uint)paramPointer[3];\n  (*paramPointer)[3] = (uint)paramPointer[5] | (uint)paramPointer[6];\n  **paramPointer = **paramPointer | 1;\n  paramPointer[0x10] = (uint *)0x0;\n  *(undefined *)((int)paramPointer + 0x3d) = 0x20;\n  paramPointer[0xc] = (uint *)0x0;\n  *(undefined *)((int)paramPointer + 0x3e) = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045c0": "calculate_parameters_080045c0",
                "param_1": "paramPointer",
                "bVar1": "isConditionMet",
                "uVar2": "shiftedValue",
                "puVar3": "countPointer",
                "uVar4": "calculatedValue"
            },
            "calling": [
                "FUN_080077b0"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_080045bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004728": {
            "entrypoint": "0x08004728",
            "current_name": "extract_information_08004728",
            "code": "\nundefined4 extract_information_08004728(uint **data_ptr,uint *param_ptr,uint *result_ptr,undefined2 input_value)\n\n{\n  undefined4 return_value;\n  uint *temp_ptr;\n  int counter;\n  \n  if (*(char *)((int)data_ptr + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data_ptr[0xc] = (uint *)0x0;\n        *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n        *(undefined *)(data_ptr + 0xf) = 0;\n        return 3;\n      }\n      temp_ptr = *data_ptr;\n      counter = counter + -1;\n    } while ((temp_ptr[6] & 2) != 0);\n    if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xf) = 1;\n      if ((*temp_ptr & 1) == 0) {\n        *temp_ptr = *temp_ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x21;\n      *(undefined *)((int)data_ptr + 0x3e) = 0x10;\n      return_value = 0;\n      data_ptr[0x10] = (uint *)0x0;\n      data_ptr[9] = result_ptr;\n      *(undefined2 *)((int)data_ptr + 0x2a) = input_value;\n      data_ptr[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n      data_ptr[0x11] = param_ptr;\n      **data_ptr = **data_ptr | 0x100;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08004728": "extract_information_08004728",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "result_ptr",
                "param_4": "input_value",
                "uVar1": "return_value",
                "puVar2": "temp_ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "process_data_080047f4",
            "code": "\nundefined4 process_data_080047f4(uint **data_ptr,uint *param_2_ptr,uint *param_3_ptr,undefined2 param_4_value)\n\n{\n  undefined4 result;\n  uint *ptr;\n  int counter;\n  \n  if (*(char *)((int)data_ptr + 0x3d) == ' ') {\n    counter = (DAT_20000018 / 25000) * 0x19;\n    do {\n      if (counter == 0) {\n        data_ptr[0xc] = (uint *)0x0;\n        *(undefined *)((int)data_ptr + 0x3d) = 0x20;\n        *(undefined *)(data_ptr + 0xf) = 0;\n        return 3;\n      }\n      ptr = *data_ptr;\n      counter = counter + -1;\n    } while ((ptr[6] & 2) != 0);\n    if (*(char *)(data_ptr + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xf) = 1;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **data_ptr = **data_ptr & 0xfffff7ff;\n      *(undefined *)((int)data_ptr + 0x3d) = 0x22;\n      *(undefined *)((int)data_ptr + 0x3e) = 0x10;\n      result = 0;\n      data_ptr[0x10] = (uint *)0x0;\n      data_ptr[9] = param_3_ptr;\n      *(undefined2 *)((int)data_ptr + 0x2a) = param_4_value;\n      data_ptr[0xb] = (uint *)0xffff0000;\n      *(undefined2 *)(data_ptr + 10) = *(undefined2 *)((int)data_ptr + 0x2a);\n      data_ptr[0x11] = param_2_ptr;\n      **data_ptr = **data_ptr | 0x400;\n      **data_ptr = **data_ptr | 0x100;\n      *(undefined *)(data_ptr + 0xf) = 0;\n      (*data_ptr)[1] = (*data_ptr)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "process_data_080047f4",
                "param_1": "data_ptr",
                "param_2": "param_2_ptr",
                "param_3": "param_3_ptr",
                "param_4": "param_4_value",
                "uVar1": "result",
                "puVar2": "ptr",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048c8": {
            "entrypoint": "0x080048c8",
            "current_name": "update_data_080048c8",
            "code": "\nundefined4 updateData_080048c8(uint **data,uint *value,int size,uint *flag)\n\n{\n  undefined4 result;\n  uint *ptrData;\n  \n  if (*(char *)((int)data + 0x3d) == '(') {\n    if (value == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      ptrData = *data;\n      if ((*ptrData & 1) == 0) {\n        *ptrData = *ptrData | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x29;\n      *(undefined *)((int)data + 0x3e) = 0x20;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = value;\n      *(short *)((int)data + 0x2a) = (short)size;\n      data[0xb] = flag;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080048c8": "update_data_080048c8",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "uVar1": "result",
                "puVar2": "ptrData"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004954": {
            "entrypoint": "0x08004954",
            "current_name": "parse_input_08004954",
            "code": "\nundefined4 parseInput_08004954(uint **inputData,uint *optionalParam,int paramLength,uint *outputParam)\n\n{\n  undefined4 returnValue;\n  uint *tempPtr;\n  \n  if (*(char *)((int)inputData + 0x3d) == '(') {\n    if (optionalParam == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (paramLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(inputData + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputData + 0xf) = 1;\n      tempPtr = *inputData;\n      if ((*tempPtr & 1) == 0) {\n        *tempPtr = *tempPtr | 1;\n      }\n      **inputData = **inputData & 0xfffff7ff;\n      *(undefined *)((int)inputData + 0x3d) = 0x2a;\n      *(undefined *)((int)inputData + 0x3e) = 0x20;\n      returnValue = 0;\n      inputData[0x10] = (uint *)0x0;\n      inputData[9] = optionalParam;\n      *(short *)((int)inputData + 0x2a) = (short)paramLength;\n      inputData[0xb] = outputParam;\n      *(undefined2 *)(inputData + 10) = *(undefined2 *)((int)inputData + 0x2a);\n      *(undefined *)(inputData + 0xf) = 0;\n      (*inputData)[1] = (*inputData)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004954": "parse_input_08004954",
                "param_1": "inputData",
                "param_2": "optionalParam",
                "param_3": "paramLength",
                "param_4": "outputParam",
                "uVar1": "returnValue",
                "puVar2": "tempPtr"
            },
            "calling": [
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049e0": {
            "entrypoint": "0x080049e0",
            "current_name": "initialize_data_structure_080049e0",
            "code": "\nundefined4 initializeDataStructure_080049e0(uint **dataStructure)\n\n{\n  uint *firstElement;\n  \n  if (*(char *)((int)dataStructure + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataStructure + 0x3d) = 0x28;\n  firstElement = *dataStructure;\n  if ((*firstElement & 1) == 0) {\n    *firstElement = *firstElement | 1;\n  }\n  **dataStructure = **dataStructure | 0x400;\n  (*dataStructure)[1] = (*dataStructure)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080049e0": "initialize_data_structure_080049e0",
                "param_1": "dataStructure",
                "puVar1": "firstElement"
            },
            "calling": [
                "FUN_08007f7c",
                "FUN_08008020",
                "FUN_08007f8e",
                "FUN_08007ff0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a1e": {
            "entrypoint": "0x08004a1e",
            "current_name": "FUNC_08004a1e",
            "code": "\nvoid FUNC_08004a1e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a1e": "FUNC_08004a1e"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a20": {
            "entrypoint": "0x08004a20",
            "current_name": "FUNC_08004a20",
            "code": "\nvoid FUNC_08004a20(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a20": "FUNC_08004a20"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a22": {
            "entrypoint": "0x08004a22",
            "current_name": "FUNC_08004a22",
            "code": "\nvoid FUNC_08004a22(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a22": "FUNC_08004a22"
            },
            "calling": [
                "FUN_08004a24",
                "FUN_08004aec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a24": {
            "entrypoint": "0x08004a24",
            "current_name": "update_data_08004a24",
            "code": "\nundefined4 updateData_08004a24(int *data)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a22();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a24": "update_data_08004a24",
                "param_1": "data",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a22"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a74": {
            "entrypoint": "0x08004a74",
            "current_name": "FUNC_08004a74",
            "code": "\nvoid FUNC_08004a74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a74": "FUNC_08004a74"
            },
            "calling": [
                "FUN_08004a76",
                "FUN_08005084"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004a76": {
            "entrypoint": "0x08004a76",
            "current_name": "update_data_08004a76",
            "code": "\nundefined4 updateData_08004a76(int *data)\n\n{\n  char charValue;\n  undefined *pointerToData;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    pointerToData = (undefined *)data[9];\n    data[9] = (int)(pointerToData + 1);\n    *pointerToData = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_08004a74();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004a76": "update_data_08004a76",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "pointerToData"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ac2": {
            "entrypoint": "0x08004ac2",
            "current_name": "process_input_08004ac2",
            "code": "\nundefined4 process_input_08004ac2(int *input_ptr,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  undefined2 output_value;\n  uint input_value;\n  \n  input_value = *(uint *)(*input_ptr + 0x18);\n  if ((input_value & 0x80) == 0) {\n    output_value = *(undefined2 *)(input_ptr + 3);\n  }\n  else {\n    output_value = *(undefined2 *)(input_ptr + 6);\n  }\n  process_input_08004ac2_08007fa0(input_ptr,(*(uint *)(*input_ptr + 0x18) & 4) == 0,output_value,input_value,value_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ac2": "process_input_08004ac2",
                "param_1": "input_ptr",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "output_value",
                "uVar2": "input_value"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08007fa0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004aec": {
            "entrypoint": "0x08004aec",
            "current_name": "initialize_configuration_08004aec",
            "code": "\nundefined4 initialize_configuration_08004aec(uint **config_ptr)\n\n{\n  if (((config_ptr[0xb] == (uint *)0x4) || (config_ptr[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)config_ptr + 0x3d) == '(')) {\n    config_ptr[0xb] = (uint *)0xffff0000;\n    (*config_ptr)[1] = (*config_ptr)[1] & 0xfffff8ff;\n    (*config_ptr)[5] = 0xfffffbff;\n    **config_ptr = **config_ptr & 0xfffffbff;\n    config_ptr[0xc] = (uint *)0x0;\n    *(undefined *)((int)config_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)config_ptr + 0x3e) = 0;\n    initialize_and_execute();\n  }\n  else if (*(char *)((int)config_ptr + 0x3d) == '!') {\n    config_ptr[0xb] = (uint *)0xffff0000;\n    config_ptr[0xc] = (uint *)0x21;\n    *(undefined *)((int)config_ptr + 0x3d) = 0x20;\n    *(undefined *)((int)config_ptr + 0x3e) = 0;\n    (*config_ptr)[1] = (*config_ptr)[1] & 0xfffff8ff;\n    (*config_ptr)[5] = 0xfffffbff;\n    **config_ptr = **config_ptr & 0xfffffbff;\n    FUNC_08004a22();\n  }\n  else {\n    (*config_ptr)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004aec": "initialize_configuration_08004aec",
                "param_1": "config_ptr",
                "initialize_and_execute_08007ff0": "initialize_and_execute"
            },
            "calling": [
                "FUN_080052f0"
            ],
            "called": [
                "FUN_08004a22",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b80": {
            "entrypoint": "0x08004b80",
            "current_name": "FUNC_08004b80",
            "code": "\nvoid FUNC_08004b80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b80": "FUNC_08004b80"
            },
            "calling": [
                "FUN_08004ccc",
                "FUN_08004b82"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b82": {
            "entrypoint": "0x08004b82",
            "current_name": "process_data_08004b82",
            "code": "\nundefined4 processData_08004b82(uint **data)\n\n{\n  char firstChar;\n  uint *ptrValue;\n  \n  firstChar = *(char *)((int)data + 0x3d);\n  ptrValue = data[0xb];\n  if ((*(short *)(data + 10) == 0) && (firstChar == '!')) {\n    if ((ptrValue == (uint *)0x4) || ((ptrValue == (uint *)0x8 || (ptrValue == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08004b80();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[0xc] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_08004a1e();\n    }\n  }\n  else if ((firstChar == '!') || ((*(char *)((int)data + 0x3e) == '@' && (firstChar == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[0x14] == (uint *)0x0) {\n        if (data[0x13] == (uint *)0x1) {\n          (*data)[4] = (uint)data[0x12] & 0xff;\n          data[0x14] = (uint *)((int)data[0x14] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[0x12] << 0x10) >> 0x18;\n          data[0x14] = (uint *)((int)data[0x14] + 1);\n        }\n      }\n      else if (data[0x14] == (uint *)0x1) {\n        (*data)[4] = (uint)data[0x12] & 0xff;\n        data[0x14] = (uint *)((int)data[0x14] + 1);\n      }\n      else if (data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptrValue = data[9];\n          data[9] = (uint *)((int)ptrValue + 1);\n          (*data)[4] = (uint)*(byte *)ptrValue;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptrValue = data[9];\n      data[9] = (uint *)((int)ptrValue + 1);\n      (*data)[4] = (uint)*(byte *)ptrValue;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004b82": "process_data_08004b82",
                "param_1": "data",
                "cVar1": "firstChar",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "update_param_08004ccc",
            "code": "\nundefined4 updateParam_08004ccc(uint **paramList)\n\n{\n  uint *pointer;\n  \n  pointer = paramList[0xb];\n  if (*(char *)((int)paramList + 0x3d) == '!') {\n    if (*(short *)((int)paramList + 0x2a) == 0) {\n      if (((pointer == (uint *)0x4) || (pointer == (uint *)0x8)) || (pointer == (uint *)0xffff0000)) {\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        **paramList = **paramList | 0x200;\n        pointer_4 = (uint *)0x0;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        if (*(char *)((int)paramList + 0x3e) == '@') {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_08004b80();\n        }\n        else {\n          *(undefined *)((int)paramList + 0x3e) = 0;\n          FUNC_08004a1e();\n        }\n      }\n      else {\n        (*paramList)[1] = (*paramList)[1] & 0xfffff8ff;\n        pointer_4 = (uint *)0x11;\n        *(undefined *)((int)paramList + 0x3e) = 0;\n        *(undefined *)((int)paramList + 0x3d) = 0x20;\n        FUNC_08004a1e();\n      }\n    }\n    else {\n      pointer = paramList[9];\n      paramList[9] = (uint *)((int)pointer + 1);\n      (*paramList)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "update_param_08004ccc",
                "param_1": "paramList",
                "puVar1": "pointer",
                "param_1[0xc]": "pointer_4"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a1e",
                "FUN_08004b80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6a": {
            "entrypoint": "0x08004d6a",
            "current_name": "FUNC_08004d6a",
            "code": "\nvoid FUNC_08004d6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d6a": "FUNC_08004d6a"
            },
            "calling": [
                "FUN_08004d6c",
                "FUN_08004e3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004d6c": {
            "entrypoint": "0x08004d6c",
            "current_name": "process_param_08004d6c",
            "code": "\nundefined4 processParam_08004d6c(uint **paramArray)\n\n{\n  uint *tempVar1;\n  \n  if (*(char *)((int)paramArray + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)paramArray + 0x2a) < 4) {\n      if (*(ushort *)((int)paramArray + 0x2a) - 2 < 2) {\n        if (paramArray[0xb] == (uint *)0x2) {\n          **paramArray = **paramArray | 0x400;\n        }\n        else {\n          **paramArray = **paramArray & 0xfffffbff;\n          **paramArray = **paramArray | 0x800;\n        }\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffffbff;\n      }\n      else {\n        if (paramArray[0xb] == (uint *)0x2) {\n          **paramArray = **paramArray | 0x400;\n        }\n        else {\n          **paramArray = **paramArray & 0xfffffbff;\n        }\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        tempVar1 = paramArray[9];\n        paramArray[9] = (uint *)((int)tempVar1 + 1);\n        *(char *)tempVar1 = (char)(*paramArray)[4];\n        *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        paramArray[0xc] = (uint *)0x0;\n        if (*(char *)((int)paramArray + 0x3e) == '@') {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08004d6a();\n        }\n        else {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08004a20();\n        }\n      }\n    }\n    else {\n      tempVar1 = paramArray[9];\n      paramArray[9] = (uint *)((int)tempVar1 + 1);\n      *(char *)tempVar1 = (char)(*paramArray)[4];\n      *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004d6c": "process_param_08004d6c",
                "param_1": "paramArray",
                "puVar1": "tempVar1"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e3c": {
            "entrypoint": "0x08004e3c",
            "current_name": "update_value_and_state_08004e3c",
            "code": "\nundefined4 updateValueAndState_08004e3c(uint **param)\n\n{\n  uint *currValue;\n  \n  currValue = param[0xb];\n  if (*(short *)((int)param + 0x2a) == 3) {\n    if (((currValue == (uint *)0x4) || (currValue == (uint *)0x8)) || (currValue == (uint *)0xffff0000)) {\n      **param = **param & 0xfffffbff;\n    }\n    currValue = nextValueAddress;\n    nextValueAddress = (uint *)((int)currValue + 1);\n    *(char *)currValue = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 2) {\n    if (((currValue == (uint *)0x4) || (currValue == (uint *)0x8)) || (currValue == (uint *)0xffff0000)) {\n      (*param)[1] = (*param)[1] & 0xfffffcff;\n      **param = **param | 0x200;\n    }\n    else {\n      if (currValue == (uint *)0x2) {\n        **param = **param | 0x400;\n      }\n      else {\n        **param = **param & 0xfffffbff;\n      }\n      (*param)[1] = (*param)[1] & 0xfffffcff;\n    }\n    currValue = nextValueAddress;\n    nextValueAddress = (uint *)((int)currValue + 1);\n    *(char *)currValue = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    currValue = nextValueAddress;\n    nextValueAddress = (uint *)((int)currValue + 1);\n    *(char *)currValue = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    param[0xc] = (uint *)0x0;\n    if (*(char *)((int)param + 0x3e) == '@') {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08004d6a();\n    }\n    else {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08004a20();\n    }\n  }\n  else {\n    currValue = nextValueAddress;\n    nextValueAddress = (uint *)((int)currValue + 1);\n    *(char *)currValue = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e3c": "update_value_and_state_08004e3c",
                "param_1": "param",
                "puVar1": "currValue",
                "param_1[9]": "nextValueAddress"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004a20",
                "FUN_08004d6a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3a": {
            "entrypoint": "0x08004f3a",
            "current_name": "FUNC_08004f3a",
            "code": "\nvoid FUNC_08004f3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3a": "FUNC_08004f3a"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_function_08004f3c",
            "code": "\nvoid initializeFunction_08004f3c(uint **parameters)\n\n{\n  int indexVar;\n  uint *tempPointer;\n  uint *pointer;\n  \n  if (*(byte *)((int)parameters + 0x3d) - 0x29 < 2) {\n    resultPointer1 = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)parameters + 0x3d) != '`') && (((*parameters)[1] & 0x800) == 0)) {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n    }\n    resultPointer1 = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n  }\n  **parameters = **parameters & 0xfffff7ff;\n  pointer = *parameters;\n  if ((pointer[1] & 0x800) == 0) {\n    if (*(char *)((int)parameters + 0x3d) == '`') {\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0x10] = (uint *)0x0;\n      if ((pointer[5] & 0x40) != 0) {\n        tempPointer = parameters[9];\n        parameters[9] = (uint *)((int)tempPointer + 1);\n        *(char *)tempPointer = (char)pointer[4];\n      }\n      **parameters = **parameters & 0xfffffffe;\n      FUNC_08004f3a(parameters);\n    }\n    else {\n      if ((pointer[5] & 0x40) != 0) {\n        tempPointer = parameters[9];\n        parameters[9] = (uint *)((int)tempPointer + 1);\n        *(char *)tempPointer = (char)pointer[4];\n      }\n      initializeDataStructure(parameters);\n    }\n  }\n  else {\n    pointer[1] = pointer[1] & 0xfffff7ff;\n    if (*(char *)((int)resultPointer2 + 0x21) == '\\x01') {\n      resultPointer3[0xd] = (uint)addressOfLabel;\n      indexVar = initializeFlags(resultPointer3);\n      if (indexVar != 0) {\n        if (((*parameters)[5] & 0x40) != 0) {\n          pointer = parameters[9];\n          parameters[9] = (uint *)((int)pointer + 1);\n          *(char *)pointer = (char)(*parameters)[4];\n        }\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)resultPointer3[0xd])();\n      }\n    }\n    else {\n      resultPointer2[0xd] = (uint)addressOfLabel;\n      indexVar = initializeFlags(resultPointer2);\n      if (indexVar != 0) {\n        **parameters = **parameters & 0xfffffffe;\n        *(undefined *)((int)parameters + 0x3d) = 0x20;\n        (*(code *)resultPointer2[0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)parameters + 0x3d) == '(') && (((uint)parameters[0x10] & 4) != 0)) {\n    resultPointer4 = (uint *)0xffff0000;\n    resultPointer1 = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x3d) = 0x20;\n    *(undefined *)((int)parameters + 0x3e) = 0;\n    initializeAndExecute(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_function_08004f3c",
                "param_1": "parameters",
                "iVar1": "indexVar",
                "puVar2": "tempPointer",
                "puVar3": "pointer",
                "LAB_080053cc_1": "label",
                "initialize_if_data_structure_not_initialized_08008020": "initializeDataStructure",
                "initialize_flags_08004050": "initializeFlags",
                "param_1[0xc]": "resultPointer1",
                "param_1[0xd]": "resultPointer2",
                "param_1[0xe]": "resultPointer3",
                "param_1[0xb]": "resultPointer4",
                "&LAB_080053cc_1": "addressOfLabel",
                "initialize_and_execute_08007ff0": "initializeAndExecute"
            },
            "calling": [
                "FUN_080052f0",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08008020",
                "FUN_08004050",
                "FUN_08004f3a",
                "FUN_08007ff0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005084": {
            "entrypoint": "0x08005084",
            "current_name": "initialize_and_execute_08005084",
            "code": "\nundefined4 initialize_and_execute_08005084(uint **parameters)\n\n{\n  char character;\n  uint *pointer1;\n  uint *pointer2;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n  **parameters = **parameters | 1;\n  **parameters = **parameters & 0xfffffbff;\n  pointer1 = *parameters;\n  if ((pointer1[1] & 0x800) != 0) {\n    if ((*(char *)((int)parameters + 0x3d) == '\\\"') || (*(char *)((int)parameters + 0x3d) == '*')) {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xe] + 4);\n    }\n    else {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)parameters + 0x2a) != 0) {\n    if ((pointer1[5] & 4) != 0) {\n      pointer2 = parameters[9];\n      parameters[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer1[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    if (((*parameters)[5] & 0x40) != 0) {\n      pointer1 = parameters[9];\n      parameters[9] = (uint *)((int)pointer1 + 1);\n      *(char *)pointer1 = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n  }\n  if (parameters[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      parameters[0xb] = (uint *)0xffff0000;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      initialize_and_execute_08005084_08007ff0();\n    }\n    else if ((parameters[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_08004a74();\n    }\n  }\n  else {\n    initialize_function_08004f3c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005084": "initialize_and_execute_08005084",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "pointer1",
                "puVar3": "pointer2"
            },
            "calling": [
                "FUN_08005188"
            ],
            "called": [
                "FUN_08004f3c",
                "FUN_08007ff0",
                "FUN_08004a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005188": {
            "entrypoint": "0x08005188",
            "current_name": "process_function_08005188",
            "code": "\nvoid process_function_08005188(int *data_pointer)\n\n{\n  int data_value;\n  uint flags_value;\n  uint status_value;\n  uint memory_value;\n  \n  data_value = *data_pointer;\n  memory_value = *(uint *)(data_value + 0x18);\n  flags_value = *(uint *)(data_value + 0x14);\n  status_value = *(uint *)(data_value + 4);\n  if ((*(char *)((int)data_pointer + 0x3e) == '\\x10') || (*(char *)((int)data_pointer + 0x3e) == '@')) {\n    if (((flags_value & 0x10001) == 0) || ((status_value & 0x200) == 0)) {\n      if (((flags_value & 0x10008) == 0) || ((status_value & 0x200) == 0)) {\n        if (((flags_value & 0x10002) != 0) && ((status_value & 0x200) != 0)) {\n          update_flags_080043a2(data_pointer);\n        }\n      }\n      else {\n        update_memory_value_08004396(data_pointer);\n      }\n    }\n    else {\n      update_status_0800430c(data_pointer);\n    }\n    if ((memory_value & 0x100004) == 0) {\n      if ((((flags_value & 0x10040) != 0) && ((status_value & 0x400) != 0)) && ((flags_value & 0x10004) == 0)) {\n        process_param_08004d6c(data_pointer);\n        return;\n      }\n      if (((flags_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        update_value_and_state_08004e3c(data_pointer);\n        return;\n      }\n    }\n    else {\n      if ((((flags_value & 0x10080) != 0) && ((status_value & 0x400) != 0)) && ((flags_value & 0x10004) == 0)) {\n        process_data_08004b82(data_pointer);\n        return;\n      }\n      if (((flags_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        update_param_08004ccc(data_pointer);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flags_value & 0x10002) != 0) && ((status_value & 0x200) != 0)) {\n      process_input_08004ac2();\n      return;\n    }\n    if (((flags_value & 0x10010) != 0) && ((status_value & 0x200) != 0)) {\n      initialize_and_execute_08005084(data_pointer);\n      return;\n    }\n    if ((memory_value & 0x100004) == 0) {\n      if ((((flags_value & 0x10040) != 0) && ((status_value & 0x400) != 0)) && ((flags_value & 0x10004) == 0)) {\n        update_data_08004a76(data_pointer);\n        return;\n      }\n      if (((flags_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        update_data_0800459c(data_pointer);\n      }\n    }\n    else {\n      if ((((flags_value & 0x10080) != 0) && ((status_value & 0x400) != 0)) && ((flags_value & 0x10004) == 0)) {\n        update_data_08004a24(data_pointer);\n        return;\n      }\n      if (((flags_value & 0x10004) != 0) && ((status_value & 0x200) != 0)) {\n        update_and_decrement_0800457c(data_pointer);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005188": "process_function_08005188",
                "param_1": "data_pointer",
                "iVar1": "data_value",
                "uVar2": "flags_value",
                "uVar3": "status_value",
                "uVar4": "memory_value"
            },
            "calling": [],
            "called": [
                "FUN_08004ccc",
                "FUN_080043a2",
                "FUN_08004396",
                "FUN_0800430c",
                "FUN_0800459c",
                "FUN_08005084",
                "FUN_08004a76",
                "FUN_08004ac2",
                "FUN_08004b82",
                "FUN_0800457c",
                "FUN_08004d6c",
                "FUN_08004a24",
                "FUN_08004e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052f0": {
            "entrypoint": "0x080052f0",
            "current_name": "configure_permissions_080052f0",
            "code": "\nvoid configurePermissions_080052f0(uint **configPointer)\n\n{\n  char character;\n  uint *pointer;\n  uint value1;\n  uint value2;\n  \n  pointer = *configPointer;\n  value1 = pointer[5];\n  value2 = pointer[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    configPointer[0x10] = (uint *)((uint)configPointer[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n    **configPointer = **configPointer | 0x8000;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    configPointer[0x10] = (uint *)((uint)configPointer[0x10] | 2);\n    (*configPointer)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    character = *(char *)((int)configPointer + 0x3d);\n    if (((*(char *)((int)configPointer + 0x3e) == ' ') && (*(short *)((int)configPointer + 0x2a) == 0)) &&\n       (((character == '!' || (character == ')')) || ((character == '(' && (configPointer[0xc] == (uint *)0x21)))))) {\n      initializeConfiguration(configPointer);\n    }\n    else {\n      configPointer[0x10] = (uint *)((uint)configPointer[0x10] | 4);\n      if (*(char *)((int)configPointer + 0x3e) == '\\x10') {\n        **configPointer = **configPointer | 0x200;\n      }\n      (*configPointer)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    configPointer[0x10] = (uint *)((uint)configPointer[0x10] | 8);\n    (*configPointer)[5] = 0xfffff7ff;\n  }\n  if (configPointer[0x10] != (uint *)0x0) {\n    initializeFunction(configPointer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052f0": "configure_permissions_080052f0",
                "param_1": "configPointer",
                "cVar1": "character",
                "puVar2": "pointer",
                "uVar3": "value1",
                "uVar4": "value2",
                "initialize_configuration_08004aec": "initializeConfiguration",
                "initialize_function_08004f3c": "initializeFunction"
            },
            "calling": [],
            "called": [
                "FUN_08004f3c",
                "FUN_08004aec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800542a": {
            "entrypoint": "0x0800542a",
            "current_name": "get_value_from_offset_0800542a",
            "code": "\nundefined get_value_from_offset_0800542a(int base_address)\n\n{\n  return *(undefined *)(base_address + 0x3d);\n}\n\n",
            "renaming": {
                "FUN_0800542a": "get_value_from_offset_0800542a",
                "param_1": "base_address"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005430": {
            "entrypoint": "0x08005430",
            "current_name": "get_offset_value_08005430",
            "code": "\nundefined4 getOffsetValue_08005430(int baseAddress)\n\n{\n  return *(undefined4 *)(baseAddress + 0x40);\n}\n\n",
            "renaming": {
                "FUN_08005430": "get_offset_value_08005430",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08007e74",
                "FUN_08007f0e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005434": {
            "entrypoint": "0x08005434",
            "current_name": "delay_function_08005434",
            "code": "\nvoid delayFunction_08005434(int inputValue)\n\n{\n  bool isDelayComplete;\n  int delayCounter;\n  \n  delayCounter = inputValue * (DAT_20000018 / 8000);\n  do {\n    isDelayComplete = delayCounter != 0;\n    delayCounter = delayCounter + -1;\n  } while (isDelayComplete);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005434": "delay_function_08005434",
                "param_1": "inputValue",
                "local_4": "delayCounter",
                "bVar1": "isDelayComplete"
            },
            "calling": [
                "FUN_08005460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005460": {
            "entrypoint": "0x08005460",
            "current_name": "process_input_08005460",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 processInput_08005460(uint *input)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  uint value;\n  bool flag;\n  \n  if ((*input & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (input[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = input[1];\n      if (value == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (value == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (value == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (input[1] == 0) {\n        startTime = get_data_08003760();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentTime = get_data_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_data_08003760();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentTime = get_data_08003760();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*input & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (input[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | input[5] << 3;\n    }\n    else if (input[4] == 0) {\n      _DAT_42420000 = 0;\n      startTime = get_data_08003760();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentTime = get_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startTime = get_data_08003760();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentTime = get_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | input[5] << 3;\n    }\n  }\n  if ((*input & 8) != 0) {\n    if (input[6] == 0) {\n      _DAT_42420480 = 0;\n      startTime = get_data_08003760();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentTime = get_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startTime = get_data_08003760();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentTime = get_data_08003760();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      delay_function_08005434(1);\n    }\n  }\n  if ((*input & 4) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_data_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_data_08003760();\n        if (100 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    value = input[3];\n    if (value == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (input[3] == 0) {\n      startTime = get_data_08003760();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentTime = get_data_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_data_08003760();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentTime = get_data_08003760();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (input[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (input[7] == 2) {\n    _DAT_42420060 = 0;\n    startTime = get_data_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (input[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | input[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | input[8] | input[9];\n        _DAT_42420060 = 1;\n        startTime = get_data_08003760();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_data_08003760();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = get_data_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startTime = get_data_08003760();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_data_08003760();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005460": "process_input_08005460",
                "param_1": "input",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "uVar4": "value",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760",
                "FUN_08005434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_delay_08005840",
            "code": "\n\n\nuint calculateDelay_08005840(void)\n\n{\n  uint uVar1;\n  undefined2 delayInput;\n  undefined4 multiplierA;\n  undefined4 multiplierB;\n  undefined4 multiplierC;\n  undefined4 constant;\n  \n  constant = 0x10100f0e;\n  multiplierC = 0xd0c0b0a;\n  multiplierB = 0x9080706;\n  multiplierA = 0x5040302;\n  delayInput = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&multiplierA + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&delayInput - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_delay_08005840",
                "local_1c": "delayInput",
                "uStack_18": "multiplierA",
                "uStack_14": "multiplierB",
                "uStack_10": "multiplierC",
                "uStack_c": "constant"
            },
            "calling": [
                "FUN_080058d2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058ac": {
            "entrypoint": "0x080058ac",
            "current_name": "update_settings_080058ac",
            "code": "\n\n\nundefined4 updateSettings_080058ac(uint *param1,uint param2)\n\n{\n  int initialTime;\n  int currentTime;\n  uint delay;\n  \n  if ((_DAT_40022000 & 7) < param2) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | param2;\n    if (param2 != (param2 & 7)) {\n      return 1;\n    }\n  }\n  if ((*param1 & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | param1[2];\n  }\n  if ((*param1 & 1) != 0) {\n    delay = param1[1];\n    if (delay == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((delay != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = delay | _DAT_40021004 & 0xfffffffc;\n    initialTime = get_data_08003760();\n    if (param1[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentTime = get_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else if (param1[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentTime = get_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentTime = get_data_08003760();\n        if (5000 < (uint)(currentTime - initialTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (param2 < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | param2;\n    if (param2 != (param2 & 7)) {\n      return 1;\n    }\n  }\n  if ((*param1 & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | param1[3];\n  }\n  if ((*param1 & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | param1[4] << 3;\n  }\n  delay = calculate_delay_08005840();\n  DAT_20000018 = delay >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  set_and_store_parameters_080036d8(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058ac": "update_settings_080058ac",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "delay"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080058d2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058d2": {
            "entrypoint": "0x080058d2",
            "current_name": "initialize_system_080058d2",
            "code": "\n\n\nundefined4 initializeSystem_080058d2(uint *flags,uint maxAttempts)\n\n{\n  int iVar1;\n  int iVar2;\n  uint value;\n  \n  if ((*flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | flags[2];\n  }\n  if ((*flags & 1) != 0) {\n    value = flags[1];\n    if (value == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((value != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = value | _DAT_40021004 & 0xfffffffc;\n    iVar1 = getData();\n    if (flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = getData();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = getData();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = getData();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (maxAttempts < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | maxAttempts;\n    if (maxAttempts != (maxAttempts & 7)) {\n      return 1;\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | flags[3];\n  }\n  if ((*flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | flags[4] << 3;\n  }\n  value = calculateDelay();\n  DAT_20000018 = value >> (&DAT_0800a944)[(_DAT_40021004 << 0x18) >> 0x1c];\n  setAndStoreParams(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080058d2": "initialize_system_080058d2",
                "param_1": "flags",
                "param_2": "maxAttempts",
                "uVar3": "value",
                "get_data_08003760": "getData",
                "calculate_delay_08005840": "calculateDelay",
                "set_and_store_parameters_080036d8": "setAndStoreParams"
            },
            "calling": [
                "FUN_080058ac"
            ],
            "called": [
                "FUN_080036d8",
                "FUN_08003760",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a1c": {
            "entrypoint": "0x08005a1c",
            "current_name": "get_global_data_08005a1c",
            "code": "\nundefined4 getGlobalData_08005a1c(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08005a1c": "get_global_data_08005a1c"
            },
            "calling": [
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080035b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a28": {
            "entrypoint": "0x08005a28",
            "current_name": "get_shifted_value_08005a28",
            "code": "\n\n\nuint get_shifted_value_08005a28(void)\n\n{\n  uint global_data;\n  \n  global_data = get_global_data();\n  return global_data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a28": "get_shifted_value_08005a28",
                "uVar1": "global_data",
                "get_global_data_08005a1c": "get_global_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_080045c0"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a48": {
            "entrypoint": "0x08005a48",
            "current_name": "calculate_shifted_value_08005a48",
            "code": "\n\n\nuint calculate_shifted_value_08005a48(void)\n\n{\n  uint global_data;\n  \n  global_data = get_global_data();\n  return global_data >> (&DAT_0800a954)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08005a48": "calculate_shifted_value_08005a48",
                "uVar1": "global_data",
                "get_global_data_08005a1c": "get_global_data"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08006538",
                "FUN_08005bb8"
            ],
            "called": [
                "FUN_08005a1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_params_08005a68",
            "code": "\n\n\nvoid initializeParams_08005a68(undefined4 *outputArray,uint *inputArray)\n\n{\n  *outputArray = 0xf;\n  outputArray[1] = _DAT_40021004 & 3;\n  outputArray[2] = _DAT_40021004 & 0xf0;\n  outputArray[3] = _DAT_40021004 & 0x700;\n  outputArray[4] = _DAT_40021004 >> 3 & 0x700;\n  *inputArray = _DAT_40022000 & 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_params_08005a68",
                "param_1": "outputArray",
                "param_2": "inputArray"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005aa4": {
            "entrypoint": "0x08005aa4",
            "current_name": "update_configuration_08005aa4",
            "code": "\n\n\nundefined4 updateConfiguration_08005aa4(uint *configuration)\n\n{\n  uint tempFlag;\n  uint tempData;\n  int startCount;\n  int currentCount;\n  bool isFirstTime;\n  \n  if ((*configuration & 1) != 0) {\n    isFirstTime = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFirstTime) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startCount = get_data_08003760();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentCount = get_data_08003760();\n        if (100 < (uint)(currentCount - startCount)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (configuration[1] & 0x300))) {\n      tempData = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      tempFlag = _DAT_40021020 & 1;\n      _DAT_40021020 = tempData;\n      if (tempFlag != 0) {\n        startCount = get_data_08003760();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentCount = get_data_08003760();\n          if (5000 < (uint)(currentCount - startCount)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | configuration[1];\n    if (isFirstTime) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*configuration & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | configuration[2];\n  }\n  if ((*configuration & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | configuration[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005aa4": "update_configuration_08005aa4",
                "param_1": "configuration",
                "uVar1": "tempFlag",
                "uVar2": "tempData",
                "iVar3": "startCount",
                "iVar4": "currentCount",
                "bVar5": "isFirstTime"
            },
            "calling": [
                "FUN_080035b8"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb8": {
            "entrypoint": "0x08005bb8",
            "current_name": "calculate_performance_08005bb8",
            "code": "\n\n\nuint calculate_performance_08005bb8(int input_value)\n\n{\n  uint result;\n  undefined2 temporary_a;\n  undefined4 temporary_b;\n  undefined4 temporary_c;\n  undefined4 temporary_d;\n  undefined4 temporary_e;\n  \n  temporary_e = 0x10100f0e;\n  temporary_d = 0xd0c0b0a;\n  temporary_c = 0x9080706;\n  temporary_b = 0x5040302;\n  temporary_a = 0x201;\n  if (input_value == 2) {\n    result = calculate_shifted_value_08005a48();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input_value == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&temporary_a - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&temporary_b + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input_value == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005bb8": "calculate_performance_08005bb8",
                "param_1": "input_value",
                "uVar1": "result",
                "local_24": "temporary_a",
                "uStack_20": "temporary_b",
                "uStack_1c": "temporary_c",
                "uStack_18": "temporary_d",
                "uStack_14": "temporary_e"
            },
            "calling": [
                "FUN_08003e20",
                "FUN_0800376c"
            ],
            "called": [
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb4": {
            "entrypoint": "0x08005cb4",
            "current_name": "check_and_execute_callback_08005cb4",
            "code": "\n\n\nvoid checkAndExecuteCallback_08005cb4(uint **inputParam)\n\n{\n  if (((**inputParam & 2) != 0) && (((*inputParam)[1] & 2) != 0)) {\n    execute_callback_080073c0();\n    (*inputParam)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)inputParam + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb4": "check_and_execute_callback_08005cb4",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "update_data_08005cec",
            "code": "\nvoid updateData_08005cec(int dataAddress,uint *dataValues)\n\n{\n  uint modifiedFlag;\n  uint var2;\n  uint var3;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xfffffffe;\n  var2 = *(uint *)(dataAddress + 4);\n  var3 = *dataValues;\n  modifiedFlag = *(uint *)(dataAddress + 0x20) & 0xfffffffd | dataValues[2];\n  if (dataAddress == 0x40012c00) {\n    modifiedFlag = (modifiedFlag & 0xfffffff7 | dataValues[3]) & 0xfffffffb;\n    var2 = var2 & 0xfffffcff | dataValues[5] | dataValues[6];\n  }\n  *(uint *)(dataAddress + 4) = var2;\n  *(uint *)(dataAddress + 0x18) = *(uint *)(dataAddress + 0x18) & 0xffffff8c | var3;\n  *(uint *)(dataAddress + 0x34) = dataValues[1];\n  *(uint *)(dataAddress + 0x20) = modifiedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "update_data_08005cec",
                "param_1": "dataAddress",
                "param_2": "dataValues",
                "uVar1": "modifiedFlag",
                "uVar2": "var2",
                "uVar3": "var3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d48": {
            "entrypoint": "0x08005d48",
            "current_name": "update_params_08005d48",
            "code": "\nvoid updateParams_08005d48(int paramAddress,uint *paramValues)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(paramAddress + 0x20) = *(uint *)(paramAddress + 0x20) & 0xfffffeff;\n  updatedValue2 = *(uint *)(paramAddress + 4);\n  updatedValue3 = *paramValues;\n  updatedValue1 = *(uint *)(paramAddress + 0x20) & 0xfffffdff | paramValues[2] << 8;\n  if (paramAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | paramValues[3] << 8) & 0xfffffbff;\n    updatedValue2 = updatedValue2 & 0xffffcfff | paramValues[5] << 4 | paramValues[6] << 4;\n  }\n  *(uint *)(paramAddress + 4) = updatedValue2;\n  *(uint *)(paramAddress + 0x1c) = *(uint *)(paramAddress + 0x1c) & 0xffffff8c | updatedValue3;\n  *(uint *)(paramAddress + 0x3c) = paramValues[1];\n  *(uint *)(paramAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d48": "update_params_08005d48",
                "param_1": "paramAddress",
                "param_2": "paramValues",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dac": {
            "entrypoint": "0x08005dac",
            "current_name": "configure_memory_08005dac",
            "code": "\nvoid configureMemory_08005dac(int memoryAddress,int *memoryInfo)\n\n{\n  uint flags;\n  int value1;\n  int value2;\n  \n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & 0xffffefff;\n  flags = *(uint *)(memoryAddress + 4);\n  value1 = *memoryInfo;\n  value2 = memoryInfo[2];\n  if (memoryAddress == 0x40012c00) {\n    flags = flags & 0xffffbfff | memoryInfo[5] << 6;\n  }\n  *(uint *)(memoryAddress + 4) = flags;\n  *(uint *)(memoryAddress + 0x1c) = *(uint *)(memoryAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(memoryAddress + 0x40) = memoryInfo[1];\n  *(uint *)(memoryAddress + 0x20) = *(uint *)(memoryAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dac": "configure_memory_08005dac",
                "param_1": "memoryAddress",
                "param_2": "memoryInfo",
                "uVar1": "flags",
                "iVar2": "value1",
                "iVar3": "value2"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005df4": {
            "entrypoint": "0x08005df4",
            "current_name": "FUNC_08005df4",
            "code": "\nvoid FUNC_08005df4(uint **param_1)\n\n{\n  uint *puVar1;\n  \n  *(undefined *)((int)param_1 + 0x3d) = 2;\n  puVar1 = *param_1;\n  if ((puVar1[8] & 0x1111) == 0) {\n    if ((puVar1[8] & 0x444) == 0) {\n      *puVar1 = *puVar1 & 0xfffffffe;\n    }\n  }\n  update_registers_08007710(param_1);\n  *(undefined *)((int)param_1 + 0x3d) = 0;\n  *(undefined *)(param_1 + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005df4": "FUNC_08005df4"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08007710"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e2e": {
            "entrypoint": "0x08005e2e",
            "current_name": "initialize_function_08005e2e",
            "code": "\nvoid initialize_function_08005e2e(uint **parameter)\n\n{\n  uint *pointer;\n  \n  *(undefined *)((int)parameter + 0x3d) = 2;\n  pointer = *parameter;\n  if ((pointer[8] & 0x1111) == 0) {\n    if ((pointer[8] & 0x444) == 0) {\n      *pointer = *pointer & 0xfffffffe;\n    }\n  }\n  initialize_registers(parameter);\n  *(undefined *)((int)parameter + 0x3d) = 0;\n  *(undefined *)(parameter + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e2e": "initialize_function_08005e2e",
                "param_1": "parameter",
                "puVar1": "pointer",
                "initialize_registers_08007110": "initialize_registers"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08007110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e68": {
            "entrypoint": "0x08005e68",
            "current_name": "FUNC_08005e68",
            "code": "\nvoid FUNC_08005e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e68": "FUNC_08005e68"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6a": {
            "entrypoint": "0x08005e6a",
            "current_name": "FUNC_08005e6a",
            "code": "\nvoid FUNC_08005e6a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6a": "FUNC_08005e6a"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6c": {
            "entrypoint": "0x08005e6c",
            "current_name": "FUNC_08005e6c",
            "code": "\nvoid FUNC_08005e6c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6c": "FUNC_08005e6c"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005e6e": {
            "entrypoint": "0x08005e6e",
            "current_name": "execute_condition_checks_08005e6e",
            "code": "\nvoid execute_condition_checks_08005e6e(int *param_1)\n\n{\n  int current_item;\n  \n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 2) != 0) && ((*(uint *)(current_item + 0xc) & 2) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xfffffffd;\n    *(undefined *)(param_1 + 7) = 1;\n    if ((*(uint *)(*param_1 + 0x18) & 3) == 0) {\n      execute_condition_met_function();\n      FUNC_08005e6a(param_1);\n    }\n    else {\n      FUNC_08005e68();\n    }\n    *(undefined *)(param_1 + 7) = 0;\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 4) != 0) && ((*(uint *)(current_item + 0xc) & 4) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xfffffffb;\n    *(undefined *)(param_1 + 7) = 2;\n    if ((*(uint *)(*param_1 + 0x18) & 0x300) == 0) {\n      execute_condition_met_function(input_array);\n      FUNC_08005e6a(param_1);\n    }\n    else {\n      FUNC_08005e68(param_1);\n    }\n    *(undefined *)(param_1 + 7) = 0;\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 8) != 0) && ((*(uint *)(current_item + 0xc) & 8) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xfffffff7;\n    *(undefined *)(param_1 + 7) = 4;\n    if ((*(uint *)(*param_1 + 0x1c) & 3) == 0) {\n      execute_condition_met_function(input_array);\n      FUNC_08005e6a(param_1);\n    }\n    else {\n      FUNC_08005e68(param_1);\n    }\n    *(undefined *)(param_1 + 7) = 0;\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 0x10) != 0) && ((*(uint *)(current_item + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xffffffef;\n    *(undefined *)(param_1 + 7) = 8;\n    if ((*(uint *)(*param_1 + 0x1c) & 0x300) == 0) {\n      execute_condition_met_function(input_array);\n      FUNC_08005e6a(param_1);\n    }\n    else {\n      FUNC_08005e68(param_1);\n    }\n    *(undefined *)(param_1 + 7) = 0;\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 1) != 0) && ((*(uint *)(current_item + 0xc) & 1) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xfffffffe;\n    execute_callback(param_1);\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 0x80) != 0) && ((*(uint *)(current_item + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xffffff7f;\n    FUNC_080064ae(param_1);\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 0x40) != 0) && ((*(uint *)(current_item + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xffffffbf;\n    FUNC_08005e6c(param_1);\n  }\n  current_item = *param_1;\n  if (((*(uint *)(current_item + 0x10) & 0x20) != 0) && ((*(uint *)(current_item + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(current_item + 0x10) = 0xffffffdf;\n    FUNC_080064ac(param_1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005e6e": "execute_condition_checks_08005e6e",
                "iVar1": "current_item",
                "execute_function_if_condition_met_0800771c": "execute_condition_met_function",
                "execute_function_if_condition_met_0800771c(param_1)": "execute_condition_met_function(input_array)",
                "execute_callback_08007736": "execute_callback"
            },
            "calling": [],
            "called": [
                "FUN_08007736",
                "FUN_080064ac",
                "FUN_08005e68",
                "FUN_08005e6a",
                "FUN_0800771c",
                "FUN_08005e6c",
                "FUN_080064ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fe8": {
            "entrypoint": "0x08005fe8",
            "current_name": "update_and_set_data_08005fe8",
            "code": "\nvoid updateAndSetData_08005fe8(uint *dataPtr,uint *inputPtr)\n\n{\n  uint dataValue;\n  \n  dataValue = *dataPtr;\n  if ((((dataPtr == (uint *)0x40012c00) || (dataPtr == (uint *)0x40000000)) ||\n      (dataPtr == (uint *)0x40000400)) || (dataPtr == (uint *)0x40000800)) {\n    dataValue = dataValue & 0xffffff8f | inputPtr[1];\n  }\n  if (((dataPtr == (uint *)0x40012c00) || (dataPtr == (uint *)0x40000000)) ||\n     ((dataPtr == (uint *)0x40000400 || (dataPtr == (uint *)0x40000800)))) {\n    dataValue = dataValue & 0xfffffcff | inputPtr[3];\n  }\n  *dataPtr = dataValue & 0xffffff7f | inputPtr[5];\n  dataPtr[11] = inputPtr[2];\n  dataPtr[10] = *inputPtr;\n  if (dataPtr == (uint *)0x40012c00) {\n    globalVar = inputPtr[4];\n  }\n  dataPtr[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fe8": "update_and_set_data_08005fe8",
                "param_1": "dataPtr",
                "param_2": "inputPtr",
                "uVar1": "dataValue",
                "uRam40012c30": "globalVar",
                "param_1[0xb]": "dataPtr[11]",
                "param_1[10]": "dataPtr[10]",
                "param_2[1]": "inputPtr[1]",
                "param_2[2]": "inputPtr[2]",
                "param_2[3]": "inputPtr[3]",
                "param_2[4]": "inputPtr[4]",
                "param_2[5]": "inputPtr[5]"
            },
            "calling": [
                "FUN_08006060",
                "FUN_08006092"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006060": {
            "entrypoint": "0x08006060",
            "current_name": "initialize_data_08006060",
            "code": "\nundefined4 initializeData_08006060(undefined4 *dataPointer)\n\n{\n  if (dataPointer != (undefined4 *)0x0) {\n    if (*(char *)((int)dataPointer + 0x3d) == '\\0') {\n      *(undefined *)(dataPointer + 0xf) = 0;\n      initializeMemory;\n    }\n    *(undefined *)((int)dataPointer + 0x3d) = 2;\n    update_and_set_data_08005fe8(*dataPointer,dataPointer + 1);\n    *(undefined *)((int)dataPointer + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006060": "initialize_data_08006060",
                "param_1": "dataPointer",
                "initialize_memory_08007708()": "initializeMemory"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08007708"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006092": {
            "entrypoint": "0x08006092",
            "current_name": "update_data_and_set_flag_08006092",
            "code": "\nundefined4 updateDataAndSetFlag_08006092(undefined4 *dataArray)\n\n{\n  if (dataArray != (undefined4 *)0x0) {\n    if (*(char *)((int)dataArray + 0x3d) == '\\0') {\n      *(undefined *)(dataArray + 0xf) = 0;\n      initializeAndUpdateData();\n    }\n    *(undefined *)((int)dataArray + 0x3d) = 2;\n    updateAndSetData(*dataArray,dataArray + 1);\n    *(undefined *)((int)dataArray + 0x3d) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08006092": "update_data_and_set_flag_08006092",
                "param_1": "dataArray",
                "initialize_and_update_08006e68": "initializeAndUpdateData",
                "update_and_set_data_08005fe8": "updateAndSetData"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005fe8",
                "FUN_08006e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060c4": {
            "entrypoint": "0x080060c4",
            "current_name": "update_params_080060c4",
            "code": "\nvoid updateParams_080060c4(int ptr_data,int *ptr_params)\n\n{\n  uint data_masked;\n  uint data_masked2;\n  int param_value;\n  \n  *(uint *)(ptr_data + 0x20) = *(uint *)(ptr_data + 0x20) & 0xffffffef;\n  data_masked2 = *(uint *)(ptr_data + 4);\n  param_value = *ptr_params;\n  data_masked = *(uint *)(ptr_data + 0x20) & 0xffffffdf | ptr_params[2] << 4;\n  if (ptr_data == 0x40012c00) {\n    data_masked = (data_masked & 0xffffff7f | ptr_params[3] << 4) & 0xffffffbf;\n    data_masked2 = data_masked2 & 0xfffff3ff | ptr_params[5] << 2 | ptr_params[6] << 2;\n  }\n  *(uint *)(ptr_data + 4) = data_masked2;\n  *(uint *)(ptr_data + 0x18) = *(uint *)(ptr_data + 0x18) & 0xffff8cff | param_value << 8;\n  *(int *)(ptr_data + 0x38) = ptr_params[1];\n  *(uint *)(ptr_data + 0x20) = data_masked;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060c4": "update_params_080060c4",
                "param_1": "ptr_data",
                "param_2": "ptr_params",
                "uVar1": "data_masked",
                "uVar2": "data_masked2",
                "iVar3": "param_value",
                "param_2[2]": "ptr_params[2]",
                "param_2[3]": "ptr_params[3]",
                "param_2[5]": "ptr_params[5]",
                "param_2[6]": "ptr_params[6]"
            },
            "calling": [
                "FUN_08006128",
                "FUN_08006186"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006128": {
            "entrypoint": "0x08006128",
            "current_name": "update_data_08006128",
            "code": "\nundefined4 updateData_08006128(undefined4 *dataPtr,undefined4 param2,undefined4 param3)\n\n{\n  if (*(char *)(dataPtr + 0xf) != '\\x01') {\n    *(undefined *)(dataPtr + 0xf) = 1;\n    *(undefined *)((int)dataPtr + 0x3d) = 2;\n    switch(param3) {\n    case 0:\n      updateData_08006128Function(*dataPtr);\n      break;\n    case 4:\n      updateParamsFunction(*dataPtr);\n      break;\n    case 8:\n      updateParamsFunction2(*dataPtr);\n      break;\n    case 0xc:\n      configureMemoryFunction(*dataPtr);\n    }\n    *(undefined *)((int)dataPtr + 0x3d) = 1;\n    *(undefined *)(dataPtr + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006128": "update_data_08006128",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "switch(param_3)": "switch(param3)",
                "update_data_08005cec": "updateDataFunction",
                "update_params_080060c4": "updateParamsFunction",
                "update_params_08005d48": "updateParamsFunction2",
                "configure_memory_08005dac": "configureMemoryFunction"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006186": {
            "entrypoint": "0x08006186",
            "current_name": "update_configurations_08006186",
            "code": "\nundefined4 updateConfigurations_08006186(int *config,int payload,undefined4 configType)\n\n{\n  if (*(char *)(config + 0xf) != '\\x01') {\n    *(undefined *)(config + 0xf) = 1;\n    *(undefined *)((int)config + 0x3d) = 2;\n    switch(configType) {\n    case 0:\n      updateData(*config);\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | 8;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) & 0xfffffffb;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | *(uint *)(payload + 0x10);\n      break;\n    case 4:\n      updateParams(*config);\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | 0x800;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) & 0xfffffbff;\n      *(uint *)(*config + 0x18) = *(uint *)(*config + 0x18) | *(int *)(payload + 0x10) << 8;\n      break;\n    case 8:\n      updateExtraParams(*config);\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | 8;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) & 0xfffffffb;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | *(uint *)(payload + 0x10);\n      break;\n    case 0xc:\n      configureMemory(*config);\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | 0x800;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) & 0xfffffbff;\n      *(uint *)(*config + 0x1c) = *(uint *)(*config + 0x1c) | *(int *)(payload + 0x10) << 8;\n    }\n    *(undefined *)((int)config + 0x3d) = 1;\n    *(undefined *)(config + 0xf) = 0;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08006186": "update_configurations_08006186",
                "param_1": "config",
                "param_2": "payload",
                "param_3": "configType",
                "update_data_08005cec": "updateData",
                "update_params_080060c4": "updateParams",
                "update_params_08005d48": "updateExtraParams",
                "configure_memory_08005dac": "configureMemory"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08005dac",
                "FUN_080060c4",
                "FUN_08005d48",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006262": {
            "entrypoint": "0x08006262",
            "current_name": "update_bitwise_value_08006262",
            "code": "\nvoid updateBitwiseValue_08006262(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006262": "update_bitwise_value_08006262",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08006280",
                "FUN_08006390",
                "FUN_080063c0",
                "FUN_080062f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006280": {
            "entrypoint": "0x08006280",
            "current_name": "update_flags_and_values_08006280",
            "code": "\nundefined4 updateFlagsAndValues_08006280(uint **ptrArray,undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    (*ptrArray)[3] = (*ptrArray)[3] | 2;\n    break;\n  case 4:\n    (*ptrArray)[3] = (*ptrArray)[3] | 4;\n    break;\n  case 8:\n    (*ptrArray)[3] = (*ptrArray)[3] | 8;\n    break;\n  case 0xc:\n    (*ptrArray)[3] = (*ptrArray)[3] | 0x10;\n  }\n  updateBitwiseValue(*ptrArray,value,1);\n  if (*ptrArray == (uint *)0x40012c00) {\n    statusVariable = statusVariable | 0x8000;\n  }\n  **ptrArray = **ptrArray | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006280": "update_flags_and_values_08006280",
                "param_1": "ptrArray",
                "param_2": "value",
                "update_bitwise_value_08006262": "updateBitwiseValue",
                "uRam40012c44": "statusVariable"
            },
            "calling": [
                "FUN_08007648"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080062f4": {
            "entrypoint": "0x080062f4",
            "current_name": "update_bitwise_values_080062f4",
            "code": "\nundefined4 updateBitwiseValues_080062f4(uint **dataPointer,undefined4 bitPattern)\n\n{\n  uint *data;\n  \n  switch(bitPattern) {\n  case 0:\n    (*dataPointer)[3] = (*dataPointer)[3] & 0xfffffffd;\n    break;\n  case 4:\n    (*dataPointer)[3] = (*dataPointer)[3] & 0xfffffffb;\n    break;\n  case 8:\n    (*dataPointer)[3] = (*dataPointer)[3] & 0xfffffff7;\n    break;\n  case 0xc:\n    (*dataPointer)[3] = (*dataPointer)[3] & 0xffffffef;\n  }\n  update_bitwise_value_08006262(*dataPointer,bitPattern,0);\n  if (((*dataPointer == (uint *)0x40012c00) && ((secondConstant & 0x1111) == 0)) &&\n     ((secondConstant & 0x444) == 0)) {\n    thirdConstant = thirdConstant & 0xffff7fff;\n  }\n  data = *dataPointer;\n  if (((dataValue & 0x1111) == 0) && ((dataValue & 0x444) == 0)) {\n    *data = *data & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080062f4": "update_bitwise_values_080062f4",
                "param_1": "dataPointer",
                "param_2": "bitPattern",
                "puVar1": "data",
                "uRam40012c20": "secondConstant",
                "uRam40012c44": "thirdConstant",
                "puVar1[8]": "dataValue"
            },
            "calling": [
                "FUN_080076e0"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006390": {
            "entrypoint": "0x08006390",
            "current_name": "set_flag_and_value_08006390",
            "code": "\nundefined4 setFlagAndValue_08006390(uint **data,undefined4 value)\n\n{\n  updateBitwiseValue(*data,value,1);\n  if (*data == (uint *)0x40012c00) {\n    flag = flag | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006390": "set_flag_and_value_08006390",
                "param_1": "data",
                "param_2": "value",
                "uRam40012c44": "flag",
                "update_bitwise_value_08006262": "updateBitwiseValue"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080063c0": {
            "entrypoint": "0x080063c0",
            "current_name": "update_and_check_values_080063c0",
            "code": "\nundefined4 updateAndCheckValues_080063c0(uint **dataPointer,undefined4 value)\n\n{\n  uint *dataPtr;\n  \n  update_bitwise_value_08006262(*dataPointer,value,0);\n  if (((*dataPointer == (uint *)0x40012c00) && ((constantValue2 & 0x1111) == 0)) &&\n     ((constantValue2 & 0x444) == 0)) {\n    variable1 = variable1 & 0xffff7fff;\n  }\n  dataPtr = *dataPointer;\n  if (((dataPtr[8] & 0x1111) == 0) && ((dataPtr[8] & 0x444) == 0)) {\n    *dataPtr = *dataPtr & 0xfffffffe;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080063c0": "update_and_check_values_080063c0",
                "param_1": "dataPointer",
                "param_2": "value",
                "puVar1": "dataPtr",
                "uRam40012c20": "constantValue2",
                "uRam40012c44": "variable1"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006262"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006420": {
            "entrypoint": "0x08006420",
            "current_name": "update_value_08006420",
            "code": "\nvoid updateValue_08006420(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006420": "update_value_08006420",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_0800643c",
                "FUN_08006460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800643c": {
            "entrypoint": "0x0800643c",
            "current_name": "set_flags_and_values_0800643c",
            "code": "\nundefined4 setFlagsAndValues_0800643c(uint **arrayPtr,undefined4 newValue)\n\n{\n  updateValue(*arrayPtr,newValue,4);\n  (*arrayPtr)[17] = (*arrayPtr)[17] | 0x8000;\n  **arrayPtr = **arrayPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800643c": "set_flags_and_values_0800643c",
                "param_1": "arrayPtr",
                "param_2": "newValue",
                "update_value_08006420": "updateValue",
                "[0x11]": "[17]"
            },
            "calling": [
                "FUN_08007118"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006460": {
            "entrypoint": "0x08006460",
            "current_name": "update_and_check_value_08006460",
            "code": "\nundefined4 updateAndCheckValue_08006460(uint **valueArray,undefined4 newValue)\n\n{\n  uint *ptrValue;\n  \n  update_value_08006420(*valueArray,newValue,0);\n  ptrValue = *valueArray;\n  if (((ptrValue[8] & 0x1111) == 0) && ((ptrValue[8] & 0x444) == 0)) {\n    ptrValue[0x11] = ptrValue[0x11] & 0xffff7fff;\n  }\n  ptrValue = *valueArray;\n  if (((ptrValue[8] & 0x1111) == 0) && ((ptrValue[8] & 0x444) == 0)) {\n    *ptrValue = *ptrValue & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006460": "update_and_check_value_08006460",
                "param_1": "valueArray",
                "param_2": "newValue",
                "puVar1": "ptrValue",
                "puVar1[8]": "ptrValue[8]",
                "puVar1[0x11]": "ptrValue[0x11]"
            },
            "calling": [
                "FUN_080071e4"
            ],
            "called": [
                "FUN_08006420"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ac": {
            "entrypoint": "0x080064ac",
            "current_name": "FUNC_080064ac",
            "code": "\nvoid FUNC_080064ac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ac": "FUNC_080064ac"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064ae": {
            "entrypoint": "0x080064ae",
            "current_name": "FUNC_080064ae",
            "code": "\nvoid FUNC_080064ae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064ae": "FUNC_080064ae"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080064b0": {
            "entrypoint": "0x080064b0",
            "current_name": "reset_flags_080064b0",
            "code": "\nvoid resetFlags_080064b0(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080064b0": "reset_flags_080064b0",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064cc": {
            "entrypoint": "0x080064cc",
            "current_name": "process_binary_data_080064cc",
            "code": "\nundefined4 processBinaryData_080064cc(int *dataPointer)\n\n{\n  short updatedValue;\n  byte *bytePointer;\n  \n  if (*(char *)((int)dataPointer + 0x39) != '!') {\n    return 2;\n  }\n  if (dataPointer[2] == 0x1000) {\n    *(uint *)(*dataPointer + 4) = *(ushort *)dataPointer[8] & 0x1ff;\n    if (dataPointer[4] == 0) {\n      dataPointer[8] = dataPointer[8] + 2;\n    }\n    else {\n      dataPointer[8] = dataPointer[8] + 1;\n    }\n  }\n  else {\n    bytePointer = (byte *)dataPointer[8];\n    dataPointer[8] = (int)(bytePointer + 1);\n    *(uint *)(*dataPointer + 4) = (uint)*bytePointer;\n  }\n  updatedValue = *(short *)((int)dataPointer + 0x26) + -1;\n  *(short *)((int)dataPointer + 0x26) = updatedValue;\n  if (updatedValue == 0) {\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffff7f;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080064cc": "process_binary_data_080064cc",
                "param_1": "dataPointer",
                "sVar1": "updatedValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006538": {
            "entrypoint": "0x08006538",
            "current_name": "calculate_shifted_sum_08006538",
            "code": "\nvoid calculateShiftedSum_08006538(int *inputParams)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int param1Value1;\n  int param1Value2;\n  int param1Value3;\n  int param1Value4;\n  int originalValue;\n  \n  *(uint *)(*inputParams + 0x10) = *(uint *)(*inputParams + 0x10) & 0xffffcfff | inputParams[3];\n  *(uint *)(*inputParams + 0xc) =\n       inputParams[2] | inputParams[4] | inputParams[5] | *(uint *)(*inputParams + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputParams + 0x14) = *(uint *)(*inputParams + 0x14) & 0xfffffcff | inputParams[6];\n  originalValue = *inputParams;\n  if (originalValue != 0x40013800) {\n    shiftedValue1 = get_shifted_value_08005a28();\n    param1Value1 = inputParams[1];\n    shiftedValue2 = get_shifted_value_08005a28();\n    param1Value2 = inputParams[1];\n    shiftedValue3 = get_shifted_value_08005a28();\n    param1Value3 = inputParams[1];\n    shiftedValue4 = get_shifted_value_08005a28();\n    param1Value4 = inputParams[1];\n    shiftedValue5 = get_shifted_value_08005a28();\n    *(uint *)(originalValue + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputParams[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  originalValue = calculate_shifted_value_08005a48();\n  shiftedValue5 = inputParams[1];\n  shiftedValue1 = calculate_shifted_value_08005a48();\n  param1Value1 = inputParams[1];\n  shiftedValue2 = calculate_shifted_value_08005a48();\n  param1Value2 = inputParams[1];\n  shiftedValue3 = calculate_shifted_value_08005a48();\n  param1Value3 = inputParams[1];\n  shiftedValue4 = calculate_shifted_value_08005a48();\n  outputResult = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedValue3 * 0x19) / (uint)(param1Value3 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedValue4 * 0x19) /\n                                      (ulonglong)(uint)(inputParams[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedValue1 * 0x19) / (uint)(param1Value1 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(param1Value2 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(originalValue * 0x19) / (ulonglong)(uint)(shiftedValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006538": "calculate_shifted_sum_08006538",
                "param_1": "inputParams",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "param1Value1",
                "iVar7": "param1Value2",
                "iVar8": "param1Value3",
                "iVar9": "param1Value4",
                "iVar10": "originalValue",
                "iRam40013808": "outputResult"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [
                "FUN_08005a28",
                "FUN_08005a48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066e8": {
            "entrypoint": "0x080066e8",
            "current_name": "validate_parameters_080066e8",
            "code": "\nundefined4 validate_parameters_080066e8(uint **array_ptr,uint check_value,uint expected_result,int data_offset,uint max_difference)\n\n{\n  int actual_difference;\n  \n  do {\n    if (((check_value & ~**array_ptr) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((max_difference == 0xffffffff) ||\n          ((max_difference != 0 && (actual_difference = get_data_08003760(), (uint)(actual_difference - data_offset) <= max_difference))));\n  (*array_ptr)[3] = (*array_ptr)[3] & 0xfffffe5f;\n  (*array_ptr)[5] = (*array_ptr)[5] & 0xfffffffe;\n  *(undefined *)((int)array_ptr + 0x39) = 0x20;\n  *(undefined *)((int)array_ptr + 0x3a) = 0x20;\n  *(undefined *)(array_ptr + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080066e8": "validate_parameters_080066e8",
                "param_1": "array_ptr",
                "param_2": "check_value",
                "param_3": "expected_result",
                "param_4": "data_offset",
                "param_5": "max_difference",
                "iVar1": "actual_difference"
            },
            "calling": [
                "FUN_080067ac"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800674c": {
            "entrypoint": "0x0800674c",
            "current_name": "FUNC_0800674c",
            "code": "\nvoid FUNC_0800674c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800674c": "FUNC_0800674c"
            },
            "calling": [
                "FUN_0800674e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800674e": {
            "entrypoint": "0x0800674e",
            "current_name": "validate_and_initialize_0800674e",
            "code": "\nundefined4 validate_and_initialize_0800674e(int *input_array)\n\n{\n  if (input_array != (int *)0x0) {\n    if (*(char *)((int)input_array + 0x39) == '\\0') {\n      *(undefined *)(input_array + 0xe) = 0;\n      FUNC_0800674c();\n    }\n    *(undefined *)((int)input_array + 0x39) = 0x24;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) & 0xffffdfff;\n    calculate_shifted_sum_08006538(input_array);\n    *(uint *)(*input_array + 0x10) = *(uint *)(*input_array + 0x10) & 0xffffb7ff;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xffffffd5;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x2000;\n    array_element = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x20;\n    *(undefined *)((int)input_array + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800674e": "validate_and_initialize_0800674e",
                "param_1": "input_array",
                "param_1[0xf]": "array_element"
            },
            "calling": [
                "FUN_08008078"
            ],
            "called": [
                "FUN_08006538",
                "FUN_0800674c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080067ac": {
            "entrypoint": "0x080067ac",
            "current_name": "process_data_080067ac",
            "code": "\nundefined4 processData_080067ac(int *dataArray,ushort *inputArray,int arrayLength,undefined4 paramFour)\n\n{\n  int validationResult;\n  undefined4 returnValue;\n  \n  if (*(char *)((int)dataArray + 0x39) == ' ') {\n    if (inputArray == (ushort *)0x0) {\n      returnValue = 1;\n    }\n    else if (arrayLength == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(dataArray + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(dataArray + 0xe) = 1;\n      dataArray[0xf] = 0;\n      *(undefined *)((int)dataArray + 0x39) = 0x21;\n      returnValue = get_data_08003760();\n      *(short *)(dataArray + 9) = (short)arrayLength;\n      *(short *)((int)dataArray + 0x26) = (short)arrayLength;\n      while (*(short *)((int)dataArray + 0x26) != 0) {\n        *(short *)((int)dataArray + 0x26) = *(short *)((int)dataArray + 0x26) + -1;\n        if (dataArray[2] == 0x1000) {\n          validationResult = validate_parameters_080066e8(dataArray,0x80,0,returnValue,paramFour);\n          if (validationResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataArray + 4) = *inputArray & 0x1ff;\n          if (dataArray[4] == 0) {\n            inputArray = inputArray + 1;\n          }\n          else {\n            inputArray = (ushort *)((int)inputArray + 1);\n          }\n        }\n        else {\n          validationResult = validate_parameters_080066e8(dataArray,0x80,0,returnValue,paramFour);\n          if (validationResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataArray + 4) = (uint)*(byte *)inputArray;\n          inputArray = (ushort *)((int)inputArray + 1);\n        }\n      }\n      validationResult = validate_parameters_080066e8(dataArray,0x40,0,returnValue,paramFour);\n      if (validationResult == 0) {\n        *(undefined *)((int)dataArray + 0x39) = 0x20;\n        *(undefined *)(dataArray + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080067ac": "process_data_080067ac",
                "param_1": "dataArray",
                "param_2": "inputArray",
                "param_3": "arrayLength",
                "param_4": "paramFour",
                "iVar1": "validationResult",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_080066e8",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800688e": {
            "entrypoint": "0x0800688e",
            "current_name": "validate_and_set_values_0800688e",
            "code": "\nundefined4 validateAndSetValues_0800688e(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array[8] = value1;\n    *(short *)(array + 9) = (short)value2;\n    *(short *)((int)array + 0x26) = (short)value2;\n    array[0xf] = 0;\n    *(undefined *)((int)array + 0x39) = 0x21;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800688e": "validate_and_set_values_0800688e",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08008730",
                "FUN_08008694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068d6": {
            "entrypoint": "0x080068d6",
            "current_name": "validate_input_parameters_080068d6",
            "code": "\nundefined4 validate_input_parameters_080068d6(int *input_array,int size_of_array,int value)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (size_of_array == 0) {\n    return 1;\n  }\n  if (value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    array_item_10 = size_of_array;\n    *(short *)(input_array + 0xb) = (short)value;\n    *(short *)((int)input_array + 0x2e) = (short)value;\n    array_item_f = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080068d6": "validate_input_parameters_080068d6",
                "param_1": "input_array",
                "param_2": "size_of_array",
                "param_3": "value",
                "param_1[10]": "array_item_10",
                "param_1[0xf]": "array_item_f"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006932": {
            "entrypoint": "0x08006932",
            "current_name": "update_value_08006932",
            "code": "\nundefined4 updateValue_08006932(int *valuePointer)\n\n{\n  *(uint *)(*valuePointer + 0xc) = *(uint *)(*valuePointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)valuePointer + 0x39) = 0x20;\n  processValue();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006932": "update_value_08006932",
                "param_1": "valuePointer",
                "process_value_08008730": "processValue"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_08008730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800694c": {
            "entrypoint": "0x0800694c",
            "current_name": "process_data_0800694c",
            "code": "\nundefined4 processData_0800694c(int *data)\n\n{\n  byte *bytePtr;\n  short count;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffffdf;\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffeff;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_value_function_0800870c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800694c": "process_data_0800694c",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "count",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [
                "FUN_0800870c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069ec": {
            "entrypoint": "0x080069ec",
            "current_name": "process_condition_080069ec",
            "code": "\nvoid process_condition_080069ec(uint **parameters)\n\n{\n  int flag;\n  uint value1;\n  uint *pointer;\n  uint value2;\n  uint value3;\n  \n  pointer = *parameters;\n  value3 = *pointer;\n  value1 = pointer[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    process_data(parameters);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = pointer[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      process_binary_data(parameters);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      update_value(parameters);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n    }\n    if (parameters[0xf] != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        process_data(parameters);\n      }\n      if ((((uint)parameters[0xf] & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_0800877c(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      reset_flags(parameters);\n      pointer = *parameters;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_0800877c(parameters);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (parameters[0xd] == (uint *)0x0) {\n        FUNC_0800877c(parameters);\n        return;\n      }\n      parameters[0xd][0xd] = (uint)&label1;\n      flag = initialize_flags_08004050(parameters[0xd]);\n      if (flag != 0) {\n        (*(code *)parameters[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069ec": "process_condition_080069ec",
                "param_1": "parameters",
                "iVar1": "flag",
                "uVar2": "value1",
                "puVar3": "pointer",
                "uVar4": "value2",
                "uVar5": "value3",
                "process_data_0800694c": "process_data",
                "process_binary_data_080064cc": "process_binary_data",
                "update_value_08006932": "update_value",
                "reset_flags_080064b0": "reset_flags",
                "LAB_08006b0c_1": "label1"
            },
            "calling": [],
            "called": [
                "FUN_0800877c",
                "FUN_08004050",
                "FUN_080064b0",
                "FUN_0800694c",
                "FUN_08006932",
                "FUN_080064cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b1c": {
            "entrypoint": "0x08006b1c",
            "current_name": "combine_bytes_08006b1c",
            "code": "\nbyte combineBytes_08006b1c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_08006b1c": "combine_bytes_08006b1c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080085b8",
                "FUN_080085dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b28": {
            "entrypoint": "0x08006b28",
            "current_name": "retrieve_bit_value_08006b28",
            "code": "\nuint retrieveBitValue_08006b28(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08006b28": "retrieve_bit_value_08006b28",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008a6c",
                "FUN_08008a24",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b3e": {
            "entrypoint": "0x08006b3e",
            "current_name": "apply_bitmask_08006b3e",
            "code": "\nvoid applyBitmask_08006b3e(uint inputValue,int dataBuffer)\n\n{\n  uint shiftedBits;\n  \n  shiftedBits = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(dataBuffer + shiftedBits * 4) = *(uint *)(dataBuffer + shiftedBits * 4) | 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b3e": "apply_bitmask_08006b3e",
                "param_1": "inputValue",
                "param_2": "dataBuffer",
                "uVar1": "shiftedBits"
            },
            "calling": [
                "FUN_080088e0",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b5c": {
            "entrypoint": "0x08006b5c",
            "current_name": "clear_bit_in_int_array_08006b5c",
            "code": "\nvoid clearBitInIntArray_08006b5c(uint bitIndex,int arrayAddress)\n\n{\n  uint byteIndex;\n  \n  byteIndex = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + byteIndex * 4) = *(uint *)(arrayAddress + byteIndex * 4) & ~(1 << (bitIndex & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b5c": "clear_bit_in_int_array_08006b5c",
                "param_1": "bitIndex",
                "param_2": "arrayAddress",
                "uVar1": "byteIndex"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b7c": {
            "entrypoint": "0x08006b7c",
            "current_name": "get_memory_address_08006b7c",
            "code": "\nundefined4 getMemoryAddress_08006b7c(undefined4 inputValue)\n\n{\n  switch(inputValue) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08006b7c": "get_memory_address_08006b7c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08008a6c",
                "FUN_08008a24"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006bb8": {
            "entrypoint": "0x08006bb8",
            "current_name": "set_memory_offset_08006bb8",
            "code": "\n\n\nundefined4 setMemoryOffset_08006bb8(undefined4 offset)\n\n{\n  undefined4 newOffset;\n  \n  switch(offset) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    newOffset = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    newOffset = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    newOffset = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    newOffset = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    newOffset = 0x40011800;\n    break;\n  default:\n    newOffset = 0;\n  }\n  return newOffset;\n}\n\n",
            "renaming": {
                "FUN_08006bb8": "set_memory_offset_08006bb8",
                "param_1": "offset",
                "uVar1": "newOffset"
            },
            "calling": [
                "FUN_08006ca8",
                "FUN_08007258",
                "FUN_08006e68",
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c60": {
            "entrypoint": "0x08006c60",
            "current_name": "convert_value_to_range_08006c60",
            "code": "\nuint convertValueToRange_08006c60(undefined4 value,undefined4 default,undefined4 param,undefined4 param)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = find_value_or_default_08007376(value,&DAT_0800a5b8,param,param,param);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (0x10 < shiftedValue - 1) {\n    shiftedValue = 0;\n  }\n  return shiftedValue;\n}\n\n",
            "renaming": {
                "FUN_08006c60": "convert_value_to_range_08006c60",
                "param_1": "value",
                "param_2": "default",
                "param_3": "param",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08006d80"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c7c": {
            "entrypoint": "0x08006c7c",
            "current_name": "evaluate_return_value_08006c7c",
            "code": "\nundefined4 evaluate_return_value_08006c7c(undefined4 value,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  uint shifted_val;\n  \n  result = find_value_or_default_08007376(value,&DAT_0800a6cc,param_3,param_4,param_4);\n  shifted_val = (uint)(result << 0xc) >> 0x1b;\n  if (shifted_val == 3) {\n    return 8;\n  }\n  if (shifted_val != 4) {\n    if (shifted_val != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08006c7c": "evaluate_return_value_08006c7c",
                "param_1": "value",
                "iVar1": "result",
                "uVar2": "shifted_val"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007376"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ca8": {
            "entrypoint": "0x08006ca8",
            "current_name": "update_offset_and_param_08006ca8",
            "code": "\n\n\nvoid update_offset_and_param_08006ca8(int *input_data,undefined4 param_value)\n\n{\n  undefined4 offset_value;\n  uint updated_offset;\n  int current_offset;\n  uint bitmask;\n  undefined4 variable_1;\n  undefined4 variable_2;\n  \n  current_offset = *input_data;\n  if (current_offset == 0x40012400) {\n    updated_offset = _DAT_40021018 | 0x200;\n    current_offset = 0x200;\n    _DAT_40021018 = updated_offset;\n  }\n  else {\n    updated_offset = 0x40012800;\n    if (current_offset == 0x40012800) {\n      updated_offset = _DAT_40021018 | 0x400;\n      current_offset = 0x400;\n      _DAT_40021018 = updated_offset;\n    }\n  }\n  offset_value = set_memory_offset_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c,param_value,updated_offset,current_offset);\n  bitmask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  variable_1 = 3;\n  variable_2 = 0;\n  update_param_080040e8(offset_value,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ca8": "update_offset_and_param_08006ca8",
                "param_1": "input_data",
                "param_2": "param_value",
                "uVar1": "offset_value",
                "uVar2": "updated_offset",
                "iVar3": "current_offset",
                "local_18": "bitmask",
                "local_14": "variable_1",
                "local_10": "variable_2"
            },
            "calling": [
                "FUN_08003bd8"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d24": {
            "entrypoint": "0x08006d24",
            "current_name": "update_configuration_08006d24",
            "code": "\n\n\nvoid updateConfiguration_08006d24(int *configuration)\n\n{\n  if (*configuration != 0x40012400) {\n    if (*configuration == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d24": "update_configuration_08006d24",
                "param_1": "configuration"
            },
            "calling": [
                "FUN_08003ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d80": {
            "entrypoint": "0x08006d80",
            "current_name": "validate_and_configure_08006d80",
            "code": "\nundefined2 validate_and_configure_08006d80(undefined4 input_value)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined2 result;\n  uint value_range;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  int parameter_status;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  initialize_memory(&parameter_status,0,0x30);\n  value_range = 0;\n  flag_1 = 0;\n  flag_2 = 0;\n  result = 0;\n  parameter_status = is_valid_parameter(input_value,&DAT_0800a5b8);\n  if (parameter_status == 0) {\n    result = 0;\n  }\n  else {\n    param_1 = 0;\n    param_2 = 0;\n    param_3 = 0;\n    param_5 = 0;\n    param_7 = 0xe0000;\n    param_8 = 0;\n    param_4 = 1;\n    param_6 = 0;\n    DAT_20000014 = (undefined)input_value;\n    iVar1 = update_parameter_values(&parameter_status);\n    if (iVar1 == 0) {\n      value_range = get_range_from_value(input_value);\n      if (value_range < 0x12) {\n        flag_1 = 1;\n        flag_2 = 2;\n        iVar1 = update_configuration(&parameter_status,&value_range);\n        if (iVar1 == 0) {\n          iVar1 = check_and_update_data(&parameter_status);\n          if (iVar1 == 0) {\n            iVar1 = initialize_flags(&parameter_status);\n            if (iVar1 == 0) {\n              iVar1 = calculate_performance(&parameter_status,10);\n              if (iVar1 == 0) {\n                uVar2 = get_offset_value(&parameter_status);\n                if ((uVar2 & 0x200) != 0) {\n                  result = calculate_offset_value(&parameter_status);\n                }\n                iVar1 = update_data_status(&parameter_status);\n                if (iVar1 == 0) {\n                  iVar1 = configure_data(&parameter_status);\n                  if (iVar1 != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d80": "validate_and_configure_08006d80",
                "param_1": "input_value",
                "local_46": "result",
                "local_44": "value_range",
                "local_40": "flag_1",
                "local_3c": "flag_2",
                "local_38": "parameter_status",
                "local_34": "param_1",
                "local_30": "param_2",
                "local_2c": "param_3",
                "local_28": "param_4",
                "local_24": "param_5",
                "local_20": "param_6",
                "local_1c": "param_7",
                "local_10": "param_8",
                "check_if_valid_parameter_08007320": "is_valid_parameter",
                "fill_memory_080091c6": "initialize_memory",
                "update_param_values_08003bd8": "update_parameter_values",
                "convert_value_to_range_08006c60": "get_range_from_value",
                "update_config_080038e4": "update_configuration",
                "check_and_update_data_08003e20": "check_and_update_data",
                "initialize_flags_08003aa0": "initialize_flags",
                "calculate_performance_0800376c": "calculate_performance",
                "get_value_at_offset_08003a1c": "get_offset_value",
                "get_offset_value_080038dc": "calculate_offset_value",
                "update_data_status_08003de4": "update_data_status",
                "configure_data_08003ce8": "configure_data"
            },
            "calling": [
                "FUN_08008880"
            ],
            "called": [
                "FUN_08003ce8",
                "FUN_08003de4",
                "FUN_08007320",
                "FUN_08003a1c",
                "FUN_08003e20",
                "FUN_080038e4",
                "FUN_080091c6",
                "FUN_08003aa0",
                "FUN_08003bd8",
                "FUN_0800376c",
                "FUN_080038dc",
                "FUN_08006c60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e68": {
            "entrypoint": "0x08006e68",
            "current_name": "initialize_and_update_08006e68",
            "code": "\n\n\nvoid initialize_and_update_08006e68(undefined4 initial_value)\n\n{\n  int found_value;\n  undefined4 memory_offset;\n  uint bitmask;\n  undefined4 constant_1;\n  undefined4 constant_0;\n  undefined4 constant_3;\n  \n  found_value = find_value_or_default_08007376((int)(char)DAT_20000014,&DAT_0800a6cc);\n  initialize_memory_08007438(initial_value);\n  memory_offset = set_memory_offset_08006bb8((uint)((int)(char)DAT_20000014 << 0x18) >> 0x1c);\n  constant_1 = 2;\n  constant_0 = 0;\n  constant_3 = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  switch((uint)(found_value << 0x11) >> 0x19) {\n  case 1:\n    _DAT_40010004 = _DAT_40010004 | 0x7000001;\n    break;\n  case 2:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n    break;\n  case 3:\n    _DAT_40010004 = _DAT_40010004 | 0x7000002;\n    break;\n  case 4:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n    break;\n  case 5:\n    _DAT_40010004 = _DAT_40010004 | 0x7000004;\n    break;\n  case 6:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n    break;\n  case 7:\n    _DAT_40010004 = _DAT_40010004 | 0x7000008;\n    break;\n  case 8:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n    break;\n  case 9:\n    _DAT_40010004 = _DAT_40010004 | 0x7000030;\n    break;\n  case 10:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n    break;\n  case 0xb:\n    _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n    break;\n  case 0xc:\n    _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n    break;\n  case 0xd:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n    break;\n  case 0xe:\n    _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n    break;\n  case 0xf:\n    _DAT_40010004 = _DAT_40010004 | 0x7000300;\n    break;\n  case 0x10:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n    break;\n  case 0x11:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n    break;\n  case 0x12:\n    _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n    break;\n  case 0x13:\n    _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n    break;\n  case 0x14:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n    break;\n  case 0x15:\n    _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n    break;\n  case 0x16:\n    _DAT_40010004 = _DAT_40010004 | 0x7001000;\n    break;\n  case 0x17:\n    _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n    break;\n  case 0x1b:\n    _DAT_40010004 = _DAT_40010004 | 0x7008000;\n    break;\n  case 0x1c:\n    _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n    break;\n  case 0x21:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n    break;\n  case 0x22:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n    break;\n  case 0x23:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n    break;\n  case 0x24:\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  bitmask = 1 << (DAT_20000014 & 0xf) & 0xffff;\n  update_param_080040e8(memory_offset,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e68": "initialize_and_update_08006e68",
                "param_1": "initial_value",
                "iVar1": "found_value",
                "uVar2": "memory_offset",
                "local_20": "bitmask",
                "local_1c": "constant_1",
                "local_18": "constant_0",
                "local_14": "constant_3"
            },
            "calling": [
                "FUN_08006092"
            ],
            "called": [
                "FUN_08007438",
                "FUN_080040e8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007110": {
            "entrypoint": "0x08007110",
            "current_name": "initialize_registers_08007110",
            "code": "\nvoid initialize_registers_08007110(void)\n\n{\n  update_registers_080074e0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007110": "initialize_registers_08007110"
            },
            "calling": [
                "FUN_08005e2e"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007118": {
            "entrypoint": "0x08007118",
            "current_name": "initialize_memory_and_set_configs_08007118",
            "code": "\nvoid initializeMemoryAndSetConfigs_08007118(undefined4 param_1,uint param_2,int param_3,undefined4 param_4,char param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 size1;\n  undefined4 size2;\n  undefined4 size3;\n  undefined4 size4;\n  undefined4 size5;\n  undefined4 size6;\n  undefined4 size7;\n  int isValid;\n  int shiftValue;\n  undefined4 value1;\n  int value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined flag;\n  \n  fillMemory(&isValid,0,0x40);\n  size1 = 0;\n  size2 = 0;\n  size3 = 0;\n  size4 = 0;\n  size5 = 0;\n  size6 = 0;\n  size7 = 0;\n  isValid = checkParameterValidity(param_1,&DAT_0800a6cc);\n  if (isValid != 0) {\n    uVar1 = calculateShiftedValue();\n    shiftValue = uVar1 / param_2 - 1;\n    value2 = param_3 + -1;\n    value3 = 0;\n    value1 = 0;\n    value4 = 0;\n    flag = 0;\n    if (param_5 == '\\x01') {\n      DAT_20000014 = (undefined)param_1;\n      iVar2 = updateDataAndSetFlag(&isValid);\n      if (iVar2 != 0) {\n        return;\n      }\n    }\n    iVar2 = evaluateReturnValue(param_1);\n    if ((((iVar2 == 0) || (iVar2 == 4)) || (iVar2 == 8)) || ((iVar2 == 0xc || (iVar2 == 0x18)))) {\n      size1 = 0x60;\n      size3 = 0;\n      size5 = 0;\n      size4 = 0;\n      size7 = 0;\n      size6 = 0;\n      size2 = param_4;\n      iVar3 = updateConfigurations(&isValid,&size1,iVar2);\n      if (iVar3 == 0) {\n        uVar1 = findValueOrDefault(param_1,&DAT_0800a6cc);\n        if ((uVar1 & 0x100000) == 0) {\n          setFlagAndValue(&isValid,iVar2);\n        }\n        else {\n          setFlagsAndValues(&isValid,iVar2);\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007118": "initialize_memory_and_set_configs_08007118",
                "local_74": "size1",
                "local_70": "size2",
                "local_6c": "size3",
                "local_68": "size4",
                "local_64": "size5",
                "local_60": "size6",
                "local_5c": "size7",
                "local_58": "isValid",
                "local_54": "shiftValue",
                "local_50": "value1",
                "local_4c": "value2",
                "local_48": "value3",
                "local_44": "value4",
                "local_1b": "flag",
                "fill_memory_080091c6": "fillMemory",
                "check_if_valid_parameter_08007320": "checkParameterValidity",
                "calculate_shifted_value_080075dc": "calculateShiftedValue",
                "update_data_and_set_flag_08006092": "updateDataAndSetFlag",
                "evaluate_return_value_08006c7c": "evaluateReturnValue",
                "update_configurations_08006186": "updateConfigurations",
                "find_value_or_default_08007376": "findValueOrDefault",
                "set_flag_and_value_08006390": "setFlagAndValue",
                "set_flags_and_values_0800643c": "setFlagsAndValues"
            },
            "calling": [
                "FUN_080088e0"
            ],
            "called": [
                "FUN_0800643c",
                "FUN_080075dc",
                "FUN_08006390",
                "FUN_08007320",
                "FUN_08006092",
                "FUN_080091c6",
                "FUN_08006186",
                "FUN_08007376",
                "FUN_08006c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071e4": {
            "entrypoint": "0x080071e4",
            "current_name": "process_parameter_080071e4",
            "code": "\nvoid processParameter_080071e4(undefined4 parameter)\n\n{\n  int returnValue;\n  uint valueFlag;\n  int valuesArray [17];\n  \n  valuesArray[0] = check_if_valid_parameter_08007320(parameter,&DAT_0800a6cc);\n  if ((valuesArray[0] != 0) &&\n     ((((returnValue = evaluate_return_value_08006c7c(parameter), returnValue == 0 || (returnValue == 4)) || (returnValue == 8)) ||\n      ((returnValue == 0xc || (returnValue == 0x18)))))) {\n    valueFlag = find_value_or_default_08007376(parameter,&DAT_0800a6cc);\n    if ((valueFlag & 0x100000) == 0) {\n      update_and_check_values_080063c0(valuesArray,returnValue);\n    }\n    else {\n      update_and_check_value_08006460(valuesArray,returnValue);\n    }\n    initialize_function_08005e2e(valuesArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080071e4": "process_parameter_080071e4",
                "param_1": "parameter",
                "iVar1": "returnValue",
                "uVar2": "valueFlag",
                "local_50": "valuesArray"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_08007320",
                "FUN_08005e2e",
                "FUN_080063c0",
                "FUN_08007376",
                "FUN_08006c7c",
                "FUN_08006460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800723c": {
            "entrypoint": "0x0800723c",
            "current_name": "initialize_data_0800723c",
            "code": "\nvoid initialize_data_0800723c(void)\n\n{\n  fetch_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800723c": "initialize_data_0800723c",
                "get_data_08003760": "fetch_data"
            },
            "calling": [
                "FUN_08008abc"
            ],
            "called": [
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007244": {
            "entrypoint": "0x08007244",
            "current_name": "FUNC_08007244",
            "code": "\nvoid FUNC_08007244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007244": "FUNC_08007244"
            },
            "calling": [
                "FUN_08007246"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007246": {
            "entrypoint": "0x08007246",
            "current_name": "initialize_and_update_08007246",
            "code": "\nvoid initialize_and_update_08007246(void)\n\n{\n  perform_addition_and_update();\n  initialize_process();\n  FUNC_08007244();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007246": "initialize_and_update_08007246",
                "addition_and_update_08003748": "perform_addition_and_update",
                "call_initialize_process_08004046": "initialize_process"
            },
            "calling": [],
            "called": [
                "FUN_08004046",
                "FUN_08007244",
                "FUN_08003748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007258": {
            "entrypoint": "0x08007258",
            "current_name": "initialize_memory_08007258",
            "code": "\n\n\nvoid initializeMemory_08007258(uint input,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 memoryOffset;\n  uint bitMask;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 constant;\n  \n  memoryOffset = set_memory_offset_08006bb8((input << 0x18) >> 0x1c);\n  bitMask = 1 << (input & 0xf) & 0xffff;\n  constant = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((input - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((input == 0xf) || (input == 0x13)) || (input == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  param2Copy = value1;\n  param3Copy = value2;\n  update_param_080040e8(memoryOffset,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007258": "initialize_memory_08007258",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "memoryOffset",
                "local_20": "bitMask",
                "local_1c": "param2Copy",
                "local_18": "param3Copy",
                "local_14": "constant"
            },
            "calling": [
                "FUN_08008990"
            ],
            "called": [
                "FUN_080040e8",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d8": {
            "entrypoint": "0x080072d8",
            "current_name": "set_param_value_080072d8",
            "code": "\nvoid setParamValue_080072d8(undefined4 paramValue1,undefined2 paramValue2,int condition,undefined4 paramValue3)\n\n{\n  if (condition == 0) {\n    set_param_value_080042e2(paramValue1,paramValue2,0,paramValue3,paramValue3);\n    return;\n  }\n  set_param_value_080042e2(paramValue1,paramValue2,1,paramValue3,paramValue3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d8": "set_param_value_080072d8",
                "param_1": "paramValue1",
                "param_2": "paramValue2",
                "param_3": "condition",
                "param_4": "paramValue3"
            },
            "calling": [
                "FUN_08008a24"
            ],
            "called": [
                "FUN_080042e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072f0": {
            "entrypoint": "0x080072f0",
            "current_name": "check_bit_and_return_080072f0",
            "code": "\nvoid check_bit_and_return_080072f0(undefined4 input_param,undefined2 flag_param,undefined4 data_param_1,undefined4 data_param_2)\n\n{\n  check_bit_080042d4(input_param,flag_param,data_param_1,data_param_2,data_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072f0": "check_bit_and_return_080072f0",
                "param_1": "input_param",
                "param_2": "flag_param",
                "param_3": "data_param_1",
                "param_4": "data_param_2"
            },
            "calling": [
                "FUN_08008a6c"
            ],
            "called": [
                "FUN_080042d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072fa": {
            "entrypoint": "0x080072fa",
            "current_name": "initialize_system_and_device_080072fa",
            "code": "\nvoid initialize_system_and_device_080072fa(void)\n\n{\n  initialize_system();\n  initialize_device();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072fa": "initialize_system_and_device_080072fa",
                "initialize_system_08003724": "initialize_system",
                "initialize_device_080035b8": "initialize_device"
            },
            "calling": [
                "FUN_080036a2"
            ],
            "called": [
                "FUN_08003724",
                "FUN_080035b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007306": {
            "entrypoint": "0x08007306",
            "current_name": "find_value_08007306",
            "code": "\nundefined4 find_value_08007306(int value_to_find,char *data)\n\n{\n  while( true ) {\n    if (*data == -1) {\n      return 0;\n    }\n    if (*data == value_to_find) break;\n    data = data + 0xc;\n  }\n  return *(undefined4 *)(data + 4);\n}\n\n",
            "renaming": {
                "FUN_08007306": "find_value_08007306",
                "param_1": "value_to_find",
                "param_2": "data"
            },
            "calling": [
                "FUN_08007320",
                "FUN_08007306"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007320": {
            "entrypoint": "0x08007320",
            "current_name": "check_if_valid_parameter_08007320",
            "code": "\nundefined4 check_if_valid_parameter_08007320(int input_parameter)\n\n{\n  undefined4 value_to_return;\n  \n  if (input_parameter != -1) {\n    value_to_return = find_value_08007306();\n    return value_to_return;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007320": "check_if_valid_parameter_08007320",
                "param_1": "input_parameter",
                "uVar1": "value_to_return"
            },
            "calling": [
                "FUN_080071e4",
                "FUN_080084b0",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008500",
                "FUN_08006d80",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08007306"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007332": {
            "entrypoint": "0x08007332",
            "current_name": "find_value_in_array_08007332",
            "code": "\nint find_value_in_array_08007332(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08007332": "find_value_in_array_08007332",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800734a",
                "FUN_08007332"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800734a": {
            "entrypoint": "0x0800734a",
            "current_name": "find_value_or_default_0800734a",
            "code": "\nundefined4 find_value_or_default_0800734a(int value_to_find)\n\n{\n  undefined4 found_value;\n  \n  if (value_to_find != 0) {\n    found_value = find_value_in_array_08007332();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800734a": "find_value_or_default_0800734a",
                "param_1": "value_to_find",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008d30"
            ],
            "called": [
                "FUN_08007332"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800735a": {
            "entrypoint": "0x0800735a",
            "current_name": "find_value_in_list_0800735a",
            "code": "\nundefined4 find_value_in_list_0800735a(int value,char *list)\n\n{\n  while( true ) {\n    if (*list == -1) {\n      return 0xffffffff;\n    }\n    if (*list == value) break;\n    list = list + 0xc;\n  }\n  return *(undefined4 *)(list + 8);\n}\n\n",
            "renaming": {
                "FUN_0800735a": "find_value_in_list_0800735a",
                "param_1": "value",
                "param_2": "list"
            },
            "calling": [
                "FUN_0800735a",
                "FUN_08007376"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007376": {
            "entrypoint": "0x08007376",
            "current_name": "find_value_or_default_08007376",
            "code": "\nundefined4 find_value_or_default_08007376(int value)\n\n{\n  undefined4 found_value;\n  \n  if (value == -1) {\n    return 0xffffffff;\n  }\n  found_value = find_value_in_list_0800735a();\n  return found_value;\n}\n\n",
            "renaming": {
                "FUN_08007376": "find_value_or_default_08007376",
                "param_1": "value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_080071e4",
                "FUN_080077b0",
                "FUN_08007118",
                "FUN_08008078",
                "FUN_08006c7c",
                "FUN_08006c60"
            ],
            "called": [
                "FUN_0800735a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738a": {
            "entrypoint": "0x0800738a",
            "current_name": "check_match_0800738a",
            "code": "\nundefined4 check_match_0800738a(int value,char *data)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*data == -1) {\n      return 0;\n    }\n    if (value == *data) break;\n    data = data + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800738a": "check_match_0800738a",
                "param_1": "value",
                "param_2": "data"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_080005f8",
                "FUN_08000a64",
                "FUN_080088e0",
                "FUN_0800021a",
                "FUN_08008990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ae": {
            "entrypoint": "0x080073ae",
            "current_name": "compare_and_return_min_080073ae",
            "code": "\nint compare_and_return_min_080073ae(int number_1,int number_2)\n\n{\n  if (number_1 != number_2) {\n    if (number_1 == 0) {\n      return number_2;\n    }\n    if (number_2 == 0) {\n      return number_1;\n    }\n    number_1 = 0;\n  }\n  return number_1;\n}\n\n",
            "renaming": {
                "FUN_080073ae": "compare_and_return_min_080073ae",
                "param_1": "number_1",
                "param_2": "number_2"
            },
            "calling": [
                "FUN_080077b0",
                "FUN_08008078"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "execute_callback_080073c0",
            "code": "\nvoid executeCallback_080073c0(void)\n\n{\n  if (DAT_200005f4 != (code *)0x0) {\n    (*DAT_200005f4)(DAT_2000060c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "execute_callback_080073c0"
            },
            "calling": [
                "FUN_08005cb4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073e8": {
            "entrypoint": "0x080073e8",
            "current_name": "infinite_loop_080073e8",
            "code": "\nvoid infiniteLoop_080073e8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080073e8": "infinite_loop_080073e8"
            },
            "calling": [
                "FUN_080073e8",
                "FUN_080035b8"
            ],
            "called": [
                "FUN_080073e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073ec": {
            "entrypoint": "0x080073ec",
            "current_name": "configure_hardware_080073ec",
            "code": "\n\n\nvoid configureHardware_080073ec(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073ec": "configure_hardware_080073ec"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007438": {
            "entrypoint": "0x08007438",
            "current_name": "initialize_memory_08007438",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid initializeMemory_08007438(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n    DAT_20000610 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n    DAT_20000614 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n    DAT_20000618 = memoryAddress;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n    DAT_2000061c = memoryAddress;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007438": "initialize_memory_08007438",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08006e68",
                "FUN_08007708"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074e0": {
            "entrypoint": "0x080074e0",
            "current_name": "update_registers_080074e0",
            "code": "\n\n\nvoid update_registers_080074e0(int *register_value)\n\n{\n  if (*register_value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*register_value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*register_value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*register_value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074e0": "update_registers_080074e0",
                "param_1": "register_value"
            },
            "calling": [
                "FUN_08007110",
                "FUN_08007710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007544": {
            "entrypoint": "0x08007544",
            "current_name": "get_timer_ir_qn_08007544",
            "code": "\nundefined4 getTimerIRQn_08007544(uint timerIRQn)\n\n{\n  if (timerIRQn == 0xffffffff) {\n    return 0;\n  }\n  if (timerIRQn == 0x40000400) {\n    return 0x1d;\n  }\n  if (timerIRQn < 0x40000401) {\n    if (timerIRQn == 0x40000000) {\n      return 0x1c;\n    }\n  }\n  else {\n    if (timerIRQn == 0x40000800) {\n      return 0x1e;\n    }\n    if (timerIRQn == 0x40012c00) {\n      return 0x19;\n    }\n  }\n  handleUnknownIRQn(\"TIM: Unknown timer IRQn\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007544": "get_timer_ir_qn_08007544",
                "param_1": "timerIRQn",
                "initialize_and_process_input_080098d8": "handleUnknownIRQn"
            },
            "calling": [
                "FUN_08007648",
                "FUN_080076e0"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007594": {
            "entrypoint": "0x08007594",
            "current_name": "check_timer_instance_08007594",
            "code": "\nundefined4 checkTimerInstance_08007594(uint timerInstance)\n\n{\n  if (timerInstance == 0xffffffff) {\n    return 0;\n  }\n  if (timerInstance == 0x40000400) {\n    return 1;\n  }\n  if (timerInstance < 0x40000401) {\n    if (timerInstance == 0x40000000) {\n      return 1;\n    }\n  }\n  else {\n    if (timerInstance == 0x40000800) {\n      return 1;\n    }\n    if (timerInstance == 0x40012c00) {\n      return 2;\n    }\n  }\n  initializeAndProcessInput(\"TIM: Unknown timer instance\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007594": "check_timer_instance_08007594",
                "param_1": "timerInstance",
                "initialize_and_process_input_080098d8": "initializeAndProcessInput"
            },
            "calling": [
                "FUN_080075dc"
            ],
            "called": [
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080075dc": {
            "entrypoint": "0x080075dc",
            "current_name": "calculate_shifted_value_080075dc",
            "code": "\nint calculateShiftedValue_080075dc(undefined4 inputValue)\n\n{\n  uint localC;\n  int result;\n  uint local10;\n  undefined4 initializedValue;\n  undefined4 counter1;\n  undefined4 counter2;\n  undefined4 counter3;\n  uint counter4;\n  uint counter5;\n  \n  counter1 = 0;\n  counter2 = 0;\n  counter3 = 0;\n  counter4 = 0;\n  counter5 = 0;\n  initializedValue = 0;\n  initialize_params_08005a68(&counter1,&initializedValue);\n  result = check_timer_instance_08007594(inputValue);\n  localC = counter5;\n  local10 = counter4;\n  if (result == 1) {\n    result = get_shifted_value_08005a28();\n  }\n  else if (result == 2) {\n    result = calculate_shifted_value_08005a48();\n    local10 = localC;\n  }\n  else {\n    initialize_and_process_input_080098d8(\"TIM: Unknown clock source\");\n    result = 0;\n    local10 = 0;\n  }\n  if (local10 != 0x500) {\n    if (local10 < 0x501) {\n      if (local10 != 0x400) {\n        return result;\n      }\n    }\n    else if ((local10 != 0x600) && (local10 != 0x700)) {\n      return result;\n    }\n  }\n  return result << 1;\n}\n\n",
            "renaming": {
                "FUN_080075dc": "calculate_shifted_value_080075dc",
                "param_1": "inputValue",
                "uVar1": "localC",
                "iVar2": "result",
                "uVar3": "local10",
                "local_20": "initializedValue",
                "local_1c": "counter1",
                "local_18": "counter2",
                "local_14": "counter3",
                "local_10": "counter4",
                "local_c": "counter5"
            },
            "calling": [
                "FUN_08007648",
                "FUN_08007118"
            ],
            "called": [
                "FUN_08007594",
                "FUN_08005a68",
                "FUN_08005a28",
                "FUN_08005a48",
                "FUN_080098d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007648": {
            "entrypoint": "0x08007648",
            "current_name": "initialize_and_update_data_08007648",
            "code": "\nvoid initialize_and_update_data_08007648(undefined4 *output_buffer,undefined4 input_value,undefined4 timer_value,undefined4 flag_value)\n\n{\n  char cVar1;\n  uint shifted_value;\n  int iVar3;\n  undefined4 *pointer_param1;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  \n  local_var1 = 0;\n  local_var2 = 0;\n  local_var3 = 0;\n  local_var4 = 0;\n  local_var5 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  pointer_param1 = output_buffer + 1;\n  *output_buffer = 0x40000000;\n  output_buffer[1] = 0x40000000;\n  output_buffer[4] = input_value;\n  shifted_value = calculate_shifted_value_080075dc();\n  output_buffer[2] = shifted_value / 1000000 - 1;\n  output_buffer[5] = 0;\n  output_buffer[3] = 0;\n  output_buffer[6] = 0;\n  output_buffer[0x13] = flag_value;\n  local_var1 = 0;\n  local_var3 = 0;\n  local_var5 = 0;\n  local_var4 = 0;\n  local_var6 = 0;\n  local_var7 = 0;\n  local_var2 = timer_value;\n  cVar1 = get_timer_ir_qn_08007544(*output_buffer);\n  apply_mask_and_store_08003f30((int)cVar1,0xe,0);\n  cVar1 = get_timer_ir_qn_08007544(*output_buffer);\n  set_bit_at_index_08003f94((int)cVar1);\n  iVar3 = initialize_data_08006060(pointer_param1);\n  if ((iVar3 == 0) && (iVar3 = update_data_08006128(pointer_param1,&local_var1,0), iVar3 == 0)) {\n    update_flags_and_values_08006280(pointer_param1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007648": "initialize_and_update_data_08007648",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "timer_value",
                "param_4": "flag_value",
                "local_34": "local_var1",
                "local_30": "local_var2",
                "local_2c": "local_var3",
                "local_28": "local_var4",
                "local_24": "local_var5",
                "local_20": "local_var6",
                "local_1c": "local_var7",
                "puVar4": "pointer_param1",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_0800242c"
            ],
            "called": [
                "FUN_08006280",
                "FUN_08006128",
                "FUN_08006060",
                "FUN_080075dc",
                "FUN_08003f94",
                "FUN_08007544",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076e0": {
            "entrypoint": "0x080076e0",
            "current_name": "initialize_data_080076e0",
            "code": "\nvoid initializeData_080076e0(undefined4 *data)\n\n{\n  char timerValue;\n  int returnValue;\n  \n  data[0x13] = 0;\n  timerValue = get_timer_ir_qn_08007544(*data);\n  set_bit_in_memory_08003fb0((int)timerValue);\n  returnValue = FUNC_08005df4(data + 1);\n  if (returnValue == 0) {\n    update_bitwise_values_080062f4(data + 1,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076e0": "initialize_data_080076e0",
                "param_1": "data",
                "cVar1": "timerValue",
                "iVar2": "returnValue"
            },
            "calling": [
                "FUN_08002578"
            ],
            "called": [
                "FUN_08005df4",
                "FUN_08003fb0",
                "FUN_08007544",
                "FUN_080062f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007708": {
            "entrypoint": "0x08007708",
            "current_name": "initialize_memory_08007708",
            "code": "\nvoid initializeMemory_08007708(void)\n\n{\n  initializeMemory_08007708_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007708": "initialize_memory_08007708",
                "initialize_memory_08007438": "initializeMemory_helper"
            },
            "calling": [
                "FUN_08006060"
            ],
            "called": [
                "FUN_08007438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007710": {
            "entrypoint": "0x08007710",
            "current_name": "update_registers_08007710",
            "code": "\nvoid update_registers_08007710(void)\n\n{\n  update_registers_08007710_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007710": "update_registers_08007710",
                "update_registers_080074e0": "update_registers_helper"
            },
            "calling": [
                "FUN_08005df4"
            ],
            "called": [
                "FUN_080074e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007718": {
            "entrypoint": "0x08007718",
            "current_name": "subtract_four_08007718",
            "code": "\nint subtractFour_08007718(int inputValue)\n\n{\n  return inputValue + -4;\n}\n\n",
            "renaming": {
                "FUN_08007718": "subtract_four_08007718",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007736",
                "FUN_0800771c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800771c": {
            "entrypoint": "0x0800771c",
            "current_name": "execute_function_if_condition_met_0800771c",
            "code": "\nvoid executeFunctionIfConditionMet_0800771c(int functionArgument)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if ((*(functionPointer **)(result + 0x4c) != (functionPointer *)0x0) && (*(char *)(functionArgument + 0x1c) == '\\x01')) {\n    (**(functionPointer **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800771c": "execute_function_if_condition_met_0800771c",
                "param_1": "functionArgument",
                "iVar1": "result",
                "subtract_four_08007718": "subtractFour",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007736": {
            "entrypoint": "0x08007736",
            "current_name": "execute_callback_08007736",
            "code": "\nvoid executeCallback_08007736(void)\n\n{\n  int result;\n  \n  result = getCallbackAddress();\n  if (*(code **)(result + 0x48) != (code *)0x0) {\n    (**(code **)(result + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007736": "execute_callback_08007736",
                "iVar1": "result",
                "subtract_four_08007718": "getCallbackAddress"
            },
            "calling": [
                "FUN_08005e6e"
            ],
            "called": [
                "FUN_08007718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007744": {
            "entrypoint": "0x08007744",
            "current_name": "get_memory_value_08007744",
            "code": "\nundefined4 getMemoryValue_08007744(int memoryAddress)\n\n{\n  return *(undefined4 *)(*(int *)(memoryAddress + 4) + 0x24);\n}\n\n",
            "renaming": {
                "FUN_08007744": "get_memory_value_08007744",
                "param_1": "memoryAddress"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800774a": {
            "entrypoint": "0x0800774a",
            "current_name": "update_pointer_0800774a",
            "code": "\nvoid updatePointer_0800774a(int originalPointer,undefined4 newValue)\n\n{\n  *(undefined4 *)(*(int *)(originalPointer + 4) + 0x24) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800774a": "update_pointer_0800774a",
                "param_1": "originalPointer",
                "param_2": "newValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007750": {
            "entrypoint": "0x08007750",
            "current_name": "write_to_memory_08007750",
            "code": "\nvoid writeToMemory_08007750(int memoryAddress,int offset,undefined4 data)\n\n{\n  *(undefined4 *)(*(int *)(memoryAddress + 4) + 0x34 + offset * 4) = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007750": "write_to_memory_08007750",
                "param_1": "memoryAddress",
                "param_2": "offset",
                "param_3": "data"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080077b0": {
            "entrypoint": "0x080077b0",
            "current_name": "initialize_i2_c_peripheral_080077b0",
            "code": "\n\n\nvoid initializeI2CPeripheral_080077b0(int *pinConfiguration,int parameter2,int parameter3,int parameter4,undefined parameter5)\n\n{\n  int pinValidity1;\n  int pinValidity2;\n  undefined4 memoryOffset;\n  uint valueOrDefault1;\n  uint valueOrDefault2;\n  int *inputPointer;\n  uint pinMask1;\n  uint pinMask2;\n  uint localVar1;\n  undefined4 localVar2;\n  \n  if (pinConfiguration != (int *)0x0) {\n    inputPointer = pinConfiguration + 1;\n    pinValidity1 = check_if_valid_parameter_08007320((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n    pinValidity2 = check_if_valid_parameter_08007320((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n    if ((pinValidity1 == 0) || (pinValidity2 == 0)) {\n      initialize_and_process_input_080098d8(\"ERROR: at least one I2C pin has no peripheral\\n\");\n    }\n    else {\n      pinValidity1 = compare_and_return_min_080073ae(pinValidity1,pinValidity2);\n      *pinConfiguration = pinValidity1;\n      if (pinValidity1 == 0) {\n        initialize_and_process_input_080098d8(\"ERROR: I2C pins mismatch\\n\");\n      }\n      else {\n        if (pinValidity1 == 0x40005400) {\n          _DAT_4002101c = _DAT_4002101c | 0x200000;\n          _DAT_40021010 = _DAT_40021010 & 0xffdfffff;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x1f;\n          *(undefined *)((int)pinConfiguration + 0x5b) = 0x20;\n          DAT_20000668 = inputPointer;\n        }\n        if (*pinConfiguration == 0x40005800) {\n          _DAT_4002101c = _DAT_4002101c | 0x400000;\n          _DAT_40021010 = _DAT_40021010 & 0xffbfffff;\n          *(undefined *)((int)pinConfiguration + 0x5a) = 0x21;\n          *(undefined *)((int)pinConfiguration + 0x5b) = 0x22;\n          DAT_2000066c = inputPointer;\n        }\n        memoryOffset = set_memory_offset_08006bb8((uint)((int)*(char *)((int)pinConfiguration + 0x59) << 0x18) >> 0x1c);\n        pinMask1 = 1 << ((int)*(char *)((int)pinConfiguration + 0x59) & 0xfU) & 0xffff;\n        valueOrDefault1 = find_value_or_default_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        valueOrDefault2 = find_value_or_default_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        pinMask2 = (valueOrDefault1 >> 3 & 1) << 4 | valueOrDefault2 & 7;\n        localVar2 = 3;\n        pinValidity1 = find_value_or_default_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        localVar1 = (uint)(pinValidity1 << 0x1a) >> 0x1e;\n        pinValidity1 = find_value_or_default_08007376((int)*(char *)((int)pinConfiguration + 0x59),&DAT_0800a66c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        valueOrDefault2 = 1;\n        valueOrDefault1 = _DAT_40021018;\n        switch((uint)(pinValidity1 << 0x11) >> 0x19) {\n        case 1:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 2:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 3:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 4:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 5:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 6:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 7:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 8:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 9:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 10:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xb:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xc:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xd:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xe:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xf:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x10:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x11:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x12:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x13:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x14:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x15:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x16:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x17:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x1b:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x1c:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x21:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x22:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x23:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x24:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = valueOrDefault2;\n        }\n        update_param_080040e8(memoryOffset,&pinMask1,valueOrDefault1,valueOrDefault2);\n        memoryOffset = set_memory_offset_08006bb8((uint)((int)*(char *)(pinConfiguration + 0x16) << 0x18) >> 0x1c);\n        pinMask1 = 1 << ((int)*(char *)(pinConfiguration + 0x16) & 0xfU) & 0xffff;\n        valueOrDefault1 = find_value_or_default_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        valueOrDefault2 = find_value_or_default_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        pinMask2 = (valueOrDefault1 >> 3 & 1) << 4 | valueOrDefault2 & 7;\n        localVar2 = 3;\n        pinValidity1 = find_value_or_default_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        localVar1 = (uint)(pinValidity1 << 0x1a) >> 0x1e;\n        pinValidity1 = find_value_or_default_08007376((int)*(char *)(pinConfiguration + 0x16),&DAT_0800a69c);\n        _DAT_40021018 = _DAT_40021018 | 1;\n        valueOrDefault2 = 1;\n        valueOrDefault1 = _DAT_40021018;\n        switch((uint)(pinValidity1 << 0x11) >> 0x19) {\n        case 1:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000001;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 2:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 3:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000002;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 4:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 5:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000004;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 6:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 7:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000008;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 8:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 9:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000030;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 10:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xb:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xc:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x70000c0;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xd:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xe:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0xf:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000300;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x10:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x11:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x12:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x13:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7000c00;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x14:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x15:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x16:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7001000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x17:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x1b:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 | 0x7008000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x1c:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x21:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x22:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x23:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          _DAT_40010004 = valueOrDefault2;\n          break;\n        case 0x24:\n          valueOrDefault1 = 0x40010000;\n          valueOrDefault2 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n          _DAT_40010004 = valueOrDefault2;\n        }\n        update_param_080040e8(memoryOffset,&pinMask1,valueOrDefault1,valueOrDefault2);\n        pinConfiguration[1] = *pinConfiguration;\n        pinConfiguration[2] = parameter2;\n        pinConfiguration[3] = 0;\n        pinConfiguration[4] = parameter4;\n        pinConfiguration[7] = 0xff;\n        pinConfiguration[5] = parameter3;\n        pinConfiguration[6] = 0;\n        pinConfiguration[8] = 0;\n        pinConfiguration[9] = 0;\n        *(undefined *)((int)pinConfiguration + 0x41) = 0;\n        apply_mask_and_store_08003f30((int)*(char *)((int)pinConfiguration + 0x5a),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)pinConfiguration + 0x5a));\n        apply_mask_and_store_08003f30((int)*(char *)((int)pinConfiguration + 0x5b),0,1);\n        set_bit_at_index_08003f94((int)*(char *)((int)pinConfiguration + 0x5b));\n        calculate_parameters_080045c0(inputPointer);\n        *(undefined *)((int)pinConfiguration + 0x5d) = parameter5;\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080077b0": "initialize_i2_c_peripheral_080077b0",
                "param_1": "pinConfiguration",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "iVar1": "pinValidity1",
                "iVar2": "pinValidity2",
                "uVar3": "memoryOffset",
                "uVar4": "valueOrDefault1",
                "uVar5": "valueOrDefault2",
                "piVar6": "inputPointer",
                "local_38": "pinMask1",
                "local_34": "pinMask2",
                "local_30": "localVar1",
                "local_2c": "localVar2"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_08003f94",
                "FUN_080073ae",
                "FUN_08003f30",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_080045c0",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e74": {
            "entrypoint": "0x08007e74",
            "current_name": "extract_and_verify_data_08007e74",
            "code": "\nint extract_and_verify_data_08007e74(int input_offset,undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  int initial_data_value;\n  int result_value;\n  uint difference;\n  int condition;\n  int offset_plus_four;\n  undefined4 temp_value;\n  \n  temp_value = value_3;\n  initial_data_value = get_data_08003760();\n  difference = 0;\n  condition = 2;\n  do {\n    offset_plus_four = input_offset + 4;\n    result_value = extract_information_08004728(offset_plus_four,value_1,value_2,value_3,temp_value);\n    if (result_value == 0) {\n      condition = 0;\n      while ((result_value = get_value_from_offset_0800542a(offset_plus_four), result_value != 0x20 && (condition == 0))) {\n        result_value = get_data_08003760();\n        difference = result_value - initial_data_value;\n        if (difference < 0x65) {\n          result_value = get_offset_value_08005430(offset_plus_four);\n          if (result_value != 0) {\n            condition = 2;\n          }\n        }\n        else {\n          condition = 1;\n        }\n      }\n    }\n    result_value = get_offset_value_08005430(offset_plus_four);\n  } while ((result_value == 4) && (difference < 100));\n  return condition;\n}\n\n",
            "renaming": {
                "FUN_08007e74": "extract_and_verify_data_08007e74",
                "param_1": "input_offset",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "iVar1": "initial_data_value",
                "iVar2": "result_value",
                "uVar3": "difference",
                "iVar4": "condition",
                "iVar5": "offset_plus_four",
                "uVar6": "temp_value"
            },
            "calling": [
                "FUN_08002a58"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_08004728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ede": {
            "entrypoint": "0x08007ede",
            "current_name": "copy_data_to_destination_08007ede",
            "code": "\nundefined4 copy_data_to_destination_08007ede(int destination_ptr,int source_ptr,uint data_size)\n\n{\n  uint i;\n  \n  if (0x20 < data_size) {\n    return 2;\n  }\n  for (i = 0; i < data_size; i = i + 1 & 0xff) {\n    *(undefined *)(destination_ptr + i + 0x68) = *(undefined *)(source_ptr + i);\n    *(char *)(destination_ptr + 0x88) = *(char *)(destination_ptr + 0x88) + '\\x01';\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007ede": "copy_data_to_destination_08007ede",
                "param_1": "destination_ptr",
                "param_2": "source_ptr",
                "param_3": "data_size",
                "uVar1": "i"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_0800288c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f0e": {
            "entrypoint": "0x08007f0e",
            "current_name": "process_data_08007f0e",
            "code": "\nint processData_08007f0e(int input,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataStart;\n  int result;\n  uint difference;\n  int status;\n  int offset;\n  undefined4 param4Copy;\n  \n  param4Copy = param4;\n  dataStart = get_data_08003760();\n  difference = 0;\n  status = 2;\n  do {\n    offset = input + 4;\n    result = process_data_080047f4(offset,param2,param3,param4,param4Copy);\n    if (result == 0) {\n      status = 0;\n      while ((result = get_value_from_offset_0800542a(offset), result != 0x20 && (status == 0))) {\n        result = get_data_08003760();\n        difference = result - dataStart;\n        if (difference < 0x65) {\n          result = get_offset_value_08005430(offset);\n          if (result != 0) {\n            status = 2;\n          }\n        }\n        else {\n          status = 1;\n        }\n      }\n    }\n    result = get_offset_value_08005430(offset);\n  } while ((result == 4) && (difference < 100));\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08007f0e": "process_data_08007f0e",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataStart",
                "iVar2": "result",
                "uVar3": "difference",
                "iVar4": "status",
                "iVar5": "offset",
                "uVar6": "param4Copy"
            },
            "calling": [
                "FUN_08002b68"
            ],
            "called": [
                "FUN_0800542a",
                "FUN_08005430",
                "FUN_08003760",
                "FUN_080047f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f78": {
            "entrypoint": "0x08007f78",
            "current_name": "subtract_four_08007f78",
            "code": "\nint subtract_four_08007f78(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_08007f78": "subtract_four_08007f78",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_08008020",
                "FUN_08007ff0",
                "FUN_08007fa0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f7c": {
            "entrypoint": "0x08007f7c",
            "current_name": "update_data_structure_08007f7c",
            "code": "\nvoid update_data_structure_08007f7c(int data_ptr,int new_value)\n\n{\n  if (data_ptr != 0) {\n    if (new_value != 0) {\n      *(int *)(data_ptr + 0x60) = new_value;\n      initialize_data_structure_080049e0(data_ptr + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f7c": "update_data_structure_08007f7c",
                "param_1": "data_ptr",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f8e": {
            "entrypoint": "0x08007f8e",
            "current_name": "update_data_structure_08007f8e",
            "code": "\nvoid updateDataStructure_08007f8e(int pointer,int value)\n\n{\n  if (pointer != 0) {\n    if (value != 0) {\n      *(int *)(pointer + 100) = value;\n      initializeDataStructure(pointer + 4);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f8e": "update_data_structure_08007f8e",
                "param_1": "pointer",
                "param_2": "value",
                "initialize_data_structure_080049e0": "initializeDataStructure"
            },
            "calling": [
                "FUN_08002968"
            ],
            "called": [
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007fa0": {
            "entrypoint": "0x08007fa0",
            "current_name": "process_input_08007fa0",
            "code": "\nvoid processInput_08007fa0(int inputData,int flag,int comparisonValue,undefined4 param4)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (comparisonValue == *(int *)(inputData + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5c) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      updateData(inputData,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5c) = 1;\n    parseInput(inputData,result + 0x68,0x20,8,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007fa0": "process_input_08007fa0",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "comparisonValue",
                "param_4": "param4",
                "iVar1": "result",
                "subtract_four_08007f78": "subtractFour",
                "update_data_080048c8": "updateData",
                "parse_input_08004954": "parseInput"
            },
            "calling": [
                "FUN_08004ac2"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_08004954",
                "FUN_080048c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ff0": {
            "entrypoint": "0x08007ff0",
            "current_name": "initialize_and_execute_08007ff0",
            "code": "\nvoid initialize_and_execute_08007ff0(undefined4 input_param)\n\n{\n  int result;\n  \n  result = get_function_pointer();\n  if (((*(function_pointer **)(result + 0x60) != (function_pointer *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(function_pointer **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data_structure(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ff0": "initialize_and_execute_08007ff0",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_four_08007f78": "get_function_pointer",
                "code": "function_pointer",
                "initialize_data_structure_080049e0": "initialize_data_structure"
            },
            "calling": [
                "FUN_08004f3c",
                "FUN_08004aec",
                "FUN_08005084"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008020": {
            "entrypoint": "0x08008020",
            "current_name": "initialize_if_data_structure_not_initialized_08008020",
            "code": "\nvoid initialize_if_data_structure_not_initialized_08008020(undefined4 input_param)\n\n{\n  int result;\n  \n  result = get_data_structure_offset();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    initialize_data_structure(input_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008020": "initialize_if_data_structure_not_initialized_08008020",
                "param_1": "input_param",
                "iVar1": "result",
                "subtract_four_08007f78": "get_data_structure_offset",
                "initialize_data_structure_080049e0": "initialize_data_structure"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_08007f78",
                "FUN_080049e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008078": {
            "entrypoint": "0x08008078",
            "current_name": "initialize_uart_pins_08008078",
            "code": "\n\n\nvoid initializeUARTPins_08008078(int *uartPins)\n\n{\n  int uartPin1Status;\n  int uartPin2Status;\n  undefined4 memoryOffset;\n  uint pinValue;\n  uint bitmask;\n  uint pinMode;\n  uint pinAlternateFunction;\n  undefined4 pinModeIndex;\n  \n  if (uartPins != (int *)0x0) {\n    uartPin1Status = check_if_valid_parameter_08007320((int)*(char *)(uartPins + 0x16),&DAT_0800a864);\n    uartPin2Status = check_if_valid_parameter_08007320((int)*(char *)((int)uartPins + 0x59),&DAT_0800a81c);\n    if ((uartPin2Status == 0) || (uartPin1Status == 0)) {\n      initialize_and_process_input_080098d8(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2Status);\n    }\n    else {\n      uartPin1Status = compare_and_return_min_080073ae(uartPin1Status);\n      *uartPins = uartPin1Status;\n      if (uartPin1Status == 0) {\n        initialize_and_process_input_080098d8(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1Status == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(uartPins + 0x11) = 0;\n          *(undefined *)((int)uartPins + 0x5a) = 0x25;\n        }\n        else if (uartPin1Status == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(uartPins + 0x11) = 1;\n          *(undefined *)((int)uartPins + 0x5a) = 0x26;\n        }\n        else if (uartPin1Status == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(uartPins + 0x11) = 2;\n          *(undefined *)((int)uartPins + 0x5a) = 0x27;\n        }\n        memoryOffset = set_memory_offset_08006bb8((uint)((int)*(char *)((int)uartPins + 0x59) << 0x18) >> 0x1c);\n        pinValue = find_value_or_default_08007376((int)*(char *)((int)uartPins + 0x59),&DAT_0800a81c);\n        bitmask = 1 << (*(byte *)((int)uartPins + 0x59) & 0xf) & 0xffff;\n        pinMode = (pinValue >> 3 & 1) << 4 | pinValue & 7;\n        pinAlternateFunction = (pinValue << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((pinValue << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        pinModeIndex = 3;\n        update_param_080040e8(memoryOffset,&bitmask);\n        memoryOffset = set_memory_offset_08006bb8((uint)((int)*(char *)(uartPins + 0x16) << 0x18) >> 0x1c);\n        pinValue = find_value_or_default_08007376((int)*(char *)(uartPins + 0x16),&DAT_0800a864);\n        bitmask = 1 << (*(byte *)(uartPins + 0x16) & 0xf) & 0xffff;\n        pinMode = (pinValue >> 3 & 1) << 4 | pinValue & 7;\n        pinAlternateFunction = (pinValue << 0x1a) >> 0x1e;\n        update_param_080040e8(memoryOffset,&bitmask);\n        (&DAT_200006c0)[*(byte *)(uartPins + 0x11)] = uartPins + 1;\n        uartPins[1] = *uartPins;\n        uartPins[2] = uartPins[0x12];\n        uartPins[3] = uartPins[0x13];\n        uartPins[4] = uartPins[0x14];\n        uartPins[5] = uartPins[0x15];\n        uartPins[6] = 0xc;\n        uartPins[7] = 0;\n        uartPins[8] = 0;\n        validate_and_initialize_0800674e(uartPins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008078": "initialize_uart_pins_08008078",
                "param_1": "uartPins",
                "iVar1": "uartPin1Status",
                "iVar2": "uartPin2Status",
                "uVar3": "memoryOffset",
                "uVar4": "pinValue",
                "local_20": "bitmask",
                "local_1c": "pinMode",
                "local_18": "pinAlternateFunction",
                "local_14": "pinModeIndex"
            },
            "calling": [
                "FUN_080084b0",
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080040e8",
                "FUN_080073ae",
                "FUN_0800674e",
                "FUN_080098d8",
                "FUN_08007376",
                "FUN_08006bb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080084b0": {
            "entrypoint": "0x080084b0",
            "current_name": "initialize_uart_080084b0",
            "code": "\nvoid initialize_uart_080084b0(void)\n\n{\n  int isValidParameterResult;\n  undefined4 validParameter;\n  \n  isValidParameterResult = check_if_valid_parameter_08007320(2,&DAT_0800a864);\n  if (isValidParameterResult != 0) {\n    validParameter = check_if_valid_parameter_08007320(2,&DAT_0800a864);\n    DAT_20000075 = find_value_or_default_0800734a(validParameter,&DAT_0800a81c);\n    DAT_20000074 = 2;\n    DAT_20000064 = 0x2580;\n    DAT_20000070 = 0;\n    DAT_20000068 = 0;\n    DAT_2000006c = 0;\n    initializeUartPins(&DAT_2000001c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080084b0": "initialize_uart_080084b0",
                "iVar1": "isValidParameterResult",
                "uVar2": "validParameter",
                "initialize_uart_pins_08008078": "initializeUartPins"
            },
            "calling": [
                "FUN_08008500"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08007320",
                "FUN_08008078"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008500": {
            "entrypoint": "0x08008500",
            "current_name": "process_and_validate_data_08008500",
            "code": "\nuint process_and_validate_data_08008500(undefined4 data,uint input)\n\n{\n  int data_value;\n  int valid_parameter;\n  uint index;\n  \n  data_value = get_data_08003760();\n  valid_parameter = check_if_valid_parameter_08007320(2,&DAT_0800a864);\n  if (valid_parameter == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_200006c0)[index] == 0 ||\n       (valid_parameter = check_if_valid_parameter_08007320(2,&DAT_0800a864), *(int *)(&DAT_200006c0)[index] != valid_parameter))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_20000060) && (initialize_uart_080084b0(), 4 < DAT_20000060)) {\n      return 0;\n    }\n    index = (uint)DAT_20000060;\n  }\n  do {\n    valid_parameter = process_data_080067ac((&DAT_200006c0)[index],data,input & 0xffff,1000);\n    if (valid_parameter == 0) {\n      return input;\n    }\n    valid_parameter = get_data_08003760();\n  } while ((uint)(valid_parameter - data_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008500": "process_and_validate_data_08008500",
                "param_1": "data",
                "param_2": "input",
                "iVar1": "data_value",
                "iVar2": "valid_parameter",
                "uVar3": "index"
            },
            "calling": [
                "FUN_0800885c"
            ],
            "called": [
                "FUN_08007320",
                "FUN_080084b0",
                "FUN_080067ac",
                "FUN_08003760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085b8": {
            "entrypoint": "0x080085b8",
            "current_name": "check_bitmask_080085b8",
            "code": "\nbool check_bitmask_080085b8(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes((&DAT_200006c0)[*(byte *)(input_value + 0x44)]);\n  return (combined_bytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_080085b8": "check_bitmask_080085b8",
                "param_1": "input_value",
                "uVar1": "combined_bytes",
                "combine_bytes_08006b1c": "combine_bytes"
            },
            "calling": [
                "FUN_08008600",
                "FUN_0800863c"
            ],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080085dc": {
            "entrypoint": "0x080085dc",
            "current_name": "check_combination_status_080085dc",
            "code": "\nbool check_combination_status_080085dc(int input_value)\n\n{\n  uint combined_value;\n  \n  combined_value = combine_bytes((&DAT_200006c0)[*(byte_value *)(input_value + 0x44)]);\n  return (combined_value & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080085dc": "check_combination_status_080085dc",
                "param_1": "input_value",
                "uVar1": "combined_value",
                "byte": "byte_value",
                "combine_bytes_08006b1c": "combine_bytes"
            },
            "calling": [],
            "called": [
                "FUN_08006b1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008600": {
            "entrypoint": "0x08008600",
            "current_name": "validate_and_copy_data_08008600",
            "code": "\nundefined4 validate_and_copy_data_08008600(int input_data_size,undefined *output_data,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  int bitmask_check_result;\n  \n  if (input_data_size == 0) {\n    return 0xffffffff;\n  }\n  bitmask_check_result = check_bitmask_080085b8();\n  if (bitmask_check_result == 0) {\n    *output_data = *(undefined *)(input_data_size + 0x45);\n    validate_input_parameters_080068d6((&DAT_200006c0)[*(byte *)(input_data_size + 0x44)],input_data_size + 0x45,1,&DAT_200006c0,parameter_4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008600": "validate_and_copy_data_08008600",
                "param_1": "input_data_size",
                "param_2": "output_data",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "iVar1": "bitmask_check_result"
            },
            "calling": [
                "FUN_08008b66"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800863c": {
            "entrypoint": "0x0800863c",
            "current_name": "store_input_parameters_0800863c",
            "code": "\nvoid storeInputParameters_0800863c(int input_ptr,undefined4 data_ptr,undefined4 param_ptr,undefined4 mask_ptr)\n\n{\n  int bitmask_result;\n  uint byte_value;\n  \n  if (input_ptr != 0) {\n    bitmask_result = check_bitmask_080085b8();\n    if (bitmask_result == 0) {\n      byte_value = (uint)*(byte *)(input_ptr + 0x44);\n      *(undefined4 *)(&DAT_20000670 + byte_value * 4) = data_ptr;\n      *(int *)(&DAT_20000684 + byte_value * 4) = input_ptr;\n      applyMaskAndStore((int)*(char *)(input_ptr + 0x5a),0,1,byte_value,mask_ptr);\n      setBitAtIndex((int)*(char *)(input_ptr + 0x5a));\n      validateParameters((&DAT_200006c0)[*(byte *)(input_ptr + 0x44)],input_ptr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800863c": "store_input_parameters_0800863c",
                "param_1": "input_ptr",
                "param_2": "data_ptr",
                "param_3": "param_ptr",
                "param_4": "mask_ptr",
                "iVar1": "bitmask_result",
                "uVar2": "byte_value",
                "apply_mask_and_store_08003f30": "applyMaskAndStore",
                "set_bit_at_index_08003f94": "setBitAtIndex",
                "validate_input_parameters_080068d6": "validateParameters"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_080085b8",
                "FUN_080068d6",
                "FUN_08003f94",
                "FUN_08003f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008694": {
            "entrypoint": "0x08008694",
            "current_name": "update_config_08008694",
            "code": "\nvoid updateConfig_08008694(int configPtr,undefined4 newValue)\n\n{\n  byte configIndex;\n  \n  if (configPtr != 0) {\n    configIndex = *(byte *)(configPtr + 0x44);\n    *(undefined4 *)(&DAT_20000698 + (uint)configIndex * 4) = newValue;\n    *(int *)(&DAT_200006ac + (uint)configIndex * 4) = configPtr;\n    applyMaskAndStore((int)*(char *)(configPtr + 0x5a),0,2);\n    setBitAtIndex((int)*(char *)(configPtr + 0x5a));\n    validateAndSetValues((&DAT_200006c0)[*(byte *)(configPtr + 0x44)],\n                 *(int *)(configPtr + 100) + (uint)*(ushort *)(configPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008694": "update_config_08008694",
                "param_1": "configPtr",
                "param_2": "newValue",
                "bVar1": "configIndex",
                "apply_mask_and_store_08003f30": "applyMaskAndStore",
                "set_bit_at_index_08003f94": "setBitAtIndex",
                "validate_and_set_values_0800688e": "validateAndSetValues"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_08003f30",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080086e8": {
            "entrypoint": "0x080086e8",
            "current_name": "find_value_index_080086e8",
            "code": "\nuint find_value_index_080086e8(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 5;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (4 < index) {\n        return index;\n      }\n      if (value == (&DAT_200006c0)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_080086e8": "find_value_index_080086e8",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_0800870c",
                "FUN_08008730"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800870c": {
            "entrypoint": "0x0800870c",
            "current_name": "execute_value_function_0800870c",
            "code": "\nvoid execute_value_function_0800870c(void)\n\n{\n  uint valueIndex;\n  \n  valueIndex = find_value_index_080086e8();\n  if (valueIndex < 5) {\n    (**(code **)(&DAT_20000670 + valueIndex * 4))(*(undefined4 *)(&DAT_20000684 + valueIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800870c": "execute_value_function_0800870c",
                "uVar1": "valueIndex"
            },
            "calling": [
                "FUN_0800694c"
            ],
            "called": [
                "FUN_080086e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008730": {
            "entrypoint": "0x08008730",
            "current_name": "process_value_08008730",
            "code": "\nvoid processValue_08008730(void)\n\n{\n  uint valueIndex;\n  int result;\n  int valuePtr;\n  \n  valueIndex = findValueIndex();\n  valuePtr = *(int *)(&DAT_200006ac + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000698 + valueIndex * 4))(valuePtr), result != -1)) {\n    validateAndSetValues((&DAT_200006c0)[*(byte *)(valuePtr + 0x44)],\n                 *(int *)(valuePtr + 100) + (uint)*(ushort *)(valuePtr + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008730": "process_value_08008730",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "valuePtr",
                "find_value_index_080086e8": "findValueIndex",
                "validate_and_set_values_0800688e": "validateAndSetValues"
            },
            "calling": [
                "FUN_08006932"
            ],
            "called": [
                "FUN_080086e8",
                "FUN_0800688e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800877c": {
            "entrypoint": "0x0800877c",
            "current_name": "FUNC_0800877c",
            "code": "\nvoid FUNC_0800877c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800877c": "FUNC_0800877c"
            },
            "calling": [
                "FUN_080069ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008804": {
            "entrypoint": "0x08008804",
            "current_name": "allocate_memory_08008804",
            "code": "\nundefined * allocateMemory_08008804(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200006d4 == (undefined *)0x0) {\n    DAT_200006d4 = &DAT_20000a3c;\n  }\n  allocatedMemory = DAT_200006d4;\n  if (DAT_200006d4 + size <= stackOverflow) {\n    DAT_200006d4 = DAT_200006d4 + size;\n    return allocatedMemory;\n  }\n  DAT_20000a38 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008804": "allocate_memory_08008804",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "stackOverflow"
            },
            "calling": [
                "FUN_08009918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008840": {
            "entrypoint": "0x08008840",
            "current_name": "get_default_value_08008840",
            "code": "\nuint32_t get_default_value_08008840(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008840": "get_default_value_08008840",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008846": {
            "entrypoint": "0x08008846",
            "current_name": "set_memory_flag_08008846",
            "code": "\nundefined4 setMemoryFlag_08008846(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008846": "set_memory_flag_08008846",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_0800a0ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008850": {
            "entrypoint": "0x08008850",
            "current_name": "get_return_value_08008850",
            "code": "\nundefined4 getReturnValue_08008850(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008850": "get_return_value_08008850"
            },
            "calling": [
                "FUN_0800a110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008854": {
            "entrypoint": "0x08008854",
            "current_name": "do_nothing_08008854",
            "code": "\nundefined4 do_nothing_08008854(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008854": "do_nothing_08008854"
            },
            "calling": [
                "FUN_0800a130"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008858": {
            "entrypoint": "0x08008858",
            "current_name": "get_default_value_08008858",
            "code": "\nundefined4 getDefaultValue_08008858(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008858": "get_default_value_08008858"
            },
            "calling": [
                "FUN_0800a168"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800885c": {
            "entrypoint": "0x0800885c",
            "current_name": "process_and_validate_data_0800885c",
            "code": "\nvoid process_and_validate_data_0800885c(undefined4 param_1,undefined4 data_param_1,undefined4 data_param_2,undefined4 data_param_3)\n\n{\n  process_and_validate_data_0800885c_08008500(data_param_1,data_param_2,data_param_2,data_param_3,data_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800885c": "process_and_validate_data_0800885c",
                "param_2": "data_param_1",
                "param_3": "data_param_2",
                "param_4": "data_param_3"
            },
            "calling": [
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008868": {
            "entrypoint": "0x08008868",
            "current_name": "infinite_loop_08008868",
            "code": "\nvoid infiniteLoop_08008868(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008868": "infinite_loop_08008868"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_08008868"
            ],
            "called": [
                "FUN_08008868"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800886c": {
            "entrypoint": "0x0800886c",
            "current_name": "initialize_data_0800886c",
            "code": "\nundefined4 initializeData_0800886c(void)\n\n{\n  DAT_20000a38 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800886c": "initialize_data_0800886c"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800887c": {
            "entrypoint": "0x0800887c",
            "current_name": "check_return_value_0800887c",
            "code": "\nbool checkReturnValue_0800887c(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800887c": "check_return_value_0800887c",
                "undefined4": "bool",
                "return": "result"
            },
            "calling": [
                "thunk_FUN_0800887c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008880": {
            "entrypoint": "0x08008880",
            "current_name": "configure_and_validate_data_08008880",
            "code": "\nuint configureAndValidateData_08008880(uint inputValue)\n\n{\n  bool isInRange;\n  char result;\n  uint outputValue;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isInRange = true;\n    }\n    else {\n      isInRange = false;\n    }\n  }\n  else {\n    isInRange = inputValue < 0x3c;\n  }\n  if (isInRange) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    result = (&DAT_0800a908)[inputValue];\n  }\n  else {\n    result = -1;\n  }\n  if (result == -1) {\n    outputValue = 0;\n  }\n  else {\n    outputValue = validate_and_configure_08006d80();\n    if (DAT_20000088 != 0xc) {\n      if (DAT_20000088 < 0xc) {\n        return outputValue >> (0xc - DAT_20000088 & 0xff);\n      }\n      return outputValue << (DAT_20000088 - 0xc & 0xff);\n    }\n  }\n  return outputValue;\n}\n\n",
            "renaming": {
                "FUN_08008880": "configure_and_validate_data_08008880",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "cVar2": "result",
                "uVar3": "outputValue"
            },
            "calling": [
                "FUN_08000488",
                "FUN_080022f8"
            ],
            "called": [
                "FUN_08006d80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088e0": {
            "entrypoint": "0x080088e0",
            "current_name": "process_data_080088e0",
            "code": "\nvoid processData_080088e0(uint dataIndex,uint value)\n\n{\n  int matchResult;\n  int dataValue;\n  \n  if (dataIndex < 0x3c) {\n    dataValue = (int)(char)(&DAT_0800a908)[dataIndex];\n  }\n  else {\n    dataValue = -1;\n  }\n  if (dataValue != -1) {\n    matchResult = check_match_0800738a(dataValue,&DAT_0800a6cc);\n    if (matchResult == 0) {\n      initialize_and_process_memory_08008990(dataIndex,1);\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      if (value < 0x80) {\n        process_param_08008a24(dataIndex,0);\n      }\n      else {\n        process_param_08008a24(dataIndex,1);\n      }\n    }\n    else {\n      matchResult = retrieve_bit_value_08006b28(dataValue,&DAT_200006d8);\n      if (matchResult == 0) {\n        apply_bitmask_08006b3e(dataValue,&DAT_200006d8);\n      }\n      if (DAT_2000008c != 8) {\n        if (DAT_2000008c < 9) {\n          value = value << (8 - DAT_2000008c & 0xff);\n        }\n        else {\n          value = value >> (DAT_2000008c - 8 & 0xff);\n        }\n      }\n      initialize_memory_and_set_configs_08007118(dataValue,0x3e418,0xff,value,matchResult == 0);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088e0": "process_data_080088e0",
                "param_1": "dataIndex",
                "param_2": "value",
                "iVar1": "matchResult",
                "iVar2": "dataValue"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_0800021a"
            ],
            "called": [
                "FUN_08006b3e",
                "FUN_08007118",
                "FUN_08006b28",
                "FUN_08008a24",
                "FUN_0800738a",
                "FUN_08008990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008990": {
            "entrypoint": "0x08008990",
            "current_name": "initialize_and_process_memory_08008990",
            "code": "\nvoid initializeAndProcessMemory_08008990(uint index,undefined4 mode,undefined4 param_value,undefined1 *data_array)\n\n{\n  int bit_value;\n  undefined1 *bit_array;\n  int selected_index;\n  \n  if (index < 0x3c) {\n    selected_index = (int)(char)(&DAT_0800a908)[index];\n    bit_array = &DAT_0800a908;\n  }\n  else {\n    selected_index = -1;\n    bit_array = data_array;\n  }\n  if (selected_index != -1) {\n    bit_value = retrieve_bit_value_08006b28(selected_index,&DAT_200006d8,param_value,bit_array,data_array);\n    if (bit_value != 0) {\n      bit_value = check_match_0800738a(selected_index,&DAT_0800a6cc);\n      if (bit_value != 0) {\n        process_parameter_080071e4(selected_index);\n      }\n      clear_bit_in_int_array_08006b5c(selected_index,&DAT_200006d8);\n    }\n    switch(mode) {\n    case 0:\n      initialize_memory_08007258(selected_index,0);\n      break;\n    case 1:\n      initialize_memory_08007258(selected_index,1,0);\n      break;\n    case 2:\n      initialize_memory_08007258(selected_index,0,1);\n      break;\n    case 3:\n      initialize_memory_08007258(selected_index,0,2);\n    }\n    apply_bitmask_08006b3e(selected_index,&DAT_200006ec);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008990": "initialize_and_process_memory_08008990",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "param_value",
                "param_4": "data_array",
                "iVar1": "bit_value",
                "puVar2": "bit_array",
                "iVar3": "selected_index"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_080025ac",
                "FUN_08003002"
            ],
            "called": [
                "FUN_08007258",
                "FUN_080071e4",
                "FUN_08006b5c",
                "FUN_08006b3e",
                "FUN_08006b28",
                "FUN_0800738a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a24": {
            "entrypoint": "0x08008a24",
            "current_name": "process_param_08008a24",
            "code": "\nvoid processParam_08008a24(uint inputValue,undefined4 outputValue,undefined4 bitPattern,undefined1 *dataBuffer)\n\n{\n  int bitValue;\n  undefined4 memoryAddress;\n  undefined1 *bufferPointer;\n  uint bitMask;\n  \n  if (inputValue < 0x3c) {\n    bitMask = (uint)(char)(&DAT_0800a908)[inputValue];\n    bufferPointer = &DAT_0800a908;\n  }\n  else {\n    bitMask = 0xffffffff;\n    bufferPointer = dataBuffer;\n  }\n  if ((bitMask != 0xffffffff) &&\n     (bitValue = retrieve_bit_value_08006b28(bitMask,&DAT_200006ec,bitPattern,bufferPointer,dataBuffer), bitValue != 0)) {\n    memoryAddress = get_memory_address_08006b7c((bitMask << 0x18) >> 0x1c);\n    set_param_value_080072d8(memoryAddress,1 << (bitMask & 0xf) & 0xffff,outputValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008a24": "process_param_08008a24",
                "param_1": "inputValue",
                "param_2": "outputValue",
                "param_3": "bitPattern",
                "param_4": "dataBuffer",
                "iVar1": "bitValue",
                "uVar2": "memoryAddress",
                "puVar3": "bufferPointer",
                "uVar4": "bitMask"
            },
            "calling": [
                "FUN_080005f8",
                "FUN_080088e0",
                "FUN_08002fca"
            ],
            "called": [
                "FUN_08006b7c",
                "FUN_080072d8",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a6c": {
            "entrypoint": "0x08008a6c",
            "current_name": "check_and_return_bit_08008a6c",
            "code": "\nchar check_and_return_bit_08008a6c(uint input_value)\n\n{\n  char result;\n  int bit_value;\n  undefined4 memory_address;\n  uint data_value;\n  \n  if (input_value < 0x3c) {\n    data_value = (uint)(char)(&DAT_0800a908)[input_value];\n  }\n  else {\n    data_value = 0xffffffff;\n  }\n  if (data_value == 0xffffffff) {\n    result = '\\0';\n  }\n  else {\n    bit_value = retrieve_bit_value_08006b28(data_value,&DAT_200006ec);\n    if (bit_value == 0) {\n      result = '\\0';\n    }\n    else {\n      memory_address = get_memory_address_08006b7c((data_value << 0x18) >> 0x1c);\n      result = check_bit_and_return_080072f0(memory_address,1 << (data_value & 0xf) & 0xffff);\n    }\n  }\n  if (result != '\\0') {\n    result = '\\x01';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008a6c": "check_and_return_bit_08008a6c",
                "param_1": "input_value",
                "cVar1": "result",
                "iVar2": "bit_value",
                "uVar3": "memory_address",
                "uVar4": "data_value"
            },
            "calling": [
                "FUN_08000ef8"
            ],
            "called": [
                "FUN_080072f0",
                "FUN_08006b7c",
                "FUN_08006b28"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008abc": {
            "entrypoint": "0x08008abc",
            "current_name": "initialize_data_08008abc",
            "code": "\nvoid initialize_data_08008abc(void)\n\n{\n  initialize_data_08008abc_0800723c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008abc": "initialize_data_08008abc"
            },
            "calling": [
                "FUN_080022f8"
            ],
            "called": [
                "FUN_0800723c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ac4": {
            "entrypoint": "0x08008ac4",
            "current_name": "FUNC_08008ac4",
            "code": "\nvoid FUNC_08008ac4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008ac4": "FUNC_08008ac4"
            },
            "calling": [
                "FUN_08003002",
                "FUN_08002fca"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008afa": {
            "entrypoint": "0x08008afa",
            "current_name": "calculate_offset_08008afa",
            "code": "\nushort calculate_offset_08008afa(int input_value)\n\n{\n  return (*(short *)(input_value + 0x134) + 0x40) - *(short *)(input_value + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08008afa": "calculate_offset_08008afa",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08008bf4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b66": {
            "entrypoint": "0x08008b66",
            "current_name": "copy_and_validate_data_08008b66",
            "code": "\nvoid copyAndValidateData_08008b66(int dataPointer)\n\n{\n  int validationResult;\n  ushort incrementedValue;\n  undefined copiedData;\n  \n  validationResult = validate_and_copy_data_08008600(dataPointer,&copiedData);\n  if ((validationResult == 0) &&\n     (incrementedValue = *(short *)(dataPointer + 0x60) + 1U & 0x3f, incrementedValue != *(ushort *)(dataPointer + 0x62))) {\n    *(undefined *)(*(int *)(dataPointer + 0x5c) + (uint)*(ushort *)(dataPointer + 0x60)) = copiedData;\n    *(ushort *)(dataPointer + 0x60) = incrementedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008b66": "copy_and_validate_data_08008b66",
                "param_1": "dataPointer",
                "iVar1": "validationResult",
                "uVar2": "incrementedValue",
                "local_9": "copiedData"
            },
            "calling": [],
            "called": [
                "FUN_08008600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf4": {
            "entrypoint": "0x08008bf4",
            "current_name": "FUNC_08008bf4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08008bfa) */\n/* WARNING: Removing unreachable block (ram,0x08008c0c) */\n/* WARNING: Removing unreachable block (ram,0x08008c02) */\n/* WARNING: Removing unreachable block (ram,0x08008c14) */\n\nvoid FUNC_08008bf4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008bf4": "FUNC_08008bf4"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [
                "FUN_08008afa"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008c20": {
            "entrypoint": "0x08008c20",
            "current_name": "initialize_user_data_08008c20",
            "code": "\nvoid initializeUserData_08008c20(int userData)\n\n{\n  *(int *)(userData + 0x130) = userData + 0x11;\n  *(undefined2 *)(userData + 0x134) = 0;\n  *(undefined2 *)(userData + 0x136) = 0;\n  *(int *)(userData + 0x138) = userData + 0x51;\n  *(undefined2 *)(userData + 0x13c) = 0;\n  *(undefined2 *)(userData + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c20": "initialize_user_data_08008c20",
                "param_1": "userData"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c44": {
            "entrypoint": "0x08008c44",
            "current_name": "initialize_serial_communication_08008c44",
            "code": "\nvoid initializeSerialCommunication_08008c44(int serialPort,undefined4 baudRate,byte config)\n\n{\n  uint errorCode;\n  byte configMask;\n  int configValue;\n  code *unrecoveredJumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x140) = config;\n  configMask = config & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    initialize_uart_pins_08008078(serialPort + 0xd4);\n    store_input_parameters_0800863c(serialPort + 0xd4,0x8008b67);\n    return;\n  }\n  unrecoveredJumpTable = (code *)0x8008cee;\n  process_failed_assertion_080090cc(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  if (errorCode < 0x3c) {\n    uRam0000012d = (&DAT_0800a908)[errorCode];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0,errorCode,&stack0x00000148);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008c44": "initialize_serial_communication_08008c44",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "config",
                "extraout_r1": "errorCode",
                "bVar1": "configMask",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "unrecoveredJumpTable"
            },
            "calling": [
                "FUN_08003048"
            ],
            "called": [
                "FUN_080090cc",
                "FUN_08008078",
                "FUN_0800863c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d00": {
            "entrypoint": "0x08008d00",
            "current_name": "set_threshold_08008d00",
            "code": "\nvoid setThreshold_08008d00(int address,uint value)\n\n{\n  undefined threshold;\n  code *jumpTable;\n  \n  if (value < 0x3c) {\n    threshold = (&DAT_0800a908)[value];\n  }\n  else {\n    threshold = 0xff;\n  }\n  *(undefined *)(address + 0x12d) = threshold;\n                    /* WARNING: Could not recover jumptable at 0x08008d0c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d00": "set_threshold_08008d00",
                "param_1": "address",
                "param_2": "value",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "uVar1": "threshold"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d18": {
            "entrypoint": "0x08008d18",
            "current_name": "set_byte_value_08008d18",
            "code": "\nvoid setByteValue_08008d18(int baseAddress,uint index)\n\n{\n  undefined byteValue;\n  \n  if (index < 0x3c) {\n    byteValue = (&DAT_0800a908)[index];\n  }\n  else {\n    byteValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = byteValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d18": "set_byte_value_08008d18",
                "param_1": "baseAddress",
                "param_2": "index",
                "uVar1": "byteValue"
            },
            "calling": [
                "FUN_08008d30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d30": {
            "entrypoint": "0x08008d30",
            "current_name": "initialize_config_08008d30",
            "code": "\nundefined4 *\ninitializeConfig_08008d30(undefined4 *config,undefined4 value,undefined4 threshold,undefined4 byteValue)\n\n{\n  undefined foundValue;\n  \n  config[1] = 0;\n  config[2] = 1000;\n  *config = &PTR_LAB_08008ba4_1_0800aab8;\n  if (config == (undefined4 *)&DAT_20000700) {\n    setThreshold(&DAT_20000700,0,threshold,&DAT_20000700,byteValue);\n    setByteValue(&DAT_20000700,1);\n  }\n  else {\n    foundValue = findValueOrDefault(value,&DAT_0800a81c);\n    *(undefined *)((int)config + 0x12d) = foundValue;\n    foundValue = findValueOrDefault(value,&DAT_0800a864);\n    *(undefined *)(config + 0x4b) = foundValue;\n  }\n  initializeUserData(config);\n  return config;\n}\n\n",
            "renaming": {
                "FUN_08008d30": "initialize_config_08008d30",
                "param_1": "config",
                "param_2": "value",
                "param_3": "threshold",
                "param_4": "byteValue",
                "uVar1": "foundValue",
                "set_threshold_08008d00": "setThreshold",
                "set_byte_value_08008d18": "setByteValue",
                "find_value_or_default_0800734a": "findValueOrDefault",
                "initialize_user_data_08008c20": "initializeUserData"
            },
            "calling": [
                "FUN_08008d8c"
            ],
            "called": [
                "FUN_0800734a",
                "FUN_08008c20",
                "FUN_08008d18",
                "FUN_08008d00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008d8c": {
            "entrypoint": "0x08008d8c",
            "current_name": "initialize_config_if_param1_is_1_08008d8c",
            "code": "\nvoid initialize_config_if_param1_is_1_08008d8c(int is_param1_one,int param2_value,undefined4 param3_value,undefined4 param4_value)\n\n{\n  if (is_param1_one != 1) {\n    return;\n  }\n  if (param2_value == 0xffff) {\n    initialize_config_function(&DAT_20000700,0x40004400,param3_value,0xffff,param4_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008d8c": "initialize_config_if_param1_is_1_08008d8c",
                "param_1": "is_param1_one",
                "param_2": "param2_value",
                "param_3": "param3_value",
                "param_4": "param4_value",
                "initialize_config_08008d30": "initialize_config_function"
            },
            "calling": [],
            "called": [
                "FUN_08008d30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008df8": {
            "entrypoint": "0x08008df8",
            "current_name": "initialize_data_08008df8",
            "code": "\nvoid initializeData_08008df8(undefined4 *data,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data = &DAT_0800ab0c;\n  *(undefined *)(data + 1) = value1;\n  *(undefined *)((int)data + 5) = value2;\n  *(undefined *)((int)data + 6) = value3;\n  *(undefined *)((int)data + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008df8": "initialize_data_08008df8",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08008e14"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e14": {
            "entrypoint": "0x08008e14",
            "current_name": "initialize_data_if_condition_met_08008e14",
            "code": "\nvoid initialize_data_if_condition_met_08008e14(int input_value_1,int input_value_2)\n\n{\n  if ((input_value_1 == 1) && (input_value_2 == 0xffff)) {\n    initialize_data_08008df8(&DAT_20000844,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008e14": "initialize_data_if_condition_met_08008e14",
                "param_1": "input_value_1",
                "param_2": "input_value_2"
            },
            "calling": [],
            "called": [
                "FUN_08008df8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ef4": {
            "entrypoint": "0x08008ef4",
            "current_name": "calculate_interpolation_08008ef4",
            "code": "\nint calculate_interpolation_08008ef4(int value1,int value2,int value3,int start_value,int end_value)\n\n{\n  return (uint)((end_value - start_value) * (value1 - value2)) / (uint)(value3 - value2) + start_value;\n}\n\n",
            "renaming": {
                "FUN_08008ef4": "calculate_interpolation_08008ef4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "start_value",
                "param_5": "end_value"
            },
            "calling": [
                "FUN_080026b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0c": {
            "entrypoint": "0x08008f0c",
            "current_name": "FUNC_08008f0c",
            "code": "\nvoid FUNC_08008f0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0c": "FUNC_08008f0c"
            },
            "calling": [
                "FUN_08008f1c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008f0e": {
            "entrypoint": "0x08008f0e",
            "current_name": "initialize_system_and_device_08008f0e",
            "code": "\nvoid initialize_system_and_device_08008f0e(void)\n\n{\n  update_configuration(3);\n  initialize_system_and_device_08008f0e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f0e": "initialize_system_and_device_08008f0e",
                "update_configuration_08003f0c": "update_configuration",
                "initialize_system_and_device_080036a2": "initialize_system_and_device"
            },
            "calling": [
                "FUN_08009148"
            ],
            "called": [
                "FUN_080036a2",
                "FUN_08003f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f1c": {
            "entrypoint": "0x08008f1c",
            "current_name": "execute_main_loop_08008f1c",
            "code": "\nvoid execute_main_loop_08008f1c(void)\n\n{\n  FUNC_08008f0c();\n  initialize_gateway();\n  do {\n    process_function();\n    FUNC_08008bf4();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08008f1c": "execute_main_loop_08008f1c",
                "initialize_gateway_08001b48": "initialize_gateway",
                "process_function_080022f8": "process_function"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08008f0c",
                "FUN_08008bf4",
                "FUN_080022f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f3c": {
            "entrypoint": "0x08008f3c",
            "current_name": "count_set_bits_08008f3c",
            "code": "\nchar countSetBits_08008f3c(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08008f3c": "count_set_bits_08008f3c",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008f78": {
            "entrypoint": "0x08008f78",
            "current_name": "initialize_data_08008f78",
            "code": "\nvoid initializeData_08008f78(int flag,int code,undefined4 temp1,undefined4 temp2)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (code == 0xffff) {\n    DAT_2000084c = 6;\n    DAT_20000858 = 0;\n    DAT_20000860 = 7;\n    DAT_2000086c = 0;\n    DAT_20000874 = 8;\n    DAT_20000880 = 0;\n    DAT_20000888 = 9;\n    DAT_20000894 = 0;\n    DAT_2000089c = 10;\n    DAT_200008a8 = 0;\n    DAT_200008b0 = 0x17;\n    DAT_200008bc = 0;\n    DAT_200008c4 = 0x17;\n    DAT_200008d0 = 0;\n    DAT_200008d8 = 0x17;\n    DAT_200008e4 = 0;\n    DAT_200008ec = 0x17;\n    DAT_200008f8 = 0;\n    DAT_20000900 = 0x17;\n    DAT_2000090c = 0;\n    DAT_20000914 = 0x28;\n    DAT_20000920 = 0;\n    DAT_20000928 = 0x28;\n    DAT_20000934 = 0;\n    DAT_2000093c = 0x28;\n    DAT_20000948 = 0;\n    DAT_20000950 = 0x28;\n    DAT_2000095c = 0;\n    DAT_20000964 = 0x28;\n    DAT_20000970 = 0;\n    DAT_20000978 = 0x28;\n    DAT_20000984 = 0;\n    shiftUnsignedInt(0,&LAB_08008f50_1,&DAT_20000000,&DAT_2000084c,temp2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008f78": "initialize_data_08008f78",
                "param_1": "flag",
                "param_2": "code",
                "param_3": "temp1",
                "param_4": "temp2",
                "shift_unsigned_integer_080090c2": "shiftUnsignedInt"
            },
            "calling": [],
            "called": [
                "FUN_080090c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009084": {
            "entrypoint": "0x08009084",
            "current_name": "process_data_08009084",
            "code": "\nvoid processData_08009084(int ptrToData)\n\n{\n  int bitCount;\n  \n  if (*(int *)(ptrToData + 8) != 0) {\n    (**(code **)(ptrToData + 0xc))();\n    return;\n  }\n  processAndJump();\n  bitCount = getBitCount();\n  if ((&DAT_20000858)[bitCount * 5] != 0) {\n    processData_08009084();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009084": "process_data_08009084",
                "param_1": "ptrToData",
                "iVar1": "bitCount",
                "count_set_bits_08008f3c": "getBitCount",
                "process_and_jump_0800a18c": "processAndJump"
            },
            "calling": [
                "FUN_08009094"
            ],
            "called": [
                "FUN_0800a18c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009094": {
            "entrypoint": "0x08009094",
            "current_name": "check_and_process_data_08009094",
            "code": "\nvoid checkAndProcessData_08009094(void)\n\n{\n  int bitsCount;\n  \n  bitsCount = count_set_bits_08008f3c();\n  if ((&DAT_20000858)[bitsCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009094": "check_and_process_data_08009094",
                "iVar1": "bitsCount",
                "process_data_08009084": "processData"
            },
            "calling": [
                "FUN_080042f0"
            ],
            "called": [
                "FUN_08008f3c",
                "FUN_08009084"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c2": {
            "entrypoint": "0x080090c2",
            "current_name": "shift_unsigned_integer_080090c2",
            "code": "\nvoid shiftUnsignedInteger_080090c2(undefined4 destination,undefined4 source)\n\n{\n  shift_unsigned_integer_08009108(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090c2": "shift_unsigned_integer_080090c2",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_08008f78"
            ],
            "called": [
                "FUN_08009108"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090cc": {
            "entrypoint": "0x080090cc",
            "current_name": "process_failed_assertion_080090cc",
            "code": "\nvoid processFailedAssertion_080090cc(undefined4 assertionMessage,undefined4 fileName,char *functionName,undefined4 lineNumber)\n\n{\n  undefined4 assertionPtr;\n  char *additionalInfo;\n  undefined8 processedData;\n  undefined4 linePtr;\n  \n  assertionPtr = *(undefined4 *)(DAT_20000090 + 0xc);\n  linePtr = lineNumber;\n  if (functionName == (char *)0x0) goto LAB_080090f0;\n  additionalInfo = \", function: \";\n  do {\n    process_and_send_input_08009124(assertionPtr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",lineNumber,assertionMessage,fileName\n                 ,additionalInfo,functionName,linePtr);\n    processedData = process_data_08009b5c();\n    fileName = (undefined4)((ulonglong)processedData >> 0x20);\n    assertionPtr = (undefined4)processedData;\nLAB_080090f0:\n    functionName = \"\";\n    additionalInfo = functionName;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080090cc": "process_failed_assertion_080090cc",
                "param_1": "assertionMessage",
                "param_2": "fileName",
                "param_3": "functionName",
                "param_4": "lineNumber",
                "uVar1": "assertionPtr",
                "uVar4": "linePtr",
                "pcVar2": "additionalInfo",
                "uVar3": "processedData"
            },
            "calling": [
                "FUN_08008c44"
            ],
            "called": [
                "FUN_08009b5c",
                "FUN_08009124"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009108": {
            "entrypoint": "0x08009108",
            "current_name": "shift_unsigned_integer_08009108",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009110) */\n\nlonglong shiftUnsignedInteger_08009108(undefined4 originalValue,uint numberOfBits)\n\n{\n  return (unsignedLongLong)numberOfBits << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08009108": "shift_unsigned_integer_08009108",
                "param_1": "originalValue",
                "param_2": "numberOfBits",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080090c2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009124": {
            "entrypoint": "0x08009124",
            "current_name": "process_and_send_input_08009124",
            "code": "\nvoid processAndSendInput_08009124(undefined4 input1,undefined4 input2,undefined4 temp1,undefined4 temp2)\n\n{\n  undefined4 temp1_copy;\n  undefined4 temp2_copy;\n  \n  temp1_copy = temp1;\n  temp2_copy = temp2;\n  process_input_0800937c(DAT_20000090,input1,input2,&temp1_copy,input1,&temp1_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009124": "process_and_send_input_08009124",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "temp1",
                "param_4": "temp2",
                "uStack_8": "temp1_copy",
                "uStack_4": "temp2_copy"
            },
            "calling": [
                "FUN_080090cc"
            ],
            "called": [
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009148": {
            "entrypoint": "0x08009148",
            "current_name": "execute_function_set_08009148",
            "code": "\nvoid executeFunctionSet_08009148(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  FUNC_0800a424();\n  for (index = 0; index != 0xc; index = index + 1) {\n    (*(code *)(&DAT_0800abe4)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009148": "execute_function_set_08009148",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800a424",
                "FUN_08008f0e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009190": {
            "entrypoint": "0x08009190",
            "current_name": "allocate_and_initialize_memory_08009190",
            "code": "\nvoid allocateAndInitializeMemory_08009190(undefined4 input)\n\n{\n  allocate_and_initialize_memory_08009270(DAT_20000090,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009190": "allocate_and_initialize_memory_08009190",
                "param_1": "input"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a0": {
            "entrypoint": "0x080091a0",
            "current_name": "extract_integer_from_binary_080091a0",
            "code": "\nvoid extractIntegerFromBinary_080091a0(undefined4 value)\n\n{\n  extract_integer_080091d8(DAT_20000090,value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091a0": "extract_integer_from_binary_080091a0",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091b0": {
            "entrypoint": "0x080091b0",
            "current_name": "copy_data_080091b0",
            "code": "\nvoid copy_data_080091b0(int start_index,undefined *source_array,int array_length)\n\n{\n  undefined *destination_end;\n  undefined *destination_index;\n  \n  destination_index = (undefined *)(start_index + -1);\n  destination_end = source_array + array_length;\n  for (; source_array != destination_end; source_array = source_array + 1) {\n    destination_index = destination_index + 1;\n    *destination_index = *source_array;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091b0": "copy_data_080091b0",
                "param_1": "start_index",
                "param_2": "source_array",
                "param_3": "array_length",
                "puVar1": "destination_end",
                "puVar2": "destination_index"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091c6": {
            "entrypoint": "0x080091c6",
            "current_name": "fill_memory_080091c6",
            "code": "\nvoid fillMemory_080091c6(undefined *destination,undefined value,int length)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + length;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091c6": "fill_memory_080091c6",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_08009cdc",
                "FUN_08009db0",
                "FUN_08002a58",
                "FUN_08007118",
                "FUN_08009d24",
                "FUN_08006d80",
                "FUN_08002968"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091d8": {
            "entrypoint": "0x080091d8",
            "current_name": "extract_integer_080091d8",
            "code": "\nvoid extractInteger_080091d8(undefined4 *outputPtr,int inputSize,undefined4 arg1,undefined4 arg2)\n\n{\n  int **tempPtr1;\n  int **tempPtr2;\n  int **tempPtr3;\n  int *tempVar1;\n  int **tempPtr4;\n  int **tempPtr5;\n  \n  if (inputSize == 0) {\n    return;\n  }\n  tempPtr5 = (int **)(inputSize + -4);\n  if (*(int *)(inputSize + -4) < 0) {\n    tempPtr5 = (int **)((int)tempPtr5 + *(int *)(inputSize + -4));\n  }\n  FUNC_08009f48();\n  tempPtr3 = (int **)&DAT_2000098c;\n  if (DAT_2000098c == (int **)0x0) {\n    tempPtr5[1] = (int *)0x0;\n    tempPtr2 = tempPtr1;\n    DAT_2000098c = tempPtr5;\n  }\n  else {\n    tempPtr3 = DAT_2000098c;\n    if (tempPtr5 < DAT_2000098c) {\n      tempPtr2 = (int **)*tempPtr5;\n      tempPtr3 = (int **)((int)tempPtr5 + (int)tempPtr2);\n      if (DAT_2000098c == tempPtr3) {\n        tempVar1 = *DAT_2000098c;\n        DAT_2000098c = (int **)DAT_2000098c[1];\n        tempPtr3 = (int **)((int)tempVar1 + (int)tempPtr2);\n        *tempPtr5 = (int *)tempPtr3;\n      }\n      tempPtr5[1] = (int *)DAT_2000098c;\n      DAT_2000098c = tempPtr5;\n    }\n    else {\n      do {\n        tempPtr4 = tempPtr3;\n        tempPtr3 = (int **)tempPtr4[1];\n        if (tempPtr3 == (int **)0x0) break;\n      } while (tempPtr3 <= tempPtr5);\n      tempPtr2 = (int **)*tempPtr4;\n      if ((int **)((int)tempPtr4 + (int)tempPtr2) == tempPtr5) {\n        tempPtr2 = (int **)((int)tempPtr2 + (int)*tempPtr5);\n        *tempPtr4 = (int *)tempPtr2;\n        if (tempPtr3 == (int **)((int)tempPtr4 + (int)tempPtr2)) {\n          tempVar1 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempPtr2 + (int)tempVar1);\n          *tempPtr4 = (int *)tempPtr2;\n          tempPtr4[1] = (int *)tempPtr3;\n        }\n      }\n      else if (tempPtr5 < (int **)((int)tempPtr4 + (int)tempPtr2)) {\n        *outputPtr = 0xc;\n      }\n      else {\n        tempPtr2 = (int **)((int)tempPtr5 + (int)*tempPtr5);\n        if (tempPtr3 == tempPtr2) {\n          tempVar1 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempVar1 + (int)*tempPtr5);\n          *tempPtr5 = (int *)tempPtr2;\n        }\n        tempPtr5[1] = (int *)tempPtr3;\n        tempPtr4[1] = (int *)tempPtr5;\n      }\n    }\n  }\n  FUNC_08009f4a(outputPtr,tempPtr2,tempPtr3,arg2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091d8": "extract_integer_080091d8",
                "param_1": "outputPtr",
                "param_2": "inputSize",
                "param_3": "arg1",
                "param_4": "arg2",
                "extraout_r1": "tempPtr1",
                "ppiVar1": "tempPtr2",
                "ppiVar2": "tempPtr3",
                "piVar3": "tempVar1",
                "ppiVar4": "tempPtr4",
                "ppiVar5": "tempPtr5"
            },
            "calling": [
                "FUN_08009b5c",
                "FUN_080091a0",
                "FUN_08009a80",
                "FUN_08009908"
            ],
            "called": [
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009270": {
            "entrypoint": "0x08009270",
            "current_name": "allocate_and_initialize_memory_08009270",
            "code": "\nuint allocate_and_initialize_memory_08009270(undefined4 *result_ptr,uint size)\n\n{\n  uint *current_block;\n  int remaining_size;\n  uint *next_block;\n  uint block_diff;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *result_ptr = 0xc;\n  }\n  else {\n    FUNC_08009f48();\n    current_block = DAT_2000098c;\n    previous_block = DAT_2000098c;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      block_diff = *next_block - allocated_size;\n      if (-1 < (int)block_diff) {\n        if (block_diff < 0xc) {\n          if (previous_block == next_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_2000098c = current_block;\n          }\n          else {\n            current_block = (uint *)next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = next_block;\n          }\n        }\n        else {\n          *next_block = block_diff;\n          *(uint *)((int)next_block + block_diff) = allocated_size;\n          previous_block = (uint *)((int)next_block + block_diff);\n        }\n        goto LAB_080092d4;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (DAT_20000990 == 0) {\n      DAT_20000990 = allocate_memory_and_assign_result_08009918(result_ptr);\n    }\n    current_block = (uint *)allocate_memory_and_assign_result_08009918(result_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (remaining_size = allocate_memory_and_assign_result_08009918(result_ptr,(int)previous_block - (int)current_block), remaining_size != -1)))) {\n      *previous_block = allocated_size;\nLAB_080092d4:\n      FUNC_08009f4a(result_ptr);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      remaining_size = allocated_size - (int)(previous_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)previous_block + remaining_size) = -remaining_size;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *result_ptr = 0xc;\n    FUNC_08009f4a(result_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009270": "allocate_and_initialize_memory_08009270",
                "param_1": "result_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_size",
                "puVar3": "next_block",
                "uVar4": "block_diff",
                "puVar5": "previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_08009190",
                "FUN_08009d24",
                "FUN_08009908",
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08009918",
                "FUN_08009f4a",
                "FUN_08009f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800932c": {
            "entrypoint": "0x0800932c",
            "current_name": "process_input_0800932c",
            "code": "\nuint processInput_0800932c(int arg1,byte inputByte,byte **data)\n\n{\n  int tempVar1;\n  byte *tempVar2;\n  byte *tempVar3;\n  uint result;\n  \n  tempVar2 = data[2] + -1;\n  data[2] = tempVar2;\n  if ((-1 < (int)tempVar2) ||\n     (((int)data[6] <= (int)tempVar2 && (tempVar2 = (byte *)(uint)inputByte, tempVar2 != (byte *)0xa))))\n  {\n    tempVar2 = *data;\n    *data = tempVar2 + 1;\n    *tempVar2 = inputByte;\n    return (uint)inputByte;\n  }\n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    initializeFunction();\n  }\n  if (data == (byte **)&DAT_0800aba4) {\n    data = *(byte ***)(arg1 + 4);\n  }\n  else if (data == (byte **)&DAT_0800abc4) {\n    data = *(byte ***)(arg1 + 8);\n  }\n  else if (data == (byte **)&DAT_0800ab84) {\n    data = *(byte ***)(arg1 + 0xc);\n  }\n  data[2] = data[6];\n  tempVar3 = (byte *)(uint)*(ushort *)(data + 3);\n  tempVar1 = (int)tempVar3 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar3 = data[4], tempVar3 != (byte *)0x0)) ||\n     (tempVar1 = updateData(arg1,data,tempVar1,tempVar3,tempVar2), tempVar1 == 0)) {\n    result = (uint)inputByte;\n    tempVar1 = (int)*data - (int)data[4];\n    if ((tempVar1 < (int)data[5]) || (tempVar1 = validateInputs(arg1,data), tempVar1 == 0)) {\n      data[2] = data[2] + -1;\n      tempVar2 = *data;\n      *data = tempVar2 + 1;\n      *tempVar2 = inputByte;\n      if ((byte *)(tempVar1 + 1) != data[5]) {\n        if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      tempVar1 = validateInputs(arg1,data);\n      if (tempVar1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800932c": "process_input_0800932c",
                "param_1": "arg1",
                "param_2": "inputByte",
                "param_3": "data",
                "iVar1": "tempVar1",
                "pbVar2": "tempVar2",
                "pbVar3": "tempVar3",
                "uVar4": "result",
                "initialize_function_08009d50": "initializeFunction",
                "update_data_08009a80": "updateData",
                "validate_inputs_08009c7c": "validateInputs"
            },
            "calling": [
                "FUN_08009358"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009a80",
                "FUN_08009c7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009358": {
            "entrypoint": "0x08009358",
            "current_name": "process_input_and_return_08009358",
            "code": "\nint processInputAndReturn_08009358(undefined4 arg1,undefined4 arg2,undefined *inputData,int inputLength)\n\n{\n  int result;\n  undefined *endPointer;\n  int currentLength;\n  \n  endPointer = inputData + inputLength;\n  currentLength = inputLength;\n  do {\n    if (inputData == endPointer) {\n      return 0;\n    }\n    result = process_input_0800932c(arg1,*inputData,arg2,inputLength,currentLength);\n    inputLength = result + 1;\n    inputData = inputData + 1;\n  } while (inputLength != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009358": "process_input_and_return_08009358",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "inputData",
                "param_4": "inputLength",
                "iVar1": "result",
                "puVar2": "endPointer",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_0800932c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800937c": {
            "entrypoint": "0x0800937c",
            "current_name": "process_input_0800937c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009550) */\n\nint processInput_0800937c(int inputPointer,undefined4 *dataPointer,byte *inputData,int *outputPointer)\n\n{\n  int result;\n  int *tempPointer;\n  bool isNumber;\n  byte *currentChar;\n  byte *nextChar;\n  int tempInt;\n  int tempInt2;\n  int *outputPointer;\n  uint flags;\n  int decimalPlaces;\n  undefined4 tempInt3;\n  int integerPart;\n  int totalLength;\n  byte formatSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined zeroFlag;\n  undefined4 tempInt4;\n  \n  outputPointer = outputPointer;\n  if ((inputPointer != 0) && (*(int *)(inputPointer + 0x18) == 0)) {\n    initialize_function_08009d50();\n  }\n  if (dataPointer == &DAT_0800aba4) {\n    dataPointer = *(undefined4 **)(inputPointer + 4);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_0800abc4) {\n    dataPointer = *(undefined4 **)(inputPointer + 8);\n  }\n  else if (dataPointer == (undefined4 *)&DAT_0800ab84) {\n    dataPointer = *(undefined4 **)(inputPointer + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(dataPointer + 3) << 0x1c)) || (dataPointer[4] == 0)) &&\n     (tempInt2 = update_data_08009a80(inputPointer,dataPointer), tempInt2 != 0)) {\n    return -1;\n  }\n  totalLength = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentChar = inputData;\nLAB_080093be:\n  nextChar = currentChar;\n  if (*nextChar != 0) goto LAB_08009474;\n  goto LAB_080093c8;\nLAB_08009474:\n  currentChar = nextChar + 1;\n  if (*nextChar != 0x25) goto LAB_080093be;\nLAB_080093c8:\n  tempInt2 = (int)nextChar - (int)inputData;\n  if (tempInt2 != 0) {\n    result = process_input_and_return_08009358(inputPointer,dataPointer,inputData,tempInt2);\n    if (result == -1) {\nLAB_08009568:\n      if ((int)((uint)*(ushort *)(dataPointer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalLength;\n    }\n    totalLength = totalLength + tempInt2;\n  }\n  if (*nextChar == 0) goto LAB_08009568;\n  flags = 0;\n  integerPart = 0;\n  decimalPlaces = -1;\n  tempInt3 = 0;\n  zeroFlag = 0;\n  tempInt4 = 0;\n  currentChar = nextChar + 1;\n  while( true ) {\n    tempInt2 = find_character_08009f2c(\"#-0+ \",*currentChar);\n    inputData = currentChar + 1;\n    if (tempInt2 == 0) break;\n    flags = 1 << (tempInt2 + 0xf7ff54b0U & 0xff) | flags;\n    currentChar = inputData;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    zeroFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    zeroFlag = 0x2b;\n  }\n  if (*currentChar == 0x2a) {\n    tempPointer = outputPointer + 1;\n    tempInt2 = *outputPointer;\n    outputPointer = tempPointer;\n    if (tempInt2 < 0) {\n      integerPart = -tempInt2;\n      flags = flags | 2;\n      goto LAB_080094a6;\n    }\n  }\n  else {\n    isNumber = false;\n    tempInt2 = integerPart;\n    inputData = currentChar;\n    while( true ) {\n      if (9 < *inputData - 0x30) break;\n      tempInt2 = tempInt2 * 10 + (*inputData - 0x30);\n      isNumber = true;\n      inputData = inputData + 1;\n    }\n    if (!isNumber) goto LAB_080094a6;\n  }\n  integerPart = tempInt2;\nLAB_080094a6:\n  if (*inputData == 0x2e) {\n    if (inputData[1] == 0x2a) {\n      inputData = inputData + 2;\n      tempPointer = outputPointer + 1;\n      decimalPlaces = *outputPointer;\n      outputPointer = tempPointer;\n      if (decimalPlaces < 0) {\n        decimalPlaces = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      tempInt2 = 0;\n      decimalPlaces = 0;\n      while( true ) {\n        inputData = inputData + 1;\n        if (9 < *inputData - 0x30) break;\n        tempInt2 = tempInt2 * 10 + (*inputData - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        decimalPlaces = tempInt2;\n      }\n    }\n  }\n  tempInt2 = find_character_08009f2c(&DAT_0800ab56,*inputData,3);\n  if (tempInt2 != 0) {\n    inputData = inputData + 1;\n    flags = flags | 0x40 << (tempInt2 + 0xf7ff54aaU & 0xff);\n  }\n  formatSpecifier = *inputData;\n  inputData = inputData + 1;\n  tempInt2 = find_character_08009f2c(\"efgEFG\",formatSpecifier,6);\n  if (tempInt2 == 0) {\n    tempInt = process_and_print_data_08009698(inputPointer,&flags,dataPointer,0x8009359,&outputPointer);\n    if (tempInt == -1) goto LAB_08009568;\n  }\n  else {\n    outputPointer = (int *)(((int)outputPointer + 7U & 0xfffffff8) + 8);\n  }\n  totalLength = totalLength + tempInt;\n  currentChar = inputData;\n  goto LAB_080093be;\n}\n\n",
            "renaming": {
                "FUN_0800937c": "process_input_0800937c",
                "param_1": "inputPointer",
                "param_2": "dataPointer",
                "param_3": "inputData",
                "param_4": "outputPointer",
                "iVar1": "result",
                "piVar2": "tempPointer",
                "bVar3": "isNumber",
                "pbVar4": "currentChar",
                "pbVar5": "nextChar",
                "unaff_r9": "tempInt",
                "iVar6": "tempInt2",
                "local_8c": "outputPointer",
                "local_88": "flags",
                "local_84": "decimalPlaces",
                "local_80": "tempInt3",
                "local_7c": "integerPart",
                "local_74": "totalLength",
                "local_70": "formatSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "zeroFlag",
                "local_30": "tempInt4"
            },
            "calling": [
                "FUN_080098d8",
                "FUN_08009124"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009358",
                "FUN_08009698",
                "FUN_08009f2c",
                "FUN_08009a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095a8": {
            "entrypoint": "0x080095a8",
            "current_name": "process_data_080095a8",
            "code": "\nundefined4\nprocess_data_080095a8(undefined4 input_data,uint *data_array,uint *output_size,undefined4 param_4,code *callback_func)\n\n{\n  int index;\n  int result;\n  uint max_size;\n  uint increment;\n  bool flag;\n  \n  max_size = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    max_size = data_array[2];\n  }\n  *output_size = max_size;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *output_size = max_size + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index = 0; index < (int)(data_array[3] - *output_size); index = index + 1) {\n      result = (*callback_func)(input_data,param_4,(int)data_array + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_size = (uint)*(byte *)((int)data_array + 0x43);\n  if (max_size != 0) {\n    max_size = 1;\n  }\n  increment = max_size;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + max_size + 0x43) = 0x30;\n    increment = max_size + 2;\n    *(undefined *)((int)data_array + max_size + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  index = (*callback_func)(input_data,param_4,(int)data_array + 0x43,increment);\n  if (index != -1) {\n    max_size = data_array[3];\n    flag = (*data_array & 6) != 4;\n    if (flag) {\n      max_size = 0;\n    }\n    increment = 0;\n    if (!flag) {\n      max_size = max_size - *output_size;\n    }\n    if (!flag) {\n      max_size = max_size & ~((int)max_size >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      max_size = max_size + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (max_size == increment) {\n        return 0;\n      }\n      index = (*callback_func)(input_data,param_4,(int)data_array + 0x1a,1);\n      if (index == -1) break;\n      increment = increment + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080095a8": "process_data_080095a8",
                "param_1": "input_data",
                "param_2": "data_array",
                "param_3": "output_size",
                "param_5": "callback_func",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_size",
                "uVar4": "increment",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009698": {
            "entrypoint": "0x08009698",
            "current_name": "process_and_print_data_08009698",
            "code": "\nuint processAndPrintData_08009698(undefined4 input,uint *data,undefined4 size,code *callback,uint **output)\n\n{\n  byte charCode;\n  int result;\n  uint *ptr;\n  int innerResult;\n  char *hexDigits;\n  uint temp;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint originalSize;\n  char *outputPtr;\n  char *outputData;\n  uint localBuffer [2];\n  \n  charCode = *(byte *)(data + 6);\n  outputData = (char *)((int)data + 0x43);\n  if (charCode != 0x6e) {\n    if (charCode < 0x6f) {\n      if (charCode != 99) {\n        if (charCode < 100) {\n          if (charCode == 0) goto LAB_08009852;\n          if (charCode != 0x58) goto LAB_080096c8;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexDigits = \"0123456789ABCDEF\";\nLAB_080097e2:\n          temp = *data;\n          ptr = *output;\n          *output = ptr + 1;\n          if (((temp & 0x80) == 0) && ((int)(temp << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(temp << 0x1f) < 0) {\n            *data = temp | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          temp = 0x10;\nLAB_08009778:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((charCode != 100) && (charCode != 0x69)) goto LAB_080096c8;\n          value = *data;\n          ptr = *output;\n          if ((value & 0x80) == 0) {\n            *output = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_080096e8;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output = ptr + 1;\nLAB_080096e8:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexDigits = \"0123456789ABCDEF\";\n          temp = 10;\n        }\n        originalSize = data[1];\n        data[2] = originalSize;\n        outputPtr = outputData;\n        if ((int)originalSize < 0) {\n          if (value != 0) goto LAB_08009816;\nLAB_080098c4:\n          *(char *)((int)data + 0x42) = *hexDigits;\n          outputPtr = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (originalSize != 0) goto LAB_080098c4;\n          }\n          else {\nLAB_08009816:\n            do {\n              originalSize = value / temp;\n              outputPtr = outputPtr + -1;\n              *outputPtr = hexDigits[value - temp * originalSize];\n              value = originalSize;\n            } while (originalSize != 0);\n          }\n        }\n        if (((temp == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          outputPtr[-1] = '0';\n          outputPtr = outputPtr + -1;\n        }\n        data[4] = (int)outputData - (int)outputPtr;\n        outputData = outputPtr;\n        goto LAB_080097be;\n      }\n      ptr = *output;\n      *output = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08009728:\n      outputData = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (charCode != 0x73) {\n        if (charCode < 0x74) {\n          if (charCode == 0x6f) {\nLAB_0800974e:\n            value = *data;\n            ptr = *output;\n            if ((value & 0x80) == 0) {\n              *output = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_0800975c;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output = ptr + 1;\nLAB_0800975c:\n              value = *ptr;\n            }\n            if (charCode == 0x6f) {\n              temp = 8;\n            }\n            else {\n              temp = 10;\n            }\n            hexDigits = \"0123456789ABCDEF\";\n            goto LAB_08009778;\n          }\n          if (charCode == 0x70) {\n            *data = *data | 0x20;\nLAB_0800970e:\n            hexDigits = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_080097e2;\n          }\n        }\n        else {\n          if (charCode == 0x75) goto LAB_0800974e;\n          if (charCode == 0x78) goto LAB_0800970e;\n        }\nLAB_080096c8:\n        *(byte *)((int)data + 0x42) = charCode;\n        goto LAB_08009728;\n      }\n      ppcVar8 = (char **)*output;\n      *output = (uint *)(ppcVar8 + 1);\n      outputData = *ppcVar8;\n      result = find_character_08009f2c(outputData,0,data[1]);\n      if (result != 0) {\n        data[1] = result - (int)outputData;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080097be;\n  }\n  value = *data;\n  ppuVar7 = (uint **)*output;\n  temp = data[5];\n  if ((value & 0x80) == 0) {\n    *output = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800983e;\n    *(short *)ptr = (short)temp;\n  }\n  else {\n    *output = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800983e:\n    *ptr = temp;\n  }\nLAB_08009852:\n  data[4] = 0;\nLAB_080097be:\n  result = process_data_080095a8(input,data,localBuffer,size,callback);\n  if ((result == -1) || (result = (*callback)(input,size,outputData,data[4]), result == -1)) {\nLAB_080097d2:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - localBuffer[0]); result = result + 1) {\n        innerResult = (*callback)(input,size,(int)data + 0x19,1);\n        if (innerResult == -1) goto LAB_080097d2;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)localBuffer[0]) {\n      value = localBuffer[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009698": "process_and_print_data_08009698",
                "param_1": "input",
                "param_2": "data",
                "param_3": "size",
                "param_4": "callback",
                "param_5": "output",
                "bVar1": "charCode",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "innerResult",
                "pcVar5": "hexDigits",
                "uVar6": "temp",
                "uVar9": "value",
                "uVar10": "originalSize",
                "pcVar11": "outputPtr",
                "pcVar12": "outputData",
                "local_24": "localBuffer"
            },
            "calling": [
                "FUN_0800937c"
            ],
            "called": [
                "FUN_080095a8",
                "FUN_08009f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d8": {
            "entrypoint": "0x080098d8",
            "current_name": "initialize_and_process_input_080098d8",
            "code": "\nvoid initializeAndProcessInput_080098d8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int iVar1;\n  undefined4 arg1_copy;\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  undefined4 arg4_copy;\n  \n  iVar1 = DAT_20000090;\n  arg1_copy = arg1;\n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  arg4_copy = arg4;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_function_08009d50(DAT_20000090);\n  }\n  process_input_0800937c(iVar1,*(undefined4 *)(iVar1 + 8),arg1,&arg2_copy,arg1_copy,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080098d8": "initialize_and_process_input_080098d8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar2": "arg1_copy",
                "uStack_c": "arg2_copy",
                "uStack_8": "arg3_copy",
                "uStack_4": "arg4_copy"
            },
            "calling": [
                "FUN_080075dc",
                "FUN_08007594",
                "FUN_080077b0",
                "FUN_08007544",
                "FUN_08008078"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_0800937c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009908": {
            "entrypoint": "0x08009908",
            "current_name": "allocate_and_copy_data_08009908",
            "code": "\nint allocateAndCopyData_08009908(int size,uint length)\n\n{\n  undefined4 ptrToData;\n  int result;\n  uint sum;\n  \n  ptrToData = DAT_20000090;\n  if (size != 0) {\n    if (length == 0) {\n      extract_integer_080091d8();\n      result = 0;\n    }\n    else {\n      sum = calculate_sum_0800a154();\n      result = size;\n      if ((sum < length) && (result = allocate_and_initialize_memory_08009270(ptrToData,length), result != 0)) {\n        copy_data_080091b0(result,size,length);\n        extract_integer_080091d8(ptrToData,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory_08009270(DAT_20000090,length,length,&DAT_20000090);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009908": "allocate_and_copy_data_08009908",
                "param_1": "size",
                "param_2": "length",
                "uVar1": "ptrToData",
                "iVar2": "result",
                "uVar3": "sum"
            },
            "calling": [
                "FUN_080027f0",
                "FUN_08002acc",
                "FUN_0800288c"
            ],
            "called": [
                "FUN_0800a154",
                "FUN_080091b0",
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009918": {
            "entrypoint": "0x08009918",
            "current_name": "allocate_memory_and_assign_result_08009918",
            "code": "\nvoid allocate_memory_and_assign_result_08009918(int *result_pointer,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000a38 = 0;\n  allocation_result = allocate_memory_08008804(size);\n  if ((allocation_result == -1) && (DAT_20000a38 != 0)) {\n    *result_pointer = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009918": "allocate_memory_and_assign_result_08009918",
                "param_1": "result_pointer",
                "param_2": "size",
                "iVar1": "allocation_result"
            },
            "calling": [
                "FUN_08009270"
            ],
            "called": [
                "FUN_08008804"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009938": {
            "entrypoint": "0x08009938",
            "current_name": "find_character_08009938",
            "code": "\nchar * find_character_08009938(char *string,char character)\n\n{\n  char *current_char;\n  \n  do {\n    current_char = string;\n    if (*current_char == '\\0') {\n      if (character != '\\0') {\n        current_char = (char *)0x0;\n      }\n      return current_char;\n    }\n    string = current_char + 1;\n  } while (character != *current_char);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009938": "find_character_08009938",
                "param_1": "string",
                "param_2": "character",
                "pcVar1": "current_char"
            },
            "calling": [
                "FUN_0800997e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009954": {
            "entrypoint": "0x08009954",
            "current_name": "copy_string_08009954",
            "code": "\nvoid copyString_08009954(char *destination,char *source,int length)\n\n{\n  char currentChar;\n  int remainingLength;\n  char *currentPosition;\n  \n  do {\n    currentPosition = destination;\n    remainingLength = length;\n    if (remainingLength == 0) {\n      return;\n    }\n    currentChar = *source;\n    destination = currentPosition + 1;\n    *currentPosition = currentChar;\n    source = source + 1;\n    length = remainingLength + -1;\n  } while (currentChar != '\\0');\n  for (; destination != currentPosition + remainingLength; destination = destination + 1) {\n    *destination = '\\0';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009954": "copy_string_08009954",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "cVar1": "currentChar",
                "iVar2": "remainingLength",
                "pcVar3": "currentPosition"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800997e": {
            "entrypoint": "0x0800997e",
            "current_name": "find_last_character_0800997e",
            "code": "\nint find_last_character_0800997e(int string_ptr,int string_length,undefined4 character,undefined4 offset)\n\n{\n  int character_position;\n  int last_character_position;\n  \n  if (string_length != 0) {\n    last_character_position = 0;\n    while (character_position = find_character_08009938(string_ptr,string_length,character,string_ptr,offset), character_position != 0) {\n      string_ptr = character_position + 1;\n      last_character_position = character_position;\n    }\n    return last_character_position;\n  }\n  last_character_position = find_character_08009938();\n  return last_character_position;\n}\n\n",
            "renaming": {
                "FUN_0800997e": "find_last_character_0800997e",
                "param_1": "string_ptr",
                "param_2": "string_length",
                "param_3": "character",
                "param_4": "offset",
                "iVar1": "character_position",
                "iVar2": "last_character_position"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [
                "FUN_08009938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080099a4": {
            "entrypoint": "0x080099a4",
            "current_name": "find_substring_080099a4",
            "code": "\nchar * find_substring_080099a4(char *string1,char *string2)\n\n{\n  char *current_char_str1;\n  char *current_char_str2;\n  char *next_char_str2;\n  \n  if (*string1 == '\\0') {\n    if (*string2 != '\\0') {\n      string1 = (char *)0x0;\n    }\n    return string1;\n  }\n  do {\n    current_char_str1 = string1;\n    if (*current_char_str1 == '\\0') {\n      return (char *)0x0;\n    }\n    next_char_str2 = string2 + -1;\n    current_char_str2 = current_char_str1 + -1;\n    do {\n      next_char_str2 = next_char_str2 + 1;\n      if (*next_char_str2 == '\\0') {\n        return current_char_str1;\n      }\n      current_char_str2 = current_char_str2 + 1;\n      string1 = current_char_str1 + 1;\n    } while (*current_char_str2 == *next_char_str2);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080099a4": "find_substring_080099a4",
                "param_1": "string1",
                "param_2": "string2",
                "pcVar1": "current_char_str1",
                "pcVar2": "current_char_str2",
                "pcVar3": "next_char_str2"
            },
            "calling": [
                "FUN_08002e44"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a80": {
            "entrypoint": "0x08009a80",
            "current_name": "update_data_08009a80",
            "code": "\nuint updateData_08009a80(undefined4 *output,undefined4 *input)\n\n{\n  int dataAddress;\n  uint value;\n  ushort flags;\n  \n  dataAddress = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    initialize_function_08009d50(DAT_20000090);\n  }\n  if (input == &DAT_0800aba4) {\n    input = *(undefined4 **)(dataAddress + 4);\n  }\n  else if (input == (undefined4 *)&DAT_0800abc4) {\n    input = *(undefined4 **)(dataAddress + 8);\n  }\n  else if (input == (undefined4 *)&DAT_0800ab84) {\n    input = *(undefined4 **)(dataAddress + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  value = (uint)flags;\n  if (-1 < (int)(value << 0x1c)) {\n    if (-1 < (int)(value << 0x1b)) {\n      *output = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          extract_integer_080091d8(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08009eac(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  value = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      value = input[5];\n    }\n    input[2] = value;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    value = (int)(short)flags & 0x80;\n    if (value != 0) {\nLAB_08009ab0:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    value = 0;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08009a80": "update_data_08009a80",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "dataAddress",
                "uVar2": "value",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_08009eac",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_08009a80(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_20000090;\n  if ((DAT_20000090 != 0) && (*(int *)(DAT_20000090 + 0x18) == 0)) {\n    FUNC_08009d50(DAT_20000090);\n  }\n  if (param_2 == &DAT_0800aba4) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800abc4) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_0800ab84) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08009ab0;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          extract_integer_080091d8(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_initialize_memory_08009eac(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08009ab0:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08009b5c": {
            "entrypoint": "0x08009b5c",
            "current_name": "process_data_08009b5c",
            "code": "\nvoid processData_08009b5c(void)\n\n{\n  uint *ptrData;\n  int counter;\n  int *ptrArray;\n  int *ptrArray2;\n  uint var1;\n  ushort var2;\n  int var3;\n  code *functionPtr;\n  int var4;\n  uint var5;\n  code *jumpTable;\n  bool booleanVar;\n  undefined8 loopResult;\n  \n  execute_function_08009fe8(6);\n  jumpTable = (code *)0x8009b6b;\n  loopResult = infinite_loop_08008868(1);\n  ptrArray = (int *)((ulonglong)loopResult >> 0x20);\n  ptrData = (uint *)loopResult;\n  var2 = *(ushort *)(ptrArray + 3);\n  var1 = (uint)var2;\n  if ((int)(var1 << 0x1c) < 0) {\n    counter = ptrArray[4];\n    if (counter != 0) {\n      var3 = var1 << 0x1e;\n      booleanVar = var3 != 0;\n      if (booleanVar) {\n        var3 = 0;\n      }\n      var4 = *ptrArray;\n      if (!booleanVar) {\n        var3 = ptrArray[5];\n      }\n      *ptrArray = counter;\n      ptrArray[2] = var3;\n      for (var4 = var4 - counter; 0 < var4; var4 = var4 - var3) {\n        var3 = (*(code *)ptrArray[10])(ptrData,ptrArray[8],counter,var4);\n        if (var3 < 1) {\n          var2 = *(ushort *)(ptrArray + 3);\n          goto LAB_08009c62;\n        }\n        counter = counter + var3;\n      }\n    }\n  }\n  else if (((0 < ptrArray[1]) || (0 < ptrArray[0x10])) &&\n          (functionPtr = (code *)ptrArray[0xb], functionPtr != (code *)0x0)) {\n    var5 = *ptrData;\n    *ptrData = 0;\n    if ((var2 & 0x1000) == 0) {\n      counter = (*functionPtr)(ptrData,ptrArray[8],var1 & 0x1000,1);\n      if ((counter == -1) && (var1 = *ptrData, var1 != 0)) {\n        if ((var1 != 0x1d) && (var1 != 0x16)) {\n          *(ushort *)(ptrArray + 3) = *(ushort *)(ptrArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumpTable)();\n          return;\n        }\n        *ptrData = var5;\n        goto LAB_08009b86;\n      }\n    }\n    else {\n      counter = ptrArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptrArray + 3) << 0x1d) < 0) &&\n       (counter = counter - ptrArray[1], ptrArray[0xd] != 0)) {\n      counter = counter - ptrArray[0x10];\n    }\n    counter = (*(code *)ptrArray[0xb])(ptrData,ptrArray[8],counter,0);\n    var2 = *(ushort *)(ptrArray + 3);\n    if ((counter == -1) &&\n       ((0x1d < *ptrData || (-1 < (int)((0x20400001U >> (*ptrData & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n      *(ushort *)(ptrArray + 3) = var2 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    ptrArray[1] = 0;\n    *ptrArray = ptrArray[4];\n    if (((int)((uint)var2 << 0x13) < 0) && ((counter != -1 || (*ptrData == 0)))) {\n      ptrArray[0x15] = counter;\n    }\n    ptrArray2 = (int *)ptrArray[0xd];\n    *ptrData = var5;\n    if (ptrArray2 != (int *)0x0) {\n      if (ptrArray2 != ptrArray + 0x11) {\n        extract_integer_080091d8(ptrData);\n      }\n      ptrArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)();\n      return;\n    }\n  }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009b5c": "process_data_08009b5c",
                "puVar1": "ptrData",
                "iVar2": "counter",
                "piVar3": "ptrArray",
                "piVar4": "ptrArray2",
                "uVar5": "var1",
                "uVar6": "var2",
                "iVar7": "var3",
                "pcVar8": "functionPtr",
                "iVar9": "var4",
                "uVar10": "var5",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar11": "booleanVar",
                "uVar12": "loopResult"
            },
            "calling": [
                "FUN_080090cc",
                "FUN_0800a18c"
            ],
            "called": [
                "FUN_08009fe8",
                "FUN_08008868",
                "FUN_080091d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009c7c": {
            "entrypoint": "0x08009c7c",
            "current_name": "validate_inputs_08009c7c",
            "code": "\nundefined4 validate_inputs_08009c7c(uint *input_array,int *params_array)\n\n{\n  undefined4 result;\n  int param2_4;\n  int *tmp_ptr;\n  uint uVar4;\n  ushort uVar5;\n  int param2_5;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *unrecovered_jumptable;\n  bool bVar10;\n  \n  if (params_array[4] != 0) {\n    if ((input_array != (uint *)0x0) && (input_array[6] == 0)) {\n      initialize_function_08009d50();\n    }\n    if (params_array == &DAT_0800aba4) {\n      params_array = (int *)input_array[1];\n    }\n    else if (params_array == (int *)&DAT_0800abc4) {\n      params_array = (int *)input_array[2];\n    }\n    else if (params_array == (int *)&DAT_0800ab84) {\n      params_array = (int *)input_array[3];\n    }\n    if (*(short *)(params_array + 3) != 0) {\n      uVar5 = *(ushort *)(params_array + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        param2_4 = params_array[4];\n        if (param2_4 != 0) {\n          param2_5 = uVar4 << 0x1e;\n          bVar10 = param2_5 != 0;\n          if (bVar10) {\n            param2_5 = 0;\n          }\n          iVar8 = *params_array;\n          if (!bVar10) {\n            param2_5 = params_array[5];\n          }\n          *params_array = param2_4;\n          params_array[2] = param2_5;\n          for (iVar8 = iVar8 - param2_4; 0 < iVar8; iVar8 = iVar8 - param2_5) {\n            param2_5 = (*(code *)params_array[10])(input_array,params_array[8],param2_4,iVar8,unaff_r4,unaff_r5);\n            if (param2_5 < 1) {\n              uVar5 = *(ushort *)(params_array + 3);\n              goto LAB_08009c62;\n            }\n            param2_4 = param2_4 + param2_5;\n          }\n        }\n      }\n      else if (((0 < params_array[1]) || (0 < params_array[0x10])) &&\n              (pcVar7 = (code *)params_array[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *input_array;\n        *input_array = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          param2_4 = (*pcVar7)(input_array,params_array[8],uVar4 & 0x1000,1);\n          if ((param2_4 == -1) && (uVar4 = *input_array, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(params_array + 3) = *(ushort *)(params_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*unrecovered_jumptable)();\n              return result;\n            }\n            *input_array = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          param2_4 = params_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(params_array + 3) << 0x1d) < 0) &&\n           (param2_4 = param2_4 - params_array[1], params_array[0xd] != 0)) {\n          param2_4 = param2_4 - params_array[0x10];\n        }\n        param2_4 = (*(code *)params_array[0xb])(input_array,params_array[8],param2_4,0);\n        uVar5 = *(ushort *)(params_array + 3);\n        if ((param2_4 == -1) &&\n           ((0x1d < *input_array || (-1 < (int)((0x20400001U >> (*input_array & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(params_array + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecovered_jumptable)(0xffffffff);\n          return result;\n        }\n        params_array[1] = 0;\n        *params_array = params_array[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((param2_4 != -1 || (*input_array == 0)))) {\n          params_array[0x15] = param2_4;\n        }\n        tmp_ptr = (int *)params_array[0xd];\n        *input_array = uVar9;\n        if (tmp_ptr != (int *)0x0) {\n          if (tmp_ptr != params_array + 0x11) {\n            extract_integer_080091d8(input_array);\n          }\n          params_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*unrecovered_jumptable)();\n          return result;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*unrecovered_jumptable)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009c7c": "validate_inputs_08009c7c",
                "param_1": "input_array",
                "param_2": "params_array",
                "uVar1": "result",
                "iVar2": "param2_4",
                "piVar3": "tmp_ptr",
                "iVar6": "param2_5",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable"
            },
            "calling": [
                "FUN_0800932c"
            ],
            "called": [
                "FUN_08009d50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08009c7c(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08009d50();\n    }\n    if (param_2 == &DAT_0800aba4) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_0800abc4) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_0800ab84) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08009c62;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c2c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08009b86;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08009c62:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08009c6c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            extract_integer_080091d8(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08009c02. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08009b86:\n                    /* WARNING: Could not recover jumptable at 0x08009b88. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08009cdc": {
            "entrypoint": "0x08009cdc",
            "current_name": "initialize_data_structure_08009cdc",
            "code": "\nvoid initialize_data_structure_08009cdc(undefined4 *data_structure,undefined2 value_1,undefined2 value_2)\n\n{\n  *data_structure = 0;\n  data_structure[1] = 0;\n  data_structure[2] = 0;\n  *(undefined2 *)(data_structure + 3) = value_1;\n  data_structure[25] = 0;\n  *(undefined2 *)((int)data_structure + 0xe) = value_2;\n  data_structure[4] = 0;\n  data_structure[5] = 0;\n  data_structure[6] = 0;\n  fill_memory_080091c6(data_structure + 0x17,0,8);\n  data_structure[8] = data_structure;\n  data_structure[9] = 0x800a021;\n  data_structure[10] = 0x800a043;\n  data_structure[11] = 0x800a07b;\n  data_structure[12] = address_of_label_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009cdc": "initialize_data_structure_08009cdc",
                "param_1": "data_structure",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[1]": "data_structure[1]",
                "param_1[2]": "data_structure[2]",
                "param_1[0x19]": "data_structure[25]",
                "param_1[4]": "data_structure[4]",
                "param_1[5]": "data_structure[5]",
                "param_1[6]": "data_structure[6]",
                "param_1[8]": "data_structure[8]",
                "param_1[9]": "data_structure[9]",
                "param_1[10]": "data_structure[10]",
                "param_1[0xb]": "data_structure[11]",
                "param_1[0xc]": "data_structure[12]",
                "&LAB_0800a09e_1": "address_of_label_1"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_080091c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d24": {
            "entrypoint": "0x08009d24",
            "current_name": "allocate_and_initialize_memory_08009d24",
            "code": "\nundefined4 * allocateAndInitializeMemory_08009d24(undefined4 param1,int param2)\n\n{\n  undefined4 *memoryPtr;\n  int offset;\n  \n  offset = (param2 + -1) * 0x68;\n  memoryPtr = (undefined4 *)allocate_and_initialize_memory_08009270(param1,offset + 0x74);\n  if (memoryPtr != (undefined4 *)0x0) {\n    *memoryPtr = 0;\n    memoryPtr[1] = param2;\n    memoryPtr[2] = memoryPtr + 3;\n    fill_memory_080091c6(memoryPtr + 3,0,offset + 0x68);\n  }\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_08009d24": "allocate_and_initialize_memory_08009d24",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "memoryPtr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08009db0"
            ],
            "called": [
                "FUN_080091c6",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d50": {
            "entrypoint": "0x08009d50",
            "current_name": "initialize_function_08009d50",
            "code": "\nvoid initializeFunction_08009d50(undefined4 *functionParams)\n\n{\n  undefined4 returnValue;\n  undefined4 *pointerVar;\n  \n  if (functionParams[6] == 0) {\n    functionParams[0x12] = 0;\n    functionParams[0x13] = 0;\n    functionParams[0x14] = 0;\n    pointerVar = &DAT_20000094;\n    functionParams[10] = &label;\n    if (functionParams == &DAT_20000094) {\n      pointerVar = (undefined4 *)0x1;\n    }\n    if (functionParams == &DAT_20000094) {\n      functionParams[6] = pointerVar;\n    }\n    returnValue = initMemoryFunc();\n    functionParams[1] = returnValue;\n    returnValue = initMemoryFunc(functionParams);\n    functionParams[2] = returnValue;\n    returnValue = initMemoryFunc(functionParams);\n    functionParams[3] = returnValue;\n    initDataStructureFunc(functionParams[1],4,0);\n    initDataStructureFunc(functionParams[2],9,1);\n    initDataStructureFunc(functionParams[3],0x12,2);\n    functionParams[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009d50": "initialize_function_08009d50",
                "param_1": "functionParams",
                "uVar1": "returnValue",
                "puVar2": "pointerVar",
                "initialize_memory_08009db0": "initMemoryFunc",
                "initialize_data_structure_08009cdc": "initDataStructureFunc",
                "LAB_08009cd0_1": "label"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009db0",
                "FUN_080098d8",
                "FUN_08009a80",
                "FUN_0800932c",
                "FUN_08009c7c"
            ],
            "called": [
                "FUN_08009cdc",
                "FUN_08009db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009db0": {
            "entrypoint": "0x08009db0",
            "current_name": "initialize_memory_08009db0",
            "code": "\nint * initializeMemory_08009db0(undefined4 *resultCode,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPtr1;\n  int *currentPtr2;\n  int **memoryArrayPtr;\n  \n  if (DAT_200000ac == 0) {\n    initialize_function_08009d50(&DAT_20000094);\n  }\n  memoryArrayPtr = (int **)&DAT_200000dc;\n  do {\n    currentPtr2 = memoryArrayPtr[2];\n    currentPtr1 = memoryArrayPtr[1];\n    while (currentPtr1 = (int *)((int)currentPtr1 + -1), -1 < (int)currentPtr1) {\n      if (*(short *)(currentPtr2 + 3) == 0) {\n        *(undefined2 *)((int)currentPtr2 + 0xe) = 0xffff;\n        currentPtr2[0x19] = 0;\n        *(undefined2 *)(currentPtr2 + 3) = 1;\n        *currentPtr2 = 0;\n        currentPtr2[2] = 0;\n        currentPtr2[1] = 0;\n        currentPtr2[4] = 0;\n        currentPtr2[5] = 0;\n        currentPtr2[6] = 0;\n        fill_memory_080091c6(currentPtr2 + 0x17,0,8,1,param4);\n        currentPtr2[0xd] = 0;\n        currentPtr2[0xe] = 0;\n        currentPtr2[0x12] = 0;\n        currentPtr2[0x13] = 0;\n        return currentPtr2;\n      }\n      currentPtr2 = currentPtr2 + 0x1a;\n    }\n    if (*memoryArrayPtr == (int *)0x0) {\n      currentPtr1 = (int *)allocate_and_initialize_memory_08009d24(resultCode,4);\n      *memoryArrayPtr = currentPtr1;\n      if (currentPtr1 == (int *)0x0) {\n        *resultCode = 0xc;\n        return (int *)0x0;\n      }\n    }\n    memoryArrayPtr = (int **)*memoryArrayPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08009db0": "initialize_memory_08009db0",
                "param_1": "resultCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPtr1",
                "piVar2": "currentPtr2",
                "ppiVar3": "memoryArrayPtr"
            },
            "calling": [
                "FUN_08009d50"
            ],
            "called": [
                "FUN_08009d50",
                "FUN_080091c6",
                "FUN_08009d24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08009db0(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000ac == 0) {\n    FUNC_08009d50(&DAT_20000094);\n  }\n  ppiVar3 = (int **)&DAT_200000dc;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080091c6(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08009d24(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08009e64": {
            "entrypoint": "0x08009e64",
            "current_name": "check_memory_access_08009e64",
            "code": "\nundefined4 checkMemoryAccess_08009e64(undefined4 param1,int param2,undefined4 *resultPtr,uint *flagPtr)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined tempStack [4];\n  uint localFlag;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (iVar1 = set_memory_flag_if_failed_return_and_assign_0800a0ec(param1,(int)*(short *)(param2 + 0xe),tempStack), iVar1 < 0)) {\n    *flagPtr = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      uVar2 = 0x40;\n      goto LAB_08009ea4;\n    }\n  }\n  else {\n    *flagPtr = (uint)((localFlag & 0xf000) == 0x2000);\n  }\n  uVar2 = 0x400;\nLAB_08009ea4:\n  *resultPtr = uVar2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08009e64": "check_memory_access_08009e64",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "resultPtr",
                "param_4": "flagPtr",
                "auStack_4c": "tempStack",
                "local_48": "localFlag"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_0800a0ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009eac": {
            "entrypoint": "0x08009eac",
            "current_name": "allocate_and_initialize_memory_08009eac",
            "code": "\nvoid allocate_and_initialize_memory_08009eac(int memory_address,int *memory_data)\n\n{\n  ushort memory_access_result;\n  int memory_allocation_result;\n  int local_memory_address;\n  int *local_memory_data;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_data + 3) << 0x1e)) {\n    local_memory_address = memory_address;\n    local_memory_data = memory_data;\n    memory_access_result = check_memory_access_08009e64(memory_address,memory_data,&local_memory_address,&local_memory_data);\n    memory_allocation_result = allocate_and_initialize_memory_08009eac_08009270(memory_address,local_memory_address);\n    if (memory_allocation_result != 0) {\n      *(undefined **)(memory_address + 0x28) = &LAB_08009cd0_1;\n      *memory_data = memory_allocation_result;\n      *(ushort *)(memory_data + 3) = *(ushort *)(memory_data + 3) | 0x80;\n      memory_data[4] = memory_allocation_result;\n      memory_data[5] = local_memory_address;\n      if ((local_memory_data != (int *)0x0) &&\n         (memory_allocation_result = update_return_value_0800a110(memory_address,(int)*(short *)((int)memory_data + 0xe)), memory_allocation_result != 0)) {\n        *(ushort *)(memory_data + 3) = *(ushort *)(memory_data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_data + 3) = memory_access_result | *(ushort *)(memory_data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_data + 3) = *(ushort *)(memory_data + 3) & 0xfffc | 2;\n  }\n  *memory_data = (int)memory_data + 0x47;\n  memory_data[4] = (int)memory_data + 0x47;\n  memory_data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009eac": "allocate_and_initialize_memory_08009eac",
                "param_1": "memory_address",
                "param_2": "memory_data",
                "uVar1": "memory_access_result",
                "iVar2": "memory_allocation_result",
                "local_18": "local_memory_address",
                "local_14": "local_memory_data"
            },
            "calling": [
                "FUN_08009a80"
            ],
            "called": [
                "FUN_0800a110",
                "FUN_08009e64",
                "FUN_08009270"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f2c": {
            "entrypoint": "0x08009f2c",
            "current_name": "find_character_08009f2c",
            "code": "\nchar * find_character_08009f2c(char *string,char character,int length)\n\n{\n  char *ptr_string;\n  char *current_char;\n  \n  ptr_string = string;\n  do {\n    current_char = ptr_string;\n    if (current_char == string + length) {\n      return (char *)0x0;\n    }\n    ptr_string = current_char + 1;\n  } while (*current_char != character);\n  return current_char;\n}\n\n",
            "renaming": {
                "FUN_08009f2c": "find_character_08009f2c",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "ptr_string",
                "pcVar2": "current_char"
            },
            "calling": [
                "FUN_0800937c",
                "FUN_08009698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009f48": {
            "entrypoint": "0x08009f48",
            "current_name": "FUNC_08009f48",
            "code": "\nvoid FUNC_08009f48(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f48": "FUNC_08009f48"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009f4a": {
            "entrypoint": "0x08009f4a",
            "current_name": "FUNC_08009f4a",
            "code": "\nvoid FUNC_08009f4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009f4a": "FUNC_08009f4a"
            },
            "calling": [
                "FUN_08009270",
                "FUN_080091d8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009fe8": {
            "entrypoint": "0x08009fe8",
            "current_name": "execute_function_08009fe8",
            "code": "\nint executeFunction_08009fe8(uint functionIndex)\n\n{\n  int *pointerToFunction;\n  undefined4 returnValue;\n  int pointerToData;\n  code *functionPointer;\n  undefined4 unused_register_4;\n  undefined4 unused_register_5;\n  undefined4 unused_register_lr;\n  undefined4 *pointerToDataArray;\n  \n  pointerToFunction = DAT_20000090;\n  pointerToDataArray = &DAT_20000090;\n  if (0x1f < functionIndex) {\n    *DAT_20000090 = 0x16;\n    return -1;\n  }\n  pointerToData = DAT_20000090[0x11];\n  if ((pointerToData != 0) && (functionPointer = *(code **)(pointerToData + functionIndex * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_20000090 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(pointerToData + functionIndex * 4) = 0;\n      (*functionPointer)(functionIndex);\n    }\n    return 0;\n  }\n  returnValue = thunk_check_return_value_0800887c(DAT_20000090);\n  DAT_20000a38 = 0;\n  pointerToData = initialize_data_0800886c(returnValue,functionIndex,functionIndex,0,pointerToDataArray,unused_register_4,unused_register_5,unused_register_lr);\n  if ((pointerToData == -1) && (DAT_20000a38 != 0)) {\n    *pointerToFunction = DAT_20000a38;\n  }\n  return pointerToData;\n}\n\n",
            "renaming": {
                "FUN_08009fe8": "execute_function_08009fe8",
                "param_1": "functionIndex",
                "piVar1": "pointerToFunction",
                "uVar2": "returnValue",
                "iVar3": "pointerToData",
                "pcVar4": "functionPointer",
                "puVar5": "pointerToDataArray",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_register_lr"
            },
            "calling": [
                "FUN_08009b5c"
            ],
            "called": [
                "FUN_0800886c",
                "thunk_FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800887c": {
            "entrypoint": "0x0800a01c",
            "current_name": "get_status_thunk_0800887c",
            "code": "\nint get_status_thunk_0800887c(void)\n\n{\n  status 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800887c": "get_status_thunk_0800887c",
                "undefined4": "int",
                "return": "status"
            },
            "calling": [
                "FUN_08009fe8"
            ],
            "called": [
                "FUN_0800887c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a020": {
            "entrypoint": "0x0800a020",
            "current_name": "update_parameter_0800a020",
            "code": "\nvoid updateParameter_0800a020(undefined4 param1,int param2)\n\n{\n  int updatedValue;\n  uint newValue;\n  bool isPositive;\n  \n  updatedValue = update_parameter_value_0800a168(param1,(int)*(short *)(param2 + 0xe));\n  isPositive = -1 < updatedValue;\n  if (isPositive) {\n    newValue = *(int *)(param2 + 0x54) + updatedValue;\n  }\n  else {\n    newValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(param2 + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(param2 + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a020": "update_parameter_0800a020",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "updatedValue",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800a168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a042": {
            "entrypoint": "0x0800a042",
            "current_name": "process_data_0800a042",
            "code": "\nvoid processData_0800a042(int *errorCode,int data,undefined4 paramA,undefined4 paramB)\n\n{\n  int iVar1;\n  undefined4 variableA;\n  undefined4 variableB;\n  undefined4 variableC;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    extractAndUpdateErrorCode(errorCode,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000a38 = 0;\n  iVar1 = processAndValidateData((int)*(short *)(data + 0xe),paramA,paramB,paramB,paramB,variableA,\n                       variableB,variableC);\n  if ((iVar1 == -1) && (DAT_20000a38 != 0)) {\n    *errorCode = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a042": "process_data_0800a042",
                "param_1": "errorCode",
                "param_2": "data",
                "param_3": "paramA",
                "param_4": "paramB",
                "unaff_r4": "variableA",
                "unaff_r5": "variableB",
                "in_lr": "variableC",
                "extract_and_update_error_code_0800a130": "extractAndUpdateErrorCode",
                "process_and_validate_data_0800885c": "processAndValidateData"
            },
            "calling": [],
            "called": [
                "FUN_0800a130",
                "FUN_0800885c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a07a": {
            "entrypoint": "0x0800a07a",
            "current_name": "update_error_code_0800a07a",
            "code": "\nvoid updateErrorCode_0800a07a(undefined4 errorCode,int data)\n\n{\n  int extractedErrorCode;\n  ushort updatedFlags;\n  bool isError;\n  \n  extractedErrorCode = extractAndUpdateErrorCode(errorCode,(int)*(short *)(data + 0xe));\n  isError = extractedErrorCode == -1;\n  if (isError) {\n    updatedFlags = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = extractedErrorCode;\n    updatedFlags = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = updatedFlags;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = updatedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a07a": "update_error_code_0800a07a",
                "param_1": "errorCode",
                "param_2": "data",
                "iVar1": "extractedErrorCode",
                "uVar2": "updatedFlags",
                "bVar3": "isError",
                "extract_and_update_error_code_0800a130": "extractAndUpdateErrorCode"
            },
            "calling": [],
            "called": [
                "FUN_0800a130"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a0ec": {
            "entrypoint": "0x0800a0ec",
            "current_name": "set_memory_flag_if_failed_return_and_assign_0800a0ec",
            "code": "\nvoid set_memory_flag_if_failed_return_and_assign_0800a0ec(int *result,undefined4 start_address,undefined4 end_address,undefined4 flag_value)\n\n{\n  int set_result;\n  \n  DAT_20000a38 = 0;\n  set_result = set_memory_flag_08008846(start_address,end_address,end_address,0,flag_value);\n  if ((set_result == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a0ec": "set_memory_flag_if_failed_return_and_assign_0800a0ec",
                "param_1": "result",
                "param_2": "start_address",
                "param_3": "end_address",
                "param_4": "flag_value",
                "iVar1": "set_result"
            },
            "calling": [
                "FUN_08009e64"
            ],
            "called": [
                "FUN_08008846"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a110": {
            "entrypoint": "0x0800a110",
            "current_name": "update_return_value_0800a110",
            "code": "\nvoid updateReturnValue_0800a110(int *result,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20000a38 = 0;\n  returnValue = get_return_value_08008850(inputValue);\n  if ((returnValue == -1) && (DAT_20000a38 != 0)) {\n    *result = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a110": "update_return_value_0800a110",
                "param_1": "result",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08009eac"
            ],
            "called": [
                "FUN_08008850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a130": {
            "entrypoint": "0x0800a130",
            "current_name": "extract_and_update_error_code_0800a130",
            "code": "\nvoid extract_and_update_error_code_0800a130(int *error_code_ptr,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  DAT_20000a38 = 0;\n  result = do_nothing_08008854(param2,param3,param4,param4,param4);\n  if ((result == -1) && (DAT_20000a38 != 0)) {\n    *error_code_ptr = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a130": "extract_and_update_error_code_0800a130",
                "param_1": "error_code_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800a07a",
                "FUN_0800a042"
            ],
            "called": [
                "FUN_08008854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a154": {
            "entrypoint": "0x0800a154",
            "current_name": "calculate_sum_0800a154",
            "code": "\nint calculateSum_0800a154(undefined4 result,int arrayPtr)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(arrayPtr + -4) + -4;\n  if (*(int *)(arrayPtr + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(arrayPtr + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_0800a154": "calculate_sum_0800a154",
                "param_1": "result",
                "param_2": "arrayPtr",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_08009908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a168": {
            "entrypoint": "0x0800a168",
            "current_name": "update_parameter_value_0800a168",
            "code": "\nvoid updateParameterValue_0800a168(int *targetParameter,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int iVar1;\n  \n  DAT_20000a38 = 0;\n  iVar1 = get_default_value_08008858(value1,value2,value3,value3,value3);\n  if ((iVar1 == -1) && (DAT_20000a38 != 0)) {\n    *targetParameter = DAT_20000a38;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a168": "update_parameter_value_0800a168",
                "param_1": "targetParameter",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_0800a020"
            ],
            "called": [
                "FUN_08008858"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a18c": {
            "entrypoint": "0x0800a18c",
            "current_name": "process_and_jump_0800a18c",
            "code": "\nvoid process_and_jump_0800a18c(void)\n\n{\n  code *jump_table;\n  \n  jump_table = process_and_jump_0800a18c;\n  process_data_08009b5c();\n  if (-1 < DAT_200009c0 << 0x1f) {\n    DAT_200009c0 = 1;\n  }\n  if (-1 < DAT_200009bc << 0x1f) {\n    DAT_200009bc = 1;\n  }\n  if (-1 < DAT_200009b8 << 0x1f) {\n    DAT_200009b8 = 1;\n  }\n  if (-1 < DAT_200009b4 << 0x1f) {\n    DAT_200009b4 = 1;\n  }\n  if (-1 < DAT_200009b0 << 0x1f) {\n    DAT_200009b0 = 1;\n  }\n  if (-1 < DAT_200009ac << 0x1f) {\n    DAT_200009ac = 1;\n  }\n  if (-1 < DAT_200009a8 << 0x1f) {\n    DAT_200009a8 = 1;\n  }\n  if (-1 < DAT_200009a4 << 0x1f) {\n    DAT_200009a4 = 1;\n  }\n  if (-1 < DAT_200009a0 << 0x1f) {\n    DAT_200009a0 = 1;\n  }\n  if (-1 < DAT_2000099c << 0x1f) {\n    DAT_2000099c = 1;\n  }\n  if (-1 < DAT_20000998 << 0x1f) {\n    DAT_20000998 = 1;\n  }\n  if (-1 < DAT_20000994 << 0x1f) {\n    DAT_20000994 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x0800a224. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a18c": "process_and_jump_0800a18c",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_08009084"
            ],
            "called": [
                "FUN_08009b5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a424": {
            "entrypoint": "0x0800a424",
            "current_name": "FUNC_0800a424",
            "code": "\nvoid FUNC_0800a424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a424": "FUNC_0800a424"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08009148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800a430": {
            "entrypoint": "0x0800a430",
            "current_name": "FUNC_0800a430",
            "code": "\nvoid FUNC_0800a430(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800a430": "FUNC_0800a430"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 206278,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000188",
            "FUN_080005e0",
            "FUN_08002400",
            "FUN_08002580",
            "FUN_0800267c",
            "FUN_080026f8",
            "FUN_0800270c",
            "FUN_08002720",
            "FUN_0800291c",
            "FUN_08002a30",
            "FUN_08002c2c",
            "FUN_08002ec4",
            "FUN_08002f1e",
            "FUN_08002f2c",
            "FUN_08002f84",
            "FUN_08002f94",
            "FUN_08002fa0",
            "FUN_08002fa8",
            "FUN_08002fba",
            "FUN_08002fc2",
            "FUN_0800307a",
            "FUN_0800314e",
            "FUN_08003154",
            "FUN_0800322c",
            "FUN_080032bc",
            "FUN_08003306",
            "FUN_08003346",
            "FUN_08003350",
            "FUN_08003366",
            "FUN_08003370",
            "FUN_08003376",
            "FUN_080033a8",
            "FUN_0800344a",
            "FUN_080036ac",
            "FUN_08003748",
            "FUN_08003760",
            "FUN_080038dc",
            "FUN_080038e4",
            "FUN_08003a1c",
            "FUN_08003f0c",
            "FUN_08003f30",
            "FUN_08003f94",
            "FUN_08003fb0",
            "FUN_08003fd8",
            "FUN_08004004",
            "FUN_08004024",
            "FUN_08004046",
            "FUN_08004050",
            "FUN_080040e8",
            "FUN_080042d4",
            "FUN_080042e2",
            "FUN_0800430c",
            "FUN_08004396",
            "FUN_080043a2",
            "FUN_0800457c",
            "FUN_0800459c",
            "FUN_08004728",
            "FUN_080047f4",
            "FUN_080048c8",
            "FUN_08004954",
            "FUN_080049e0",
            "FUN_08004a24",
            "FUN_08004a76",
            "FUN_08004b82",
            "FUN_08004ccc",
            "FUN_08004d6c",
            "FUN_08004e3c",
            "FUN_0800542a",
            "FUN_08005430",
            "FUN_08005434",
            "FUN_08005840",
            "FUN_08005a1c",
            "FUN_08005a68",
            "FUN_08005cec",
            "FUN_08005d48",
            "FUN_08005dac",
            "FUN_08005fe8",
            "FUN_080060c4",
            "FUN_08006262",
            "FUN_08006420",
            "FUN_080064b0",
            "FUN_080064cc",
            "FUN_0800688e",
            "FUN_080068d6",
            "FUN_08006b1c",
            "FUN_08006b28",
            "FUN_08006b3e",
            "FUN_08006b5c",
            "FUN_08006b7c",
            "FUN_08006bb8",
            "FUN_08006d24",
            "FUN_08007306",
            "FUN_08007332",
            "FUN_0800735a",
            "FUN_0800738a",
            "FUN_080073ae",
            "FUN_080073c0",
            "FUN_080073e8",
            "FUN_080073ec",
            "FUN_08007438",
            "FUN_080074e0",
            "FUN_08007718",
            "FUN_08007744",
            "FUN_0800774a",
            "FUN_08007750",
            "FUN_08007ede",
            "FUN_08007f78",
            "FUN_080086e8",
            "FUN_08008804",
            "FUN_08008840",
            "FUN_08008846",
            "FUN_08008850",
            "FUN_08008854",
            "FUN_08008858",
            "FUN_08008868",
            "FUN_0800886c",
            "FUN_0800887c",
            "FUN_08008afa",
            "FUN_08008c20",
            "FUN_08008d00",
            "FUN_08008d18",
            "FUN_08008df8",
            "FUN_08008ef4",
            "FUN_08008f3c",
            "FUN_08009108",
            "FUN_08009148",
            "FUN_080091b0",
            "FUN_080091c6",
            "FUN_080091d8",
            "FUN_080095a8",
            "FUN_08009938",
            "FUN_08009954",
            "FUN_080099a4",
            "FUN_08009f2c",
            "thunk_FUN_0800887c",
            "FUN_0800a154"
        ],
        [
            "FUN_0800018c",
            "FUN_080004d4",
            "FUN_08001c08",
            "FUN_080026b0",
            "FUN_08002948",
            "FUN_08002ce0",
            "FUN_08002ddc",
            "FUN_08003106",
            "FUN_0800319e",
            "FUN_080031ce",
            "FUN_0800325a",
            "FUN_080033cc",
            "FUN_080036d8",
            "FUN_08003a20",
            "FUN_08003b8c",
            "FUN_08005460",
            "FUN_08005a28",
            "FUN_08005a48",
            "FUN_08005aa4",
            "FUN_08005cb4",
            "FUN_08006128",
            "FUN_08006186",
            "FUN_08006280",
            "FUN_080062f4",
            "FUN_08006390",
            "FUN_080063c0",
            "FUN_0800643c",
            "FUN_08006460",
            "FUN_080066e8",
            "FUN_08006ca8",
            "FUN_08007110",
            "FUN_0800723c",
            "FUN_08007246",
            "FUN_08007258",
            "FUN_080072d8",
            "FUN_080072f0",
            "FUN_08007320",
            "FUN_0800734a",
            "FUN_08007376",
            "FUN_08007708",
            "FUN_08007710",
            "FUN_0800771c",
            "FUN_08007736",
            "FUN_08007e74",
            "FUN_08007f0e",
            "FUN_08007f7c",
            "FUN_08007f8e",
            "FUN_08007fa0",
            "FUN_08007ff0",
            "FUN_08008020",
            "FUN_080085b8",
            "FUN_080085dc",
            "FUN_08008694",
            "FUN_0800870c",
            "FUN_08008730",
            "FUN_08008e14",
            "FUN_080090c2",
            "FUN_080091a0",
            "FUN_08009698",
            "FUN_08009918",
            "FUN_0800997e",
            "FUN_08009cdc",
            "FUN_08009fe8",
            "FUN_0800a0ec",
            "FUN_0800a110",
            "FUN_0800a130",
            "FUN_0800a168"
        ],
        [
            "FUN_08002a58",
            "FUN_08002c1e",
            "FUN_08002dbc",
            "FUN_08002df6",
            "FUN_08002efe",
            "FUN_08002f0a",
            "FUN_08003158",
            "FUN_080032a2",
            "FUN_08003474",
            "FUN_08003724",
            "FUN_08003aa0",
            "FUN_08003bd8",
            "FUN_08003ce8",
            "FUN_08003de4",
            "FUN_080045c0",
            "FUN_08004ac2",
            "FUN_08004aec",
            "FUN_08004f3c",
            "FUN_080058ac",
            "FUN_080058d2",
            "FUN_08005bb8",
            "FUN_08005df4",
            "FUN_08005e2e",
            "FUN_08005e6e",
            "FUN_08006060",
            "FUN_08006538",
            "FUN_080067ac",
            "FUN_08006932",
            "FUN_0800694c",
            "FUN_08006c60",
            "FUN_08006c7c",
            "FUN_08006e68",
            "FUN_08008600",
            "FUN_0800863c",
            "FUN_08008a24",
            "FUN_08008a6c",
            "FUN_08008abc",
            "FUN_08008d30",
            "FUN_08008f78",
            "FUN_08009270",
            "FUN_08009b5c",
            "FUN_08009e64",
            "FUN_0800a020",
            "FUN_0800a07a"
        ],
        [
            "FUN_08000be8",
            "FUN_08002ac0",
            "FUN_08002e26",
            "FUN_08002ed2",
            "FUN_08002ef2",
            "FUN_08002f14",
            "FUN_08002fca",
            "FUN_080035b8",
            "FUN_0800376c",
            "FUN_08003e20",
            "FUN_08005084",
            "FUN_080052f0",
            "FUN_08006092",
            "FUN_0800674e",
            "FUN_080069ec",
            "FUN_080071e4",
            "FUN_08008b66",
            "FUN_08008d8c",
            "FUN_08009190",
            "FUN_08009908",
            "FUN_08009d24",
            "FUN_08009eac"
        ],
        [
            "FUN_08000ef8",
            "FUN_080027f0",
            "FUN_0800288c",
            "FUN_08002acc",
            "FUN_08002e44",
            "FUN_08005188",
            "FUN_08006d80",
            "FUN_080072fa",
            "FUN_08008990"
        ],
        [
            "FUN_08001bf8",
            "FUN_08002b68",
            "FUN_08003002",
            "FUN_080036a2",
            "FUN_08008880"
        ],
        [
            "FUN_08000488",
            "FUN_08002c00",
            "FUN_08008f0e"
        ],
        [
            "FUN_08002c14"
        ],
        [
            "FUN_08001c18"
        ],
        [
            "FUN_080022f8"
        ],
        [
            "FUN_0800a18c"
        ],
        [
            "FUN_08009084"
        ],
        [
            "FUN_08009094"
        ],
        [
            "FUN_080042f0"
        ],
        [
            "FUN_08009a80",
            "FUN_08009c7c",
            "FUN_08009db0"
        ],
        [
            "FUN_08009d50"
        ],
        [
            "FUN_0800932c"
        ],
        [
            "FUN_08009358"
        ],
        [
            "FUN_0800937c"
        ],
        [
            "FUN_08009124",
            "FUN_080098d8"
        ],
        [
            "FUN_08007544",
            "FUN_08007594",
            "FUN_080077b0",
            "FUN_08008078",
            "FUN_080090cc"
        ],
        [
            "FUN_08002968",
            "FUN_080075dc",
            "FUN_080076e0",
            "FUN_080084b0",
            "FUN_08008c44"
        ],
        [
            "FUN_08002578",
            "FUN_08002a1c",
            "FUN_08003048",
            "FUN_08007118",
            "FUN_08007648",
            "FUN_08008500"
        ],
        [
            "FUN_0800242c",
            "FUN_08002644",
            "FUN_08002a26",
            "FUN_0800885c",
            "FUN_080088e0"
        ],
        [
            "FUN_08000214",
            "FUN_0800021a",
            "FUN_08000588",
            "FUN_080025ac",
            "FUN_0800a042"
        ],
        [
            "FUN_08002634"
        ],
        [
            "FUN_08000500"
        ],
        [
            "FUN_080005f8"
        ],
        [
            "FUN_08000a64",
            "FUN_08000aec"
        ],
        [
            "FUN_08001b48",
            "FUN_08001cd0"
        ],
        [
            "FUN_08008f1c"
        ]
    ],
    "locked_functions": []
}