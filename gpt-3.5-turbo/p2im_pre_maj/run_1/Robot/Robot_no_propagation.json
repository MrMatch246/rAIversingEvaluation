{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateValues_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_08009e68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000158": {
            "entrypoint": "0x08000158",
            "current_name": "calculate_sum_08000158",
            "code": "\nulonglong calculateSum_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftedInput1;\n  byte carry1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shiftedInput2;\n  uint remainder;\n  uint temp6;\n  uint result1;\n  uint result2;\n  bool isZero1;\n  bool isZero2;\n  bool isNegative;\n  \n  temp4 = input4 ^ 0x80000000;\n  remainder = input2 << 1;\n  input4 = input4 << 1;\n  isZero1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  isZero2 = isZero1 && input1 == input3;\n  if (!isZero1 || input1 != input3) {\n    isZero2 = (remainder | input1) == 0;\n  }\n  if (!isZero2) {\n    isZero2 = (input4 | input3) == 0;\n  }\n  shiftedInput2 = (int)remainder >> 0x15;\n  if (!isZero2) {\n    isZero2 = shiftedInput2 == -1;\n  }\n  shiftedInput1 = (int)input4 >> 0x15;\n  if (!isZero2) {\n    isZero2 = shiftedInput1 == -1;\n  }\n  if (isZero2) {\n    if (shiftedInput2 == -1 || shiftedInput1 == -1) {\n      remainder = temp4;\n      result1 = input3;\n      if (shiftedInput2 == -1) {\n        remainder = input2;\n        result1 = input1;\n      }\n      if (shiftedInput2 != -1 || shiftedInput1 != -1) {\n        input3 = result1;\n        temp4 = remainder;\n      }\n      isZero2 = (result1 | remainder << 0xc) == 0;\n      if (isZero2) {\n        isZero2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (isZero2) {\n        isZero2 = remainder == temp4;\n      }\n      if (!isZero2) {\n        remainder = remainder | 0x80000;\n      }\n      return CONCAT44(remainder,result1);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((remainder | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (remainder >> 0x15 == 0) {\n      isZero2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)isZero2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isZero2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (remainder < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  remainder = remainder >> 0x15;\n  input4 = input4 >> 0x15;\n  result1 = input4 - remainder;\n  isZero2 = result1 != 0;\n  if (input4 < remainder) {\n    result1 = -result1;\n  }\n  temp6 = input1;\n  temp5 = input2;\n  if (isZero2 && remainder <= input4) {\n    remainder = remainder + result1;\n    temp6 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result1) {\n    return CONCAT44(temp5,temp6);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    isZero2 = temp6 != 0;\n    temp6 = -temp6;\n    temp2 = -temp2 - (uint)isZero2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    isZero2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)isZero2;\n  }\n  if (remainder == result1) {\n    temp5 = temp5 ^ 0x100000;\n    if (remainder == 0) {\n      temp2 = temp2 ^ 0x100000;\n      remainder = 1;\n    }\n    else {\n      result1 = result1 - 1;\n    }\n  }\n  temp4 = -result1 + 0x20;\n  if ((int)result1 < 0x21) {\n    result2 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result1 & 0xff);\n    temp1 = temp6 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp6,input3) + ((int)temp5 >> (result1 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result2 = temp5 << (-result1 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result2 = result2 | 2;\n    }\n    temp5 = (int)temp5 >> (result1 - 0x20 & 0xff);\n    temp4 = temp6 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp6,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result1 = temp2;\n  if ((int)temp2 < 0) {\n    isZero2 = result2 == 0;\n    result2 = -result2;\n    result1 = -temp4;\n    temp4 = -(uint)!isZero2 - temp4;\n    result1 = -(uint)(isZero2 <= result1) - temp2;\n  }\n  if (0xfffff < result1) {\n    temp6 = remainder - 1;\n    if (0x1fffff < result1) {\n      temp6 = result1 & 1;\n      result1 = result1 >> 1;\n      carry1 = (byte)temp4;\n      temp4 = (uint)(temp6 != 0) << 0x1f | temp4 >> 1;\n      result2 = (uint)(carry1 & 1) << 0x1f | result2 >> 1;\n      temp6 = remainder;\n      if (0xffbfffff < remainder * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    isZero2 = 0x7fffffff < result2;\n    if (result2 == 0x80000000) {\n      isZero2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result1 + temp6 * 0x100000 + (uint)CARRY4(temp4,(uint)isZero2) | input2,\n                    temp4 + isZero2);\n  }\n  isZero1 = (result2 & 0x80000000) != 0;\n  result2 = result2 << 1;\n  temp6 = temp4 * 2;\n  isZero2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)isZero1;\n  result1 = result1 * 2 + (uint)(isZero2 || CARRY4(temp6,(uint)isZero1));\n  temp6 = remainder - 2;\n  if ((result1 & 0x100000) != 0) goto LAB_08000268;\n  temp5 = temp4;\n  remainder = result1;\n  if (result1 == 0) {\n    temp5 = 0;\n    remainder = temp4;\n  }\n  shiftedInput2 = LZCOUNT(remainder);\n  if (result1 == 0) {\n    shiftedInput2 = shiftedInput2 + 0x20;\n  }\n  result1 = shiftedInput2 - 0xb;\n  isNegative = SBORROW4(result1,0x20);\n  temp4 = shiftedInput2 - 0x2b;\n  isZero2 = (int)temp4 < 0;\n  isZero1 = temp4 == 0;\n  if ((int)result1 < 0x20) {\n    isNegative = SCARRY4(temp4,0xc);\n    shiftedInput2 = shiftedInput2 + -0x1f;\n    isZero2 = shiftedInput2 < 0;\n    isZero1 = shiftedInput2 == 0;\n    temp4 = result1;\n    if (!isZero1 && isZero2 == isNegative) {\n      temp5 = remainder << (result1 & 0xff);\n      remainder = remainder >> (0xcU - shiftedInput2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero1 || isZero2 != isNegative) {\n    result2 = 0x20 - temp4;\n  }\n  remainder = remainder << (temp4 & 0xff);\n  if (isZero1 || isZero2 != isNegative) {\n    remainder = remainder | temp5 >> (result2 & 0xff);\n  }\n  if (isZero1 || isZero2 != isNegative) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result1 <= (int)temp6) {\n    return CONCAT44(remainder + (temp6 - result1) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp6 - result1);\n  if ((int)temp4 < 0x1f) {\n    shiftedInput2 = temp4 - 0x13;\n    if (shiftedInput2 != 0 && shiftedInput2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shiftedInput2) & 0xff) | remainder << (0xcU - shiftedInput2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | remainder >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | remainder << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,remainder >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000158": "calculate_sum_08000158",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shiftedInput2",
                "uVar9": "remainder",
                "uVar10": "temp6",
                "uVar11": "result1",
                "uVar12": "result2",
                "bVar13": "isZero1",
                "bVar14": "isZero2",
                "bVar15": "isNegative"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800015c": {
            "entrypoint": "0x0800015c",
            "current_name": "calculate_bitwise_operations_0800015c",
            "code": "\nulonglong calculateBitwiseOperations_0800015c(uint firstInput,uint secondInput,uint thirdInput,uint fourthInput)\n\n{\n  int firstVariable;\n  byte byteVariable;\n  uint firstUint;\n  uint secondUint;\n  uint thirdUint;\n  int secondVariable;\n  uint shiftedSecondInput;\n  uint result;\n  uint shiftedFourthInput;\n  uint difference;\n  uint tempResult;\n  uint tempVariable;\n  bool boolVariable1;\n  bool boolVariable2;\n  bool boolVariable3;\n  \n  shiftedSecondInput = secondInput << 1;\n  shiftedFourthInput = fourthInput << 1;\n  boolVariable1 = ((secondInput ^ fourthInput) & 0x7fffffff) == 0;\n  boolVariable2 = boolVariable1 && firstInput == thirdInput;\n  if (!boolVariable1 || firstInput != thirdInput) {\n    boolVariable2 = (shiftedSecondInput | firstInput) == 0;\n  }\n  if (!boolVariable2) {\n    boolVariable2 = (shiftedFourthInput | thirdInput) == 0;\n  }\n  secondVariable = (int)shiftedSecondInput >> 0x15;\n  if (!boolVariable2) {\n    boolVariable2 = secondVariable == -1;\n  }\n  firstVariable = (int)shiftedFourthInput >> 0x15;\n  if (!boolVariable2) {\n    boolVariable2 = firstVariable == -1;\n  }\n  if (boolVariable2) {\n    if (secondVariable == -1 || firstVariable == -1) {\n      shiftedFourthInput = fourthInput;\n      shiftedSecondInput = thirdInput;\n      if (secondVariable == -1) {\n        shiftedFourthInput = secondInput;\n        shiftedSecondInput = firstInput;\n      }\n      if (secondVariable != -1 || firstVariable != -1) {\n        thirdInput = shiftedSecondInput;\n        fourthInput = shiftedFourthInput;\n      }\n      boolVariable2 = (shiftedSecondInput | shiftedFourthInput << 0xc) == 0;\n      if (boolVariable2) {\n        boolVariable2 = (thirdInput | fourthInput << 0xc) == 0;\n      }\n      if (boolVariable2) {\n        boolVariable2 = shiftedFourthInput == fourthInput;\n      }\n      if (!boolVariable2) {\n        shiftedFourthInput = shiftedFourthInput | 0x80000;\n      }\n      return CONCAT44(shiftedFourthInput,shiftedSecondInput);\n    }\n    if (((secondInput ^ fourthInput) & 0x7fffffff) != 0 || firstInput != thirdInput) {\n      if ((shiftedSecondInput | firstInput) == 0) {\n        firstInput = thirdInput;\n        secondInput = fourthInput;\n      }\n      return CONCAT44(secondInput,firstInput);\n    }\n    if (secondInput != fourthInput) {\n      return 0;\n    }\n    if (shiftedSecondInput >> 0x15 == 0) {\n      boolVariable2 = (firstInput & 0x80000000) != 0;\n      shiftedFourthInput = secondInput * 2 + (uint)boolVariable2;\n      if (CARRY4(secondInput,secondInput) || CARRY4(secondInput * 2,(uint)boolVariable2)) {\n        shiftedFourthInput = shiftedFourthInput | 0x80000000;\n      }\n      return CONCAT44(shiftedFourthInput,firstInput << 1);\n    }\n    if (shiftedSecondInput < 0xffc00000) {\n      return CONCAT44(secondInput + 0x100000,firstInput);\n    }\n    secondInput = secondInput & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(secondInput | 0x7ff00000) << 0x20;\n  }\n  shiftedSecondInput = shiftedSecondInput >> 0x15;\n  shiftedFourthInput = shiftedFourthInput >> 0x15;\n  difference = shiftedFourthInput - shiftedSecondInput;\n  boolVariable2 = difference != 0;\n  if (shiftedFourthInput < shiftedSecondInput) {\n    difference = -difference;\n  }\n  result = firstInput;\n  thirdUint = secondInput;\n  if (boolVariable2 && shiftedSecondInput <= shiftedFourthInput) {\n    shiftedSecondInput = shiftedSecondInput + difference;\n    result = thirdInput;\n    thirdUint = fourthInput;\n    thirdInput = firstInput;\n    fourthInput = secondInput;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(thirdUint,result);\n  }\n  shiftedFourthInput = thirdUint & 0xfffff | 0x100000;\n  if ((thirdUint & 0x80000000) != 0) {\n    boolVariable2 = result != 0;\n    result = -result;\n    shiftedFourthInput = -shiftedFourthInput - (uint)boolVariable2;\n  }\n  thirdUint = fourthInput & 0xfffff | 0x100000;\n  if ((fourthInput & 0x80000000) != 0) {\n    boolVariable2 = thirdInput != 0;\n    thirdInput = -thirdInput;\n    thirdUint = -thirdUint - (uint)boolVariable2;\n  }\n  if (shiftedSecondInput == difference) {\n    thirdUint = thirdUint ^ 0x100000;\n    if (shiftedSecondInput == 0) {\n      shiftedFourthInput = shiftedFourthInput ^ 0x100000;\n      shiftedSecondInput = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  tempVariable = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    tempResult = thirdInput << (tempVariable & 0xff);\n    thirdInput = thirdInput >> (difference & 0xff);\n    firstUint = result + thirdInput;\n    secondUint = thirdUint << (tempVariable & 0xff);\n    tempVariable = firstUint + secondUint;\n    shiftedFourthInput = shiftedFourthInput + CARRY4(result,thirdInput) + ((int)thirdUint >> (difference & 0xff)) +\n            (uint)CARRY4(firstUint,secondUint);\n  }\n  else {\n    tempResult = thirdUint << (-difference + 0x40 & 0xff);\n    if (thirdInput != 0) {\n      tempResult = tempResult | 2;\n    }\n    thirdUint = (int)thirdUint >> (difference - 0x20 & 0xff);\n    tempVariable = result + thirdUint;\n    shiftedFourthInput = shiftedFourthInput + ((int)thirdUint >> 0x1f) + (uint)CARRY4(result,thirdUint);\n  }\n  secondInput = shiftedFourthInput & 0x80000000;\n  difference = shiftedFourthInput;\n  if ((int)shiftedFourthInput < 0) {\n    boolVariable2 = tempResult == 0;\n    tempResult = -tempResult;\n    difference = -tempVariable;\n    tempVariable = -(uint)!boolVariable2 - tempVariable;\n    difference = -(uint)(boolVariable2 <= difference) - shiftedFourthInput;\n  }\n  if (0xfffff < difference) {\n    result = shiftedSecondInput - 1;\n    if (0x1fffff < difference) {\n      shiftedFourthInput = difference & 1;\n      difference = difference >> 1;\n      byteVariable = (byte)tempVariable;\n      tempVariable = (uint)(shiftedFourthInput != 0) << 0x1f | tempVariable >> 1;\n      tempResult = (uint)(byteVariable & 1) << 0x1f | tempResult >> 1;\n      result = shiftedSecondInput;\n      if (0xffbfffff < shiftedSecondInput * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    boolVariable2 = 0x7fffffff < tempResult;\n    if (tempResult == 0x80000000) {\n      boolVariable2 = (tempVariable & 1) != 0;\n    }\n    return CONCAT44(difference + result * 0x100000 + (uint)CARRY4(tempVariable,(uint)boolVariable2) | secondInput,\n                    tempVariable + boolVariable2);\n  }\n  boolVariable1 = (tempResult & 0x80000000) != 0;\n  tempResult = tempResult << 1;\n  result = tempVariable * 2;\n  boolVariable2 = CARRY4(tempVariable,tempVariable);\n  tempVariable = tempVariable * 2 + (uint)boolVariable1;\n  difference = difference * 2 + (uint)(boolVariable2 || CARRY4(result,(uint)boolVariable1));\n  result = shiftedSecondInput - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  thirdUint = tempVariable;\n  shiftedSecondInput = difference;\n  if (difference == 0) {\n    thirdUint = 0;\n    shiftedSecondInput = tempVariable;\n  }\n  secondVariable = LZCOUNT(shiftedSecondInput);\n  if (difference == 0) {\n    secondVariable = secondVariable + 0x20;\n  }\n  tempVariable = secondVariable - 0xb;\n  boolVariable3 = SBORROW4(tempVariable,0x20);\n  difference = secondVariable - 0x2b;\n  boolVariable2 = (int)difference < 0;\n  boolVariable1 = difference == 0;\n  if ((int)tempVariable < 0x20) {\n    boolVariable3 = SCARRY4(difference,0xc);\n    secondVariable = secondVariable + -0x1f;\n    boolVariable2 = secondVariable < 0;\n    boolVariable1 = secondVariable == 0;\n    difference = tempVariable;\n    if (!boolVariable1 && boolVariable2 == boolVariable3) {\n      thirdUint = shiftedSecondInput << (tempVariable & 0xff);\n      shiftedSecondInput = shiftedSecondInput >> (0xcU - secondVariable & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (boolVariable1 || boolVariable2 != boolVariable3) {\n    tempResult = 0x20 - difference;\n  }\n  shiftedSecondInput = shiftedSecondInput << (difference & 0xff);\n  if (boolVariable1 || boolVariable2 != boolVariable3) {\n    shiftedSecondInput = shiftedSecondInput | thirdUint >> (tempResult & 0xff);\n  }\n  if (boolVariable1 || boolVariable2 != boolVariable3) {\n    thirdUint = thirdUint << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)tempVariable <= (int)result) {\n    return CONCAT44(shiftedSecondInput + (result - tempVariable) * 0x100000 | secondInput,thirdUint);\n  }\n  difference = ~(result - tempVariable);\n  if ((int)difference < 0x1f) {\n    secondVariable = difference - 0x13;\n    if (secondVariable != 0 && secondVariable < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shiftedFourthInput,thirdUint >> (0x20 - (0xcU - secondVariable) & 0xff) | shiftedSecondInput << (0xcU - secondVariable & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(secondInput | shiftedSecondInput >> (difference & 0xff),\n                    thirdUint >> (difference & 0xff) | shiftedSecondInput << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shiftedFourthInput,shiftedSecondInput >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800015c": "calculate_bitwise_operations_0800015c",
                "param_1": "firstInput",
                "param_2": "secondInput",
                "param_3": "thirdInput",
                "param_4": "fourthInput",
                "iVar1": "firstVariable",
                "bVar2": "byteVariable",
                "uVar3": "firstUint",
                "uVar4": "secondUint",
                "uVar5": "thirdUint",
                "iVar6": "secondVariable",
                "uVar7": "shiftedSecondInput",
                "uVar8": "result",
                "uVar9": "shiftedFourthInput",
                "uVar10": "difference",
                "uVar11": "tempResult",
                "uVar12": "tempVariable",
                "bVar13": "boolVariable1",
                "bVar14": "boolVariable2",
                "bVar15": "boolVariable3"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003d4": {
            "entrypoint": "0x080003d4",
            "current_name": "reverse_with_data_processing_080003d4",
            "code": "\nulonglong reverseWithDataProcessing_080003d4(uint input)\n\n{\n  uint result;\n  uint shiftAmount;\n  int leadingZeros;\n  uint combinedValue;\n  uint mask;\n  bool isLowerBound;\n  bool isEqual;\n  bool isUpperBound;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  leadingZeros = LZCOUNT(input);\n  combinedValue = leadingZeros + 0x15;\n  isUpperBound = SBORROW4(combinedValue,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isLowerBound = (int)shiftAmount < 0;\n  isEqual = shiftAmount == 0;\n  if (combinedValue < 0x20) {\n    isUpperBound = SCARRY4(shiftAmount,0xc);\n    isLowerBound = false;\n    isEqual = leadingZeros + 1 == 0;\n    shiftAmount = combinedValue;\n    if (!isEqual && isUpperBound == false) {\n      result = input << combinedValue;\n      input = input >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isEqual || isLowerBound != isUpperBound) {\n    mask = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isEqual || isLowerBound != isUpperBound) {\n    input = input | 0U >> (mask & 0xff);\n  }\n  if (isEqual || isLowerBound != isUpperBound) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (combinedValue < 0x433) {\n    return CONCAT44(input + (0x432 - combinedValue) * 0x100000,result);\n  }\n  shiftAmount = ~(0x432 - combinedValue);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - leadingZeros) & 0xff) | input << (0xcU - leadingZeros & 0xff));\n}\n\n",
            "renaming": {
                "FUN_080003d4": "reverse_with_data_processing_080003d4",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "leadingZeros",
                "uVar4": "combinedValue",
                "in_r12": "mask",
                "bVar5": "isLowerBound",
                "bVar6": "isEqual",
                "bVar7": "isUpperBound"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003f4": {
            "entrypoint": "0x080003f4",
            "current_name": "reverse_bits_080003f4",
            "code": "\nulonglong reverseBits_080003f4(uint input)\n\n{\n  uint bitOnesCount;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedAmount;\n  uint signBit;\n  uint complementMask;\n  bool isNegative;\n  bool isZero;\n  bool carryFlag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  bitOnesCount = 0;\n  leadingZeros = LZCOUNT(absInput);\n  shiftedAmount = leadingZeros + 0x15;\n  carryFlag = SBORROW4(shiftedAmount,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedAmount < 0x20) {\n    carryFlag = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedAmount;\n    if (!isZero && carryFlag == false) {\n      bitOnesCount = absInput << shiftedAmount;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (isZero || isNegative != carryFlag) {\n    complementMask = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != carryFlag) {\n    absInput = absInput | 0U >> (complementMask & 0xff);\n  }\n  if (isZero || isNegative != carryFlag) {\n    bitOnesCount = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002e0:\n  if (shiftedAmount < 0x433) {\n    return CONCAT44(absInput + (0x432 - shiftedAmount) * 0x100000 | signBit,bitOnesCount);\n  }\n  shiftAmount = ~(0x432 - shiftedAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    bitOnesCount >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,bitOnesCount >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080003f4": "reverse_bits_080003f4",
                "param_1": "input",
                "uVar1": "bitOnesCount",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedAmount",
                "uVar6": "signBit",
                "in_r12": "complementMask",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "carryFlag"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000418": {
            "entrypoint": "0x08000418",
            "current_name": "bitwise_shift_and_mask_08000418",
            "code": "\nulonglong bitwiseShiftAndMask_08000418(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint bitShifted;\n  uint temp1;\n  uint shiftedAndMasked;\n  uint shifted;\n  uint doubledInput;\n  int count;\n  uint shift;\n  uint constant;\n  bool lessThanZero1;\n  bool equalZero1;\n  bool lessThanZero2;\n  \n  doubledInput = input << 1;\n  equalZero1 = doubledInput == 0;\n  bitShifted = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted = (uint)((int)doubledInput >> 3) >> 1;\n  shiftedAndMasked = bitShifted | shifted;\n  input = input << 0x1d;\n  if (!equalZero1) {\n    param4 = doubledInput & 0xff000000;\n    equalZero1 = param4 == 0;\n  }\n  if (!equalZero1) {\n    equalZero1 = param4 == 0xff000000;\n  }\n  if (!equalZero1) {\n    return CONCAT44(shiftedAndMasked,input) ^ 0x3800000000000000;\n  }\n  if ((doubledInput & 0xffffff) == 0) {\n    return CONCAT44(shiftedAndMasked,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(shiftedAndMasked,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  doubledInput = shifted;\n  if (shifted == 0) {\n    temp1 = 0;\n    doubledInput = input;\n  }\n  count = LZCOUNT(doubledInput);\n  if (shifted == 0) {\n    count = count + 0x20;\n  }\n  shift = count - 0xb;\n  lessThanZero2 = SBORROW4(shift,0x20);\n  shifted = count - 0x2b;\n  equalZero1 = (int)shifted < 0;\n  lessThanZero1 = shifted == 0;\n  if ((int)shift < 0x20) {\n    lessThanZero2 = SCARRY4(shifted,0xc);\n    count = count + -0x1f;\n    equalZero1 = count < 0;\n    lessThanZero1 = count == 0;\n    shifted = shift;\n    if (!lessThanZero1 && equalZero1 == lessThanZero2) {\n      temp1 = doubledInput << (shift & 0xff);\n      doubledInput = doubledInput >> (0xcU - count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (lessThanZero1 || equalZero1 != lessThanZero2) {\n    constant = 0x20 - shifted;\n  }\n  doubledInput = doubledInput << (shifted & 0xff);\n  if (lessThanZero1 || equalZero1 != lessThanZero2) {\n    doubledInput = doubledInput | temp1 >> (constant & 0xff);\n  }\n  if (lessThanZero1 || equalZero1 != lessThanZero2) {\n    temp1 = temp1 << (shifted & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift < 0x381) {\n    return CONCAT44(doubledInput + (0x380 - shift) * 0x100000 | bitShifted,temp1);\n  }\n  shifted = ~(0x380 - shift);\n  if (0x1e < (int)shifted) {\n    return CONCAT44(shiftedAndMasked,doubledInput >> (shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shifted - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shifted - 0x1f,0xc)) {\n    shifted = shifted + 1;\n    return CONCAT44(bitShifted | doubledInput >> (shifted & 0xff),\n                    temp1 >> (shifted & 0xff) | doubledInput << (0x20 - shifted & 0xff));\n  }\n  return CONCAT44(shiftedAndMasked,temp1 >> (0x20 - (0xcU - count) & 0xff) | doubledInput << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000418": "bitwise_shift_and_mask_08000418",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bitShifted",
                "uVar2": "temp1",
                "uVar3": "shiftedAndMasked",
                "uVar4": "shifted",
                "uVar5": "doubledInput",
                "iVar6": "count",
                "uVar7": "shift",
                "in_r12": "constant",
                "bVar8": "lessThanZero1",
                "bVar9": "equalZero1",
                "bVar10": "lessThanZero2"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004c8": {
            "entrypoint": "0x080004c8",
            "current_name": "calculate_product_080004c8",
            "code": "\nulonglong calculate_product_080004c8(undefined4 param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  ulonglong product_low;\n  longlong temp;\n  uint product_high;\n  uint b_high;\n  int sum_high;\n  uint diff_high;\n  uint d_high;\n  uint carry;\n  uint result_high;\n  bool is_zero;\n  bool is_negative;\n  bool is_borrow;\n  ulonglong combined_ab;\n  \n  combined_ab = CONCAT44(param_2,param_1);\n  carry = 0x7ff;\n  b_high = param_2 >> 0x14 & 0x7ff;\n  is_zero = b_high == 0;\n  if (!is_zero) {\n    d_high = param_4 >> 0x14 & 0x7ff;\n    is_zero = d_high == 0;\n  }\n  if (!is_zero) {\n    is_zero = b_high == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = d_high == 0x7ff;\n  }\n  if (is_zero) {\n    combined_ab = FUN_080006a4();\n  }\n  product_high = (uint)(combined_ab >> 0x20);\n  sum_high = b_high + d_high;\n  b_high = product_high ^ param_4;\n  product_high = product_high & ~(carry << 0x15);\n  param_4 = param_4 & ~(carry << 0x15);\n  is_zero = ((uint)combined_ab | product_high << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (param_3 | param_4 << 0xc) == 0;\n  }\n  product_high = product_high | 0x100000;\n  param_4 = param_4 | 0x100000;\n  if (is_zero) {\n    param_3 = (uint)combined_ab | param_3;\n    param_4 = (b_high & 0x80000000 | product_high) ^ param_4;\n    b_high = carry >> 1;\n    is_borrow = SBORROW4(sum_high,b_high);\n    diff_high = sum_high - b_high;\n    is_zero = diff_high == 0;\n    product_high = diff_high;\n    if (!is_zero && (int)b_high <= sum_high) {\n      is_borrow = SBORROW4(carry,diff_high);\n      product_high = carry - diff_high;\n      is_zero = carry == diff_high;\n    }\n    if (!is_zero && (int)product_high < 0 == is_borrow) {\n      param_4 = param_4 | diff_high * 0x100000;\n    }\n    if (!is_zero && (int)product_high < 0 == is_borrow) {\n      return CONCAT44(param_4,param_3);\n    }\n    param_4 = param_4 | 0x100000;\n    carry = 0;\n    is_borrow = SBORROW4(diff_high,1);\n    diff_high = diff_high - 1;\n    is_zero = diff_high == 0;\n    b_high = diff_high;\n  }\n  else {\n    product_low = (combined_ab & 0xffffffff) * (ulonglong)param_3;\n    combined_ab = (combined_ab & 0xffffffff) * (ulonglong)param_4 +\n             (ulonglong)product_high * (ulonglong)param_3 + (product_low >> 0x20);\n    result_high = (uint)combined_ab;\n    temp = (ulonglong)product_high * (ulonglong)param_4 + (combined_ab >> 0x20);\n    carry = (uint)temp;\n    product_high = (uint)((ulonglong)temp >> 0x20);\n    if ((int)product_low != 0) {\n      result_high = result_high | 1;\n    }\n    diff_high = (sum_high + -0x3ff) - (uint)(product_high < 0x200);\n    if (product_high < 0x200) {\n      is_zero = (result_high & 0x80000000) != 0;\n      result_high = result_high << 1;\n      temp = CONCAT44(product_high * 2 + (uint)(CARRY4(carry,carry) || CARRY4(carry * 2,(uint)is_zero)),\n                       carry * 2 + (uint)is_zero);\n    }\n    param_4 = b_high & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    param_3 = (uint)temp << 0xb | result_high >> 0x15;\n    carry = result_high * 0x800;\n    is_negative = 0xfc < diff_high;\n    is_borrow = SBORROW4(diff_high,0xfd);\n    product_high = diff_high - 0xfd;\n    is_zero = product_high == 0;\n    b_high = product_high;\n    if (is_negative && !is_zero) {\n      is_negative = 0x6ff < product_high;\n      is_borrow = SBORROW4(product_high,0x700);\n      b_high = diff_high - 0x7fd;\n      is_zero = product_high == 0x700;\n    }\n    if (!is_negative || is_zero) {\n      is_zero = 0x7fffffff < carry;\n      if (carry == 0x80000000) {\n        is_zero = (result_high >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param_4 + diff_high * 0x100000 + (uint)CARRY4(param_3,(uint)is_zero),param_3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)b_high < 0 == is_borrow) {\n    return (ulonglong)(param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_negative = SCARRY4(diff_high,0x36);\n  is_zero = (int)(diff_high + 0x36) < 0;\n  is_borrow = diff_high == 0xffffffca;\n  if (is_borrow || is_zero != is_negative) {\n    param_3 = 0;\n  }\n  if (is_borrow || is_zero != is_negative) {\n    param_4 = param_4 & 0x80000000;\n  }\n  if (is_borrow || is_zero != is_negative) {\n    return CONCAT44(param_4,param_3);\n  }\n  b_high = -diff_high;\n  product_high = b_high - 0x20;\n  if (0x1f < (int)b_high) {\n    diff_high = param_3 >> (product_high & 0xff) | param_4 << (0x20 - product_high & 0xff);\n    b_high = (param_4 >> (product_high & 0xff) & ~((param_4 & 0x80000000) >> (product_high & 0xff))) -\n            ((int)diff_high >> 0x1f);\n    if ((carry | param_3 << (0x20 - product_high & 0xff) | diff_high << 1) == 0) {\n      b_high = b_high & ~(diff_high >> 0x1f);\n    }\n    return CONCAT44(param_4,b_high) & 0x80000000ffffffff;\n  }\n  sum_high = b_high - 0x14;\n  if (sum_high == 0 || sum_high < 0 != SCARRY4(product_high,0xc)) {\n    result_high = param_3 << (diff_high + 0x20 & 0xff);\n    product_high = param_3 >> (b_high & 0xff) | param_4 << (diff_high + 0x20 & 0xff);\n    diff_high = product_high + -((int)result_high >> 0x1f);\n    if ((carry | result_high << 1) == 0) {\n      diff_high = diff_high & ~(result_high >> 0x1f);\n    }\n    return CONCAT44((param_4 & 0x80000000) +\n                    ((param_4 & 0x7fffffff) >> (b_high & 0xff)) +\n                    (uint)CARRY4(product_high,-((int)result_high >> 0x1f)),diff_high);\n  }\n  b_high = 0xc - sum_high;\n  diff_high = param_3 << (b_high & 0xff);\n  b_high = param_3 >> (0x20 - b_high & 0xff) | param_4 << (b_high & 0xff);\n  product_high = b_high + -((int)diff_high >> 0x1f);\n  if ((carry | diff_high << 1) == 0) {\n    product_high = product_high & ~(diff_high >> 0x1f);\n  }\n  return CONCAT44((param_4 & 0x80000000) + (uint)CARRY4(b_high,-((int)diff_high >> 0x1f)),product_high);\n}\n\n",
            "renaming": {
                "FUN_080004c8": "calculate_product_080004c8",
                "uVar1": "product_low",
                "lVar2": "temp",
                "uVar3": "product_high",
                "uVar4": "b_high",
                "iVar5": "sum_high",
                "uVar6": "diff_high",
                "unaff_r5": "d_high",
                "uVar7": "carry",
                "uVar8": "result_high",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "bVar11": "is_borrow",
                "uVar12": "combined_ab"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_080059f0",
                "FUN_080096e0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_080006a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006a4": {
            "entrypoint": "0x080006a4",
            "current_name": "calculate_bitwise_xor_080006a4",
            "code": "\nulonglong calculate_bitwise_xor_080006a4(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & num4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    isZero = (num1 | num2 << 1) == 0;\n    if (!isZero) {\n      isZero = (num3 | num4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = num2 & 0x80000000;\n      do {\n        bit1 = num1 & 0x80000000;\n        num1 = num1 << 1;\n        num2 = num2 * 2 + (uint)(bit1 != 0);\n      } while ((num2 & 0x100000) == 0);\n      num2 = num2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(num2,num1);\n      }\n    }\n    do {\n      bit3 = num3 & 0x80000000;\n      num3 = num3 << 1;\n      num4 = num4 * 2 + (uint)(bit3 != 0);\n    } while ((num4 & 0x100000) == 0);\n    return CONCAT44(num2,num1);\n  }\n  isZero = (num1 | num2 << 1) == 0;\n  if (isZero) {\n    num2 = num4;\n    num1 = num3;\n  }\n  if (!isZero) {\n    isZero = (num3 | num4 << 1) == 0;\n  }\n  bit4 = num2;\n  if (((!isZero) && ((bit2 != bit5 || ((num1 | num2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (num1 = num3, bit4 = num4, (num3 | num4 << 0xc) == 0)))) {\n    return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,num1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006a4": "calculate_bitwise_xor_080006a4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_080004c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800071c": {
            "entrypoint": "0x0800071c",
            "current_name": "calculate_floating_point_0800071c",
            "code": "\nulonglong calculateFloatingPoint_0800071c(undefined4 inputParam1,uint inputParam2,uint inputParam3,uint inputParam4)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  int tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  uint tempVar11;\n  uint tempVar12;\n  uint tempVar13;\n  uint tempVar14;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  undefined8 combinedVars;\n  \n  combinedVars = CONCAT44(inputParam2,inputParam1);\n  tempVar14 = 0x7ff;\n  tempVar7 = inputParam2 >> 0x14 & 0x7ff;\n  boolVar1 = tempVar7 == 0;\n  if (!boolVar1) {\n    tempVar10 = inputParam4 >> 0x14 & 0x7ff;\n    boolVar1 = tempVar10 == 0;\n  }\n  if (!boolVar1) {\n    boolVar1 = tempVar7 == 0x7ff;\n  }\n  if (!boolVar1) {\n    boolVar1 = tempVar10 == 0x7ff;\n  }\n  if (boolVar1) {\n    combinedVars = FUN_0800088a();\n  }\n  tempVar9 = (uint)((ulonglong)combinedVars >> 0x20);\n  tempVar12 = (uint)combinedVars;\n  tempVar8 = tempVar7 - tempVar10;\n  if ((inputParam3 | inputParam4 << 0xc) == 0) {\n    tempVar7 = (tempVar9 ^ inputParam4) & 0x80000000 | tempVar9 & 0xfffff;\n    boolVar3 = SCARRY4(tempVar8,tempVar14 >> 1);\n    tempVar9 = tempVar8 + (tempVar14 >> 1);\n    boolVar1 = (int)tempVar9 < 0;\n    boolVar2 = tempVar9 == 0;\n    if (!boolVar2 && boolVar1 == boolVar3) {\n      boolVar3 = SBORROW4(tempVar14,tempVar9);\n      boolVar1 = (int)(tempVar14 - tempVar9) < 0;\n      boolVar2 = tempVar14 == tempVar9;\n    }\n    if (!boolVar2 && boolVar1 == boolVar3) {\n      tempVar7 = tempVar7 | tempVar9 * 0x100000;\n    }\n    if (!boolVar2 && boolVar1 == boolVar3) {\n      return CONCAT44(tempVar7,tempVar12);\n    }\n    tempVar7 = tempVar7 | 0x100000;\n    tempVar14 = 0;\n    boolVar2 = SBORROW4(tempVar9,1);\n    tempVar9 = tempVar9 - 1;\n    boolVar1 = tempVar9 == 0;\n    tempVar3 = tempVar9;\n  }\n  else {\n    tempVar3 = (inputParam4 << 0xc) >> 4 | 0x10000000 | inputParam3 >> 0x18;\n    tempVar14 = inputParam3 << 8;\n    tempVar11 = (tempVar9 << 0xc) >> 4 | 0x10000000 | tempVar12 >> 0x18;\n    tempVar12 = tempVar12 * 0x100;\n    tempVar7 = (tempVar9 ^ inputParam4) & 0x80000000;\n    boolVar1 = tempVar3 <= tempVar11;\n    if (tempVar11 == tempVar3) {\n      boolVar1 = tempVar14 <= tempVar12;\n    }\n    tempVar8 = tempVar8 + (uint)boolVar1;\n    tempVar9 = tempVar8 + 0x3fd;\n    if (boolVar1 == false) {\n      tempVar3 = tempVar3 >> 1;\n      tempVar14 = (uint)((inputParam3 >> 0x18 & 1) != 0) << 0x1f | tempVar14 >> 1;\n    }\n    tempVar13 = tempVar12 - tempVar14;\n    tempVar11 = (tempVar11 - tempVar3) - (uint)(tempVar12 < tempVar14);\n    tempVar4 = tempVar3 >> 1;\n    tempVar1 = (uint)((tempVar3 & 1) != 0) << 0x1f | tempVar14 >> 1;\n    tempVar12 = 0x100000;\n    tempVar3 = 0x80000;\n    while( true ) {\n      boolVar1 = tempVar1 <= tempVar13;\n      if (tempVar4 < tempVar11 || tempVar11 - tempVar4 < (uint)boolVar1) {\n        tempVar13 = tempVar13 - tempVar1;\n        tempVar12 = tempVar12 | tempVar3;\n        tempVar11 = (tempVar11 - tempVar4) - (uint)!boolVar1;\n      }\n      tempVar5 = tempVar4 >> 1;\n      tempVar1 = (uint)((tempVar4 & 1) != 0) << 0x1f | tempVar1 >> 1;\n      boolVar2 = tempVar1 <= tempVar13;\n      boolVar1 = tempVar11 - tempVar5 < (uint)boolVar2;\n      tempVar14 = tempVar11;\n      if (tempVar5 < tempVar11 || boolVar1) {\n        tempVar13 = tempVar13 - tempVar1;\n        tempVar14 = (tempVar11 - tempVar5) - (uint)!boolVar2;\n      }\n      if (tempVar5 < tempVar11 || boolVar1) {\n        tempVar12 = tempVar12 | tempVar3 >> 1;\n      }\n      tempVar11 = tempVar4 >> 2;\n      tempVar2 = (uint)((tempVar5 & 1) != 0) << 0x1f | tempVar1 >> 1;\n      boolVar2 = tempVar2 <= tempVar13;\n      boolVar1 = tempVar14 - tempVar11 < (uint)boolVar2;\n      tempVar5 = tempVar14;\n      if (tempVar11 < tempVar14 || boolVar1) {\n        tempVar13 = tempVar13 - tempVar2;\n        tempVar5 = (tempVar14 - tempVar11) - (uint)!boolVar2;\n      }\n      if (tempVar11 < tempVar14 || boolVar1) {\n        tempVar12 = tempVar12 | tempVar3 >> 2;\n      }\n      tempVar6 = tempVar4 >> 3;\n      tempVar1 = (uint)((tempVar11 & 1) != 0) << 0x1f | tempVar2 >> 1;\n      boolVar2 = tempVar1 <= tempVar13;\n      boolVar1 = tempVar5 - tempVar6 < (uint)boolVar2;\n      tempVar11 = tempVar5;\n      if (tempVar6 < tempVar5 || boolVar1) {\n        tempVar13 = tempVar13 - tempVar1;\n        tempVar11 = (tempVar5 - tempVar6) - (uint)!boolVar2;\n      }\n      if (tempVar6 < tempVar5 || boolVar1) {\n        tempVar12 = tempVar12 | tempVar3 >> 3;\n      }\n      tempVar14 = tempVar11 | tempVar13;\n      if (tempVar14 == 0) break;\n      tempVar11 = tempVar11 << 4 | tempVar13 >> 0x1c;\n      tempVar13 = tempVar13 << 4;\n      tempVar4 = tempVar4 & 0xfffffff8 | tempVar1 >> 0x1d;\n      tempVar1 = (tempVar2 >> 1) << 3;\n      tempVar3 = tempVar3 >> 4;\n      if (tempVar3 == 0) {\n        tempVar6 = tempVar4;\n        if ((tempVar7 & 0x100000) != 0) goto LAB_0800083a;\n        tempVar7 = tempVar7 | tempVar12;\n        tempVar12 = 0;\n        tempVar3 = 0x80000000;\n      }\n    }\n    if ((tempVar7 & 0x100000) == 0) {\n      tempVar7 = tempVar7 | tempVar12;\n      tempVar12 = 0;\n    }\nLAB_0800083a:\n    boolVar3 = 0xfc < tempVar9;\n    boolVar2 = SBORROW4(tempVar9,0xfd);\n    tempVar4 = tempVar8 + 0x300;\n    boolVar1 = tempVar4 == 0;\n    tempVar3 = tempVar4;\n    if (boolVar3 && !boolVar1) {\n      boolVar3 = 0x6ff < tempVar4;\n      boolVar2 = SBORROW4(tempVar4,0x700);\n      tempVar3 = tempVar8 - 0x400;\n      boolVar1 = tempVar4 == 0x700;\n    }\n    if (!boolVar3 || boolVar1) {\n      boolVar1 = tempVar6 <= tempVar11;\n      if (tempVar11 == tempVar6) {\n        boolVar1 = tempVar1 <= tempVar13;\n      }\n      if (tempVar11 == tempVar6 && tempVar13 == tempVar1) {\n        boolVar1 = (tempVar12 & 1) != 0;\n      }\n      return CONCAT44(tempVar7 + tempVar9 * 0x100000 + (uint)CARRY4(tempVar12,(uint)boolVar1),tempVar12 + boolVar1);\n    }\n  }\n  if (!boolVar1 && (int)tempVar3 < 0 == boolVar2) {\n    return (ulonglong)(tempVar7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  boolVar3 = SCARRY4(tempVar9,0x36);\n  boolVar1 = (int)(tempVar9 + 0x36) < 0;\n  boolVar2 = tempVar9 == 0xffffffca;\n  if (boolVar2 || boolVar1 != boolVar3) {\n    tempVar12 = 0;\n  }\n  if (boolVar2 || boolVar1 != boolVar3) {\n    tempVar7 = tempVar7 & 0x80000000;\n  }\n  if (boolVar2 || boolVar1 != boolVar3) {\n    return CONCAT44(tempVar7,tempVar12);\n  }\n  tempVar3 = -tempVar9;\n  tempVar11 = tempVar3 - 0x20;\n  if (0x1f < (int)tempVar3) {\n    tempVar3 = tempVar12 >> (tempVar11 & 0xff) | tempVar7 << (0x20 - tempVar11 & 0xff);\n    tempVar9 = (tempVar7 >> (tempVar11 & 0xff) & ~((tempVar7 & 0x80000000) >> (tempVar11 & 0xff))) -\n            ((int)tempVar3 >> 0x1f);\n    if ((tempVar14 | tempVar12 << (0x20 - tempVar11 & 0xff) | tempVar3 << 1) == 0) {\n      tempVar9 = tempVar9 & ~(tempVar3 >> 0x1f);\n    }\n    return CONCAT44(tempVar7,tempVar9) & 0x80000000ffffffff;\n  }\n  tempVar8 = tempVar3 - 0x14;\n  if (tempVar8 != 0 && tempVar8 < 0 == SCARRY4(tempVar11,0xc)) {\n    tempVar9 = 0xc - tempVar8;\n    tempVar3 = tempVar12 << (tempVar9 & 0xff);\n    tempVar12 = tempVar12 >> (0x20 - tempVar9 & 0xff) | tempVar7 << (tempVar9 & 0xff);\n    tempVar9 = tempVar12 + -((int)tempVar3 >> 0x1f);\n    if ((tempVar14 | tempVar3 << 1) == 0) {\n      tempVar9 = tempVar9 & ~(tempVar3 >> 0x1f);\n    }\n    return CONCAT44((tempVar7 & 0x80000000) + (uint)CARRY4(tempVar12,-((int)tempVar3 >> 0x1f)),tempVar9);\n  }\n  tempVar11 = tempVar12 << (tempVar9 + 0x20 & 0xff);\n  tempVar12 = tempVar12 >> (tempVar3 & 0xff) | tempVar7 << (tempVar9 + 0x20 & 0xff);\n  tempVar9 = tempVar12 + -((int)tempVar11 >> 0x1f);\n  if ((tempVar14 | tempVar11 << 1) == 0) {\n    tempVar9 = tempVar9 & ~(tempVar11 >> 0x1f);\n  }\n  return CONCAT44((tempVar7 & 0x80000000) +\n                  ((tempVar7 & 0x7fffffff) >> (tempVar3 & 0xff)) +\n                  (uint)CARRY4(tempVar12,-((int)tempVar11 >> 0x1f)),tempVar9);\n}\n\n",
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_0800071c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "unaff_r5": "tempVar10",
                "uVar10": "tempVar11",
                "uVar11": "tempVar12",
                "uVar12": "tempVar13",
                "uVar13": "tempVar14",
                "bVar14": "boolVar1",
                "bVar15": "boolVar2",
                "bVar16": "boolVar3",
                "uVar17": "combinedVars"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08004d78",
                "FUN_08005838",
                "FUN_080059f0",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_0800088a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800088a": {
            "entrypoint": "0x0800088a",
            "current_name": "calculate_exponent_0800088a",
            "code": "\nulonglong calculateExponent_0800088a(uint num1,uint num2,uint num3,uint num4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & num4 >> 0x14;\n  bit4 = num2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((num1 | num2 << 0xc) == 0) && (num1 = num3, bit4 = num4, bit3 != bit5)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((num2 ^ num4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      num1 = num3;\n      bit4 = num4;\n      if ((num3 | num4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((num2 ^ num4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (num1 | num2 << 1) == 0;\n      if (!isZero) {\n        isZero = (num3 | num4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = num2 & 0x80000000;\n          do {\n            bit1 = num1 & 0x80000000;\n            num1 = num1 << 1;\n            num2 = num2 * 2 + (uint)(bit1 != 0);\n          } while ((num2 & 0x100000) == 0);\n          num2 = num2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(num2,num1);\n          }\n        }\n        do {\n          bit4 = num3 & 0x80000000;\n          num3 = num3 << 1;\n          num4 = num4 * 2 + (uint)(bit4 != 0);\n        } while ((num4 & 0x100000) == 0);\n        return CONCAT44(num2,num1);\n      }\n      if ((num1 | num2 << 1) != 0) goto LAB_080006fc;\n      if ((num3 | num4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit4,num1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800088a": "calculate_exponent_0800088a",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800071c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008fc": {
            "entrypoint": "0x080008fc",
            "current_name": "check_conditions_080008fc",
            "code": "\nuint check_conditions_080008fc(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool condition_1;\n  bool condition_2;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  condition_1 = (input_1 | input_2 << 1) == 0;\n  if (condition_1) {\n    condition_1 = (input_3 | input_4 << 1) == 0;\n  }\n  if (!condition_1) {\n    condition_1 = input_2 == input_4;\n  }\n  if (condition_1) {\n    condition_1 = input_1 == input_3;\n  }\n  if (!condition_1) {\n    result = input_2 ^ input_4;\n    condition_1 = result == 0;\n    if (-1 < (int)result) {\n      condition_1 = input_2 == input_4;\n    }\n    condition_2 = -1 < (int)result && input_4 <= input_2;\n    if (condition_1) {\n      condition_2 = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!condition_2) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080008fc": "check_conditions_080008fc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "condition_1",
                "bVar3": "condition_2"
            },
            "calling": [
                "FUN_08000988"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000978": {
            "entrypoint": "0x08000978",
            "current_name": "execute_function_08000978",
            "code": "\nvoid executeFunction_08000978(undefined4 argument1,undefined4 argument2,undefined4 argument3,undefined4 argument4)\n\n{\n  FUN_08000988(argument3,argument4,argument1,argument2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000978": "execute_function_08000978",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "argument3",
                "param_4": "argument4"
            },
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000988": {
            "entrypoint": "0x08000988",
            "current_name": "execute_function_08000988",
            "code": "\nundefined4 execute_function_08000988(undefined4 input_parameter)\n\n{\n  FUN_080008fc();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08000988": "execute_function_08000988",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08000978",
                "FUN_080009c0"
            ],
            "called": [
                "FUN_080008fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "check_input_08000998",
            "code": "\nbool check_input_08000998(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000998": "check_input_08000998",
                "in_ZR": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009ac": {
            "entrypoint": "0x080009ac",
            "current_name": "check_if_string_empty_080009ac",
            "code": "\nbool check_if_string_empty_080009ac(void)\n\n{\n  char input_character;\n  \n  FUN_08000988();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009ac": "check_if_string_empty_080009ac",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c0": {
            "entrypoint": "0x080009c0",
            "current_name": "check_cy_zr_080009c0",
            "code": "\nbool check_CY_ZR_080009c0(void)\n\n{\n  undefined does_ZR_exist;\n  undefined does_CY_exist;\n  \n  FUN_08000988();\n  return !(bool)does_CY_exist || (bool)does_ZR_exist;\n}\n\n",
            "renaming": {
                "FUN_080009c0": "check_cy_zr_080009c0",
                "in_CY": "does_CY_exist",
                "in_ZR": "does_ZR_exist"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08000988"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009d4": {
            "entrypoint": "0x080009d4",
            "current_name": "check_carry_or_zero_080009d4",
            "code": "\nbool check_carry_or_zero_080009d4(void)\n\n{\n  undefined is_zero_flag;\n  undefined is_carry_flag;\n  \n  FUN_08000978();\n  return !(bool)is_carry_flag || (bool)is_zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009d4": "check_carry_or_zero_080009d4",
                "in_ZR": "is_zero_flag",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009e8": {
            "entrypoint": "0x080009e8",
            "current_name": "check_if_input_empty_080009e8",
            "code": "\nbool check_if_input_empty_080009e8(void)\n\n{\n  char user_input;\n  \n  FUN_08000978();\n  return user_input == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009e8": "check_if_input_empty_080009e8",
                "in_CY": "user_input"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8",
                "FUN_080059f0"
            ],
            "called": [
                "FUN_08000978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009fc": {
            "entrypoint": "0x080009fc",
            "current_name": "calculate_float_080009fc",
            "code": "\nuint calculateFloat_080009fc(uint value1,uint value2)\n\n{\n  uint result1;\n  uint result2;\n  uint result3;\n  uint temp1;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  result2 = value2 * 2;\n  isLessThanThreshold = result2 < 0x70000000;\n  result3 = result2 + 0x90000000;\n  result1 = result3;\n  if (!isLessThanThreshold) {\n    temp1 = result2 + 0x8fe00000;\n    result1 = temp1;\n  }\n  isZero = result1 == 0;\n  if (!isLessThanThreshold && result3 >= 0x200000) {\n    isZero = temp1 == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || result3 < 0x200000) || 0x1fc00000 < temp1) || isZero) {\n    if ((value2 & 0x40000000) != 0) {\n      if (((int)result2 >> 0x15 == -1) && ((value1 | value2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return value2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(result2 + 0x92e00000) < 0 != SCARRY4(result3,0x2e00000)) {\n      return value2 & 0x80000000;\n    }\n    result2 = 0x18 - (result2 + 0x92e00000 >> 0x15);\n    result1 = value1 >> (result2 & 0xff);\n    if (value1 << (0x20 - result2 & 0xff) != 0) {\n      result1 = result1 | 1;\n    }\n    result3 = value2 & 0x1fffff | 0x100000;\n    value1 = result1 | result3 << (0x20 - result2 & 0xff);\n    result3 = (result3 >> (result2 & 0xff)) << 1;\n  }\n  result1 = (value2 & 0x80000000 | value1 >> 0x1d) + result3 * 4 + (uint)(0x7fffffff < value1 * 8);\n  if (value1 * 8 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080009fc": "calculate_float_080009fc",
                "param_1": "value1",
                "param_2": "value2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "in_r12": "temp1",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "entrypoint": "0x08000aa4",
            "current_name": "calculate_floating_point_08000aa4",
            "code": "\nuint calculateFloatingPoint_08000aa4(uint inputA,uint inputB,undefined4 inputFlags,uint inputC)\n\n{\n  int extractedBytesA;\n  int extractedBytesB;\n  uint inputAXOR;\n  uint inputAXORbitwise;\n  uint shiftedInputA;\n  uint updatedShiftedInputA;\n  uint difference;\n  bool isEqual;\n  \n  inputAXOR = inputB ^ 0x80000000;\n  shiftedInputA = inputA << 1;\n  isEqual = shiftedInputA == 0;\n  if (!isEqual) {\n    inputC = inputB << 1;\n    isEqual = inputC == 0;\n  }\n  if (!isEqual) {\n    isEqual = shiftedInputA == inputC;\n  }\n  extractedBytesA = (int)shiftedInputA >> 0x18;\n  if (!isEqual) {\n    isEqual = extractedBytesA == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)inputC >> 0x18 == -1;\n  }\n  if (isEqual) {\n    extractedBytesB = (int)(inputB << 1) >> 0x18;\n    if (extractedBytesA == -1 || extractedBytesB == -1) {\n      shiftedInputA = inputAXOR;\n      if (extractedBytesA == -1) {\n        shiftedInputA = inputA;\n      }\n      if (extractedBytesA != -1 || extractedBytesB != -1) {\n        inputAXOR = shiftedInputA;\n      }\n      isEqual = (shiftedInputA & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (inputAXOR & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = shiftedInputA == inputAXOR;\n      }\n      if (!isEqual) {\n        shiftedInputA = shiftedInputA | 0x400000;\n      }\n      return shiftedInputA;\n    }\n    if (((inputA ^ inputAXOR) & 0x7fffffff) != 0) {\n      if (shiftedInputA == 0) {\n        inputA = inputAXOR;\n      }\n      return inputA;\n    }\n    if (inputA != inputAXOR) {\n      return 0;\n    }\n    if ((shiftedInputA & 0xff000000) == 0) {\n      inputAXOR = inputA << 1;\n      if ((inputA & 0x80000000) != 0) {\n        inputAXOR = inputAXOR | 0x80000000;\n      }\n      return inputAXOR;\n    }\n    if (shiftedInputA < 0xfe000000) {\n      return inputA + 0x800000;\n    }\n    inputA = inputA & 0x80000000;\nLAB_08000bde:\n    return inputA | 0x7f800000;\n  }\n  shiftedInputA = shiftedInputA >> 0x18;\n  inputC = inputC >> 0x18;\n  difference = inputC - shiftedInputA;\n  isEqual = difference != 0;\n  updatedShiftedInputA = shiftedInputA;\n  if (isEqual && shiftedInputA <= inputC) {\n    updatedShiftedInputA = shiftedInputA + difference;\n  }\n  if (isEqual && shiftedInputA <= inputC) {\n    inputAXOR = inputAXOR ^ inputA;\n  }\n  if (isEqual && shiftedInputA <= inputC) {\n    inputA = inputA ^ inputAXOR;\n  }\n  if (isEqual && shiftedInputA <= inputC) {\n    inputAXOR = inputAXOR ^ inputA;\n  }\n  if (inputC < shiftedInputA) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputA;\n  }\n  shiftedInputA = inputA & 0xffffff | 0x800000;\n  if ((inputA & 0x80000000) != 0) {\n    shiftedInputA = -shiftedInputA;\n  }\n  inputAXORbitwise = inputAXOR & 0xffffff | 0x800000;\n  if ((inputAXOR & 0x80000000) != 0) {\n    inputAXORbitwise = -inputAXORbitwise;\n  }\n  if (updatedShiftedInputA == difference) {\n    inputAXORbitwise = inputAXORbitwise ^ 0x800000;\n    if (updatedShiftedInputA == 0) {\n      shiftedInputA = shiftedInputA ^ 0x800000;\n      updatedShiftedInputA = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInputA = shiftedInputA + ((int)inputAXORbitwise >> (difference & 0xff));\n  inputAXORbitwise = inputAXORbitwise << (0x20 - difference & 0xff);\n  inputA = shiftedInputA & 0x80000000;\n  if ((int)shiftedInputA < 0) {\n    isEqual = inputAXORbitwise != 0;\n    inputAXORbitwise = -inputAXORbitwise;\n    shiftedInputA = -shiftedInputA - (uint)isEqual;\n  }\n  if (shiftedInputA < 0x800000) {\n    inputAXOR = inputAXORbitwise & 0x80000000;\n    inputAXORbitwise = inputAXORbitwise << 1;\n    shiftedInputA = shiftedInputA * 2 + (uint)(inputAXOR != 0);\n    inputAXOR = updatedShiftedInputA - 2;\n    if ((shiftedInputA & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedInputA) - 8;\n      shiftedInputA = shiftedInputA << (difference & 0xff);\n      if ((int)inputAXOR < (int)difference) {\n        shiftedInputA = shiftedInputA >> (-(inputAXOR - difference) & 0xff);\n      }\n      else {\n        shiftedInputA = shiftedInputA + (inputAXOR - difference) * 0x800000;\n      }\n      return shiftedInputA | inputA;\n    }\n  }\n  else {\n    inputAXOR = updatedShiftedInputA - 1;\n    if (0xffffff < shiftedInputA) {\n      inputAXOR = shiftedInputA & 1;\n      shiftedInputA = shiftedInputA >> 1;\n      inputAXORbitwise = (uint)(inputAXOR != 0) << 0x1f | inputAXORbitwise >> 1;\n      inputAXOR = updatedShiftedInputA;\n      if (0xfd < updatedShiftedInputA) goto LAB_08000bde;\n    }\n  }\n  shiftedInputA = shiftedInputA + inputAXOR * 0x800000 + (uint)(0x7fffffff < inputAXORbitwise);\n  if (inputAXORbitwise == 0x80000000) {\n    shiftedInputA = shiftedInputA & 0xfffffffe;\n  }\n  return shiftedInputA | inputA;\n}\n\n",
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputFlags",
                "param_4": "inputC",
                "iVar1": "extractedBytesA",
                "iVar2": "extractedBytesB",
                "uVar3": "inputAXOR",
                "uVar4": "inputAXORbitwise",
                "uVar5": "shiftedInputA",
                "uVar6": "updatedShiftedInputA",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "perform_operation_08000aa8",
            "code": "\nuint performOperation_08000aa8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int result1;\n  int result2;\n  uint result3;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool flag;\n  \n  temp1 = input1 << 1;\n  flag = temp1 == 0;\n  if (!flag) {\n    param4 = input2 << 1;\n    flag = param4 == 0;\n  }\n  if (!flag) {\n    flag = temp1 == param4;\n  }\n  result1 = (int)temp1 >> 0x18;\n  if (!flag) {\n    flag = result1 == -1;\n  }\n  if (!flag) {\n    flag = (int)param4 >> 0x18 == -1;\n  }\n  if (flag) {\n    result2 = (int)(input2 << 1) >> 0x18;\n    if (result1 == -1 || result2 == -1) {\n      temp1 = input2;\n      if (result1 == -1) {\n        temp1 = input1;\n      }\n      if (result1 != -1 || result2 != -1) {\n        input2 = temp1;\n      }\n      flag = (temp1 & 0x7fffff) == 0;\n      if (flag) {\n        flag = (input2 & 0x7fffff) == 0;\n      }\n      if (flag) {\n        flag = temp1 == input2;\n      }\n      if (!flag) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  param4 = param4 >> 0x18;\n  temp3 = param4 - temp1;\n  flag = temp3 != 0;\n  temp2 = temp1;\n  if (flag && temp1 <= param4) {\n    temp2 = temp1 + temp3;\n  }\n  if (flag && temp1 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (flag && temp1 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (flag && temp1 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < temp1) {\n    temp3 = -temp3;\n  }\n  if (0x19 < temp3) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result3 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result3 = -result3;\n  }\n  if (temp2 == temp3) {\n    result3 = result3 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result3 >> (temp3 & 0xff));\n  result3 = result3 << (0x20 - temp3 & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    flag = result3 != 0;\n    result3 = -result3;\n    temp1 = -temp1 - (uint)flag;\n  }\n  if (temp1 < 0x800000) {\n    temp3 = result3 & 0x80000000;\n    result3 = result3 << 1;\n    temp1 = temp1 * 2 + (uint)(temp3 != 0);\n    temp3 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)temp3 < (int)temp2) {\n        temp1 = temp1 >> (-(temp3 - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (temp3 - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    temp3 = temp2 - 1;\n    if (0xffffff < temp1) {\n      temp3 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result3 = (uint)(temp3 != 0) << 0x1f | result3 >> 1;\n      temp3 = temp2;\n      if (0xfd < temp2) goto LAB_08000bde;\n    }\n  }\n  temp1 = temp1 + temp3 * 0x800000 + (uint)(0x7fffffff < result3);\n  if (result3 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "perform_operation_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "bVar7": "flag"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c08": {
            "entrypoint": "0x08000c08",
            "current_name": "calculate_result_08000c08",
            "code": "\nuint calculateResult_08000c08(uint inputValue)\n\n{\n  uint result;\n  uint shiftAmount;\n  int constant;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  result = LZCOUNT(inputValue);\n  shiftAmount = result - 8;\n  constant = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    mask = 0 << (shiftAmount & 0xff);\n    result = constant + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shiftAmount = inputValue << result + 0x18;\n  result = constant + ((inputValue >> (0x20 - (result + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    result = result & ~(shiftAmount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000c08": "calculate_result_08000c08",
                "param_1": "inputValue",
                "uVar1": "result",
                "uVar2": "shiftAmount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c10": {
            "entrypoint": "0x08000c10",
            "current_name": "compute_modified_value_08000c10",
            "code": "\nuint computeModifiedValue_08000c10(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signFlag;\n  int intermediateValue;\n  \n  signFlag = inputValue & 0x80000000;\n  if ((int)signFlag < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftAmount = leadingZeros - 8;\n  intermediateValue = ((signFlag | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signFlag = intermediateValue + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signFlag = signFlag & 0xfffffffe;\n    }\n    return signFlag;\n  }\n  shiftAmount = inputValue << leadingZeros + 0x18;\n  signFlag = intermediateValue + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signFlag = signFlag & ~(shiftAmount >> 0x1f);\n  }\n  return signFlag;\n}\n\n",
            "renaming": {
                "FUN_08000c10": "compute_modified_value_08000c10",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signFlag",
                "iVar4": "intermediateValue"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004ae0",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "entrypoint": "0x08000cb8",
            "current_name": "calculate_floating_point_08000cb8",
            "code": "\nuint calculateFloatingPoint_08000cb8(uint operand1,uint operand2,undefined4 precision,uint exception)\n\n{\n  longlong result;\n  uint significand;\n  uint exponent1;\n  int exponentSum;\n  int exponentDiff;\n  uint product;\n  int exponentAdjusted1;\n  uint exponentAdjusted2;\n  bool isZero1;\n  bool isZero2;\n  \n  exponent1 = operand1 >> 0x17 & 0xff;\n  isZero1 = exponent1 == 0;\n  if (!isZero1) {\n    exception = operand2 >> 0x17 & 0xff;\n    isZero1 = exception == 0;\n  }\n  if (!isZero1) {\n    isZero1 = exponent1 == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = exception == 0xff;\n  }\n  if (isZero1) {\n    exception = operand2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || exception == 0xff) {\n      isZero1 = operand1 == 0 || operand1 == 0x80000000;\n      significand = operand2;\n      if (operand1 != 0 && operand1 != 0x80000000) {\n        isZero1 = operand2 == 0;\n        significand = operand1;\n      }\n      if (!isZero1) {\n        isZero1 = operand2 == 0x80000000;\n      }\n      exponentAdjusted2 = significand;\n      if (((isZero1) || ((exponent1 == 0xff && ((significand & 0x7fffff) != 0)))) ||\n         ((exception == 0xff && (exponentAdjusted2 = operand2, (operand2 & 0x7fffff) != 0)))) {\n        return exponentAdjusted2 | 0x7fc00000;\n      }\n      significand = significand ^ operand2;\n      goto LAB_08000e08;\n    }\n    isZero1 = (operand1 & 0x7fffffff) == 0;\n    if (!isZero1) {\n      isZero1 = (operand2 & 0x7fffffff) == 0;\n    }\n    if (isZero1) {\n      return (operand1 ^ operand2) & 0x80000000;\n    }\n    isZero1 = exponent1 == 0;\n    significand = operand1 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        operand1 = operand1 << 1;\n        isZero1 = (operand1 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      exponent1 = exponent1 - 1;\n    }\n    operand1 = operand1 | significand;\n    isZero1 = exception == 0;\n    significand = operand2 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        operand2 = operand2 << 1;\n        isZero1 = (operand2 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      exception = exception - 1;\n    }\n    operand2 = operand2 | significand;\n  }\n  exponentSum = exponent1 + exception;\n  exponentAdjusted2 = operand1 ^ operand2;\n  exponent1 = operand1 << 9;\n  isZero1 = exponent1 == 0;\n  if (!isZero1) {\n    operand2 = operand2 << 9;\n    isZero1 = operand2 == 0;\n  }\n  if (isZero1) {\n    if (exponent1 == 0) {\n      operand2 = operand2 << 9;\n    }\n    significand = exponentAdjusted2 & 0x80000000 | operand1 & 0x7fffff | operand2 >> 9;\n    isZero2 = SBORROW4(exponentSum,0x7f);\n    exponentDiff = exponentSum + -0x7f;\n    isZero1 = exponentDiff == 0;\n    exponentAdjusted1 = exponentDiff;\n    if (!isZero1 && 0x7e < exponentSum) {\n      isZero2 = SBORROW4(0xff,exponentDiff);\n      exponentAdjusted1 = 0xff - exponentDiff;\n      isZero1 = exponentDiff == 0xff;\n    }\n    if (!isZero1 && exponentAdjusted1 < 0 == isZero2) {\n      significand = significand | exponentDiff * 0x800000;\n    }\n    if (!isZero1 && exponentAdjusted1 < 0 == isZero2) {\n      return significand;\n    }\n    significand = significand | 0x800000;\n    product = 0;\n    isZero2 = SBORROW4(exponentDiff,1);\n    exponentAdjusted2 = exponentSum - 0x80;\n    isZero1 = exponentAdjusted2 == 0;\n    exponent1 = exponentAdjusted2;\n  }\n  else {\n    result = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(operand2 >> 5 | 0x8000000);\n    product = (uint)result;\n    significand = (uint)((ulonglong)result >> 0x20);\n    isZero1 = significand < 0x800000;\n    if (isZero1) {\n      significand = significand << 1;\n    }\n    if (isZero1) {\n      significand = significand | product >> 0x1f;\n      product = product << 1;\n    }\n    significand = exponentAdjusted2 & 0x80000000 | significand;\n    exponentAdjusted2 = (exponentSum + -0x7f) - (uint)isZero1;\n    isZero2 = SBORROW4(exponentAdjusted2,0xfd);\n    isZero1 = exponentAdjusted2 == 0xfd;\n    exponent1 = exponentAdjusted2 - 0xfd;\n    if (exponentAdjusted2 < 0xfe) {\n      significand = significand + exponentAdjusted2 * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        significand = significand & 0xfffffffe;\n      }\n      return significand;\n    }\n  }\n  if (isZero1 || (int)exponent1 < 0 != isZero2) {\n    isZero1 = (int)(exponentAdjusted2 + 0x19) < 0;\n    if (exponentAdjusted2 == 0xffffffe7 || isZero1 != SCARRY4(exponentAdjusted2,0x19)) {\n      significand = significand & 0x80000000;\n    }\n    if (exponentAdjusted2 != 0xffffffe7 && isZero1 == SCARRY4(exponentAdjusted2,0x19)) {\n      exponent1 = (significand << 1) >> (-exponentAdjusted2 & 0xff);\n      exponentAdjusted2 = significand << (exponentAdjusted2 + 0x20 & 0xff);\n      exponent1 = ((uint)((significand & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | exponentAdjusted2 << 1) == 0) {\n        exponent1 = exponent1 & ~(exponentAdjusted2 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return significand;\n  }\nLAB_08000e08:\n  return significand & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_08000cb8",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "precision",
                "param_4": "exception",
                "lVar1": "result",
                "uVar2": "significand",
                "uVar3": "exponent1",
                "iVar4": "exponentSum",
                "iVar5": "exponentDiff",
                "uVar6": "product",
                "iVar7": "exponentAdjusted1",
                "uVar8": "exponentAdjusted2",
                "bVar9": "isZero1",
                "bVar10": "isZero2"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e20": {
            "entrypoint": "0x08000e20",
            "current_name": "calculate_float_08000e20",
            "code": "\nuint calculateFloat_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint bitShiftedInput2;\n  uint bitShiftedInput1;\n  int difference;\n  uint tempVar;\n  int tempVar2;\n  uint result;\n  bool isZero;\n  bool isNegative;\n  bool isCarry;\n  \n  bitShiftedInput1 = input1 >> 0x17 & 0xff;\n  isZero = bitShiftedInput1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = bitShiftedInput1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (bitShiftedInput1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = bitShiftedInput1 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          bitShiftedInput1 = bitShiftedInput1 - 1;\n        }\n        input1 = input1 | result;\n        isZero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = bitShiftedInput1 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      isCarry = SCARRY4(difference,0x7f);\n      tempVar2 = difference + 0x7f;\n      isZero = tempVar2 < 0;\n      isNegative = tempVar2 == 0;\n      if (!isNegative && isZero == isCarry) {\n        isCarry = SBORROW4(0xff,tempVar2);\n        isZero = 0xff - tempVar2 < 0;\n        isNegative = tempVar2 == 0xff;\n      }\n      if (!isNegative && isZero == isCarry) {\n        input1 = input1 | tempVar2 * 0x800000;\n      }\n      if (!isNegative && isZero == isCarry) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      bitShiftedInput1 = 0;\n      isNegative = SBORROW4(tempVar2,1);\n      tempVar = difference + 0x7e;\n      isZero = tempVar == 0;\n      result = tempVar;\n    }\n    else {\n      bitShiftedInput2 = (input2 << 9) >> 4 | 0x10000000;\n      bitShiftedInput1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = bitShiftedInput2 <= bitShiftedInput1;\n      if (!isZero) {\n        bitShiftedInput1 = bitShiftedInput1 << 1;\n      }\n      tempVar = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (bitShiftedInput2 <= bitShiftedInput1) {\n          bitShiftedInput1 = bitShiftedInput1 - bitShiftedInput2;\n          input1 = input1 | result;\n        }\n        isZero = bitShiftedInput2 >> 1 <= bitShiftedInput1;\n        if (isZero) {\n          bitShiftedInput1 = bitShiftedInput1 - (bitShiftedInput2 >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 1;\n        }\n        isZero = bitShiftedInput2 >> 2 <= bitShiftedInput1;\n        if (isZero) {\n          bitShiftedInput1 = bitShiftedInput1 - (bitShiftedInput2 >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 2;\n        }\n        isZero = bitShiftedInput2 >> 3 <= bitShiftedInput1;\n        if (isZero) {\n          bitShiftedInput1 = bitShiftedInput1 - (bitShiftedInput2 >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 3;\n        }\n        bitShiftedInput1 = bitShiftedInput1 * 0x10;\n        isZero = bitShiftedInput1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(tempVar,0xfd);\n      isZero = tempVar == 0xfd;\n      result = tempVar - 0xfd;\n      if (tempVar < 0xfe) {\n        input1 = input1 + tempVar * 0x800000 + (uint)(bitShiftedInput2 <= bitShiftedInput1);\n        if (bitShiftedInput1 - bitShiftedInput2 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegative) {\n      isZero = (int)(tempVar + 0x19) < 0;\n      if (tempVar == 0xffffffe7 || isZero != SCARRY4(tempVar,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (tempVar == 0xffffffe7 || isZero != SCARRY4(tempVar,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-tempVar & 0xff);\n      tempVar = input1 << (tempVar + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((bitShiftedInput1 | tempVar << 1) == 0) {\n        result = result & ~(tempVar >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e20": "calculate_float_08000e20",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bitShiftedInput2",
                "uVar2": "bitShiftedInput1",
                "iVar3": "difference",
                "uVar4": "tempVar",
                "iVar5": "tempVar2",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "isCarry"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f68": {
            "entrypoint": "0x08000f68",
            "current_name": "calculate_result_08000f68",
            "code": "\nuint calculate_result_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f68": "calculate_result_08000f68",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08000fd0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "entrypoint": "0x08000fc8",
            "current_name": "copy_params_and_swap_08000fc8",
            "code": "\nvoid copyParamsAndSwap_08000fc8(undefined4 source,undefined4 destination)\n\n{\n  FUN_08000fd0(destination,source);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fc8": "copy_params_and_swap_08000fc8",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_08001030"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "entrypoint": "0x08000fd0",
            "current_name": "concatenate_param_08000fd0",
            "code": "\nundefined8 concatenate_param_08000fd0(undefined4 input_param1,undefined4 input_param2)\n\n{\n  FUN_08000f68();\n  return CONCAT44(input_param2,input_param1);\n}\n\n",
            "renaming": {
                "FUN_08000fd0": "concatenate_param_08000fd0",
                "param_1": "input_param1",
                "param_2": "input_param2"
            },
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "called": [
                "FUN_08000f68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "entrypoint": "0x08000ff4",
            "current_name": "check_if_input_is_empty_08000ff4",
            "code": "\nbool check_if_input_is_empty_08000ff4(void)\n\n{\n  char input_char;\n  \n  FUN_08000fd0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000ff4": "check_if_input_is_empty_08000ff4",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001030": {
            "entrypoint": "0x08001030",
            "current_name": "is_string_empty_08001030",
            "code": "\nbool isStringEmpty_08001030(void)\n\n{\n  char inputChar;\n  \n  FUN_08000fc8();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001030": "is_string_empty_08001030",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000fc8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001044": {
            "entrypoint": "0x08001044",
            "current_name": "validate_param_08001044",
            "code": "\nuint validateParam_08001044(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08001044": "validate_param_08001044",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001084": {
            "entrypoint": "0x08001084",
            "current_name": "copy_memory_08001084",
            "code": "\nundefined4 * copyMemory_08001084(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *pDest;\n  undefined4 *pSource;\n  uint remainingLength;\n  uint unrolledLength;\n  bool condition;\n  \n  pDest = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      unrolledLength = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          pSource = pDest;\n          condition = unrolledLength != 0;\n          unrolledLength = unrolledLength - 1;\n          *(undefined *)pSource = *(undefined *)destPtr;\n          pDest = (undefined4 *)((int)pSource + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (condition);\n        *(undefined *)(undefined4 *)((int)pSource + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)pSource + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)pSource + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_08001108;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      unrolledLength = 4 - ((uint)destination & 3);\n      length = length - unrolledLength;\n      destPtr = destination;\n      pSource = source;\n      if (((uint)destination & 1) != 0) {\n        pSource = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      pDest = destPtr;\n      source = pSource;\n      if ((unrolledLength & 2) != 0) {\n        source = (undefined4 *)((int)pSource + 2);\n        pDest = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)pSource;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *pDest = *source;\n    pDest[1] = source[1];\n    pDest[2] = source[2];\n    pDest[3] = source[3];\n    pDest[4] = source[4];\n    pDest[5] = source[5];\n    pDest[6] = source[6];\n    pDest[7] = source[7];\n    pDest[8] = source[8];\n    pDest[9] = source[9];\n    pDest[10] = source[10];\n    pDest[0xb] = source[0xb];\n    pDest[0xc] = source[0xc];\n    pDest[0xd] = source[0xd];\n    pDest[0xe] = source[0xe];\n    pDest[0xf] = source[0xf];\n    pDest = pDest + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *pDest = *source;\n      pDest[1] = source[1];\n      pDest[2] = source[2];\n      pDest[3] = source[3];\n      pDest = pDest + 4;\n      source = source + 4;\n      condition = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (condition);\n  }\n  unrolledLength = remainingLength + 0xc;\n  pSource = pDest;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *pSource = *destPtr;\n      condition = 3 < unrolledLength;\n      unrolledLength = unrolledLength - 4;\n      pDest = pSource + 1;\n      pSource = pSource + 1;\n      destPtr = source;\n    } while (condition);\n  }\nLAB_08001108:\n  if (unrolledLength + 4 != 0) {\n    destPtr = pDest;\n    pSource = source;\n    if ((unrolledLength & 1) != 0) {\n      pSource = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)pDest + 1);\n      *(undefined *)pDest = *(undefined *)source;\n    }\n    if ((unrolledLength + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)pSource;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "pDest",
                "puVar3": "pSource",
                "uVar4": "remainingLength",
                "uVar5": "unrolledLength",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_08009120"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "check_input_validity_08001170",
            "code": "\nundefined4 checkInputValidity_08001170(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001170": "check_input_validity_08001170",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800119c": {
            "entrypoint": "0x0800119c",
            "current_name": "calculate_scaled_value_0800119c",
            "code": "\nuint calculateScaledValue_0800119c(uint inputValue,uint scalingFactor)\n\n{\n  uint shiftedValue;\n  int scaledOffset;\n  uint modifier;\n  \n  scaledOffset = scalingFactor * 2 + 0x200000;\n  if (scalingFactor * 2 < 0xffe00000) {\n    if (-1 < scaledOffset) {\n      return 0;\n    }\n    shiftedValue = scaledOffset >> 0x15;\n    modifier = -shiftedValue - 0x3e1;\n    if (shiftedValue < 0xfffffc20 && modifier != 0) {\n      shiftedValue = (scalingFactor << 0xb | 0x80000000 | inputValue >> 0x15) >> (modifier & 0xff);\n      if ((scalingFactor & 0x80000000) != 0) {\n        shiftedValue = -shiftedValue;\n      }\n      return shiftedValue;\n    }\n  }\n  else if ((inputValue | scalingFactor << 0xc) != 0) {\n    return 0;\n  }\n  scalingFactor = scalingFactor & 0x80000000;\n  if (scalingFactor == 0) {\n    scalingFactor = 0x7fffffff;\n  }\n  return scalingFactor;\n}\n\n",
            "renaming": {
                "FUN_0800119c": "calculate_scaled_value_0800119c",
                "param_1": "inputValue",
                "param_2": "scalingFactor",
                "uVar1": "shiftedValue",
                "iVar2": "scaledOffset",
                "uVar3": "modifier"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011ec": {
            "entrypoint": "0x080011ec",
            "current_name": "get_combined_params_080011ec",
            "code": "\nundefined8 getCombinedParams_080011ec(int inputParam1,int inputParam2,int inputParam3,int inputParam4)\n\n{\n  undefined8 combinedResult;\n  \n  if ((inputParam4 == 0) && (inputParam3 == 0)) {\n    if (inputParam2 != 0 || inputParam1 != 0) {\n      inputParam2 = -1;\n      inputParam1 = -1;\n    }\n    return CONCAT44(inputParam2,inputParam1);\n  }\n  combinedResult = FUN_0800121c();\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_080011ec": "get_combined_params_080011ec",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "combinedResult"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_0800121c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800121c": {
            "entrypoint": "0x0800121c",
            "current_name": "divided_remainder_0800121c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 dividedRemainder_0800121c(uint dividend,uint divisor,uint quotient,uint remainder,uint *result)\n\n{\n  code *jmpTable;\n  ulonglong mulResult;\n  uint quotient1;\n  uint quotient2;\n  uint mulResult1;\n  int shiftAmount;\n  uint finalQuotient;\n  uint temp1;\n  uint quotient3;\n  uint *puVar9;\n  uint quotient4;\n  uint mulResult2;\n  uint mulResult3;\n  bool carryFlag;\n  undefined8 finalResult;\n  \n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftAmount = leadingZerosCount(quotient);\n      temp1 = quotient;\n      if (shiftAmount != 0) {\n        temp1 = quotient << shiftAmount;\n        divisor = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      mulResult2 = temp1 >> 0x10;\n      quotient3 = divisor / mulResult2;\n      quotient4 = quotient3 * (temp1 & 0xffff);\n      finalQuotient = dividend >> 0x10 | (divisor - mulResult2 * quotient3) * 0x10000;\n      quotient2 = quotient3;\n      if (finalQuotient <= quotient4 && quotient4 - finalQuotient != 0) {\n        carryFlag = carry4(temp1,finalQuotient);\n        finalQuotient = temp1 + finalQuotient;\n        quotient2 = quotient3 - 1;\n        if ((carryFlag == false) && (finalQuotient <= quotient4 && quotient4 - finalQuotient != 0)) {\n          quotient2 = quotient3 - 2;\n          finalQuotient = finalQuotient + temp1;\n        }\n      }\n      quotient1 = (finalQuotient - quotient4) / mulResult2;\n      mulResult1 = quotient1 * (temp1 & 0xffff);\n      quotient3 = dividend & 0xffff | ((finalQuotient - quotient4) - mulResult2 * quotient1) * 0x10000;\n      finalQuotient = quotient1;\n      if (quotient3 <= mulResult1 && mulResult1 - quotient3 != 0) {\n        carryFlag = carry4(temp1,quotient3);\n        quotient3 = temp1 + quotient3;\n        finalQuotient = quotient1 - 1;\n        if ((carryFlag == false) && (quotient3 <= mulResult1 && mulResult1 - quotient3 != 0)) {\n          finalQuotient = quotient1 - 2;\n          quotient3 = quotient3 + temp1;\n        }\n      }\n      finalQuotient = finalQuotient | quotient2 << 0x10;\n      puVar9 = (uint *)0x0;\n      quotient3 = quotient3 - mulResult1;\n    }\n    else {\n      if (quotient == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jmpTable = (code *)software_udf(0xff,0x8001302);\n        finalResult = (*jmpTable)();\n        return finalResult;\n      }\n      shiftAmount = leadingZerosCount(quotient);\n      if (shiftAmount == 0) {\n        puVar9 = (uint *)0x1;\n        divisor = divisor - quotient;\n        mulResult2 = quotient >> 0x10;\n        quotient1 = quotient & 0xffff;\n        temp1 = quotient;\n      }\n      else {\n        temp1 = quotient << shiftAmount;\n        finalQuotient = divisor >> (0x20U - shiftAmount & 0xff);\n        mulResult2 = temp1 >> 0x10;\n        quotient4 = finalQuotient / mulResult2;\n        quotient1 = temp1 & 0xffff;\n        mulResult1 = quotient4 * quotient1;\n        quotient3 = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        quotient2 = quotient3 >> 0x10 | (finalQuotient - mulResult2 * quotient4) * 0x10000;\n        dividend = dividend << shiftAmount;\n        finalQuotient = quotient4;\n        if (quotient2 <= mulResult1 && mulResult1 - quotient2 != 0) {\n          carryFlag = carry4(temp1,quotient2);\n          quotient2 = temp1 + quotient2;\n          finalQuotient = quotient4 - 1;\n          if ((carryFlag == false) && (quotient2 <= mulResult1 && mulResult1 - quotient2 != 0)) {\n            finalQuotient = quotient4 - 2;\n            quotient2 = quotient2 + temp1;\n          }\n        }\n        quotient4 = (quotient2 - mulResult1) / mulResult2;\n        mulResult3 = quotient4 * quotient1;\n        divisor = quotient3 & 0xffff | ((quotient2 - mulResult1) - mulResult2 * quotient4) * 0x10000;\n        quotient2 = quotient4;\n        if (divisor <= mulResult3 && mulResult3 - divisor != 0) {\n          carryFlag = carry4(temp1,divisor);\n          divisor = temp1 + divisor;\n          quotient2 = quotient4 - 1;\n          if ((carryFlag == false) && (divisor <= mulResult3 && mulResult3 - divisor != 0)) {\n            quotient2 = quotient4 - 2;\n            divisor = divisor + temp1;\n          }\n        }\n        divisor = divisor - mulResult3;\n        puVar9 = (uint *)(quotient2 | finalQuotient << 0x10);\n      }\n      quotient4 = divisor / mulResult2;\n      finalQuotient = quotient1 * quotient4;\n      quotient3 = dividend >> 0x10 | (divisor - mulResult2 * quotient4) * 0x10000;\n      quotient2 = quotient4;\n      if (quotient3 <= finalQuotient && finalQuotient - quotient3 != 0) {\n        carryFlag = carry4(temp1,quotient3);\n        quotient3 = temp1 + quotient3;\n        quotient2 = quotient4 - 1;\n        if ((carryFlag == false) && (quotient3 <= finalQuotient && finalQuotient - quotient3 != 0)) {\n          quotient2 = quotient4 - 2;\n          quotient3 = quotient3 + temp1;\n        }\n      }\n      quotient4 = (quotient3 - finalQuotient) / mulResult2;\n      quotient1 = quotient1 * quotient4;\n      quotient3 = dividend & 0xffff | ((quotient3 - finalQuotient) - mulResult2 * quotient4) * 0x10000;\n      finalQuotient = quotient4;\n      if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n        carryFlag = carry4(temp1,quotient3);\n        quotient3 = temp1 + quotient3;\n        finalQuotient = quotient4 - 1;\n        if ((carryFlag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n          finalQuotient = quotient4 - 2;\n          quotient3 = quotient3 + temp1;\n        }\n      }\n      quotient3 = quotient3 - quotient1;\n      finalQuotient = finalQuotient | quotient2 << 0x10;\n    }\n    if (result != (uint *)0x0) {\n      *result = quotient3 >> leadingZerosCount(quotient);\n      result[1] = 0;\n    }\n  }\n  else {\n    puVar9 = result;\n    if (divisor < remainder) {\n      if (result != (uint *)0x0) {\n        *result = dividend;\n        result[1] = divisor;\n        return 0;\n      }\n      finalQuotient = 0;\n    }\n    else {\n      shiftAmount = leadingZerosCount(remainder);\n      if (shiftAmount == 0) {\n        if ((remainder < divisor) || (quotient <= dividend)) {\n          carryFlag = dividend < quotient;\n          dividend = dividend - quotient;\n          divisor = (divisor - remainder) - (uint)carryFlag;\n          finalQuotient = 1;\n        }\n        else {\n          finalQuotient = 0;\n        }\n        puVar9 = (uint *)0x0;\n        if (result != (uint *)0x0) {\n          *result = dividend;\n          result[1] = divisor;\n        }\n      }\n      else {\n        quotient3 = 0x20 - shiftAmount;\n        quotient1 = quotient >> (quotient3 & 0xff) | remainder << shiftAmount;\n        temp1 = divisor >> (quotient3 & 0xff);\n        mulResult1 = quotient1 >> 0x10;\n        quotient4 = temp1 / mulResult1;\n        mulResult2 = quotient4 * (quotient1 & 0xffff);\n        finalQuotient = divisor << shiftAmount | dividend >> (quotient3 & 0xff);\n        quotient2 = finalQuotient >> 0x10 | (temp1 - mulResult1 * quotient4) * 0x10000;\n        dividend = dividend << shiftAmount;\n        temp1 = quotient4;\n        if (quotient2 <= mulResult2 && mulResult2 - quotient2 != 0) {\n          carryFlag = carry4(quotient1,quotient2);\n          quotient2 = quotient1 + quotient2;\n          temp1 = quotient4 - 1;\n          if ((carryFlag == false) && (quotient2 <= mulResult2 && mulResult2 - quotient2 != 0)) {\n            temp1 = quotient4 - 2;\n            quotient2 = quotient2 + quotient1;\n          }\n        }\n        quotient4 = (quotient2 - mulResult2) / mulResult1;\n        mulResult3 = quotient4 * (quotient1 & 0xffff);\n        quotient2 = finalQuotient & 0xffff | ((quotient2 - mulResult2) - mulResult1 * quotient4) * 0x10000;\n        finalQuotient = quotient4;\n        if (quotient2 <= mulResult3 && mulResult3 - quotient2 != 0) {\n          carryFlag = carry4(quotient1,quotient2);\n          quotient2 = quotient1 + quotient2;\n          finalQuotient = quotient4 - 1;\n          if ((carryFlag == false) && (quotient2 <= mulResult3 && mulResult3 - quotient2 != 0)) {\n            finalQuotient = quotient4 - 2;\n            quotient2 = quotient2 + quotient1;\n          }\n        }\n        finalQuotient = finalQuotient | temp1 << 0x10;\n        mulResult = (ulonglong)finalQuotient * (ulonglong)(quotient << shiftAmount);\n        if (CONCAT44(quotient2 - mulResult3,dividend) < mulResult) {\n          finalQuotient = finalQuotient - 1;\n          mulResult = mulResult - CONCAT44(quotient1,quotient << shiftAmount);\n        }\n        if (result != (uint *)0x0) {\n          temp1 = ((quotient2 - mulResult3) - (int)(mulResult >> 0x20)) - (uint)(dividend < (uint)mulResult);\n          *result = temp1 << (quotient3 & 0xff) | dividend - (uint)mulResult >> shiftAmount;\n          result[1] = temp1 >> shiftAmount;\n          puVar9 = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(puVar9,finalQuotient);\n}\n\n",
            "renaming": {
                "FUN_0800121c": "divided_remainder_0800121c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "param_5": "result",
                "UNRECOVERED_JUMPTABLE": "jmpTable",
                "uVar1": "mulResult",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "mulResult1",
                "iVar5": "shiftAmount",
                "uVar6": "finalQuotient",
                "uVar7": "temp1",
                "uVar8": "quotient3",
                "uVar10": "quotient4",
                "uVar11": "mulResult2",
                "uVar12": "mulResult3",
                "bVar13": "carryFlag",
                "uVar14": "finalResult",
                "LZCOUNT": "leadingZerosCount",
                "CARRY4": "carry4"
            },
            "calling": [
                "FUN_080011ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014f0": {
            "entrypoint": "0x080014f0",
            "current_name": "set_flags_and_call_functions_080014f0",
            "code": "\n\n\nundefined4 setFlagsAndCallFunctions_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080014f0": "set_flags_and_call_functions_080014f0"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800151c": {
            "entrypoint": "0x0800151c",
            "current_name": "check_and_set_param_0800151c",
            "code": "\nundefined4 checkAndSetParam_0800151c(uint param)\n\n{\n  int result;\n  undefined4 status;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (param < 0x10) {\n      FUN_0800172a(0xffffffff,param,0);\n      status = 0;\n      DAT_20000000 = param;\n    }\n    else {\n      status = 1;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_0800151c": "check_and_set_param_0800151c",
                "param_1": "param",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "increase_data_value_0800157c",
            "code": "\nvoid increaseDataValue_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "increase_data_value_0800157c"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015a0": {
            "entrypoint": "0x080015a0",
            "current_name": "get_global_variable_080015a0",
            "code": "\nundefined4 get_global_variable_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "renaming": {
                "FUN_080015a0": "get_global_variable_080015a0"
            },
            "calling": [
                "FUN_08002ca8",
                "FUN_08004436",
                "FUN_08003260",
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002d98",
                "FUN_08002c2e",
                "FUN_08001f6c",
                "FUN_08002640",
                "FUN_08004f2c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b4": {
            "entrypoint": "0x080015b4",
            "current_name": "set_partial_register_080015b4",
            "code": "\n\n\nvoid set_partial_register_080015b4(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b4": "set_partial_register_080015b4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015fc": {
            "entrypoint": "0x080015fc",
            "current_name": "get_bits_from_register_080015fc",
            "code": "\n\n\nuint getBitsFromRegister_080015fc(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001618": {
            "entrypoint": "0x08001618",
            "current_name": "set_byte_value_08001618",
            "code": "\nvoid setByteValue_08001618(byte inputByte,uint value)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001618": "set_byte_value_08001618",
                "param_1": "inputByte",
                "param_2": "value"
            },
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800166c": {
            "entrypoint": "0x0800166c",
            "current_name": "bitwise_operation_0800166c",
            "code": "\nuint bitwiseOperation_0800166c(uint bitmask,uint value1,uint value2)\n\n{\n  uint shiftAmount;\n  \n  bitmask = bitmask & 7;\n  shiftAmount = 7 - bitmask;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitmask + 4 < 7) {\n    bitmask = 0;\n  }\n  else {\n    bitmask = bitmask - 3;\n  }\n  return value2 & ~(-1 << (bitmask & 0xff)) |\n         (~(-1 << (shiftAmount & 0xff)) & value1) << (bitmask & 0xff);\n}\n\n",
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "bitmask",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_0800172a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016d0": {
            "entrypoint": "0x080016d0",
            "current_name": "check_and_set_param_080016d0",
            "code": "\n\n\nbool checkAndSetParam_080016d0(int inputParam)\n\n{\n  bool isInRange;\n  \n  isInRange = inputParam - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = inputParam + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_080016d0": "check_and_set_param_080016d0",
                "param_1": "inputParam",
                "bVar1": "isInRange"
            },
            "calling": [
                "FUN_08001762"
            ],
            "called": [
                "FUN_08001618"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001714": {
            "entrypoint": "0x08001714",
            "current_name": "initialize_08001714",
            "code": "\nvoid initialize_08001714(undefined4 input_param)\n\n{\n  FUN_080015b4(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001714": "initialize_08001714",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [
                "FUN_080015b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800172a": {
            "entrypoint": "0x0800172a",
            "current_name": "process_data_0800172a",
            "code": "\nvoid processData_0800172a(char inputData,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,param2,param3);\n  FUN_08001618((int)inputData,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800172a": "process_data_0800172a",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_08001618",
                "FUN_0800166c",
                "FUN_080015fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001762": {
            "entrypoint": "0x08001762",
            "current_name": "calculate_hash_code_08001762",
            "code": "\nundefined4 calculateHashCode_08001762(undefined4 inputValue)\n\n{\n  undefined4 hashValue;\n  \n  hashValue = FUN_080016d0(inputValue);\n  return hashValue;\n}\n\n",
            "renaming": {
                "FUN_08001762": "calculate_hash_code_08001762",
                "param_1": "inputValue",
                "uVar1": "hashValue"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "called": [
                "FUN_080016d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800177c": {
            "entrypoint": "0x0800177c",
            "current_name": "set_e000e010_bit_0800177c",
            "code": "\n\n\nvoid set_e000e010_bit_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800177c": "set_e000e010_bit_0800177c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017b4": {
            "entrypoint": "0x080017b4",
            "current_name": "initialize_program_080017b4",
            "code": "\nvoid initializeProgram_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080017b4": "initialize_program_080017b4"
            },
            "calling": [
                "FUN_08005704"
            ],
            "called": [
                "FUN_08004f78"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080017c4": {
            "entrypoint": "0x080017c4",
            "current_name": "update_bitmask_080017c4",
            "code": "\n\n\nvoid updateBitmask_080017c4(uint *bitmask,uint *inputBits)\n\n{\n  uint bitShift;\n  uint bitMaskResult;\n  uint opcode;\n  uint *bitmaskPtr;\n  int instruction;\n  uint newBitValue;\n  uint bitPosition;\n  \n  newBitValue = 0;\n  bitPosition = 0;\n  do {\n    if (0xf < bitPosition) {\n      return;\n    }\n    bitShift = 1 << (bitPosition & 0xff);\n    bitMaskResult = *inputBits & bitShift;\n    if (bitMaskResult == bitShift) {\n      opcode = inputBits[1];\n      if (opcode == 0x12) {\n        newBitValue = inputBits[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          newBitValue = inputBits[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            newBitValue = inputBits[3];\n          }\n        }\n        else if (opcode == 3) {\n          newBitValue = 0;\n        }\n        else if (opcode == 0x11) {\n          newBitValue = inputBits[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (inputBits[2] == 0) {\n          newBitValue = 4;\n        }\n        else if (inputBits[2] == 1) {\n          newBitValue = 8;\n          bitmask[4] = bitShift;\n        }\n        else {\n          newBitValue = 8;\n          bitmask[5] = bitShift;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bitMaskResult < 0x100) {\n        bitShift = bitPosition << 2;\n        bitmaskPtr = bitmask;\n      }\n      else {\n        bitmaskPtr = bitmask + 1;\n        bitShift = (bitPosition - 8) * 4;\n      }\n      *bitmaskPtr = *bitmaskPtr & ~(0xf << (bitShift & 0xff)) | newBitValue << (bitShift & 0xff);\n      if ((inputBits[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (bitmask == (uint *)0x40010800) {\n          instruction = 0;\n        }\n        else if (bitmask == (uint *)0x40010c00) {\n          instruction = 1;\n        }\n        else if (bitmask == (uint *)0x40011000) {\n          instruction = 2;\n        }\n        else if (bitmask == (uint *)0x40011400) {\n          instruction = 3;\n        }\n        else {\n          instruction = 4;\n        }\n        *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000) =\n             instruction << ((bitPosition & 3) << 2) |\n             ~(0xf << ((bitPosition & 3) << 2)) & *(uint *)(((bitPosition >> 2) + 2) * 4 + 0x40010000);\n        if ((inputBits[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bitMaskResult & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bitMaskResult | _DAT_40010400;\n        }\n        if ((inputBits[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bitMaskResult & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bitMaskResult | _DAT_40010404;\n        }\n        if ((inputBits[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bitMaskResult & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bitMaskResult | _DAT_40010408;\n        }\n        if ((inputBits[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bitMaskResult & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bitMaskResult | _DAT_4001040c;\n        }\n      }\n    }\n    bitPosition = bitPosition + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080017c4": "update_bitmask_080017c4",
                "param_1": "bitmask",
                "param_2": "inputBits",
                "uVar1": "bitShift",
                "uVar2": "bitMaskResult",
                "uVar3": "opcode",
                "puVar4": "bitmaskPtr",
                "iVar5": "instruction",
                "local_10": "newBitValue",
                "local_c": "bitPosition"
            },
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a80": {
            "entrypoint": "0x08001a80",
            "current_name": "store_value_at_offset_08001a80",
            "code": "\nvoid storeValueAtOffset_08001a80(int ptr,ushort value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(unsignedInt *)(ptr + 0x10) = (unsignedInt)value << 0x10;\n  }\n  else {\n    *(unsignedInt *)(ptr + 0x10) = (unsignedInt)value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a80": "store_value_at_offset_08001a80",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "flag",
                "uint": "unsignedInt"
            },
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "calculate_values_08001ab0",
            "code": "\nundefined4 calculateValues_08001ab0(uint **parameters)\n\n{\n  uint result1;\n  char condition;\n  undefined4 returnValue;\n  uint result2;\n  bool isZero;\n  \n  if (parameters == (uint **)0x0) {\n    returnValue = 1;\n  }\n  else {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      FUNC_08001cb8(parameters);\n    }\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    result1 = FUN_08003518();\n    if (parameters[1] < (uint *)0x186a1) {\n      result2 = result1;\n      if (result1 < 2000000) {\n        result2 = 1;\n      }\n      condition = (char)result2;\n      if (1999999 < result1) {\n        condition = '\\0';\n      }\n    }\n    else {\n      result2 = result1;\n      if (result1 < 4000000) {\n        result2 = 1;\n      }\n      condition = (char)result2;\n      if (3999999 < result1) {\n        condition = '\\0';\n      }\n    }\n    if (condition == '\\0') {\n      result2 = result1 / 1000000;\n      (*parameters)[1] = result2;\n      if ((uint *)0x186a0 < parameters[1]) {\n        result2 = (result2 * 300) / 1000;\n      }\n      (*parameters)[8] = result2 + 1;\n      if (parameters[1] < (uint *)0x186a1) {\n        result1 = (result1 - 1) / (uint)((int)parameters[1] << 1) + 1 & 0xfff;\n        if (result1 < 4) {\n          result1 = 4;\n        }\n      }\n      else {\n        if (parameters[2] == (uint *)0x0) {\n          result2 = (result1 - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff;\n          isZero = result2 == 0;\n          if (isZero) {\n            result2 = 1;\n          }\n          condition = (char)result2;\n          if (!isZero) {\n            condition = '\\0';\n          }\n        }\n        else {\n          result2 = (result1 - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff;\n          isZero = result2 == 0;\n          if (isZero) {\n            result2 = 1;\n          }\n          condition = (char)result2;\n          if (!isZero) {\n            condition = '\\0';\n          }\n        }\n        if (condition == '\\0') {\n          if (parameters[2] == (uint *)0x0) {\n            result1 = (result1 - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            result1 = (result1 - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          result1 = 1;\n        }\n      }\n      (*parameters)[7] = result1;\n      **parameters = (uint)parameters[8] | (uint)parameters[7];\n      (*parameters)[2] = (uint)parameters[3] | (uint)parameters[4];\n      (*parameters)[3] = (uint)parameters[6] | (uint)parameters[5];\n      **parameters = **parameters | 1;\n      parameters[0x10] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      returnValue = 0;\n    }\n    else {\n      returnValue = 1;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "calculate_values_08001ab0",
                "param_1": "parameters",
                "uVar1": "result1",
                "cVar2": "condition",
                "uVar3": "returnValue",
                "uVar4": "result2",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08005348"
            ],
            "called": [
                "FUN_08003518",
                "FUN_08001cb8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "entrypoint": "0x08001cb8",
            "current_name": "FUNC_08001cb8",
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ccc": {
            "entrypoint": "0x08001ccc",
            "current_name": "process_data_08001ccc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nprocessData_08001ccc(uint **data,undefined2 var1,undefined2 var2,undefined2 var3,uint *var4,\n            undefined2 var5,undefined4 var6)\n\n{\n  int result1;\n  int result2;\n  undefined4 returnValue;\n  uint *pointer;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result2 = 0;\n        goto LAB_08001d9c;\n      }\n      result2 = FUN_080015a0();\n    } while ((uint)(result2 - result1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result2 = 3;\nLAB_08001d9c:\n    if (result2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        returnValue = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = var4;\n        *(undefined2 *)((int)data + 0x2a) = var5;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result2 = FUN_08002640(data,var1,var2,var3,var6,result1);\n        if (result2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            result2 = FUN_08002bb4(data,var6,result1);\n            if (result2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            pointer = data[9];\n            data[9] = (uint *)((int)pointer + 1);\n            (*data)[4] = (uint)*(byte *)pointer;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              pointer = data[9];\n              data[9] = (uint *)((int)pointer + 1);\n              (*data)[4] = (uint)*(byte *)pointer;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          result1 = FUN_08002c2e(data,var6,result1);\n          if (result1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            returnValue = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            returnValue = 1;\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          returnValue = 3;\n        }\n      }\n    }\n    else {\n      returnValue = 2;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001ccc": "process_data_08001ccc",
                "param_1": "data",
                "param_2": "var1",
                "param_3": "var2",
                "param_4": "var3",
                "param_5": "var4",
                "param_6": "var5",
                "param_7": "var6",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "returnValue",
                "puVar4": "pointer"
            },
            "calling": [
                "FUN_08004ea4"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002c2e",
                "FUN_08002640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "entrypoint": "0x08001f6c",
            "current_name": "process_data_08001f6c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nprocessData_08001f6c(uint **dataPtr,undefined2 param2,undefined2 param3,undefined2 param4,uint *param5,\n            undefined2 param6,uint param7)\n\n{\n  int value1;\n  uint value2;\n  int value3;\n  undefined4 result;\n  uint *ptr;\n  \n  value1 = FUN_080015a0();\n  if (*(char *)((int)dataPtr + 0x3d) == ' ') {\n    do {\n      if ((~(*dataPtr)[6] & 2) != 0) {\n        value3 = 0;\n        goto LAB_08002040;\n      }\n      value3 = FUN_080015a0();\n    } while ((uint)(value3 - value1) < 0x1a);\n    dataPtr[0xc] = (uint *)0x0;\n    *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3e) = 0;\n    *(undefined *)(dataPtr + 0xf) = 0;\n    value3 = 3;\nLAB_08002040:\n    if (value3 == 0) {\n      if (*(char *)(dataPtr + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(dataPtr + 0xf) = 1;\n        if ((**dataPtr & 1) != 1) {\n          **dataPtr = **dataPtr | 1;\n        }\n        **dataPtr = **dataPtr & 0xfffff7ff;\n        *(undefined *)((int)dataPtr + 0x3d) = 0x22;\n        *(undefined *)((int)dataPtr + 0x3e) = 0x40;\n        dataPtr[0x10] = (uint *)0x0;\n        dataPtr[9] = param5;\n        *(undefined2 *)((int)dataPtr + 0x2a) = param6;\n        dataPtr[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(dataPtr + 10) = *(undefined2 *)((int)dataPtr + 0x2a);\n        value3 = FUN_080027f4(dataPtr,param2,param3,param4,param7,value1);\n        if (value3 == 0) {\n          if (*(short *)(dataPtr + 10) == 0) {\n            **dataPtr = **dataPtr | 0x200;\n          }\n          else if (*(short *)(dataPtr + 10) == 1) {\n            **dataPtr = **dataPtr & 0xfffffbff;\n            disableIRQ();\n            **dataPtr = **dataPtr | 0x200;\n            enableIRQ();\n          }\n          else if (*(short *)(dataPtr + 10) == 2) {\n            **dataPtr = **dataPtr | 0x800;\n            disableIRQ();\n            **dataPtr = **dataPtr & 0xfffffbff;\n            enableIRQ();\n          }\n          else {\n            **dataPtr = **dataPtr | 0x400;\n          }\n          while (*(short *)(dataPtr + 10) != 0) {\n            if (*(ushort *)(dataPtr + 10) < 4) {\n              if (*(short *)(dataPtr + 10) == 1) {\n                value3 = FUN_08002ca8(dataPtr,param7,value1);\n                if (value3 != 0) {\n                  if (dataPtr[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n              else if (*(short *)(dataPtr + 10) == 2) {\n                do {\n                  if ((~(*dataPtr)[5] & 4) == 0) {\n                    value3 = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (value3 = FUN_080015a0(), (uint)(value3 - value1) <= param7)\n                         )));\n                dataPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n                *(undefined *)((int)dataPtr + 0x3e) = 0;\n                *(undefined *)(dataPtr + 0xf) = 0;\n                value3 = 3;\nLAB_080022fa:\n                if (value3 != 0) {\n                  return 3;\n                }\n                disableIRQ();\n                **dataPtr = **dataPtr | 0x200;\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n                enableIRQ();\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*dataPtr)[5] & 4) == 0) {\n                    value3 = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (value3 = FUN_080015a0(), (uint)(value3 - value1) <= param7)\n                         )));\n                dataPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n                *(undefined *)((int)dataPtr + 0x3e) = 0;\n                *(undefined *)(dataPtr + 0xf) = 0;\n                value3 = 3;\nLAB_08002418:\n                if (value3 != 0) {\n                  return 3;\n                }\n                **dataPtr = **dataPtr & 0xfffffbff;\n                disableIRQ();\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n                do {\n                  if ((~(*dataPtr)[5] & 4) == 0) {\n                    value3 = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((param7 == 0xffffffff) ||\n                        ((param7 != 0 && (value3 = FUN_080015a0(), (uint)(value3 - value1) <= param7)\n                         )));\n                dataPtr[0xc] = (uint *)0x0;\n                *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n                *(undefined *)((int)dataPtr + 0x3e) = 0;\n                *(undefined *)(dataPtr + 0xf) = 0;\n                value3 = 3;\nLAB_0800250a:\n                if (value3 != 0) {\n                  return 3;\n                }\n                **dataPtr = **dataPtr | 0x200;\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n                enableIRQ();\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n            }\n            else {\n              value3 = FUN_08002ca8(dataPtr,param7,value1);\n              if (value3 != 0) {\n                if (dataPtr[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              value2 = (*dataPtr)[4];\n              ptr = dataPtr[9];\n              dataPtr[9] = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)value2;\n              *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n              *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              if (((*dataPtr)[5] & 4) == 4) {\n                value2 = (*dataPtr)[4];\n                ptr = dataPtr[9];\n                dataPtr[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)value2;\n                *(short *)(dataPtr + 10) = *(short *)(dataPtr + 10) + -1;\n                *(short *)((int)dataPtr + 0x2a) = *(short *)((int)dataPtr + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)dataPtr + 0x3d) = 0x20;\n          *(undefined *)((int)dataPtr + 0x3e) = 0;\n          *(undefined *)(dataPtr + 0xf) = 0;\n          result = 0;\n        }\n        else if (dataPtr[0x10] == (uint *)0x4) {\n          *(undefined *)(dataPtr + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(dataPtr + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001f6c": "process_data_08001f6c",
                "param_1": "dataPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "iVar1": "value1",
                "uVar2": "value2",
                "iVar3": "value3",
                "uVar4": "result",
                "puVar5": "ptr",
                "disableIRQinterrupts": "disableIRQ",
                "enableIRQinterrupts": "enableIRQ"
            },
            "calling": [
                "FUN_08004ee8"
            ],
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002640": {
            "entrypoint": "0x08002640",
            "current_name": "process_data_08002640",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nprocessData_08002640(uint **inputData,byte flag,undefined2 value,short mode,uint limit,int offset)\n\n{\n  int status;\n  undefined4 result;\n  \n  **inputData = **inputData | 0x100;\n  do {\n    if ((~(*inputData)[5] & 1) == 0) {\n      status = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (status = FUN_080015a0(), (uint)(status - offset) <= limit))));\n  inputData[0xc] = (uint *)0x0;\n  *(undefined *)((int)inputData + 0x3d) = 0x20;\n  *(undefined *)((int)inputData + 0x3e) = 0;\n  *(undefined *)(inputData + 0xf) = 0;\n  status = 3;\nLAB_0800270a:\n  if (status == 0) {\n    (*inputData)[4] = flag & 0xfe;\n    status = FUN_08002ad8(inputData,0x10002,limit,offset);\n    if (status == 0) {\n      status = FUN_08002bb4(inputData,limit,offset,(*inputData)[6]);\n      if (status == 0) {\n        if (mode == 1) {\n          (*inputData)[4] = (uint)(byte)value;\n        }\n        else {\n          (*inputData)[4] = (uint)(byte)((ushort)value >> 8);\n          status = FUN_08002bb4(inputData,limit,offset);\n          if (status != 0) {\n            if (inputData[0x10] == (uint *)0x4) {\n              **inputData = **inputData | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*inputData)[4] = (uint)(byte)value;\n        }\n        result = 0;\n      }\n      else if (inputData[0x10] == (uint *)0x4) {\n        **inputData = **inputData | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (inputData[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002640": "process_data_08002640",
                "param_1": "inputData",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "mode",
                "param_5": "limit",
                "param_6": "offset",
                "iVar1": "status",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080027f4": {
            "entrypoint": "0x080027f4",
            "current_name": "process_data_080027f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nprocessData_080027f4(uint **data,byte flag,undefined2 param,short condition,uint limit,int value)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  **data = **data | 0x400;\n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - value) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = FUN_08002ad8(data,0x10002,limit,value);\n    if (result == 0) {\n      result = FUN_08002bb4(data,limit,value,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)param;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)param >> 8);\n          result = FUN_08002bb4(data,limit,value);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)param;\n        }\n        result = FUN_08002bb4(data,limit,value);\n        if (result == 0) {\n          **data = **data | 0x100;\n          do {\n            if ((~(*data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = FUN_080015a0(), (uint)(result - value) <= limit))));\n          data[0xc] = (uint *)0x0;\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*data)[4] = (uint)(flag | 1);\n            result = FUN_08002ad8(data,0x10002,limit,value);\n            if (result == 0) {\n              returnValue = 0;\n            }\n            else if (data[0x10] == (uint *)0x4) {\n              returnValue = 1;\n            }\n            else {\n              returnValue = 3;\n            }\n          }\n          else {\n            returnValue = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          **data = **data | 0x200;\n          returnValue = 1;\n        }\n        else {\n          returnValue = 3;\n        }\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        returnValue = 1;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      returnValue = 1;\n    }\n    else {\n      returnValue = 3;\n    }\n  }\n  else {\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080027f4": "process_data_080027f4",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "param",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "value",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_08002bb4",
                "FUN_08002ad8",
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "validate_and_update_flags_08002ad8",
            "code": "\nundefined4 validate_and_update_flags_08002ad8(uint **pointer_array,uint value_2,uint value_3,int value_4)\n\n{\n  int result;\n  char flag_char;\n  uint modified_value;\n  bool is_modified;\n  \n  do {\n    if ((value_2 >> 0x10 & 0xff) == 1) {\n      modified_value = value_2 & ~(*pointer_array)[5] & 0xffff;\n      is_modified = modified_value != 0;\n      if (is_modified) {\n        modified_value = 1;\n      }\n      flag_char = (char)modified_value;\n      if (!is_modified) {\n        flag_char = '\\0';\n      }\n    }\n    else {\n      modified_value = value_2 & ~(*pointer_array)[6] & 0xffff;\n      is_modified = modified_value != 0;\n      if (is_modified) {\n        modified_value = 1;\n      }\n      flag_char = (char)modified_value;\n      if (!is_modified) {\n        flag_char = '\\0';\n      }\n    }\n    if (flag_char == '\\0') {\n      return 0;\n    }\n    if (((*pointer_array)[5] & 0x400) == 0x400) {\n      **pointer_array = **pointer_array | 0x200;\n      (*pointer_array)[5] = 0xfffffbff;\n      pointer_array[0x10] = (uint *)0x4;\n      pointer_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n      *(undefined *)(pointer_array + 0xf) = 0;\n      return 1;\n    }\n  } while ((value_3 == 0xffffffff) ||\n          ((value_3 != 0 && (result = FUN_080015a0(), (uint)(result - value_4) <= value_3))));\n  pointer_array[0xc] = (uint *)0x0;\n  *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n  *(undefined *)(pointer_array + 0xf) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "validate_and_update_flags_08002ad8",
                "param_1": "pointer_array",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "iVar1": "result",
                "cVar2": "flag_char",
                "uVar3": "modified_value",
                "bVar4": "is_modified"
            },
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "entrypoint": "0x08002bb4",
            "current_name": "check_and_update_buffer_08002bb4",
            "code": "\nundefined4 check_and_update_buffer_08002bb4(int *buffer_ptr,uint buffer_size,int data_size)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*buffer_ptr + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(buffer_ptr);\n    if (result != 0) break;\n    if ((buffer_size != 0xffffffff) &&\n       ((buffer_size == 0 || (result = FUN_080015a0(), buffer_size < (uint)(result - data_size))))) {\n      buffer_state = buffer_state | 0x20;\n      counter = 0;\n      *(undefined *)((int)buffer_ptr + 0x3d) = 0x20;\n      *(undefined *)(buffer_ptr + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002bb4": "check_and_update_buffer_08002bb4",
                "param_1": "buffer_ptr",
                "param_2": "buffer_size",
                "param_3": "data_size",
                "iVar1": "result",
                "param_1[0x10]": "buffer_state",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "entrypoint": "0x08002c2e",
            "current_name": "check_and_modify_param_08002c2e",
            "code": "\nundefined4 checkAndModifyParam_08002c2e(int *ptrArray,uint paramValue,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*ptrArray + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(ptrArray);\n    if (result != 0) break;\n    if ((paramValue != 0xffffffff) &&\n       ((paramValue == 0 || (result = FUN_080015a0(), paramValue < (uint)(result - offset))))) {\n      ptrArray[16] = ptrArray[16] | 0x20;\n      ptrArray[12] = 0;\n      *(undefined *)((int)ptrArray + 0x3d) = 0x20;\n      *(undefined *)(ptrArray + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002c2e": "check_and_modify_param_08002c2e",
                "param_1": "ptrArray",
                "param_2": "paramValue",
                "param_3": "offset",
                "iVar1": "result",
                "param_1[0x10]": "ptrArray[16]",
                "param_1[0xc]": "ptrArray[12]"
            },
            "calling": [
                "FUN_08001ccc"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08002d3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "entrypoint": "0x08002ca8",
            "current_name": "check_and_update_flags_08002ca8",
            "code": "\nundefined4 check_and_update_flags_08002ca8(int *input_data,uint size_of_input,int offset)\n\n{\n  int function_result;\n  \n  while( true ) {\n    if ((*(uint *)(*input_data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*input_data + 0x14) & 0x10) == 0x10) break;\n    if ((size_of_input == 0) || (function_result = FUN_080015a0(), size_of_input < (uint)(function_result - offset))) {\n      input_data[0x10] = input_data[0x10] | 0x20;\n      *(undefined *)((int)input_data + 0x3d) = 0x20;\n      *(undefined *)(input_data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*input_data + 0x14) = 0xffffffef;\n  input_data[0x10] = 0;\n  input_data[0xc] = 0;\n  *(undefined *)((int)input_data + 0x3d) = 0x20;\n  *(undefined *)(input_data + 0xf) = 0;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002ca8": "check_and_update_flags_08002ca8",
                "param_1": "input_data",
                "param_2": "size_of_input",
                "param_3": "offset",
                "iVar1": "function_result"
            },
            "calling": [
                "FUN_08001f6c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "entrypoint": "0x08002d3c",
            "current_name": "update_flags_if_needed_08002d3c",
            "code": "\nbool updateFlagsIfNeeded_08002d3c(int *data)\n\n{\n  bool isFlagSet;\n  \n  isFlagSet = (*(uint *)(*data + 0x14) & 0x400) == 0x400;\n  if (isFlagSet) {\n    *(undefined4 *)(*data + 0x14) = 0xfffffbff;\n    status = 4;\n    counter = 0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)(data + 0xf) = 0;\n  }\n  return isFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08002d3c": "update_flags_if_needed_08002d3c",
                "param_1": "data",
                "bVar1": "isFlagSet",
                "param_1[0x10]": "status",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "entrypoint": "0x08002d8a",
            "current_name": "FUNC_08002d8a",
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "calling": [
                "FUN_080014f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d98": {
            "entrypoint": "0x08002d98",
            "current_name": "check_conditions_and_operate_08002d98",
            "code": "\n\n\nundefined4 check_conditions_and_operate_08002d98(uint *flags)\n\n{\n  int initialValue;\n  int newValue;\n  undefined4 returnValue;\n  bool isFirstBitSet;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          newValue = FUN_080015a0();\n          if (100 < (uint)(newValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          newValue = FUN_080015a0();\n          if (100 < (uint)(newValue - initialValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        newValue = FUN_080015a0();\n        if (2 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        newValue = FUN_080015a0();\n        if (2 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        newValue = FUN_080015a0();\n        if (2 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        newValue = FUN_080015a0();\n        if (2 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    isFirstBitSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFirstBitSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initialValue = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        newValue = FUN_080015a0();\n        if (100 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        newValue = FUN_080015a0();\n        if (5000 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initialValue = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        newValue = FUN_080015a0();\n        if (5000 < (uint)(newValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isFirstBitSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    returnValue = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    returnValue = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    initialValue = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        initialValue = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          newValue = FUN_080015a0();\n          if (2 < (uint)(newValue - initialValue)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      newValue = FUN_080015a0();\n    } while ((uint)(newValue - initialValue) < 3);\n    returnValue = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    initialValue = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      newValue = FUN_080015a0();\n    } while ((uint)(newValue - initialValue) < 3);\n    returnValue = 3;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002d98": "check_conditions_and_operate_08002d98",
                "param_1": "flags",
                "iVar1": "initialValue",
                "iVar2": "newValue",
                "bVar4": "isFirstBitSet",
                "uVar3": "returnValue"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003260": {
            "entrypoint": "0x08003260",
            "current_name": "validate_and_update_memory_range_08003260",
            "code": "\n\n\nundefined4 validate_and_update_memory_range_08003260(uint *memory_permissions,uint length)\n\n{\n  int start_time;\n  int current_time;\n  uint result;\n  undefined4 return_value;\n  \n  if (((_DAT_40022000 & 7) < length) &&\n     (_DAT_40022000 = length | _DAT_40022000 & 0xfffffff8, length != (length & 7))) {\n    return_value = 1;\n  }\n  else {\n    if ((*memory_permissions & 2) != 0) {\n      _DAT_40021004 = modified_permissions1 | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*memory_permissions & 1) == 0) {\nLAB_08003394:\n      if ((length < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = length | _DAT_40022000 & 0xfffffff8, length != (length & 7))) {\n        return_value = 1;\n      }\n      else {\n        if ((*memory_permissions & 4) != 0) {\n          _DAT_40021004 = modified_permissions2 | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*memory_permissions & 8) != 0) {\n          _DAT_40021004 = shift_amount << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        result = FUN_08003440();\n        DAT_20000018 = result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        return_value = 0;\n      }\n    }\n    else {\n      if (condition == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((condition != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = condition | _DAT_40021004 & 0xfffffffc;\n      start_time = FUN_080015a0();\n      if (condition == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_time = FUN_080015a0();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        return_value = 3;\n      }\n      else if (condition == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_time = FUN_080015a0();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        return_value = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_time = FUN_080015a0();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        return_value = 3;\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_08003260": "validate_and_update_memory_range_08003260",
                "param_1": "memory_permissions",
                "param_2": "length",
                "uVar3": "result",
                "uVar4": "return_value",
                "param_1[2]": "modified_permissions1",
                "param_1[3]": "modified_permissions2",
                "param_1[4]": "shift_amount",
                "param_1[1]": "condition",
                "iVar1": "start_time",
                "iVar2": "current_time"
            },
            "calling": [
                "FUN_080052a0"
            ],
            "called": [
                "FUN_080015a0",
                "FUN_0800151c",
                "FUN_08003440"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003440": {
            "entrypoint": "0x08003440",
            "current_name": "calculate_execution_time_08003440",
            "code": "\n\n\nuint calculateExecutionTime_08003440(void)\n\n{\n  undefined2 executionTimeTable;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint executionTime;\n  uint temp4;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  executionTimeTable = 0x201;\n  temp2 = 0;\n  temp4 = 0;\n  temp1 = 0;\n  executionTime = 0;\n  temp3 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    executionTime = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    temp1 = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp4 = temp1 * 4000000;\n    }\n    else {\n      temp4 = (temp1 * 8000000) / (uint)*(byte *)((int)&executionTimeTable + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    executionTime = temp4;\n  }\n  else {\n    executionTime = 8000000;\n  }\n  return executionTime;\n}\n\n",
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_30": "executionTimeTable",
                "local_2c": "constant1",
                "uStack_28": "constant2",
                "uStack_24": "constant3",
                "uStack_20": "constant4",
                "local_1c": "temp1",
                "local_18": "temp2",
                "local_14": "temp3",
                "local_10": "executionTime",
                "local_c": "temp4"
            },
            "calling": [
                "FUN_08003260"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003504": {
            "entrypoint": "0x08003504",
            "current_name": "get_global_variable_08003504",
            "code": "\nundefined4 get_global_variable_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_08003504": "get_global_variable_08003504"
            },
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003518": {
            "entrypoint": "0x08003518",
            "current_name": "extracted_bits_08003518",
            "code": "\n\n\nuint extractedBits_08003518(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "renaming": {
                "FUN_08003518": "extracted_bits_08003518",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003540": {
            "entrypoint": "0x08003540",
            "current_name": "calculate_shifted_result_08003540",
            "code": "\n\n\nuint calculate_shifted_result_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(sbyte *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "renaming": {
                "FUN_08003540": "calculate_shifted_result_08003540",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080046ec"
            ],
            "called": [
                "FUN_08003504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003568": {
            "entrypoint": "0x08003568",
            "current_name": "delay_function_08003568",
            "code": "\nvoid delayFunction_08003568(int inputValue)\n\n{\n  bool bVar1;\n  int count;\n  \n  count = inputValue * (DAT_20000018 / 8000);\n  do {\n    bVar1 = count != 0;\n    count = count + -1;\n  } while (bVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003568": "delay_function_08003568",
                "param_1": "inputValue",
                "local_c": "count"
            },
            "calling": [
                "FUN_08002d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035a4": {
            "entrypoint": "0x080035a4",
            "current_name": "validate_input_080035a4",
            "code": "\nundefined4 validate_input_080035a4(undefined4 *input_ptr)\n\n{\n  undefined4 result;\n  \n  if (input_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)input_ptr + 0x3d) == '\\0') {\n      *(undefined *)(input_ptr + 0xf) = 0;\n      FUNC_080035fa(input_ptr);\n    }\n    *(undefined *)((int)input_ptr + 0x3d) = 2;\n    FUN_08003c94(*input_ptr,input_ptr + 1);\n    *(undefined *)((int)input_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080035a4": "validate_input_080035a4",
                "param_1": "input_ptr",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fa": {
            "entrypoint": "0x080035fa",
            "current_name": "FUNC_080035fa",
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "calling": [
                "FUN_080035a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800360c": {
            "entrypoint": "0x0800360c",
            "current_name": "enable_bitwise_operations_0800360c",
            "code": "\nundefined4 enableBitwiseOperations_0800360c(uint **inputPointer)\n\n{\n  (*inputPointer)[3] = (*inputPointer)[3] | 1;\n  **inputPointer = **inputPointer | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800360c": "enable_bitwise_operations_0800360c",
                "param_1": "inputPointer"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003640": {
            "entrypoint": "0x08003640",
            "current_name": "check_and_process_data_08003640",
            "code": "\nundefined4 checkAndProcessData_08003640(undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_08003696(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    FUN_08003c94(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003640": "check_and_process_data_08003640",
                "param_1": "data",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003696": {
            "entrypoint": "0x08003696",
            "current_name": "FUNC_08003696",
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "calling": [
                "FUN_08003640"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080036a8": {
            "entrypoint": "0x080036a8",
            "current_name": "set_flag_and_or_080036a8",
            "code": "\nundefined4 setFlagAndOr_080036a8(uint **flags,undefined4 value)\n\n{\n  FUN_080041ea(*flags,value,1);\n  if (*flags == (uint *)0x40012c00) {\n    (*flags)[0x11] = (*flags)[0x11] | 0x8000;\n  }\n  **flags = **flags | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080036a8": "set_flag_and_or_080036a8",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080041ea"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f8": {
            "entrypoint": "0x080036f8",
            "current_name": "execute_operations_080036f8",
            "code": "\nvoid execute_operations_080036f8(int *param)\n\n{\n  if (((*(uint *)(*param + 0x10) & 2) == 2) && ((*(uint *)(*param + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*param + 0x10) = 0xfffffffd;\n    *(undefined *)(param + 7) = 1;\n    if ((*(uint *)(*param + 0x18) & 3) == 0) {\n      FUNC_08003c4a(param);\n      FUNC_08003c6e(param);\n    }\n    else {\n      FUNC_08003c5c(param);\n    }\n    *(undefined *)(param + 7) = 0;\n  }\n  if (((*(uint *)(*param + 0x10) & 4) == 4) && ((*(uint *)(*param + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*param + 0x10) = 0xfffffffb;\n    *(undefined *)(param + 7) = 2;\n    if ((*(uint *)(*param + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(param);\n      FUNC_08003c6e(param);\n    }\n    else {\n      FUNC_08003c5c(param);\n    }\n    *(undefined *)(param + 7) = 0;\n  }\n  if (((*(uint *)(*param + 0x10) & 8) == 8) && ((*(uint *)(*param + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*param + 0x10) = 0xfffffff7;\n    *(undefined *)(param + 7) = 4;\n    if ((*(uint *)(*param + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(param);\n      FUNC_08003c6e(param);\n    }\n    else {\n      FUNC_08003c5c(param);\n    }\n    *(undefined *)(param + 7) = 0;\n  }\n  if (((*(uint *)(*param + 0x10) & 0x10) == 0x10) && ((*(uint *)(*param + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*param + 0x10) = 0xffffffef;\n    *(undefined *)(param + 7) = 8;\n    if ((*(uint *)(*param + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(param);\n      FUNC_08003c6e(param);\n    }\n    else {\n      FUNC_08003c5c(param);\n    }\n    *(undefined *)(param + 7) = 0;\n  }\n  if (((*(uint *)(*param + 0x10) & 1) == 1) && ((*(uint *)(*param + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*param + 0x10) = 0xfffffffe;\n    FUN_08004f78(param);\n  }\n  if (((*(uint *)(*param + 0x10) & 0x80) == 0x80) && ((*(uint *)(*param + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*param + 0x10) = 0xffffff7f;\n    FUNC_08004378(param);\n  }\n  if (((*(uint *)(*param + 0x10) & 0x40) == 0x40) && ((*(uint *)(*param + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*param + 0x10) = 0xffffffbf;\n    FUNC_08003c80(param);\n  }\n  if (((*(uint *)(*param + 0x10) & 0x20) == 0x20) && ((*(uint *)(*param + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*param + 0x10) = 0xffffffdf;\n    FUNC_08004366(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f8": "execute_operations_080036f8",
                "param_1": "param"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_08004366",
                "FUN_08004378",
                "FUN_08004f78",
                "FUN_08003c5c",
                "FUN_08003c4a",
                "FUN_08003c6e",
                "FUN_08003c80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003908": {
            "entrypoint": "0x08003908",
            "current_name": "update_flags_and_return_08003908",
            "code": "\nundefined4 updateFlagsAndReturn_08003908(int *ptrArray,int inputValue,undefined4 flag)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(ptrArray + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(ptrArray + 0xf) = 1;\n    *(undefined *)((int)ptrArray + 0x3d) = 2;\n    switch(flag) {\n    case 0:\n      FUN_08003d60(*ptrArray,inputValue);\n      *(uint *)(*ptrArray + 0x18) = *(uint *)(*ptrArray + 0x18) | 8;\n      *(uint *)(*ptrArray + 0x18) = *(uint *)(*ptrArray + 0x18) & 0xfffffffb;\n      *(uint *)(*ptrArray + 0x18) = *(uint *)(inputValue + 0x10) | *(uint *)(*ptrArray + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*ptrArray,inputValue);\n      *(uint *)(*ptrArray + 0x18) = *(uint *)(*ptrArray + 0x18) | 0x800;\n      *(uint *)(*ptrArray + 0x18) = *(uint *)(*ptrArray + 0x18) & 0xfffffbff;\n      *(uint *)(*ptrArray + 0x18) = *(int *)(inputValue + 0x10) << 8 | *(uint *)(*ptrArray + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*ptrArray,inputValue);\n      *(uint *)(*ptrArray + 0x1c) = *(uint *)(*ptrArray + 0x1c) | 8;\n      *(uint *)(*ptrArray + 0x1c) = *(uint *)(*ptrArray + 0x1c) & 0xfffffffb;\n      *(uint *)(*ptrArray + 0x1c) = *(uint *)(inputValue + 0x10) | *(uint *)(*ptrArray + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*ptrArray,inputValue);\n      *(uint *)(*ptrArray + 0x1c) = *(uint *)(*ptrArray + 0x1c) | 0x800;\n      *(uint *)(*ptrArray + 0x1c) = *(uint *)(*ptrArray + 0x1c) & 0xfffffbff;\n      *(uint *)(*ptrArray + 0x1c) = *(int *)(inputValue + 0x10) << 8 | *(uint *)(*ptrArray + 0x1c);\n    }\n    *(undefined *)((int)ptrArray + 0x3d) = 1;\n    *(undefined *)(ptrArray + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08003908": "update_flags_and_return_08003908",
                "param_1": "ptrArray",
                "param_2": "inputValue",
                "param_3": "flag",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003f18",
                "FUN_08003d60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a94": {
            "entrypoint": "0x08003a94",
            "current_name": "process_data_08003a94",
            "code": "\nundefined4 processData_08003a94(int *data,uint *values)\n\n{\n  undefined4 result;\n  uint type;\n  \n  if (*(char *)(data + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffff0088;\n    type = *values;\n    if (type == 0x40) {\n      FUN_080040a0(*data,values[1],values[3]);\n      FUN_0800416a(*data,0x40);\n    }\n    else if (type < 0x41) {\n      if (type == 0x10) {\n        FUN_0800416a(*data,0x10);\n      }\n      else if (type < 0x11) {\n        if (type == 0) {\n          FUN_0800416a(*data,0);\n        }\n      }\n      else if (type == 0x20) {\n        FUN_0800416a(*data,0x20);\n      }\n      else if (type == 0x30) {\n        FUN_0800416a(*data,0x30);\n      }\n    }\n    else if (type == 0x70) {\n      FUN_080041a8(*data,values[2],values[1],values[3]);\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xffffff88 | 0x77;\n    }\n    else if (type < 0x71) {\n      if (type == 0x50) {\n        FUN_080040a0(*data,values[1],values[3]);\n        FUN_0800416a(*data,0x50);\n      }\n      else if (type == 0x60) {\n        FUN_08004104(*data,values[1],values[3]);\n        FUN_0800416a(*data,0x60);\n      }\n    }\n    else if (type == 0x1000) {\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) & 0xfffffff8;\n    }\n    else if (type == 0x2000) {\n      FUN_080041a8(*data,values[2],values[1],values[3]);\n      *(uint *)(*data + 8) = *(uint *)(*data + 8) | 0x4000;\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003a94": "process_data_08003a94",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "type"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_0800416a",
                "FUN_080041a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "entrypoint": "0x08003c4a",
            "current_name": "FUNC_08003c4a",
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c5c": {
            "entrypoint": "0x08003c5c",
            "current_name": "FUNC_08003c5c",
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c6e": {
            "entrypoint": "0x08003c6e",
            "current_name": "FUNC_08003c6e",
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c80": {
            "entrypoint": "0x08003c80",
            "current_name": "FUNC_08003c80",
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003c94": {
            "entrypoint": "0x08003c94",
            "current_name": "modify_memory_region_08003c94",
            "code": "\nvoid modifyMemoryRegion_08003c94(uint *memoryRegion,uint *values)\n\n{\n  uint currentValue;\n  \n  currentValue = *memoryRegion;\n  if ((((memoryRegion == (uint *)0x40012c00) || (memoryRegion == (uint *)0x40000000)) ||\n      (memoryRegion == (uint *)0x40000400)) || (memoryRegion == (uint *)0x40000800)) {\n    currentValue = values[1] | currentValue & 0xffffff8f;\n  }\n  if (((memoryRegion == (uint *)0x40012c00) || (memoryRegion == (uint *)0x40000000)) ||\n     ((memoryRegion == (uint *)0x40000400 || (memoryRegion == (uint *)0x40000800)))) {\n    currentValue = values[3] | currentValue & 0xfffffcff;\n  }\n  *memoryRegion = values[5] | currentValue & 0xffffff7f;\n  memoryRegion[0xb] = values[2];\n  memoryRegion[10] = *values;\n  if (memoryRegion == (uint *)0x40012c00) {\n    specialValue = values[4];\n  }\n  memoryRegion[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003c94": "modify_memory_region_08003c94",
                "param_1": "memoryRegion",
                "param_2": "values",
                "local_c": "currentValue",
                "uRam40012c30": "specialValue"
            },
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d60": {
            "entrypoint": "0x08003d60",
            "current_name": "update_config_08003d60",
            "code": "\nvoid updateConfig_08003d60(int configAddress,uint *configData)\n\n{\n  uint inputData;\n  uint modifiedConfig;\n  uint currentConfig;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffffe;\n  currentConfig = *(uint *)(configAddress + 4);\n  inputData = *configData;\n  modifiedConfig = configData[2] | *(uint *)(configAddress + 0x20) & 0xfffffffd;\n  if (configAddress == 0x40012c00) {\n    modifiedConfig = (configData[3] | modifiedConfig & 0xfffffff7) & 0xfffffffb;\n    currentConfig = configData[6] | configData[5] | currentConfig & 0xfffffcff;\n  }\n  *(uint *)(configAddress + 4) = currentConfig;\n  *(uint *)(configAddress + 0x18) = inputData | *(uint *)(configAddress + 0x18) & 0xffffff8c;\n  *(uint *)(configAddress + 0x34) = configData[1];\n  *(uint *)(configAddress + 0x20) = modifiedConfig;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003d60": "update_config_08003d60",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "inputData",
                "uVar2": "modifiedConfig",
                "local_10": "currentConfig"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e38": {
            "entrypoint": "0x08003e38",
            "current_name": "update_config_08003e38",
            "code": "\nvoid updateConfig_08003e38(int configAddress,int *configData)\n\n{\n  int value1;\n  uint value2;\n  uint value3;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  value3 = *(uint *)(configAddress + 4);\n  value1 = *configData;\n  value2 = configData[2] << 4 | *(uint *)(configAddress + 0x20) & 0xffffffdf;\n  if (configAddress == 0x40012c00) {\n    value2 = (configData[3] << 4 | value2 & 0xffffff7f) & 0xffffffbf;\n    value3 = configData[6] << 2 | configData[5] << 2 | value3 & 0xfffff3ff;\n  }\n  *(uint *)(configAddress + 4) = value3;\n  *(uint *)(configAddress + 0x18) = value1 << 8 | *(uint *)(configAddress + 0x18) & 0xffff8cff;\n  *(int *)(configAddress + 0x38) = configData[1];\n  *(uint *)(configAddress + 0x20) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e38": "update_config_08003e38",
                "param_1": "configAddress",
                "param_2": "configData",
                "iVar1": "value1",
                "uVar2": "value2",
                "local_10": "value3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "update_data_08003f18",
            "code": "\nvoid updateData_08003f18(int baseAddress,uint *data)\n\n{\n  uint var1;\n  uint var2;\n  uint temp;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  temp = *(uint *)(baseAddress + 4);\n  var1 = *data;\n  var2 = data[2] << 8 | *(uint *)(baseAddress + 0x20) & 0xfffffdff;\n  if (baseAddress == 0x40012c00) {\n    var2 = (data[3] << 8 | var2 & 0xfffff7ff) & 0xfffffbff;\n    temp = data[6] << 4 | data[5] << 4 | temp & 0xffffcfff;\n  }\n  *(uint *)(baseAddress + 4) = temp;\n  *(uint *)(baseAddress + 0x1c) = var1 | *(uint *)(baseAddress + 0x1c) & 0xffffff8c;\n  *(uint *)(baseAddress + 0x3c) = data[1];\n  *(uint *)(baseAddress + 0x20) = var2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "param_1": "baseAddress",
                "param_2": "data",
                "uVar1": "var1",
                "uVar2": "var2",
                "local_10": "temp"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "entrypoint": "0x08003ff8",
            "current_name": "apply_security_settings_08003ff8",
            "code": "\nvoid applySecuritySettings_08003ff8(int baseAddress,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint localValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  localValue = *(uint *)(baseAddress + 4);\n  value1 = *parameters;\n  value2 = paramValue2;\n  if (baseAddress == 0x40012c00) {\n    localValue = paramValue3 << 6 | localValue & 0xffffbfff;\n  }\n  *(uint *)(baseAddress + 4) = localValue;\n  *(uint *)(baseAddress + 0x1c) = value1 << 8 | *(uint *)(baseAddress + 0x1c) & 0xffff8cff;\n  *(int *)(baseAddress + 0x40) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = value2 << 0xc | *(uint *)(baseAddress + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff8": "apply_security_settings_08003ff8",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "localValue",
                "param_2[2]": "paramValue2",
                "param_2[5]": "paramValue3"
            },
            "calling": [
                "FUN_08003908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040a0": {
            "entrypoint": "0x080040a0",
            "current_name": "update_params_080040a0",
            "code": "\nvoid updateParams_080040a0(int param_ptr,uint value,int shift_amount)\n\n{\n  uint prev_value;\n  \n  prev_value = *(uint *)(param_ptr + 0x20);\n  *(uint *)(param_ptr + 0x20) = *(uint *)(param_ptr + 0x20) & 0xfffffffe;\n  *(uint *)(param_ptr + 0x18) = shift_amount << 4 | *(uint *)(param_ptr + 0x18) & 0xffffff0f;\n  *(uint *)(param_ptr + 0x20) = value | prev_value & 0xfffffff5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040a0": "update_params_080040a0",
                "param_1": "param_ptr",
                "param_2": "value",
                "param_3": "shift_amount",
                "uVar1": "prev_value"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004104": {
            "entrypoint": "0x08004104",
            "current_name": "update_params_08004104",
            "code": "\nvoid updateParams_08004104(int ptr,int value1,int value2)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & 0xffffffef;\n  *(uint *)(ptr + 0x18) = value2 << 0xc | *(uint *)(ptr + 0x18) & 0xffff0fff;\n  *(uint *)(ptr + 0x20) = value1 << 4 | *(uint *)(ptr + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004104": "update_params_08004104",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800416a": {
            "entrypoint": "0x0800416a",
            "current_name": "update_param_and_flags_0800416a",
            "code": "\nvoid updateParamAndFlags_0800416a(int baseAddress,ushort value)\n\n{\n  *(uint *)(baseAddress + 8) = *(uint *)(baseAddress + 8) & 0xffffff8f | (uint)(value | 7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800416a": "update_param_and_flags_0800416a",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a8": {
            "entrypoint": "0x080041a8",
            "current_name": "update_param_with_flags_080041a8",
            "code": "\nvoid updateParamWithFlags_080041a8(int dataPointer,uint valueA,uint valueB,int valueC)\n\n{\n  *(uint *)(dataPointer + 8) = valueA | valueC << 8 | valueB | *(uint *)(dataPointer + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a8": "update_param_with_flags_080041a8",
                "param_1": "dataPointer",
                "param_2": "valueA",
                "param_3": "valueB",
                "param_4": "valueC"
            },
            "calling": [
                "FUN_08003a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ea": {
            "entrypoint": "0x080041ea",
            "current_name": "set_bit_value_080041ea",
            "code": "\nvoid setBitValue_080041ea(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041ea": "set_bit_value_080041ea",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080036a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800422e": {
            "entrypoint": "0x0800422e",
            "current_name": "set_flag_value_0800422e",
            "code": "\nundefined4 setFlagValue_0800422e(int *flagPtr,uint *dataPtr)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(flagPtr + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(flagPtr + 0xf) = 1;\n    *(uint *)(*flagPtr + 0x44) =\n         dataPtr[6] |\n         (dataPtr[6] |\n         (dataPtr[5] |\n         (dataPtr[4] |\n         (*dataPtr | (dataPtr[1] | (dataPtr[2] | dataPtr[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(flagPtr + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800422e": "set_flag_value_0800422e",
                "param_1": "flagPtr",
                "param_2": "dataPtr",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042de": {
            "entrypoint": "0x080042de",
            "current_name": "update_flags_080042de",
            "code": "\nundefined4 updateFlags_080042de(int *flags,uint *newFlags)\n\n{\n  undefined4 returnValue;\n  \n  if (*(char *)(flags + 0xf) == '\\x01') {\n    returnValue = 2;\n  }\n  else {\n    *(undefined *)(flags + 0xf) = 1;\n    *(undefined *)((int)flags + 0x3d) = 2;\n    *(uint *)(*flags + 4) = *(uint *)(*flags + 4) & 0xffffff8f;\n    *(uint *)(*flags + 4) = *newFlags | *(uint *)(*flags + 4);\n    *(uint *)(*flags + 8) = *(uint *)(*flags + 8) & 0xffffff7f;\n    *(uint *)(*flags + 8) = newFlags[1] | *(uint *)(*flags + 8);\n    *(undefined *)((int)flags + 0x3d) = 1;\n    *(undefined *)(flags + 0xf) = 0;\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080042de": "update_flags_080042de",
                "param_1": "flags",
                "param_2": "newFlags",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004366": {
            "entrypoint": "0x08004366",
            "current_name": "FUNC_08004366",
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004378": {
            "entrypoint": "0x08004378",
            "current_name": "FUNC_08004378",
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "calling": [
                "FUN_080036f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800438a": {
            "entrypoint": "0x0800438a",
            "current_name": "initialize_data_structure_0800438a",
            "code": "\nundefined4 initializeDataStructure_0800438a(int *dataStructure)\n\n{\n  undefined4 result;\n  \n  if (dataStructure == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)dataStructure + 0x39) == '\\0') {\n      *(undefined *)(dataStructure + 0xe) = 0;\n      FUNC_08004424(dataStructure);\n    }\n    *(undefined *)((int)dataStructure + 0x39) = 0x24;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) & 0xffffdfff;\n    FUN_080046ec(dataStructure);\n    *(uint *)(*dataStructure + 0x10) = *(uint *)(*dataStructure + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataStructure + 0x14) = *(uint *)(*dataStructure + 0x14) & 0xffffffd5;\n    *(uint *)(*dataStructure + 0xc) = *(uint *)(*dataStructure + 0xc) | 0x2000;\n    counter = 0;\n    *(undefined *)((int)dataStructure + 0x39) = 0x20;\n    *(undefined *)((int)dataStructure + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800438a": "initialize_data_structure_0800438a",
                "param_1": "dataStructure",
                "uVar1": "result",
                "param_1[0xf]": "counter"
            },
            "calling": [
                "FUN_08005598"
            ],
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004424": {
            "entrypoint": "0x08004424",
            "current_name": "FUNC_08004424",
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004436": {
            "entrypoint": "0x08004436",
            "current_name": "process_input_08004436",
            "code": "\nundefined4 processInput_08004436(uint **inputPointer,ushort *dataPointer,short dataLength,uint timeout)\n\n{\n  int errorCode;\n  int tempVar;\n  undefined4 returnValue;\n  ushort *dataPtr;\n  \n  if (*(char *)((int)inputPointer + 0x39) == ' ') {\n    if ((dataPointer == (ushort *)0x0) || (dataLength == 0)) {\n      returnValue = 1;\n    }\n    else if (*(char *)(inputPointer + 0xe) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(inputPointer + 0xe) = 1;\n      inputPointer[0xf] = (uint *)0x0;\n      *(undefined *)((int)inputPointer + 0x39) = 0x21;\n      errorCode = FUN_080015a0();\n      *(short *)(inputPointer + 9) = dataLength;\n      *(short *)((int)inputPointer + 0x26) = dataLength;\n      dataPtr = dataPointer;\n      while (*(short *)((int)inputPointer + 0x26) != 0) {\n        *(short *)((int)inputPointer + 0x26) = *(short *)((int)inputPointer + 0x26) + -1;\n        if (inputPointer[2] == (uint *)0x1000) {\n          do {\n            if ((**inputPointer & 0x80) == 0x80) {\n              tempVar = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (tempVar = FUN_080015a0(), (uint)(tempVar - errorCode) <= timeout))));\n          (*inputPointer)[3] = (*inputPointer)[3] & 0xfffffe5f;\n          (*inputPointer)[5] = (*inputPointer)[5] & 0xfffffffe;\n          *(undefined *)((int)inputPointer + 0x39) = 0x20;\n          *(undefined *)((int)inputPointer + 0x3a) = 0x20;\n          *(undefined *)(inputPointer + 0xe) = 0;\n          tempVar = 3;\nLAB_0800454c:\n          if (tempVar != 0) {\n            return 3;\n          }\n          (*inputPointer)[1] = *dataPtr & 0x1ff;\n          if (inputPointer[4] == (uint *)0x0) {\n            dataPtr = dataPtr + 1;\n          }\n          else {\n            dataPtr = (ushort *)((int)dataPtr + 1);\n          }\n        }\n        else {\n          do {\n            if ((**inputPointer & 0x80) == 0x80) {\n              tempVar = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (tempVar = FUN_080015a0(), (uint)(tempVar - errorCode) <= timeout))));\n          (*inputPointer)[3] = (*inputPointer)[3] & 0xfffffe5f;\n          (*inputPointer)[5] = (*inputPointer)[5] & 0xfffffffe;\n          *(undefined *)((int)inputPointer + 0x39) = 0x20;\n          *(undefined *)((int)inputPointer + 0x3a) = 0x20;\n          *(undefined *)(inputPointer + 0xe) = 0;\n          tempVar = 3;\nLAB_08004614:\n          if (tempVar != 0) {\n            return 3;\n          }\n          (*inputPointer)[1] = (uint)*(byte *)dataPtr;\n          dataPtr = (ushort *)((int)dataPtr + 1);\n        }\n      }\n      do {\n        if ((**inputPointer & 0x40) == 0x40) {\n          errorCode = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (tempVar = FUN_080015a0(), (uint)(tempVar - errorCode) <= timeout))));\n      (*inputPointer)[3] = (*inputPointer)[3] & 0xfffffe5f;\n      (*inputPointer)[5] = (*inputPointer)[5] & 0xfffffffe;\n      *(undefined *)((int)inputPointer + 0x39) = 0x20;\n      *(undefined *)((int)inputPointer + 0x3a) = 0x20;\n      *(undefined *)(inputPointer + 0xe) = 0;\n      errorCode = 3;\nLAB_080046c6:\n      if (errorCode == 0) {\n        *(undefined *)((int)inputPointer + 0x39) = 0x20;\n        *(undefined *)(inputPointer + 0xe) = 0;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 3;\n      }\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004436": "process_input_08004436",
                "param_1": "inputPointer",
                "param_2": "dataPointer",
                "param_3": "dataLength",
                "param_4": "timeout",
                "iVar1": "errorCode",
                "iVar2": "tempVar",
                "uVar3": "returnValue",
                "local_58": "dataPtr"
            },
            "calling": [
                "FUN_08004f3c"
            ],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046ec": {
            "entrypoint": "0x080046ec",
            "current_name": "calculate_values_080046ec",
            "code": "\nvoid calculateValues_080046ec(int *input)\n\n{\n  ulonglong quotient;\n  int result1;\n  int temp1;\n  uint result2;\n  int temp2;\n  undefined8 randomValue;\n  \n  *(uint *)(*input + 0x10) = value1 | *(uint *)(*input + 0x10) bitwiseAnd 0xffffcfff;\n  *(uint *)(*input + 0xc) =\n       *(uint *)(*input + 0xc) bitwiseAnd 0xffffe9f3 | value3 | value2 | value4;\n  *(uint *)(*input + 0x14) = value5 | *(uint *)(*input + 0x14) bitwiseAnd 0xfffffcff;\n  if (*input == 0x40013800) {\n    randomValue = FUN_08003540();\n    quotient = (ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(constant << 2);\n    result1 = FUN_08003540((int)randomValue,(int)((ulonglong)randomValue >> 0x20),(int)(quotient * 0x51eb851f));\n    temp1 = constant;\n    randomValue = FUN_08003540();\n    result2 = ((uint)(result1 * 0x19) / (uint)(temp1 << 2) +\n            (int)(((ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(constant << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003540((int)randomValue,(int)((ulonglong)randomValue >> 0x20),result2 * 0x51eb851f);\n    temp2 = constant;\n    temp1 = FUN_08003540();\n    *(uint *)(*input + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(temp2 << 2) +\n           (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(constant << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 bitwiseAnd 0xf) + (int)(quotient / 100) * 0x10 + (result2 / 100 bitwiseAnd 0xf0);\n  }\n  else {\n    randomValue = FUN_08003518();\n    quotient = (ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(constant << 2);\n    result1 = FUN_08003518((int)randomValue,(int)((ulonglong)randomValue >> 0x20),(int)(quotient * 0x51eb851f));\n    temp1 = constant;\n    randomValue = FUN_08003518();\n    result2 = ((uint)(result1 * 0x19) / (uint)(temp1 << 2) +\n            (int)(((ulonglong)(uint)((int)randomValue * 0x19) / (ulonglong)(uint)(constant << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003518((int)randomValue,(int)((ulonglong)randomValue >> 0x20),result2 * 0x51eb851f);\n    temp2 = constant;\n    temp1 = FUN_08003518();\n    *(uint *)(*input + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(temp2 << 2) +\n           (int)(((ulonglong)(uint)(temp1 * 0x19) / (ulonglong)(uint)(constant << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 bitwiseAnd 0xf) + (int)(quotient / 100) * 0x10 + (result2 / 100 bitwiseAnd 0xf0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046ec": "calculate_values_080046ec",
                "param_1": "input",
                "uVar1": "quotient",
                "iVar2": "result1",
                "iVar3": "temp1",
                "uVar4": "result2",
                "iVar5": "temp2",
                "uVar6": "randomValue",
                "param_1[3]": "value1",
                "param_1[2]": "value2",
                "param_1[5]": "value3",
                "param_1[4]": "value4",
                "param_1[6]": "value5",
                "param_1[1]": "constant",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_0800438a"
            ],
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800491c": {
            "entrypoint": "0x0800491c",
            "current_name": "initialize_data_0800491c",
            "code": "\nvoid initializeData_0800491c(undefined4 *outputData)\n\n{\n  undefined byteZero;\n  undefined byteTen;\n  undefined byteArray [5];\n  \n  byteZero = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&byteZero,1);\n  byteTen = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&byteTen,1);\n  byteArray[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byteArray,1);\n  *outputData = 0;\n  outputData[1] = 0;\n  outputData[2] = 0;\n  outputData[3] = 0;\n  outputData[4] = 0;\n  outputData[5] = 0;\n  outputData[6] = 0;\n  outputData[7] = 0;\n  outputData[8] = 0;\n  outputData[9] = 0;\n  outputData[10] = 0;\n  FUN_080049cc(outputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "param_1": "outputData",
                "local_13": "byteZero",
                "local_12": "byteTen",
                "local_11": "byteArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080049cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049cc": {
            "entrypoint": "0x080049cc",
            "current_name": "calculate_averages_080049cc",
            "code": "\nvoid calculateAverages_080049cc(int inputArray)\n\n{\n  undefined4 uVar1;\n  undefined4 sum1;\n  undefined4 sum2;\n  undefined4 time;\n  int count;\n  int i;\n  undefined4 maxSum1;\n  undefined4 maxSum2;\n  undefined4 maxParam1;\n  undefined4 maxParam2;\n  \n  count = 1;\n  maxParam2 = 0;\n  maxParam1 = 0;\n  maxSum2 = 0;\n  maxSum1 = 0;\n  time = (*DAT_20000a50)();\n  i = 0;\n  while( true ) {\n    if (count <= i) break;\n    sum2 = 0;\n    sum1 = 0;\n    FUN_08004ae0(inputArray);\n    FUN_08004d78(inputArray,&sum2,&sum1);\n    maxSum2 = FUN_08000aa8(maxSum2,sum2);\n    maxSum1 = FUN_08000aa8(maxSum1,sum1);\n    maxParam2 = FUN_08000aa8(maxParam2,*(undefined4 *)(inputArray + 0x10));\n    maxParam1 = FUN_08000aa8(maxParam1,*(undefined4 *)(inputArray + 0x14));\n    time = (*DAT_20000a50)();\n    i = i + 1;\n  }\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxParam2,uVar1);\n  *(undefined4 *)(inputArray + 0x1c) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxParam1,uVar1);\n  *(undefined4 *)(inputArray + 0x20) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxSum2,uVar1);\n  *(undefined4 *)(inputArray + 0x24) = uVar1;\n  uVar1 = FUN_08000c10(count);\n  uVar1 = FUN_08000e20(maxSum1,uVar1);\n  *(undefined4 *)(inputArray + 0x28) = uVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049cc": "calculate_averages_080049cc",
                "param_1": "inputArray",
                "local_2c": "sum1",
                "local_28": "sum2",
                "local_24": "time",
                "local_20": "count",
                "local_1c": "i",
                "local_18": "maxSum1",
                "local_14": "maxSum2",
                "local_10": "maxParam1",
                "local_c": "maxParam2"
            },
            "calling": [
                "FUN_0800491c"
            ],
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08004ae0",
                "FUN_08000aa8",
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "entrypoint": "0x08004ae0",
            "current_name": "copy_data_08004ae0",
            "code": "\nvoid copyData_08004ae0(undefined4 *resultArray)\n\n{\n  undefined4 returnValue;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  undefined byte5;\n  undefined byte6;\n  undefined byte7;\n  undefined byte8;\n  undefined byte9;\n  undefined byte10;\n  undefined byte11;\n  undefined byte12;\n  undefined byte13;\n  undefined byte14;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&byte1,0xe);\n  short6 = CONCAT11(byte3,byte4);\n  short5 = CONCAT11(byte5,byte6);\n  short4 = CONCAT11(byte7,byte8);\n  short3 = CONCAT11(byte9,byte10);\n  short2 = CONCAT11(byte11,byte12);\n  short1 = CONCAT11(byte13,byte14);\n  returnValue = FUN_08000c10((int)CONCAT11(byte1,byte2));\n  *resultArray = returnValue;\n  returnValue = FUN_08000c10((int)short6);\n  resultArray[1] = returnValue;\n  returnValue = FUN_08000c10((int)short5);\n  resultArray[2] = returnValue;\n  returnValue = FUN_08000c10((int)short4);\n  resultArray[3] = returnValue;\n  returnValue = FUN_08000c10((int)short3);\n  resultArray[4] = returnValue;\n  returnValue = FUN_08000c10((int)short2);\n  resultArray[5] = returnValue;\n  returnValue = FUN_08000c10((int)short1);\n  resultArray[6] = returnValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ae0": "copy_data_08004ae0",
                "param_1": "resultArray",
                "local_2c": "byte1",
                "local_2b": "byte2",
                "local_2a": "byte3",
                "local_29": "byte4",
                "local_28": "byte5",
                "local_27": "byte6",
                "local_26": "byte7",
                "local_25": "byte8",
                "local_24": "byte9",
                "local_23": "byte10",
                "local_22": "byte11",
                "local_21": "byte12",
                "local_20": "byte13",
                "local_1f": "byte14",
                "local_1e": "short1",
                "local_1c": "short2",
                "local_1a": "short3",
                "local_18": "short4",
                "local_16": "short5",
                "local_14": "short6",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080049cc",
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "entrypoint": "0x08004bd8",
            "current_name": "calculate_result_08004bd8",
            "code": "\nvoid calculateResult_08004bd8(int inputData,undefined4 *result)\n\n{\n  undefined4 tempVar1;\n  undefined8 tempVar2;\n  undefined8 tempVar3;\n  \n  tempVar1 = FUN_08000aa4(*(undefined4 *)(inputData + 0x10),*(undefined4 *)(inputData + 0x1c));\n  tempVar2 = FUN_08000418(DAT_200009e4);\n  tempVar3 = FUN_08000418(tempVar1);\n  tempVar3 = FUN_080004c8((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20),0x83f5c366,0x3f340215);\n  tempVar2 = FUN_0800015c((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),(int)tempVar3,\n                       (int)((ulonglong)tempVar3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20));\n  tempVar2 = FUN_08000418(*(undefined4 *)(inputData + 4));\n  tempVar2 = FUN_0800071c((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0,0x40b00000);\n  tempVar3 = FUN_08000418(*(undefined4 *)(inputData + 8));\n  tempVar3 = FUN_0800071c((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20),0,0x40b00000);\n  tempVar2 = thunk_FUN_08005838((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),(int)tempVar3,\n                             (int)((ulonglong)tempVar3 >> 0x20));\n  tempVar2 = FUN_080004c8((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0,0x40668000);\n  tempVar2 = FUN_0800071c((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0x54442d18,0x400921fb);\n  tempVar3 = FUN_08000418(*(undefined4 *)(inputData + 0x24));\n  tempVar2 = FUN_08000158((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),(int)tempVar3,\n                       (int)((ulonglong)tempVar3 >> 0x20));\n  tempVar2 = FUN_0800015c((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0,0x40568000);\n  tempVar1 = FUN_080009fc((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    tempVar2 = FUN_08000418(DAT_200009e4);\n    tempVar2 = FUN_080004c8((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),0x9999999a,0x3fe99999);\n    tempVar3 = FUN_08000418(tempVar1);\n    tempVar3 = FUN_080004c8((int)tempVar3,(int)((ulonglong)tempVar3 >> 0x20),0x9999999a,0x3fc99999);\n    tempVar2 = FUN_0800015c((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20),(int)tempVar3,\n                         (int)((ulonglong)tempVar3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)tempVar2,(int)((ulonglong)tempVar2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = tempVar1;\n  }\n  *result = DAT_200009e4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "inputData",
                "param_2": "result",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08000aa4",
                "thunk_FUN_08005838",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d78": {
            "entrypoint": "0x08004d78",
            "current_name": "calculate_parameters_08004d78",
            "code": "\nvoid calculate_parameters_08004d78(undefined4 *input_values,undefined4 *output_value_1,undefined4 *output_value_2)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined8 temp_value_1;\n  undefined8 temp_value_2;\n  \n  result_1 = FUN_08000e20(*input_values,0x45800000);\n  result_2 = FUN_08000e20(input_values[1],0x45800000);\n  result_3 = FUN_08000e20(input_values[2],0x45800000);\n  temp_value_1 = FUN_08000418(result_2);\n  temp_value_2 = FUN_08000418(result_3);\n  temp_value_1 = thunk_FUN_08005838((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20),(int)temp_value_2,\n                             (int)((ulonglong)temp_value_2 >> 0x20));\n  temp_value_1 = FUN_080004c8((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20),0,0x40668000);\n  temp_value_1 = FUN_0800071c((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20),0x54442d18,0x400921fb);\n  result_2 = FUN_080009fc((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20));\n  temp_value_1 = FUN_08000418(result_1);\n  temp_value_2 = FUN_08000418(result_3);\n  temp_value_1 = thunk_FUN_08005838((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20),(int)temp_value_2,\n                             (int)((ulonglong)temp_value_2 >> 0x20));\n  temp_value_1 = FUN_080004c8((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20),0,0x40668000);\n  temp_value_1 = FUN_0800071c((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20),0x54442d18,0x400921fb);\n  result_1 = FUN_080009fc((int)temp_value_1,(int)((ulonglong)temp_value_1 >> 0x20));\n  *output_value_1 = result_2;\n  *output_value_2 = result_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d78": "calculate_parameters_08004d78",
                "param_1": "input_values",
                "param_2": "output_value_1",
                "param_3": "output_value_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "temp_value_1",
                "uVar5": "temp_value_2"
            },
            "calling": [
                "FUN_080049cc"
            ],
            "called": [
                "FUN_08000e20",
                "thunk_FUN_08005838",
                "FUN_080004c8",
                "FUN_080009fc",
                "FUN_08000418",
                "FUN_0800071c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "entrypoint": "0x08004e6c",
            "current_name": "send_software_interrupt_08004e6c",
            "code": "\nvoid sendSoftwareInterrupt_08004e6c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e6c": "send_software_interrupt_08004e6c"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "initialize_if_needed_08004e74",
            "code": "\nundefined4 initializeIfNeeded_08004e74(undefined4 input)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_200009f0 == 0) {\n    returnValue = FUN_08004e6c(1,input,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "initialize_if_needed_08004e74",
                "param_1": "input",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08004e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "entrypoint": "0x08004ea4",
            "current_name": "initialize_data_08004ea4",
            "code": "\nvoid initializeData_08004ea4(undefined data1,undefined data2,undefined4 size,undefined2 flag)\n\n{\n  FUN_08001ccc(&DAT_20000a88,data1,data2,1,size,flag,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ea4": "initialize_data_08004ea4",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "size",
                "param_4": "flag"
            },
            "calling": [],
            "called": [
                "FUN_08001ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "entrypoint": "0x08004ee8",
            "current_name": "initialize_data_08004ee8",
            "code": "\nvoid initializeData_08004ee8(undefined dataPointer,undefined size,undefined4 count,undefined2 value)\n\n{\n  FUN_08001f6c(&DAT_20000a88,dataPointer,size,1,count,value,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ee8": "initialize_data_08004ee8",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "count",
                "param_4": "value"
            },
            "calling": [],
            "called": [
                "FUN_08001f6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "entrypoint": "0x08004f2c",
            "current_name": "initialize_application_08004f2c",
            "code": "\nundefined4 initializeApplication_08004f2c(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_080015a0();\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08004f2c": "initialize_application_08004f2c",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_080015a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "entrypoint": "0x08004f3c",
            "current_name": "initialize_data_08004f3c",
            "code": "\nvoid initializeData_08004f3c(undefined4 dataBuffer,undefined2 dataLength)\n\n{\n  FUN_08004436(&DAT_20000adc,dataBuffer,dataLength,0x32);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f3c": "initialize_data_08004f3c",
                "param_1": "dataBuffer",
                "param_2": "dataLength"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08004436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "initialize_memory_08004f60",
            "code": "\nvoid initializeMemory_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f60": "initialize_memory_08004f60"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005d68"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f78": {
            "entrypoint": "0x08004f78",
            "current_name": "process_audio_data_08004f78",
            "code": "\nvoid processAudioData_08004f78(void)\n\n{\n  undefined4 temp1;\n  int result;\n  undefined4 temp2;\n  uint temp3;\n  undefined8 pitch;\n  byte pitchValue;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitch = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitch,(int)((ulonglong)pitch >> 0x20));\n  temp1 = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,temp1);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  temp1 = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(temp1,DAT_20000b5c);\n  temp1 = FUN_08000c10(DAT_20000010);\n  result = FUN_08000ff4(temp1,DAT_20000b5c);\n  if (result == 0) {\n    temp1 = FUN_08000c10(DAT_200009f4);\n    result = FUN_08001030(temp1,DAT_20000b5c);\n    if (result != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  temp3 = DAT_20000a08 ^ 0x80000000;\n  temp1 = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(temp3,temp1);\n  temp1 = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  temp1 = FUN_08000aa8(temp1,DAT_20000a58);\n  temp2 = FUN_08000c10(DAT_20000010);\n  result = FUN_08001030(temp1,temp2);\n  if (result == 0) {\n    temp2 = FUN_08000c10(DAT_200009f4);\n    result = FUN_08000ff4(temp1,temp2);\n    if (result == 0) {\n      pitchValue = FUN_08001044(temp1);\n    }\n    else {\n      pitchValue = DAT_200009f4;\n    }\n  }\n  else {\n    pitchValue = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,result != 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,result == 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,result != 0);\n  result = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,result == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitchValue;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitchValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f78": "process_audio_data_08004f78",
                "uVar1": "temp1",
                "iVar2": "result",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "pitch",
                "local_11": "pitchValue"
            },
            "calling": [
                "FUN_080036f8",
                "FUN_080017b4"
            ],
            "called": [
                "FUN_08001044",
                "FUN_08004f60",
                "FUN_08005dfc",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08004bd8",
                "FUN_08005e40",
                "FUN_08000c08",
                "FUN_08000aa4",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08000ff4",
                "FUN_08004f3c",
                "FUN_08000c10",
                "FUN_08001030",
                "FUN_08000418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005224": {
            "entrypoint": "0x08005224",
            "current_name": "initialize_program_08005224",
            "code": "\nvoid initializeProgram_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005224": "initialize_program_08005224"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005348",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080052a0",
                "FUN_08004e74",
                "FUN_080036a8",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_080014f0",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052a0": {
            "entrypoint": "0x080052a0",
            "current_name": "initialize_program_080052a0",
            "code": "\nvoid initializeProgram_080052a0(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined4 errorCode;\n  undefined4 count;\n  undefined4 value;\n  undefined4 temp;\n  undefined4 temp2;\n  undefined4 flag;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  undefined4 constant6;\n  \n  flag = 1;\n  constant1 = 0x10000;\n  constant2 = 0;\n  constant3 = 1;\n  constant4 = 2;\n  constant5 = 0x10000;\n  constant6 = 0x1c0000;\n  iVar1 = FUN_08002d98(&flag);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  errorCode = 0xf;\n  count = 2;\n  value = 0x80;\n  temp = 0;\n  temp2 = 0;\n  iVar1 = FUN_08003260(&errorCode,2);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  uVar2 = FUN_08003504();\n  FUN_08001762((uint)uVar2 / 1000,(int)((ulonglong)uVar2 >> 0x20),(uint)uVar2 * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052a0": "initialize_program_080052a0",
                "local_44": "errorCode",
                "local_40": "count",
                "local_3c": "value",
                "local_38": "temp",
                "local_34": "temp2",
                "local_30": "flag",
                "local_2c": "constant1",
                "local_28": "constant2",
                "local_20": "constant3",
                "local_14": "constant4",
                "local_10": "constant5",
                "local_c": "constant6"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_0800177c",
                "FUN_08003260",
                "FUN_08005674",
                "FUN_08001762",
                "FUN_0800172a",
                "FUN_08003504",
                "FUN_08002d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005348": {
            "entrypoint": "0x08005348",
            "current_name": "initialize_data_08005348",
            "code": "\nvoid initializeData_08005348(void)\n\n{\n  int returnCode;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  returnCode = FUN_08001ab0(&DAT_20000a88);\n  if (returnCode != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "returnCode"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053b0": {
            "entrypoint": "0x080053b0",
            "current_name": "initialize_application_080053b0",
            "code": "\nvoid initializeApplication_080053b0(void)\n\n{\n  int iVar1;\n  undefined4 memorySize;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  undefined4 localVariable7;\n  undefined4 localVariable8;\n  undefined4 localVariable9;\n  undefined4 localVariable10;\n  undefined4 localVariable11;\n  undefined4 localVariable12;\n  undefined4 localVariable13;\n  undefined4 localVariable14;\n  undefined4 localVariable15;\n  undefined4 localArray [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  iVar1 = FUN_080035a4(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  localArray[0] = 0x1000;\n  iVar1 = FUN_08003a94(&DAT_20000b1c,localArray);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  iVar1 = FUN_08003640(&DAT_20000b1c);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  localVariable14 = 0;\n  localVariable15 = 0;\n  iVar1 = FUN_080042de(&DAT_20000b1c,&localVariable14);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  localVariable7 = 0x60;\n  localVariable8 = 0;\n  localVariable9 = 0;\n  localVariable10 = 0;\n  localVariable11 = 0;\n  localVariable12 = 0;\n  localVariable13 = 0;\n  iVar1 = FUN_08003908(&DAT_20000b1c,&localVariable7,0);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  iVar1 = FUN_08003908(&DAT_20000b1c,&localVariable7,0xc);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  memorySize = 0;\n  localVariable1 = 0;\n  localVariable2 = 0;\n  localVariable3 = 0;\n  localVariable4 = 0;\n  localVariable5 = 0x2000;\n  localVariable6 = 0;\n  iVar1 = FUN_0800422e(&DAT_20000b1c,&memorySize);\n  if (iVar1 != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053b0": "initialize_application_080053b0",
                "local_58": "memorySize",
                "local_54": "localVariable1",
                "local_50": "localVariable2",
                "local_4c": "localVariable3",
                "local_48": "localVariable4",
                "local_44": "localVariable5",
                "local_40": "localVariable6",
                "local_3c": "localVariable7",
                "local_38": "localVariable8",
                "local_34": "localVariable9",
                "local_30": "localVariable10",
                "local_2c": "localVariable11",
                "local_28": "localVariable12",
                "local_24": "localVariable13",
                "local_20": "localVariable14",
                "local_1c": "localVariable15",
                "local_18": "localArray"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005500": {
            "entrypoint": "0x08005500",
            "current_name": "initialize_data_08005500",
            "code": "\nvoid initializeData_08005500(void)\n\n{\n  int result;\n  undefined4 bufferSize;\n  undefined4 bufferValue;\n  undefined4 local_18 [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = FUN_080035a4(&DAT_20000b60);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  local_18[0] = 0x1000;\n  result = FUN_08003a94(&DAT_20000b60,local_18);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  bufferSize = 0x20;\n  bufferValue = 0;\n  result = FUN_080042de(&DAT_20000b60,&bufferSize);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005500": "initialize_data_08005500",
                "local_20": "bufferSize",
                "local_1c": "bufferValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08003a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005598": {
            "entrypoint": "0x08005598",
            "current_name": "initialize_globals_08005598",
            "code": "\nvoid initializeGlobals_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = FUN_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005598": "initialize_globals_08005598",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055f4": {
            "entrypoint": "0x080055f4",
            "current_name": "initialize_data_080055f4",
            "code": "\n\n\nvoid initializeData_080055f4(void)\n\n{\n  undefined4 dataLength;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  dataLength = 0x1e;\n  parameter1 = 1;\n  parameter2 = 2;\n  FUN_080017c4(0x40010800,&dataLength);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055f4": "initialize_data_080055f4",
                "local_18": "dataLength",
                "local_14": "parameter1",
                "local_c": "parameter2"
            },
            "calling": [
                "FUN_08005224"
            ],
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005674": {
            "entrypoint": "0x08005674",
            "current_name": "endless_loop_08005674",
            "code": "\nvoid endlessLoop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005674": "endless_loop_08005674"
            },
            "calling": [
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005680": {
            "entrypoint": "0x08005680",
            "current_name": "initialize_memory_08005680",
            "code": "\nvoid initializeMemory_08005680(int *initialValuePtr)\n\n{\n  undefined4 memorySize;\n  undefined4 flag1;\n  undefined4 flag2;\n  \n  if (*initialValuePtr == 0x40012c00) {\n    memorySize = 0x900;\n    flag1 = 2;\n    flag2 = 2;\n    FUN_080017c4(0x40010800,&memorySize);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005680": "initialize_memory_08005680",
                "param_1": "initialValuePtr",
                "local_18": "memorySize",
                "local_14": "flag1",
                "local_c": "flag2"
            },
            "calling": [
                "FUN_080053b0"
            ],
            "called": [
                "FUN_080017c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005704": {
            "entrypoint": "0x08005704",
            "current_name": "initialize_binary_08005704",
            "code": "\nvoid initialize_binary_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005704": "initialize_binary_08005704"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_080017b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "initialize_data_08005714",
            "code": "\nvoid initializeData_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005714": "initialize_data_08005714"
            },
            "calling": [],
            "called": [
                "FUN_080036f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "allocate_memory_08005728",
            "code": "\nundefined * allocateMemory_08005728(int size)\n\n{\n  undefined4 *ptr;\n  undefined *allocatedMemory;\n  undefined stackBuffer [4];\n  int remainingSize;\n  undefined *currentMemory;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  currentMemory = DAT_20000a10;\n  if (stackBuffer < DAT_20000a10 + size) {\n    remainingSize = size;\n    ptr = (undefined4 *)FUN_08005d14();\n    *ptr = 0xc;\n    allocatedMemory = (undefined *)0xffffffff;\n  }\n  else {\n    allocatedMemory = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return allocatedMemory;\n}\n\n",
            "renaming": {
                "FUN_08005728": "allocate_memory_08005728",
                "param_1": "size",
                "puVar1": "ptr",
                "puVar2": "allocatedMemory",
                "auStack_18": "stackBuffer",
                "local_14": "remainingSize",
                "local_c": "currentMemory"
            },
            "calling": [
                "FUN_08009744"
            ],
            "called": [
                "FUN_08005d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005780": {
            "entrypoint": "0x08005780",
            "current_name": "initialize_registers_08005780",
            "code": "\n\n\nvoid initializeRegisters_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005780": "initialize_registers_08005780"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080057e8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005224",
                "FUN_08005d20",
                "FUN_08005780"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "entrypoint": "0x08005834",
            "current_name": "calculate_result_thunk_08005838",
            "code": "\nuint calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp4 | (-input3 | input3) >> 0x1f)) ||\n     (temp5 = input2 & 0x7fffffff, 0x7ff00000 < (temp5 | (-input1 | input1) >> 0x1f))) {\n    temp4 = FUN_0800015c(input3,input4,input1,input2);\n    return temp4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp4 = FUN_080059f0();\n    return temp4;\n  }\n  temp3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp5 | input1) == 0) {\n    if (temp3 == 2) {\n      return 0x54442d18;\n    }\n    if (temp3 != 3) {\n      return input1;\n    }\n  }\n  else if ((temp4 | input3) != 0) {\n    if (temp4 == 0x7ff00000) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (temp3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (temp3 == 2) {\n        return 0x54442d18;\n      }\n      if (temp3 != 3) {\n        if (temp3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp5 != 0x7ff00000) {\n      temp1 = (int)(temp5 - temp4) >> 0x14;\n      if (temp1 < 0x3d) {\n        if (((int)input4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n          temp6 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp6 = FUN_080059f0();\n        }\n      }\n      else {\n        temp6 = 0x3ff921fb54442d18;\n      }\n      temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n      temp4 = (uint)temp6;\n      if (temp3 == 1) {\n        return temp4;\n      }\n      if (temp3 == 2) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n        return temp4;\n      }\n      if (temp3 != 0) {\n        temp6 = FUN_08000158(temp4,temp2,0x33145c07,0x3ca1a626);\n        temp4 = FUN_08000158((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n        return temp4;\n      }\n      return temp4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005838": "calculate_result_thunk_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "called": [
                "FUN_08005838"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005838": {
            "entrypoint": "0x08005838",
            "current_name": "calculate_result_08005838",
            "code": "\nuint calculateResult_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result;\n  uint flag;\n  uint temp1;\n  uint temp2;\n  undefined8 temp3;\n  \n  temp1 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp1 | (-input3 | input3) >> 0x1f)) ||\n     (temp2 = input2 & 0x7fffffff, 0x7ff00000 < (temp2 | (-input1 | input1) >> 0x1f))) {\n    temp1 = FUN_0800015c(input3,input4,input1,input2);\n    return temp1;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    temp1 = FUN_080059f0();\n    return temp1;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((temp2 | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((temp1 | input3) != 0) {\n    if (temp1 == 0x7ff00000) {\n      if (temp2 == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (temp2 != 0x7ff00000) {\n      difference = (int)(temp2 - temp1) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n          temp3 = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          temp3 = FUN_080059f0();\n        }\n      }\n      else {\n        temp3 = 0x3ff921fb54442d18;\n      }\n      result = (undefined4)((ulonglong)temp3 >> 0x20);\n      temp1 = (uint)temp3;\n      if (flag == 1) {\n        return temp1;\n      }\n      if (flag == 2) {\n        temp3 = FUN_08000158(temp1,result,0x33145c07,0x3ca1a626);\n        temp1 = FUN_08000158(0x54442d18,0x400921fb,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n        return temp1;\n      }\n      if (flag != 0) {\n        temp3 = FUN_08000158(temp1,result,0x33145c07,0x3ca1a626);\n        temp1 = FUN_08000158((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x54442d18,0x400921fb);\n        return temp1;\n      }\n      return temp1;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "difference",
                "uVar2": "result",
                "uVar3": "flag",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3"
            },
            "calling": [
                "thunk_FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f0": {
            "entrypoint": "0x080059f0",
            "current_name": "calculate_result_080059f0",
            "code": "\nundefined8 calculateResult_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint absInput2;\n  int switchCase;\n  undefined8 tempResult;\n  undefined8 finalResult;\n  \n  finalResult = CONCAT44(input2,input1);\n  absInput2 = input2 & 0x7fffffff;\n  if (absInput2 < 0x44100000) {\n    if (absInput2 < 0x3fdc0000) {\n      if (absInput2 < 0x3e200000) {\n        tempResult = FUN_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        switchCase = FUN_080009e8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        if (switchCase != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      switchCase = -1;\n    }\n    else {\n      finalResult = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)finalResult >> 0x20);\n      result1 = (undefined4)finalResult;\n      if (absInput2 < 0x3ff30000) {\n        if (absInput2 < 0x3fe60000) {\n          finalResult = FUN_0800015c(result1,result4,result1,result4);\n          finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0,0x3ff00000);\n          tempResult = FUN_0800015c(result1,result4,0,0x40000000);\n          finalResult = FUN_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                                (int)((ulonglong)tempResult >> 0x20));\n          switchCase = 0;\n        }\n        else {\n          finalResult = FUN_08000158(result1,result4,0,0x3ff00000);\n          tempResult = FUN_0800015c(result1,result4,0,0x3ff00000);\n          finalResult = FUN_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                                (int)((ulonglong)tempResult >> 0x20));\n          switchCase = 1;\n        }\n      }\n      else if (absInput2 < 0x40038000) {\n        finalResult = FUN_08000158(result1,result4,0,0x3ff80000);\n        tempResult = FUN_080004c8(result1,result4,0,0x3ff80000);\n        tempResult = FUN_0800015c((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        finalResult = FUN_0800071c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                              (int)((ulonglong)tempResult >> 0x20));\n        switchCase = 2;\n      }\n      else {\n        finalResult = FUN_0800071c(0,0xbff00000,result1,result4);\n        switchCase = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result5 = (undefined4)finalResult;\n    finalResult = FUN_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result1 = (undefined4)finalResult;\n    finalResult = FUN_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)finalResult >> 0x20);\n    result4 = (undefined4)finalResult;\n    finalResult = FUN_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x24760deb,0x3fa97b4b);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0xc54c206e,0x3fb745cd);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x920083ff,0x3fc24924);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),0x5555550d,0x3fd55555);\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result1,result2);\n    tempResult = FUN_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x52defd9a,0x3fadde2d);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xfe231671,0x3fbc71c6);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    tempResult = FUN_08000158((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9998ebc4,0x3fc99999);\n    tempResult = FUN_080004c8((int)tempResult,(int)((ulonglong)tempResult >> 0x20),result4,result3);\n    finalResult = FUN_0800015c((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                          (int)((ulonglong)tempResult >> 0x20));\n    finalResult = FUN_080004c8((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)finalResult >> 0x20);\n    if (switchCase == -1) {\n      finalResult = FUN_08000158(result5,result6,(int)finalResult,result1);\n      return finalResult;\n    }\n    switchCase = switchCase * 8;\n    finalResult = FUN_08000158((int)finalResult,result1,*(undefined4 *)(&UNK_08009ee8 + switchCase),\n                          *(undefined4 *)(&UNK_08009eec + switchCase));\n    finalResult = FUN_08000158((int)finalResult,(int)((ulonglong)finalResult >> 0x20),result5,result6);\n    finalResult = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + switchCase),\n                          *(undefined4 *)(&UNK_08009ecc + switchCase),(int)finalResult,\n                          (int)((ulonglong)finalResult >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)finalResult >> 0x20) + -0x80000000,(int)finalResult);\n    }\n  }\n  else {\n    if ((absInput2 < 0x7ff00001) && ((absInput2 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    finalResult = FUN_0800015c(input1,input2,input1,input2,input4);\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "absInput2",
                "iVar8": "switchCase",
                "uVar9": "tempResult",
                "uVar10": "finalResult"
            },
            "calling": [
                "FUN_08005838"
            ],
            "called": [
                "FUN_08005d0c",
                "FUN_080009e8",
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "entrypoint": "0x08005d0c",
            "current_name": "FUNC_08005d0c",
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "calling": [
                "FUN_08005838",
                "FUN_080059f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005d14": {
            "entrypoint": "0x08005d14",
            "current_name": "get_data_value_08005d14",
            "code": "\nundefined4 get_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "renaming": {
                "FUN_08005d14": "get_data_value_08005d14"
            },
            "calling": [
                "FUN_08005728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d20": {
            "entrypoint": "0x08005d20",
            "current_name": "execute_function_array_08005d20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid executeFunctionArray_08005d20(void)\n\n{\n  int counter;\n  code **functionPointerArray;\n  \n  FUNC_08009e68();\n  counter = 0;\n  functionPointerArray = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d20": "execute_function_array_08005d20",
                "iVar1": "counter",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d68": {
            "entrypoint": "0x08005d68",
            "current_name": "fill_memory_with_pattern_08005d68",
            "code": "\nvoid fillMemoryWithPattern_08005d68(undefined4 *memory,undefined pattern,uint size)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  uint count;\n  undefined4 pattern32;\n  bool isZero;\n  \n  if (((uint)memory & 3) != 0) {\n    count = size - 1;\n    ptr1 = memory;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      memory = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = pattern;\n      size = count;\n      if (((uint)memory & 3) == 0) break;\n      isZero = count == 0;\n      count = count - 1;\n      ptr1 = memory;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern32 = CONCAT22(CONCAT11(pattern,pattern),CONCAT11(pattern,pattern));\n    count = size;\n    ptr1 = memory;\n    if (0xf < size) {\n      count = size - 0x10;\n      ptr1 = memory + 4;\n      do {\n        ptr1[-4] = pattern32;\n        ptr1[-3] = pattern32;\n        ptr1[-2] = pattern32;\n        ptr1[-1] = pattern32;\n        ptr1 = ptr1 + 4;\n      } while (ptr1 != (undefined4 *)((int)memory + (count & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      memory = memory + ((count >> 4) + 1) * 4;\n      count = size;\n      ptr1 = memory;\n      if (size < 4) goto LAB_08005de4;\n    }\n    do {\n      size = size - 4;\n      *memory = pattern32;\n      memory = memory + 1;\n    } while (3 < size);\n    memory = (undefined4 *)((int)ptr1 + (count - 4 & 0xfffffffc) + 4);\n    size = count & 3;\n  }\nLAB_08005de4:\n  if (size != 0) {\n    ptr1 = memory;\n    do {\n      ptr2 = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = pattern;\n      ptr1 = ptr2;\n    } while ((undefined4 *)(size + (int)memory) != ptr2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d68": "fill_memory_with_pattern_08005d68",
                "param_1": "memory",
                "param_2": "pattern",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "count",
                "uVar4": "pattern32",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_08004f60",
                "FUN_08009980"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "entrypoint": "0x08005dfc",
            "current_name": "initialize_buffer_08005dfc",
            "code": "\nvoid initializeBuffer_08005dfc(undefined *buffer,undefined4 size,undefined4 value1,undefined4 value2)\n\n{\n  undefined *bufferPtrArray [2];\n  undefined4 maxSize1;\n  undefined4 constantValue;\n  undefined *currentBufferPtr;\n  undefined4 maxSize2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  maxSize2 = 0x7fffffff;\n  maxSize1 = 0x7fffffff;\n  constantValue = 0xffff0208;\n  bufferPtrArray[0] = buffer;\n  currentBufferPtr = buffer;\n  value3 = value1;\n  value4 = value2;\n  FUNC_08005e9c(DAT_2000001c,bufferPtrArray,size,&value3);\n  *bufferPtrArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005dfc": "initialize_buffer_08005dfc",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "local_80": "bufferPtrArray",
                "local_78": "maxSize1",
                "uStack_74": "constantValue",
                "local_70": "currentBufferPtr",
                "local_6c": "maxSize2",
                "uStack_8": "value3",
                "uStack_4": "value4"
            },
            "calling": [
                "FUN_08004f78"
            ],
            "called": [
                "FUN_08005e9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e40": {
            "entrypoint": "0x08005e40",
            "current_name": "compute_lz_count_08005e40",
            "code": "\nint computeLZCount_08005e40(uint input)\n\n{\n  int alignmentOffset;\n  uint *alignedAddress;\n  uint data;\n  \n  alignedAddress = (uint *)(input & 0xfffffffc);\n  alignmentOffset = -(input & 3);\n  data = *alignedAddress;\n  if ((input & 3) != 0) {\n    data = data | 0xffffffffU >> ((alignmentOffset + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    alignedAddress = alignedAddress + 1;\n    data = data + 0xfefefeff & ~data & 0x80808080;\n    if (data != 0) break;\n    data = *alignedAddress;\n    alignmentOffset = alignmentOffset + 4;\n  }\n  return alignmentOffset + (0x1fU - leadingZeroCount(data & -data) >> 3);\n}\n\n",
            "renaming": {
                "FUN_08005e40": "compute_lz_count_08005e40",
                "param_1": "input",
                "iVar1": "alignmentOffset",
                "puVar2": "alignedAddress",
                "uVar3": "data",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_08004f78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "entrypoint": "0x08005e9c",
            "current_name": "FUNC_08005e9c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "calling": [
                "FUN_08005dfc"
            ],
            "called": [
                "FUN_080097cc",
                "FUN_080079e8",
                "FUN_0800901c",
                "FUN_080011ec",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_08005e40",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_080009ac",
                "FUN_08008ad4",
                "FUN_080088ec",
                "FUN_08000998",
                "FUN_080004c8",
                "FUN_080009c0",
                "FUN_08009768",
                "FUN_080096e0",
                "FUN_08008af8",
                "FUN_08000158"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078a0": {
            "entrypoint": "0x080078a0",
            "current_name": "FUNC_080078a0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "calling": [
                "FUN_08005d20"
            ],
            "called": [
                "FUN_080098c0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080078c0": {
            "entrypoint": "0x080078c0",
            "current_name": "divided_sum_080078c0",
            "code": "\nuint dividedSum_080078c0(int inputArray1,int inputArray2)\n\n{\n  uint sum;\n  uint *ptrArray1;\n  int carry;\n  int array1Length;\n  int index;\n  uint divisor;\n  uint *ptrArray2;\n  uint *ptrArray1;\n  uint *ptrArray2Last;\n  uint temp;\n  uint *ptrArray2Next;\n  uint *ptrArray1Next;\n  \n  array1Length = *(int *)(inputArray2 + 0x10);\n  if (*(int *)(inputArray1 + 0x10) < array1Length) {\n    return 0;\n  }\n  index = array1Length + -1;\n  ptrArray2 = (uint *)(inputArray2 + 0x14);\n  ptrArray1 = (uint *)(inputArray1 + 0x14);\n  divisor = ptrArray1[index] / (ptrArray2[index] + 1);\n  ptrArray2Last = ptrArray2 + index;\n  if (divisor != 0) {\n    sum = 0;\n    carry = 0;\n    ptrArray1 = ptrArray1;\n    ptrArray2Next = ptrArray2;\n    do {\n      ptrArray1Next = ptrArray2Next + 1;\n      sum = divisor * (*ptrArray2Next & 0xffff) + sum;\n      temp = divisor * (*ptrArray2Next >> 0x10) + (sum >> 0x10);\n      sum = (carry - (sum & 0xffff)) + (*ptrArray1 & 0xffff);\n      carry = ((*ptrArray1 >> 0x10) - (temp & 0xffff)) + ((int)sum >> 0x10);\n      *ptrArray1 = sum & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      sum = temp >> 0x10;\n      ptrArray1 = ptrArray1 + 1;\n      ptrArray2Next = ptrArray1Next;\n    } while (ptrArray1Next <= ptrArray2Last);\n    if (ptrArray1[index] == 0) {\n      if ((ptrArray1 < ptrArray1 + array1Length + -2) && (ptrArray1[array1Length + -2] == 0)) {\n        ptrArray1 = ptrArray1 + array1Length + -3;\n        do {\n          index = index + -1;\n          if (ptrArray1 <= ptrArray1) break;\n          sum = *ptrArray1;\n          ptrArray1 = ptrArray1 + -1;\n        } while (sum == 0);\n      }\n      *(int *)(inputArray1 + 0x10) = index;\n    }\n  }\n  array1Length = FUN_080094f8();\n  if (-1 < array1Length) {\n    array1Length = 0;\n    divisor = divisor + 1;\n    ptrArray1 = ptrArray1;\n    do {\n      ptrArray2Next = ptrArray2 + 1;\n      sum = (array1Length - (*ptrArray2 & 0xffff)) + (*ptrArray1 & 0xffff);\n      array1Length = ((*ptrArray1 >> 0x10) - (*ptrArray2 >> 0x10)) + ((int)sum >> 0x10);\n      *ptrArray1 = sum & 0xffff | array1Length * 0x10000;\n      array1Length = array1Length >> 0x10;\n      ptrArray1 = ptrArray1 + 1;\n      ptrArray2 = ptrArray2Next;\n    } while (ptrArray2Next <= ptrArray2Last);\n    if (ptrArray1[index] == 0) {\n      if ((ptrArray1 < ptrArray1 + index + -1) && (ptrArray1[index + -1] == 0)) {\n        ptrArray2 = ptrArray1 + index + -2;\n        do {\n          index = index + -1;\n          if (ptrArray2 <= ptrArray1) break;\n          sum = *ptrArray2;\n          ptrArray2 = ptrArray2 + -1;\n        } while (sum == 0);\n      }\n      *(int *)(inputArray1 + 0x10) = index;\n    }\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_080078c0": "divided_sum_080078c0",
                "param_1": "inputArray1",
                "param_2": "inputArray2",
                "uVar1": "sum",
                "puVar2": "ptrArray1",
                "iVar3": "carry",
                "iVar4": "array1Length",
                "iVar5": "index",
                "uVar6": "divisor",
                "puVar7": "ptrArray2",
                "puVar8": "ptrArray1",
                "puVar9": "ptrArray2Last",
                "uVar10": "temp",
                "puVar11": "ptrArray2Next",
                "puVar12": "ptrArray1Next"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080094f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e8": {
            "entrypoint": "0x080079e8",
            "current_name": "convert_float_to_ascii_080079e8",
            "code": "\nchar * convertFloatToASCII_080079e8(int value,undefined4 numDigits,uint mantissa,uint exponent,uint minWidth,\n                   uint precision,int *numDigitsPtr,uint *signPtr,char **outputPtr)\n\n{\n  bool isNegative;\n  bool exponentLessThanZero;\n  bool addTrailingZeros;\n  char charValue;\n  byte isEven;\n  undefined4 floatValue;\n  int intPart;\n  int index;\n  int numberOfTrailingZeros;\n  char *pcVar10;\n  uint tmpValue;\n  undefined4 k1;\n  undefined4 k2;\n  int outputIndex;\n  int digitCount;\n  undefined4 exponentPart;\n  uint originalExponent;\n  uint exponentMask;\n  int numTrailingZeroDigits;\n  char *pcVar20;\n  char *pcVar21;\n  undefined4 *table;\n  undefined4 k4;\n  int charToAdd;\n  bool exponentLessThanZero5;\n  undefined8 X;\n  undefined8 Y;\n  undefined8 Z;\n  uint intPartOutput;\n  uint mantissaCopy;\n  uint outputLength;\n  int exponentOffset;\n  uint minWidthCopy;\n  int numDigitsCopy;\n  int numberOfZeros;\n  uint digitsCopy;\n  uint k3;\n  uint uStack_44;\n  uint k6;\n  uint k5;\n  int k7;\n  int array [2];\n  \n  outputIndex = *(int *)(value + 0x40);\n  if (outputIndex != 0) {\n    exponentMask = *(uint *)(value + 0x44);\n    *(uint *)(outputIndex + 4) = exponentMask;\n    *(int *)(outputIndex + 8) = 1 << (exponentMask & 0xff);\n    FUN_0800910c(value,outputIndex);\n    *(undefined4 *)(value + 0x40) = 0;\n  }\n  exponentLessThanZero5 = (int)exponent < 0;\n  exponentMask = exponent;\n  if (exponentLessThanZero5) {\n    exponentMask = exponent & 0x7fffffff;\n  }\n  *signPtr = (uint)exponentLessThanZero5;\n  mantissaCopy = exponent;\n  if (exponentLessThanZero5) {\n    mantissaCopy = exponentMask;\n  }\n  originalExponent = mantissaCopy;\n  if ((~exponentMask & 0x7ff00000) == 0) {\n    *numDigitsPtr = 9999;\n    if ((mantissa == 0) && ((exponentMask & 0xfffff) == 0)) {\n      pcVar10 = \"Infinity\";\n      if (outputPtr == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    else {\n      pcVar10 = \"NaN\";\n      if (outputPtr == (char **)0x0) {\n        return pcVar10;\n      }\n      pcVar21 = \"\";\n    }\n    *outputPtr = pcVar21;\n    return pcVar10;\n  }\n  X = FUN_08000998(mantissa,mantissaCopy,0,0);\n  if ((int)X != 0) {\n    *numDigitsPtr = 1;\n    if (outputPtr != (char **)0x0) {\n      *outputPtr = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  floatValue = FUN_08009630(value,(int)((ulonglong)X >> 0x20),mantissa,mantissaCopy,array,&k7)\n  ;\n  outputIndex = k7;\n  if (exponentMask >> 0x14 == 0) {\n    numTrailingZeroDigits = array[0] + k7;\n    digitCount = numTrailingZeroDigits + 0x432;\n    if (digitCount < 0x21) {\n      exponentMask = mantissa << (0x20U - digitCount & 0xff);\n    }\n    else {\n      exponentMask = mantissa >> (numTrailingZeroDigits + 0x412U & 0xff) | exponentMask << (0x40U - digitCount & 0xff);\n    }\n    X = FUN_080003d4(exponentMask);\n    numTrailingZeroDigits = numTrailingZeroDigits + -1;\n    exponentLessThanZero5 = true;\n    tmpValue = (int)((ulonglong)X >> 0x20) + 0xfe100000;\n    exponentMask = (uint)X;\n  }\n  else {\n    numTrailingZeroDigits = (exponentMask >> 0x14) - 0x3ff;\n    tmpValue = mantissaCopy & 0xfffff | 0x3ff00000;\n    exponentLessThanZero5 = false;\n    exponentMask = mantissa;\n  }\n  X = FUN_08000158(exponentMask,tmpValue,0,0x3ff80000);\n  X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),0x636f4361,0x3fd287a7);\n  X = FUN_0800015c((int)X,(int)((ulonglong)X >> 0x20),0x8b60c8b3,0x3fc68a28);\n  Y = FUN_080003f4(numTrailingZeroDigits);\n  Y = FUN_080004c8((int)Y,(int)((ulonglong)Y >> 0x20),0x509f79fb,0x3fd34413);\n  X = FUN_0800015c((int)X,(int)((ulonglong)X >> 0x20),(int)Y,\n                        (int)((ulonglong)Y >> 0x20));\n  k2 = (undefined4)((ulonglong)X >> 0x20);\n  outputLength = FUN_0800119c();\n  digitCount = FUN_080009ac((int)X,k2,0,0);\n  if (digitCount != 0) {\n    Y = FUN_080003f4(outputLength);\n    digitCount = FUN_08000998((int)Y,(int)((ulonglong)Y >> 0x20),(int)X,k2);\n    if (digitCount == 0) {\n      outputLength = outputLength - 1;\n    }\n  }\n  if (outputLength < 0x17) {\n    digitCount = FUN_080009e8(*(undefined4 *)(&DAT_08009fa8 + outputLength * 8),\n                          *(undefined4 *)(&DAT_08009fac + outputLength * 8),mantissa,mantissaCopy);\n    if (digitCount == 0) {\n      exponentLessThanZero = false;\n    }\n    else {\n      outputLength = outputLength - 1;\n      exponentLessThanZero = false;\n    }\n  }\n  else {\n    exponentLessThanZero = true;\n  }\n  digitCount = (outputIndex - numTrailingZeroDigits) + -1;\n  if (digitCount < 0) {\n    exponentOffset = 1 - (outputIndex - numTrailingZeroDigits);\n    digitCount = 0;\n  }\n  else {\n    exponentOffset = 0;\n  }\n  if ((int)outputLength < 0) {\n    digitsCopy = 0;\n    exponentOffset = exponentOffset - outputLength;\n    numberOfZeros = -outputLength;\n  }\n  else {\n    digitCount = digitCount + outputLength;\n    digitsCopy = outputLength;\n    numberOfZeros = 0;\n  }\n  if (9 < minWidth) {\n    k6 = 0xffffffff;\n    isNegative = true;\n    minWidthCopy = 0xffffffff;\n    addTrailingZeros = true;\n    minWidth = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  isNegative = (int)minWidth < 6;\n  if (!isNegative) {\n    minWidth = minWidth - 4;\n  }\n  switch(minWidth) {\n  case 2:\n    addTrailingZeros = false;\n    break;\n  case 3:\n    addTrailingZeros = false;\n    goto LAB_08008300;\n  case 4:\n    addTrailingZeros = true;\n    break;\n  case 5:\n    addTrailingZeros = true;\nLAB_08008300:\n    k6 = outputLength + precision;\n    minWidthCopy = k6 + 1;\n    exponentMask = minWidthCopy;\n    if ((int)minWidthCopy < 1) {\n      exponentMask = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undefined4 *)(value + 0x44) = 0;\n    pcVar10 = (char *)FUN_080090c0(value,0);\n    k6 = 0xffffffff;\n    minWidthCopy = 0xffffffff;\n    precision = 0;\n    *(char **)(value + 0x40) = pcVar10;\n    addTrailingZeros = true;\n    goto LAB_08007e36;\n  }\n  if ((int)precision < 1) {\n    k6 = 1;\n    precision = 1;\n    minWidthCopy = 1;\nLAB_08007c24:\n    *(undefined4 *)(value + 0x44) = 0;\n    tmpValue = k6;\n  }\n  else {\n    k6 = precision;\n    minWidthCopy = precision;\n    exponentMask = precision;\nLAB_08008314:\n    *(undefined4 *)(value + 0x44) = 0;\n    tmpValue = minWidthCopy;\n    if (0x17 < (int)exponentMask) {\n      numTrailingZeroDigits = 4;\n      outputIndex = 1;\n      do {\n        intPart = outputIndex;\n        numTrailingZeroDigits = numTrailingZeroDigits * 2;\n        outputIndex = intPart + 1;\n      } while (numTrailingZeroDigits + 0x14U <= exponentMask);\n      *(int *)(value + 0x44) = intPart;\n    }\n  }\n  pcVar10 = (char *)FUN_080090c0(value);\n  *(char **)(value + 0x40) = pcVar10;\n  if ((tmpValue < 0xf) && (isNegative)) {\n    if ((int)outputLength < 1) {\n      if (outputLength == 0) {\n        outputIndex = 2;\n        intPartOutput = mantissa;\n      }\n      else {\n        outputIndex = (-outputLength & 0xf) * 8;\n        X = FUN_080004c8(mantissa,mantissaCopy,*(undefined4 *)(&DAT_08009fa8 + outputIndex),\n                              *(undefined4 *)(&DAT_08009fac + outputIndex));\n        mantissaCopy = (uint)((ulonglong)X >> 0x20);\n        intPartOutput = (uint)X;\n        numTrailingZeroDigits = (int)-outputLength >> 4;\n        if (numTrailingZeroDigits == 0) {\n          outputIndex = 2;\n        }\n        else {\n          isNegative = false;\n          outputIndex = 2;\n          table = &DAT_08009f80;\n          do {\n            if (numTrailingZeroDigits << 0x1f < 0) {\n              X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),*table,table[1]\n                                   );\n              isNegative = true;\n              outputIndex = outputIndex + 1;\n            }\n            numTrailingZeroDigits = numTrailingZeroDigits >> 1;\n            table = table + 2;\n          } while (numTrailingZeroDigits != 0);\n          if (isNegative) {\n            intPartOutput = (uint)X;\n            mantissaCopy = (uint)((ulonglong)X >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      exponentMask = (int)outputLength >> 4;\n      Y = *(undefined8 *)(&DAT_08009fa8 + (outputLength & 0xf) * 8);\n      X = *(undefined8 *)(&DAT_08009fa8 + (outputLength & 0xf) * 8);\n      if ((int)(exponentMask << 0x1b) < 0) {\n        Z = FUN_0800071c(mantissa,mantissaCopy,0x7f73bf3c,0x75154fdd);\n        uStack_44 = (uint)((ulonglong)Z >> 0x20);\n        k3 = (uint)Z;\n        outputIndex = 3;\n        exponentMask = exponentMask & 0xf;\n      }\n      else {\n        outputIndex = 2;\n        uStack_44 = mantissaCopy;\n        k3 = mantissa;\n      }\n      if (exponentMask != 0) {\n        table = &DAT_08009f80;\n        do {\n          if ((int)(exponentMask << 0x1f) < 0) {\n            X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),*table,table[1]);\n            outputIndex = outputIndex + 1;\n          }\n          exponentMask = (int)exponentMask >> 1;\n          table = table + 2;\n          Y = X;\n        } while (exponentMask != 0);\n      }\n      mantissaCopy = (uint)((ulonglong)Y >> 0x20);\n      intPartOutput = (uint)Y;\n      X = FUN_0800071c(k3,uStack_44,intPartOutput,mantissaCopy);\n      intPartOutput = (uint)X;\n      mantissaCopy = (uint)((ulonglong)X >> 0x20);\n    }\n    X = CONCAT44(mantissaCopy,intPartOutput);\n    if ((exponentLessThanZero) && (numTrailingZeroDigits = FUN_080009ac(intPartOutput,mantissaCopy,0,0x3ff00000), numTrailingZeroDigits != 0)) {\n      if (minWidthCopy == 0) {\n        X = FUN_080003f4(outputIndex);\n        X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),intPartOutput,mantissaCopy);\n        X = FUN_0800015c((int)X,(int)((ulonglong)X >> 0x20),0,0x401c0000);\n        k2 = (undefined4)X;\n        outputIndex = (int)((ulonglong)X >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (int)k6) {\n        X = FUN_080004c8(intPartOutput,mantissaCopy,0,0x40240000);\n        Y = FUN_080003f4(outputIndex + 1);\n        Y = FUN_080004c8((int)Y,(int)((ulonglong)Y >> 0x20),(int)X,\n                              (int)((ulonglong)X >> 0x20));\n        Y = FUN_0800015c((int)Y,(int)((ulonglong)Y >> 0x20),0,0x401c0000);\n        k2 = (undefined4)Y;\n        k3 = k6;\n        k5 = outputLength - 1;\n        outputIndex = (int)((ulonglong)Y >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    Y = FUN_080003f4(outputIndex);\n    Y = FUN_080004c8((int)Y,(int)((ulonglong)Y >> 0x20),intPartOutput,mantissaCopy);\n    Y = FUN_0800015c((int)Y,(int)((ulonglong)Y >> 0x20),0,0x401c0000);\n    k2 = (undefined4)Y;\n    outputIndex = (int)((ulonglong)Y >> 0x20) + -0x3400000;\n    if (minWidthCopy != 0) {\n      k5 = outputLength;\n      k3 = minWidthCopy;\nLAB_08007cfa:\n      mantissaCopy = (uint)((ulonglong)X >> 0x20);\n      intPartOutput = (uint)X;\n      charValue = FUN_0800119c(intPartOutput,mantissaCopy);\n      charValue = charValue + '0';\n      exponentPart = (&DAT_08009fa0)[k3 * 2];\n      k1 = (&DAT_08009fa4)[k3 * 2];\n      X = FUN_080003f4();\n      X = FUN_08000158(intPartOutput,mantissaCopy,(int)X,(int)((ulonglong)X >> 0x20));\n      k4 = (undefined4)((ulonglong)X >> 0x20);\n      pcVar21 = pcVar10 + 1;\n      if (addTrailingZeros) {\n        Y = FUN_0800071c(0,0x3fe00000,exponentPart,k1);\n        Y = FUN_08000158((int)Y,(int)((ulonglong)Y >> 0x20),k2,outputIndex);\n        k2 = (undefined4)((ulonglong)Y >> 0x20);\n        *pcVar10 = charValue;\n        outputIndex = FUN_080009e8((int)Y,k2,(int)X,k4);\n        if (outputIndex != 0) {\nLAB_08008784:\n          outputLength = k5;\n          goto LAB_08008294;\n        }\n        Z = FUN_08000158(0,0x3ff00000,(int)X,k4);\n        outputIndex = FUN_080009e8((int)Y,k2,(int)Z,(int)((ulonglong)Z >> 0x20));\n        if (outputIndex == 0) {\n          if (k3 != 1) {\n            pcVar20 = pcVar21;\n            do {\n              Y = FUN_080004c8((int)Y,(int)((ulonglong)Y >> 0x20),0,0x40240000);\n              k2 = (undefined4)((ulonglong)Y >> 0x20);\n              X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),0,0x40240000);\n              charValue = FUN_0800119c();\n              Z = FUN_080003f4();\n              X = FUN_08000158((int)X,(int)((ulonglong)X >> 0x20),(int)Z,\n                                    (int)((ulonglong)Z >> 0x20));\n              exponentPart = (undefined4)((ulonglong)X >> 0x20);\n              charValue = charValue + '0';\n              pcVar21 = pcVar20 + 1;\n              *pcVar20 = charValue;\n              outputIndex = FUN_080009ac((int)X,exponentPart,(int)Y,k2);\n              if (outputIndex != 0) {\n                outputLength = k5;\n                goto LAB_08008294;\n              }\n              Z = FUN_08000158(0,0x3ff00000,(int)X,exponentPart);\n              outputIndex = FUN_080009ac((int)Z,(int)((ulonglong)Z >> 0x20),(int)Y,k2)\n              ;\n              if (outputIndex != 0) goto LAB_08008798;\n              pcVar20 = pcVar21;\n            } while (pcVar21 != pcVar10 + k3);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        outputLength = k5;\n      }\n      else {\n        Y = FUN_080004c8(k2,outputIndex,exponentPart,k1);\n        k2 = (undefined4)((ulonglong)Y >> 0x20);\n        *pcVar10 = charValue;\n        if (k3 != 1) {\n          pcVar20 = pcVar21;\n          do {\n            X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),0,0x40240000);\n            charValue = FUN_0800119c();\n            Z = FUN_080003f4();\n            X = FUN_08000158((int)X,(int)((ulonglong)X >> 0x20),(int)Z,\n                                  (int)((ulonglong)Z >> 0x20));\n            pcVar21 = pcVar20 + 1;\n            *pcVar20 = charValue + '0';\n            pcVar20 = pcVar21;\n          } while (pcVar21 != pcVar10 + k3);\n        }\n        exponentPart = (undefined4)((ulonglong)X >> 0x20);\n        Z = FUN_0800015c((int)Y,k2,0,0x3fe00000);\n        outputIndex = FUN_080009ac((int)Z,(int)((ulonglong)Z >> 0x20),(int)X,exponentPart);\n        if (outputIndex == 0) {\n          Y = FUN_08000158(0,0x3fe00000,(int)Y,k2);\n          outputIndex = FUN_080009e8((int)Y,(int)((ulonglong)Y >> 0x20),(int)X,exponentPart);\n          pcVar20 = pcVar21;\n          if (outputIndex == 0) goto LAB_08007e36;\n          do {\n            pcVar21 = pcVar20;\n            pcVar20 = pcVar21 + -1;\n          } while (pcVar21[-1] == '0');\n          goto LAB_08008784;\n        }\n        outputLength = k5;\n        charValue = pcVar21[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    X = FUN_08000158(intPartOutput,mantissaCopy,0,0x40140000);\n    exponentPart = (undefined4)((ulonglong)X >> 0x20);\n    numTrailingZeroDigits = FUN_080009e8((int)X,exponentPart,k2,outputIndex);\n    if (numTrailingZeroDigits == 0) {\n      outputIndex = FUN_080009ac((int)X,exponentPart,k2,outputIndex + -0x80000000);\n      if (outputIndex == 0) goto LAB_08007e36;\n      numTrailingZeroDigits = 0;\n      outputIndex = 0;\n      pcVar21 = pcVar10;\n      goto LAB_080084f0;\n    }\n    digitCount = 0;\n    intPart = 0;\nLAB_08008406:\n    *pcVar10 = '1';\n    outputLength = outputLength + 1;\n    pcVar21 = pcVar10 + 1;\n    numTrailingZeroDigits = intPart;\n    outputIndex = digitCount;\nLAB_08008416:\n    FUN_0800910c(value,outputIndex);\n    if (numTrailingZeroDigits == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    pcVar21 = pcVar10;\n    if ((-1 < array[0]) && ((int)outputLength < 0xf)) {\n      k2 = *(undefined4 *)(&DAT_08009fa8 + outputLength * 8);\n      exponentPart = *(undefined4 *)(&DAT_08009fac + outputLength * 8);\n      if ((-1 < (int)precision) || (0 < (int)minWidthCopy)) {\n        FUN_0800071c(mantissa,originalExponent,k2,exponentPart);\n        isEven = FUN_0800119c();\n        X = FUN_080003f4();\n        X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),k2,exponentPart);\n        X = FUN_08000158(mantissa,originalExponent,(int)X,(int)((ulonglong)X >> 0x20));\n        *pcVar10 = isEven + 0x30;\n        pcVar21 = pcVar10 + 1;\n        if (minWidthCopy != 1) {\n          X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),0,0x40240000);\n          outputIndex = FUN_08000998((int)X,(int)((ulonglong)X >> 0x20),0,0);\n          while (outputIndex == 0) {\n            k4 = (undefined4)((ulonglong)X >> 0x20);\n            FUN_0800071c((int)X,k4,k2,exponentPart);\n            isEven = FUN_0800119c();\n            Y = FUN_080003f4();\n            Y = FUN_080004c8((int)Y,(int)((ulonglong)Y >> 0x20),k2,exponentPart);\n            X = FUN_08000158((int)X,k4,(int)Y,(int)((ulonglong)Y >> 0x20));\n            pcVar20 = pcVar21 + 1;\n            *pcVar21 = isEven + 0x30;\n            pcVar21 = pcVar20;\n            if (minWidthCopy == (int)pcVar20 - (int)pcVar10) goto LAB_08007f3a;\n            X = FUN_080004c8((int)X,(int)((ulonglong)X >> 0x20),0,0x40240000);\n            outputIndex = FUN_08000998((int)X,(int)((ulonglong)X >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        X = FUN_0800015c((int)X,(int)((ulonglong)X >> 0x20));\n        k4 = (undefined4)((ulonglong)X >> 0x20);\n        outputIndex = FUN_080009e8((int)X,k4,k2,exponentPart);\n        if ((outputIndex == 0) &&\n           ((outputIndex = FUN_08000998((int)X,k4,k2,exponentPart), outputIndex == 0 ||\n            ((isEven & 1) == 0)))) goto LAB_08008294;\n        charValue = pcVar21[-1];\nLAB_08007f7c:\n        while (pcVar20 = pcVar21 + -1, charValue == '9') {\n          if (pcVar10 == pcVar20) {\n            *pcVar10 = '0';\n            charValue = pcVar21[-1];\n            outputLength = outputLength + 1;\n            pcVar20 = pcVar10;\n            break;\n          }\n          charValue = pcVar21[-2];\n          pcVar21 = pcVar20;\n        }\n        *pcVar20 = charValue + '\\x01';\n        goto LAB_08008294;\n      }\n      if (minWidthCopy == 0) {\n        X = FUN_080004c8(k2,exponentPart,0,0x40140000);\n        numberOfTrailingZeros = FUN_080009d4((int)X,(int)((ulonglong)X >> 0x20),mantissa,originalExponent);\n        numTrailingZeroDigits = 0;\n        digitCount = 0;\n        intPart = 0;\n        outputIndex = 0;\n        if (numberOfTrailingZeros == 0) goto LAB_08008406;\n      }\n      else {\n        numTrailingZeroDigits = 0;\n        outputIndex = 0;\n      }\nLAB_080084f0:\n      outputLength = ~precision;\n      pcVar10 = pcVar21;\n      goto LAB_08008416;\n    }\n    outputIndex = numberOfZeros;\n    if (addTrailingZeros) {\n      if ((int)minWidth < 2) {\n        if (exponentLessThanZero5) {\n          numDigitsCopy = exponentOffset;\n          exponentOffset = exponentOffset + array[0] + 0x433;\n          digitCount = digitCount + array[0] + 0x433;\n        }\n        else {\n          numDigitsCopy = exponentOffset;\n          exponentOffset = exponentOffset + (0x36 - k7);\n          digitCount = digitCount + (0x36 - k7);\n        }\n      }\n      else {\n        numTrailingZeroDigits = minWidthCopy - 1;\n        if (numberOfZeros < numTrailingZeroDigits) {\n          digitsCopy = digitsCopy + (numTrailingZeroDigits - numberOfZeros);\n          outputIndex = 0;\n          numberOfZeros = numTrailingZeroDigits;\n        }\n        else {\n          outputIndex = numberOfZeros - numTrailingZeroDigits;\n        }\n        if ((int)minWidthCopy < 0) {\n          numDigitsCopy = exponentOffset - minWidthCopy;\n        }\n        else {\n          digitCount = digitCount + minWidthCopy;\n          numDigitsCopy = exponentOffset;\n          exponentOffset = exponentOffset + minWidthCopy;\n        }\n      }\n      numTrailingZeroDigits = FUN_08009244(value,1);\n    }\n    else {\n      numDigitsCopy = exponentOffset;\n      numTrailingZeroDigits = 0;\n    }\n    if ((0 < numDigitsCopy) && (0 < digitCount)) {\n      intPart = numDigitsCopy;\n      if (digitCount <= numDigitsCopy) {\n        intPart = digitCount;\n      }\n      digitCount = digitCount - intPart;\n      exponentOffset = exponentOffset - intPart;\n      numDigitsCopy = numDigitsCopy - intPart;\n    }\n    if (numberOfZeros != 0) {\n      if (addTrailingZeros) {\n        k2 = floatValue;\n        if (outputIndex != 0) {\n          numTrailingZeroDigits = FUN_080093a4(value,numTrailingZeroDigits,outputIndex);\n          k2 = FUN_08009258(value,numTrailingZeroDigits,floatValue);\n          FUN_0800910c(value,floatValue);\n          floatValue = k2;\n          if (numberOfZeros - outputIndex == 0) goto LAB_08008062;\n        }\n        floatValue = FUN_080093a4(value,k2,numberOfZeros - outputIndex);\n      }\n      else {\n        floatValue = FUN_080093a4(value,floatValue,numberOfZeros);\n      }\n    }\nLAB_08008062:\n    outputIndex = FUN_08009244(value,1);\n    if (digitsCopy == 0) {\n      if (((int)minWidth < 2) && (mantissa == 0)) {\nLAB_0800835a:\n        if ((originalExponent & 0xfffff) == 0) {\n          originalExponent = originalExponent & 0x7ff00000;\n          if (originalExponent != 0) {\n            digitCount = digitCount + 1;\n            exponentOffset = exponentOffset + 1;\n            originalExponent = 1;\n          }\n        }\n        else {\n          originalExponent = 0;\n        }\n        exponentLessThanZero5 = digitsCopy != 0;\n        exponentMask = mantissa;\n        digitsCopy = originalExponent;\n        if (exponentLessThanZero5) goto LAB_080082d4;\n      }\n      intPart = 1;\n    }\n    else {\n      X = FUN_080093a4(value,outputIndex);\n      outputIndex = (int)X;\n      if (((int)minWidth < 2) && (mantissa == 0)) goto LAB_0800835a;\n      digitsCopy = 0;\n      exponentMask = (uint)((ulonglong)X >> 0x20);\nLAB_080082d4:\n      intPart = FUN_080091a4(*(undefined4 *)(outputIndex + *(int *)(outputIndex + 0x10) * 4 + 0x10),exponentMask);\n      intPart = 0x20 - intPart;\n    }\n    exponentMask = intPart + digitCount & 0x1f;\n    if (exponentMask == 0) {\n      intPart = 0x1c;\nLAB_08008096:\n      digitCount = digitCount + intPart;\n      exponentOffset = exponentOffset + intPart;\n      numDigitsCopy = numDigitsCopy + intPart;\n    }\n    else {\n      if (4 < (int)(0x20 - exponentMask)) {\n        intPart = 0x1c - exponentMask;\n        goto LAB_08008096;\n      }\n      if (0x20 - exponentMask != 4) {\n        intPart = 0x3c - exponentMask;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < exponentOffset) {\n      floatValue = FUN_08009444(value,floatValue,exponentOffset);\n    }\n    if (0 < digitCount) {\n      outputIndex = FUN_08009444(value,outputIndex,digitCount);\n    }\n    pcVar20 = pcVar10;\n    if ((exponentLessThanZero) && (digitCount = FUN_080094f8(floatValue,outputIndex), digitCount < 0)) {\n      outputLength = outputLength - 1;\n      floatValue = FUN_08009120(value,floatValue,10,0);\n      if (addTrailingZeros) {\n        numTrailingZeroDigits = FUN_08009120(value,numTrailingZeroDigits,10,0);\n        if ((0 < (int)k6) || ((int)minWidth < 3)) {\n          minWidthCopy = k6;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (int)k6) || ((int)minWidth < 3)) {\n        minWidthCopy = k6;\n        goto LAB_0800820a;\n      }\n      minWidthCopy = k6;\nLAB_080084e8:\n      if (minWidthCopy == 0) {\n        digitCount = FUN_08009120(value,outputIndex,5);\n        numberOfTrailingZeros = FUN_080094f8(floatValue,digitCount);\n        intPart = numTrailingZeroDigits;\n        outputIndex = digitCount;\n        if (0 < numberOfTrailingZeros) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((int)minWidthCopy < 1) && (2 < (int)minWidth)) goto LAB_080084e8;\n    if (addTrailingZeros) {\nLAB_080080de:\n      intPartOutput = numTrailingZeroDigits;\n      if (0 < numDigitsCopy) {\n        intPartOutput = FUN_08009444(value,numTrailingZeroDigits,numDigitsCopy);\n      }\n      numTrailingZeroDigits = intPartOutput;\n      if (digitsCopy != 0) {\n        numTrailingZeroDigits = FUN_080090c0(value,*(undefined4 *)(intPartOutput + 4));\n        FUN_08001084(numTrailingZeroDigits + 0xc,intPartOutput + 0xc,(*(int *)(intPartOutput + 0x10) + 2) * 4);\n        numTrailingZeroDigits = FUN_08009444(value,numTrailingZeroDigits,1);\n      }\nLAB_08008108:\n      digitCount = FUN_080078c0(floatValue,outputIndex);\n      intPart = FUN_080094f8(floatValue,intPartOutput);\n      numberOfTrailingZeros = FUN_08009530(value,outputIndex,numTrailingZeroDigits);\n      charToAdd = digitCount + 0x30;\n      if (*(int *)(numberOfTrailingZeros + 0xc) == 0) {\n        index = FUN_080094f8(floatValue);\n        FUN_0800910c(value,numberOfTrailingZeros);\n        if ((index != 0) || (minWidth != 0)) goto LAB_0800815a;\n        if ((mantissa & 1) != 0) {\n          index = 0;\n          goto LAB_0800815a;\n        }\n        if (charToAdd != 0x39) {\n          if (0 < intPart) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        pcVar21 = pcVar20 + 1;\n        charValue = '9';\n        *pcVar20 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(value,numberOfTrailingZeros);\n      index = 1;\nLAB_0800815a:\n      if ((intPart < 0) || (((intPart == 0 && (minWidth == 0)) && ((mantissa & 1) == 0)))) {\n        if (0 < index) {\n          floatValue = FUN_08009444(value,floatValue,1);\n          intPart = FUN_080094f8(floatValue,outputIndex);\n          if ((0 < intPart) || ((intPart == 0 && (digitCount << 0x1f < 0)))) {\n            if (charToAdd == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            charToAdd = digitCount + 0x31;\n          }\n        }\nLAB_080085a4:\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)charToAdd;\n        goto LAB_08008274;\n      }\n      pcVar21 = pcVar20 + 1;\n      if (0 < index) {\n        if (charToAdd == 0x39) goto LAB_08008752;\n        *pcVar20 = (char)digitCount + '1';\n        goto LAB_08008274;\n      }\n      *pcVar20 = (char)charToAdd;\n      if (pcVar10 + (minWidthCopy - 1) != pcVar20) {\n        floatValue = FUN_08009120(value,floatValue,10,0);\n        pcVar20 = pcVar21;\n        if (intPartOutput == numTrailingZeroDigits) {\n          intPartOutput = FUN_08009120(value,intPartOutput,10,0);\n          numTrailingZeroDigits = intPartOutput;\n        }\n        else {\n          intPartOutput = FUN_08009120(value,intPartOutput,10,0);\n          numTrailingZeroDigits = FUN_08009120(value,numTrailingZeroDigits,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        charToAdd = FUN_080078c0(floatValue,outputIndex);\n        charToAdd = charToAdd + 0x30;\n        pcVar21 = pcVar20 + 1;\n        *pcVar20 = (char)charToAdd;\n        if ((int)minWidthCopy <= (int)pcVar21 - (int)pcVar10) break;\n        floatValue = FUN_08009120(value,floatValue,10,0);\n        pcVar20 = pcVar21;\n      }\n      intPartOutput = 0;\n    }\n    floatValue = FUN_08009444(value,floatValue,1);\n    digitCount = FUN_080094f8(floatValue,outputIndex);\n    charValue = pcVar21[-1];\n    if ((0 < digitCount) || ((digitCount == 0 && (charToAdd << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        pcVar20 = pcVar21 + -1;\n        if (charValue != '9') goto code_r0x08008270;\n        if (pcVar10 == pcVar20) {\n          *pcVar10 = '1';\n          outputLength = outputLength + 1;\n          goto LAB_08008274;\n        }\n        charValue = pcVar21[-2];\n        pcVar21 = pcVar20;\n      } while( true );\n    }\n    while (charValue == '0') {\n      charValue = pcVar21[-2];\n      pcVar21 = pcVar21 + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(value,outputIndex);\n    if (numTrailingZeroDigits == 0) goto LAB_08008294;\n    if ((intPartOutput != 0) && (intPartOutput != numTrailingZeroDigits)) {\n      FUN_0800910c(value);\n    }\n  }\n  FUN_0800910c(value,numTrailingZeroDigits);\nLAB_08008294:\n  FUN_0800910c(value,floatValue);\n  *pcVar21 = '\\0';\n  *numDigitsPtr = outputLength + 1;\n  if (outputPtr == (char **)0x0) {\n    return pcVar10;\n  }\n  *outputPtr = pcVar21;\n  return pcVar10;\ncode_r0x08008270:\n  *pcVar20 = charValue + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "renaming": {
                "FUN_080079e8": "convert_float_to_ascii_080079e8",
                "param_1": "value",
                "param_2": "numDigits",
                "param_3": "mantissa",
                "param_4": "exponent",
                "param_5": "minWidth",
                "param_6": "precision",
                "param_7": "numDigitsPtr",
                "param_8": "signPtr",
                "param_9": "outputPtr",
                "bVar1": "isNegative",
                "bVar2": "exponentLessThanZero",
                "bVar3": "addTrailingZeros",
                "cVar4": "charValue",
                "bVar5": "isEven",
                "uVar6": "floatValue",
                "iVar7": "intPart",
                "iVar8": "index",
                "iVar9": "numberOfTrailingZeros",
                "iVar14": "outputIndex",
                "iVar15": "digitCount",
                "iVar19": "numTrailingZeroDigits",
                "iVar24": "charToAdd",
                "uVar11": "tmpValue",
                "uVar12": "k1",
                "uVar13": "k2",
                "uVar16": "exponentPart",
                "uVar17": "originalExponent",
                "uVar18": "exponentMask",
                "uVar23": "k4",
                "uVar26": "X",
                "uVar27": "Y",
                "uVar28": "Z",
                "local_80": "intPartOutput",
                "local_7c": "mantissaCopy",
                "local_74": "outputLength",
                "local_70": "exponentOffset",
                "local_68": "minWidthCopy",
                "local_60": "numDigitsCopy",
                "local_5c": "numberOfZeros",
                "local_58": "digitsCopy",
                "local_48": "k3",
                "local_38": "k6",
                "local_34": "k5",
                "local_30": "k7",
                "local_2c": "array",
                "puVar22": "table"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_08009258",
                "FUN_080078c0",
                "FUN_080003d4",
                "FUN_08009244",
                "FUN_080009e8",
                "FUN_080091a4",
                "FUN_0800910c",
                "FUN_0800015c",
                "FUN_080094f8",
                "FUN_08009120",
                "FUN_080003f4",
                "FUN_08009630",
                "FUN_08009444",
                "FUN_0800119c",
                "FUN_080090c0",
                "FUN_080009d4",
                "FUN_080009ac",
                "FUN_08000998",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800884c": {
            "entrypoint": "0x0800884c",
            "current_name": "validate_memory_region_0800884c",
            "code": "\nundefined4 validate_memory_region_0800884c(undefined4 handle,int size)\n\n{\n  int result;\n  int adjusted_size;\n  uint mem_flags;\n  \n  FUN_080090a8();\n  mem_flags = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_size = ((0xfef - size) + mem_flags & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_size) {\n    result = FUN_08009744(handle,0);\n    if (result == DAT_20000454 + mem_flags) {\n      result = FUN_08009744(handle,-adjusted_size);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_size;\n        *(uint *)(DAT_20000454 + 4) = mem_flags - adjusted_size | 1;\n        FUN_080090b4(handle);\n        return 1;\n      }\n      adjusted_size = FUN_08009744(handle,0);\n      if (0xf < adjusted_size - DAT_20000454) {\n        DAT_20000a14 = adjusted_size - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_size - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(handle);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800884c": "validate_memory_region_0800884c",
                "param_1": "handle",
                "param_2": "size",
                "iVar1": "result",
                "iVar2": "adjusted_size",
                "uVar3": "mem_flags"
            },
            "calling": [
                "FUN_080088ec"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080088ec": {
            "entrypoint": "0x080088ec",
            "current_name": "update_memory_manager_080088ec",
            "code": "\nvoid updateMemoryManager_080088ec(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int index;\n  uint *currentBlock;\n  uint *nextBlock;\n  undefined *tempPtr;\n  uint blockSize;\n  uint nextBlockSize;\n  undefined *prevBlock;\n  undefined *tempPtr2;\n  undefined4 *tempPtr3;\n  int blockIndex;\n  uint flag;\n  uint temp;\n  \n  if (arg2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag = *(uint *)(arg2 + -4);\n  currentBlock = (uint *)(arg2 + -8);\n  blockSize = flag & 0xfffffffe;\n  nextBlock = (uint *)((int)currentBlock + blockSize);\n  nextBlockSize = nextBlock[1] & 0xfffffffc;\n  if (DAT_20000454 == nextBlock) {\n    blockSize = blockSize + nextBlockSize;\n    if ((flag & 1) == 0) {\n      currentBlock = (uint *)((int)currentBlock - *(int *)(arg2 + -8));\n      nextBlockSize = currentBlock[2];\n      flag = currentBlock[3];\n      blockSize = blockSize + *(int *)(arg2 + -8);\n      *(uint *)(nextBlockSize + 0xc) = flag;\n      *(uint *)(flag + 8) = nextBlockSize;\n    }\n    nextBlockSize = DAT_20000858;\n    currentBlock[1] = blockSize | 1;\n    DAT_20000454 = currentBlock;\n    if (nextBlockSize <= blockSize) {\n      FUN_0800884c(arg1,DAT_20000a44);\n    }\nLAB_080089f0:\n    FUN_080090b4(arg1);\n    return;\n  }\n  nextBlock[1] = nextBlockSize;\n  if ((flag & 1) == 0) {\n    currentBlock = (uint *)((int)currentBlock - *(int *)(arg2 + -8));\n    tempPtr3 = (undefined4 *)currentBlock[2];\n    blockSize = blockSize + *(int *)(arg2 + -8);\n    flag = *(uint *)((int)nextBlock + nextBlockSize + 4) & 1;\n    if ((uint **)tempPtr3 == &DAT_20000454) {\n      if (flag == 0) {\n        flag = nextBlock[2];\n        temp = nextBlock[3];\n        blockSize = blockSize + nextBlockSize;\n        *(uint *)(flag + 0xc) = temp;\n        *(uint *)(temp + 8) = flag;\n        currentBlock[1] = blockSize | 1;\n        *(uint *)((int)currentBlock + blockSize) = blockSize;\n      }\n      else {\n        currentBlock[1] = blockSize | 1;\n        *nextBlock = blockSize;\n      }\n      goto LAB_080089f0;\n    }\n    temp = currentBlock[3];\n    tempPtr3[3] = temp;\n    *(undefined4 **)(temp + 8) = tempPtr3;\n  }\n  else {\n    flag = *(uint *)((int)nextBlock + nextBlockSize + 4) & 1;\n  }\n  if (flag == 0) {\n    tempPtr3 = (undefined4 *)nextBlock[2];\n    blockSize = blockSize + nextBlockSize;\n    if ((uint **)tempPtr3 == &DAT_20000454) {\n      DAT_2000045c = currentBlock;\n      DAT_20000460 = currentBlock;\n      currentBlock[2] = (uint)&DAT_20000454;\n      currentBlock[3] = (uint)&DAT_20000454;\n      currentBlock[1] = blockSize | 1;\n      *(uint *)((int)currentBlock + blockSize) = blockSize;\n      goto LAB_080089f0;\n    }\n    nextBlockSize = nextBlock[3];\n    tempPtr3[3] = nextBlockSize;\n    *(undefined4 **)(nextBlockSize + 8) = tempPtr3;\n    currentBlock[1] = blockSize | 1;\n    *(uint *)((int)currentBlock + blockSize) = blockSize;\n  }\n  else {\n    currentBlock[1] = blockSize | 1;\n    *(uint *)((int)currentBlock + blockSize) = blockSize;\n  }\n  if (blockSize < 0x200) {\n    blockIndex = (blockSize >> 3) + 1;\n    blockSize = 1 << ((int)(blockSize >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    nextBlockSize = *(uint *)(&DAT_2000044c + blockIndex * 8);\n    currentBlock[2] = nextBlockSize;\n    currentBlock[3] = (uint)(&DAT_20000444 + blockIndex * 8);\n    DAT_20000450 = (undefined *)blockSize;\n    *(uint **)(&DAT_2000044c + blockIndex * 8) = currentBlock;\n    *(uint **)(nextBlockSize + 0xc) = currentBlock;\n    FUN_080090b4(arg1,currentBlock,blockSize,arg4);\n    return;\n  }\n  nextBlockSize = blockSize >> 9;\n  if (nextBlockSize < 5) {\n    blockIndex = ((blockSize >> 6) + 0x39) * 8;\n    index = (blockSize >> 6) + 0x38;\n  }\n  else if (nextBlockSize < 0x15) {\n    blockIndex = (nextBlockSize + 0x5c) * 8;\n    index = nextBlockSize + 0x5b;\n  }\n  else if (nextBlockSize < 0x55) {\n    blockIndex = ((blockSize >> 0xc) + 0x6f) * 8;\n    index = (blockSize >> 0xc) + 0x6e;\n  }\n  else if (nextBlockSize < 0x155) {\n    blockIndex = ((blockSize >> 0xf) + 0x78) * 8;\n    index = (blockSize >> 0xf) + 0x77;\n  }\n  else if (nextBlockSize < 0x555) {\n    blockIndex = ((blockSize >> 0x12) + 0x7d) * 8;\n    index = (blockSize >> 0x12) + 0x7c;\n  }\n  else {\n    blockIndex = 0x3f8;\n    index = 0x7e;\n  }\n  tempPtr = *(undefined **)(&DAT_2000044c + blockIndex);\n  prevBlock = &DAT_20000444 + blockIndex;\n  if (prevBlock == tempPtr) {\n    tempPtr = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    tempPtr2 = prevBlock;\n    DAT_20000450 = tempPtr;\n  }\n  else {\n    do {\n      tempPtr2 = tempPtr;\n      if ((*(uint *)(tempPtr + 4) & 0xfffffffc) <= blockSize) break;\n      tempPtr = *(undefined **)(tempPtr + 8);\n      tempPtr2 = prevBlock;\n    } while (prevBlock != tempPtr);\n    prevBlock = *(undefined **)(tempPtr2 + 0xc);\n  }\n  currentBlock[2] = (uint)tempPtr2;\n  currentBlock[3] = (uint)prevBlock;\n  *(uint **)(prevBlock + 8) = currentBlock;\n  *(uint **)(tempPtr2 + 0xc) = currentBlock;\n  FUN_080090b4(arg1,currentBlock,tempPtr,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080088ec": "update_memory_manager_080088ec",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "index",
                "puVar2": "currentBlock",
                "puVar3": "nextBlock",
                "puVar4": "tempPtr",
                "uVar5": "blockSize",
                "uVar6": "nextBlockSize",
                "puVar7": "prevBlock",
                "puVar8": "tempPtr2",
                "puVar9": "tempPtr3",
                "iVar10": "blockIndex",
                "uVar11": "flag",
                "uVar12": "temp"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "entrypoint": "0x08008ad4",
            "current_name": "get_modified_value_08008ad4",
            "code": "\nint getModifiedValue_08008ad4(void)\n\n{\n  int originalValue;\n  \n  originalValue = *(int *)(DAT_2000001c + 0x34);\n  if (originalValue == 0) {\n    originalValue = 0x2000085c;\n  }\n  return originalValue + 0xf0;\n}\n\n",
            "renaming": {
                "FUN_08008ad4": "get_modified_value_08008ad4",
                "iVar1": "originalValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "FUNC_08008af0",
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af4": {
            "entrypoint": "0x08008af4",
            "current_name": "FUNC_08008af4",
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "calling": [
                "FUN_080090b4",
                "FUN_080098c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008af8": {
            "entrypoint": "0x08008af8",
            "current_name": "allocate_memory_08008af8",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *memory,uint size)\n\n{\n  undefined *pointer_1;\n  uint iterator_1;\n  uint iterator_2;\n  int counter;\n  undefined *pointer_2;\n  uint size_1;\n  uint size_2;\n  undefined4 *pointer_3;\n  undefined *pointer_4;\n  undefined *pointer_5;\n  int *result;\n  uint modified_size;\n  uint aligned_size;\n  int index_1;\n  undefined4 *pointer_6;\n  undefined4 *pointer_7;\n  \n  modified_size = size + 0xb;\n  if (modified_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    aligned_size = 0x10;\n    counter = 0x18;\n    modified_size = 2;\nLAB_08008b18:\n    pointer_5 = *(undefined **)((int)&DAT_20000450 + counter);\n    if ((pointer_5 != &DAT_20000444 + counter) ||\n       (pointer_5 = *(undefined **)((int)&DAT_20000458 + counter), &DAT_2000044c + counter != pointer_5)) {\n      counter = *(int *)(pointer_5 + 0xc);\n      pointer_2 = pointer_5 + (*(uint *)(pointer_5 + 4) & 0xfffffffc);\n      modified_size = *(uint *)(pointer_2 + 4);\nLAB_08008b34:\n      index_1 = *(int *)(pointer_5 + 8);\n      *(int *)(index_1 + 0xc) = counter;\n      *(int *)(counter + 8) = index_1;\n      *(uint *)(pointer_2 + 4) = modified_size | 1;\n      FUN_080090b4(memory);\n      return (int *)(pointer_5 + 8);\n    }\n    modified_size = modified_size + 2;\n  }\n  else {\n    aligned_size = modified_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *memory = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (aligned_size < 0x1f8) {\n      modified_size = modified_size >> 3;\n      counter = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    iterator_1 = modified_size >> 9;\n    if (iterator_1 == 0) {\n      counter = 0x200;\n      size_1 = 0x40;\n      iterator_1 = 0x3f;\n    }\n    else if (iterator_1 < 5) {\n      size_1 = (modified_size >> 6) + 0x39;\n      iterator_1 = (modified_size >> 6) + 0x38;\n      counter = size_1 * 8;\n    }\n    else if (iterator_1 < 0x15) {\n      size_1 = iterator_1 + 0x5c;\n      iterator_1 = iterator_1 + 0x5b;\n      counter = size_1 * 8;\n    }\n    else if (iterator_1 < 0x55) {\n      size_1 = (modified_size >> 0xc) + 0x6f;\n      iterator_1 = (modified_size >> 0xc) + 0x6e;\n      counter = size_1 * 8;\n    }\n    else if (iterator_1 < 0x155) {\n      size_1 = (modified_size >> 0xf) + 0x78;\n      iterator_1 = (modified_size >> 0xf) + 0x77;\n      counter = size_1 * 8;\n    }\n    else if (iterator_1 < 0x555) {\n      size_1 = (modified_size >> 0x12) + 0x7d;\n      iterator_1 = (modified_size >> 0x12) + 0x7c;\n      counter = size_1 * 8;\n    }\n    else {\n      counter = 0x3f8;\n      size_1 = 0x7f;\n      iterator_1 = 0x7e;\n    }\n    for (pointer_5 = *(undefined **)((int)&DAT_20000450 + counter); modified_size = size_1,\n        &DAT_20000444 + counter != pointer_5; pointer_5 = *(undefined **)(pointer_5 + 0xc)) {\n      index_1 = (*(uint *)(pointer_5 + 4) & 0xfffffffc) - aligned_size;\n      modified_size = iterator_1;\n      if (0xf < index_1) break;\n      if (-1 < index_1) {\n        pointer_2 = pointer_5 + (*(uint *)(pointer_5 + 4) & 0xfffffffc);\n        modified_size = *(uint *)(pointer_2 + 4);\n        counter = *(int *)(pointer_5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  pointer_6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    size_1 = 1 << ((int)modified_size >> 2 & 0xffU);\n    iterator_1 = DAT_20000450;\n    if (size_1 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    size_1 = DAT_2000045c[1];\n    size_2 = size_1 & 0xfffffffc;\n    iterator_1 = size_2 - aligned_size;\n    if (0xf < (int)iterator_1) {\n      pointer_7 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = pointer_7;\n      DAT_20000460 = pointer_7;\n      pointer_7[2] = &DAT_20000454;\n      pointer_7[3] = &DAT_20000454;\n      pointer_7[1] = iterator_1 | 1;\n      *(uint *)((int)pointer_6 + size_2) = iterator_1;\n      FUN_080090b4(memory);\n      return pointer_6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)iterator_1) {\n      *(uint *)((int)pointer_6 + size_2 + 4) = *(uint *)((int)pointer_6 + size_2 + 4) | 1;\n      FUN_080090b4(memory);\n      return pointer_6 + 2;\n    }\n    if (size_2 < 0x200) {\n      counter = (size_1 >> 3) + 1;\n      index_1 = *(int *)(&DAT_2000044c + counter * 8);\n      iterator_1 = 1 << ((int)(size_1 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      pointer_6[2] = index_1;\n      pointer_6[3] = &DAT_20000444 + counter * 8;\n      DAT_20000450 = iterator_1;\n      *(undefined4 **)(&DAT_2000044c + counter * 8) = pointer_6;\n      *(undefined4 **)(index_1 + 0xc) = pointer_6;\n    }\n    else {\n      iterator_1 = size_1 >> 9;\n      if (iterator_1 < 5) {\n        counter = ((size_1 >> 6) + 0x39) * 8;\n        index_1 = (size_1 >> 6) + 0x38;\n      }\n      else if (iterator_1 < 0x15) {\n        counter = (iterator_1 + 0x5c) * 8;\n        index_1 = iterator_1 + 0x5b;\n      }\n      else if (iterator_1 < 0x55) {\n        counter = ((size_1 >> 0xc) + 0x6f) * 8;\n        index_1 = (size_1 >> 0xc) + 0x6e;\n      }\n      else if (iterator_1 < 0x155) {\n        counter = ((size_1 >> 0xf) + 0x78) * 8;\n        index_1 = (size_1 >> 0xf) + 0x77;\n      }\n      else if (iterator_1 < 0x555) {\n        counter = ((size_1 >> 0x12) + 0x7d) * 8;\n        index_1 = (size_1 >> 0x12) + 0x7c;\n      }\n      else {\n        counter = 0x3f8;\n        index_1 = 0x7e;\n      }\n      pointer_5 = *(undefined **)(&DAT_2000044c + counter);\n      pointer_2 = &DAT_20000444 + counter;\n      if (pointer_2 == pointer_5) {\n        DAT_20000450 = 1 << (index_1 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(pointer_5 + 4) & 0xfffffffc) <= size_2) break;\n          pointer_5 = *(undefined **)(pointer_5 + 8);\n        } while (pointer_2 != pointer_5);\n        pointer_2 = *(undefined **)(pointer_5 + 0xc);\n      }\n      iterator_1 = DAT_20000450;\n      pointer_6[2] = pointer_5;\n      pointer_6[3] = pointer_2;\n      *(undefined4 **)(pointer_2 + 8) = pointer_6;\n      *(undefined4 **)(pointer_5 + 0xc) = pointer_6;\n    }\n    size_1 = 1 << ((int)modified_size >> 2 & 0xffU);\n    if (size_1 <= iterator_1) {\nLAB_08008c06:\n      if ((size_1 & iterator_1) == 0) {\n        modified_size = modified_size & 0xfffffffc;\n        do {\n          size_1 = size_1 << 1;\n          modified_size = modified_size + 4;\n        } while ((size_1 & iterator_1) == 0);\n      }\n      do {\n        pointer_7 = (undefined4 *)(&DAT_2000044c + modified_size * 8);\n        iterator_1 = modified_size;\n        pointer_6 = pointer_7;\n        do {\n          for (pointer_3 = (undefined4 *)pointer_6[3]; pointer_6 != pointer_3;\n              pointer_3 = (undefined4 *)pointer_3[3]) {\n            size_2 = pointer_3[1] & 0xfffffffc;\n            iterator_2 = size_2 - aligned_size;\n            if (0xf < (int)iterator_2) {\n              index_1 = pointer_3[2];\n              counter = pointer_3[3];\n              pointer_6 = (undefined4 *)(aligned_size + (int)pointer_3);\n              pointer_3[1] = aligned_size | 1;\n              *(int *)(index_1 + 0xc) = counter;\n              *(int *)(counter + 8) = index_1;\n              DAT_2000045c = pointer_6;\n              DAT_20000460 = pointer_6;\n              pointer_6[2] = &DAT_20000454;\n              pointer_6[3] = &DAT_20000454;\n              pointer_6[1] = iterator_2 | 1;\n              *(uint *)((int)pointer_3 + size_2) = iterator_2;\n              FUN_080090b4(memory);\n              return pointer_3 + 2;\n            }\n            if (-1 < (int)iterator_2) {\n              counter = pointer_3[3];\n              index_1 = pointer_3[2];\n              *(uint *)((int)pointer_3 + size_2 + 4) = *(uint *)((int)pointer_3 + size_2 + 4) | 1;\n              *(int *)(index_1 + 0xc) = counter;\n              *(int *)(counter + 8) = index_1;\n              FUN_080090b4(memory);\n              return pointer_3 + 2;\n            }\n          }\n          iterator_1 = iterator_1 + 1;\n          pointer_6 = pointer_6 + 2;\n        } while ((iterator_1 & 3) != 0);\n        do {\n          size_2 = modified_size & 3;\n          pointer_6 = pointer_7 + -2;\n          modified_size = modified_size - 1;\n          if (size_2 == 0) {\n            DAT_20000450 = DAT_20000450 & ~size_1;\n            break;\n          }\n          pointer_7 = (undefined4 *)*pointer_7;\n        } while (pointer_7 == pointer_6);\n        size_1 = size_1 * 2;\n        if ((DAT_20000450 <= size_1 && size_1 - DAT_20000450 != 0) || (modified_size = iterator_1, size_1 == 0))\n        break;\n        for (; (size_1 & DAT_20000450) == 0; size_1 = size_1 << 1) {\n          modified_size = modified_size + 4;\n        }\n      } while( true );\n    }\n  }\n  pointer_5 = DAT_20000454;\n  modified_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= modified_size) && (iterator_1 = modified_size - aligned_size, 0xf < (int)iterator_1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    iterator_1 = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    iterator_1 = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  pointer_2 = (undefined *)FUN_08009744(memory,iterator_1);\n  if (pointer_2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    modified_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    pointer_1 = pointer_5 + modified_size;\n    if (pointer_1 < pointer_2 || pointer_1 == pointer_2) {\n      pointer_4 = DAT_20000a14 + iterator_1;\n      if ((pointer_1 != pointer_2) || (((uint)pointer_1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = pointer_4;\n      *(uint *)(DAT_20000454 + 4) = modified_size + iterator_1 | 1;\n    }\n    else {\n      if (pointer_5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + iterator_1;\n      pointer_4 = pointer_2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)pointer_2 - (int)pointer_1);\n        pointer_4 = DAT_20000854;\n      }\n      DAT_20000854 = pointer_4;\n      size_1 = (uint)pointer_2 & 7;\n      if (size_1 == 0) {\n        counter = 0x1000;\n      }\n      else {\n        pointer_2 = pointer_2 + (8 - size_1);\n        counter = 0x1008 - size_1;\n      }\n      counter = counter - ((uint)(pointer_2 + iterator_1) & 0xfff);\n      index_1 = FUN_08009744(memory,counter);\n      if (index_1 == -1) {\n        iterator_1 = 1;\n        counter = 0;\n      }\n      else {\n        iterator_1 = (index_1 - (int)pointer_2) + counter | 1;\n      }\n      pointer_4 = DAT_20000a14 + counter;\n      DAT_20000454 = pointer_2;\n      DAT_20000a14 = pointer_4;\n      *(uint *)(pointer_2 + 4) = iterator_1;\n      if (pointer_5 != &DAT_2000044c) {\n        if (modified_size < 0x10) {\n          *(undefined4 *)(pointer_2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        modified_size = modified_size - 0xc & 0xfffffff8;\n        *(uint *)(pointer_5 + 4) = *(uint *)(pointer_5 + 4) & 1 | modified_size;\n        *(undefined4 *)(pointer_5 + modified_size + 4) = 5;\n        *(undefined4 *)(pointer_5 + modified_size + 8) = 5;\n        if (0xf < modified_size) {\n          FUN_080088ec(memory,pointer_5 + 8);\n          pointer_4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < pointer_4) {\n      DAT_20000a3c = pointer_4;\n    }\n    modified_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < pointer_4) {\n      DAT_20000a40 = pointer_4;\n    }\n  }\n  iterator_1 = (modified_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (modified_size & 0xfffffffc)) && (0xf < (int)iterator_1)) {\nLAB_08008dac:\n    pointer_5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = pointer_5;\n    *(uint *)(pointer_5 + 4) = iterator_1 | 1;\n    FUN_080090b4(memory);\n    return result;\n  }\nLAB_08008eee:\n  FUN_080090b4(memory);\n  return (int *)0x0;\n}\n\n",
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "param_1": "memory",
                "param_2": "size",
                "puVar1": "pointer_1",
                "uVar2": "iterator_1",
                "uVar3": "iterator_2",
                "iVar4": "counter",
                "puVar5": "pointer_2",
                "uVar6": "size_1",
                "uVar7": "size_2",
                "puVar8": "pointer_3",
                "puVar9": "pointer_4",
                "puVar10": "pointer_5",
                "piVar11": "result",
                "uVar12": "modified_size",
                "uVar13": "aligned_size",
                "iVar14": "index_1",
                "puVar15": "pointer_6",
                "puVar16": "pointer_7"
            },
            "calling": [
                "FUN_08005e9c",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08009980"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800901c": {
            "entrypoint": "0x0800901c",
            "current_name": "find_first_occurrence_0800901c",
            "code": "\nuint * find_first_occurrence_0800901c(uint *array,uint search_value,uint array_length)\n\n{\n  uint temp;\n  uint combined_value;\n  uint *ptr;\n  uint masked_value;\n  bool is_empty;\n  \n  masked_value = search_value & 0xff;\n  if (((uint)array & 3) == 0) {\nLAB_0800904a:\n    if (3 < array_length) {\n      combined_value = (search_value & 0xff) << 8 | masked_value;\n      ptr = array;\n      do {\n        temp = *ptr ^ (combined_value | combined_value << 0x10);\n        array = ptr + 1;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) goto LAB_08009050;\n        array_length = array_length - 4;\n        ptr = array;\n      } while (3 < array_length);\n    }\n    ptr = array;\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else {\nLAB_08009050:\n      array = ptr;\n      if (*(byte *)array != masked_value) {\n        ptr = (uint *)(array_length + (int)array);\n        do {\n          array = (uint *)((int)array + 1);\n          if (ptr == array) goto LAB_0800906c;\n        } while (*(byte *)array != masked_value);\n      }\n    }\n  }\n  else {\n    combined_value = array_length - 1;\n    if (array_length == 0) {\nLAB_0800906c:\n      array = (uint *)0x0;\n    }\n    else if (*(byte *)array != masked_value) {\n      ptr = (uint *)((int)array + 1);\n      do {\n        array = ptr;\n        array_length = combined_value;\n        if (((uint)array & 3) == 0) goto LAB_0800904a;\n        is_empty = combined_value == 0;\n        combined_value = combined_value - 1;\n        if (is_empty) goto LAB_0800906c;\n        ptr = (uint *)((int)array + 1);\n      } while (*(byte *)array != masked_value);\n    }\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_0800901c": "find_first_occurrence_0800901c",
                "param_1": "array",
                "param_2": "search_value",
                "param_3": "array_length",
                "uVar1": "temp",
                "uVar2": "combined_value",
                "puVar3": "ptr",
                "uVar4": "masked_value",
                "bVar5": "is_empty"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090a8": {
            "entrypoint": "0x080090a8",
            "current_name": "initialize_data_080090a8",
            "code": "\nvoid initializeData_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090a8": "initialize_data_080090a8"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090b4": {
            "entrypoint": "0x080090b4",
            "current_name": "initialize_data_080090b4",
            "code": "\nvoid initializeData_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080090b4": "initialize_data_080090b4"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08008af4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080090c0": {
            "entrypoint": "0x080090c0",
            "current_name": "find_or_create_entry_080090c0",
            "code": "\nundefined4 * findOrCreateEntry_080090c0(int entryList,uint index)\n\n{\n  undefined4 *entryPtr;\n  int entryExists;\n  \n  entryExists = *(int *)(entryList + 0x4c);\n  if (entryExists == 0) {\n    entryExists = FUN_08009980(entryList,4,0x21);\n    *(int *)(entryList + 0x4c) = entryExists;\n    if (entryExists == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  entryPtr = *(undefined4 **)(entryExists + index * 4);\n  if (entryPtr == (undefined4 *)0x0) {\n    entryExists = 1 << (index & 0xff);\n    entryPtr = (undefined4 *)FUN_08009980(entryList,1,(entryExists + 5) * 4);\n    if (entryPtr == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    entryPtr[1] = index;\n    entryPtr[2] = entryExists;\n  }\n  else {\n    *(undefined4 *)(entryExists + index * 4) = *entryPtr;\n  }\n  entryPtr[3] = 0;\n  entryPtr[4] = 0;\n  return entryPtr;\n}\n\n",
            "renaming": {
                "FUN_080090c0": "find_or_create_entry_080090c0",
                "param_1": "entryList",
                "param_2": "index",
                "puVar1": "entryPtr",
                "iVar2": "entryExists"
            },
            "calling": [
                "FUN_08009444",
                "FUN_08009258",
                "FUN_080079e8",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009630"
            ],
            "called": [
                "FUN_08009980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800910c": {
            "entrypoint": "0x0800910c",
            "current_name": "set_value_and_pointer_0800910c",
            "code": "\nvoid setValueAndPointer_0800910c(int memoryOffset,undefined4 *targetMemory)\n\n{\n  int memoryValue;\n  \n  if (targetMemory != (undefined4 *)0x0) {\n    memoryValue = *(int *)(memoryOffset + 0x4c);\n    *targetMemory = *(undefined4 *)(memoryValue + targetMemory[1] * 4);\n    *(undefined4 **)(memoryValue + targetMemory[1] * 4) = targetMemory;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800910c": "set_value_and_pointer_0800910c",
                "param_1": "memoryOffset",
                "param_2": "targetMemory",
                "iVar1": "memoryValue"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009120": {
            "entrypoint": "0x08009120",
            "current_name": "calculate_checksum_08009120",
            "code": "\nundefined4 * calculateChecksum_08009120(int inputArray,undefined4 *outputArray,int multiplier,uint checksum)\n\n{\n  undefined4 *resultArray;\n  uint carryOver;\n  int arrayLength;\n  uint *arrayPointer;\n  int index;\n  \n  index = 0;\n  arrayLength = outputArray[4];\n  arrayPointer = outputArray + 5;\n  do {\n    index = index + 1;\n    checksum = multiplier * (*arrayPointer & 0xffff) + checksum;\n    carryOver = multiplier * (*arrayPointer >> 0x10) + (checksum >> 0x10);\n    *arrayPointer = (checksum & 0xffff) + carryOver * 0x10000;\n    checksum = carryOver >> 0x10;\n    arrayPointer = arrayPointer + 1;\n  } while (index < arrayLength);\n  resultArray = outputArray;\n  if (checksum != 0) {\n    if ((int)outputArray[2] <= arrayLength) {\n      resultArray = (undefined4 *)FUN_080090c0(inputArray,outputArray[1] + 1);\n      FUN_08001084(resultArray + 3,outputArray + 3,(outputArray[4] + 2) * 4);\n      index = *(int *)(inputArray + 0x4c);\n      *outputArray = *(undefined4 *)(index + outputArray[1] * 4);\n      *(undefined4 **)(index + outputArray[1] * 4) = outputArray;\n    }\n    resultArray[arrayLength + 5] = checksum;\n    resultArray[4] = arrayLength + 1;\n  }\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "resultArray",
                "uVar2": "carryOver",
                "iVar3": "arrayLength",
                "puVar4": "arrayPointer",
                "iVar5": "index"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091a4": {
            "entrypoint": "0x080091a4",
            "current_name": "count_leading_zeroes_080091a4",
            "code": "\nint countLeadingZeroes_080091a4(uint value)\n\n{\n  int leadingZeroCount;\n  \n  if ((value & 0xffff0000) == 0) {\n    value = value << 0x10;\n    leadingZeroCount = 0x10;\n  }\n  else {\n    leadingZeroCount = 0;\n  }\n  if ((value & 0xff000000) == 0) {\n    value = value << 8;\n    leadingZeroCount = leadingZeroCount + 8;\n  }\n  if ((value & 0xf0000000) == 0) {\n    value = value << 4;\n    leadingZeroCount = leadingZeroCount + 4;\n  }\n  if ((value & 0xc0000000) == 0) {\n    value = value << 2;\n    leadingZeroCount = leadingZeroCount + 2;\n  }\n  if (-1 < (int)value) {\n    if ((int)(value << 1) < 0) {\n      return leadingZeroCount + 1;\n    }\n    leadingZeroCount = 0x20;\n  }\n  return leadingZeroCount;\n}\n\n",
            "renaming": {
                "FUN_080091a4": "count_leading_zeroes_080091a4",
                "param_1": "value",
                "iVar1": "leadingZeroCount"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091e4": {
            "entrypoint": "0x080091e4",
            "current_name": "count_leading_zeros_080091e4",
            "code": "\nint countLeadingZeros_080091e4(uint *value)\n\n{\n  int leadingZeros;\n  uint tempValue;\n  \n  tempValue = *value;\n  if ((tempValue & 7) == 0) {\n    if ((tempValue & 0xffff) == 0) {\n      tempValue = tempValue >> 0x10;\n      leadingZeros = 0x10;\n    }\n    else {\n      leadingZeros = 0;\n    }\n    if ((tempValue & 0xff) == 0) {\n      tempValue = tempValue >> 8;\n      leadingZeros = leadingZeros + 8;\n    }\n    if ((tempValue & 0xf) == 0) {\n      tempValue = tempValue >> 4;\n      leadingZeros = leadingZeros + 4;\n    }\n    if ((tempValue & 3) == 0) {\n      tempValue = tempValue >> 2;\n      leadingZeros = leadingZeros + 2;\n    }\n    if (-1 < (int)(tempValue << 0x1f)) {\n      tempValue = tempValue >> 1;\n      if (tempValue == 0) {\n        return 0x20;\n      }\n      leadingZeros = leadingZeros + 1;\n    }\n    *value = tempValue;\n    return leadingZeros;\n  }\n  if ((int)(tempValue << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(tempValue << 0x1e)) {\n    *value = tempValue >> 2;\n    return 2;\n  }\n  *value = tempValue >> 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "param_1": "value",
                "iVar1": "leadingZeros",
                "uVar2": "tempValue"
            },
            "calling": [
                "FUN_08009630"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009244": {
            "entrypoint": "0x08009244",
            "current_name": "initialize_data_08009244",
            "code": "\nvoid initializeData_08009244(undefined4 dataPointer,undefined4 value)\n\n{\n  int tempVariable;\n  \n  tempVariable = FUN_080090c0(dataPointer,1);\n  *(undefined4 *)(tempVariable + 0x10) = 1;\n  *(undefined4 *)(tempVariable + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009244": "initialize_data_08009244",
                "param_1": "dataPointer",
                "param_2": "value",
                "iVar1": "tempVariable"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009258": {
            "entrypoint": "0x08009258",
            "current_name": "initialize_memory_08009258",
            "code": "\nvoid initializeMemory_08009258(undefined4 input,int sourceArray,int destinationArray)\n\n{\n  uint *tempPtr1;\n  uint *tempPtr2;\n  int length;\n  uint tempVar;\n  uint *sourcePtr;\n  uint startOffset;\n  uint *endPtr;\n  uint tempVar2;\n  int sourceLength;\n  int minLength;\n  uint endOffset;\n  int sourceLength1;\n  int sourceArray1;\n  uint *tempPtr3;\n  uint *tempPtr4;\n  uint *tempPtr5;\n  uint *tempPtr6;\n  uint *tempPtr7;\n  \n  sourceLength1 = *(int *)(sourceArray + 0x10);\n  sourceLength = *(int *)(destinationArray + 0x10);\n  minLength = sourceLength;\n  sourceArray1 = sourceArray;\n  if (sourceLength1 < sourceLength) {\n    minLength = sourceLength1;\n    sourceLength1 = sourceLength;\n    sourceArray1 = destinationArray;\n    destinationArray = sourceArray;\n  }\n  sourceLength = sourceLength1 + minLength;\n  length = *(int *)(sourceArray1 + 4);\n  if (*(int *)(sourceArray1 + 8) < sourceLength) {\n    length = length + 1;\n  }\n  length = FUN_080090c0(input,length);\n  tempPtr7 = (uint *)(length + 0x14);\n  tempPtr6 = tempPtr7 + sourceLength;\n  for (sourcePtr = tempPtr7; sourcePtr < tempPtr6; sourcePtr = sourcePtr + 1) {\n    *sourcePtr = 0;\n  }\n  startOffset = destinationArray + 0x14;\n  endOffset = startOffset + minLength * 4;\n  sourcePtr = (uint *)(sourceArray1 + 0x14);\n  if (startOffset < endOffset) {\n    endPtr = (uint *)(startOffset + ((endOffset - destinationArray) - 0x15 & 0xfffffffc));\n    tempPtr5 = (uint *)(destinationArray + 0x10);\n    do {\n      while( true ) {\n        tempPtr5 = tempPtr5 + 1;\n        startOffset = *tempPtr5 & 0xffff;\n        if (startOffset != 0) break;\n        startOffset = *tempPtr5 >> 0x10;\n        if (startOffset == 0) goto LAB_080092d2;\nLAB_0800932c:\n        tempVar2 = *tempPtr7;\n        tempVar = 0;\n        tempPtr1 = sourcePtr;\n        tempPtr3 = tempPtr7;\n        endOffset = tempVar2;\n        do {\n          tempPtr4 = tempPtr3;\n          tempVar = tempVar + startOffset * *(ushort *)tempPtr1 + (endOffset >> 0x10);\n          *tempPtr4 = tempVar2 & 0xffff | tempVar * 0x10000;\n          tempPtr2 = tempPtr1 + 1;\n          endOffset = tempPtr4[1];\n          tempVar2 = startOffset * (*tempPtr1 >> 0x10) + (endOffset & 0xffff) + (tempVar >> 0x10);\n          tempVar = tempVar2 >> 0x10;\n          tempPtr1 = tempPtr2;\n          tempPtr3 = tempPtr4 + 1;\n        } while (tempPtr2 < sourcePtr + sourceLength1);\n        tempPtr4[1] = tempVar2;\n        tempPtr7 = tempPtr7 + 1;\n        if (endPtr == tempPtr5) goto LAB_0800937a;\n      }\n      endOffset = 0;\n      tempPtr1 = tempPtr7;\n      tempPtr3 = sourcePtr;\n      do {\n        tempPtr2 = tempPtr1;\n        tempPtr4 = tempPtr3 + 1;\n        tempVar2 = startOffset * (*tempPtr3 & 0xffff) + (*tempPtr2 & 0xffff) + endOffset;\n        tempVar = startOffset * (*tempPtr3 >> 0x10) + (*tempPtr2 >> 0x10) + (tempVar2 >> 0x10);\n        endOffset = tempVar >> 0x10;\n        *tempPtr2 = tempVar2 & 0xffff | tempVar * 0x10000;\n        tempPtr1 = tempPtr2 + 1;\n        tempPtr3 = tempPtr4;\n      } while (tempPtr4 < sourcePtr + sourceLength1);\n      tempPtr2[1] = endOffset;\n      startOffset = *tempPtr5 >> 0x10;\n      if (startOffset != 0) goto LAB_0800932c;\nLAB_080092d2:\n      tempPtr7 = tempPtr7 + 1;\n    } while (endPtr != tempPtr5);\n  }\nLAB_0800937a:\n  if (0 < sourceLength) {\n    startOffset = tempPtr6[-1];\n    tempPtr6 = tempPtr6 + -1;\n    while ((startOffset == 0 && (sourceLength = sourceLength + -1, sourceLength != 0))) {\n      tempPtr6 = tempPtr6 + -1;\n      startOffset = *tempPtr6;\n    }\n  }\n  *(int *)(length + 0x10) = sourceLength;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009258": "initialize_memory_08009258",
                "param_1": "input",
                "param_2": "sourceArray",
                "param_3": "destinationArray",
                "puVar1": "tempPtr1",
                "puVar2": "tempPtr2",
                "iVar3": "length",
                "uVar4": "tempVar",
                "puVar5": "sourcePtr",
                "uVar6": "startOffset",
                "puVar7": "endPtr",
                "uVar8": "tempVar2",
                "iVar9": "sourceLength",
                "iVar10": "minLength",
                "uVar11": "endOffset",
                "iVar12": "sourceLength1",
                "iVar13": "sourceArray1",
                "puVar14": "tempPtr3",
                "puVar15": "tempPtr4",
                "puVar16": "tempPtr5",
                "puVar17": "tempPtr6",
                "puVar18": "tempPtr7"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080093a4": {
            "entrypoint": "0x080093a4",
            "current_name": "process_data_080093a4",
            "code": "\nundefined4 * processData_080093a4(int inputValue,undefined4 *outputArray,uint arraySize)\n\n{\n  int tempVar1;\n  int tempVar2;\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if ((arraySize & 3) != 0) {\n    outputArray = (undefined4 *)\n              FUN_08009120(inputValue,outputArray,*(undefined4 *)(&DAT_0800a070 + ((arraySize & 3) - 1) * 4),\n                           0);\n  }\n  tempVar2 = (int)arraySize >> 2;\n  if (tempVar2 != 0) {\n    ptr2 = *(undefined4 **)(inputValue + 0x48);\n    if (ptr2 == (undefined4 *)0x0) {\n      ptr2 = (undefined4 *)FUN_080090c0(inputValue,1);\n      ptr2[4] = 1;\n      ptr2[5] = 0x271;\n      *(undefined4 **)(inputValue + 0x48) = ptr2;\n      *ptr2 = 0;\n    }\n    ptr1 = outputArray;\n    if (tempVar2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    tempVar2 = tempVar2 >> 1;\n    ptr1 = ptr2;\n    if (tempVar2 != 0) {\n      while( true ) {\n        ptr2 = (undefined4 *)*ptr1;\n        if (ptr2 == (undefined4 *)0x0) {\n          ptr2 = (undefined4 *)FUN_08009258(inputValue,ptr1,ptr1);\n          *ptr1 = ptr2;\n          *ptr2 = 0;\n        }\n        ptr1 = outputArray;\n        if (-1 < tempVar2 << 0x1f) break;\nLAB_080093d2:\n        outputArray = (undefined4 *)FUN_08009258(inputValue,ptr1,ptr2);\n        if (ptr1 == (undefined4 *)0x0) break;\n        tempVar1 = *(int *)(inputValue + 0x4c);\n        tempVar2 = tempVar2 >> 1;\n        *ptr1 = *(undefined4 *)(tempVar1 + ptr1[1] * 4);\n        *(undefined4 **)(tempVar1 + ptr1[1] * 4) = ptr1;\n        ptr1 = ptr2;\n        if (tempVar2 == 0) {\n          return outputArray;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_080093a4": "process_data_080093a4",
                "param_1": "inputValue",
                "param_2": "outputArray",
                "param_3": "arraySize",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "puVar3": "ptr1",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009444": {
            "entrypoint": "0x08009444",
            "current_name": "update_data_08009444",
            "code": "\nvoid updateData_08009444(int inputAddress,undefined4 *dataPointer,uint dataLength)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  undefined4 tempVar4;\n  int tempVar5;\n  int tempVar6;\n  uint *outputPointer;\n  uint *tempPointer1;\n  uint *tempPointer3;\n  uint *tempPointer4;\n  int shiftAmount;\n  int finalValue;\n  uint carry;\n  uint *tempPointer2;\n  \n  tempVar5 = iVar5;\n  shiftAmount = (int)dataLength >> 5;\n  finalValue = shiftAmount + tempVar5 + 1;\n  tempVar3 = iVar3;\n  tempVar2 = iVar2;\n  if ((int)iVar2 < finalValue) {\n    do {\n      tempVar6 = tempVar2 * 2;\n      tempVar1 = tempVar2 * -2;\n      tempVar3 = tempVar3 + 1;\n      tempVar2 = tempVar6;\n    } while (finalValue != tempVar6 && finalValue + tempVar1 < 0 == SBORROW4(finalValue,tempVar6));\n  }\n  tempVar2 = FUN_080090c0(inputAddress,tempVar3);\n  outputPointer = (uint *)(tempVar2 + 0x14);\n  if (0 < shiftAmount) {\n    tempPointer4 = outputPointer + shiftAmount;\n    tempPointer1 = outputPointer;\n    do {\n      tempPointer2 = tempPointer1 + 1;\n      *tempPointer1 = 0;\n      outputPointer = tempPointer4;\n      tempPointer1 = tempPointer2;\n    } while (tempPointer2 != tempPointer4);\n  }\n  tempVar3 = iVar5;\n  tempPointer1 = dataPointer + 5;\n  dataLength = dataLength & 0x1f;\n  if (dataLength == 0) {\n    outputPointer = outputPointer + -1;\n    tempPointer4 = tempPointer1;\n    do {\n      tempPointer2 = tempPointer4 + 1;\n      outputPointer = outputPointer + 1;\n      *outputPointer = *tempPointer4;\n      tempPointer4 = tempPointer2;\n    } while (tempPointer2 < tempPointer1 + tempVar3);\n  }\n  else {\n    carry = 0;\n    tempPointer4 = tempPointer1;\n    do {\n      tempPointer2 = outputPointer;\n      *tempPointer2 = *tempPointer4 << dataLength | carry;\n      tempPointer3 = tempPointer4 + 1;\n      carry = *tempPointer4 >> (0x20 - dataLength & 0xff);\n      outputPointer = tempPointer2 + 1;\n      tempPointer4 = tempPointer3;\n    } while (tempPointer3 < tempPointer1 + tempVar3);\n    tempPointer2Plus4 = carry;\n    if (carry != 0) {\n      finalValue = shiftAmount + tempVar5 + 2;\n    }\n  }\n  tempVar5 = *(int *)(inputAddress + 0x4c);\n  tempVar3 = iVar3;\n  tempVar4 = *(undefined4 *)(tempVar5 + tempVar3 * 4);\n  *(int *)(tempVar2 + 0x10) = finalValue + -1;\n  *dataPointer = tempVar4;\n  *(undefined4 **)(tempVar5 + tempVar3 * 4) = dataPointer;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009444": "update_data_08009444",
                "param_1": "inputAddress",
                "param_2": "dataPointer",
                "param_3": "dataLength",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "iVar3": "tempVar3",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "tempVar6",
                "puVar7": "outputPointer",
                "puVar8": "tempPointer1",
                "puVar9": "tempPointer2",
                "puVar10": "tempPointer3",
                "puVar11": "tempPointer4",
                "iVar12": "shiftAmount",
                "iVar13": "finalValue",
                "uVar14": "carry",
                "param_2[4]": "iVar5",
                "param_2[1]": "iVar3",
                "param_2[2]": "iVar2",
                "puVar9[1]": "tempPointer2Plus4"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094f8": {
            "entrypoint": "0x080094f8",
            "current_name": "compare_arrays_080094f8",
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *array2_ptr;\n  int array2_offset;\n  uint *array1_ptr;\n  \n  array2_offset = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_offset;\n  if (difference == 0) {\n    array2_ptr = (uint *)(array2 + 0x14 + array2_offset * 4);\n    array1_ptr = (uint *)(array1 + 0x14) + array2_offset;\n    do {\n      array1_ptr = array1_ptr + -1;\n      array2_ptr = array2_ptr + -1;\n      if (*array1_ptr != *array2_ptr) {\n        if (*array2_ptr <= *array1_ptr) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < array1_ptr);\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "param_1": "array1",
                "param_2": "array2",
                "iVar1": "difference",
                "iVar3": "array2_offset",
                "puVar2": "array2_ptr",
                "puVar4": "array1_ptr"
            },
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009530": {
            "entrypoint": "0x08009530",
            "current_name": "reverse_and_compare_array_08009530",
            "code": "\nvoid reverseAndCompareArray_08009530(undefined4 input_1,uint *array_1,uint *array_2,undefined4 input_2)\n\n{\n  int result;\n  uint *array2_ptr_1;\n  uint array1_size;\n  uint carry;\n  undefined4 isReverse;\n  uint *result_ptr;\n  uint *array1_ptr_1;\n  uint *array2_ptr_2;\n  uint *array1_ptr_3;\n  uint *array1_end;\n  int carry_overflow;\n  uint *array2_ptr_3;\n  uint array2_size;\n  uint *array1_ptr_2;\n  \n  array2_ptr_1 = (uint *)array_2[4];\n  array1_end = array_1 + 5;\n  array2_ptr_3 = array_2 + 5;\n  array1_ptr_1 = array1_end;\n  array2_ptr_2 = array_1;\n  if ((uint *)array_1[4] == array2_ptr_1) {\n    result_ptr = array1_end + (int)array2_ptr_1;\n    array2_ptr_1 = array2_ptr_3 + (int)array2_ptr_1;\n    while( true ) {\n      result_ptr = result_ptr + -1;\n      array2_ptr_1 = array2_ptr_1 + -1;\n      if (*result_ptr != *array2_ptr_1) break;\n      if (result_ptr <= array1_end) {\n        carry_overflow = FUN_080090c0(input_1,0,result_ptr,array2_ptr_1,input_2);\n        *(undefined4 *)(carry_overflow + 0x10) = 1;\n        *(undefined4 *)(carry_overflow + 0x14) = 0;\n        return;\n      }\n    }\n    isReverse = 0;\n    if (*array2_ptr_1 <= *result_ptr) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array_1[4] - (int)array2_ptr_1) {\n    isReverse = 0;\n    result_ptr = array_2;\n    goto LAB_08009578;\n  }\n  isReverse = 1;\n  result_ptr = array1_end;\n  array2_ptr_1 = array_1;\n  array1_ptr_1 = array2_ptr_3;\n  array2_ptr_2 = array_2;\n  array_2 = array_1;\n  array2_ptr_3 = array1_end;\nLAB_08009578:\n  result = FUN_080090c0(input_1,array2_ptr_2[1],result_ptr,array2_ptr_1,input_2);\n  carry_overflow = 0;\n  array2_size = array2_ptr_2[4];\n  array1_size = array_2[4];\n  *(undefined4 *)(result + 0xc) = isReverse;\n  array1_end = array1_ptr_1 + array2_size;\n  array2_ptr_1 = (uint *)(result + 0x14);\n  array2_ptr_2 = array2_ptr_3;\n  do {\n    array1_ptr_2 = array1_ptr_1 + 1;\n    array1_ptr_3 = array2_ptr_2 + 1;\n    carry = ((*array1_ptr_1 & 0xffff) + carry_overflow) - (*array2_ptr_2 & 0xffff);\n    carry_overflow = ((*array1_ptr_1 >> 0x10) - (*array2_ptr_2 >> 0x10)) + ((int)carry >> 0x10);\n    carry = carry & 0xffff | carry_overflow * 0x10000;\n    result_ptr = array2_ptr_1 + 1;\n    *array2_ptr_1 = carry;\n    carry_overflow = carry_overflow >> 0x10;\n    array2_ptr_1 = result_ptr;\n    array1_ptr_1 = array1_ptr_2;\n    array2_ptr_2 = array1_ptr_3;\n  } while (array1_ptr_3 < array2_ptr_3 + array1_size);\n  array2_ptr_1 = array1_ptr_2;\n  array1_ptr_1 = result_ptr;\n  if (array1_ptr_2 < array1_end) {\n    do {\n      array2_ptr_2 = array2_ptr_1 + 1;\n      array1_size = (*array2_ptr_1 & 0xffff) + carry_overflow;\n      carry_overflow = ((int)array1_size >> 0x10) + (*array2_ptr_1 >> 0x10);\n      carry = array1_size & 0xffff | carry_overflow * 0x10000;\n      *array1_ptr_1 = carry;\n      carry_overflow = carry_overflow >> 0x10;\n      array2_ptr_1 = array2_ptr_2;\n      array1_ptr_1 = array1_ptr_1 + 1;\n    } while (array2_ptr_2 < array1_end);\n    result_ptr = (uint *)((int)result_ptr + ((int)array1_end + ~(uint)array1_ptr_2 & 0xfffffffc) + 4);\n  }\n  result_ptr = result_ptr + -1;\n  while (carry == 0) {\n    result_ptr = result_ptr + -1;\n    array2_size = array2_size - 1;\n    carry = *result_ptr;\n  }\n  *(uint *)(result + 0x10) = array2_size;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009530": "reverse_and_compare_array_08009530",
                "param_1": "input_1",
                "param_2": "array_1",
                "param_3": "array_2",
                "param_4": "input_2",
                "iVar1": "result",
                "puVar2": "array2_ptr_1",
                "uVar3": "array1_size",
                "uVar4": "carry",
                "uVar5": "isReverse",
                "puVar6": "result_ptr",
                "puVar7": "array1_ptr_1",
                "puVar8": "array1_ptr_2",
                "puVar9": "array2_ptr_2",
                "puVar10": "array1_ptr_3",
                "puVar11": "array1_end",
                "iVar12": "carry_overflow",
                "puVar13": "array2_ptr_3",
                "uVar14": "array2_size"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080090c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009630": {
            "entrypoint": "0x08009630",
            "current_name": "extract_and_convert_data_08009630",
            "code": "\nint extract_and_convert_data_08009630(undefined4 data_source,undefined4 data_destination,uint source_length,uint data_value,int *result_1,\n                int *result_2)\n\n{\n  int data_extraction;\n  uint shifted_value;\n  int conversion_result;\n  int result_type;\n  uint shifted_data;\n  uint flag;\n  undefined8 result;\n  uint source_data;\n  uint converted_data;\n  \n  data_extraction = FUN_080090c0(data_source,1);\n  flag = (data_value << 1) >> 0x15;\n  converted_data = data_value & 0xfffff;\n  if (flag != 0) {\n    converted_data = converted_data | 0x100000;\n  }\n  if (source_length == 0) {\n    conversion_result = FUN_080091e4(&converted_data);\n    result_type = 1;\n    shifted_value = conversion_result + 0x20;\n    *(undefined4 *)(data_extraction + 0x10) = 1;\n    *(uint *)(data_extraction + 0x14) = converted_data;\n  }\n  else {\n    source_data = source_length;\n    shifted_value = FUN_080091e4(&source_data);\n    if (shifted_value == 0) {\n      *(uint *)(data_extraction + 0x14) = source_data;\n    }\n    else {\n      shifted_data = converted_data << (0x20 - shifted_value & 0xff);\n      converted_data = converted_data >> (shifted_value & 0xff);\n      *(uint *)(data_extraction + 0x14) = shifted_data | source_data;\n    }\n    if (converted_data == 0) {\n      result_type = 1;\n    }\n    else {\n      result_type = 2;\n    }\n    *(uint *)(data_extraction + 0x18) = converted_data;\n    *(int *)(data_extraction + 0x10) = result_type;\n  }\n  if (flag == 0) {\n    *result_1 = shifted_value - 0x432;\n    result = FUN_080091a4(*(undefined4 *)(data_extraction + result_type * 4 + 0x10));\n    *result_2 = (int)((ulonglong)result >> 0x20) * 0x20 - (int)result;\n    return data_extraction;\n  }\n  *result_1 = (flag - 0x433) + shifted_value;\n  *result_2 = 0x35 - shifted_value;\n  return data_extraction;\n}\n\n",
            "renaming": {
                "FUN_08009630": "extract_and_convert_data_08009630",
                "param_1": "data_source",
                "param_2": "data_destination",
                "param_3": "source_length",
                "param_4": "data_value",
                "param_5": "result_1",
                "param_6": "result_2",
                "iVar1": "data_extraction",
                "uVar2": "shifted_value",
                "iVar3": "conversion_result",
                "iVar4": "result_type",
                "uVar5": "shifted_data",
                "uVar6": "flag",
                "uVar7": "result",
                "local_20": "source_data",
                "local_1c": "converted_data"
            },
            "calling": [
                "FUN_080079e8"
            ],
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e0": {
            "entrypoint": "0x080096e0",
            "current_name": "calculate_normalized_float_080096e0",
            "code": "\nundefined8 calculateNormalizedFloat_080096e0(uint normalizedInput1,uint normalizedInput2,int *outputIntPointer,undefined4 inputFloat)\n\n{\n  int loopCounter;\n  uint normalizedInput2;\n  undefined8 combinedIntegerFloat;\n  \n  combinedIntegerFloat = CONCAT44(normalizedInput2,normalizedInput1);\n  loopCounter = 0;\n  normalizedInput2 = normalizedInput2 & 0x7fffffff;\n  *outputIntPointer = 0;\n  if ((normalizedInput2 < 0x7ff00000) && ((normalizedInput2 | normalizedInput1) != 0)) {\n    if (normalizedInput2 < 0x100000) {\n      combinedIntegerFloat = FUN_080004c8(normalizedInput1,normalizedInput2,0,0x43500000,inputFloat);\n      loopCounter = -0x36;\n      normalizedInput2 = (uint)((ulonglong)combinedIntegerFloat >> 0x20) & 0x7fffffff;\n    }\n    normalizedInput1 = (uint)combinedIntegerFloat;\n    normalizedInput2 = (uint)((ulonglong)combinedIntegerFloat >> 0x20) & 0x800fffff | 0x3fe00000;\n    *outputIntPointer = ((int)normalizedInput2 >> 0x14) + -0x3fe + loopCounter;\n  }\n  return CONCAT44(normalizedInput2,normalizedInput1);\n}\n\n",
            "renaming": {
                "FUN_080096e0": "calculate_normalized_float_080096e0",
                "param_1": "normalizedInput1",
                "param_2": "normalizedInput2",
                "param_3": "outputIntPointer",
                "param_4": "inputFloat",
                "iVar1": "loopCounter",
                "uVar2": "normalizedInput2",
                "uVar3": "combinedIntegerFloat"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_080004c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009744": {
            "entrypoint": "0x08009744",
            "current_name": "check_and_assign_value_08009744",
            "code": "\nvoid checkAndAssignValue_08009744(int *resultPointer,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20000c10 = 0;\n  returnValue = FUN_08005728(inputValue);\n  if ((returnValue == -1) && (DAT_20000c10 != 0)) {\n    *resultPointer = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009744": "check_and_assign_value_08009744",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009768": {
            "entrypoint": "0x08009768",
            "current_name": "copy_and_null_terminate_08009768",
            "code": "\nvoid copyAndNullTerminate_08009768(uint *src,uint *dest,uint size)\n\n{\n  char currentChar;\n  uint *srcPtr;\n  uint *destPtr;\n  uint currentValue;\n  \n  if (((((uint)src | (uint)dest) & 3) == 0) &&\n     (destPtr = src, srcPtr = dest, 3 < size)) {\n    do {\n      dest = srcPtr + 1;\n      currentValue = *srcPtr;\n      src = destPtr;\n      if ((currentValue + 0xfefefeff & ~currentValue & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      src = destPtr + 1;\n      *destPtr = currentValue;\n      destPtr = src;\n      srcPtr = dest;\n    } while (3 < size);\n  }\n  srcPtr = dest;\n  if (size != 0) {\nLAB_0800979c:\n    currentChar = *(char *)srcPtr;\n    *(char *)src = currentChar;\n    while( true ) {\n      src = (uint *)((int)src + 1);\n      size = size - 1;\n      if (currentChar == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      srcPtr = (uint *)((int)srcPtr + 1);\n      currentChar = *(char *)srcPtr;\n      *(char *)src = currentChar;\n    }\n    if (size != 0) {\n      srcPtr = src;\n      do {\n        destPtr = (uint *)((int)srcPtr + 1);\n        *(char *)srcPtr = '\\0';\n        srcPtr = destPtr;\n      } while (destPtr != (uint *)(size + (int)src));\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009768": "copy_and_null_terminate_08009768",
                "param_1": "src",
                "param_2": "dest",
                "param_3": "size",
                "cVar1": "currentChar",
                "puVar2": "srcPtr",
                "puVar3": "destPtr",
                "uVar4": "currentValue"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080097cc": {
            "entrypoint": "0x080097cc",
            "current_name": "process_data_080097cc",
            "code": "\nundefined4 processData_080097cc(undefined4 *outputBuffer,int *inputBuffer,int *params)\n\n{\n  int inputValue;\n  uint tempValue;\n  int newInputValue;\n  int offset;\n  uint size;\n  uint count;\n  undefined4 *ptr;\n  undefined4 *ptr2;\n  undefined4 tempVar;\n  \n  if (params[2] != 0) {\n    inputValue = *inputBuffer;\n    size = inputBuffer[2];\n    ptr2 = (undefined4 *)*params;\n    do {\n      do {\n        ptr = ptr2 + 2;\n        tempVar = *ptr2;\n        count = ptr2[1];\n        ptr2 = ptr;\n      } while (count == 0);\n      tempValue = count;\n      if ((size <= count) && (tempValue = size, (*(ushort *)(inputBuffer + 3) & 0x480) != 0)) {\n        offset = inputValue - inputBuffer[4];\n        size = (inputBuffer[5] * 3) / 2;\n        tempValue = count + 1 + offset;\n        if (size < tempValue) {\n          size = tempValue;\n        }\n        if ((int)((uint)*(ushort *)(inputBuffer + 3) << 0x15) < 0) {\n          newInputValue = FUN_08008af8(outputBuffer,size);\n          if (newInputValue == 0) {\nLAB_08009896:\n            *outputBuffer = 0xc;\n            *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 0x40;\n            params[1] = 0;\n            params[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(newInputValue,inputBuffer[4],offset);\n          *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          newInputValue = FUN_08009adc(outputBuffer);\n          if (newInputValue == 0) {\n            FUN_080088ec(outputBuffer,inputBuffer[4]);\n            goto LAB_08009896;\n          }\n        }\n        inputValue = newInputValue + offset;\n        inputBuffer[5] = size;\n        inputBuffer[4] = newInputValue;\n        *inputBuffer = inputValue;\n        inputBuffer[2] = size - offset;\n        tempValue = count;\n      }\n      FUN_08009a18(inputValue,tempVar,tempValue);\n      offset = params[2];\n      size = inputBuffer[2] - tempValue;\n      inputValue = *inputBuffer + tempValue;\n      inputBuffer[2] = size;\n      *inputBuffer = inputValue;\n      params[2] = offset - count;\n    } while (offset - count != 0);\n  }\n  params[1] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080097cc": "process_data_080097cc",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "params",
                "iVar1": "inputValue",
                "uVar2": "tempValue",
                "iVar3": "newInputValue",
                "iVar4": "offset",
                "uVar5": "size",
                "uVar6": "count",
                "puVar7": "ptr",
                "puVar8": "ptr2",
                "uVar9": "tempVar"
            },
            "calling": [
                "FUN_08005e9c"
            ],
            "called": [
                "FUN_08001084",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098c0": {
            "entrypoint": "0x080098c0",
            "current_name": "update_data_080098c0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 updateData_080098c0(int actionType,undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined *ptrData;\n  undefined4 result;\n  uint bitmask;\n  uint index;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  ptrData = DAT_20000168;\n  index = *(uint *)(DAT_20000168 + 4);\n  if ((int)index < 0x20) {\n    if (actionType != 0) {\n      *(undefined4 *)(DAT_20000168 + index * 4 + 0x88) = data2;\n      bitmask = 1 << (index & 0xff);\n      *(uint *)(ptrData + 0x188) = *(uint *)(ptrData + 0x188) | bitmask;\n      *(undefined4 *)(ptrData + index * 4 + 0x108) = data3;\n      if (actionType == 2) {\n        *(uint *)(ptrData + 0x18c) = bitmask | *(uint *)(ptrData + 0x18c);\n      }\n    }\n    *(uint *)(ptrData + 4) = index + 1;\n    result = DAT_20000448;\n    *(undefined4 *)(ptrData + (index + 2) * 4) = data1;\n    FUNC_08008af4(result);\n    result = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080098c0": "update_data_080098c0",
                "param_1": "actionType",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "data3",
                "puVar1": "ptrData",
                "uVar2": "result",
                "uVar3": "bitmask",
                "uVar4": "index"
            },
            "calling": [
                "FUN_080078a0"
            ],
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009980": {
            "entrypoint": "0x08009980",
            "current_name": "initialize_memory_08009980",
            "code": "\nundefined4 * initializeMemory_08009980(undefined4 param1,int numRows,int numColumns)\n\n{\n  undefined4 *memoryPtr;\n  uint adjustedLength;\n  undefined4 *endPtr;\n  \n  memoryPtr = (undefined4 *)FUN_08008af8(param1,numColumns * numRows);\n  if (memoryPtr == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjustedLength = (memoryPtr[-1] & 0xfffffffc) - 4;\n  if (adjustedLength < 0x25) {\n    endPtr = memoryPtr;\n    if (0x13 < adjustedLength) {\n      *memoryPtr = 0;\n      memoryPtr[1] = 0;\n      if (0x1b < adjustedLength) {\n        memoryPtr[2] = 0;\n        memoryPtr[3] = 0;\n        if (adjustedLength == 0x24) {\n          memoryPtr[4] = 0;\n          memoryPtr[5] = 0;\n          endPtr = memoryPtr + 6;\n        }\n        else {\n          endPtr = memoryPtr + 4;\n        }\n        *endPtr = 0;\n        endPtr[1] = 0;\n        endPtr[2] = 0;\n        return memoryPtr;\n      }\n      endPtr = memoryPtr + 2;\n    }\n    *endPtr = 0;\n    endPtr[1] = 0;\n    endPtr[2] = 0;\n    return memoryPtr;\n  }\n  FUN_08005d68(memoryPtr,0);\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_08009980": "initialize_memory_08009980",
                "param_1": "param1",
                "param_2": "numRows",
                "param_3": "numColumns",
                "puVar1": "memoryPtr",
                "uVar2": "adjustedLength",
                "puVar3": "endPtr"
            },
            "calling": [
                "FUN_080090c0"
            ],
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009a18": {
            "entrypoint": "0x08009a18",
            "current_name": "copy_memory_08009a18",
            "code": "\nvoid copyMemory_08009a18(undefined4 *source,undefined4 *destination,uint size)\n\n{\n  undefined4 *srcPtr;\n  undefined4 *destPtr;\n  int loopCounter;\n  undefined *destBytePtr;\n  undefined4 *srcBytePtr;\n  uint remainingSize;\n  uint remainingSizeAligned;\n  \n  if ((destination < source) && (destPtr = (undefined4 *)((int)destination + size), source < destPtr)) {\n    destBytePtr = (undefined *)((int)source + size);\n    if (size != 0) {\n      do {\n        destPtr = (undefined4 *)((int)destPtr + -1);\n        destBytePtr = destBytePtr + -1;\n        *destBytePtr = *(undefined *)destPtr;\n      } while (destination != destPtr);\n    }\n  }\n  else {\n    remainingSizeAligned = size;\n    if (0xf < size) {\n      if ((((uint)source | (uint)destination) & 3) != 0) goto LAB_08009abc;\n      destPtr = destination + 4;\n      srcPtr = source + 4;\n      do {\n        srcBytePtr = destPtr + 4;\n        srcPtr[-4] = destPtr[-4];\n        srcPtr[-3] = destPtr[-3];\n        srcPtr[-2] = destPtr[-2];\n        srcPtr[-1] = destPtr[-1];\n        destPtr = srcBytePtr;\n        srcPtr = srcPtr + 4;\n      } while (srcBytePtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x20));\n      loopCounter = (size - 0x10 >> 4) + 1;\n      remainingSizeAligned = size & 0xf;\n      destination = destination + loopCounter * 4;\n      source = source + loopCounter * 4;\n      if (3 < remainingSizeAligned) {\n        destPtr = source + -1;\n        remainingSize = remainingSizeAligned;\n        srcPtr = destination;\n        do {\n          remainingSize = remainingSize - 4;\n          destPtr = destPtr + 1;\n          *destPtr = *srcPtr;\n          srcPtr = srcPtr + 1;\n        } while (3 < remainingSize);\n        loopCounter = (remainingSizeAligned - 4 & 0xfffffffc) + 4;\n        source = (undefined4 *)((int)source + loopCounter);\n        destination = (undefined4 *)((int)destination + loopCounter);\n        remainingSizeAligned = size & 3;\n      }\n    }\n    size = remainingSizeAligned;\n    if (remainingSizeAligned != 0) {\nLAB_08009abc:\n      destBytePtr = (undefined *)((int)source + -1);\n      destPtr = destination;\n      do {\n        srcPtr = (undefined4 *)((int)destPtr + 1);\n        destBytePtr = destBytePtr + 1;\n        *destBytePtr = *(undefined *)destPtr;\n        destPtr = srcPtr;\n      } while (srcPtr != (undefined4 *)(size + (int)destination));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009a18": "copy_memory_08009a18",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "size",
                "puVar1": "srcPtr",
                "puVar2": "destPtr",
                "iVar3": "loopCounter",
                "puVar4": "destBytePtr",
                "puVar5": "srcBytePtr",
                "uVar6": "remainingSize",
                "uVar7": "remainingSizeAligned"
            },
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009adc": {
            "entrypoint": "0x08009adc",
            "current_name": "resize_memory_block_08009adc",
            "code": "\nint * resizeMemoryBlock_08009adc(undefined4 *inputPointer,int *memoryBlock,uint newSize)\n\n{\n  int *newMemoryBlock;\n  int tempVar1;\n  int *tempVar2;\n  uint tempVar3;\n  int tempVar4;\n  uint blockSize;\n  int *piVar7;\n  uint alignedSize;\n  uint oldBlockSize;\n  uint totalSize;\n  int tempVar5;\n  \n  if (memoryBlock == (int *)0x0) {\n    tempVar2 = (int *)FUN_08008af8(inputPointer,newSize);\n    return tempVar2;\n  }\n  FUN_080090a8();\n  blockSize = memoryBlock[-1];\n  oldBlockSize = blockSize & 0xfffffffc;\n  tempVar2 = memoryBlock + -2;\n  if (newSize + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = newSize + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto LAB_08009b8e;\n  }\n  if (alignedSize < newSize) {\nLAB_08009b8e:\n    *inputPointer = 0xc;\n    return (int *)0x0;\n  }\n  tempVar5 = (int)tempVar2 + oldBlockSize;\n  totalSize = oldBlockSize;\n  if ((int)oldBlockSize < (int)alignedSize) {\n    if (DAT_20000454 == tempVar5) {\n      tempVar5 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + oldBlockSize;\n      if ((int)(alignedSize + 0x10) <= tempVar5) {\n        DAT_20000454 = (int)tempVar2 + alignedSize;\n        *(uint *)(DAT_20000454 + 4) = tempVar5 - alignedSize | 1;\n        memoryBlock[-1] = alignedSize | memoryBlock[-1] & 1U;\n        FUN_080090b4(inputPointer);\n        return memoryBlock;\n      }\n      if (-1 < (int)(blockSize << 0x1f)) {\n        newMemoryBlock = (int *)((int)tempVar2 - memoryBlock[-2]);\n        blockSize = newMemoryBlock[1] & 0xfffffffc;\n        if ((int)(alignedSize + 0x10) <= (int)(tempVar5 + blockSize)) {\n          tempVar4 = newMemoryBlock[3];\n          tempVar2 = newMemoryBlock + 2;\n          tempVar1 = *tempVar2;\n          oldBlockSize = oldBlockSize - 4;\n          *(int *)(tempVar1 + 0xc) = tempVar4;\n          *(int *)(tempVar4 + 8) = tempVar1;\n          if (oldBlockSize < 0x25) {\n            tempVar1 = *memoryBlock;\n            piVar7 = tempVar2;\n            if (0x13 < oldBlockSize) {\n              newMemoryBlock[2] = tempVar1;\n              newMemoryBlock[3] = memoryBlock[1];\n              tempVar1 = memoryBlock[2];\n              if (oldBlockSize < 0x1c) {\n                memoryBlock = memoryBlock + 2;\n                piVar7 = newMemoryBlock + 4;\n              }\n              else {\n                newMemoryBlock[4] = tempVar1;\n                newMemoryBlock[5] = memoryBlock[3];\n                tempVar1 = memoryBlock[4];\n                if (oldBlockSize == 0x24) {\n                  newMemoryBlock[6] = tempVar1;\n                  newMemoryBlock[7] = memoryBlock[5];\n                  tempVar1 = memoryBlock[6];\n                  memoryBlock = memoryBlock + 6;\n                  piVar7 = newMemoryBlock + 8;\n                }\n                else {\n                  memoryBlock = memoryBlock + 4;\n                  piVar7 = newMemoryBlock + 6;\n                }\n              }\n            }\n            *piVar7 = tempVar1;\n            piVar7[1] = memoryBlock[1];\n            piVar7[2] = memoryBlock[2];\n          }\n          else {\n            FUN_08009a18(tempVar2,memoryBlock);\n          }\n          DAT_20000454 = (int)newMemoryBlock + alignedSize;\n          *(uint *)(DAT_20000454 + 4) = (tempVar5 + blockSize) - alignedSize | 1;\n          newMemoryBlock[1] = alignedSize | newMemoryBlock[1] & 1U;\n          FUN_080090b4(inputPointer);\n          return tempVar2;\n        }\nLAB_08009bb0:\n        totalSize = oldBlockSize + blockSize;\n        if ((int)alignedSize <= (int)totalSize) {\n          tempVar4 = newMemoryBlock[3];\n          piVar7 = newMemoryBlock + 2;\n          tempVar1 = *piVar7;\n          *(int *)(tempVar1 + 0xc) = tempVar4;\n          tempVar5 = (int)newMemoryBlock + totalSize;\n          *(int *)(tempVar4 + 8) = tempVar1;\n          tempVar2 = newMemoryBlock;\n          if (oldBlockSize - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(piVar7,memoryBlock);\n          memoryBlock = piVar7;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(tempVar5 + 4) & 0xfffffffe) + tempVar5 + 4) << 0x1f) {\n        tempVar3 = *(uint *)(tempVar5 + 4) & 0xfffffffc;\n        totalSize = oldBlockSize + tempVar3;\n        if ((int)totalSize < (int)alignedSize) {\n          if ((int)(blockSize << 0x1f) < 0) goto LAB_08009b36;\n          newMemoryBlock = (int *)((int)tempVar2 - memoryBlock[-2]);\n          blockSize = newMemoryBlock[1] & 0xfffffffc;\n          totalSize = tempVar3 + blockSize + oldBlockSize;\n          if ((int)totalSize < (int)alignedSize) goto LAB_08009bb0;\n          tempVar1 = *(int *)(tempVar5 + 8);\n          tempVar5 = *(int *)(tempVar5 + 0xc);\n          *(int *)(tempVar1 + 0xc) = tempVar5;\n          *(int *)(tempVar5 + 8) = tempVar1;\n          piVar7 = newMemoryBlock + 2;\n          tempVar1 = *piVar7;\n          tempVar4 = newMemoryBlock[3];\n          *(int *)(tempVar1 + 0xc) = tempVar4;\n          tempVar5 = (int)newMemoryBlock + totalSize;\n          *(int *)(tempVar4 + 8) = tempVar1;\n          tempVar2 = newMemoryBlock;\n          if (0x24 < oldBlockSize - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          oldBlockSize = oldBlockSize - 4;\n          tempVar1 = *memoryBlock;\n          newMemoryBlock = piVar7;\n          if (0x13 < oldBlockSize) {\n            tempVar2[2] = tempVar1;\n            tempVar2[3] = memoryBlock[1];\n            tempVar1 = memoryBlock[2];\n            if (oldBlockSize < 0x1c) {\n              memoryBlock = memoryBlock + 2;\n              newMemoryBlock = tempVar2 + 4;\n            }\n            else {\n              tempVar2[4] = tempVar1;\n              tempVar2[5] = memoryBlock[3];\n              tempVar1 = memoryBlock[4];\n              if (oldBlockSize == 0x24) {\n                tempVar2[6] = tempVar1;\n                tempVar2[7] = memoryBlock[5];\n                tempVar1 = memoryBlock[6];\n                memoryBlock = memoryBlock + 6;\n                newMemoryBlock = tempVar2 + 8;\n              }\n              else {\n                memoryBlock = memoryBlock + 4;\n                newMemoryBlock = tempVar2 + 6;\n              }\n            }\n          }\n          *newMemoryBlock = tempVar1;\n          newMemoryBlock[1] = memoryBlock[1];\n          newMemoryBlock[2] = memoryBlock[2];\n          memoryBlock = piVar7;\n        }\n        else {\n          tempVar1 = *(int *)(tempVar5 + 8);\n          tempVar4 = *(int *)(tempVar5 + 0xc);\n          *(int *)(tempVar1 + 0xc) = tempVar4;\n          tempVar5 = (int)tempVar2 + totalSize;\n          *(int *)(tempVar4 + 8) = tempVar1;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(blockSize << 0x1f)) {\n        newMemoryBlock = (int *)((int)tempVar2 - memoryBlock[-2]);\n        blockSize = newMemoryBlock[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    newMemoryBlock = (int *)FUN_08008af8(inputPointer,newSize);\n    if (newMemoryBlock != (int *)0x0) {\n      if ((int *)((memoryBlock[-1] & 0xfffffffeU) + (int)tempVar2) == newMemoryBlock + -2) {\n        totalSize = oldBlockSize + (newMemoryBlock[-1] & 0xfffffffcU);\n        tempVar5 = (int)tempVar2 + totalSize;\n        goto LAB_08009c00;\n      }\n      oldBlockSize = oldBlockSize - 4;\n      if (oldBlockSize < 0x25) {\n        tempVar5 = *memoryBlock;\n        tempVar2 = memoryBlock;\n        piVar7 = newMemoryBlock;\n        if (0x13 < oldBlockSize) {\n          *newMemoryBlock = tempVar5;\n          newMemoryBlock[1] = memoryBlock[1];\n          if (oldBlockSize < 0x1c) {\n            tempVar5 = memoryBlock[2];\n            tempVar2 = memoryBlock + 2;\n            piVar7 = newMemoryBlock + 2;\n          }\n          else {\n            newMemoryBlock[2] = memoryBlock[2];\n            newMemoryBlock[3] = memoryBlock[3];\n            if (oldBlockSize == 0x24) {\n              newMemoryBlock[4] = memoryBlock[4];\n              newMemoryBlock[5] = memoryBlock[5];\n              tempVar5 = memoryBlock[6];\n              tempVar2 = memoryBlock + 6;\n              piVar7 = newMemoryBlock + 6;\n            }\n            else {\n              tempVar5 = memoryBlock[4];\n              tempVar2 = memoryBlock + 4;\n              piVar7 = newMemoryBlock + 4;\n            }\n          }\n        }\n        *piVar7 = tempVar5;\n        piVar7[1] = tempVar2[1];\n        piVar7[2] = tempVar2[2];\n      }\n      else {\n        FUN_08009a18(newMemoryBlock,memoryBlock);\n      }\n      FUN_080088ec(inputPointer,memoryBlock);\n    }\n    FUN_080090b4(inputPointer);\n    memoryBlock = newMemoryBlock;\n  }\n  else {\nLAB_08009c00:\n    if (totalSize - alignedSize < 0x10) {\n      tempVar2[1] = tempVar2[1] & 1U | totalSize;\n      *(uint *)(tempVar5 + 4) = *(uint *)(tempVar5 + 4) | 1;\n    }\n    else {\n      tempVar2[1] = tempVar2[1] & 1U | alignedSize;\n      *(uint *)((int)tempVar2 + alignedSize + 4) = totalSize - alignedSize | 1;\n      *(uint *)(tempVar5 + 4) = *(uint *)(tempVar5 + 4) | 1;\n      FUN_080088ec(inputPointer,(int)tempVar2 + alignedSize + 8);\n    }\n    FUN_080090b4(inputPointer);\n  }\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_08009adc": "resize_memory_block_08009adc",
                "param_1": "inputPointer",
                "param_2": "memoryBlock",
                "param_3": "newSize",
                "piVar1": "newMemoryBlock",
                "iVar2": "tempVar1",
                "piVar3": "tempVar2",
                "uVar4": "tempVar3",
                "iVar5": "tempVar4",
                "uVar6": "blockSize",
                "uVar8": "alignedSize",
                "uVar9": "oldBlockSize",
                "uVar10": "totalSize",
                "iVar11": "tempVar5"
            },
            "calling": [
                "FUN_080097cc"
            ],
            "called": [
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_08009a18",
                "FUN_08008af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009e68": {
            "entrypoint": "0x08009e68",
            "current_name": "FUNC_08009e68",
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "calling": [
                "FUN_08005d20",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08009e74": {
            "entrypoint": "0x08009e74",
            "current_name": "FUNC_08009e74",
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 160682,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": []
}