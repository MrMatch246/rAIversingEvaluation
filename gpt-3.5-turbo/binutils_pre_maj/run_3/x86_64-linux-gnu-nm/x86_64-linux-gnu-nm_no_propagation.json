{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_reloc_table_00103c00",
                "param_1": "param",
                "param_2": "value",
                "param_3": "relocTable",
                "param_4": "param4",
                "param_5": "returnValue",
                "puVar1": "ptr1",
                "auVar2": "tempArray",
                "lVar3": "length",
                "uVar4": "mallocedMemory",
                "uVar5": "canonicalizedReloc"
            },
            "code": "\nundefined8\nupdateRelocTable_00103c00(undefined8 *param,long value,undefined (*relocTable) [16],undefined8 param4,\n            undefined8 returnValue)\n\n{\n  undefined8 *ptr1;\n  undefined tempArray [16];\n  long length;\n  undefined8 mallocedMemory;\n  undefined8 canonicalizedReloc;\n  \n  **(long **)*relocTable = value;\n  if ((*(byte *)(value + 0x24) & 4) == 0) {\n    **(undefined8 **)(*relocTable + 8) = 0;\n    **(undefined8 **)relocTable[1] = 0;\n  }\n  else {\n    length = bfd_get_reloc_upper_bound();\n    if (-1 < length) {\n      ptr1 = *(undefined8 **)(*relocTable + 8);\n      mallocedMemory = xmalloc(length);\n      canonicalizedReloc = *(undefined8 *)(relocTable[1] + 8);\n      *ptr1 = mallocedMemory;\n      ptr1 = *(undefined8 **)relocTable[1];\n      canonicalizedReloc = bfd_canonicalize_reloc(param,value,**(undefined8 **)(*relocTable + 8),canonicalizedReloc);\n      *ptr1 = canonicalizedReloc;\n      if (-1 < **(long **)relocTable[1]) goto LAB_00103c7c;\n    }\n    FUN_00106530(*param);\n  }\nLAB_00103c7c:\n  length = *(long *)(*relocTable + 8) + 8;\n  *(long *)relocTable[1] = *(long *)relocTable[1] + 8;\n  tempArray._8_4_ = (int)length;\n  tempArray._0_8_ = *(long *)*relocTable + 8;\n  tempArray._12_4_ = (int)((ulong)length >> 0x20);\n  *relocTable = tempArray;\n  return returnValue;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "update_reloc_table_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "cVar1": "isUndefinedSymclass",
                "uVar2": "symClass",
                "iVar3": "asprintfResult",
                "plVar4": "message",
                "piVar5": "errnoLocation",
                "uVar6": "errorMsg",
                "lVar7": "symInfo",
                "unaff_RBX": "input",
                "bVar8": "symbolType",
                "uVar9": "rbxModified",
                "pcVar10": "symbolClass"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefinedSymclass;\n  ushort symClass;\n  int asprintfResult;\n  long *message;\n  int *errnoLocation;\n  undefined8 errorMsg;\n  long symInfo;\n  ulong input;\n  byte symbolType;\n  ulong rbxModified;\n  char *symbolClass;\n  \n  message = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  rbxModified = input & 0xffffffff;\n  FUN_00106300(message,rbxModified);\n  FUN_00104740(\"%-20s|\",message,0,rbxModified);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*message + 8));\n  if (isUndefinedSymclass == '\\0') {\n    FUN_001054d0(*(undefined8 *)*message);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*message + 8));\n  if (*(char *)(*message + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*message + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*message + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (message[2] == 0) {\n    if (message[3] != 0) {\n      symInfo = *(long *)(message[3] + 0x30);\n      isUndefinedSymclass = *(char *)(symInfo + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        symbolClass = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        symbolClass = \"Block\";\n      }\n      else if (*(ushort *)(symInfo + 0x26) == 0) {\n        symbolClass = \"None\";\n      }\n      else {\n        symClass = *(ushort *)(symInfo + 0x26) >> 4 & 3;\n        if (symClass == 2) {\n          symbolClass = \"Function\";\n        }\n        else if (symClass == 3) {\n          symbolClass = \"Array\";\n        }\n        else {\n          if (symClass != 1) {\n            free(DAT_0010b730);\n            symClass = *(ushort *)(symInfo + 0x26);\n            symbolType = *(byte *)(symInfo + 0x28);\n            symbolClass = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,symbolClass,(ulong)symbolType,(ulong)symClass);\n            symbolClass = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolClass = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolType = *(byte *)(message[2] + 0x48) & 0xf;\n    switch(symbolType) {\n    case 0:\n      symbolClass = \"NOTYPE\";\n      break;\n    case 1:\n      symbolClass = \"OBJECT\";\n      break;\n    case 2:\n      symbolClass = \"FUNC\";\n      break;\n    case 3:\n      symbolClass = \"SECTION\";\n      break;\n    case 4:\n      symbolClass = \"FILE\";\n      break;\n    case 5:\n      symbolClass = \"COMMON\";\n      break;\n    case 6:\n      symbolClass = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolClass = \"<processor specific>: %d\";\n      if ((2 < symbolType - 0xd) && (symbolClass = \"<OS specific>: %d\", 2 < symbolType - 10)) {\n        symbolClass = \"<unknown>: %d\";\n      }\n      symbolClass = (char *)dcgettext(0,symbolClass,5);\n      asprintfResult = asprintf(&DAT_0010b728,symbolClass,(ulong)symbolType);\n      symbolClass = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        errorMsg = xstrerror(*errnoLocation);\n        FUN_00106300(&DAT_0010712d,errorMsg);\nLAB_00103983:\n        symbolClass = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolClass);\n  }\n  if (message[2] == 0) {\n    if (message[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(message[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  symInfo = message[2];\n  if ((symInfo != 0) || (symInfo = message[3], symInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "format_selection_00104370",
                "param_1": "outputFormat",
                "param_2": "fileType",
                "uVar1": "errorMessage",
                "ppuVar2": "resultPointer"
            },
            "code": "\nundefined ** formatSelection_00104370(undefined *outputFormat,undefined8 fileType)\n\n{\n  undefined8 errorMessage;\n  undefined **resultPointer;\n  \n  switch(*outputFormat) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    FUN_00106300(errorMessage,outputFormat);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    FUN_00106400(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    resultPointer = (undefined **)FUN_00104397(outputFormat,fileType,3);\n    return resultPointer;\n  case 0x50:\n  case 0x70:\n    resultPointer = (undefined **)FUN_00104397(outputFormat,fileType,2);\n    return resultPointer;\n  case 0x53:\n  case 0x73:\n    resultPointer = (undefined **)FUN_00104397(outputFormat,fileType,1);\n    return resultPointer;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "dcgettext",
                "caseD_4a",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "format_selection_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001055f0",
                "FUN_0010268b",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001035a2",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatArray",
                "uVar1": "dataPtr",
                "__format": "localizedFormat",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatArray)\n\n{\n  undefined8 dataPtr;\n  char *localizedFormat;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  dataPtr = DAT_0010b820;\n  localizedFormat = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,localizedFormat,dataPtr);\n  for (currentFormat = formatArray; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatArray);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "free",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_strings_001036a7",
                "param_1": "str1",
                "param_2": "str2",
                "param_3": "param3",
                "param_4": "param4",
                "printf": "print"
            },
            "code": "\nvoid printStrings_001036a7(undefined8 *str1,undefined8 *str2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (str1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*str1);\n    }\n    printf(\"%s:\",*str2,param4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_strings_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbol_information_00102f19",
                "param_1": "fileName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolInformation_00102f19(undefined8 fileName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,fileName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compiler_compatibility_00102fc3",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "lastCharacter",
                "__s": "str1",
                "__s_00": "str2",
                "uVar2": "str1Length",
                "lVar4": "var1",
                "lVar5": "var2",
                "sVar6": "str1Length",
                "sVar7": "str2Length",
                "pcVar8": "match1",
                "pcVar9": "match2",
                "uVar10": "result",
                "uVar11": "var2Value",
                "uVar12": "var1Value",
                "uVar13": "ptrValue",
                "unaff_R13": "unaffR13",
                "bVar14": "isMatch"
            },
            "code": "\nulong checkCompilerCompatibility_00102fc3(undefined8 param1,undefined8 param2)\n\n{\n  char lastCharacter;\n  ulong str1Length;\n  char *str1;\n  char *str2;\n  uint uVar3;\n  long var1;\n  long var2;\n  size_t str1Length;\n  size_t str2Length;\n  char *match1;\n  char *match2;\n  ulong result;\n  ulong var2Value;\n  ulong var1Value;\n  undefined8 ptrValue;\n  long unaffR13;\n  bool isMatch;\n  \n  ptrValue = *DAT_0010b780;\n  FUN_00106530();\n  var1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,ptrValue,DAT_0010b770);\n  var2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param2,DAT_0010b768);\n  if ((var1 == 0) || (unaffR13 = var2, var2 == 0)) {\n    var2 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(var1 + 0x20) == 0x10c2a8) || (*(long *)(var2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(var1 + 0x20) + 0x30);\n  str1Length = *(ulong *)(*(long *)(var2 + 0x20) + 0x30);\n  var1Value = *(long *)(var1 + 0x10) + result;\n  var2Value = *(long *)(unaffR13 + 0x10) + str1Length;\n  isMatch = var1Value < var2Value;\n  if ((var1Value != var2Value) || (isMatch = result < str1Length, result != str1Length)) {\n    return (ulong)(-(uint)isMatch | 1);\n  }\n  str1 = *(char **)(var1 + 8);\n  str2 = *(char **)(unaffR13 + 8);\n  str1Length = strlen(str1);\n  str2Length = strlen(str2);\n  match1 = strstr(str1,\"gnu_compiled\");\n  if (match1 == (char *)0x0) {\n    match2 = strstr(str1,\"gcc2_compiled\");\n    match1 = strstr(str2,\"gnu_compiled\");\n    if ((match1 == (char *)0x0) && (match1 = strstr(str2,\"gcc2_compiled\"), match1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (match2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    match1 = strstr(str2,\"gnu_compiled\");\n    if (match1 == (char *)0x0) {\n      match2 = strstr(str2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (match2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar3 = *(uint *)(unaffR13 + 0x18) & 0x4000;\n  if ((*(byte *)(var1 + 0x19) & 0x40) == 0) {\n    if ((str1Length < 3) || (str1[str1Length - 2] != '.')) {\n      if (uVar3 != 0) {\n        return 1;\n      }\n      if ((str2Length < 3) || (str2[str2Length - 2] != '.')) goto LAB_00103202;\n      isMatch = false;\n      goto LAB_001031e7;\n    }\n    lastCharacter = str1[str1Length - 1];\n    isMatch = lastCharacter == 'o' || lastCharacter == 'a';\n    if (uVar3 == 0) {\n      if ((str2Length < 3) || (str2[str2Length - 2] != '.')) {\n        if (lastCharacter == 'o' || lastCharacter == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar3 != 0) goto LAB_00103202;\n    if (str2Length < 3) {\n      return 0xffffffff;\n    }\n    if (str2[str2Length - 2] != '.') {\n      return 0xffffffff;\n    }\n    isMatch = true;\nLAB_001031e7:\n    if ((str2[str2Length - 1] != 'o') && (str2[str2Length - 1] != 'a')) {\n      if (isMatch) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isMatch) {\n    return 1;\n  }\nLAB_00103202:\n  result = FUN_00104fa0(ptrValue,param2);\n  return result;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_compiler_compatibility_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_information_00103729",
                "param_1": "symbolData",
                "cVar1": "isUndefined",
                "uVar2": "symbolType",
                "iVar3": "asprintfResult",
                "piVar4": "errnoLocation",
                "uVar5": "errorMessage",
                "lVar6": "symbolInfo",
                "bVar7": "symbolClass",
                "pcVar8": "symbolCategory"
            },
            "code": "\nvoid printSymbolInformation_00103729(long *symbolData,undefined8 param_2)\n\n{\n  char isUndefined;\n  ushort symbolType;\n  int asprintfResult;\n  int *errnoLocation;\n  undefined8 errorMessage;\n  long symbolInfo;\n  byte symbolClass;\n  char *symbolCategory;\n  \n  FUN_00104740(\"%-20s|\",symbolData,0,param_2);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolData + 8));\n  if (isUndefined == '\\0') {\n    FUN_001054d0(*(undefined8 *)*symbolData);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolData + 8));\n  if (*(char *)(*symbolData + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolData + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolData + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolData[2] == 0) {\n    if (symbolData[3] != 0) {\n      symbolInfo = *(long *)(symbolData[3] + 0x30);\n      isUndefined = *(char *)(symbolInfo + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolCategory = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolCategory = \"Block\";\n      }\n      else if (*(ushort *)(symbolInfo + 0x26) == 0) {\n        symbolCategory = \"None\";\n      }\n      else {\n        symbolType = *(ushort *)(symbolInfo + 0x26) >> 4 & 3;\n        if (symbolType == 2) {\n          symbolCategory = \"Function\";\n        }\n        else if (symbolType == 3) {\n          symbolCategory = \"Array\";\n        }\n        else {\n          if (symbolType != 1) {\n            free(DAT_0010b730);\n            symbolType = *(ushort *)(symbolInfo + 0x26);\n            symbolClass = *(byte *)(symbolInfo + 0x28);\n            symbolCategory = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,symbolCategory,(ulong)symbolClass,(ulong)symbolType);\n            symbolCategory = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolCategory = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolClass = *(byte *)(symbolData[2] + 0x48) & 0xf;\n    switch(symbolClass) {\n    case 0:\n      symbolCategory = \"NOTYPE\";\n      break;\n    case 1:\n      symbolCategory = \"OBJECT\";\n      break;\n    case 2:\n      symbolCategory = \"FUNC\";\n      break;\n    case 3:\n      symbolCategory = \"SECTION\";\n      break;\n    case 4:\n      symbolCategory = \"FILE\";\n      break;\n    case 5:\n      symbolCategory = \"COMMON\";\n      break;\n    case 6:\n      symbolCategory = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolCategory = \"<processor specific>: %d\";\n      if ((2 < symbolClass - 0xd) && (symbolCategory = \"<OS specific>: %d\", 2 < symbolClass - 10)) {\n        symbolCategory = \"<unknown>: %d\";\n      }\n      symbolCategory = (char *)dcgettext(0,symbolCategory,5);\n      asprintfResult = asprintf(&DAT_0010b728,symbolCategory,(ulong)symbolClass);\n      symbolCategory = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        errorMessage = xstrerror(*errnoLocation);\n        FUN_00106300(&DAT_0010712d,errorMessage);\nLAB_00103983:\n        symbolCategory = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolCategory);\n  }\n  if (symbolData[2] == 0) {\n    if (symbolData[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolData[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    FUN_001054d0();\n  }\n  symbolInfo = symbolData[2];\n  if ((symbolInfo != 0) || (symbolInfo = symbolData[3], symbolInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "asprintf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "free",
                "FUN_00106300",
                "__errno_location",
                "FUN_00104740",
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused1",
                "param_4": "unused2"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *string1,undefined8 *string2,undefined8 unused1,undefined8 unused2)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,unused2);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_related_information_00105110",
                "param_1": "arguments",
                "param_2": "data",
                "param_4": "string_param",
                "__ptr": "ptr",
                "__s1": "string1",
                "pplVar1": "ptr_ptr",
                "plVar2": "ptr_var",
                "lVar3": "var1",
                "puVar4": "ptr_var2",
                "cVar5": "char_var",
                "iVar6": "int_var",
                "pvVar7": "ptr_var3",
                "lVar8": "var2",
                "uVar9": "uint_var",
                "lVar10": "var3",
                "local_b4": "local_uint",
                "local_b0": "local_undefined",
                "local_a8": "local_ptr3",
                "local_a0": "local_var",
                "local_98": "local_ptr1",
                "local_90": "local_ptr2",
                "local_88": "local_ptr4",
                "pvStack_80": "stack_ptr1",
                "pvStack_78": "stack_ptr2",
                "pvStack_70": "stack_ptr3",
                "local_68": "local_undefined2",
                "local_60": "local_char"
            },
            "code": "\n\n\nvoid print_related_information_00105110(undefined8 *arguments,long *data,undefined8 param_3,undefined8 *string_param)\n\n{\n  void *ptr;\n  char *string1;\n  long **ptr_ptr;\n  long *ptr_var;\n  long var1;\n  undefined8 *ptr_var2;\n  char char_var;\n  int int_var;\n  void *ptr_var3;\n  long var2;\n  uint uint_var;\n  long var3;\n  uint local_uint;\n  undefined local_undefined [8];\n  undefined *local_ptr3;\n  undefined8 local_var;\n  long *local_ptr1;\n  long *local_ptr2;\n  void *local_ptr4;\n  void *stack_ptr1;\n  void *stack_ptr2;\n  void *stack_ptr3;\n  undefined local_undefined2 [8];\n  char local_char;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == FUN_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (string_param != (undefined8 *)0x0) {\n        printf(\"%s:\",*string_param);\n      }\n      printf(\"%s:\",*arguments);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(string_param,arguments);\n  }\n  local_ptr3 = local_undefined2;\n  (**(code **)(arguments[1] + 0x218))(arguments,data,local_ptr3);\n  uint_var = *(uint *)(data + 3);\n  char_var = local_char;\n  if (((((local_char == 'i') && ((uint_var & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (char_var = *DAT_0010b7c8, (uint_var & 2) == 0)))) &&\n     (char_var = local_char, DAT_0010b7c8[1] != '\\0')) {\n    char_var = DAT_0010b7c8[1];\n  }\n  local_char = char_var;\n  local_var = param_3;\n  if ((uint_var & 0x200100) != 0) goto LAB_00103330;\n  var2 = *data;\n  int_var = *(int *)(*(long *)(var2 + 8) + 8);\n  if (((uint_var & 0x200000) == 0) && (int_var == 5)) {\n    local_ptr1 = data;\n    if (*(long *)(var2 + 0x110) == 0) {\n      local_ptr1 = (long *)0x0;\n    }\n  }\n  else {\n    local_ptr1 = (long *)0x0;\n    if (((int_var - 2U & 0xfffffffd) == 0) && (local_ptr2 = data, *(long *)(var2 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_ptr2 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_ptr3,arguments);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == arguments) {\n      ptr_var2 = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptr_var2;\n      ptr_var3 = DAT_0010b750;\n      if (data[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == arguments) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uint_var = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n              ptr = *(void **)((long)ptr_var3 + (ulong)uint_var * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(ptr_var3);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(arguments + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          stack_ptr3 = DAT_0010b758;\n          local_ptr4 = DAT_0010b740;\n          stack_ptr1 = DAT_0010b750;\n          stack_ptr2 = DAT_0010b738;\n          bfd_map_over_sections(arguments,FUN_00103c00,&local_ptr4);\n          _DAT_0010b7b0 = arguments;\n        }\n        string1 = (char *)data[1];\n        for (uint_var = 0; uint_var < DAT_0010b748; uint_var = uint_var + 1) {\n          var2 = (ulong)uint_var * 8;\n          ptr_var3 = DAT_0010b738;\n          for (var3 = 0;\n              *(long *)((long)ptr_var3 + var2) != var3 && var3 <= *(long *)((long)ptr_var3 + var2)\n              ; var3 = var3 + 1) {\n            ptr_ptr = *(long ***)(*(long *)((long)DAT_0010b750 + var2) + var3 * 8);\n            ptr_var = *ptr_ptr;\n            if ((((ptr_var != (long *)0x0) &&\n                 (var1 = *ptr_var, *(long *)(var1 + 0x20) == data[4])) &&\n                (*(long *)(var1 + 0x10) == data[2])) &&\n               (((int_var = strcmp(string1,*(char **)(var1 + 8)), int_var == 0 &&\n                 (char_var = (**(code **)(arguments[1] + 0x240))\n                                    (arguments,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + var2),ptr_ptr[1],\n                                     &local_ptr4,local_undefined,&local_uint,0), ptr_var3 = DAT_0010b738,\n                 char_var != '\\0')) && (local_ptr4 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr4,(ulong)local_uint);\n              uint_var = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(data[4] + 0xe0) == arguments) {\n        char_var = (**(code **)(arguments[1] + 0x250))(arguments,DAT_0010b758,data,&local_ptr4,&local_uint);\n        if (((char_var != '\\0') ||\n            (char_var = (**(code **)(arguments[1] + 0x240))\n                               (arguments,DAT_0010b758,data[4],data[2],&local_ptr4,local_undefined,\n                                &local_uint,0), char_var != '\\0')) &&\n           ((local_ptr4 != (void *)0x0 && (local_uint != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    var2 = (**(code **)(arguments[1] + 0x1f8))(arguments);\n    if (var2 < 0) {\n      FUN_00103463(var2);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    var2 = (**(code **)(arguments[1] + 0x200))(arguments,DAT_0010b758);\n    ptr_var2 = arguments;\n    if (-1 < var2) goto LAB_00105288;\n    FUN_00106530(*arguments);\nLAB_00103330:\n    local_ptr1 = (long *)0x0;\n    local_ptr2 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_ptr3,arguments);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "FUN_001053b0",
                "FUN_00103463",
                "FUN_001053c0",
                "xmalloc",
                "FUN_00103238",
                "free",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_related_information_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "evaluate_compilation_00102fd2",
                "param_1": "input1",
                "param_2": "input2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar2": "result1",
                "uVar3": "flag",
                "lVar4": "result2",
                "lVar5": "result3",
                "sVar6": "length1",
                "sVar7": "length2",
                "pcVar8": "ptr1",
                "pcVar9": "ptr2",
                "uVar10": "returnValue1",
                "uVar11": "returnValue2",
                "uVar12": "sum1",
                "unaff_R13": "sum2",
                "bVar13": "isLess"
            },
            "code": "\nulong evaluateCompilation_00102fd2(undefined8 input1,undefined8 input2)\n\n{\n  char cVar1;\n  ulong result1;\n  char *string1;\n  char *string2;\n  uint flag;\n  long result2;\n  long result3;\n  size_t length1;\n  size_t length2;\n  char *ptr1;\n  char *ptr2;\n  ulong returnValue1;\n  ulong returnValue2;\n  ulong sum1;\n  long sum2;\n  bool isLess;\n  \n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,input1,DAT_0010b770);\n  result3 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,input2,DAT_0010b768);\n  if ((result2 == 0) || (sum2 = result3, result3 == 0)) {\n    result3 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result2 + 0x20) == 0x10c2a8) || (*(long *)(result3 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  returnValue1 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  result1 = *(ulong *)(*(long *)(result3 + 0x20) + 0x30);\n  sum1 = *(long *)(result2 + 0x10) + returnValue1;\n  returnValue2 = *(long *)(sum2 + 0x10) + result1;\n  isLess = sum1 < returnValue2;\n  if ((sum1 != returnValue2) || (isLess = returnValue1 < result1, returnValue1 != result1)) {\n    return (ulong)(-(uint)isLess | 1);\n  }\n  string1 = *(char **)(result2 + 8);\n  string2 = *(char **)(sum2 + 8);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  ptr1 = strstr(string1,\"gnu_compiled\");\n  if (ptr1 == (char *)0x0) {\n    ptr2 = strstr(string1,\"gcc2_compiled\");\n    ptr1 = strstr(string2,\"gnu_compiled\");\n    if ((ptr1 == (char *)0x0) && (ptr1 = strstr(string2,\"gcc2_compiled\"), ptr1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (ptr2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    ptr1 = strstr(string2,\"gnu_compiled\");\n    if (ptr1 == (char *)0x0) {\n      ptr2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (ptr2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(sum2 + 0x18) & 0x4000;\n  if ((*(byte *)(result2 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (string1[length1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) goto LAB_00103202;\n      isLess = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[length1 - 1];\n    isLess = cVar1 == 'o' || cVar1 == 'a';\n    if (flag == 0) {\n      if ((length2 < 3) || (string2[length2 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isLess = true;\nLAB_001031e7:\n    if ((string2[length2 - 1] != 'o') && (string2[length2 - 1] != 'a')) {\n      if (isLess) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isLess) {\n    return 1;\n  }\nLAB_00103202:\n  returnValue1 = FUN_00104fa0(input1,input2);\n  return returnValue1;\n}\n\n",
            "called": [
                "abort",
                "FUN_00104fa0",
                "strstr",
                "strlen",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "evaluate_compilation_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "initialize_system_00102f9f",
                "auVar1": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] initializeSystem_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  FUN_00106530(*DAT_0010b780);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "initialize_system_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001053c0",
                "FUN_0010249f",
                "FUN_00104370",
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00103a78",
                "FUN_00103abf",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_pointer_not_null_00103a66",
                "unaff_RBX": "pointer"
            },
            "code": "\nvoid checkIfPointerNotNull_00103a66(void)\n\n{\n  long pointer;\n  \n  if (*(long *)(pointer + 8) != 0) {\n    FUN_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_if_pointer_not_null_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_data_001035a2",
                "unaff_RBX": "dataPointer",
                "lVar1": "value",
                "putchar": "printChar",
                "printf": "printFormatted"
            },
            "code": "\nvoid printData_001035a2(void)\n\n{\n  long *dataPointer;\n  long value;\n  \n  if (dataPointer[2] == 0) {\n    value = dataPointer[1];\n  }\n  else {\n    value = *(long *)(dataPointer[2] + 0x38);\n  }\n  if (value != 0) {\n    putchar(0x20);\n    if (dataPointer[2] == 0) {\n      value = dataPointer[1];\n    }\n    else {\n      value = *(long *)(dataPointer[2] + 0x38);\n    }\n    FUN_001054d0(value);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*dataPointer + 8));\n  if (*(char *)(*dataPointer + 8) != '-') {\n    FUN_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*dataPointer + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*dataPointer + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*dataPointer + 0x20));\n  FUN_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "putchar",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_data_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "process_data_00103463",
                "unaff_R12": "strParam",
                "unaff_R13": "ptrArray",
                "unaff_R15": "baseAddress",
                "param_8": "counter",
                "param_10": "value",
                "in_stack_00000050": "lineNumber",
                "plVar1": "currentPointer",
                "lVar2": "currentValue",
                "cVar3": "comparisonResult",
                "iVar4": "stringComparison",
                "lVar5": "firstArrayAddress",
                "lVar6": "index"
            },
            "code": "\n\n\nvoid processData_00103463(void)\n\n{\n  long *currentPointer;\n  long currentValue;\n  char comparisonResult;\n  int stringComparison;\n  long firstArrayAddress;\n  char *strParam;\n  undefined8 *ptrArray;\n  long index;\n  long baseAddress;\n  undefined8 counter;\n  ulong value;\n  long lineNumber;\n  \n  FUN_00106530(*ptrArray);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    firstArrayAddress = DAT_0010b738;\n    for (index = 0; currentPointer = (long *)(firstArrayAddress + (ulong)counter._4_4_ * 8),\n        *currentPointer != index && index <= *currentPointer; index = index + 1) {\n      currentPointer = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + index * 8);\n      if ((((currentPointer != (long *)0x0) &&\n           (currentValue = *currentPointer, *(long *)(currentValue + 0x20) == *(long *)(baseAddress + 0x20))) &&\n          (*(long *)(currentValue + 0x10) == *(long *)(baseAddress + 0x10))) &&\n         (((stringComparison = strcmp(strParam,*(char **)(currentValue + 8)), stringComparison == 0 &&\n           (comparisonResult = (**(code **)(ptrArray[1] + 0x240))(), firstArrayAddress = DAT_0010b738, comparisonResult != '\\0')) &&\n          (lineNumber != 0)))) {\n        printf(\"\\t%s:%u\",lineNumber,value >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "strcmp",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "process_data_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "set_data_pointer_00104397",
                "param_1": "data_address",
                "param_2": "buffer_address",
                "param_3": "index"
            },
            "code": "\nvoid set_data_pointer_00104397(undefined8 data_address,undefined8 buffer_address,int index)\n\n{\n  DAT_0010b7c0 = index;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)index * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "caseD_4a",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "set_data_pointer_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001047d0",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00103b5d",
                "FUN_00104d5b",
                "FUN_00103238",
                "FUN_00104670",
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_001055f0",
                "FUN_00106300",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "get_architecture_size_00104670",
                "param_1": "binaryFile",
                "iVar1": "architectureSize",
                "pcVar2": "architectureString",
                "puVar3": "concatenationResult",
                "pcVar4": "fileTypeString"
            },
            "code": "\nvoid getArchitectureSize_00104670(long binaryFile)\n\n{\n  int architectureSize;\n  char *architectureString;\n  undefined *concatenationResult;\n  char *fileTypeString;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    fileTypeString = **(char ***)(binaryFile + 8);\n    architectureString = strstr(fileTypeString,\"64\");\n    architectureSize = 0x40;\n    if (architectureString == (char *)0x0) {\n      architectureSize = strcmp(fileTypeString,\"mmo\");\n      architectureSize = (-(uint)(architectureSize == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = architectureSize;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    fileTypeString = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    fileTypeString = \"08\";\n  }\n  else {\n    fileTypeString = \"016\";\n  }\n  concatenationResult = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        concatenationResult = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,fileTypeString,0,0);\n          return;\n        }\n        concatenationResult = &DAT_001071cd;\n      }\n    }\n    else {\n      concatenationResult = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,fileTypeString,concatenationResult,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "concat",
                "bfd_get_arch_size",
                "free",
                "FUN_001025f5",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "get_architecture_size_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorFlag != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_binary_001048e0",
                "param_1": "binaryData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputData",
                "param_6": "extraData",
                "bVar1": "byteVar1",
                "pcVar2": "codeVar2",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "uVar5": "uintVar5",
                "uVar6": "result",
                "lVar7": "longVar7",
                "ppuVar8": "inputData",
                "ppuVar9": "tempData",
                "lVar10": "longVar10",
                "puVar11": "pointerVar11",
                "ppuVar12": "workingData",
                "ppuVar13": "tempData2",
                "ppuVar14": "tempData3",
                "ppuVar15": "tempData4",
                "ppuVar16": "tempData5",
                "ppuVar17": "tempData6",
                "ppuVar18": "tempData7",
                "unaff_RBX": "tempData8",
                "unaff_RBP": "tempData9",
                "unaff_R14": "tempData10",
                "unaff_R15": "tempData11",
                "bVar19": "boolVar19",
                "bVar20": "byteVar20",
                "ppuStack_78": "tempStack",
                "local_4c": "localVar1",
                "local_48": "localVar2",
                "local_40": "localArray"
            },
            "code": "\n\n\nvoid processBinary_001048e0(ulong **binaryData,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **outputData,ulong **extraData)\n\n{\n  byte byteVar1;\n  code *codeVar2;\n  char charVar3;\n  int intVar4;\n  uint uintVar5;\n  undefined8 result;\n  long longVar7;\n  ulong **inputData;\n  ulong **tempData;\n  long longVar10;\n  ulong *pointerVar11;\n  ulong **tempData8;\n  ulong **workingData;\n  ulong **tempData2;\n  ulong **tempData9;\n  ulong **tempData3;\n  ulong **tempData4;\n  ulong **tempData5;\n  ulong **tempData6;\n  ulong **tempData7;\n  ulong **tempData10;\n  ulong **tempData11;\n  bool boolVar19;\n  byte byteVar20;\n  ulong **tempStack;\n  uint localVar1;\n  ulong *localVar2;\n  ulong **localArray [2];\n  \n  byteVar20 = 0;\n  localVar2 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)binaryData + 0x44) & 0x10) != 0)) {\n    tempData = (ulong **)&localVar1;\n    inputData = (ulong **)(*(code *)binaryData[1][0x4d])(binaryData,DAT_0010b80c != 0,localArray);\n    if ((long)inputData < 0) {\n      if ((DAT_0010b80c != 0) && (intVar4 = bfd_get_error(), intVar4 == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        pointerVar11 = *binaryData;\n        result = dcgettext(0,\"%s: no symbols\",5);\n        FUN_00106400(result,pointerVar11);\n        return;\n      }\n      FUN_00106530(*binaryData);\n      goto LAB_00102e9e;\n    }\n    if (inputData != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (localVar1 == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteVar1 = *(byte *)((long)binaryData + 0x4a);\n      tempData2 = binaryData;\n      do {\n        if ((byteVar1 & 0x10) != 0) {\n          tempData8 = (ulong **)*tempData2;\n          DAT_0010b230 = '\\0';\n          result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(result);\n        }\n        tempData3 = localArray[0];\n        tempData10 = (ulong **)(ulong)localVar1;\n        boolVar19 = DAT_0010b80c != 0;\n        tempData = localArray[0];\n        tempData11 = (ulong **)(*(code *)tempData2[1][0x41])(tempData2);\n        workingData = tempData8;\n        tempData9 = (ulong **)(ulong)boolVar19;\n        binaryData = tempData2;\n        if (tempData11 == (ulong **)0x0) goto LAB_00102ea7;\n        tempData6 = (ulong **)((long)inputData * (long)tempData10);\n        inputData = (ulong **)((long)tempData3 + (long)tempData6);\n        binaryData = tempData3;\n        workingData = tempData3;\njoined_r0x001049a4:\n        if (binaryData < inputData) {\n          do {\n            tempData = (ulong **)(*(code *)tempData2[1][0x4e])(tempData2,boolVar19,binaryData,tempData11);\n            tempData6 = tempData11;\n            if (tempData == (ulong **)0x0) goto LAB_00102eb0;\n            pointerVar11 = tempData[1];\n            tempData6 = inputData;\n            if (((pointerVar11 == (ulong *)0x0) || (*(char *)pointerVar11 != '_')) ||\n               (*(char *)((long)pointerVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar5 = (uint)(tempData[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar5 == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(tempData + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n                  extraData = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    charVar3 = (*(code *)tempData2[1][0x46])(tempData2,tempData);\n                    if (charVar3 != '\\0') {\n                      FUN_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (tempData[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n                if ((tempData[4] == (ulong *)0x10c2a8) || (tempData[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar3 = (*(code *)tempData2[1][0x46])(tempData2,tempData);\n                if (charVar3 != '\\0') {\n                  FUN_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (workingData != binaryData) {\n                  if (tempData10 == (ulong **)0x8) {\n                    *workingData = *binaryData;\n                    FUN_001049c0();\n                    return;\n                  }\n                  for (; tempData10 != (ulong **)0x0; tempData10 = (ulong **)((long)tempData10 + -1)) {\n                    *(undefined *)workingData = *(undefined *)binaryData;\n                    binaryData = (ulong **)((long)binaryData + (ulong)byteVar20 * -2 + 1);\n                    workingData = (ulong **)((long)workingData + (ulong)byteVar20 * -2 + 1);\n                  }\n                  FUN_001049c0();\n                  return;\n                }\n                workingData = (ulong **)((long)workingData + (long)tempData10);\n              }\n            }\n            else {\n              intVar4 = strcmp((char *)((long)pointerVar11 + (ulong)(*(char *)((long)pointerVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              tempStack = tempData;\n              if (intVar4 == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  tempStack = (ulong **)*tempData2;\n                  DAT_0010b230 = '\\0';\n                  result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(result,tempStack);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uintVar5 = (*(uint *)(tempData + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(tempData + 3) & 0x800082) != 0) || (tempData[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)tempData[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            binaryData = (ulong **)((long)binaryData + (long)tempData10);\n            if (inputData <= binaryData) break;\n          } while( true );\n        }\n        workingData = (ulong **)((long)workingData - (long)tempData3);\n        if (tempData10 == (ulong **)0x8) {\n          pointerVar11 = tempData2[1];\n          tempData3 = (ulong **)((long)workingData + 7);\n          if (-1 < (long)workingData) {\n            tempData3 = workingData;\n          }\n          outputData = (ulong **)(ulong)DAT_0010b800;\n          codeVar2 = (code *)pointerVar11[0x41];\n          tempData3 = (ulong **)((long)tempData3 >> 3);\n        }\n        else {\n          tempData3 = (ulong **)((long)workingData / (long)tempData10);\n          pointerVar11 = tempData2[1];\n          codeVar2 = (code *)pointerVar11[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = tempData2;\n        DAT_0010b770 = (ulong **)(*codeVar2)(tempData2);\n        DAT_0010b768 = (ulong **)(*(code *)tempData2[1][0x41])(tempData2);\n        workingData = localArray[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          inputData = (ulong **)(ulong)localVar1;\n          if (DAT_0010b7f8 != 0) {\n            boolVar19 = DAT_0010b80c != 0;\n            qsort(localArray[0],(size_t)tempData3,(size_t)inputData,FUN_00102fd2);\n            tempData6 = (ulong **)xmalloc((long)tempData3 << 4);\n            tempData7 = DAT_0010b770;\n            binaryData = DAT_0010b768;\n            tempData10 = (ulong **)((long)tempData3 * (long)inputData + (long)workingData);\n            tempData = DAT_0010b770;\n            if (tempData10 <= workingData) goto LAB_00102ec2;\n            extraData = DAT_0010b768;\n            tempData3 = (ulong **)(*(code *)tempData2[1][0x4e])(tempData2,boolVar19,workingData);\n            outputData = inputData;\n            tempStack = tempData6;\n            if (tempData3 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localArray[0],(size_t)tempData3,(size_t)inputData,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          pointerVar11 = tempData2[1];\nLAB_00104be2:\n          binaryData = tempData2;\n          tempData7 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        FUN_00106530(*tempData2);\n        binaryData = tempData2;\n        workingData = tempData11;\n        while( true ) {\n          tempData8 = (ulong **)xmalloc();\n          inputData = (ulong **)(*(code *)binaryData[1][0x6b])(binaryData,tempData8);\n          tempData = tempData6;\n          if (-1 < (long)inputData) break;\n          tempData2 = (ulong **)*binaryData;\n          tempData3 = (ulong **)FUN_00106530(tempData2,tempData6);\nLAB_00102dbe:\n          pointerVar11 = tempData3[2];\n          tempData = (ulong **)0x0;\nLAB_00102dc4:\n          pointerVar11 = (ulong *)((long)inputData[8] - (long)pointerVar11);\n          tempData7 = binaryData;\n          tempData4 = workingData;\nLAB_00104ea7:\n          tempData3 = tempData;\n          workingData = tempData8;\n          binaryData = extraData;\n          if (pointerVar11 != (ulong *)0x0) {\n            *tempData6 = (ulong *)tempData4;\n            tempData6[1] = pointerVar11;\n            tempData6 = tempData6 + 2;\n          }\nLAB_00104e35:\n          extraData = tempData7;\n          if (workingData < tempData10) goto code_r0x00104e3e;\n          tempData3 = (ulong **)((long)tempData6 - (long)tempStack >> 4);\n          qsort(tempStack,(size_t)tempData3,0x10,FUN_00103533);\n          pointerVar11 = tempData2[1];\n          binaryData = tempData2;\n          tempData7 = tempStack;\nLAB_00104be5:\n          tempData8 = localArray[0];\n          inputData = (ulong **)(ulong)DAT_0010b7f8;\n          tempData10 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            tempData6 = (ulong **)(*(code *)pointerVar11[0x41])(binaryData);\n            if (tempData6 == (ulong **)0x0) goto LAB_00102ed2;\n            workingData = tempData7 + (long)tempData3 * 2;\n            tempData3 = tempData7;\n            goto LAB_00104ee9;\n          }\n          inputData = (ulong **)(ulong)localVar1;\n          tempData11 = (ulong **)(*(code *)pointerVar11[0x41])(binaryData);\n          if (tempData11 != (ulong **)0x0) {\n            tempData9 = (ulong **)((long)tempData3 * (long)inputData + (long)tempData8);\n            if (tempData8 < tempData9) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          FUN_00106530(*binaryData);\n          tempData11 = tempData7;\nLAB_00102d06:\n          tempData = inputData;\n          if (DAT_0010b80c != 0) {\n            tempData8 = localArray[0];\n            tempData3 = (ulong **)0x0;\n            tempData6 = (ulong **)0x0;\n            break;\n          }\n          longVar10 = (*(code *)binaryData[1][0x6a])(binaryData);\n          tempData3 = localArray[0];\n          tempData6 = inputData;\n          workingData = tempData11;\n          if (longVar10 < 1) {\n            inputData = (ulong **)0x0;\n            tempData8 = (ulong **)0x0;\n            break;\n          }\n        }\n        extraData = &localVar2;\n        outputData = tempData8;\n        longVar10 = (*(code *)binaryData[1][0x6c])(binaryData,tempData6,tempData3,inputData);\n        inputData = tempData;\n        if (0 < longVar10) {\n          inputData = (ulong **)((long)tempData + longVar10);\n          localArray[0] = (ulong **)xrealloc(localArray[0]);\n          longVar7 = 0;\n          do {\n            localArray[0][(long)tempData + longVar7] = localVar2 + longVar7 * 6;\n            longVar7 = longVar7 + 1;\n          } while (longVar10 != longVar7);\n          localArray[0][(long)tempData + longVar10] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (tempData8 != (ulong **)0x0)) {\n          free(tempData8);\n        }\nLAB_00102cc2:\n        byteVar1 = *(byte *)((long)binaryData + 0x4a);\n        tempData2 = binaryData;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    pointerVar11 = *binaryData;\n    result = dcgettext(0,\"%s: no symbols\",5);\n    FUN_00106400(result,pointerVar11);\n  }\n  return;\ncode_r0x00104b01:\n  binaryData = (ulong **)((long)binaryData + (long)tempData10);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  tempData8 = (ulong **)((long)workingData + (long)outputData);\n  if (tempData10 <= tempData8) {\n    inputData = (ulong **)tempData3[4];\n    if ((*(uint *)(tempData3 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    tempData = (ulong **)0x0;\nLAB_00104e95:\n    tempData7 = binaryData;\n    tempData4 = workingData;\n    if (*(int *)(tempData2[1] + 1) == 5) {\n      pointerVar11 = tempData3[7];\n      goto LAB_00104ea7;\n    }\n    pointerVar11 = tempData3[2];\n    if ((*(byte *)((long)inputData + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (tempData10 <= tempData8) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  inputData = binaryData;\n  tempData4 = outputData;\n  tempData5 = extraData;\n  tempData = (ulong **)(*(code *)tempData2[1][0x4e])();\n  tempData7 = workingData;\n  if (tempData == (ulong **)0x0) goto LAB_00102edb;\n  inputData = (ulong **)tempData3[4];\n  if ((*(uint *)(tempData3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (workingData <= tempData3) {\nLAB_00104c75:\n    if (localVar2 == (ulong *)0x0) {\n      free(localArray[0]);\n      free(tempData7);\n      return;\n    }\n    free(localVar2);\n    free(localArray[0]);\n    free(tempData7);\n    return;\n  }\n  inputData = tempData6;\n  longVar10 = (*(code *)binaryData[1][0x4e])(binaryData,tempData10,*tempData3);\n  if (longVar10 == 0) goto LAB_00102ec9;\n  inputData = tempData3 + 1;\n  tempData3 = tempData3 + 2;\n  FUN_00105110(binaryData,longVar10,*inputData,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  FUN_00106530(*binaryData,0);\nLAB_00102ed2:\n  tempData2 = (ulong **)*binaryData;\n  FUN_00106530();\n  tempData8 = workingData;\n  tempData4 = outputData;\n  tempData5 = extraData;\nLAB_00102edb:\n  extraData = tempData5;\n  outputData = tempData4;\n  tempData2 = (ulong **)*tempData2;\n  tempData = (ulong **)FUN_00106530();\n  workingData = tempData7;\nLAB_00102ee3:\n  pointerVar11 = tempData3[2];\nLAB_00102ee7:\n  if (inputData != (ulong **)tempData[4]) goto LAB_00102dc4;\n  pointerVar11 = (ulong *)((long)tempData[2] - (long)pointerVar11);\n  tempData7 = binaryData;\n  tempData4 = workingData;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (tempData = tempData11, longVar10 = (*(code *)binaryData[1][0x4e])(binaryData,tempData10,tempData8),\n        longVar10 != 0) {\n    tempData8 = (ulong **)((long)tempData8 + (long)inputData);\n    FUN_00105110(binaryData,longVar10,0,param2);\n    if (tempData9 <= tempData8) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  FUN_00106530(*binaryData);\n  workingData = tempData8;\nLAB_00102ea7:\n  tempData2 = tempData9;\n  FUN_00106530(*binaryData);\n  tempData6 = tempData11;\nLAB_00102eb0:\n  FUN_00106530(*tempData2);\n  tempData2 = binaryData;\nLAB_00102eb9:\n  FUN_00106530(*tempData2);\n  binaryData = extraData;\nLAB_00102ec2:\n  tempData3 = (ulong **)0x0;\n  outputData = inputData;\n  tempData7 = tempData;\n  tempStack = tempData6;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106400",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "process_binary_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00106540",
                "FUN_001063a0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_debug_mode_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfDebugMode_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_debug_mode_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "find_matching_string_00103238",
                "__ptr": "currentPointer",
                "__s1": "targetString",
                "plVar1": "currentSection",
                "lVar2": "sectionAddress",
                "cVar3": "comparisonResult",
                "iVar4": "strcmpResult",
                "unaff_RBX": "sectionPointer",
                "pvVar5": "sectionPointerList",
                "uVar6": "iterationCount",
                "unaff_R13": "currentSectionAddress",
                "lVar7": "sectionIndex",
                "param_10": "paramValue",
                "param_12": "outputString"
            },
            "code": "\n\n\nvoid findMatchingString_00103238(void)\n\n{\n  long *currentSection;\n  void *currentPointer;\n  char *targetString;\n  long sectionAddress;\n  char comparisonResult;\n  int strcmpResult;\n  long sectionPointer;\n  void *sectionPointerList;\n  uint iterationCount;\n  long currentSectionAddress;\n  long sectionIndex;\n  ulong paramValue;\n  void *outputString;\n  \n  sectionPointerList = DAT_0010b750;\n  if (_DAT_0010b7b0 == currentSectionAddress) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    iterationCount = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; iterationCount < DAT_0010b748; iterationCount = iterationCount + 1) {\n        currentPointer = *(void **)((long)sectionPointerList + (ulong)iterationCount * 8);\n        if (currentPointer != (void *)0x0) {\n          free(currentPointer);\n        }\n      }\n      free(DAT_0010b740);\n      free(sectionPointerList);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(currentSectionAddress + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  outputString = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = currentSectionAddress;\nLAB_00103296:\n  targetString = *(char **)(sectionPointer + 8);\n  iterationCount = 0;\n  do {\n    if (DAT_0010b748 <= iterationCount) {\n      putc(10,_stdout);\n      return;\n    }\n    sectionPointerList = DAT_0010b738;\n    for (sectionIndex = 0; currentSection = (long *)((long)sectionPointerList + (ulong)iterationCount * 8),\n        *currentSection != sectionIndex && sectionIndex <= *currentSection; sectionIndex = sectionIndex + 1) {\n      currentSection = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)iterationCount * 8) + sectionIndex * 8);\n      if ((((currentSection != (long *)0x0) &&\n           (sectionAddress = *currentSection, *(long *)(sectionAddress + 0x20) == *(long *)(sectionPointer + 0x20))) &&\n          (*(long *)(sectionAddress + 0x10) == *(long *)(sectionPointer + 0x10))) &&\n         (((strcmpResult = strcmp(targetString,*(char **)(sectionAddress + 8)), strcmpResult == 0 &&\n           (comparisonResult = (**(code **)(*(long *)(currentSectionAddress + 8) + 0x240))(), sectionPointerList = DAT_0010b738,\n           comparisonResult != '\\0')) && (outputString != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",outputString,paramValue >> 0x20);\n        iterationCount = DAT_0010b748;\n        break;\n      }\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_map_over_sections",
                "FUN_00103c00",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_string_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_formatted_message_001036e0",
                "param_1": "source",
                "param_2": "fallback"
            },
            "code": "\nvoid printFormattedMessage_001036e0(undefined8 *source,undefined8 *fallback)\n\n{\n  if (source != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*source);\n    return;\n  }\n  printf(\"%s: \",*fallback);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_formatted_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_formatted_output_001047d0",
                "unaff_RBX": "reallocated_data",
                "unaff_R12": "flag_ptr",
                "unaff_R13": "formatted_output_ptr",
                "unaff_R14": "format_string",
                "unaff_R15": "data_addr",
                "pcVar1": "result"
            },
            "code": "\nvoid print_formatted_output_001047d0(void)\n\n{\n  char *result;\n  void *reallocated_data;\n  undefined *flag_ptr;\n  void *formatted_output_ptr;\n  char *format_string;\n  long data_addr;\n  \n  if (((DAT_0010b234 != 0) &&\n      (result = (char *)(**(code **)(*(long *)(data_addr + 8) + 0x220))(), result != (char *)0x0))\n     && (*result != '\\0')) {\n    reallocated_data = (void *)reconcat();\n    formatted_output_ptr = reallocated_data;\n  }\n  printf(format_string,formatted_output_ptr);\n  if (flag_ptr != (undefined *)0x0) {\n    *flag_ptr = 0x40;\n  }\n  free(reallocated_data);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_formatted_output_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "handle_non_ordinary_file_warning_0010249f",
                "uVar1": "warningMessage",
                "dcgettext": "getWarningMessage"
            },
            "code": "\nundefined8 handleNonOrdinaryFileWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  FUN_00106400(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "handle_non_ordinary_file_warning_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filename",
                "cVar1": "formatCheck",
                "iVar2": "statResult",
                "uVar3": "returnValue",
                "piVar4": "errnoLocation",
                "uVar5": "warningMessage",
                "puVar6": "bfdFile",
                "puVar9": "archivedFile",
                "puVar10": "previousArchivedFile",
                "local_c8": "fileStat",
                "lVar7": "mapEntry",
                "pcVar8": "errorMessage"
            },
            "code": "\n\n\nundefined4 checkFile_001043d0(char *filename)\n\n{\n  char formatCheck;\n  int statResult;\n  undefined4 returnValue;\n  int *errnoLocation;\n  undefined8 warningMessage;\n  undefined8 *bfdFile;\n  long mapEntry;\n  char *errorMessage;\n  undefined8 *archivedFile;\n  undefined8 *previousArchivedFile;\n  stat fileStat;\n  \n  if (filename != (char *)0x0) {\n    statResult = stat(filename,&fileStat);\n    if (statResult < 0) {\nLAB_00102522:\n      errnoLocation = __errno_location();\n      if (*errnoLocation == 2) {\n        warningMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00106400(warningMessage,filename);\n      }\n      else {\n        errorMessage = strerror(*errnoLocation);\n        warningMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00106400(warningMessage,filename,errorMessage);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      warningMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00106400(warningMessage,filename);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (fileStat.st_size < 0) {\n        warningMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        FUN_00106400(warningMessage,filename);\n      }\n      else if (fileStat.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfdFile = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          bfdFile = (undefined8 *)bfd_openr(filename);\n        }\n        if (bfdFile != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfdFile + 0x44) = *(uint *)((long)bfdFile + 0x44) | 0x8000;\n          }\n          formatCheck = bfd_check_format(bfdFile,2);\n          if (formatCheck == '\\0') {\n            returnValue = bfd_check_format_matches(bfdFile,1,&fileStat);\n            if ((char)returnValue == '\\0') goto LAB_001025ac;\n            FUN_00104670(bfdFile);\n            (**(code **)PTR_PTR_FUN_0010b260)(filename);\n            FUN_001048e0(bfdFile,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfdFile);\n            if ((_DAT_0010b7f0 != 0) &&\n               (mapEntry = bfd_get_next_mapent(bfdFile,0xffffffffffffffff,&fileStat), mapEntry != -1)) {\n              errorMessage = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(errorMessage);\n              do {\n                archivedFile = (undefined8 *)(**(code **)(bfdFile[1] + 0x1e0))(bfdFile,mapEntry);\n                if (archivedFile == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)fileStat.st_dev != 0) {\n                  FUN_00104740(&DAT_0010712d,0,*(long *)fileStat.st_dev,bfdFile);\n                  printf(\" in %s\\n\",*archivedFile);\n                }\n                mapEntry = bfd_get_next_mapent(bfdFile,mapEntry,&fileStat);\n              } while (mapEntry != -1);\n            }\n            archivedFile = (undefined8 *)0x0;\n            do {\n              do {\n                previousArchivedFile = archivedFile;\n                archivedFile = (undefined8 *)bfd_openr_next_archived_file(bfdFile,previousArchivedFile);\n                if (archivedFile == (undefined8 *)0x0) {\n                  statResult = bfd_get_error();\n                  if (statResult != 9) {\n                    FUN_00106530(*bfdFile);\nLAB_00102516:\n                    FUN_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previousArchivedFile != (undefined8 *)0x0) {\n                    bfd_close(previousArchivedFile);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                formatCheck = bfd_check_format_matches(archivedFile,1,&fileStat);\n                if (formatCheck == '\\0') {\n                  FUN_00106540(*archivedFile);\n                  statResult = bfd_get_error();\n                  if (statResult == 0xd) {\n                    FUN_00103b5d(fileStat.st_dev);\n                  }\n                }\n                else {\n                  FUN_00104670(archivedFile);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfdFile,*archivedFile);\n                  FUN_001048e0(archivedFile,bfdFile);\n                }\n              } while (previousArchivedFile == (undefined8 *)0x0);\n              bfd_close(previousArchivedFile);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previousArchivedFile != archivedFile);\n          }\nLAB_001044b4:\n          returnValue = 1;\n          while (formatCheck = bfd_close(bfdFile), formatCheck == '\\0') {\n            FUN_00106530(filename);\nLAB_001025ac:\n            FUN_00106540(filename);\n            statResult = bfd_get_error();\n            if (statResult == 0xd) {\n              FUN_00103b5d(fileStat.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return returnValue;\n        }\n        FUN_00106540(filename);\n      }\n    }\n    else {\n      warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00106400(warningMessage,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106540",
                "FUN_0010351b",
                "bfd_get_next_mapent",
                "FUN_00103b5d",
                "bfd_openr",
                "FUN_0010249f",
                "FUN_00106400",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00104740",
                "bfd_check_format_matches",
                "bfd_get_error",
                "FUN_001062d0",
                "dcgettext",
                "bfd_close",
                "strerror",
                "FUN_00104670",
                "FUN_001048e0",
                "stat",
                "__errno_location",
                "FUN_00102670",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001055f0",
                "FUN_00103ca0",
                "FUN_0010268b",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_with_prefix_001025f5",
                "param_1": "prefix",
                "param_2": "suffix"
            },
            "code": "\nvoid concatenateWithPrefix_001025f5(undefined8 prefix,undefined8 suffix)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,suffix,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_with_prefix_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_not_zero_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfNotZero_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_not_zero_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00103463",
                "FUN_00104d5b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "str2",
                "__s1": "str1",
                "uVar1": "result",
                "lVar2": "length1",
                "lVar3": "length2"
            },
            "code": "\nuint compareStrings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *str2;\n  char *str1;\n  uint result;\n  long length1;\n  long length2;\n  \n  length1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  length2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((length1 == 0) || (length2 == 0)) {\n    FUN_00106530(*DAT_0010b780);\n  }\n  else {\n    str2 = *(char **)(length2 + 8);\n    str1 = *(char **)(length1 + 8);\n    if (str2 == (char *)0x0) {\n      return (uint)(str1 != (char *)0x0);\n    }\n    if (str1 != (char *)0x0) {\n      if (*str2 == '\\0') {\n        return (uint)(*str1 != '\\0');\n      }\n      if (*str1 == '\\0') {\n        return 0xffffffff;\n      }\n      result = strcoll(str1,str2);\n      return result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "strcoll",
                "FUN_00102f9f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00103729",
                "FUN_001053c0",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "logTag",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001064a0(undefined8 *logTag,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (logTag != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*logTag);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "type",
                "iVar3": "status",
                "plVar4": "symbolInfo",
                "piVar5": "errorNum",
                "uVar6": "errorString",
                "lVar7": "info",
                "uVar8": "printWidth",
                "bVar9": "typeFlag",
                "uVar10": "originalPrintWidth",
                "pcVar11": "typeString",
                "in_R8": "arg1",
                "in_R9": "arg2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort type;\n  int status;\n  long *symbolInfo;\n  int *errorNum;\n  undefined8 errorString;\n  long info;\n  ulong printWidth;\n  byte typeFlag;\n  ulong originalPrintWidth;\n  char *typeString;\n  undefined8 arg1;\n  undefined8 arg2;\n  \n  printWidth = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  originalPrintWidth = printWidth;\n  FUN_00106300(symbolInfo,printWidth);\n  FUN_00104740(\"%-20s|\",symbolInfo,0,originalPrintWidth,arg1,arg2,printWidth);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      info = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(info + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        typeString = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        typeString = \"Block\";\n      }\n      else if (*(ushort *)(info + 0x26) == 0) {\n        typeString = \"None\";\n      }\n      else {\n        type = *(ushort *)(info + 0x26) >> 4 & 3;\n        if (type == 2) {\n          typeString = \"Function\";\n        }\n        else if (type == 3) {\n          typeString = \"Array\";\n        }\n        else {\n          if (type != 1) {\n            free(DAT_0010b730);\n            type = *(ushort *)(info + 0x26);\n            typeFlag = *(byte *)(info + 0x28);\n            typeString = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            status = asprintf(&DAT_0010b730,typeString,(ulong)typeFlag,(ulong)type);\n            typeString = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          typeString = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeFlag = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(typeFlag) {\n    case 0:\n      typeString = \"NOTYPE\";\n      break;\n    case 1:\n      typeString = \"OBJECT\";\n      break;\n    case 2:\n      typeString = \"FUNC\";\n      break;\n    case 3:\n      typeString = \"SECTION\";\n      break;\n    case 4:\n      typeString = \"FILE\";\n      break;\n    case 5:\n      typeString = \"COMMON\";\n      break;\n    case 6:\n      typeString = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      typeString = \"<processor specific>: %d\";\n      if ((2 < typeFlag - 0xd) && (typeString = \"<OS specific>: %d\", 2 < typeFlag - 10)) {\n        typeString = \"<unknown>: %d\";\n      }\n      typeString = (char *)dcgettext(0,typeString,5);\n      status = asprintf(&DAT_0010b728,typeString,(ulong)typeFlag);\n      typeString = DAT_0010b728;\njoined_r0x00103964:\n      if (status < 0) {\n        errorNum = __errno_location();\n        errorString = xstrerror(*errorNum);\n        FUN_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        typeString = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeString);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  info = symbolInfo[2];\n  if ((info != 0) || (info = symbolInfo[3], info != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(info + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_0010370a",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_strings_001053b0",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unused_param",
                "param_4": "string3"
            },
            "code": "\nvoid print_strings_001053b0(undefined8 *string1,undefined8 *string2,undefined8 unused_param,undefined8 string3)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,string3);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_strings_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "parse_input_files_001055f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte1",
                "bVar2": "byteVar2",
                "bVar3": "boolVar3",
                "bVar4": "boolVar4",
                "bVar5": "boolVar5",
                "cVar6": "charVar6",
                "bVar7": "byteVar7",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "iVar10": "intVar10",
                "uVar11": "uintVar11",
                "iVar12": "intVar12",
                "__stream": "fileStream",
                "__s": "bytePtr_s",
                "piVar15": "intPtr15",
                "sVar16": "size_sVar16",
                "__ptr": "bytePtr_ptr",
                "__src": "longPtr_src",
                "lVar17": "longVar17",
                "plVar18": "paramSrc",
                "plVar19": "paramDest",
                "uVar20": "uintVar20",
                "uVar21": "uintVar21",
                "pcVar22": "strVar22",
                "pbVar23": "bytePtr23",
                "unaff_RBP": "ppv_RBP",
                "lVar24": "longVar24",
                "pbVar25": "bytePtr25",
                "pcVar26": "strVar26",
                "unaff_R12": "pIntR12",
                "piVar27": "pIntVar27",
                "local_110": "local_int110",
                "local_10c": "local_int10c",
                "local_108": "local_sVar108",
                "local_c8": "local_stat",
                "setlocale": "setLocale",
                "bindtextdomain": "bindTextdomain",
                "textdomain": "textDomain",
                "xmalloc_set_program_name": "xmalloc_setProgramName",
                "bfd_set_error_program_name": "bfd_setErrorProgramName",
                "bfd_plugin_set_program_name": "bfd_pluginSetProgramName",
                "LAB_00105a70": "LABEL_00105a70",
                "LAB_00105a7a": "LABEL_00105a7a",
                "LAB_001058e0": "LABEL_001058e0",
                "optind": "optIndex",
                "_optind": "_optIndex"
            },
            "code": "\n\n\nundefined ** parseInputFiles_001055f0(int argc,long *argv)\n\n{\n  byte *ptrByte1;\n  byte byteVar2;\n  bool boolVar3;\n  bool boolVar4;\n  bool boolVar5;\n  char charVar6;\n  byte byteVar7;\n  char charVar8;\n  char charVar9;\n  int intVar10;\n  uint uintVar11;\n  int intVar12;\n  undefined4 uVar13;\n  undefined4 uVar14;\n  FILE *fileStream;\n  byte *bytePtr_s;\n  int *intPtr15;\n  size_t size_sVar16;\n  byte *bytePtr_ptr;\n  long *longPtr_src;\n  long longVar17;\n  long *paramSrc;\n  long *paramDest;\n  undefined8 uintVar20;\n  undefined8 uintVar21;\n  char *strVar22;\n  byte *bytePtr23;\n  undefined **ppv_RBP;\n  long longVar24;\n  byte *bytePtr25;\n  char *strVar26;\n  int *pIntR12;\n  int *pIntVar27;\n  int local_int110;\n  int local_int10c;\n  size_t local_sVar108;\n  stat local_stat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  strVar22 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  paramSrc = argv;\n  if (1 < argc) {\n    local_int10c = 2000;\n    pIntR12 = (int *)0x1;\n    local_int110 = 0;\n    do {\n      intVar12 = (int)pIntR12;\n      ppv_RBP = (undefined **)(long)intVar12;\n      pIntVar27 = (int *)((long)ppv_RBP * 8);\n      if (*(char *)paramSrc[(long)ppv_RBP] != '@') goto LABEL_00105a70;\n      local_int10c = local_int10c + -1;\n      if (local_int10c == 0) {\n        longVar24 = *paramSrc;\n        strVar26 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      strVar22 = (char *)paramSrc[(long)ppv_RBP] + 1;\n      intVar10 = stat(strVar22,&local_stat);\n      if (intVar10 < 0) {\nLABEL_00105a70:\n        if (argc <= intVar12 + 1) break;\nLABEL_00105a7a:\n        uintVar11 = intVar12 + 1;\n        local_int110 = intVar12;\n      }\n      else {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        fileStream = fopen(strVar22,\"r\");\n        if (fileStream == (FILE *)0x0) goto LABEL_00105a70;\n        intVar10 = fseek(fileStream,0,2);\n        if (((intVar10 == -1) ||\n            (strVar22 = (char *)ftell(fileStream), (int *)strVar22 == (int *)0xffffffffffffffff)) ||\n           (intVar10 = fseek(fileStream,0,0), intVar10 == -1)) {\nLAB_00105ad0:\n          fclose(fileStream);\n          if (intVar12 + 1 < argc) goto LABEL_00105a7a;\n          break;\n        }\n        bytePtr_s = (byte *)xmalloc((char *)((long)strVar22 + 1));\n        intPtr15 = (int *)fread(bytePtr_s,1,(size_t)strVar22,fileStream);\n        if (((int *)strVar22 != intPtr15) && (intVar10 = ferror(fileStream), intVar10 != 0)) {\n          free(bytePtr_s);\n          goto LAB_00105ad0;\n        }\n        bytePtr_s[(long)intPtr15] = 0;\n        byteVar7 = *bytePtr_s;\n        bytePtr23 = bytePtr_s;\n        if (byteVar7 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byteVar7 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size_sVar16 = strlen((char *)bytePtr_s);\n          bytePtr_ptr = (byte *)xmalloc(size_sVar16 + 1);\n          intVar10 = 0;\n          boolVar5 = false;\n          boolVar3 = false;\n          longVar24 = 0;\n          longPtr_src = (long *)0x0;\n          boolVar4 = false;\n          bytePtr23 = bytePtr_s;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr23 * 2] & 0x40) != 0) {\n              bytePtr23 = bytePtr23 + 1;\n            }\n            if ((intVar10 == 0) || (paramDest = longPtr_src + longVar24, intVar10 + -1 <= (int)longVar24)) {\n              if (longPtr_src == (long *)0x0) {\n                intVar10 = 8;\n                longPtr_src = (long *)xmalloc(0x40);\n                paramDest = longPtr_src + longVar24;\n                *paramDest = 0;\n              }\n              else {\n                intVar10 = intVar10 * 2;\n                longPtr_src = (long *)xrealloc(longPtr_src,(long)intVar10 << 3);\n                paramDest = longPtr_src + longVar24;\n                *paramDest = 0;\n              }\n            }\n            byteVar7 = *bytePtr23;\n            bytePtr25 = bytePtr_ptr;\n            while (byteVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar5 | boolVar4 | boolVar3))) {\n                  boolVar4 = false;\n                  boolVar5 = false;\n                  boolVar3 = false;\n                  goto LABEL_001058e0;\n                }\n                if (!boolVar4) break;\n                bytePtr23 = bytePtr23 + 1;\n                *bytePtr25 = byteVar7;\n                bytePtr25 = bytePtr25 + 1;\n                boolVar4 = false;\n                byteVar7 = *bytePtr23;\n                if (byteVar7 == 0) goto LABEL_001058e0;\n              }\n              if (byteVar7 == 0x5c) {\n                boolVar4 = true;\n              }\n              else if (boolVar3) {\n                if (byteVar7 == 0x27) {\n                  boolVar3 = false;\n                }\n                else {\nLAB_00105a55:\n                  *bytePtr25 = byteVar7;\n                  bytePtr25 = bytePtr25 + 1;\n                }\n              }\n              else if (boolVar5) {\n                if (byteVar7 != 0x22) goto LAB_00105a55;\n                boolVar5 = false;\n              }\n              else if (byteVar7 == 0x27) {\n                boolVar3 = true;\n              }\n              else {\n                if (byteVar7 != 0x22) goto LAB_00105a55;\n                boolVar5 = true;\n              }\n              ptrByte1 = bytePtr23 + 1;\n              bytePtr23 = bytePtr23 + 1;\n              byteVar7 = *ptrByte1;\n            }\nLABEL_001058e0:\n            *bytePtr25 = 0;\n            longVar17 = xstrdup(bytePtr_ptr);\n            *paramDest = longVar17;\n            longPtr_src[longVar24 + 1] = 0;\n            byteVar7 = *bytePtr23;\n            byteVar2 = (&_sch_istable)[(ulong)byteVar7 * 2];\n            while ((byteVar2 & 0x40) != 0) {\n              byteVar7 = bytePtr23[1];\n              bytePtr23 = bytePtr23 + 1;\n              byteVar2 = (&_sch_istable)[(ulong)byteVar7 * 2];\n            }\n            longVar24 = longVar24 + 1;\n          } while (byteVar7 != 0);\n          free(bytePtr_ptr);\n          paramDest = paramSrc;\n          if (argv == paramSrc) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        longPtr_src = (long *)xmalloc(8);\n        *longPtr_src = 0;\n        if (argv == paramSrc) {\nLAB_00105c79:\n          if (*paramSrc == 0) {\n            intVar10 = 0;\n          }\n          else {\n            longVar24 = 1;\n            do {\n              intVar10 = (int)longVar24;\n              paramDest = paramSrc + longVar24;\n              longVar24 = longVar24 + 1;\n            } while (*paramDest != 0);\n          }\n          longVar17 = 0;\n          paramDest = (long *)xmalloc((long)(intVar10 + 1) << 3);\n          longVar24 = *paramSrc;\n          while (longVar24 != 0) {\n            uintVar20 = xstrdup();\n            *(undefined8 *)((long)paramDest + longVar17) = uintVar20;\n            longVar17 = longVar17 + 8;\n            longVar24 = *(long *)((long)paramSrc + longVar17);\n          }\n          *(undefined8 *)((long)paramDest + longVar17) = 0;\nLAB_0010597d:\n          paramSrc = paramDest;\n          if (*longPtr_src == 0) goto LAB_00105d50;\n          strVar22 = (char *)0x0;\n          do {\n            strVar22 = (char *)((long)strVar22 + 1);\n          } while (longPtr_src[(long)strVar22] != 0);\n          local_sVar108 = (long)strVar22 * 8;\n        }\n        else {\nLAB_00105d50:\n          strVar22 = (char *)0x0;\n          local_sVar108 = 0;\n        }\n        free((void *)paramSrc[(long)ppv_RBP]);\n        paramSrc = (long *)xrealloc(paramSrc,(long)((long)strVar22 + (long)argc + 1) * 8);\n        intVar10 = argc + -1 + (int)strVar22;\n        memmove(paramSrc + (long)(undefined **)((long)ppv_RBP + (long)strVar22),\n                paramSrc + 1 + (long)ppv_RBP,(long)(argc - intVar12) << 3);\n        memcpy(paramSrc + (long)ppv_RBP,longPtr_src,local_sVar108);\n        free(longPtr_src);\n        free(bytePtr_s);\n        fclose(fileStream);\n        uintVar11 = local_int110 + 1;\n        ppv_RBP = (undefined **)((long)ppv_RBP + (long)strVar22);\n        pIntR12 = pIntVar27;\n        argc = intVar10;\n        if (intVar10 <= (int)uintVar11) break;\n      }\n      pIntR12 = (int *)(ulong)uintVar11;\n    } while( true );\n  }\n  intVar12 = bfd_init();\n  strVar26 = \"fatal error: libbfd ABI mismatch\";\n  if (intVar12 != 0x118) goto LAB_00106085;\n  ppv_RBP = &PTR_s_debug_syms_0010b280;\n  charVar8 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  strVar22 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  pIntR12 = (int *)\"x86_64-pc-linux-gnu\";\n  charVar9 = DAT_0010b23b;\n  charVar6 = DAT_0010b240;\n  uVar14 = DAT_0010b244;\n  if (charVar8 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uVar14;\n    DAT_0010b240 = charVar6;\n    DAT_0010b23b = charVar9;\n    uVar13 = getopt_long(argc,paramSrc,strVar22);\n    pIntVar27 = _optarg;\n    intPtr15 = (int *)strVar22;\n    charVar9 = DAT_0010b23b;\n    charVar6 = DAT_0010b240;\n    uVar14 = DAT_0010b244;\n    switch(uVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      FUN_00103ca0(_stderr,1);\n      pIntVar27 = pIntR12;\nLAB_001061d5:\n      intVar12 = strcmp((char *)pIntVar27,\"l\");\n      if (intVar12 == 0) goto LAB_001061a3;\n      intVar12 = strcmp((char *)pIntVar27,\"escape\");\n      pIntR12 = pIntVar27;\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)pIntVar27,\"e\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 2;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)pIntVar27,\"invalid\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)pIntVar27,\"i\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 5;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)pIntVar27,\"hex\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)pIntVar27,\"x\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 3;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)pIntVar27,\"highlight\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)pIntVar27,\"h\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 4;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      strVar26 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      FUN_00104370(&DAT_00107033);\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      FUN_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      pIntR12 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        intVar12 = cplus_demangle_name_to_style();\n        intPtr15 = _optarg;\n        if (intVar12 == 0) {\n          uintVar20 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          FUN_00106300(uintVar20,intPtr15);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          strVar22 = (char *)intPtr15;\n          charVar9 = DAT_0010b23b;\n          charVar6 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          charVar9 = DAT_0010b23b;\n          charVar6 = DAT_0010b240;\n          uVar14 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      FUN_00104370(\"posix\");\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      intVar12 = strcmp((char *)_optarg,\"32_64\");\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      if (intVar12 != 0) {\n        strVar26 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        uintVar20 = dcgettext(0,strVar26,5);\n        FUN_00106300(uintVar20);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      FUN_00104370(_optarg);\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      FUN_00104370(\"just-symbols\");\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      charVar9 = *(char *)_optarg;\n      pIntR12 = pIntVar27;\n      charVar6 = charVar9;\n      uVar14 = 10;\n      if (charVar9 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < charVar9) {\n        if (charVar9 == 'o') {\n          uVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (charVar9 == 'x') {\n          uVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      strVar26 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      charVar9 = DAT_0010b23b;\n      charVar6 = DAT_0010b240;\n      uVar14 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      intVar12 = strcmp((char *)_optarg,\"default\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)pIntVar27,\"d\"), intVar12 == 0)) {\n        DAT_0010b7e0 = 0;\n        pIntR12 = pIntVar27;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      else {\n        intVar12 = strcmp((char *)pIntVar27,\"locale\");\n        if (intVar12 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        pIntR12 = pIntVar27;\n        charVar9 = DAT_0010b23b;\n        charVar6 = DAT_0010b240;\n        uVar14 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    uintVar20 = dcgettext(0,strVar26,5);\n    FUN_00106300(uintVar20,pIntVar27);\nLAB_00105f13:\n    longVar24 = *paramSrc;\n    strVar26 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,strVar26,longVar24);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uVar14 = bfd_get_error();\n  uintVar20 = bfd_errmsg(uVar14);\n  uintVar21 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  FUN_00106300(uintVar21,\"x86_64-pc-linux-gnu\",uintVar20);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byteVar7 = bytePtr23[1];\n  bytePtr23 = bytePtr23 + 1;\n  if (byteVar7 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  ppv_RBP = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    strVar22 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(strVar22);\n    strVar22 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(strVar22);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    uintVar20 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    FUN_00106400(uintVar20);\n    uintVar20 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    FUN_00106400(uintVar20);\n    return ppv_RBP;\n  }\n  strVar22 = &optIndex;\n  if (_optIndex != argc) {\n    if (1 < argc - _optIndex) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      intVar12 = *(int *)strVar22;\n      if (argc <= intVar12) break;\n      longVar24 = paramSrc[intVar12];\n      *(int *)strVar22 = intVar12 + 1;\n      charVar9 = FUN_001043d0(longVar24);\n      if (charVar9 != '\\0') {\n        intVar12 = *(int *)strVar22;\n        if (argc <= intVar12) break;\n        longVar24 = paramSrc[intVar12];\n        *(int *)strVar22 = intVar12 + 1;\n        charVar9 = FUN_001043d0(longVar24);\n        if (charVar9 != '\\0') {\n          intVar12 = *(int *)strVar22;\n          while( true ) {\n            if (argc <= intVar12) goto LAB_00105bdd;\n            longVar24 = paramSrc[intVar12];\n            *(int *)strVar22 = intVar12 + 1;\n            charVar9 = FUN_001043d0(longVar24);\n            if (charVar9 == '\\0') break;\n            intVar12 = *(int *)strVar22;\n          }\n        }\n      }\n      ppv_RBP = (undefined **)(ulong)((int)ppv_RBP + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)ppv_RBP);\n  }\nLAB_0010613c:\n  uintVar11 = FUN_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uintVar11 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "memmove",
                "FUN_00103ca0",
                "memcpy",
                "ferror",
                "ftell",
                "bindtextdomain",
                "fseek",
                "textdomain",
                "xmalloc_set_program_name",
                "exit",
                "FUN_001043d0",
                "strcmp",
                "bfd_set_default_target",
                "xexit",
                "dcgettext",
                "stat",
                "strlen",
                "printf",
                "getopt_long",
                "fread",
                "cplus_demangle_set_style",
                "bfd_plugin_set_plugin",
                "xmalloc",
                "xstrdup",
                "free",
                "FUN_00104370",
                "FUN_00106300",
                "FUN_00106400",
                "xrealloc",
                "setlocale",
                "bfd_init",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "fclose",
                "fopen",
                "bfd_plugin_set_program_name",
                "bfd_set_error_program_name",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_input_files_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00104670",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_if_initialized_0010351b"
            },
            "code": "\nvoid printIfInitialized_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_initialized_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_data_available_00103b2b",
                "param_1": "message_header",
                "param_2": "message_body"
            },
            "code": "\nvoid print_if_data_available_00103b2b(undefined8 message_header,undefined8 message_body)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message_header,message_body);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_data_available_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "param_1": "formatString",
                "param_2": "stringData",
                "param_3": "demangledString",
                "param_4": "demangleLength",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "iVar4": "intVar4",
                "sVar5": "sizeVar5",
                "pcVar6": "charPointerVar6",
                "puVar7": "pointerVar7",
                "pcVar8": "charPointerVar8",
                "__ptr": "tempPointer",
                "uVar9": "unsignedVar9",
                "uVar10": "unsignedVar10",
                "puVar11": "pointerVar11",
                "puVar12": "pointerVar12",
                "__s": "tempString",
                "__s_00": "tempString2",
                "lVar13": "longVar13",
                "uVar14": "unsignedVar14",
                "bVar15": "byteVar15",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printFormattedString_00104740(char *formatString,long *stringData,undefined8 *demangledString,long demangleLength)\n\n{\n  undefined8 *pointerVar1;\n  byte byteVar2;\n  byte byteVar3;\n  int intVar4;\n  size_t sizeVar5;\n  char *charPointerVar6;\n  undefined8 *pointerVar7;\n  char *charPointerVar8;\n  undefined8 *tempPointer;\n  ulong unsignedVar9;\n  undefined8 unsignedVar10;\n  undefined *pointerVar11;\n  undefined8 *pointerVar12;\n  char *tempString;\n  undefined8 *tempString2;\n  long longVar13;\n  uint unsignedVar14;\n  byte byteVar15;\n  char stackArray [9];\n  \n  byteVar15 = 0;\n  if (demangledString == (undefined8 *)0x0) {\n    demangledString = *(undefined8 **)(*stringData + 0x10);\n    if (DAT_0010b234 == 0) {\n      FUN_00102739();\n      return;\n    }\nLAB_00104775:\n    pointerVar12 = demangledString;\n    if (DAT_0010b814 == 0) {\n      charPointerVar6 = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        pointerVar12 = demangledString;\n        tempPointer = (undefined8 *)0x0;\n      }\n      else {\n        tempPointer = (undefined8 *)0x0;\n        if (demangledString != (undefined8 *)0x0) goto LAB_0010269d;\n        pointerVar12 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPointerVar6 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)pointerVar12 == '\\0') ||\n         (demangledString = (undefined8 *)bfd_demangle(demangleLength,pointerVar12,DAT_0010b248),\n         demangledString == (undefined8 *)0x0)) {\n        demangledString = pointerVar12;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        tempPointer = (undefined8 *)0x0;\n      }\n      else {\n        pointerVar12 = demangledString;\n        tempPointer = demangledString;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    pointerVar12 = demangledString;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(demangleLength + 8) + 8) != 5) goto LAB_00104775;\n      charPointerVar6 = strchr((char *)demangledString,0x40);\n      if (charPointerVar6 == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (stringData == (long *)0x0) {\n              tempPointer = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            else {\n              if (stringData[2] != 0) {\n                FUN_001047d0();\n                return;\n              }\n              tempPointer = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPointerVar6 = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          tempPointer = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPointerVar6 = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    pointerVar12 = demangledString;\n    tempPointer = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byteVar2 = *(byte *)demangledString;\n      demangledString = (undefined8 *)((long)demangledString + 1);\n      if (byteVar2 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) && (byteVar2 < 0xc0));\n    sizeVar5 = strlen((char *)pointerVar12);\n    tempString2 = DAT_0010b790;\n    if (_DAT_0010b798 < sizeVar5 * 9) {\n      free(DAT_0010b790);\n      sizeVar5 = strlen((char *)pointerVar12);\n      _DAT_0010b798 = sizeVar5 * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      tempString2 = DAT_0010b790;\n    }\n    while( true ) {\n      pointerVar7 = DAT_0010b790;\n      byteVar2 = *(byte *)pointerVar12;\n      pointerVar1 = (undefined8 *)((long)pointerVar12 + 1);\n      if (byteVar2 == 0) break;\n      if (((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) {\n        if ((byteVar2 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)tempString2 = byteVar2;\n          tempString2 = (undefined8 *)((long)tempString2 + 1);\n          pointerVar12 = pointerVar1;\n        }\n        else {\n          byteVar3 = *(byte *)((long)pointerVar12 + 1);\n          if ((byteVar3 & 0xc0) == 0x80) {\n            pointerVar7 = tempString2;\n            if ((byteVar2 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                unsignedVar14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar13 = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar4 = isatty(1);\n                if (intVar4 == 0) {\n                  byteVar3 = *(byte *)((long)pointerVar12 + 1);\n                }\n                else {\n                  *(undefined *)(tempString2 + 1) = 0;\n                  *tempString2 = 0x6d37343b31335b1b;\n                  byteVar3 = *(byte *)((long)pointerVar12 + 1);\n                  pointerVar7 = tempString2 + 1;\n                }\n              case 2:\n                unsignedVar14 = 2;\n                sprintf((char *)pointerVar7,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointerVar12 >> 2 & 7),\n                        (ulong)((*(byte *)pointerVar12 & 3) << 6 | byteVar3 & 0x3f));\n                pointerVar7 = (undefined8 *)((long)pointerVar7 + 6);\n                goto LAB_00102a27;\n              default:\n                unsignedVar14 = 2;\n              }\n            }\n            else {\n              byteVar3 = *(byte *)((long)pointerVar12 + 2);\n              if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVar2 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  unsignedVar14 = 3;\nLAB_00102a62:\n                  for (unsignedVar9 = (ulong)unsignedVar14; unsignedVar9 != 0; unsignedVar9 = unsignedVar9 - 1) {\n                    *(undefined *)pointerVar7 = *(undefined *)pointerVar12;\n                    pointerVar12 = (undefined8 *)((long)pointerVar12 + (ulong)byteVar15 * -2 + 1);\n                    pointerVar7 = (undefined8 *)((long)pointerVar7 + (ulong)byteVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar13 = 3;\nLAB_00102917:\n                  unsignedVar10 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    unsignedVar10 = 0x3c;\n                  }\n                  sprintf((char *)tempString2,\"%c\",unsignedVar10);\n                  *(undefined *)((long)tempString2 + 3) = 0;\n                  pointerVar7 = (undefined8 *)(longVar13 + (long)pointerVar12);\n                  *(undefined2 *)((long)tempString2 + 1) = 0x7830;\n                  charPointerVar8 = (char *)((long)tempString2 + 3);\n                  do {\n                    tempString = charPointerVar8;\n                    byteVar2 = *(byte *)pointerVar12;\n                    pointerVar12 = (undefined8 *)((long)pointerVar12 + 1);\n                    sprintf(tempString,\"%02x\",(ulong)byteVar2);\n                    charPointerVar8 = tempString + 2;\n                  } while (pointerVar12 != pointerVar7);\n                  unsignedVar10 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    unsignedVar10 = 0x3e;\n                  }\n                  unsignedVar14 = (uint)longVar13;\n                  sprintf(tempString + 2,\"%c\",unsignedVar10);\n                  pointerVar7 = (undefined8 *)(tempString + 3);\n                  break;\n                case 4:\n                  intVar4 = isatty(1);\n                  if (intVar4 == 0) {\n                    byteVar3 = *(byte *)((long)pointerVar12 + 2);\n                  }\n                  else {\n                    *(undefined *)(tempString2 + 1) = 0;\n                    *tempString2 = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)pointerVar12 + 2);\n                    pointerVar7 = tempString2 + 1;\n                  }\n                case 2:\n                  unsignedVar14 = 3;\n                  sprintf((char *)pointerVar7,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointerVar12 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointerVar12 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointerVar12 + 1) & 3) << 6 | byteVar3 & 0x3f));\n                  pointerVar7 = (undefined8 *)((long)pointerVar7 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar4 = isatty(1), intVar4 != 0)) {\n                    *(undefined4 *)pointerVar7 = 0x6d305b1b;\n                    pointerVar7 = (undefined8 *)((long)pointerVar7 + 4);\n                    *(undefined *)pointerVar7 = 0;\n                  }\n                  break;\n                default:\n                  unsignedVar14 = 3;\n                }\n              }\n              else {\n                byteVar3 = *(byte *)((long)pointerVar12 + 3);\n                if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  unsignedVar14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar13 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar4 = isatty(1);\n                  if (intVar4 == 0) {\n                    byteVar3 = *(byte *)((long)pointerVar12 + 3);\n                  }\n                  else {\n                    *(undefined *)(tempString2 + 1) = 0;\n                    *tempString2 = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)pointerVar12 + 3);\n                    pointerVar7 = tempString2 + 1;\n                  }\n                case 2:\n                  unsignedVar14 = 4;\n                  intVar4 = sprintf((char *)pointerVar7,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointerVar12 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointerVar12 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointerVar12 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointerVar12 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointerVar12 + 2) & 3) << 6 | byteVar3 & 0x3f));\n                  pointerVar7 = (undefined8 *)((long)pointerVar7 + (long)intVar4);\n                  goto LAB_00102a27;\n                default:\n                  unsignedVar14 = 4;\n                }\n              }\n            }\n            unsignedVar9 = (ulong)(uint)((int)pointerVar7 - (int)tempString2);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)tempString2 = byteVar2;\n            unsignedVar14 = 1;\n            unsignedVar9 = 1;\n          }\n          tempString2 = (undefined8 *)((long)tempString2 + unsignedVar9);\n          pointerVar12 = (undefined8 *)((long)pointerVar1 + (ulong)(unsignedVar14 - 1));\n        }\n      }\n      else {\n        *(undefined *)tempString2 = 0x5e;\n        *(byte *)((long)tempString2 + 1) = byteVar2 + 0x40;\n        tempString2 = (undefined8 *)((long)tempString2 + 2);\n        pointerVar12 = pointerVar1;\n      }\n    }\n    *(undefined *)tempString2 = 0;\n    pointerVar12 = pointerVar7;\n  }\njoined_r0x00104864:\n  if ((((stringData != (long *)0x0) && (stringData[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((charPointerVar8 = (char *)(**(code **)(*(long *)(demangleLength + 8) + 0x220))\n                                  (demangleLength,stringData[2],0,stackArray), charPointerVar8 != (char *)0x0 &&\n      (*charPointerVar8 != '\\0')))) {\n    pointerVar11 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(stringData[2] + 0x20) != 0x10c2a8)) {\n      pointerVar11 = &DAT_001071df;\n    }\n    tempPointer = (undefined8 *)reconcat(tempPointer,pointerVar12,pointerVar11,charPointerVar8,0);\n    pointerVar12 = tempPointer;\n  }\n  printf(formatString,pointerVar12);\n  if (charPointerVar6 != (char *)0x0) {\n    *charPointerVar6 = '@';\n  }\nLAB_001047ba:\n  free(tempPointer);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001043d0",
                "FUN_001064b0",
                "FUN_00103b49"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "parse_and_process_data_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "dataPtr1",
                "param_10": "dataPtr2",
                "param_11": "dataPtr3",
                "param_12": "dataPtr4",
                "param_13": "dataPtr5",
                "param_14": "dataPtr6",
                "in_AL": "flag",
                "local_d8": "localVar1",
                "local_d4": "localVar2",
                "local_d0": "localArray1",
                "local_c8": "localArray2",
                "local_b8": "localArray3",
                "local_b0": "data1",
                "local_a8": "data2",
                "local_a0": "data3",
                "local_98": "data4",
                "local_90": "data5",
                "local_88": "processedInput1",
                "local_78": "processedInput2",
                "local_68": "processedInput3",
                "local_58": "processedInput4",
                "local_48": "processedInput5",
                "local_38": "processedInput6",
                "local_28": "processedInput7",
                "local_18": "processedInput8"
            },
            "code": "\nvoid parseAndProcessData_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 dataPtr1,undefined8 dataPtr2,undefined8 dataPtr3,undefined8 dataPtr4,\n                 undefined8 dataPtr5,undefined8 dataPtr6)\n\n{\n  char flag;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localArray1;\n  undefined *localArray2;\n  undefined localArray3 [8];\n  undefined8 data1;\n  undefined8 data2;\n  undefined8 data3;\n  undefined8 data4;\n  undefined8 data5;\n  undefined4 processedInput1;\n  undefined4 processedInput2;\n  undefined4 processedInput3;\n  undefined4 processedInput4;\n  undefined4 processedInput5;\n  undefined4 processedInput6;\n  undefined4 processedInput7;\n  undefined4 processedInput8;\n  \n  if (flag != '\\0') {\n    processedInput1 = input1;\n    processedInput2 = input2;\n    processedInput3 = input3;\n    processedInput4 = input4;\n    processedInput5 = input5;\n    processedInput6 = input6;\n    processedInput7 = input7;\n    processedInput8 = input8;\n  }\n  localArray1 = &stack0x00000008;\n  localVar1 = 8;\n  localArray2 = localArray3;\n  localVar2 = 0x30;\n  data1 = dataPtr2;\n  data2 = dataPtr3;\n  data3 = dataPtr4;\n  data4 = dataPtr5;\n  data5 = dataPtr6;\n  FUN_001063a0(dataPtr1,&localVar1);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_00104d5b",
                "FUN_0010249f",
                "FUN_001048e0"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_function_00103533",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "code": "\nulong compareAndExecuteFunction_00103533(undefined8 *input1,undefined8 *input2)\n\n{\n  ulong result;\n  \n  if ((ulong)input1[1] < (ulong)input2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)input2[1] < (ulong)input1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*input1,*input2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_function_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "initialize_system_0010651a"
            },
            "code": "\nvoid initializeSystem_0010651a(void)\n\n{\n  FUN_001054d0();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_00103a66",
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "initialize_system_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbolInfo",
                "param_2": "param",
                "iVar1": "isUndefined",
                "cVar2": "isUndefinedSymbol",
                "uVar3": "printWidth",
                "lVar4": "symbolOffset"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbolInfo,undefined8 param)\n\n{\n  int isUndefined;\n  char isUndefinedSymbol;\n  undefined8 printWidth;\n  long symbolOffset;\n  \n  isUndefinedSymbol = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  isUndefined = DAT_0010b7a8;\n  if (isUndefinedSymbol == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        printWidth = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        FUN_00106300(printWidth,isUndefined);\n        goto LAB_00103623;\n      }\n      printWidth = *(undefined8 *)*symbolInfo;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolInfo[2] == 0) {\n          symbolOffset = symbolInfo[1];\n        }\n        else {\n          symbolOffset = *(long *)(symbolInfo[2] + 0x38);\n        }\n        FUN_001054d0(symbolOffset);\n        if (DAT_0010b7ec != 0) {\n          FUN_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      printWidth = *(undefined8 *)*symbolInfo;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,printWidth);\n    if (DAT_0010b7ec != 0) {\n      FUN_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) != '-') {\n    FUN_00104740(&DAT_0010712c,symbolInfo,0,param);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolInfo + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolInfo + 0x20));\n  FUN_00104740(&DAT_0010712c,symbolInfo,0,param);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001035a2",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "dcgettext",
                "FUN_00106300"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbol",
                "param_2": "info",
                "cVar1": "isUndefined"
            },
            "code": "\nvoid printSymbolInfo_001064b0(long *symbol,undefined8 info)\n\n{\n  char isUndefined;\n  \n  FUN_00104740(&DAT_00107363,symbol,0,info);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (isUndefined != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  FUN_001054d0(*(undefined8 *)*symbol);\n  putchar(0x20);\n  if (symbol[2] == 0) {\n    if (symbol[1] != 0) {\n      FUN_0010651a();\n      return;\n    }\n  }\n  else if (*(long *)(symbol[2] + 0x38) != 0) {\n    FUN_001054d0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001054d0",
                "bfd_is_undefined_symclass",
                "putchar",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001047d0",
                "FUN_0010351b",
                "FUN_00103463",
                "FUN_00102f19",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00105110",
                "FUN_00102f7b",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_001055f0",
                "FUN_001043d0",
                "FUN_001054d0",
                "FUN_00102739",
                "FUN_001036a7",
                "FUN_00103b2b",
                "FUN_001062d0",
                "FUN_00103abf",
                "FUN_00103573",
                "FUN_00102670",
                "FUN_001036e0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "initialize_data_00103b49",
                "param_1": "dataPointer",
                "param_2": "param"
            },
            "code": "\nvoid initializeData_00103b49(undefined8 dataPointer,undefined8 param)\n\n{\n  FUN_00104740(&DAT_0010712d,dataPointer,0,param);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "initialize_data_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbol_info_00103abf",
                "param_1": "file_name",
                "param_2": "symbol",
                "pcVar1": "format_string",
                "dcgettext": "get_text_translation",
                "printf": "print_formatted_output"
            },
            "code": "\nvoid printSymbolInfo_00103abf(undefined8 file_name,undefined8 symbol)\n\n{\n  char *format_string;\n  \n  format_string = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    format_string = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string,file_name,symbol);\n  format_string = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    format_string = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  format_string = (char *)dcgettext(0,format_string,5);\n  printf(format_string);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "iVar1": "result",
                "in_RAX": "inputValue",
                "auVar2": "outputValue"
            },
            "code": "\nundefined  [16] calculateResult_00103bf6(void)\n\n{\n  int result;\n  undefined8 inputValue;\n  undefined outputValue [16];\n  \n  result = FUN_00104fa0();\n  outputValue._0_4_ = -result;\n  outputValue._4_4_ = 0;\n  outputValue._8_8_ = inputValue;\n  return outputValue;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "targetList",
                "pcVar2": "supportedTargetsMsg",
                "unaff_RBX": "outputStream",
                "plVar3": "currentTarget",
                "lVar1": "targetValue",
                "in_stack_00000008": "exitCode"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long targetValue;\n  char *supportedTargetsMsg;\n  long *targetList;\n  FILE *outputStream;\n  long *currentTarget;\n  int exitCode;\n  \n  supportedTargetsMsg = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputStream,supportedTargetsMsg);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetValue == 0) break;\n    fprintf(outputStream,\" %s\");\n  }\n  fputc(10,outputStream);\n  free(targetList);\n  if (exitCode == 0) {\n    supportedTargetsMsg = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputStream,supportedTargetsMsg,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "decompiled_function_00102c19",
                "pcVar1": "ptr1",
                "pcVar2": "ptr2",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "undefined8Var",
                "lVar7": "longVar",
                "puVar8": "ptr8",
                "lVar9": "longVar2",
                "puVar10": "ptr10",
                "unaff_RBX": "ptrRBX",
                "__ptr": "ptr",
                "unaff_RBP": "ptrRBP",
                "puVar11": "ptr11",
                "puVar12": "ptr12",
                "in_R8": "ptrR8",
                "puVar13": "ptr13",
                "in_R9": "ptrR9",
                "puVar14": "ptr14",
                "unaff_R12": "ptrR12",
                "puVar15": "ptr15",
                "unaff_R13": "ptrR13",
                "unaff_R14": "ptrR14",
                "unaff_R15": "ptrR15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "ulongRetaddr",
                "uVar18": "ulongVar",
                "in_stack_00000008": "inStack8",
                "in_stack_00000010": "inStack10",
                "in_stack_00000018": "inStack18",
                "in_stack_00000038": "inStack38",
                "in_stack_00000040": "inStack40",
                "in_stack_00000048": "inStack48"
            },
            "code": "\n\n\nvoid decompiledFunction_00102c19(void)\n\n{\n  char *ptr1;\n  code *ptr2;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 undefined8Var;\n  long longVar;\n  undefined8 *ptr8;\n  long longVar2;\n  undefined8 *ptr10;\n  undefined8 *ptrRBX;\n  undefined8 *ptr;\n  undefined8 *ptrRBP;\n  undefined8 *ptr11;\n  undefined8 *ptr12;\n  undefined8 *ptrR8;\n  undefined8 *ptr13;\n  undefined8 *ptrR9;\n  undefined8 *ptr14;\n  undefined8 *ptrR12;\n  undefined8 *ptr15;\n  undefined8 *ptrR13;\n  undefined8 *ptrR14;\n  undefined8 *ptrR15;\n  bool boolVar;\n  byte byteVar;\n  ulong ulongRetaddr;\n  ulong ulongVar;\n  undefined8 inStack8;\n  undefined8 *inStack10;\n  undefined8 *inStack18;\n  undefined8 inStack38;\n  void *inStack40;\n  undefined8 *inStack48;\n  \n  byteVar = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (ptrRBX != ptrR13) {\n      if (ptrR14 == (undefined8 *)0x8) {\n        *ptrRBX = *ptrR13;\n        FUN_001049c0();\n        return;\n      }\n      for (; ptrR14 != (undefined8 *)0x0; ptrR14 = (undefined8 *)((long)ptrR14 + -1)) {\n        *(undefined *)ptrRBX = *(undefined *)ptrR13;\n        ptrR13 = (undefined8 *)((long)ptrR13 + (ulong)byteVar * -2 + 1);\n        ptrRBX = (undefined8 *)((long)ptrRBX + (ulong)byteVar * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    ptrRBX = (undefined8 *)((long)ptrRBX + (long)ptrR14);\nLAB_001049c3:\n    do {\n      do {\n        ptrR13 = (undefined8 *)((long)ptrR13 + (long)ptrR14);\n        ptr15 = ptrR12;\n        ptr12 = ptrRBP;\n        if (ptrR12 <= ptrR13) goto LAB_00104b15;\nLAB_001049cf:\n        ptr8 = (undefined8 *)\n                 (**(code **)(ptrRBP[1] + 0x270))\n                           (ptrRBP,ulongRetaddr & 0xffffffff,ptrR13,ptrR15);\n        ptr11 = ptrRBP;\n        ptr12 = ptrR13;\n        ptr15 = ptrR15;\n        if (ptr8 == (undefined8 *)0x0) goto LAB_00102eb0;\n        ptr1 = (char *)ptr8[1];\n        if (((ptr1 == (char *)0x0) || (*ptr1 != '_')) || (ptr1[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(ptr8[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          ptrR13 = (undefined8 *)((long)ptrR13 + (long)ptrR14);\n          ptr15 = ptrR12;\n          ptr12 = ptrRBP;\n          if (ptrR12 <= ptrR13) {\nLAB_00104b15:\n            ptrRBX = (undefined8 *)((long)ptrRBX - (long)inStack18);\n            if (ptrR14 == (undefined8 *)0x8) {\n              longVar2 = ptr12[1];\n              ptr11 = (undefined8 *)((long)ptrRBX + 7);\n              if (-1 < (long)ptrRBX) {\n                ptr11 = ptrRBX;\n              }\n              ptrR8 = (undefined8 *)(ulong)DAT_0010b800;\n              ptr2 = *(code **)(longVar2 + 0x208);\n              ptr11 = (undefined8 *)((long)ptr11 >> 3);\n            }\n            else {\n              ptr11 = (undefined8 *)((long)ptrRBX / (long)ptrR14);\n              longVar2 = ptr12[1];\n              ptr2 = *(code **)(longVar2 + 0x208);\n            }\n            ptrRBP = ptr12;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = ptr12;\n              DAT_0010b770 = (undefined8 *)(*ptr2)(ptr12);\n              DAT_0010b768 = (undefined8 *)(**(code **)(ptr12[1] + 0x208))(ptr12);\n              ptrRBX = inStack48;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*ptr12);\n                ptr = ptrR15;\n                goto LAB_00102d8e;\n              }\n              ptrR12 = (undefined8 *)(ulong)inStack38._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulongVar = (ulong)(DAT_0010b80c != 0);\n                qsort(inStack48,(size_t)ptr11,(size_t)ptrR12,FUN_00102fd2);\n                ptr15 = (undefined8 *)xmalloc((long)ptr11 << 4);\n                ptr13 = DAT_0010b770;\n                ptrRBP = DAT_0010b768;\n                ptrR14 = (undefined8 *)((long)ptr11 * (long)ptrR12 + (long)ptrRBX);\n                ptr8 = DAT_0010b770;\n                ptrR9 = DAT_0010b768;\n                if (ptrR14 <= ptrRBX) goto LAB_00102ec2;\n                ptr11 = (undefined8 *)\n                          (**(code **)(ptr12[1] + 0x270))(ptr12,ulongVar & 0xffffffff,ptrRBX);\n                ptr = ptrRBX;\n                ptrR8 = ptrR12;\n                inStack10 = ptr15;\n                if (ptr11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(inStack48,(size_t)ptr11,(size_t)ptrR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar2 = ptr12[1];\n            }\n            ptr = (undefined8 *)0x0;\n            do {\n              ptr12 = inStack48;\n              ptr8 = (undefined8 *)(ulong)DAT_0010b7f8;\n              ptrR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                ptr15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(ptrRBP);\n                if (ptr15 == (undefined8 *)0x0) goto LAB_00102ed2;\n                ptrRBX = ptr + (long)ptr11 * 2;\n                ptr11 = ptr;\n                do {\n                  if (ptrRBX <= ptr11) {\nLAB_00104c75:\n                    if (inStack40 == (void *)0x0) {\n                      free(inStack48);\n                      free(ptr);\n                      return;\n                    }\n                    free(inStack40);\n                    free(inStack48);\n                    free(ptr);\n                    return;\n                  }\n                  ptr8 = ptr15;\n                  longVar2 = (**(code **)(ptrRBP[1] + 0x270))(ptrRBP,ptrR14,*ptr11);\n                  if (longVar2 == 0) {\n                    FUN_00106530(*ptrRBP,0);\nLAB_00102ed2:\n                    ptr12 = (undefined8 *)*ptrRBP;\n                    FUN_00106530();\n                    ptr13 = ptrR8;\n                    ptr14 = ptrR9;\n                    goto LAB_00102edb;\n                  }\n                  ptr12 = ptr11 + 1;\n                  ptr11 = ptr11 + 2;\n                  FUN_00105110(ptrRBP,longVar2,*ptr12,inStack8);\n                } while( true );\n              }\n              ptrR12 = (undefined8 *)(ulong)inStack38._4_4_;\n              ptrR15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(ptrRBP);\n              if (ptrR15 == (undefined8 *)0x0) {\n                FUN_00106530(*ptrRBP);\n                ptr12 = ptrR12;\n                if (DAT_0010b80c == 0) {\n                  longVar2 = (**(code **)(ptrRBP[1] + 0x350))(ptrRBP);\n                  ptr11 = inStack48;\n                  ptr15 = ptrR12;\n                  if (longVar2 < 1) {\n                    ptr8 = (undefined8 *)0x0;\n                    ptrRBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    ptrRBX = (undefined8 *)xmalloc();\n                    ptr8 = (undefined8 *)(**(code **)(ptrRBP[1] + 0x358))(ptrRBP,ptrRBX);\n                    ptr12 = ptr15;\n                    if ((long)ptr8 < 0) {\n                      ptr12 = (undefined8 *)*ptrRBP;\n                      ptr11 = (undefined8 *)FUN_00106530(ptr12,ptr15);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  ptr8 = ptrR12;\n                  ptrRBX = inStack48;\n                  ptr11 = (undefined8 *)0x0;\n                  ptr15 = (undefined8 *)0x0;\n                }\n                ptrR9 = &stack0x00000040;\n                ptrR8 = ptrRBX;\n                longVar2 = (**(code **)(ptrRBP[1] + 0x360))(ptrRBP,ptr15,ptr11,ptr8);\n                ptrR12 = ptr12;\n                if (0 < longVar2) {\n                  ptrR12 = (undefined8 *)((long)ptr12 + longVar2);\n                  inStack48 = (undefined8 *)xrealloc(inStack48);\n                  longVar = 0;\n                  do {\n                    inStack48[(long)((long)ptr12 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)inStack40);\n                    longVar = longVar + 1;\n                  } while (longVar2 != longVar);\n                  inStack48[(long)((long)ptr12 + longVar2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (ptrRBX != (undefined8 *)0x0)) {\n                  free(ptrRBX);\n                }\n                if ((*(byte *)((long)ptrRBP + 0x4a) & 0x10) != 0) {\n                  ptrRBX = (undefined8 *)*ptrRBP;\n                  DAT_0010b230 = '\\0';\n                  undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(undefined8Var);\n                }\n                ptrR14 = (undefined8 *)(ulong)inStack38._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                ptr11 = (undefined8 *)(ulong)boolVar;\n                ptr8 = inStack48;\n                inStack18 = inStack48;\n                ptrR15 = (undefined8 *)(**(code **)(ptrRBP[1] + 0x208))(ptrRBP);\n                if (ptrR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptr11 = (undefined8 *)((long)ptr11 * (long)ptrR12 + (long)ptr12);\n                ptrRBX = ptr12;\n                while( true ) {\n                  if (ptr11 <= ptrRBX) goto LAB_00104c75;\n                  ptr8 = ptrR15;\n                  longVar2 = (**(code **)(ptrRBP[1] + 0x270))(ptrRBP,ptrR14,ptrRBX);\n                  if (longVar2 == 0) break;\n                  ptrRBX = (undefined8 *)((long)ptrRBX + (long)ptrR12);\n                  FUN_00105110(ptrRBP,longVar2,0,inStack8);\n                }\n                FUN_00106530(*ptrRBP,0);\n              }\n              FUN_00106530(*ptrRBP);\n              ptr12 = ptrRBP;\n              ptr15 = ptrR15;\nLAB_00102eb0:\n              FUN_00106530(*ptr11);\nLAB_00102eb9:\n              FUN_00106530(*ptr12);\nLAB_00102ec2:\n              ptr11 = (undefined8 *)0x0;\n              ptr = ptrRBX;\n              ptrR8 = ptrR12;\n              ptr13 = ptr8;\n              ptrRBP = ptrR9;\n              inStack10 = ptr15;\nLAB_00104e35:\n              while (ptrR9 = ptr13, ptr < ptrR14) {\n                ptrRBX = (undefined8 *)((long)ptr + (long)ptrR8);\n                if (ptrRBX < ptrR14) {\n                  ptr8 = ptrRBP;\n                  ptr13 = ptrR8;\n                  ptr14 = ptrR9;\n                  ptr10 = (undefined8 *)(**(code **)(ptr12[1] + 0x270))();\n                  if (ptr10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    ptrR9 = ptr14;\n                    ptrR8 = ptr13;\n                    ptr12 = (undefined8 *)*ptr12;\n                    ptr10 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    ptr8 = (undefined8 *)ptr11[4];\n                    if ((*(uint *)(ptr11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = ptr11[2];\nLAB_00102ee7:\n                  if (ptr8 == (undefined8 *)ptr10[4]) {\n                    longVar2 = ptr10[2] - longVar2;\n                    ptr13 = ptrRBP;\n                    ptr14 = ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = ptr8[8] - longVar2;\n                  ptr13 = ptrRBP;\n                  ptr14 = ptr;\n                }\n                else {\n                  ptr8 = (undefined8 *)ptr11[4];\n                  if ((*(uint *)(ptr11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = ptr11[2];\n                    ptr10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  ptr10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptr13 = ptrRBP;\n                  ptr14 = ptr;\n                  if (*(int *)(ptr12[1] + 8) == 5) {\n                    longVar2 = ptr11[7];\n                  }\n                  else {\n                    longVar2 = ptr11[2];\n                    if ((*(byte *)((long)ptr8 + 0x25) & 0x10) == 0) {\n                      if (ptrRBX < ptrR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptr11 = ptr10;\n                ptr = ptrRBX;\n                ptrRBP = ptrR9;\n                if (longVar2 != 0) {\n                  *ptr15 = ptr14;\n                  ptr15[1] = longVar2;\n                  ptr15 = ptr15 + 2;\n                }\n              }\n              ptr11 = (undefined8 *)((long)ptr15 - (long)inStack10 >> 4);\n              qsort(inStack10,(size_t)ptr11,0x10,FUN_00103533);\n              longVar2 = ptr12[1];\n              ptrRBX = ptr;\n              ptrRBP = ptr12;\n              ptr = inStack10;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(ptr1 + (ptr1[2] == '_'),\"__gnu_lto_slim\");\n        inStack10 = ptr8;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            inStack10 = (undefined8 *)*ptrRBP;\n            DAT_0010b230 = '\\0';\n            undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(undefined8Var,inStack10);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(ptr8 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(ptr8 + 3) & 0x800082) == 0) && (ptr8[4] != 0x10c2a8)) &&\n           ((*(byte *)(ptr8[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((ptr8[4] != 0x10c2a8) && (ptr8[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(ptr8 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      ptrR9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(ptrRBP[1] + 0x230))(ptrRBP);\n        if (charVar != '\\0') {\n          decompiledFunction_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (ptr8[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(ptrRBP[1] + 0x230))(ptrRBP);\n    if (charVar != '\\0') {\n      decompiledFunction_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  ptr15 = (undefined8 *)((long)ptrR12 * (long)ptrR14);\n  ptrR12 = (undefined8 *)((long)inStack18 + (long)ptr15);\n  ptrRBX = inStack18;\n  ptr12 = ptrRBP;\n  if (inStack18 < ptrR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongRetaddr = (ulong)boolVar;\n  ptrR13 = inStack18;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "decompiled_function_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "lVar3": "errorFlag",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106530(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 additionalInfo;\n  \n  FUN_00106540();\n  errorFlag = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorFlag,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00106540",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "FUN_001043d0",
                "FUN_00103c00",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_00102f9f",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "print_error_message_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00106540",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_formatted_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "length",
                "puVar6": "newPtr",
                "pcVar7": "strPtr",
                "uVar8": "ulongVar",
                "uVar9": "undefinedVar",
                "puVar10": "undefinedPtr",
                "puVar11": "newPtr2",
                "unaff_RBP": "rpbVal",
                "puVar12": "newPtr3",
                "unaff_R12": "r12Val",
                "unaff_R13": "r13Val",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "unaff_R14": "r14Val",
                "unaff_R15": "r15Val",
                "bVar15": "byteVal",
                "__s": "strPtr2",
                "in_stack_00000038": "stackVal"
            },
            "code": "\n\n\nvoid printFormattedString_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t length;\n  undefined8 *newPtr;\n  char *strPtr;\n  ulong ulongVar;\n  undefined8 undefinedVar;\n  undefined *undefinedPtr;\n  undefined8 *newPtr2;\n  long rpbVal;\n  undefined8 *newPtr3;\n  undefined *r12Val;\n  undefined8 *r13Val;\n  long longVar;\n  uint uintVar;\n  char *r14Val;\n  long r15Val;\n  byte byteVal;\n  char *strPtr2;\n  undefined8 stackVal;\n  \n  byteVal = 0;\n  newPtr3 = r13Val;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)newPtr3;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (newPtr3 = (undefined8 *)((long)newPtr3 + 1), byte1 < 0xc0));\n    length = strlen((char *)r13Val);\n    newPtr3 = DAT_0010b790;\n    newPtr2 = r13Val;\n    if (_DAT_0010b798 < length * 9) {\n      free(DAT_0010b790);\n      length = strlen((char *)r13Val);\n      _DAT_0010b798 = length * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      newPtr3 = DAT_0010b790;\n    }\n    while( true ) {\n      r13Val = DAT_0010b790;\n      byte1 = *(byte *)newPtr2;\n      ptr = (undefined8 *)((long)newPtr2 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)newPtr3 = byte1;\n          newPtr3 = (undefined8 *)((long)newPtr3 + 1);\n          newPtr2 = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)newPtr2 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            newPtr = newPtr3;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)newPtr2 + 1);\n                }\n                else {\n                  *(undefined *)(newPtr3 + 1) = 0;\n                  *newPtr3 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)newPtr2 + 1);\n                  newPtr = newPtr3 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)newPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)newPtr2 >> 2 & 7),\n                        (ulong)((*(byte *)newPtr2 & 3) << 6 | byte2 & 0x3f));\n                newPtr = (undefined8 *)((long)newPtr + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)newPtr2 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)newPtr = *(undefined *)newPtr2;\n                    newPtr2 = (undefined8 *)((long)newPtr2 + (ulong)byteVal * -2 + 1);\n                    newPtr = (undefined8 *)((long)newPtr + (ulong)byteVal * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  undefinedVar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    undefinedVar = 0x3c;\n                  }\n                  sprintf((char *)newPtr3,\"%c\",undefinedVar);\n                  *(undefined *)((long)newPtr3 + 3) = 0;\n                  newPtr = (undefined8 *)(longVar + (long)newPtr2);\n                  *(undefined2 *)((long)newPtr3 + 1) = 0x7830;\n                  strPtr = (char *)((long)newPtr3 + 3);\n                  do {\n                    strPtr2 = strPtr;\n                    byte1 = *(byte *)newPtr2;\n                    newPtr2 = (undefined8 *)((long)newPtr2 + 1);\n                    sprintf(strPtr2,\"%02x\",(ulong)byte1);\n                    strPtr = strPtr2 + 2;\n                  } while (newPtr2 != newPtr);\n                  undefinedVar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    undefinedVar = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(strPtr2 + 2,\"%c\",undefinedVar);\n                  newPtr = (undefined8 *)(strPtr2 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)newPtr2 + 2);\n                  }\n                  else {\n                    *(undefined *)(newPtr3 + 1) = 0;\n                    *newPtr3 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)newPtr2 + 2);\n                    newPtr = newPtr3 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)newPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)newPtr2 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)newPtr2 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)newPtr2 + 1) & 3) << 6 | byte2 & 0x3f));\n                  newPtr = (undefined8 *)((long)newPtr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)newPtr = 0x6d305b1b;\n                    newPtr = (undefined8 *)((long)newPtr + 4);\n                    *(undefined *)newPtr = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)newPtr2 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(newPtr3 + 1) = 0;\n                    *newPtr3 = 0x6d37343b31335b1b;\n                    newPtr = newPtr3 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)newPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)newPtr2 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)newPtr2 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)newPtr2 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)newPtr2 + 2) >> 2 & 0xfU));\n                  newPtr = (undefined8 *)((long)newPtr + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)newPtr - (int)newPtr3);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)newPtr3 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          newPtr3 = (undefined8 *)((long)newPtr3 + ulongVar);\n          newPtr2 = (undefined8 *)((long)ptr + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)newPtr3 = 0x5e;\n        *(byte *)((long)newPtr3 + 1) = byte1 + 0x40;\n        newPtr3 = (undefined8 *)((long)newPtr3 + 2);\n        newPtr2 = ptr;\n      }\n    }\n    *(undefined *)newPtr3 = 0;\n  }\nLAB_0010485e:\n  newPtr3 = (undefined8 *)0x0;\n  if ((((rpbVal != 0) && (*(long *)(rpbVal + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((strPtr = (char *)(**(code **)(*(long *)(r15Val + 8) + 0x220))\n                                  (r15Val,*(long *)(rpbVal + 0x10),0,\n                                   (long)&stack0x00000038 + 7), strPtr != (char *)0x0 &&\n      (*strPtr != '\\0')))) {\n    undefinedPtr = &DAT_001071e0;\n    if ((stackVal._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(rpbVal + 0x10) + 0x20) != 0x10c2a8)) {\n      undefinedPtr = &DAT_001071df;\n    }\n    newPtr3 = (undefined8 *)reconcat(0,r13Val,undefinedPtr,strPtr,0);\n    r13Val = newPtr3;\n  }\n  printf(r14Val,r13Val);\n  if (r12Val != (undefined *)0x0) {\n    *r12Val = 0x40;\n  }\n  free(newPtr3);\n  return;\n}\n\n",
            "called": [
                "FUN_001047d0",
                "isatty",
                "xmalloc",
                "free",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_formatted_string_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_result_00103bec",
                "in_RAX": "input",
                "iVar1": "result",
                "auVar2": "output"
            },
            "code": "\nundefined  [16] calculateResult_00103bec(void)\n\n{\n  int result;\n  undefined8 input;\n  undefined output [16];\n  \n  result = FUN_00105050();\n  output._0_4_ = -result;\n  output._4_4_ = 0;\n  output._8_8_ = input;\n  return output;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *message,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010b820);\n  vfprintf(standardError,message,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106400",
                "FUN_00106300"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "decode_and_print_string_00102739",
                "puVar1": "pointer1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "integer1",
                "sVar5": "size",
                "pcVar6": "pointer2",
                "puVar7": "pointer3",
                "pcVar8": "pointer4",
                "__ptr": "pointer5",
                "uVar9": "ulong1",
                "uVar10": "ulong2",
                "puVar11": "pointer6",
                "unaff_RBP": "long1",
                "puVar12": "pointer7",
                "unaff_R13": "pointer8",
                "lVar13": "long2",
                "uVar14": "uint1",
                "unaff_R14": "string1",
                "unaff_R15": "long3",
                "bVar15": "byte3",
                "__s": "string2",
                "in_stack_00000038": "inStackVariable1"
            },
            "code": "\n\n\nvoid decodeAndPrintString_00102739(void)\n\n{\n  undefined8 *pointer1;\n  byte byte1;\n  byte byte2;\n  int integer1;\n  size_t size;\n  char *pointer2;\n  undefined8 *pointer3;\n  char *pointer4;\n  undefined8 *pointer5;\n  ulong ulong1;\n  undefined8 ulong2;\n  undefined *pointer6;\n  long long1;\n  undefined8 *pointer7;\n  undefined8 *pointer8;\n  long long2;\n  uint uint1;\n  char *string1;\n  long long3;\n  byte byte3;\n  char *string2;\n  undefined8 inStackVariable1;\n  \n  byte3 = 0;\n  pointer7 = pointer8;\n  if (*(int *)(*(long *)(long3 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      pointer2 = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    pointer2 = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      pointer5 = (undefined8 *)0x0;\n    }\n    else {\n      pointer5 = (undefined8 *)0x0;\n      if (pointer8 != (undefined8 *)0x0) goto LAB_0010269d;\n      pointer5 = (undefined8 *)0x0;\n      pointer8 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  pointer2 = strchr((char *)pointer8,0x40);\n  if (pointer2 == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (long1 == 0) {\n        pointer5 = (undefined8 *)0x0;\n        printf(string1);\n      }\n      else {\n        if (*(long *)(long1 + 0x10) != 0) {\n          FUN_001047d0();\n          return;\n        }\n        pointer5 = (undefined8 *)0x0;\n        printf(string1);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    pointer7 = pointer8;\n    pointer5 = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)pointer7;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (pointer7 = (undefined8 *)((long)pointer7 + 1), byte1 < 0xc0));\n    size = strlen((char *)pointer8);\n    pointer7 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)pointer8);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      pointer7 = DAT_0010b790;\n    }\n    while( true ) {\n      pointer3 = DAT_0010b790;\n      byte1 = *(byte *)pointer8;\n      pointer1 = (undefined8 *)((long)pointer8 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)pointer7 = byte1;\n          pointer7 = (undefined8 *)((long)pointer7 + 1);\n          pointer8 = pointer1;\n        }\n        else {\n          byte2 = *(byte *)((long)pointer8 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            pointer3 = pointer7;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uint1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                long2 = 2;\n                goto LAB_00102917;\n              case 4:\n                integer1 = isatty(1);\n                if (integer1 == 0) {\n                  byte2 = *(byte *)((long)pointer8 + 1);\n                }\n                else {\n                  *(undefined *)(pointer7 + 1) = 0;\n                  *pointer7 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)pointer8 + 1);\n                  pointer3 = pointer7 + 1;\n                }\n              case 2:\n                uint1 = 2;\n                sprintf((char *)pointer3,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)pointer8 >> 2 & 7)\n                        ,(ulong)((*(byte *)pointer8 & 3) << 6 | byte2 & 0x3f));\n                pointer3 = (undefined8 *)((long)pointer3 + 6);\n                goto LAB_00102a27;\n              default:\n                uint1 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)pointer8 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 3;\nLAB_00102a62:\n                  for (ulong1 = (ulong)uint1; ulong1 != 0; ulong1 = ulong1 - 1) {\n                    *(undefined *)pointer3 = *(undefined *)pointer8;\n                    pointer8 = (undefined8 *)((long)pointer8 + (ulong)byte3 * -2 + 1);\n                    pointer3 = (undefined8 *)((long)pointer3 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  long2 = 3;\nLAB_00102917:\n                  ulong2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3c;\n                  }\n                  sprintf((char *)pointer7,\"%c\",ulong2);\n                  *(undefined *)((long)pointer7 + 3) = 0;\n                  pointer3 = (undefined8 *)(long2 + (long)pointer8);\n                  *(undefined2 *)((long)pointer7 + 1) = 0x7830;\n                  pointer4 = (char *)((long)pointer7 + 3);\n                  do {\n                    string2 = pointer4;\n                    byte1 = *(byte *)pointer8;\n                    pointer8 = (undefined8 *)((long)pointer8 + 1);\n                    sprintf(string2,\"%02x\",(ulong)byte1);\n                    pointer4 = string2 + 2;\n                  } while (pointer8 != pointer3);\n                  ulong2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulong2 = 0x3e;\n                  }\n                  uint1 = (uint)long2;\n                  sprintf(string2 + 2,\"%c\",ulong2);\n                  pointer3 = (undefined8 *)(string2 + 3);\n                  break;\n                case 4:\n                  integer1 = isatty(1);\n                  if (integer1 == 0) {\n                    byte2 = *(byte *)((long)pointer8 + 2);\n                  }\n                  else {\n                    *(undefined *)(pointer7 + 1) = 0;\n                    *pointer7 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)pointer8 + 2);\n                    pointer3 = pointer7 + 1;\n                  }\n                case 2:\n                  uint1 = 3;\n                  sprintf((char *)pointer3,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)pointer8 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)pointer8 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)pointer8 + 1) & 3) << 6 | byte2 & 0x3f));\n                  pointer3 = (undefined8 *)((long)pointer3 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (integer1 = isatty(1), integer1 != 0)) {\n                    *(undefined4 *)pointer3 = 0x6d305b1b;\n                    pointer3 = (undefined8 *)((long)pointer3 + 4);\n                    *(undefined *)pointer3 = 0;\n                  }\n                  break;\n                default:\n                  uint1 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)pointer8 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uint1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  long2 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  integer1 = isatty(1);\n                  if (integer1 != 0) {\n                    *(undefined *)(pointer7 + 1) = 0;\n                    *pointer7 = 0x6d37343b31335b1b;\n                    pointer3 = pointer7 + 1;\n                  }\n                case 2:\n                  uint1 = 4;\n                  integer1 = sprintf((char *)pointer3,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)pointer8 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer8 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)pointer8 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)pointer8 + 2) >> 2 & 0xfU));\n                  pointer3 = (undefined8 *)((long)pointer3 + (long)integer1);\n                  goto LAB_00102a27;\n                default:\n                  uint1 = 4;\n                }\n              }\n            }\n            ulong1 = (ulong)(uint)((int)pointer3 - (int)pointer7);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)pointer7 = byte1;\n            uint1 = 1;\n            ulong1 = 1;\n          }\n          pointer7 = (undefined8 *)((long)pointer7 + ulong1);\n          pointer8 = (undefined8 *)((long)pointer1 + (ulong)(uint1 - 1));\n        }\n      }\n      else {\n        *(undefined *)pointer7 = 0x5e;\n        *(byte *)((long)pointer7 + 1) = byte1 + 0x40;\n        pointer7 = (undefined8 *)((long)pointer7 + 2);\n        pointer8 = pointer1;\n      }\n    }\n    *(undefined *)pointer7 = 0;\n    pointer8 = pointer3;\n  }\n  else {\n    *pointer2 = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      pointer5 = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)pointer8 == '\\0') ||\n       (pointer7 = (undefined8 *)bfd_demangle(), pointer7 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      pointer5 = (undefined8 *)0x0;\n    }\n    else {\n      pointer8 = pointer7;\n      pointer5 = pointer7;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((long1 != 0) && (*(long *)(long1 + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((pointer4 = (char *)(**(code **)(*(long *)(long3 + 8) + 0x220))\n                                  (long3,*(long *)(long1 + 0x10),0,\n                                   (long)&stack0x00000038 + 7), pointer4 != (char *)0x0 &&\n      (*pointer4 != '\\0')))) {\n    pointer6 = &DAT_001071e0;\n    if ((inStackVariable1._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(long1 + 0x10) + 0x20) != 0x10c2a8)) {\n      pointer6 = &DAT_001071df;\n    }\n    pointer5 = (undefined8 *)reconcat(pointer5,pointer8,pointer6,pointer4,0);\n    pointer8 = pointer5;\n  }\n  printf(string1,pointer8);\n  if (pointer2 != (char *)0x0) {\n    *pointer2 = '@';\n  }\nLAB_001047ba:\n  free(pointer5);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_001047d0",
                "FUN_0010268b",
                "bfd_demangle",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "decode_and_print_string_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "check_file_compatibility_00105050",
                "param_1": "file1",
                "param_2": "file2",
                "__s": "file1_str",
                "__s_00": "file2_str",
                "uVar2": "file2_size",
                "sVar6": "file2_str_length",
                "uVar13": "file1_offset",
                "uVar14": "file1_end",
                "unaff_R13": "file2_offset",
                "bVar16": "is_equal",
                "cVar1": "last_char",
                "pcVar7": "ptr_gnu_compiled",
                "pcVar8": "ptr_gcc2_compiled"
            },
            "code": "\nulong checkFileCompatibility_00105050(undefined8 file1,undefined8 file2)\n\n{\n  char last_char;\n  ulong file2_size;\n  char *file1_str;\n  char *file2_str;\n  long lVar3;\n  uint uVar4;\n  size_t sVar5;\n  size_t file2_str_length;\n  char *ptr_gnu_compiled;\n  char *ptr_gcc2_compiled;\n  long lVar9;\n  long lVar10;\n  ulong uVar11;\n  ulong uVar12;\n  ulong file1_offset;\n  ulong file1_end;\n  undefined8 uVar15;\n  long file2_offset;\n  bool is_equal;\n  \n  lVar9 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file1,DAT_0010b770);\n  uVar11 = (ulong)DAT_0010b778;\n  lVar10 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,uVar11,file2,DAT_0010b768);\n  if ((lVar9 != 0) && (lVar10 != 0)) {\n    lVar3 = *(long *)(lVar10 + 0x20);\n    if (*(long *)(lVar9 + 0x20) == 0x10c2a8) {\n      uVar11 = 0xffffffff;\n      if (lVar3 == 0x10c2a8) {\nLAB_001050fa:\n        uVar11 = FUN_00104fa0(file1,file2);\n        return uVar11;\n      }\n    }\n    else if (lVar3 == 0x10c2a8) {\n      uVar11 = 1;\n    }\n    else {\n      file1_offset = *(long *)(lVar9 + 0x10) + *(long *)(*(long *)(lVar9 + 0x20) + 0x30);\n      uVar11 = *(long *)(lVar10 + 0x10) + *(long *)(lVar3 + 0x30);\n      if (file1_offset == uVar11) goto LAB_001050fa;\n      uVar11 = (ulong)(-(uint)(file1_offset < uVar11) | 1);\n    }\n    return uVar11;\n  }\n  uVar15 = *DAT_0010b780;\n  FUN_00106530();\n  lVar9 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,uVar15,DAT_0010b770);\n  lVar10 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,uVar11,DAT_0010b768);\n  if ((lVar9 == 0) || (file2_offset = lVar10, lVar10 == 0)) {\n    lVar10 = FUN_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(lVar9 + 0x20) == 0x10c2a8) || (*(long *)(lVar10 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  file1_offset = *(ulong *)(*(long *)(lVar9 + 0x20) + 0x30);\n  file2_size = *(ulong *)(*(long *)(lVar10 + 0x20) + 0x30);\n  file1_end = *(long *)(lVar9 + 0x10) + file1_offset;\n  uVar12 = *(long *)(file2_offset + 0x10) + file2_size;\n  is_equal = file1_end < uVar12;\n  if ((file1_end != uVar12) || (is_equal = file1_offset < file2_size, file1_offset != file2_size)) {\n    return (ulong)(-(uint)is_equal | 1);\n  }\n  file1_str = *(char **)(lVar9 + 8);\n  file2_str = *(char **)(file2_offset + 8);\n  sVar5 = strlen(file1_str);\n  file2_str_length = strlen(file2_str);\n  ptr_gnu_compiled = strstr(file1_str,\"gnu_compiled\");\n  if (ptr_gnu_compiled == (char *)0x0) {\n    ptr_gcc2_compiled = strstr(file1_str,\"gcc2_compiled\");\n    ptr_gnu_compiled = strstr(file2_str,\"gnu_compiled\");\n    if ((ptr_gnu_compiled == (char *)0x0) && (ptr_gnu_compiled = strstr(file2_str,\"gcc2_compiled\"), ptr_gnu_compiled == (char *)0x0))\n    goto joined_r0x00103157;\n    if (ptr_gcc2_compiled == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    ptr_gnu_compiled = strstr(file2_str,\"gnu_compiled\");\n    if (ptr_gnu_compiled == (char *)0x0) {\n      ptr_gcc2_compiled = strstr(file2_str,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (ptr_gcc2_compiled != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(file2_offset + 0x18) & 0x4000;\n  if ((*(byte *)(lVar9 + 0x19) & 0x40) == 0) {\n    if ((sVar5 < 3) || (file1_str[sVar5 - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((file2_str_length < 3) || (file2_str[file2_str_length - 2] != '.')) goto LAB_00103202;\n      is_equal = false;\n      goto LAB_001031e7;\n    }\n    last_char = file1_str[sVar5 - 1];\n    is_equal = last_char == 'o' || last_char == 'a';\n    if (uVar4 == 0) {\n      if ((file2_str_length < 3) || (file2_str[file2_str_length - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (file2_str_length < 3) {\n      return 0xffffffff;\n    }\n    if (file2_str[file2_str_length - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_equal = true;\nLAB_001031e7:\n    if ((file2_str[file2_str_length - 1] != 'o') && (file2_str[file2_str_length - 1] != 'a')) {\n      if (is_equal) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_equal) {\n    return 1;\n  }\nLAB_00103202:\n  uVar11 = FUN_00104fa0(uVar15,uVar11);\n  return uVar11;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "check_file_compatibility_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_lto_object_001049c0",
                "pcVar1": "str",
                "pcVar2": "func",
                "cVar3": "byte",
                "iVar4": "int",
                "uVar5": "uint",
                "uVar6": "result",
                "lVar7": "count",
                "puVar8": "ptr",
                "lVar9": "value",
                "puVar10": "ptr2",
                "unaff_RBX": "ptrRBX",
                "unaff_RBP": "ptrRBP",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "puVar13": "ptr5",
                "in_R8": "ptrR8",
                "puVar14": "ptr6",
                "in_R9": "ptrR9",
                "puVar15": "ptr7",
                "unaff_R12": "ptrR12",
                "unaff_R13": "ptrR13",
                "unaff_R14": "ptrR14",
                "unaff_R15": "ptrR15",
                "bVar16": "bool",
                "bVar17": "byte",
                "unaff_retaddr": "retAddr",
                "uVar18": "value2",
                "in_stack_00000008": "arg",
                "in_stack_00000010": "ptr8",
                "in_stack_00000018": "ptr9",
                "in_stack_00000038": "val1",
                "in_stack_00000040": "ptr10",
                "in_stack_00000048": "ptr11"
            },
            "code": "\nvoid processLTOObject_001049c0(void)\n\n{\n  char *str;\n  code *func;\n  char byte;\n  int int;\n  uint uint;\n  undefined8 result;\n  long count;\n  undefined8 *ptr;\n  long value;\n  undefined8 *ptr2;\n  undefined8 *ptrRBX;\n  undefined8 *__ptr;\n  undefined8 *ptrRBP;\n  undefined8 *ptr3;\n  undefined8 *ptr4;\n  undefined8 *ptrR8;\n  undefined8 *ptr5;\n  undefined8 *ptrR9;\n  undefined8 *ptr6;\n  undefined8 *ptr7;\n  undefined8 *ptrR12;\n  undefined8 *ptrR13;\n  undefined8 *ptrR14;\n  undefined8 *ptrR15;\n  bool bool;\n  byte byte;\n  ulong retAddr;\n  ulong value2;\n  undefined8 arg;\n  undefined8 *ptr8;\n  undefined8 *ptr9;\n  undefined8 val1;\n  void *ptr10;\n  undefined8 *ptr11;\n  \n  byte = 0;\n  do {\n    ptrRBX = (undefined8 *)((long)ptrRBX + (long)ptrR14);\nLAB_001049c3:\n    do {\n      do {\n        ptrR13 = (undefined8 *)((long)ptrR13 + (long)ptrR14);\n        ptr7 = ptrR12;\n        ptr4 = ptrRBP;\n        if (ptrR12 <= ptrR13) goto LAB_00104b15;\nLAB_001049cf:\n        ptr = (undefined8 *)\n                 (**(code **)(ptrRBP[1] + 0x270))\n                           (ptrRBP,retAddr & 0xffffffff,ptrR13,ptrR15);\n        ptr3 = ptrRBP;\n        ptr4 = ptrR13;\n        ptr7 = ptrR15;\n        if (ptr == (undefined8 *)0x0) goto LAB_00102eb0;\n        str = (char *)ptr[1];\n        if (((str == (char *)0x0) || (*str != '_')) || (str[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uint = (uint)(ptr[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uint != 0) goto LAB_00104a2d;\n          ptrR13 = (undefined8 *)((long)ptrR13 + (long)ptrR14);\n          ptr7 = ptrR12;\n          ptr4 = ptrRBP;\n          if (ptrR12 <= ptrR13) {\nLAB_00104b15:\n            ptrRBX = (undefined8 *)((long)ptrRBX - (long)ptr9);\n            if (ptrR14 == (undefined8 *)0x8) {\n              value = ptr4[1];\n              ptr3 = (undefined8 *)((long)ptrRBX + 7);\n              if (-1 < (long)ptrRBX) {\n                ptr3 = ptrRBX;\n              }\n              ptrR8 = (undefined8 *)(ulong)DAT_0010b800;\n              func = *(code **)(value + 0x208);\n              ptr3 = (undefined8 *)((long)ptr3 >> 3);\n            }\n            else {\n              ptr3 = (undefined8 *)((long)ptrRBX / (long)ptrR14);\n              value = ptr4[1];\n              func = *(code **)(value + 0x208);\n            }\n            ptrRBP = ptr4;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = ptr4;\n              DAT_0010b770 = (undefined8 *)(*func)(ptr4);\n              DAT_0010b768 = (undefined8 *)(**(code **)(ptr4[1] + 0x208))(ptr4);\n              ptrRBX = ptr11;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                FUN_00106530(*ptr4);\n                __ptr = ptrR15;\n                goto LAB_00102d8e;\n              }\n              ptrR12 = (undefined8 *)(ulong)val1._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                value2 = (ulong)(DAT_0010b80c != 0);\n                qsort(ptr11,(size_t)ptr3,(size_t)ptrR12,FUN_00102fd2);\n                ptr7 = (undefined8 *)xmalloc((long)ptr3 << 4);\n                ptr5 = DAT_0010b770;\n                ptrRBP = DAT_0010b768;\n                ptrR14 = (undefined8 *)((long)ptr3 * (long)ptrR12 + (long)ptrRBX);\n                ptr = DAT_0010b770;\n                ptrR9 = DAT_0010b768;\n                if (ptrR14 <= ptrRBX) goto LAB_00102ec2;\n                ptr3 = (undefined8 *)\n                          (**(code **)(ptr4[1] + 0x270))(ptr4,value2 & 0xffffffff,ptrRBX);\n                __ptr = ptrRBX;\n                ptrR8 = ptrR12;\n                ptr8 = ptr7;\n                if (ptr3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(ptr11,(size_t)ptr3,(size_t)ptrR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              value = ptr4[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              ptr4 = ptr11;\n              ptr = (undefined8 *)(ulong)DAT_0010b7f8;\n              ptrR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                ptr7 = (undefined8 *)(**(code **)(value + 0x208))(ptrRBP);\n                if (ptr7 == (undefined8 *)0x0) goto LAB_00102ed2;\n                ptrRBX = __ptr + (long)ptr3 * 2;\n                ptr3 = __ptr;\n                do {\n                  if (ptrRBX <= ptr3) {\nLAB_00104c75:\n                    if (ptr10 == (void *)0x0) {\n                      free(ptr11);\n                      free(__ptr);\n                      return;\n                    }\n                    free(ptr10);\n                    free(ptr11);\n                    free(__ptr);\n                    return;\n                  }\n                  ptr = ptr7;\n                  value = (**(code **)(ptrRBP[1] + 0x270))(ptrRBP,ptrR14,*ptr3);\n                  if (value == 0) {\n                    FUN_00106530(*ptrRBP,0);\nLAB_00102ed2:\n                    ptr4 = (undefined8 *)*ptrRBP;\n                    FUN_00106530();\n                    ptr5 = ptrR8;\n                    ptr6 = ptrR9;\n                    goto LAB_00102edb;\n                  }\n                  ptr4 = ptr3 + 1;\n                  ptr3 = ptr3 + 2;\n                  FUN_00105110(ptrRBP,value,*ptr4,arg);\n                } while( true );\n              }\n              ptrR12 = (undefined8 *)(ulong)val1._4_4_;\n              ptrR15 = (undefined8 *)(**(code **)(value + 0x208))(ptrRBP);\n              if (ptrR15 == (undefined8 *)0x0) {\n                FUN_00106530(*ptrRBP);\n                ptr4 = ptrR12;\n                if (DAT_0010b80c == 0) {\n                  value = (**(code **)(ptrRBP[1] + 0x350))(ptrRBP);\n                  ptr3 = ptr11;\n                  ptr7 = ptrR12;\n                  if (value < 1) {\n                    ptr = (undefined8 *)0x0;\n                    ptrRBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    ptrRBX = (undefined8 *)xmalloc();\n                    ptr = (undefined8 *)(**(code **)(ptrRBP[1] + 0x358))(ptrRBP,ptrRBX);\n                    ptr4 = ptr7;\n                    if ((long)ptr < 0) {\n                      ptr4 = (undefined8 *)*ptrRBP;\n                      ptr3 = (undefined8 *)FUN_00106530(ptr4,ptr7);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  ptr = ptrR12;\n                  ptrRBX = ptr11;\n                  ptr3 = (undefined8 *)0x0;\n                  ptr7 = (undefined8 *)0x0;\n                }\n                ptrR9 = &stack0x00000040;\n                ptrR8 = ptrRBX;\n                value = (**(code **)(ptrRBP[1] + 0x360))(ptrRBP,ptr7,ptr3,ptr);\n                ptrR12 = ptr4;\n                if (0 < value) {\n                  ptrR12 = (undefined8 *)((long)ptr4 + value);\n                  ptr11 = (undefined8 *)xrealloc(ptr11);\n                  count = 0;\n                  do {\n                    ptr11[(long)((long)ptr4 + count)] =\n                         (void *)(count * 0x30 + (long)ptr10);\n                    count = count + 1;\n                  } while (value != count);\n                  ptr11[(long)((long)ptr4 + value)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (ptrRBX != (undefined8 *)0x0)) {\n                  free(ptrRBX);\n                }\n                if ((*(byte *)((long)ptrRBP + 0x4a) & 0x10) != 0) {\n                  ptrRBX = (undefined8 *)*ptrRBP;\n                  DAT_0010b230 = '\\0';\n                  result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  FUN_00106400(result);\n                }\n                ptrR14 = (undefined8 *)(ulong)val1._4_4_;\n                bool = DAT_0010b80c != 0;\n                ptr3 = (undefined8 *)(ulong)bool;\n                ptr = ptr11;\n                ptr9 = ptr11;\n                ptrR15 = (undefined8 *)(**(code **)(ptrRBP[1] + 0x208))(ptrRBP);\n                if (ptrR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptr3 = (undefined8 *)((long)ptr3 * (long)ptrR12 + (long)ptr4);\n                ptrRBX = ptr4;\n                while( true ) {\n                  if (ptr3 <= ptrRBX) goto LAB_00104c75;\n                  ptr = ptrR15;\n                  value = (**(code **)(ptrRBP[1] + 0x270))(ptrRBP,ptrR14,ptrRBX);\n                  if (value == 0) break;\n                  ptrRBX = (undefined8 *)((long)ptrRBX + (long)ptrR12);\n                  FUN_00105110(ptrRBP,value,0,arg);\n                }\n                FUN_00106530(*ptrRBP,0);\n              }\n              FUN_00106530(*ptrRBP);\n              ptr4 = ptrRBP;\n              ptr7 = ptrR15;\nLAB_00102eb0:\n              FUN_00106530(*ptr3);\nLAB_00102eb9:\n              FUN_00106530(*ptr4);\nLAB_00102ec2:\n              ptr3 = (undefined8 *)0x0;\n              __ptr = ptrRBX;\n              ptrR8 = ptrR12;\n              ptr5 = ptr;\n              ptrRBP = ptrR9;\n              ptr8 = ptr7;\nLAB_00104e35:\n              while (ptrR9 = ptr5, __ptr < ptrR14) {\n                ptrRBX = (undefined8 *)((long)__ptr + (long)ptrR8);\n                if (ptrRBX < ptrR14) {\n                  ptr = ptrRBP;\n                  ptr5 = ptrR8;\n                  ptr6 = ptrR9;\n                  ptr2 = (undefined8 *)(**(code **)(ptr4[1] + 0x270))();\n                  if (ptr2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    ptrR9 = ptr6;\n                    ptrR8 = ptr5;\n                    ptr4 = (undefined8 *)*ptr4;\n                    ptr2 = (undefined8 *)FUN_00106530();\n                  }\n                  else {\n                    ptr = (undefined8 *)ptr3[4];\n                    if ((*(uint *)(ptr3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  value = ptr3[2];\nLAB_00102ee7:\n                  if (ptr == (undefined8 *)ptr2[4]) {\n                    value = ptr2[2] - value;\n                    ptr5 = ptrRBP;\n                    ptr6 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  value = ptr[8] - value;\n                  ptr5 = ptrRBP;\n                  ptr6 = __ptr;\n                }\n                else {\n                  ptr = (undefined8 *)ptr3[4];\n                  if ((*(uint *)(ptr3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    value = ptr3[2];\n                    ptr2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  ptr2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptr5 = ptrRBP;\n                  ptr6 = __ptr;\n                  if (*(int *)(ptr4[1] + 8) == 5) {\n                    value = ptr3[7];\n                  }\n                  else {\n                    value = ptr3[2];\n                    if ((*(byte *)((long)ptr + 0x25) & 0x10) == 0) {\n                      if (ptrRBX < ptrR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptr3 = ptr2;\n                __ptr = ptrRBX;\n                ptrRBP = ptrR9;\n                if (value != 0) {\n                  *ptr7 = ptr6;\n                  ptr7[1] = value;\n                  ptr7 = ptr7 + 2;\n                }\n              }\n              ptr3 = (undefined8 *)((long)ptr7 - (long)ptr8 >> 4);\n              qsort(ptr8,(size_t)ptr3,0x10,FUN_00103533);\n              value = ptr4[1];\n              ptrRBX = __ptr;\n              ptrRBP = ptr4;\n              __ptr = ptr8;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        int = strcmp(str + (str[2] == '_'),\"__gnu_lto_slim\");\n        ptr8 = ptr;\n        if (int == 0) {\n          if (DAT_0010b230 != '\\0') {\n            ptr8 = (undefined8 *)*ptrRBP;\n            DAT_0010b230 = '\\0';\n            result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            FUN_00106400(result,ptr8);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uint = (*(uint *)(ptr + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(ptr + 3) & 0x800082) == 0) && (ptr[4] != 0x10c2a8)) &&\n           ((*(byte *)(ptr[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nFUN_00104d5b:\n          if ((ptr[4] != 0x10c2a8) && (ptr[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(ptr + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto FUN_00104d5b;\nLAB_00104a53:\n      ptrR9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        byte = (**(code **)(ptrRBP[1] + 0x230))(ptrRBP);\n        if (byte != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (ptr[4] == 0x10c2a8);\nLAB_00104cba:\n    byte = (**(code **)(ptrRBP[1] + 0x230))(ptrRBP);\n    if (byte != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (ptrRBX != ptrR13) {\n      if (ptrR14 == (undefined8 *)0x8) {\n        *ptrRBX = *ptrR13;\n        processLTOObject_001049c0();\n        return;\n      }\n      for (; ptrR14 != (undefined8 *)0x0; ptrR14 = (undefined8 *)((long)ptrR14 + -1)) {\n        *(undefined *)ptrRBX = *(undefined *)ptrR13;\n        ptrR13 = (undefined8 *)((long)ptrR13 + (ulong)byte * -2 + 1);\n        ptrRBX = (undefined8 *)((long)ptrRBX + (ulong)byte * -2 + 1);\n      }\n      processLTOObject_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  ptr7 = (undefined8 *)((long)ptrR12 * (long)ptrR14);\n  ptrR12 = (undefined8 *)((long)ptr9 + (long)ptr7);\n  ptrRBX = ptr9;\n  ptr4 = ptrRBP;\n  if (ptr9 < ptrR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  retAddr = (ulong)bool;\n  ptrR13 = ptr9;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_info_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "langId",
                "iVar2": "totalBytesWritten",
                "iVar3": "bytesWritten",
                "pcVar4": "text",
                "lVar5": "index",
                "sVar6": "symbolLength",
                "__ptr": "targetList",
                "plVar7": "ptrTarget",
                "ppcVar8": "ptrDemangler",
                "pcVar9": "separator",
                "local_3c": "padding"
            },
            "code": "\nvoid printSymbolInfo_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long langId;\n  int totalBytesWritten;\n  int bytesWritten;\n  char *text;\n  long index;\n  size_t symbolLength;\n  long *targetList;\n  long *ptrTarget;\n  char **ptrDemangler;\n  char *separator;\n  uint padding;\n  \n  langId = DAT_0010b820;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,text,langId);\n  text = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*text == ' ') {\n    langId = 1;\n    do {\n      index = langId;\n      langId = index + 1;\n    } while (text[index] == ' ');\n    padding = (uint)index;\n  }\n  else {\n    padding = 0;\n  }\n  totalBytesWritten = fprintf(outputFile,\"%s\",text);\n  separator = \"\";\n  for (ptrDemangler = (char **)&libiberty_demanglers; *ptrDemangler != (char *)0x0; ptrDemangler = ptrDemangler + 3) {\n    symbolLength = strlen(*ptrDemangler);\n    if (0x4a < (long)totalBytesWritten + symbolLength) {\n      fprintf(outputFile,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalBytesWritten = fprintf(outputFile,\"%.*s\",(ulong)padding,text);\n    }\n    bytesWritten = fprintf(outputFile,\"%s\\\"%s\\\"\",separator,*ptrDemangler);\n    totalBytesWritten = totalBytesWritten + bytesWritten;\n    separator = \", \";\n  }\n  fputc(10,outputFile);\n  text = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,text);\n  text = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,text);\n  langId = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,text,langId);\n  }\n  targetList = (long *)bfd_target_list();\n  ptrTarget = targetList;\n  while( true ) {\n    langId = *ptrTarget;\n    ptrTarget = ptrTarget + 1;\n    if (langId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "bfd_target_list",
                "exit",
                "fseek",
                "dcgettext",
                "free",
                "fputc",
                "fprintf",
                "strlen",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "decompile_and_improve_00104d5b",
                "pcVar1": "current_string",
                "pcVar2": "function_pointer",
                "cVar3": "character",
                "iVar4": "integer",
                "uVar5": "unsigned_integer",
                "uVar6": "unsigned_long",
                "puVar7": "pointer_variable",
                "lVar8": "long_variable",
                "lVar9": "long_variable_2",
                "puVar10": "pointer_variable_2",
                "in_RCX": "input_array_pointer",
                "unaff_RBX": "unaffected_register_BX",
                "__ptr": "temporary_pointer",
                "puVar11": "pointer_variable_3",
                "unaff_RBP": "unaffected_register_BP",
                "puVar12": "pointer_variable_4",
                "in_R8": "input_register_8",
                "puVar13": "pointer_variable_5",
                "in_R9": "input_register_9",
                "puVar14": "pointer_variable_6",
                "puVar15": "pointer_variable_7",
                "unaff_R12": "unaffected_register_12",
                "unaff_R13": "unaffected_register_13",
                "unaff_R14": "unaffected_register_14",
                "unaff_R15": "unaffected_register_15",
                "bVar16": "boolean_variable",
                "bVar17": "byte_variable",
                "unaff_retaddr": "unaffected_register_return_address",
                "uVar18": "unsigned_variable",
                "param_7": "parameter_7",
                "param_8": "parameter_8",
                "param_9": "parameter_9",
                "in_stack_00000038": "input_stack_variable",
                "param_13": "parameter_13",
                "param_14": "parameter_14"
            },
            "code": "\nvoid decompile_and_improve_00104d5b(void)\n\n{\n  char *current_string;\n  code *function_pointer;\n  char character;\n  int integer;\n  uint unsigned_integer;\n  undefined8 unsigned_long;\n  undefined8 *pointer_variable;\n  long long_variable;\n  long long_variable_2;\n  undefined8 *pointer_variable_2;\n  undefined8 *input_array_pointer;\n  undefined8 *unaffected_register_BX;\n  undefined8 *temporary_pointer;\n  undefined8 *pointer_variable_3;\n  undefined8 *unaffected_register_BP;\n  undefined8 *pointer_variable_4;\n  undefined8 *input_register_8;\n  undefined8 *pointer_variable_5;\n  undefined8 *input_register_9;\n  undefined8 *pointer_variable_6;\n  undefined8 *pointer_variable_7;\n  undefined8 *unaffected_register_12;\n  undefined8 *unaffected_register_13;\n  undefined8 *unaffected_register_14;\n  undefined8 *unaffected_register_15;\n  bool boolean_variable;\n  byte byte_variable;\n  ulong unaffected_register_return_address;\n  ulong unsigned_variable;\n  undefined8 parameter_7;\n  undefined8 *parameter_8;\n  undefined8 *parameter_9;\n  undefined8 input_stack_variable;\n  void *parameter_13;\n  undefined8 *parameter_14;\n  \n  byte_variable = 0;\n  do {\n    if ((input_array_pointer[4] != 0x10c2a8) && (input_array_pointer[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      unaffected_register_13 = (undefined8 *)((long)unaffected_register_13 + (long)unaffected_register_14);\n      pointer_variable_7 = unaffected_register_12;\n      pointer_variable_4 = unaffected_register_BP;\n      if (unaffected_register_12 <= unaffected_register_13) goto LAB_00104b15;\nLAB_001049cf:\n      input_array_pointer = (undefined8 *)\n               (**(code **)(unaffected_register_BP[1] + 0x270))\n                         (unaffected_register_BP,unaffected_register_return_address & 0xffffffff,unaffected_register_13,unaffected_register_15);\n      pointer_variable_3 = unaffected_register_BP;\n      pointer_variable_4 = unaffected_register_13;\n      pointer_variable_7 = unaffected_register_15;\n      if (input_array_pointer == (undefined8 *)0x0) goto LAB_00102eb0;\n      current_string = (char *)input_array_pointer[1];\n      if (((current_string == (char *)0x0) || (*current_string != '_')) || (current_string[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        unsigned_integer = (uint)(input_array_pointer[4] == 0x10c2a8);\nLAB_00104af9:\n        if (unsigned_integer != 0) goto LAB_00104a2d;\n        unaffected_register_13 = (undefined8 *)((long)unaffected_register_13 + (long)unaffected_register_14);\n        pointer_variable_7 = unaffected_register_12;\n        pointer_variable_4 = unaffected_register_BP;\n        if (unaffected_register_12 <= unaffected_register_13) {\nLAB_00104b15:\n          unaffected_register_BX = (undefined8 *)((long)unaffected_register_BX - (long)parameter_9);\n          if (unaffected_register_14 == (undefined8 *)0x8) {\n            long_variable_2 = pointer_variable_4[1];\n            pointer_variable_3 = (undefined8 *)((long)unaffected_register_BX + 7);\n            if (-1 < (long)unaffected_register_BX) {\n              pointer_variable_3 = unaffected_register_BX;\n            }\n            input_register_8 = (undefined8 *)(ulong)DAT_0010b800;\n            function_pointer = *(code **)(long_variable_2 + 0x208);\n            pointer_variable_3 = (undefined8 *)((long)pointer_variable_3 >> 3);\n          }\n          else {\n            pointer_variable_3 = (undefined8 *)((long)unaffected_register_BX / (long)unaffected_register_14);\n            long_variable_2 = pointer_variable_4[1];\n            function_pointer = *(code **)(long_variable_2 + 0x208);\n          }\n          unaffected_register_BP = pointer_variable_4;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = pointer_variable_4;\n            DAT_0010b770 = (undefined8 *)(*function_pointer)(pointer_variable_4);\n            DAT_0010b768 = (undefined8 *)(**(code **)(pointer_variable_4[1] + 0x208))(pointer_variable_4);\n            unaffected_register_BX = parameter_14;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              FUN_00106530(*pointer_variable_4);\n              temporary_pointer = unaffected_register_15;\n              goto LAB_00102d8e;\n            }\n            unaffected_register_12 = (undefined8 *)(ulong)input_stack_variable._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              unsigned_variable = (ulong)(DAT_0010b80c != 0);\n              qsort(parameter_14,(size_t)pointer_variable_3,(size_t)unaffected_register_12,FUN_00102fd2);\n              pointer_variable_7 = (undefined8 *)xmalloc((long)pointer_variable_3 << 4);\n              pointer_variable_5 = DAT_0010b770;\n              unaffected_register_BP = DAT_0010b768;\n              unaffected_register_14 = (undefined8 *)((long)pointer_variable_3 * (long)unaffected_register_12 + (long)unaffected_register_BX);\n              input_array_pointer = DAT_0010b770;\n              input_register_9 = DAT_0010b768;\n              if (unaffected_register_14 <= unaffected_register_BX) goto LAB_00102ec2;\n              pointer_variable_3 = (undefined8 *)\n                        (**(code **)(pointer_variable_4[1] + 0x270))(pointer_variable_4,unsigned_variable & 0xffffffff,unaffected_register_BX);\n              temporary_pointer = unaffected_register_BX;\n              input_register_8 = unaffected_register_12;\n              parameter_8 = pointer_variable_7;\n              if (pointer_variable_3 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(parameter_14,(size_t)pointer_variable_3,(size_t)unaffected_register_12,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            long_variable_2 = pointer_variable_4[1];\n          }\n          temporary_pointer = (undefined8 *)0x0;\n          do {\n            pointer_variable_4 = parameter_14;\n            pointer_variable = (undefined8 *)(ulong)DAT_0010b7f8;\n            unaffected_register_14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              pointer_variable_7 = (undefined8 *)(**(code **)(long_variable_2 + 0x208))(unaffected_register_BP);\n              if (pointer_variable_7 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaffected_register_BX = temporary_pointer + (long)pointer_variable_3 * 2;\n              pointer_variable_3 = temporary_pointer;\n              do {\n                if (unaffected_register_BX <= pointer_variable_3) {\nLAB_00104c75:\n                  if (parameter_13 != (void *)0x0) {\n                    free(parameter_13);\n                    free(parameter_14);\n                    free(temporary_pointer);\n                    return;\n                  }\n                  free(parameter_14);\n                  free(temporary_pointer);\n                  return;\n                }\n                pointer_variable = pointer_variable_7;\n                long_variable_2 = (**(code **)(unaffected_register_BP[1] + 0x270))(unaffected_register_BP,unaffected_register_14,*pointer_variable_3);\n                if (long_variable_2 == 0) {\n                  FUN_00106530(*unaffected_register_BP,0);\nLAB_00102ed2:\n                  pointer_variable_4 = (undefined8 *)*unaffected_register_BP;\n                  FUN_00106530();\n                  pointer_variable_5 = input_register_8;\n                  pointer_variable_6 = input_register_9;\n                  goto LAB_00102edb;\n                }\n                pointer_variable_4 = pointer_variable_3 + 1;\n                pointer_variable_3 = pointer_variable_3 + 2;\n                FUN_00105110(unaffected_register_BP,long_variable_2,*pointer_variable_4,parameter_7);\n              } while( true );\n            }\n            unaffected_register_12 = (undefined8 *)(ulong)input_stack_variable._4_4_;\n            unaffected_register_15 = (undefined8 *)(**(code **)(long_variable_2 + 0x208))(unaffected_register_BP);\n            if (unaffected_register_15 == (undefined8 *)0x0) {\n              FUN_00106530(*unaffected_register_BP);\n              pointer_variable_4 = unaffected_register_12;\n              if (DAT_0010b80c == 0) {\n                long_variable_2 = (**(code **)(unaffected_register_BP[1] + 0x350))(unaffected_register_BP);\n                pointer_variable_3 = parameter_14;\n                pointer_variable_7 = unaffected_register_12;\n                if (long_variable_2 < 1) {\n                  pointer_variable = (undefined8 *)0x0;\n                  unaffected_register_BX = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaffected_register_BX = (undefined8 *)xmalloc();\n                  pointer_variable = (undefined8 *)(**(code **)(unaffected_register_BP[1] + 0x358))(unaffected_register_BP,unaffected_register_BX);\n                  pointer_variable_4 = pointer_variable_7;\n                  if ((long)pointer_variable < 0) {\n                    pointer_variable_4 = (undefined8 *)*unaffected_register_BP;\n                    pointer_variable_3 = (undefined8 *)FUN_00106530(pointer_variable_4,pointer_variable_7);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                pointer_variable = unaffected_register_12;\n                unaffected_register_BX = parameter_14;\n                pointer_variable_3 = (undefined8 *)0x0;\n                pointer_variable_7 = (undefined8 *)0x0;\n              }\n              input_register_9 = &stack0x00000040;\n              input_register_8 = unaffected_register_BX;\n              long_variable_2 = (**(code **)(unaffected_register_BP[1] + 0x360))(unaffected_register_BP,pointer_variable_7,pointer_variable_3,pointer_variable);\n              unaffected_register_12 = pointer_variable_4;\n              if (0 < long_variable_2) {\n                unaffected_register_12 = (undefined8 *)((long)pointer_variable_4 + long_variable_2);\n                parameter_14 = (undefined8 *)xrealloc(parameter_14);\n                long_variable = 0;\n                do {\n                  parameter_14[(long)pointer_variable_4 + long_variable] = (void *)(long_variable * 0x30 + (long)parameter_13);\n                  long_variable = long_variable + 1;\n                } while (long_variable_2 != long_variable);\n                parameter_14[(long)pointer_variable_4 + long_variable_2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (unaffected_register_BX != (undefined8 *)0x0)) {\n                free(unaffected_register_BX);\n              }\n              if ((*(byte *)((long)unaffected_register_BP + 0x4a) & 0x10) != 0) {\n                unaffected_register_BX = (undefined8 *)*unaffected_register_BP;\n                DAT_0010b230 = '\\0';\n                unsigned_long = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                FUN_00106400(unsigned_long);\n              }\n              unaffected_register_14 = (undefined8 *)(ulong)input_stack_variable._4_4_;\n              boolean_variable = DAT_0010b80c != 0;\n              pointer_variable_3 = (undefined8 *)(ulong)boolean_variable;\n              input_array_pointer = parameter_14;\n              parameter_9 = parameter_14;\n              unaffected_register_15 = (undefined8 *)(**(code **)(unaffected_register_BP[1] + 0x208))(unaffected_register_BP);\n              if (unaffected_register_15 != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              pointer_variable_3 = (undefined8 *)((long)pointer_variable_3 * (long)unaffected_register_12 + (long)pointer_variable_4);\n              unaffected_register_BX = pointer_variable_4;\n              while( true ) {\n                if (pointer_variable_3 <= unaffected_register_BX) goto LAB_00104c75;\n                input_array_pointer = unaffected_register_15;\n                long_variable_2 = (**(code **)(unaffected_register_BP[1] + 0x270))(unaffected_register_BP,unaffected_register_14,unaffected_register_BX);\n                if (long_variable_2 == 0) break;\n                unaffected_register_BX = (undefined8 *)((long)unaffected_register_BX + (long)unaffected_register_12);\n                FUN_00105110(unaffected_register_BP,long_variable_2,0,parameter_7);\n              }\n              FUN_00106530(*unaffected_register_BP,0);\n            }\n            FUN_00106530(*unaffected_register_BP);\n            pointer_variable_4 = unaffected_register_BP;\n            pointer_variable_7 = unaffected_register_15;\nLAB_00102eb0:\n            FUN_00106530(*pointer_variable_3);\nLAB_00102eb9:\n            FUN_00106530(*pointer_variable_4);\nLAB_00102ec2:\n            pointer_variable_3 = (undefined8 *)0x0;\n            temporary_pointer = unaffected_register_BX;\n            input_register_8 = unaffected_register_12;\n            pointer_variable_5 = input_array_pointer;\n            unaffected_register_BP = input_register_9;\n            parameter_8 = pointer_variable_7;\nLAB_00104e35:\n            while (input_register_9 = pointer_variable_5, temporary_pointer < unaffected_register_14) {\n              unaffected_register_BX = (undefined8 *)((long)temporary_pointer + (long)input_register_8);\n              if (unaffected_register_BX < unaffected_register_14) {\n                pointer_variable = unaffected_register_BP;\n                pointer_variable_5 = input_register_8;\n                pointer_variable_6 = input_register_9;\n                pointer_variable_2 = (undefined8 *)(**(code **)(pointer_variable_4[1] + 0x270))();\n                if (pointer_variable_2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  input_register_9 = pointer_variable_6;\n                  input_register_8 = pointer_variable_5;\n                  pointer_variable_4 = (undefined8 *)*pointer_variable_4;\n                  pointer_variable_2 = (undefined8 *)FUN_00106530();\n                }\n                else {\n                  pointer_variable = (undefined8 *)pointer_variable_3[4];\n                  if ((*(uint *)(pointer_variable_3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                long_variable_2 = pointer_variable_3[2];\nLAB_00102ee7:\n                if (pointer_variable == (undefined8 *)pointer_variable_2[4]) {\n                  long_variable_2 = pointer_variable_2[2] - long_variable_2;\n                  pointer_variable_5 = unaffected_register_BP;\n                  pointer_variable_6 = temporary_pointer;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                long_variable_2 = pointer_variable[8] - long_variable_2;\n                pointer_variable_5 = unaffected_register_BP;\n                pointer_variable_6 = temporary_pointer;\n              }\n              else {\n                pointer_variable = (undefined8 *)pointer_variable_3[4];\n                if ((*(uint *)(pointer_variable_3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  long_variable_2 = pointer_variable_3[2];\n                  pointer_variable_2 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                pointer_variable_2 = (undefined8 *)0x0;\nLAB_00104e95:\n                pointer_variable_5 = unaffected_register_BP;\n                pointer_variable_6 = temporary_pointer;\n                if (*(int *)(pointer_variable_4[1] + 8) == 5) {\n                  long_variable_2 = pointer_variable_3[7];\n                }\n                else {\n                  long_variable_2 = pointer_variable_3[2];\n                  if ((*(byte *)((long)pointer_variable + 0x25) & 0x10) == 0) {\n                    if (unaffected_register_BX < unaffected_register_14) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              pointer_variable_3 = pointer_variable_2;\n              temporary_pointer = unaffected_register_BX;\n              unaffected_register_BP = input_register_9;\n              if (long_variable_2 != 0) {\n                *pointer_variable_7 = pointer_variable_6;\n                pointer_variable_7[1] = long_variable_2;\n                pointer_variable_7 = pointer_variable_7 + 2;\n              }\n            }\n            pointer_variable_3 = (undefined8 *)((long)pointer_variable_7 - (long)parameter_8 >> 4);\n            qsort(parameter_8,(size_t)pointer_variable_3,0x10,FUN_00103533);\n            long_variable_2 = pointer_variable_4[1];\n            unaffected_register_BX = temporary_pointer;\n            unaffected_register_BP = pointer_variable_4;\n            temporary_pointer = parameter_8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      integer = strcmp(current_string + (current_string[2] == '_'),\"__gnu_lto_slim\");\n      parameter_8 = input_array_pointer;\n      if (integer == 0) {\n        if (DAT_0010b230 != '\\0') {\n          parameter_8 = (undefined8 *)*unaffected_register_BP;\n          DAT_0010b230 = '\\0';\n          unsigned_long = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          FUN_00106400(unsigned_long,parameter_8);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        unsigned_integer = (*(uint *)(input_array_pointer + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(input_array_pointer + 3) & 0x800082) == 0) && (input_array_pointer[4] != 0x10c2a8)) &&\n         ((*(byte *)(input_array_pointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(input_array_pointer + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  input_register_9 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    character = (**(code **)(unaffected_register_BP[1] + 0x230))(unaffected_register_BP);\n    if (character != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  else {\n    if (input_array_pointer[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    character = (**(code **)(unaffected_register_BP[1] + 0x230))(unaffected_register_BP);\n    if (character != '\\0') {\n      FUN_00102c19();\n      return;\n    }\n  }\n  if (unaffected_register_BX != unaffected_register_13) {\n    if (unaffected_register_14 != (undefined8 *)0x8) {\n      for (; unaffected_register_14 != (undefined8 *)0x0; unaffected_register_14 = (undefined8 *)((long)unaffected_register_14 + -1)) {\n        *(undefined *)unaffected_register_BX = *(undefined *)unaffected_register_13;\n        unaffected_register_13 = (undefined8 *)((long)unaffected_register_13 + (ulong)byte_variable * -2 + 1);\n        unaffected_register_BX = (undefined8 *)((long)unaffected_register_BX + (ulong)byte_variable * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    *unaffected_register_BX = *unaffected_register_13;\n    FUN_001049c0();\n    return;\n  }\n  unaffected_register_BX = (undefined8 *)((long)unaffected_register_BX + (long)unaffected_register_14);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  pointer_variable_7 = (undefined8 *)((long)unaffected_register_12 * (long)unaffected_register_14);\n  unaffected_register_12 = (undefined8 *)((long)parameter_9 + (long)pointer_variable_7);\n  unaffected_register_BX = parameter_9;\n  pointer_variable_4 = unaffected_register_BP;\n  if (parameter_9 < unaffected_register_12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaffected_register_return_address = (ulong)boolean_variable;\n  unaffected_register_13 = parameter_9;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "xmalloc",
                "free",
                "FUN_00106400",
                "FUN_00105110",
                "xrealloc",
                "FUN_00102fd2",
                "FUN_00103533",
                "strcmp",
                "dcgettext",
                "FUN_00104d5b",
                "FUN_00102c19",
                "FUN_001049c0",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "message",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "arg4",
                "param_6": "arg5",
                "param_7": "arg6",
                "param_8": "arg7",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "__arg": "arg_pointer",
                "__format": "format_string",
                "local_d8": "size_1",
                "local_d4": "size_2",
                "local_d0": "stack_buffer_pointer",
                "local_c8": "local_buffer_pointer",
                "local_b8": "local_buffer",
                "local_b0": "buffer_param10",
                "local_a8": "buffer_param11",
                "local_a0": "buffer_param12",
                "local_98": "buffer_param13",
                "local_90": "buffer_param14",
                "local_88": "local_param1",
                "local_78": "local_param2",
                "local_68": "local_param3",
                "local_58": "local_param4",
                "local_48": "local_param5",
                "local_38": "local_param6",
                "local_28": "local_param7",
                "local_18": "local_param8",
                "stack0x00000008": "stack_buffer",
                "_stdout": "stdout_stream",
                "_stderr": "stderr_stream"
            },
            "code": "\n\n\nvoid printErrorMessage_00106300(undefined4 message,undefined4 arg1,undefined4 arg2,undefined4 arg3,\n                 undefined4 arg4,undefined4 arg5,undefined4 arg6,undefined4 arg7,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 *arg_pointer;\n  char *format_string;\n  undefined4 size_1;\n  undefined4 size_2;\n  undefined *stack_buffer_pointer;\n  undefined *local_buffer_pointer;\n  undefined local_buffer [8];\n  undefined8 buffer_param10;\n  undefined8 buffer_param11;\n  undefined8 buffer_param12;\n  undefined8 buffer_param13;\n  undefined8 buffer_param14;\n  undefined4 local_param1;\n  undefined4 local_param2;\n  undefined4 local_param3;\n  undefined4 local_param4;\n  undefined4 local_param5;\n  undefined4 local_param6;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  arg_pointer = &size_1;\n  if (condition != '\\0') {\n    local_param1 = message;\n    local_param2 = arg1;\n    local_param3 = arg2;\n    local_param4 = arg3;\n    local_param5 = arg4;\n    local_param6 = arg5;\n    local_param7 = arg6;\n    local_param8 = arg7;\n  }\n  stack_buffer_pointer = &stack_buffer;\n  size_1 = 8;\n  local_buffer_pointer = local_buffer;\n  size_2 = 0x30;\n  buffer_param10 = param10;\n  buffer_param11 = param11;\n  buffer_param12 = param12;\n  buffer_param13 = param13;\n  buffer_param14 = param14;\n  FUN_001063a0();\n  format_string = (char *)0x1;\n  xexit();\n  fflush(stdout_stream);\n  fprintf(stderr_stream,\"%s: \",DAT_0010b820);\n  vfprintf(stderr_stream,format_string,arg_pointer);\n  putc(10,stderr_stream);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_0010370a",
                "FUN_00103729",
                "FUN_001055f0",
                "FUN_001053c0",
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "display_message_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid displayMessage_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "display_message_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorType",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unknown",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "bfd_get_error": "getBfdError",
                "dcgettext": "getErrorMessage",
                "bfd_errmsg": "getBfdErrorMessage",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorType)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unknown;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorType != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820,errorType,errorMessage,unknown);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMessage,unknown);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_001043d0",
                "FUN_00106530"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        }
    },
    "used_tokens": 93424,
    "layers": [
        [
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00104370",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00103573",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_00103a66",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_001048e0",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001054d0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00104740",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_001064b0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00102739",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00104d5b",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ]
    ],
    "locked_functions": []
}