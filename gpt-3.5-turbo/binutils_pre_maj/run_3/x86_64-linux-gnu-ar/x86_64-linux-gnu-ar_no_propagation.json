{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_entry_00102cd9",
                "in_EAX": "input",
                "iVar1": "comparisonResult",
                "unaff_RBX": "entryPointer",
                "param_7": "searchParameter"
            },
            "code": "\nlong * findMatchingEntry_00102cd9(void)\n\n{\n  int input;\n  int comparisonResult;\n  long *entryPointer;\n  undefined8 searchParameter;\n  \n  searchParameter = DAT_0010d638;\n  if (input == 3) {\n    for (; *entryPointer != 0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryPointer != (undefined8 *)0x0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entryPointer,searchParameter);\n      if (comparisonResult == 0) {\n        if (input != 2) {\n          return entryPointer;\n        }\n        return (long *)(*entryPointer + 0xf0);\n      }\n    }\n  }\n  return entryPointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00105cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105830",
                "FUN_00102e6f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_details_001079c0",
                "param_1": "file",
                "param_2": "fileInfo",
                "param_3": "printHeader",
                "param_4": "printHexDump",
                "iVar1": "result",
                "ppcVar2": "fileInfoPtr",
                "pcVar3": "timeData",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePermission",
                "cStack_f2": "userRead",
                "cStack_f1": "userWrite",
                "cStack_f0": "userExecute",
                "cStack_ef": "groupRead",
                "cStack_ee": "groupWrite",
                "cStack_ed": "groupExecute",
                "cStack_ec": "othersRead",
                "cStack_eb": "othersWrite",
                "cStack_ea": "othersExecute",
                "local_e8": "timeString",
                "local_b8": "messageBuffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "majorDeviceNumber",
                "uStack_98": "minorDeviceNumber",
                "uStack_88": "inodeNumber",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileDetails_001079c0(FILE *file,char **fileInfo,char printHeader,char printHexDump)\n\n{\n  int result;\n  char **fileInfoPtr;\n  char *timeData;\n  uint fileType;\n  time_t currentTime;\n  undefined filePermission;\n  char userRead;\n  char userWrite;\n  char userExecute;\n  char groupRead;\n  char groupWrite;\n  char groupExecute;\n  char othersRead;\n  char othersWrite;\n  char othersExecute;\n  undefined uStack_e9;\n  char timeString [48];\n  undefined messageBuffer [24];\n  uint fileSize;\n  uint majorDeviceNumber;\n  uint minorDeviceNumber;\n  undefined8 inodeNumber;\n  time_t fileModificationTime;\n  \n  if (printHeader != '\\0') {\n    fileInfoPtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      fileInfoPtr = fileInfo;\n    }\n    result = (**(code **)(fileInfoPtr[1] + 0x1e8))(fileInfo,messageBuffer);\n    if (result == 0) {\n      currentTime = fileModificationTime;\n      timeData = ctime(&currentTime);\n      if (timeData == (char *)0x0) {\n        timeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeString,timeData);\n      }\n      else {\n        sprintf(timeString,\"%.12s %.4s\",timeData + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      userRead = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      userWrite = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      userExecute = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      groupRead = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWrite = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecute = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      othersRead = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      othersWrite = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      othersExecute = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (userExecute == 'x') {\n          userExecute = 's';\n        }\n        else {\n          userExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (groupExecute == 'x') {\n          groupExecute = 's';\n        }\n        else {\n          groupExecute = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (othersExecute == 'x') {\n          othersExecute = 't';\n        }\n        else {\n          othersExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&userRead,(ulong)majorDeviceNumber,(ulong)minorDeviceNumber,inodeNumber,\n              timeString,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,file);\n  if (printHexDump != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "FUN_00102d8c",
                "ctime",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_details_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "filePath",
                "pFVar2": "filePointer",
                "sVar3": "fileLength"
            },
            "code": "\nvoid processFile_00105a68(void)\n\n{\n  char *filePath;\n  FILE *filePointer;\n  size_t fileLength;\n  \n  filePath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    fileLength = strlen(DAT_0010d5e8);\n    if (fileLength != 0) {\n      if (filePath[fileLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(filePath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(filePath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00102e57",
                "concat",
                "strlen",
                "perror",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archiveData",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "currentEntry",
                "bVar3": "foundEntry",
                "plVar4": "currentNode",
                "iVar5": "comparisonResult",
                "__format": "errorFormat",
                "plVar6": "nextNode",
                "lVar7": "currentHandle",
                "plVar8": "previousNode"
            },
            "code": "\n\n\nundefined8 processArchive_001032a8(long *archiveData,code *callback,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 currentEntry;\n  bool foundEntry;\n  long *currentNode;\n  int comparisonResult;\n  char *errorFormat;\n  long *nextNode;\n  long currentHandle;\n  long *previousNode;\n  \n  currentHandle = archiveData[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentHandle != 0) {\n      nextEntry = *(long *)(currentHandle + 0xf0);\n      (*callback)(currentHandle,0);\n      currentHandle = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentNode = (long *)archiveData[0x1e];\n      previousNode = archiveData;\n      while (nextNode = currentNode, nextNode != (long *)0x0) {\n        if (*nextNode != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*callback)(nextNode,previousNode);\n          }\n        }\n        previousNode = nextNode;\n        currentNode = (long *)nextNode[0x1e];\n      }\n      if (!foundEntry) {\n        currentEntry = *entryNames;\n        errorFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorFormat,currentEntry);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_entry_not_found_error_0010285f",
                "__format": "errorMessage",
                "lVar2": "currentEntry",
                "plVar3": "nextEntry",
                "uVar4": "entryName",
                "plVar5": "currentArchiveEntry",
                "unaff_RBP": "printFunction",
                "unaff_R12": "archive",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "matchedEntriesCount"
            },
            "code": "\n\n\nvoid printEntryNotFoundError_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessage;\n  long currentEntry;\n  long *nextEntry;\n  undefined8 entryName;\n  long *currentArchiveEntry;\n  code *printFunction;\n  long archive;\n  int remainingEntries;\n  undefined8 *entryNames;\n  int matchedEntriesCount;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessage,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  currentArchiveEntry = *(long **)(archive + 0xf0);\n  matchedEntriesCount = 0;\n  do {\n    if (currentArchiveEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentArchiveEntry + 0xac) == 0) {\n      currentEntry = *currentArchiveEntry;\n      if (currentEntry == 0) {\n        nextEntry = (long *)currentArchiveEntry[0x1d];\n        if ((long *)currentArchiveEntry[0x1d] == (long *)0x0) {\n          nextEntry = currentArchiveEntry;\n        }\n        (**(code **)(nextEntry[1] + 0x1e8))(currentArchiveEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archive + 0x49) & 0x10) == 0) || (currentEntry = FUN_00105830(), currentEntry != 0))\n      {\n        entryName = FUN_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,currentEntry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (matchedEntriesCount = matchedEntriesCount + 1,\n            matchedEntriesCount == _DAT_0010d630)))) break;\n      }\n    }\n    currentArchiveEntry = (long *)currentArchiveEntry[0x1e];\n  } while( true );\n  (*printFunction)();\n  *(undefined4 *)((long)currentArchiveEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_entry_not_found_error_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_details_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorDetails_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_details_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "display_help_message_0010342d",
                "param_1": "outputMode",
                "uVar1": "displayName",
                "pcVar2": "text",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid displayHelpMessage_0010342d(uint outputMode)\n\n{\n  undefined8 displayName;\n  char *text;\n  FILE *outputStream;\n  \n  text = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputMode != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,text,DAT_0010d660);\n  displayName = DAT_0010d660;\n  text = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,text,displayName);\n  text = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,text);\n  text = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,text);\n  FUN_0010336b(outputStream);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (outputMode != 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputMode ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010336b",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "display_help_message_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_usage_0010394a",
                "param_1": "outputMode",
                "uVar1": "message",
                "pcVar2": "msgPtr",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveUsage_0010394a(uint outputMode)\n\n{\n  undefined8 message;\n  char *msgPtr;\n  FILE *outputStream;\n  \n  message = DAT_0010d660;\n  outputStream = _stderr;\n  if (outputMode != 0) {\n    outputStream = _stdout;\n  }\n  msgPtr = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,msgPtr,message);\n  msgPtr = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,msgPtr);\n  msgPtr = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,msgPtr);\n  msgPtr = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,msgPtr);\n  msgPtr = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,msgPtr);\n  msgPtr = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,msgPtr);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (outputMode != 0) {\n    msgPtr = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,msgPtr,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputMode ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_archive_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "process_data_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param_A",
                "param_10": "param_B",
                "param_11": "param_C",
                "param_12": "param_D",
                "param_13": "param_E",
                "param_14": "param_F",
                "in_AL": "flag",
                "local_d8": "local_size",
                "local_d4": "local_var1",
                "local_d0": "local_ptr1",
                "local_c8": "local_ptr2",
                "local_b8": "local_array",
                "local_b0": "local_param2",
                "local_a8": "local_param3",
                "local_a0": "local_param4",
                "local_98": "local_param5",
                "local_90": "local_param6",
                "local_88": "local_param1",
                "local_78": "local_param2_new",
                "local_68": "local_param3_new",
                "local_58": "local_param4_new",
                "local_48": "local_param5_new",
                "local_38": "local_param6_new",
                "local_28": "local_param7",
                "local_18": "local_param8"
            },
            "code": "\nvoid processData_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param_A,undefined8 param_B,undefined8 param_C,undefined8 param_D,\n                 undefined8 param_E,undefined8 param_F)\n\n{\n  char flag;\n  undefined4 local_size;\n  undefined4 local_var1;\n  undefined *local_ptr1;\n  undefined *local_ptr2;\n  undefined local_array [8];\n  undefined8 local_param2;\n  undefined8 local_param3;\n  undefined8 local_param4;\n  undefined8 local_param5;\n  undefined8 local_param6;\n  undefined4 local_param1;\n  undefined4 local_param2_new;\n  undefined4 local_param3_new;\n  undefined4 local_param4_new;\n  undefined4 local_param5_new;\n  undefined4 local_param6_new;\n  undefined4 local_param7;\n  undefined4 local_param8;\n  \n  if (flag != '\\0') {\n    local_param1 = input1;\n    local_param2_new = input2;\n    local_param3_new = input3;\n    local_param4_new = input4;\n    local_param5_new = input5;\n    local_param6_new = input6;\n    local_param7 = input7;\n    local_param8 = input8;\n  }\n  local_ptr1 = &stack0x00000008;\n  local_size = 8;\n  local_ptr2 = local_array;\n  local_var1 = 0x30;\n  local_param2 = param_B;\n  local_param3 = param_C;\n  local_param4 = param_D;\n  local_param5 = param_E;\n  local_param6 = param_F;\n  FUN_001078c0(param_A,&local_size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "process_data_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_return_value_00105bb0"
            },
            "code": "\nundefined8 getReturnValue_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_return_value_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_program_00107640"
            },
            "code": "\nundefined8 initializeProgram_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_program_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_archive_member_00102e6f",
                "in_RAX": "path",
                "pcVar1": "basePath",
                "uVar2": "basenameResult",
                "uVar3": "errorMessage",
                "pFVar4": "file",
                "sVar5": "length",
                "pcVar6": "currentPath"
            },
            "code": "\nvoid extractArchiveMember_00102e6f(void)\n\n{\n  char *basePath;\n  char *path;\n  undefined8 basenameResult;\n  undefined8 errorMessage;\n  FILE *file;\n  size_t length;\n  char *currentPath;\n  \n  basePath = DAT_0010d5e8;\n  do {\n    path = path + 1;\n    while (*path != '/') {\n      if (*path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (length = strlen(DAT_0010d5e8), length != 0)) {\n          if (basePath[length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(basePath,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(basePath,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file = fopen(DAT_0010d618,\"w\");\n        if (file == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentPath = path;\n      if ((*path == '.') && (currentPath = path + 1, path[1] == '.')) {\n        currentPath = path + 2;\n        if ((path[2] == '/') || (path[2] == '\\0')) {\n          basenameResult = lbasename();\n          basePath = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(errorMessage,basePath,basenameResult);\n          DAT_0010d618 = (char *)basenameResult;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (path = currentPath, *currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00107920",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_0010315d"
            },
            "code": "\n\n\nvoid checkAndExit_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_conditional_output_00107890",
                "param_1": "output",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printConditionalOutput_00107890(undefined8 output)\n\n{\n  FUN_001079c0(standardOutput,output,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_conditional_output_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001075e0",
                "FUN_001033b0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "pvVar1": "buffer",
                "pvVar2": "data_buffer",
                "auVar3": "result_buffer"
            },
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 input_param_1,undefined8 input_param_2,undefined8 input_param_3,undefined8 input_param_4)\n\n{\n  void *buffer;\n  void *data_buffer;\n  undefined result_buffer [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    data_buffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = data_buffer;\n  } while (data_buffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,input_param_1);\n  result_buffer._8_8_ = input_param_4;\n  result_buffer._0_8_ = buffer;\n  return result_buffer;\n}\n\n",
            "called": [
                "FUN_001031cf",
                "malloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_data_00103172",
                "param_1": "dataPtr",
                "param_2": "stringPtr",
                "param_3": "shouldPrint",
                "param_4": "newValue",
                "uVar1": "oldValue",
                "auVar2": "newData",
                "printf": "print",
                "param_2[0x1e]": "dataPtr[0x1e]"
            },
            "code": "\nundefined  [16]\nupdateAndPrintData_00103172(undefined8 *dataPtr,undefined8 *stringPtr,char shouldPrint,undefined8 newValue)\n\n{\n  undefined8 oldValue;\n  undefined newData [16];\n  \n  if (shouldPrint != '\\0') {\n    printf(\"r - %s\\n\",*stringPtr);\n  }\n  oldValue = *dataPtr;\n  dataPtr[0x1e] = oldValue;\n  newData._1_7_ = (undefined7)((ulong)oldValue >> 8);\n  newData[0] = 1;\n  *dataPtr = stringPtr;\n  newData._8_8_ = newValue;\n  return newData;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_and_print_data_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_offset_00105870",
                "param_1": "file_offsets",
                "param_2": "offset_count",
                "param_3": "search_filename",
                "iVar1": "comparison_result",
                "iVar3": "mode",
                "uVar2": "default_filename"
            },
            "code": "\nlong * find_file_offset_00105870(long *file_offsets,int offset_count,undefined8 search_filename)\n\n{\n  int comparison_result;\n  undefined8 default_filename;\n  int mode;\n  \n  default_filename = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_filename = search_filename;\n    mode = offset_count;\n  }\n  if (mode == 3) {\n    for (; *file_offsets != 0; file_offsets = (long *)(*file_offsets + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*file_offsets != (undefined8 *)0x0; file_offsets = (long *)(*file_offsets + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*file_offsets,default_filename);\n      if (comparison_result == 0) {\n        if (mode != 2) {\n          return file_offsets;\n        }\n        return (long *)(*file_offsets + 0xf0);\n      }\n    }\n  }\n  return file_offsets;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_file_offset_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *dataPointer;\n  \n  dataPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_unlink_files_00105bc0",
                "param_1": "source_path",
                "param_2": "dest_path",
                "param_3": "copy_options",
                "param_4": "error_code",
                "uVar1": "copy_result",
                "piVar2": "error_location",
                "pcVar3": "error_message",
                "uVar4": "localized_error",
                "uVar5": "unlink_result",
                "auVar6": "result_container"
            },
            "code": "\nundefined  [16] copy_and_unlink_files_00105bc0(char *source_path,char *dest_path,undefined4 copy_options,undefined8 error_code)\n\n{\n  uint copy_result;\n  int *error_location;\n  char *error_message;\n  undefined8 localized_error;\n  ulong unlink_result;\n  undefined result_container [16];\n  \n  if (dest_path == source_path) {\n    unlink_result = 0;\n  }\n  else {\n    copy_result = FUN_00105c00(copy_options);\n    unlink_result = (ulong)copy_result;\n    if (copy_result != 0) {\n      error_location = __errno_location();\n      error_message = strerror(*error_location);\n      localized_error = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(localized_error,dest_path,error_message);\n    }\n    unlink(source_path);\n  }\n  result_container._8_8_ = error_code;\n  result_container._0_8_ = unlink_result;\n  return result_container;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_files_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_process_data_00107650",
                "param_1": "input_data",
                "lVar2": "result",
                "uVar1": "success_flag"
            },
            "code": "\nundefined8 check_and_process_data_00107650(undefined8 input_data)\n\n{\n  undefined8 success_flag;\n  long result;\n  \n  result = FUN_001052a0();\n  if (result < 1) {\n    success_flag = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    result = FUN_00105300(input_data,0);\n    if (result == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(result);\n    success_flag = 0;\n  }\n  return success_flag;\n}\n\n",
            "called": [
                "FUN_001052a0",
                "FUN_00105300",
                "xexit",
                "FUN_001058b0",
                "FUN_0010284b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_00102f1e",
                "unaff_RBP": "status",
                "unaff_R12": "file_name",
                "unaff_retaddr": "return_address",
                "piVar1": "error_location",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copy_file_00102f1e(void)\n\n{\n  int *error_location;\n  undefined8 uVar2;\n  ulong status;\n  char *file_name;\n  undefined result [16];\n  undefined8 return_address;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(uVar2);\n  unlink(file_name);\n  result._0_8_ = status & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_error_message_00102fd7",
                "piVar1": "errorNumber",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorMessage_00102fd7(void)\n\n{\n  int *errorNumber;\n  undefined8 errorMessage;\n  \n  errorNumber = __errno_location();\n  strerror(*errorNumber);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "printf": "printFormatted",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00102cd9",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_001025a0",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_00102f1e",
                "FUN_0010285f",
                "FUN_001052a0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "execute_function_00103ddc",
                "param_1": "inputParameter"
            },
            "code": "\nvoid executeFunction_00103ddc(undefined8 inputParameter)\n\n{\n  FUN_001079c0(DAT_0010d578,inputParameter,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "execute_function_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "errorFormat",
                "param_2": "errorArguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *errorFormat,__gnuc_va_list errorArguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,errorFormat,errorArguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "putc",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_001028ed",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "copyRightMsg"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *copyRightMsg;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyRightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightMsg);\n  copyRightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "entryProcessor",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "result",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "entryCheckResult",
                "plVar5": "entry",
                "local_cc": "processedEntriesCount",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *entryProcessor,undefined8 *entryNames,int numEntries)\n\n{\n  int result;\n  char *formatString;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 entryCheckResult;\n  long *entry;\n  int processedEntriesCount;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*entryProcessor)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entry = *(long **)(archive + 0xf0);\n      processedEntriesCount = 0;\n      for (; entry != (long *)0x0; entry = (long *)entry[0x1e]) {\n        if (*(int *)((long)entry + 0xac) == 0) {\n          currentEntry = *entry;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entry[0x1d];\n            if ((long *)entry[0x1d] == (long *)0x0) {\n              fallbackEntry = entry;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entry,localBuffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,archive), currentEntry != 0)) {\n            entryCheckResult = FUN_00105830(*entryNames,archive);\n            result = filename_cmp(entryCheckResult,currentEntry);\n            if ((result == 0) &&\n               ((DAT_0010d634 == '\\0' || (processedEntriesCount = processedEntriesCount + 1, processedEntriesCount == _DAT_0010d630)))) {\n              (*entryProcessor)();\n              *(undefined4 *)((long)entry + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      entryCheckResult = *entryNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,entryCheckResult);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "errorMessageFormat",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorMessageFormat;\n  \n  lineNumber = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102ba1"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_0010315d",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00105a68",
                "FUN_00102d2f",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "result",
                "__size": "bufferSize",
                "lVar1": "index",
                "lVar2": "newSize",
                "puVar3": "bufferPointer",
                "bVar4": "count"
            },
            "code": "\nundefined8 ensureBufferStack_00103df9(void)\n\n{\n  size_t bufferSize;\n  undefined8 result;\n  long index;\n  long newSize;\n  undefined4 *bufferPointer;\n  byte count;\n  \n  count = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return result;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return result;\n    }\n    newSize = DAT_0010d580 + 8;\n    bufferSize = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,bufferSize);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      bufferPointer = (undefined4 *)((long)DAT_0010d5a8 + (bufferSize - 0x40));\n      DAT_0010d580 = newSize;\n      for (index = 0x10; index != 0; index = index + -1) {\n        *bufferPointer = 0;\n        bufferPointer = bufferPointer + (ulong)count * -2 + 1;\n      }\n      return result;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return result;\n}\n\n",
            "called": [
                "calloc",
                "realloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "archivePtr",
                "__ptr": "bufferPtr",
                "puVar2": "filePtr",
                "iVar1": "result",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "bytesRemaining",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "bufferSize"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *archivePtr)\n\n{\n  int result;\n  void *bufferPtr;\n  undefined8 *filePtr;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t bytesRemaining;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong bufferSize;\n  \n  bufferPtr = (void *)xmalloc(0x2000);\n  filePtr = (undefined8 *)archivePtr[0x1d];\n  if ((undefined8 *)archivePtr[0x1d] == (undefined8 *)0x0) {\n    filePtr = archivePtr;\n  }\n  result = (**(code **)(filePtr[1] + 0x1e8))(archivePtr,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archivePtr);\n    }\n    totalBytesRead = 0;\n    bfd_seek(archivePtr,0,0);\n    goto LAB_00103afd;\n  }\n  archivePtr = (undefined8 *)*archivePtr;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    FUN_00107690(errorMessage,archivePtr);\n    bufferSize = archiveSize;\n    do {\n      bytesWritten = fwrite(bufferPtr,1,bytesRemaining,_stdout);\n      if (bytesWritten != bytesRemaining) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        FUN_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(bufferPtr);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (bufferSize <= totalBytesRead) goto LAB_00103b91;\n      bytesRemaining = bufferSize - totalBytesRead;\n      if (0x2000 < bytesRemaining) {\n        bytesRemaining = 0x2000;\n      }\n      bytesRead = bfd_bread(bufferPtr,bytesRemaining,archivePtr);\n    } while (bytesRemaining == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    archivePtr = *(undefined8 **)archivePtr[0x1d];\n    archiveSize = bufferSize;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_bread",
                "free",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "printf",
                "strerror",
                "dcgettext",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "process_archive_file_001058b0",
                "param_1": "filePaths",
                "local_3c": "errorStatus",
                "__ptr": "filePathCopy",
                "__stream": "fileStream",
                "ppcVar5": "formattedArchiveData",
                "uVar2": "formatFlag",
                "__format": "errorMessage",
                "uStack0000000000000020": "filePermissions",
                "in_stack_00000028": "inodeNumber",
                "in_stack_00000038": "fileSize",
                "cStack_32": "fileType1",
                "cStack_31": "fileType2"
            },
            "code": "\n\n\nvoid processArchiveFile_001058b0(undefined8 *filePaths)\n\n{\n  char cVar1;\n  uint formatFlag;\n  int iVar3;\n  undefined8 uVar4;\n  char *errorMessage;\n  void *filePathCopy;\n  FILE *fileStream;\n  char **formattedArchiveData;\n  uint filePermissions;\n  uint inodeNumber;\n  undefined8 fileSize;\n  int errorStatus [2];\n  undefined uStack_33;\n  char fileType1;\n  char fileType2;\n  \n  uVar4 = filePaths[0x1e];\n  errorStatus[0] = -1;\n  filePathCopy = (void *)xstrdup(*filePaths);\n  fileStream = (FILE *)FUN_001057a0(filePathCopy,errorStatus);\n  iVar3 = errorStatus[0];\n  if (fileStream != (FILE *)0x0) {\n    DAT_0010d618 = fileStream;\n    formattedArchiveData = (char **)bfd_fdopenw(fileStream,*(undefined8 *)filePaths[1],errorStatus[0]);\n    if (formattedArchiveData != (char **)0x0) {\n      DAT_0010d5e0 = formattedArchiveData;\n      bfd_set_format(formattedArchiveData,2);\n      formatFlag = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)formattedArchiveData + 0x49) & 0xfffffff7;\n      *(char *)((long)formattedArchiveData + 0x49) = (char)formatFlag;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)formattedArchiveData + 0x44) = *(uint *)((long)formattedArchiveData + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)formattedArchiveData + 0x44) = *(uint *)((long)formattedArchiveData + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)filePaths + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)formattedArchiveData + 0x49) = (byte)formatFlag | 0x10;\n        }\n        cVar1 = bfd_set_archive_head(formattedArchiveData,uVar4);\n        if (cVar1 != '\\0') break;\n        formatFlag = FUN_00107c10(filePathCopy);\nLAB_00102d37:\n        *(uint *)((long)formattedArchiveData + 0x44) = *(uint *)((long)formattedArchiveData + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      cVar1 = bfd_close(formattedArchiveData);\n      if (cVar1 == '\\0') {\n        FUN_00107c10(filePathCopy);\n        errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,errorMessage);\n        formatFlag = filePermissions & 0xf000;\n        if (formatFlag == 0x4000) {\n          uStack_33 = 100;\n        }\n        else if (formatFlag == 0xa000) {\n          uStack_33 = 0x6c;\n        }\n        else if (formatFlag == 0x6000) {\n          uStack_33 = 0x62;\n        }\n        else if (formatFlag == 0x2000) {\n          uStack_33 = 99;\n        }\n        else if (formatFlag == 0xc000) {\n          uStack_33 = 0x73;\n        }\n        else {\n          uStack_33 = 0x70;\n          if (formatFlag != 0x1000) {\n            uStack_33 = 0x2d;\n          }\n        }\n        fileType1 = (-((_filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n        fileType2 = (-((_filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&fileType1,_filePermissions >> 0x20,\n                (ulong)inodeNumber,fileSize,&stack0xffffffffffffffd8,\n                _filePermissions & 0xffffffff);\n        fputs(*formattedArchiveData,fileStream);\n        if ((char)filePaths != '\\0') {\n          if ((*(byte *)((long)formattedArchiveData + 0x49) & 0x10) == 0) {\n            if (formattedArchiveData[0xb] != (char *)0x0) {\n              fprintf(fileStream,\" 0x%lx\");\n            }\n          }\n          else if (formattedArchiveData[0xc] != (char *)0x0) {\n            fprintf(fileStream,\" 0x%lx\");\n          }\n        }\n        fputc(10,fileStream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(filePaths);\n      iVar3 = FUN_00105bc0(fileStream,filePathCopy,iVar3);\n      if (iVar3 == 0) {\n        free(filePathCopy);\n        free(fileStream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    FUN_00107c10(filePathCopy);\n  }\n  uVar4 = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(uVar4);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_set_format",
                "close",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "FUN_001057a0",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_file_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "close_and_remove_files_00102bf5",
                "bfd_cache_close": "closeCache",
                "fclose": "closeFile",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid closeAndRemoveFiles_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "close_and_remove_files_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "call_indirect_jump_00102020",
                "undefined": "functionPointer"
            },
            "code": "\nvoid callIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(functionPointer *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "call_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00103ba8",
                "FUN_00102f96"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_dat_00102943"
            },
            "code": "\nvoid initializeDat_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_dat_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_time_00107c80",
                "param_1": "path",
                "param_2": "info",
                "iVar1": "result",
                "piVar2": "errno_loc",
                "pcVar3": "error_msg",
                "uVar4": "translated_msg",
                "local_38": "access_time",
                "uStack_34": "modified_time",
                "uStack_30": "status_change_time",
                "uStack_2c": "creation_time"
            },
            "code": "\nvoid setTime_00107c80(char *path,long info)\n\n{\n  int result;\n  int *errno_loc;\n  char *error_msg;\n  undefined8 translated_msg;\n  undefined4 access_time;\n  undefined4 modified_time;\n  undefined4 status_change_time;\n  undefined4 creation_time;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(info + 0x58);\n  uStack_24 = *(undefined4 *)(info + 0x5c);\n  uStack_20 = *(undefined4 *)(info + 0x60);\n  uStack_1c = *(undefined4 *)(info + 100);\n  access_time = *(undefined4 *)(info + 0x48);\n  modified_time = *(undefined4 *)(info + 0x4c);\n  status_change_time = *(undefined4 *)(info + 0x50);\n  creation_time = *(undefined4 *)(info + 0x54);\n  result = utimensat(-100,path,(timespec *)&access_time,0);\n  if (result != 0) {\n    errno_loc = __errno_location();\n    error_msg = strerror(*errno_loc);\n    translated_msg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(translated_msg,path,error_msg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_and_write_file_00105a20",
                "param_1": "input_path",
                "pcVar1": "base_path",
                "pcVar2": "current_path",
                "uVar3": "base_name",
                "uVar4": "error_message",
                "pFVar5": "file_pointer",
                "sVar6": "base_path_length"
            },
            "code": "\nvoid extract_and_write_file_00105a20(char *input_path)\n\n{\n  char *base_path;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t base_path_length;\n  \n  base_path = DAT_0010d5e8;\n  DAT_0010d618 = input_path;\n  if (*input_path == '/') {\nLAB_00102e9a:\n    base_name = lbasename();\n    base_path = DAT_0010d618;\n    error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(error_message,base_path,base_name);\n    DAT_0010d618 = (char *)base_name;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*input_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (base_path_length = strlen(DAT_0010d5e8), base_path_length != 0)) {\n        if (base_path[base_path_length - 1] == '/') {\n          DAT_0010d618 = (char *)concat(base_path,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(base_path,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_pointer = fopen(DAT_0010d618,\"w\");\n      if (file_pointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = input_path;\n    if ((*input_path == '.') && (current_path = input_path + 1, input_path[1] == '.')) {\n      current_path = input_path + 2;\n      if ((input_path[2] == '/') || (input_path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; input_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_and_write_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPtr",
                "iVar1": "originalErrnoValue"
            },
            "code": "\nundefined8 closeFile_00102f55(void)\n\n{\n  int originalErrnoValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  originalErrnoValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = originalErrnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "reverse_filepath_and_create_temp_001057a0",
                "param_1": "filepath",
                "param_2": "fileDescriptor",
                "param_3": "unknownArg1",
                "param_4": "unknownArg2",
                "iVar1": "tempFileDescriptor",
                "pcVar2": "lastSlash",
                "lVar3": "filepathLength",
                "lVar4": "index",
                "lVar5": "lastSlashIndex",
                "pcVar6": "tempFilepath",
                "bVar7": "zeroByte",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] reverseFilepathAndCreateTemp_001057a0(char *filepath,int *fileDescriptor,undefined8 unknownArg1,undefined8 unknownArg2)\n\n{\n  int tempFileDescriptor;\n  char *lastSlash;\n  long filepathLength;\n  long index;\n  long lastSlashIndex;\n  char *tempFilepath;\n  byte zeroByte;\n  undefined returnValue [16];\n  \n  zeroByte = 0;\n  lastSlash = strrchr(filepath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    filepathLength = 0;\n  }\n  else {\n    lastSlashIndex = (long)lastSlash - (long)filepath;\n    lastSlash = (char *)xmalloc(lastSlashIndex + 0xb);\n    filepathLength = lastSlashIndex + 1;\n    tempFilepath = lastSlash;\n    for (index = lastSlashIndex; index != 0; index = index + -1) {\n      *tempFilepath = *filepath;\n      filepath = filepath + (ulong)zeroByte * -2 + 1;\n      tempFilepath = tempFilepath + (ulong)zeroByte * -2 + 1;\n    }\n    lastSlash[lastSlashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlash + filepathLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + filepathLength) + 8) = 0;\n  tempFileDescriptor = mkstemp(lastSlash);\n  if (tempFileDescriptor == -1) {\n    tempFilepath = (char *)0x0;\n    free(lastSlash);\n  }\n  else {\n    *fileDescriptor = tempFileDescriptor;\n    tempFilepath = lastSlash;\n  }\n  returnValue._8_8_ = unknownArg2;\n  returnValue._0_8_ = tempFilepath;\n  return returnValue;\n}\n\n",
            "called": [
                "mkstemp",
                "strrchr",
                "xmalloc",
                "FUN_00102ba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "reverse_filepath_and_create_temp_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "format_and_print_file_info_00102d8c",
                "unaff_RBX": "filePaths",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "printHex",
                "__format": "corruptTimeFormat",
                "uVar1": "fileType",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "paramFlag1",
                "cStack0000000000000017": "paramFlag2",
                "param_9": "paramFlag3",
                "cStack0000000000000019": "paramFlag4",
                "cStack000000000000001a": "paramFlag5",
                "cStack000000000000001b": "paramFlag6",
                "cStack000000000000001c": "paramFlag7",
                "cStack000000000000001d": "paramFlag8",
                "cStack000000000000001e": "paramFlag9",
                "uStack000000000000001f": "isHexPrinted",
                "param_19": "fileFlags",
                "uStack000000000000006c": "fileSize",
                "param_20": "modificationDate",
                "param_22": "filePointer"
            },
            "code": "\nvoid formatAndPrintFileInfo_00102d8c(void)\n\n{\n  char *corruptTimeFormat;\n  uint fileType;\n  char **filePaths;\n  FILE *outputFile;\n  char printHex;\n  undefined fileTypeChar;\n  char paramFlag1;\n  char paramFlag2;\n  char paramFlag3;\n  char paramFlag4;\n  char paramFlag5;\n  char paramFlag6;\n  char paramFlag7;\n  char paramFlag8;\n  char paramFlag9;\n  undefined isHexPrinted;\n  uint fileFlags;\n  uint fileSize;\n  uint modificationDate;\n  undefined8 filePointer;\n  \n  corruptTimeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,corruptTimeFormat);\n  fileType = fileFlags & 0xf000;\n  if (fileType == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (fileType == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (fileType == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (fileType != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  paramFlag1 = (-((fileFlags & 0x100) == 0) & 0xbbU) + 0x72;\n  paramFlag2 = (-((fileFlags & 0x80) == 0) & 0xb6U) + 0x77;\n  paramFlag3 = (-((fileFlags & 0x40) == 0) & 0xb5U) + 0x78;\n  paramFlag4 = (-((fileFlags & 0x20) == 0) & 0xbbU) + 0x72;\n  paramFlag5 = (-((fileFlags & 0x10) == 0) & 0xb6U) + 0x77;\n  paramFlag6 = (-((fileFlags & 8) == 0) & 0xb5U) + 0x78;\n  paramFlag7 = (-((fileFlags & 4) == 0) & 0xbbU) + 0x72;\n  paramFlag8 = (-((fileFlags & 2) == 0) & 0xb6U) + 0x77;\n  paramFlag9 = (-((fileFlags & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileFlags & 0x800) != 0) {\n    if (paramFlag3 == 'x') {\n      paramFlag3 = 's';\n    }\n    else {\n      paramFlag3 = 'S';\n    }\n  }\n  if ((fileFlags & 0x400) != 0) {\n    if (paramFlag6 == 'x') {\n      paramFlag6 = 's';\n    }\n    else {\n      paramFlag6 = 'S';\n    }\n  }\n  if ((fileFlags & 0x200) != 0) {\n    if (paramFlag9 == 'x') {\n      paramFlag9 = 't';\n    }\n    else {\n      paramFlag9 = 'T';\n    }\n  }\n  isHexPrinted = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSize,\n          (ulong)modificationDate,filePointer,&stack0x00000020,(ulong)fileFlags);\n  fputs(*filePaths,outputFile);\n  if (printHex != '\\0') {\n    if ((*(byte *)((long)filePaths + 0x49) & 0x10) == 0) {\n      if (filePaths[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (filePaths[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "sprintf",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "format_and_print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_001028ed",
                "FUN_00102fd7",
                "FUN_00102f55",
                "FUN_00105c00",
                "FUN_00102c25",
                "FUN_001031cf",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "improved_extract_and_convert_00105300",
                "param_1": "input_file_name",
                "param_2": "output_file_pointer",
                "plVar1": "archived_file_pointer",
                "pcVar2": "default_output_filename",
                "bVar3": "convert_to_thin_library",
                "cVar4": "conversion_result",
                "iVar5": "stat_result",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "piVar8": "errno_location",
                "lVar9": "file_pointer",
                "puVar10": "conversion_result_pointer",
                "local_b0": "translated_message_buffer",
                "local_a8": "file_stats"
            },
            "code": "\n\n\nundefined8 * improved_extract_and_convert_00105300(char *input_file_name,undefined8 *output_file_pointer)\n\n{\n  long *archived_file_pointer;\n  char *default_output_filename;\n  byte convert_to_thin_library;\n  char conversion_result;\n  int stat_result;\n  undefined8 error_message;\n  undefined8 library_name;\n  int *errno_location;\n  long file_pointer;\n  undefined8 *conversion_result_pointer;\n  undefined8 translated_message_buffer;\n  stat file_stats;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  stat_result = stat(input_file_name,&file_stats);\n  default_output_filename = DAT_0010d618;\n  if (stat_result == 0) goto LAB_001053be;\n  errno_location = __errno_location();\n  if (*errno_location == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(input_file_name);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (output_file_pointer != (undefined8 *)0x0)) {\n      conversion_result_pointer = (undefined8 *)FUN_00102710();\n      return conversion_result_pointer;\n    }\n    output_file_pointer = (undefined8 *)bfd_openw(input_file_name,DAT_0010d5f0);\n    if (((output_file_pointer != (undefined8 *)0x0) && (conversion_result = bfd_set_format(output_file_pointer,2), conversion_result != '\\0')) &&\n       (conversion_result = bfd_close(output_file_pointer), conversion_result != '\\0')) {\n      default_output_filename = input_file_name;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(input_file_name);\n  do {\n    convert_to_thin_library = *(byte *)((long)output_file_pointer + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (convert_to_thin_library != 0) {\n        library_name = *output_file_pointer;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (convert_to_thin_library == 0) {\n      library_name = *output_file_pointer;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nLAB_001027cb:\n      FUN_00107c20(input_file_name);\n      stat_result = bfd_get_error();\n      if (stat_result == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(translated_message_buffer);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_pointer = output_file_pointer + 0x1e;\n      for (file_pointer = bfd_openr_next_archived_file(output_file_pointer,0); file_pointer != 0;\n          file_pointer = bfd_openr_next_archived_file(output_file_pointer,file_pointer)) {\n        *archived_file_pointer = file_pointer;\n        archived_file_pointer = (long *)(file_pointer + 0xf0);\n      }\n      *archived_file_pointer = 0;\n      stat_result = bfd_get_error();\n      if (stat_result == 9) {\n        return output_file_pointer;\n      }\n      do {\n        FUN_00107c10(input_file_name);\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name,input_file_name);\n        default_output_filename = input_file_name;\nLAB_001053be:\n        DAT_0010d618 = default_output_filename;\n        output_file_pointer = (undefined8 *)bfd_openr(input_file_name,DAT_0010d5f0);\n      } while (output_file_pointer == (undefined8 *)0x0);\n      conversion_result = bfd_check_format_matches(output_file_pointer,2,&translated_message_buffer);\n      if (conversion_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_pointer = bfd_openr_next_archived_file(output_file_pointer,0), file_pointer == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "FUN_00102710",
                "xexit",
                "bfd_close",
                "__errno_location",
                "bfd_openw",
                "bfd_openr",
                "bfd_set_error",
                "dcgettext",
                "stat",
                "fprintf",
                "FUN_0010315d",
                "FUN_00107c20",
                "bfd_get_error",
                "bfd_check_format_matches",
                "FUN_00107920",
                "perror",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "improved_extract_and_convert_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "parse_command_line_arguments_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteVar",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "undefined4Var",
                "uVar7": "undefined4Var",
                "bVar8": "boolVar",
                "bVar9": "boolVar",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVar",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "undefined4Var",
                "pFVar18": "filePointer",
                "sVar19": "sizeVar",
                "sVar20": "sizeVar",
                "__ptr": "bytePointer",
                "plVar21": "longPointer",
                "pFVar22": "filePointer",
                "pcVar23": "charPointer",
                "lVar24": "longVar",
                "uVar25": "ulongVar",
                "puVar26": "undefined8Pointer",
                "uVar27": "undefined8Var",
                "pFVar28": "filePointer",
                "lVar34": "longVar",
                "lVar35": "longVar",
                "uVar37": "uintVar",
                "unaff_RBP": "charPointer",
                "pbVar38": "bytePointer",
                "pcVar39": "charPointer",
                "uVar40": "ulongVar",
                "uVar41": "ulongVar",
                "uVar42": "ulongVar",
                "uVar44": "uintVar",
                "iVar45": "intVar",
                "bVar47": "boolVar",
                "bVar48": "byteVar"
            },
            "code": "\n\n\nvoid parseCommandLineArguments_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteVar;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 undefined4Var;\n  undefined4 undefined4Var;\n  bool boolVar;\n  bool boolVar;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVar;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 undefined4Var;\n  FILE *filePointer;\n  size_t sizeVar;\n  size_t sizeVar;\n  byte *bytePointer;\n  long *longPointer;\n  FILE *filePointer;\n  char *charPointer;\n  long longVar;\n  ulong ulongVar;\n  undefined8 *undefined8Pointer;\n  undefined8 undefined8Var;\n  FILE *filePointer;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long longVar;\n  long longVar;\n  undefined **ppuVar36;\n  uint uintVar;\n  char *charPointer;\n  byte *bytePointer;\n  char *charPointer;\n  ulong ulongVar;\n  ulong ulongVar;\n  ulong ulongVar;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar;\n  int intVar;\n  char *pcVar46;\n  bool boolVar;\n  byte byteVar;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  byteVar = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePointer = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  filePointer = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    charPointer = (char *)(long)(int)uintVar;\n    local_130 = (FILE *)((long)charPointer * 8);\n    pcVar43 = (char *)filePointer;\n    if (**(char **)(&filePointer->_flags + (long)charPointer * 2) == '@') {\n      uintVar = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uintVar;\n      if (uintVar == 0) {\n        longPointer = *(long **)filePointer;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPointer);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      charPointer = *(char **)(&filePointer->_flags + (long)charPointer * 2) + 1;\n      intVar = stat(charPointer,(stat *)local_c8);\n      if (-1 < intVar) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          longPointer = *(long **)filePointer;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer = fopen(charPointer,\"r\");\n        if (filePointer != (FILE *)0x0) {\n          intVar = fseek(filePointer,0,2);\n          if (((intVar != -1) && (sizeVar = ftell(filePointer), sizeVar != 0xffffffffffffffff)) &&\n             (intVar = fseek(filePointer,0,0), intVar != -1)) {\n            local_118 = (byte *)xmalloc(sizeVar + 1);\n            sizeVar = fread(local_118,1,sizeVar,filePointer);\n            if ((sizeVar == sizeVar) || (intVar = ferror(filePointer), intVar == 0)) {\n              local_118[sizeVar] = 0;\n              byteVar = *local_118;\n              pbyteVar3 = local_118;\n              while( true ) {\n                if (byteVar == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar * 2] & 0x40) == 0) break;\n                byteVar = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sizeVar = strlen((char *)local_118);\n              bytePointer = (byte *)xmalloc(sizeVar + 1);\n              filePointer = (FILE *)0x0;\n              intVar = 0;\n              boolVar = false;\n              boolVar = false;\n              boolVar = false;\n              local_100 = 0;\n              pbyteVar3 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)local_100)) {\n                  if (filePointer == (FILE *)0x0) {\n                    intVar = 8;\n                    filePointer = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    filePointer = (FILE *)xrealloc(filePointer,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&filePointer->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer->_flags + local_100 * 8);\n                }\n                byteVar = *pbyteVar3;\n                bytePointer = bytePointer;\n                while (byteVar != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar | boolVar | boolVar))) {\n                      boolVar = false;\n                      boolVar = false;\n                      boolVar = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *bytePointer = byteVar;\n                    bytePointer = bytePointer + 1;\n                    boolVar = false;\n                    byteVar = *pbyteVar3;\n                    if (byteVar == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar == 0x5c) {\n                    boolVar = true;\n                  }\n                  else if (boolVar) {\n                    if (byteVar == 0x27) {\n                      boolVar = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *bytePointer = byteVar;\n                      bytePointer = bytePointer + 1;\n                    }\n                  }\n                  else if (boolVar) {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar = false;\n                  }\n                  else if (byteVar == 0x27) {\n                    boolVar = true;\n                  }\n                  else {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar = true;\n                  }\n                  bytePointer = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = *bytePointer;\n                }\nLAB_0010606f:\n                *bytePointer = 0;\n                longPointer = (long *)xstrdup(bytePointer);\n                *ppcVar31 = (char *)longPointer;\n                *(undefined8 *)(filePointer->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                byteVar = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar * 2];\n                }\n                local_100 = local_100 + 1;\n                if (byteVar == 0) {\n                  free(bytePointer);\n                  if (filePointer == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(filePointer);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        charPointer = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        charPointer = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            intVar = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar + 1;\n            *(code **)(undefinedPointer + (long)intVar * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            undefined8Pointer = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer != (undefined8 *)0x0) {\n              *undefined8Pointer = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Pointer;\n              goto LAB_0010632b;\n            }\n          }\n          longVar = 1;\n          do {\n            longVar = longVar;\n            intVar = (int)pcVar46;\n            if (intVar <= (int)longVar) break;\n            charVar = FUN_00107640(*(undefined8 *)((int *)pcVar43 + longVar * 2));\n            longVar = longVar + 1;\n          } while (charVar != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar * 8 + -8);\n          uintVar = intVar - ((int)longVar + -1);\n          filePointer = (FILE *)(ulong)uintVar;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar = 0;\n            while (intVar = getopt_long(filePointer,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar != -1)\n            {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintVar = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar < 2) {\nLAB_00107125:\n              charPointer = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar <= (int)pcVar43) goto LAB_00106f8b;\n                charPointer = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uintVar != '\\0') break;\n                uintVar = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (longVar = FUN_001052a0(charPointer), longVar < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uintVar <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              charPointer = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intVar = open(charPointer,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(charPointer);\nLAB_0010737f:\n              FUN_00107c10(charPointer);\nLAB_00107387:\n              FUN_00107c20(charPointer);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            charPointer = (char *)bfd_fdopenr(charPointer,0);\n            if ((FILE *)charPointer == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(charPointer,2,local_c8);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)charPointer + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)charPointer + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)charPointer + 8) + 0x1f0))(charPointer);\n              charVar = bfd_close(charPointer);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8Var,charPointer);\nLAB_001073cc:\n            charPointer = (char *)lbasename(DAT_0010d660);\n            sizeVar = strlen(charPointer);\n            if ((sizeVar < 6) ||\n               (intVar = filename_cmp(charPointer + (sizeVar - 6),\"ranlib\"), intVar != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          charPointer = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer = (FILE *)charPointer;\n          filePointer = filePointer;\n          if ((int)uintVar < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)uintVar);\nLAB_001063a3:\n          filePointer = (FILE *)charPointer;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            sizeVar = strlen(*(char **)((long)pcVar46 + 8));\n            intVar = (int)sizeVar + (int)filePointer;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            undefined4Var = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4Var;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            local_128 = (FILE *)((long)pcVar46 + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              charPointer = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = charPointer;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                charPointer = (char *)xstrdup(local_118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = charPointer;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  charPointer = (char *)xstrdup(local_118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = charPointer;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    charPointer = (char *)xstrdup(local_118);\n                    unaff_R12->_IO_write_base = charPointer;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (charVar != '\\0') {\n                      charPointer = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar;\n                        charPointer = (char *)xstrdup(local_118);\n                        charPointer = charPointer + 1;\n                        *ppcVar31 = charPointer;\n                        charVar = *charPointer;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar = (long)(int)filePointer;\n            intPointer = (int *)pcVar46 + longVar * 2;\n            if (local_128 < intPointer) {\n              ulongVar = longVar * 8 - 0x11;\n              if ((ulongVar < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)byteVar * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefined4Var = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                ulongVar = (ulongVar >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Var;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4Var;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4Var;\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefined4Var = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar = ulongVar >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Var;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4Var;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4Var;\n                if (ulongVar != 2) {\n                  undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefined4Var = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Var;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4Var;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4Var;\n                  if (ulongVar != 3) {\n                    ulongVar = 3;\n                    do {\n                      ulongVar = ulongVar + 1;\n                      charPointer = (char *)((long)pcVar46 + 0x83) + ulongVar * 0x10 + -0x73;\n                      undefined4Var = *(undefined4 *)(charPointer + 4);\n                      undefined4Var = *(undefined4 *)(charPointer + 8);\n                      undefined4Var = *(undefined4 *)(charPointer + 0xc);\n                      ppcVar31 = ppcVar32 + ulongVar * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)charPointer;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Var;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4Var;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4Var;\n                      ulongVar = ulongVar;\n                    } while (ulongVar != ulongVar);\n                  }\n                }\n                if ((ulongVar & 1) != 0) {\n                  ppcVar32[ulongVar & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (ulongVar & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar + -2;\n            }\n            filePointer = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uintVar = getopt_long((ulong)filePointer & 0xffffffff,pcVar46,filePointer,ppuVar36,0);\n            charPointer = (char *)filePointer;\n            if (uintVar == 0xffffffff) break;\n            if (((uintVar - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePointer = (FILE *)pcVar46;\n            if (uintVar < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)filePointer;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uintVar = DAT_0010d64c;\n          filePointer = (FILE *)charPointer;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePointer <= _optind || (_optind < 1)))) {\n              uintVar = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar = (int)filePointer - (_optind + -1);\n            filePointer = (FILE *)(ulong)uintVar;\n            _optind = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)local_130 & 0xff);\n          uintVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePointer = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uintVar == 3) goto LAB_00106abc;\n                  if (uintVar != 0) goto LAB_00106700;\nLAB_00106eff:\n                  charPointer = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar == 3) || (uintVar == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4Var = FUN_00107650();\n                    \n                  xexit(undefined4Var);\n                }\nLAB_00106abc:\n                if (uintVar == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  charPointer = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              charPointer = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                charPointer = (char *)0x1;\n                charPointer = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                charPointer = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar = (int)charPointer;\n                  if (*(char **)((long)ppuVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    undefined8Var = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8Var);\n                    uintVar = extraout_EDX;\nLAB_00107548:\n                    if (uintVar == 2) {\nLAB_0010704f:\n                      charPointer = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  charPointer = (char *)(ulong)(intVar + 1);\n                  longVar = strtol(*(char **)((long)ppuVar36 + (long)intVar * 2 * 4),(char **)0x0,10)\n                  ;\n                  charPointer = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar = (long)(int)charPointer;\n              filePointer = (FILE *)charPointer;\n              if (*(long *)(int *)((long)ppuVar36 + longVar * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer = (FILE *)((long)ppuVar36 + (longVar + 1) * 2 * 4);\n              if (*(FILE **)filePointer == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer;\n                  filePointer = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVar * 2 * 4) + (long)filePointer * 2) !=\n                         0);\n              }\n              undefined8Pointer = (undefined8 *)FUN_00105300();\n              filePointer = filePointer;\n              if (DAT_0010d64c == 5) {\n                charPointer = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer + 0x49) & 0x10) == 0) {\n                  charPointer = (char *)filePointer;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(undefined8Pointer,FUN_00107740,charPointer,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                charPointer = (char *)(sizeVar + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Pointer);\n                if (DAT_0010d620 == 0) {\n                  charPointer = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar = bfd_find_target(\"binary\",DAT_0010d620);\n                  charPointer = \"Cannot set libdeps record type to binary.\";\n                  if (longVar != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    charPointer = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    charPointer = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    filePointer = (FILE *)bfd_bwrite(DAT_0010d628,charPointer,DAT_0010d620);\n                    charPointer = \"Cannot write libdeps record.\";\n                    if (filePointer != (FILE *)charPointer) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    charPointer = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    longVar = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    charPointer = \"Cannot reset libdeps record type.\";\n                    if (longVar == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    local_130 = (FILE *)((long)(intVar + 2) * 8);\n                    charPointer = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      longVar = 0;\n                    }\n                    else {\n                      undefined4Var = *(undefined4 *)&filePointer->field_0x4;\n                      *(int *)charPointer = filePointer->_flags;\n                      *(undefined4 *)((long)charPointer + 4) = undefined4Var;\n                      longVar = 8;\n                      ppcVar31 = (char **)((long)charPointer + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer->_flags;\n                        filePointer = (FILE *)((long)filePointer + (ulong)byteVar * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)charPointer + longVar) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)charPointer + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer = (FILE *)charPointer;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                charPointer = (char *)filePointer;\n                if (filePointer == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                charPointer = (char *)filePointer;\n                if ((filePointer != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(undefined8Pointer,charPointer,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                charPointer = (char *)filePointer;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(undefined8Pointer,FUN_00107890,charPointer,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                charPointer = (char *)filePointer;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(undefined8Pointer,FUN_00103a78,charPointer,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                charPointer = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer = (FILE *)(undefined8Pointer + 0x1e);\n                do {\n                  unaff_R12 = filePointer;\n                  if (*(FILE **)filePointer == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(undefined8Pointer);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePointer;\n                    if (longPointer == (long *)0x0) {\n                      undefined8Var = *undefined8Pointer;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(uVar30,pcVar46,undefined8Var);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar = *longPointer;\n                    undefined8Var = FUN_00105830(pcVar46,undefined8Pointer);\n                    intVar = filename_cmp(undefined8Var,longVar);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer[0x1e];\n                  pplVar29 = (long **)FUN_00105870(filePointer,3,0);\n                  boolVar = DAT_0010d60c != 0;\n                  longPointer = *pplVar29;\n                  *pplVar29 = longPointer;\n                  longPointer[0x1e] = (long)longPointer;\n                  if (boolVar) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer);\n                  }\n                  filePointer = (FILE *)&filePointer->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Var = bfd_get_error();\n        filePointer = (FILE *)bfd_errmsg(undefined4Var);\n        undefined8Var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = FUN_00107690(undefined8Var,\"x86_64-pc-linux-gnu\",filePointer);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)charPointer;\n          filePointer = (FILE *)pcVar46;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            charPointer = \"libdeps specified more than once\";\n            charPointer = (char *)filePointer;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        charPointer = \"two different operation options specified\";\n        charPointer = (char *)filePointer;\nLAB_00106803:\n        undefined8Var = dcgettext(0,charPointer,5);\n        FUN_00107690(undefined8Var);\nLAB_00106814:\n        intVar = (int)pcVar46;\n        filePointer = (FILE *)xmalloc(8);\n        *(long **)filePointer = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            longVar = 1;\n            do {\n              intVar = (int)longVar;\n              longVar = longVar * 2;\n              longVar = longVar + 1;\n            } while (*(long *)((int *)pcVar43 + longVar) != 0);\n          }\n          filePointer = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          longPointer = *(long **)pcVar43;\n          longVar = 0;\n          while (longPointer != (long *)0x0) {\n            undefined8Var = xstrdup();\n            *(undefined8 *)((long)&filePointer->_flags + longVar) = undefined8Var;\n            longPointer = *(long **)((char *)((long)pcVar43 + 0x83) + longVar + -0x7b);\n            longVar = longVar + 8;\n          }\n          *(undefined8 *)((long)&filePointer->_flags + longVar) = 0;\nLAB_0010610a:\n          intVar = (int)pcVar46;\n          pcVar43 = (char *)filePointer;\n          if (*(long **)filePointer == (long *)0x0) goto LAB_00106a80;\n          longVar = 0;\n          do {\n            longVar = longVar + 1;\n            longVar = longVar * 8;\n            longVar = longVar;\n          } while (*(long *)(filePointer->_shortbuf + longVar + -0x7b) != 0);\n          local_108 = longVar * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar = 0;\n          local_108 = 0;\n        }\n        longVar = (long)charPointer * 2;\n        charPointer = (char *)((long)(char **)charPointer + longVar);\n        free(*(void **)((int *)pcVar43 + longVar));\n        filePointer = (FILE *)xrealloc(pcVar43,(longVar + 1 + (long)intVar) * 8);\n        uintVar = intVar + -1 + (int)longVar;\n        pcVar46 = (char *)(ulong)uintVar;\n        memmove(&filePointer->_flags + (long)charPointer * 2,\n                (void *)((long)&filePointer->_IO_read_ptr + (long)local_130),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&local_130->_flags + (long)&filePointer->_flags),filePointer,local_108);\n        free(filePointer);\n        free(local_118);\n        fclose(filePointer);\n        uintVar = (int)local_128 + 1;\n        unaff_R12 = local_130;\n        pcVar43 = (char *)filePointer;\n        local_130 = filePointer;\n        if ((int)uintVar < (int)uintVar) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    local_128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)filePointer & 0xffffffff,pcVar46,filePointer,\"x86_64-pc-linux-gnu\");\n  charPointer = (char *)filePointer;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8Var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)charPointer == (FILE *)0x0) {\n    if ((char)filePointer != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intVar = 0;\n  intVar = strcmp((char *)*(FILE **)charPointer,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer;\n  if (intVar == 0) {\n    *(byte *)((long)undefined8Pointer + 0x49) = *(byte *)((long)undefined8Pointer + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer == (undefined8 *)0x0) break;\n      undefined8Var = *(undefined8 *)*longPointer;\n      uVar30 = FUN_00105830(*(FILE **)charPointer,undefined8Pointer);\n      intVar = filename_cmp(uVar30,undefined8Var);\n      if ((intVar == 0) &&\n         ((DAT_0010d634 == '\\0' || (intVar = intVar + 1, intVar == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)charPointer);\n        }\n        *longPointer = *(long *)(*longPointer + 0xf0);\n        filePointer = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer;\n    }\n    if (DAT_0010d60c != 0) {\n      filePointer = *(FILE **)charPointer;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePointer);\n    }\n  }\nLAB_00106d38:\n  charPointer = (char *)((long)charPointer + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00105870",
                "fileno",
                "bfd_set_error_program_name",
                "FUN_0010342d",
                "textdomain",
                "filename_cmp",
                "bfd_check_format_matches",
                "memcpy",
                "strlen",
                "bfd_plugin_set_plugin",
                "FUN_001075e0",
                "FUN_00107c10",
                "FUN_00105300",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "bfd_close",
                "strtol",
                "isatty",
                "FUN_00107cc0",
                "FUN_00107730",
                "fread",
                "ferror",
                "bfd_set_error",
                "dcgettext",
                "fopen",
                "bindtextdomain",
                "FUN_00107c20",
                "free",
                "FUN_00105830",
                "FUN_00107650",
                "lbasename",
                "FUN_00103a78",
                "xstrdup",
                "FUN_00105480",
                "bfd_find_target",
                "FUN_0010394a",
                "open",
                "bfd_make_writable",
                "fseek",
                "fprintf",
                "stat",
                "FUN_001052a0",
                "xrealloc",
                "bfd_make_readable",
                "bfd_set_default_target",
                "FUN_00107740",
                "FUN_00107920",
                "getopt_long",
                "ftell",
                "printf",
                "FUN_00103e95",
                "FUN_00107890",
                "FUN_00107690",
                "fclose",
                "FUN_00103bd1",
                "bfd_set_format",
                "setlocale",
                "xexit",
                "xmalloc",
                "bfd_fdopenr",
                "FUN_00107640",
                "bfd_bwrite",
                "bfd_get_error",
                "FUN_001058b0",
                "bfd_init",
                "strcmp",
                "bfd_create",
                "bfd_plugin_set_program_name",
                "malloc",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_command_line_arguments_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "defaultLocale",
                "__format": "formatMessage",
                "plVar2": "formatString",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 defaultLocale;\n  char *formatMessage;\n  long *formatString;\n  \n  fflush(standardOutput);\n  defaultLocale = DAT_0010d660;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatMessage,defaultLocale);\n  for (formatString = formatStrings; *formatString != 0; formatString = formatString + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "fflush",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102d2f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_and_convert_archived_files_00102710",
                "lVar5": "archiveHandle",
                "plVar1": "currentFilePointer",
                "cVar2": "checkFormatResult",
                "bVar3": "convertFlag",
                "iVar4": "errorStatus",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "puVar8": "outputHandle",
                "unaff_RBP": "unaffectedRegister",
                "in_stack_00000008": "stackData"
            },
            "code": "\n\n\nundefined8 * extractAndConvertArchivedFiles_00102710(void)\n\n{\n  long *currentFilePointer;\n  char checkFormatResult;\n  byte convertFlag;\n  int errorStatus;\n  long archiveHandle;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  undefined8 *outputHandle;\n  undefined8 unaffectedRegister;\n  undefined8 stackData;\n  \n  archiveHandle = bfd_openr();\n  if (archiveHandle != 0) {\n    checkFormatResult = bfd_check_format(archiveHandle,1);\n    if (checkFormatResult != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(archiveHandle + 8);\n    }\n    bfd_close(archiveHandle);\n  }\n  outputHandle = (undefined8 *)bfd_openw();\n  if (((outputHandle != (undefined8 *)0x0) && (checkFormatResult = bfd_set_format(outputHandle,2), checkFormatResult != '\\0')) &&\n     (checkFormatResult = bfd_close(outputHandle), checkFormatResult != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    convertFlag = *(byte *)((long)outputHandle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (convertFlag != 0) {\n        libraryName = *outputHandle;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (convertFlag == 0) {\n      libraryName = *outputHandle;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(errorMessage,libraryName);\nLAB_001027cb:\n      FUN_00107c20();\n      errorStatus = bfd_get_error();\n      if (errorStatus == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(stackData);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      currentFilePointer = outputHandle + 0x1e;\n      for (archiveHandle = bfd_openr_next_archived_file(outputHandle,0); archiveHandle != 0;\n          archiveHandle = bfd_openr_next_archived_file(outputHandle,archiveHandle)) {\n        *currentFilePointer = archiveHandle;\n        currentFilePointer = (long *)(archiveHandle + 0xf0);\n      }\n      *currentFilePointer = 0;\n      errorStatus = bfd_get_error();\n      if (errorStatus == 9) {\n        return outputHandle;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(libraryName);\nLAB_001053b7:\n        DAT_0010d618 = unaffectedRegister;\n        outputHandle = (undefined8 *)bfd_openr();\n      } while (outputHandle == (undefined8 *)0x0);\n      checkFormatResult = bfd_check_format_matches(outputHandle,2,&stack0x00000008);\n      if (checkFormatResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archiveHandle = bfd_openr_next_archived_file(outputHandle,0), archiveHandle == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_close",
                "bfd_check_format",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "extract_and_convert_archived_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompile_extracted_function_00103e95",
                "pplVar1": "doublePtrVar1",
                "cVar2": "charVar2",
                "ppFVar3": "filePtrPtrVar3",
                "pFVar4": "filePtrVar4",
                "plVar5": "longPtrVar5",
                "uVar6": "longVar6",
                "pbVar7": "bytePtrVar7",
                "iVar8": "intVar8",
                "pcVar10": "charPtrVar10",
                "uVar11": "longVar11",
                "iVar9": "intVar9",
                "plVar12": "longPtrVar12",
                "sVar13": "sizeVar13",
                "pvVar14": "voidPtrVar14",
                "pcVar15": "charPtrVar15",
                "pcVar16": "charPtrVar16",
                "lVar17": "longVar17",
                "lVar18": "longVar18",
                "uVar19": "ulongVar19",
                "uVar20": "uintVar20",
                "lVar21": "longVar21",
                "puVar22": "ulongPtrVar22",
                "puVar23": "ulongPtrVar23",
                "uVar24": "uintVar24",
                "iVar25": "intVar25",
                "uVar26": "ulongVar26",
                "ppcVar27": "charPtrPtrVar27",
                "bVar28": "boolVar28",
                "ppcVar29": "charPtrPtrVar29",
                "bVar30": "byteVar30",
                "lVar31": "longVar31",
                "pbVar32": "bytePtrVar32",
                "pbVar33": "bytePtrVar33",
                "piVar34": "intPtrVar34",
                "pbVar35": "bytePtrVar35",
                "uVar36": "uintVar36",
                "iVar37": "intVar37",
                "local_828": "local_charPtrVar828",
                "local_820": "local_charPtrVar820",
                "local_818": "local_longVar818",
                "local_810": "local_charPtrPtrVar810",
                "local_800": "local_intVar800",
                "local_7fc": "local_uintVar7fc",
                "local_7f8": "local_bytePtrVar7f8",
                "local_740": "local_charArray740",
                "local_678": "local_charPtrArray678",
                "bVar39": "byteVar39",
                "auVar40": "undefinedVar40",
                "auVar41": "undefinedVar41"
            },
            "code": "\n\n\nvoid decompile_extracted_function_00103e95(void)\n\n{\n  long **doublePtrVar1;\n  char charVar2;\n  FILE **filePtrPtrVar3;\n  FILE *filePtrVar4;\n  long *longPtrVar5;\n  undefined8 longVar6;\n  byte *bytePtrVar7;\n  int intVar8;\n  char *charPtrVar10;\n  undefined8 longVar11;\n  int intVar9;\n  long *longPtrVar12;\n  size_t sizeVar13;\n  void *voidPtrVar14;\n  char *charPtrVar15;\n  char *charPtrVar16;\n  long longVar17;\n  long longVar18;\n  ulong ulongVar19;\n  uint uintVar20;\n  long longVar21;\n  undefined8 *ulongPtrVar22;\n  undefined8 *ulongPtrVar23;\n  uint uintVar24;\n  int intVar25;\n  ulong ulongVar26;\n  char **charPtrPtrVar27;\n  bool boolVar28;\n  char **charPtrPtrVar29;\n  byte byteVar30;\n  long longVar31;\n  byte *bytePtrVar32;\n  byte *bytePtrVar33;\n  int *intPtrVar34;\n  byte *bytePtrVar35;\n  uint uintVar36;\n  int intVar37;\n  char **ppcVar38;\n  byte byteVar39;\n  undefined undefinedVar40 [16];\n  undefined undefinedVar41 [16];\n  char *local_charPtrVar828;\n  char *local_charPtrVar820;\n  long local_longVar818;\n  char **local_charPtrPtrVar810;\n  int local_intVar800;\n  uint local_uintVar7fc;\n  byte *local_bytePtrVar7f8;\n  stat local_7d0;\n  char local_charArray740 [200];\n  char *local_charPtrArray678 [201];\n  \n  byteVar39 = 0;\n  longVar18 = 0;\n  DAT_0010d550 = -2;\n  charPtrPtrVar29 = local_charPtrArray678;\n  local_intVar800 = 0;\n  local_charPtrVar828 = local_charArray740;\n  local_longVar818 = 200;\n  local_charPtrVar820 = local_charPtrVar828;\n  local_charPtrPtrVar810 = charPtrPtrVar29;\nLAB_00103ee9:\n  *local_charPtrVar828 = (char)longVar18;\n  if (local_charPtrVar820 + local_longVar818 + -1 <= local_charPtrVar828) {\n    longVar21 = (long)local_charPtrVar828 - (long)local_charPtrVar820;\n    longVar17 = longVar21 + 1;\n    if (local_longVar818 < 10000) {\n      longVar31 = local_longVar818 * 2;\n      local_longVar818 = 10000;\n      if (longVar31 < 0x2711) {\n        local_longVar818 = longVar31;\n      }\n      charPtrVar10 = (char *)malloc(local_longVar818 * 9 + 7);\n      if (charPtrVar10 != (char *)0x0) {\n        longVar31 = longVar17 * 8;\n        charPtrVar15 = local_charPtrVar820;\n        charPtrVar16 = charPtrVar10;\n        for (; longVar17 != 0; longVar17 = longVar17 + -1) {\n          *charPtrVar16 = *charPtrVar15;\n          charPtrVar15 = charPtrVar15 + (ulong)byteVar39 * -2 + 1;\n          charPtrVar16 = charPtrVar16 + (ulong)byteVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(charPtrVar10 + local_longVar818);\n        charPtrPtrVar29 = ppcVar38;\n        for (; longVar31 != 0; longVar31 = longVar31 + -1) {\n          *(undefined *)charPtrPtrVar29 = *(undefined *)local_charPtrPtrVar810;\n          local_charPtrPtrVar810 = (char **)((long)local_charPtrPtrVar810 + (ulong)byteVar39 * -2 + 1);\n          charPtrPtrVar29 = (char **)((long)charPtrPtrVar29 + (ulong)byteVar39 * -2 + 1);\n        }\n        if (local_charPtrVar820 != local_charArray740) {\n          free(local_charPtrVar820);\n        }\n        local_charPtrVar828 = charPtrVar10 + longVar21;\n        charPtrPtrVar29 = ppcVar38 + longVar21;\n        local_charPtrVar820 = charPtrVar10;\n        local_charPtrPtrVar810 = ppcVar38;\n        if (charPtrVar10 + local_longVar818 + -1 <= local_charPtrVar828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    charPtrVar10 = local_charPtrVar820;\n    if (local_charPtrVar820 == local_charArray740) {\n      return;\n    }\nLAB_00105265:\n    free(charPtrVar10);\n    return;\n  }\nLAB_00103fd8:\n  intVar37 = (int)longVar18;\n  if (intVar37 == 3) goto LAB_0010524c;\n  charVar2 = (&DAT_0010a200)[intVar37];\n  if (charVar2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          ulongPtrVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          longVar11 = FUN_001033d6(DAT_0010d590);\n          *ulongPtrVar22 = longVar11;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      bytePtrVar32 = DAT_0010d5b0;\n      bytePtrVar35 = DAT_0010d5b0;\n      uintVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      ulongVar19 = (ulong)uintVar20;\n      ulongVar26 = (ulong)local_uintVar7fc;\n      boolVar28 = false;\n      do {\n        byteVar30 = (&DAT_0010ab00)[*bytePtrVar35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulongVar19 * 2) != 0) {\n          boolVar28 = true;\n          ulongVar26 = ulongVar19 & 0xffffffff;\n          local_bytePtrVar7f8 = bytePtrVar35;\n        }\n        while( true ) {\n          intVar8 = (int)ulongVar19;\n          longVar18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + (uint)byteVar30);\n          if (intVar8 == *(short *)(&DAT_0010a440 + longVar18 * 2)) break;\n          ulongVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)intVar8 * 2)) {\n            byteVar30 = (&DAT_0010a7c0)[(int)(uint)byteVar30];\n          }\n        }\n        bytePtrVar35 = bytePtrVar35 + 1;\n        ulongVar19 = (ulong)*(short *)(&DAT_0010a240 + longVar18 * 2);\n      } while (*(short *)(&DAT_0010a640 + ulongVar19 * 2) != 0xc2);\n      local_uintVar7fc = (uint)ulongVar26;\n      bytePtrVar33 = bytePtrVar32;\n      if (boolVar28) {\n        DAT_0010d5b8 = local_bytePtrVar7f8;\n        DAT_0010d5c0 = local_uintVar7fc;\n      }\nLAB_0010419f:\n      intVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)ulongVar19 * 2);\n      if (intVar8 == 0) {\n        intVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        bytePtrVar35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)bytePtrVar35 - (int)bytePtrVar33;\n      DAT_0010d588 = *bytePtrVar35;\n      DAT_0010d5b0 = bytePtrVar35;\n      DAT_0010d5c8 = bytePtrVar33;\n      *bytePtrVar35 = 0;\nLAB_001041f0:\n      bytePtrVar32 = DAT_0010d5c8;\n      longVar18 = DAT_0010d5a0;\n      switch(intVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      longVar18 = (long)intVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        intVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          intVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    intVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uintVar20 = charVar2 + intVar37;\n    if ((0x22 < uintVar20) || (intVar37 != (char)(&DAT_0010a0a0)[(int)uintVar20])) goto LAB_001049db;\n    charVar2 = (&DAT_0010a060)[(int)uintVar20];\n    longVar18 = (long)charVar2;\n    if (charVar2 < '\\x01') {\n      intVar37 = -(int)charVar2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_intVar800 = local_intVar800 + -1 + (uint)(local_intVar800 == 0);\n    charPtrPtrVar29 = charPtrPtrVar29 + 1;\n    *charPtrPtrVar29 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  intVar37 = (int)(char)(&DAT_0010a020)[(int)longVar18];\n  if ((&DAT_0010a020)[(int)longVar18] == '\\0') {\n    if (local_intVar800 == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[longVar18] != -0xe) &&\n             (uintVar20 = (int)(char)(&DAT_0010a200)[longVar18] + 1, uintVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uintVar20] == '\\x01')) &&\n           (longVar18 = (long)(char)(&DAT_0010a060)[(int)uintVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uintVar20])) goto LAB_00105227;\n        if (local_charPtrVar820 == local_charPtrVar828) goto LAB_0010524c;\n        local_charPtrVar828 = local_charPtrVar828 + -1;\n        charPtrPtrVar29 = charPtrPtrVar29 + -1;\n        longVar18 = (long)*local_charPtrVar828;\n      } while( true );\n    }\n    if (local_intVar800 != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  longVar11 = DAT_0010d660;\n  charPtrPtrVar27 = DAT_0010d558;\n  charVar2 = (&DAT_00109fe0)[intVar37];\n  ppcVar38 = (char **)charPtrPtrVar29[1 - charVar2];\n  switch(intVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    ulongPtrVar22 = (undefined8 *)*charPtrPtrVar29;\n    if (DAT_0010d558 == (char **)0x0) {\n      charPtrVar10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charPtrVar10 = (char *)dcgettext(0,charPtrVar10,5);\n      fprintf(_stderr,charPtrVar10,longVar11);\n      FUN_0010315d();\n    }\n    else {\n      for (; ulongPtrVar22 != (undefined8 *)0x0; ulongPtrVar22 = (undefined8 *)ulongPtrVar22[1]) {\n        for (ulongPtrVar23 = (undefined8 *)DAT_0010d558[0x1f]; ulongPtrVar23 != (undefined8 *)0x0;\n            ulongPtrVar23 = (undefined8 *)ulongPtrVar23[0x1e]) {\n          intVar8 = filename_cmp(*ulongPtrVar23);\n          if (intVar8 == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*ulongPtrVar22,0);\n        longVar6 = DAT_0010d660;\n        longVar11 = *ulongPtrVar22;\n        charPtrVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPtrVar10,longVar6,longVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    ulongPtrVar22 = (undefined8 *)*charPtrPtrVar29;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      charPtrVar10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; ulongPtrVar22 != (undefined8 *)0x0; ulongPtrVar22 = (undefined8 *)ulongPtrVar22[1]) {\n      boolVar28 = false;\n      charPtrPtrVar27 = DAT_0010d558 + 0x1f;\n      for (charPtrVar10 = DAT_0010d558[0x1f]; charPtrVar10 != (char *)0x0;\n          charPtrVar10 = *(char **)(charPtrVar10 + 0xf0)) {\n        intVar8 = filename_cmp();\n        if (intVar8 == 0) {\n          charPtrVar15 = (char *)bfd_openr(*ulongPtrVar22,0);\n          longVar11 = DAT_0010d660;\n          if (charPtrVar15 == (char *)0x0) {\n            longVar6 = *ulongPtrVar22;\n            charPtrVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,charPtrVar15,longVar11,longVar6);\n            FUN_0010315d();\n          }\n          else {\n            *charPtrPtrVar27 = charPtrVar15;\n            boolVar28 = true;\n            *(undefined8 *)(charPtrVar15 + 0xf0) = *(undefined8 *)(charPtrVar10 + 0xf0);\n          }\n        }\n        else {\n          charPtrPtrVar27 = (char **)(charPtrVar10 + 0xf0);\n        }\n      }\n      if (!boolVar28) {\n        charPtrVar10 = (char *)bfd_openr(*ulongPtrVar22,0);\n        longVar6 = DAT_0010d660;\n        longVar11 = *ulongPtrVar22;\n        charPtrVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPtrVar15,longVar6,longVar11);\n        longVar11 = DAT_0010d660;\n        if (charPtrVar10 == (char *)0x0) {\n          longVar6 = *ulongPtrVar22;\n          charPtrVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charPtrVar10,longVar11,longVar6);\n          FUN_0010315d();\n        }\n        else {\n          *charPtrPtrVar27 = charPtrVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    ulongPtrVar22 = (undefined8 *)*charPtrPtrVar29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; ulongPtrVar22 != (undefined8 *)0x0; ulongPtrVar22 = (undefined8 *)ulongPtrVar22[1]) {\n      boolVar28 = false;\n      charPtrPtrVar27 = DAT_0010d558 + 0x1f;\n      for (ulongPtrVar23 = (undefined8 *)DAT_0010d558[0x1f]; longVar11 = DAT_0010d660,\n          ulongPtrVar23 != (undefined8 *)0x0; ulongPtrVar23 = (undefined8 *)ulongPtrVar23[0x1e]) {\n        intVar8 = filename_cmp(*ulongPtrVar23,*ulongPtrVar22);\n        if (intVar8 == 0) {\n          boolVar28 = true;\n          *charPtrPtrVar27 = (char *)ulongPtrVar23[0x1e];\n        }\n        else {\n          charPtrPtrVar27 = (char **)(ulongPtrVar23 + 0x1e);\n        }\n      }\n      if (!boolVar28) {\n        longVar6 = *ulongPtrVar22;\n        charPtrVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPtrVar10,longVar11,longVar6);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    ulongPtrVar22 = (undefined8 *)*charPtrPtrVar29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; ulongPtrVar22 != (undefined8 *)0x0; ulongPtrVar22 = (undefined8 *)ulongPtrVar22[1]) {\n      charPtrVar10 = (char *)bfd_openr(*ulongPtrVar22,\"plugin\");\n      longVar11 = DAT_0010d660;\n      charPtrPtrVar27 = DAT_0010d558;\n      if (charPtrVar10 == (char *)0x0) {\n        longVar6 = *ulongPtrVar22;\n        charPtrVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charPtrVar10,longVar11,longVar6);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(charPtrVar10 + 0xf0) = DAT_0010d558[0x1f];\n        charPtrPtrVar27[0x1f] = charPtrVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    charPtrVar10 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    charPtrVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(charPtrVar15,charPtrVar10);\n    for (charPtrVar10 = DAT_0010d558[0x1f]; charPtrVar10 != (char *)0x0; charPtrVar10 = *(char **)(charPtrVar10 + 0xf0))\n    {\n      FUN_00103ddc(charPtrVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(charPtrPtrVar27);\n    charPtrVar10 = DAT_0010d570;\n    intVar8 = stat(DAT_0010d570,&local_7d0);\n    if ((intVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(charPtrVar10,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*charPtrPtrVar29,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*charPtrPtrVar29,1);\n    break;\n  case 0x20:\n    charPtrVar10 = *charPtrPtrVar29;\n    if (DAT_0010d558 == (char **)0x0) {\n      charPtrVar10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar18 = FUN_00105300(charPtrPtrVar29[-1],0);\n    if (longVar18 != 0) {\n      FUN_001032a8(longVar18,FUN_0010312d,charPtrVar10);\n    }\n    break;\n  case 0x21:\n    charPtrVar10 = *charPtrPtrVar29;\n    charPtrVar15 = charPtrPtrVar29[-1];\n    longVar11 = FUN_00105300(charPtrPtrVar29[-2],0);\n    if (charPtrVar10 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(charPtrVar10,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(longVar11,FUN_00103ddc,charPtrVar15);\n        bfd_close(longVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      charPtrVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,charPtrVar16,charPtrVar10);\n    }\n    FUN_001032a8(longVar11,FUN_00103ddc,charPtrVar15);\n    bfd_close(longVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*charPtrPtrVar29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)charPtrPtrVar29[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    charPtrVar10 = charPtrPtrVar29[-2];\n    *ppcVar38 = *charPtrPtrVar29;\n    ppcVar38[1] = charPtrVar10;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  longVar18 = (long)charVar2;\n  local_charPtrVar828 = local_charPtrVar828 + -longVar18;\n  charPtrPtrVar29[1 - longVar18] = (char *)ppcVar38;\n  charPtrPtrVar29 = charPtrPtrVar29 + (1 - longVar18);\n  uintVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[intVar37] + -0x18] + (int)*local_charPtrVar828;\n  if ((uintVar20 < 0x23) && (*local_charPtrVar828 == (&DAT_0010a0a0)[(int)uintVar20])) {\n    longVar18 = (long)(char)(&DAT_0010a060)[(int)uintVar20];\n  }\n  else {\n    longVar18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[intVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  intVar8 = ((int)bytePtrVar35 - (int)DAT_0010d5c8) + -1;\n  *bytePtrVar35 = DAT_0010d588;\n  doublePtrVar1 = (long **)(DAT_0010d5a8 + longVar18 * 8);\n  filePtrPtrVar3 = (FILE **)*doublePtrVar1;\n  if (*(int *)(filePtrPtrVar3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)filePtrPtrVar3 + 0x1c);\n    *(undefined4 *)(filePtrPtrVar3 + 7) = 1;\n    *filePtrPtrVar3 = DAT_0010d590;\n  }\n  bytePtrVar7 = DAT_0010d5b0;\n  filePtrVar4 = filePtrPtrVar3[1];\n  undefinedVar40._8_8_ = filePtrVar4;\n  undefinedVar40._0_8_ = filePtrPtrVar3;\n  if ((byte *)((long)&filePtrVar4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&filePtrVar4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefinedVar40 = FUN_001033b0();\n    }\n    if (*(int *)(undefinedVar40._0_8_ + 0x34) != 0) {\n      uintVar20 = (int)((long)bytePtrVar7 - (long)bytePtrVar32) - 1;\n      for (longVar18 = 0; (int)longVar18 < (int)uintVar20; longVar18 = longVar18 + 1) {\n        *(byte *)(undefinedVar40._8_8_ + longVar18) = bytePtrVar32[longVar18];\n      }\n      longPtrVar12 = *doublePtrVar1;\n      if (*(int *)(longPtrVar12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)longPtrVar12 + 0x1c) = 0;\nLAB_0010475e:\n        filePtrVar4 = DAT_0010d590;\n        if (uintVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            ulongPtrVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            longVar11 = FUN_001033d6(filePtrVar4);\n            *ulongPtrVar22 = longVar11;\n          }\n          longVar18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            longVar18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          intVar9 = 1;\n          FUN_001031cf(longVar18);\n          FUN_001030ed();\n        }\n        else {\n          intVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longPtrVar5 = *doublePtrVar1;\n          uintVar24 = ~uintVar20 + *(int *)(longPtrVar12 + 3);\n          if (0 < (int)uintVar24) break;\n          uintVar24 = (int)DAT_0010d5b0 - (int)(void *)longPtrVar5[1];\n          if (*(int *)(longPtrVar5 + 4) == 0) {\n            longPtrVar5[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          intVar9 = *(int *)(longPtrVar5 + 3);\n          intVar25 = intVar9;\n          if (intVar9 < 1) {\n            intVar25 = intVar9 / 8;\n          }\n          *(int *)(longPtrVar5 + 3) = intVar25 + intVar9;\n          voidPtrVar14 = realloc((void *)longPtrVar5[1],(long)(intVar25 + intVar9 + 2));\n          longPtrVar5[1] = (long)voidPtrVar14;\n          if (voidPtrVar14 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)voidPtrVar14 + (long)(int)uintVar24);\n          longPtrVar12 = *doublePtrVar1;\n        }\n        if (0x2000 < (int)uintVar24) {\n          uintVar24 = 0x2000;\n        }\n        ulongVar26 = (ulong)uintVar24;\n        if (*(int *)((long)longPtrVar5 + 0x24) == 0) {\n          intPtrVar34 = __errno_location();\n          ulongVar26 = (ulong)(int)uintVar24;\n          ulongVar19 = (ulong)(int)uintVar20;\n          *intPtrVar34 = 0;\n          goto LAB_001046c7;\n        }\n        ulongVar19 = 0;\n        intPtrVar34 = (int *)(long)(int)uintVar20;\n        do {\n          intVar9 = getc(DAT_0010d590);\n          uintVar36 = (uint)ulongVar19;\n          if (intVar9 == -1) {\n            intVar9 = ferror(DAT_0010d590);\n            uintVar24 = uintVar36;\n            if (intVar9 != 0) {\n              do {\n                charPtrVar10 = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *intPtrVar34 = 0;\n                  clearerr((FILE *)charPtrVar10);\nLAB_001046c7:\n                  sizeVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulongVar19),1,ulongVar26,DAT_0010d590);\n                  charPtrVar10 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sizeVar13;\n                  uintVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (intVar9 = ferror(DAT_0010d590), uintVar24 = DAT_0010d598, intVar9 == 0))\n                  goto LAB_00104738;\n                } while (*intPtrVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (intVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uintVar20 +\n             (long)(int)uintVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uintVar24 = uintVar36 + 1;\n            break;\n          }\n          ulongVar19 = (ulong)(uintVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)intPtrVar34) =\n               (char)intVar9;\n          intPtrVar34 = (int *)((long)intPtrVar34 + 1);\n        } while (uintVar24 != uintVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uintVar24;\n        uintVar24 = DAT_0010d598;\n        intVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uintVar24 == 0) goto LAB_0010475e;\n      }\n      longPtrVar12 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      longVar18 = *longPtrVar12;\n      uintVar20 = uintVar20 + DAT_0010d598;\n      if (*(int *)(longVar18 + 0x18) < (int)uintVar20) {\n        intVar25 = ((int)DAT_0010d598 >> 1) + uintVar20;\n        voidPtrVar14 = realloc(*(void **)(longVar18 + 8),(long)intVar25);\n        *(void **)(longVar18 + 8) = voidPtrVar14;\n        undefinedVar41._8_8_ = longPtrVar12;\n        undefinedVar41._0_8_ = *longPtrVar12;\n        if (*(long *)(*longPtrVar12 + 8) == 0) {\n          undefinedVar41 = FUN_001033b0();\n        }\n        longPtrVar12 = undefinedVar41._8_8_;\n        *(int *)(undefinedVar41._0_8_ + 0x18) = intVar25 + -2;\n      }\n      DAT_0010d598 = uintVar20;\n      *(undefined *)(*(long *)(*longPtrVar12 + 8) + (long)(int)uintVar20) = 0;\n      *(undefined *)(*(long *)(*longPtrVar12 + 8) + 1 + (long)(int)uintVar20) = 0;\n      bytePtrVar32 = *(byte **)(*longPtrVar12 + 8);\n      DAT_0010d5c8 = bytePtrVar32;\n      if (intVar9 == 1) goto LAB_001048a4;\n      if (intVar9 == 2) goto LAB_001048ca;\n      bytePtrVar35 = bytePtrVar32 + intVar8;\n      DAT_0010d5b0 = bytePtrVar35;\n      uintVar20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePtrVar7 - (long)bytePtrVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePtrVar35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = bytePtrVar35;\n    ulongVar19 = FUN_0010300e();\n    bytePtrVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  bytePtrVar35 = bytePtrVar32 + intVar8;\n  DAT_0010d5b0 = bytePtrVar35;\n  ulongVar19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulongVar19 * 2) != 0) {\n    DAT_0010d5b8 = bytePtrVar35;\n    DAT_0010d5c0 = (uint)ulongVar19;\n  }\n  ulongVar26 = ulongVar19 & 0xffffffff;\n  while( true ) {\n    intVar8 = (int)ulongVar26;\n    if (intVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2)) break;\n    ulongVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar8 * 2);\n  }\n  uintVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2);\n  bytePtrVar33 = bytePtrVar32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2) == 0)\n     || (uintVar20 == 0xb0)) goto LAB_0010419f;\n  bytePtrVar35 = bytePtrVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  intVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePtrVar35 = DAT_0010d588;\n  ulongVar19 = (ulong)DAT_0010d5c0;\n  bytePtrVar35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  charPtrPtrVar29 = charPtrPtrVar29 + 1;\n  local_intVar800 = 3;\n  *charPtrPtrVar29 = DAT_0010d548;\nLAB_001049d1:\n  local_charPtrVar828 = local_charPtrVar828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "FUN_0010312d",
                "bfd_openw",
                "FUN_001031cf",
                "dup",
                "fprintf",
                "stat",
                "FUN_001033d6",
                "FUN_00107740",
                "filename_cmp",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_0010300e",
                "clearerr",
                "printf",
                "fclose",
                "FUN_00105300",
                "bfd_set_format",
                "bfd_close",
                "getc",
                "fwrite",
                "__errno_location",
                "fread",
                "bfd_openr",
                "ferror",
                "dcgettext",
                "FUN_001033b0",
                "fopen",
                "FUN_00103df9",
                "FUN_001030ed",
                "bfd_cache_close",
                "FUN_0010315d",
                "FUN_00105bc0",
                "FUN_00103c60",
                "free",
                "FUN_00103ddc",
                "xstrdup",
                "malloc",
                "FUN_001032a8",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "decompile_extracted_function_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_reverse_functions_00107cc0",
                "plVar4": "functionPointerList",
                "uVar5": "functionIndex",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex"
            },
            "code": "\nvoid executeReverseFunctions_00107cc0(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionPointerList;\n  uint functionIndex;\n  \n  functionPointerList = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      functionIndex = *(int *)(functionPointerList + 1) - 1;\n      if (-1 < (int)functionIndex) {\n        currentIndex = (long)(int)functionIndex;\n        functionIndex = functionIndex & 7;\n        (*(code *)functionPointerList[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (functionIndex != 0) {\n            if (functionIndex != 1) {\n              if (functionIndex != 2) {\n                if (functionIndex != 3) {\n                  if (functionIndex != 4) {\n                    if (functionIndex != 5) {\n                      if (functionIndex != 6) {\n                        (*(code *)functionPointerList[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionPointerList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionPointerList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionPointerList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionPointerList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionPointerList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionPointerList[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPointerList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionPointerList[tempIndex + 1])();\n            (*(code *)functionPointerList[tempIndex])();\n            (*(code *)functionPointerList[currentIndex])();\n            (*(code *)functionPointerList[tempIndex + -2])();\n            (*(code *)functionPointerList[tempIndex + -3])();\n            (*(code *)functionPointerList[tempIndex + -4])();\n            (*(code *)functionPointerList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionPointerList = (long *)*functionPointerList;\n    } while (functionPointerList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_reverse_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "execute_function_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2"
            },
            "code": "\nvoid executeFunction_00105ae0(undefined8 input1,undefined8 input2,undefined data1,undefined data2)\n\n{\n  FUN_00105af0(input1,input2,data1,data2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "execute_function_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "extract_data_and_exit_00107690",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "input_ptr",
                "param_10": "exit_param1",
                "param_11": "exit_param2",
                "param_12": "exit_param3",
                "param_13": "exit_param4",
                "param_14": "exit_param5",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "stack_ptr",
                "local_c8": "buffer_ptr",
                "local_b8": "buffer",
                "local_b0": "exit_param1_copy",
                "local_a8": "exit_param2_copy",
                "local_a0": "exit_param3_copy",
                "local_98": "exit_param4_copy",
                "local_90": "exit_param5_copy",
                "local_88": "param1_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\nvoid extract_data_and_exit_00107690(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 input_ptr,undefined8 exit_param1,undefined8 exit_param2,undefined8 exit_param3,\n                 undefined8 exit_param4,undefined8 exit_param5)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 length;\n  undefined *stack_ptr;\n  undefined *buffer_ptr;\n  undefined buffer [8];\n  undefined8 exit_param1_copy;\n  undefined8 exit_param2_copy;\n  undefined8 exit_param3_copy;\n  undefined8 exit_param4_copy;\n  undefined8 exit_param5_copy;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    param1_copy = param1;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  stack_ptr = &stack0x00000008;\n  size = 8;\n  buffer_ptr = buffer;\n  length = 0x30;\n  exit_param1_copy = exit_param1;\n  exit_param2_copy = exit_param2;\n  exit_param3_copy = exit_param3;\n  exit_param4_copy = exit_param4;\n  exit_param5_copy = exit_param5;\n  FUN_001078c0(input_ptr,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "extract_data_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "targetName",
                "param_2": "outputFile",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "lVar1": "currentTargetValue"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long targetName,FILE *outputFile)\n\n{\n  long currentTargetValue;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extracted_string_00105830",
                "param_1": "inputString",
                "param_2": "dataBuffer",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "dataBufferLength",
                "sVar2": "inputStringLength",
                "__s": "baseName",
                "uVar3": "bufferSize",
                "pcVar4": "outputString",
                "bVar5": "flag",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractedString_00105830(char *inputString,long dataBuffer,undefined8 param3,undefined8 param4)\n\n{\n  long dataBufferLength;\n  size_t inputStringLength;\n  char *baseName;\n  ulong bufferSize;\n  char *outputString;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    inputString = baseName;\n    if ((DAT_0010d5fa != '\\0') && (dataBuffer != 0)) {\n      inputStringLength = strlen(baseName);\n      bufferSize = (ulong)*(byte *)(*(long *)(dataBuffer + 8) + 0x1e);\n      if (bufferSize < inputStringLength) {\n        inputString = (char *)xmalloc(bufferSize + 1);\n        dataBufferLength = *(long *)(dataBuffer + 8);\n        outputString = inputString;\n        for (bufferSize = (ulong)*(byte *)(dataBufferLength + 0x1e); bufferSize != 0; bufferSize = bufferSize - 1) {\n          *outputString = *baseName;\n          baseName = baseName + (ulong)flag * -2 + 1;\n          outputString = outputString + (ulong)flag * -2 + 1;\n        }\n        inputString[*(byte *)(dataBufferLength + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param4;\n  result._0_8_ = inputString;\n  return result;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "extracted_string_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_delete_file_00107730",
                "unlink_if_ordinary": "deleteFile"
            },
            "code": "\nvoid cleanupAndDeleteFile_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_delete_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorType",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unusedVar"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorType)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unusedVar;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorType != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorType,errorMessage,unusedVar);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,unusedVar);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "file",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "error",
                "uVar2": "isTTY",
                "iVar3": "fileNo",
                "piVar4": "errnoPtr",
                "lVar5": "constant"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *file,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int error;\n  uint isTTY;\n  int fileNo;\n  int *errnoPtr;\n  long constant;\n  \n  errnoPtr = __errno_location();\n  constant = DAT_0010d5a8;\n  error = *errnoPtr;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = file;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(constant + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (constant != 0) {\n      if (filePtr == *(FILE ***)(constant + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *filePtr = file;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = file;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTTY = 0;\n  if (file != (FILE *)0x0) {\n    fileNo = fileno(file);\n    fileNo = isatty(fileNo);\n    isTTY = (uint)(0 < fileNo);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTTY;\n  *errnoPtr = error;\n  return param5;\n}\n\n",
            "called": [
                "isatty",
                "__errno_location",
                "fileno",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "srcPtr",
                "param_2": "dstPtr",
                "lVar1": "tempPtr"
            },
            "code": "\nvoid copyData_0010312d(long srcPtr,long dstPtr)\n\n{\n  long tempPtr;\n  \n  if (dstPtr != 0) {\n    *(undefined8 *)(dstPtr + 0xf0) = *(undefined8 *)(srcPtr + 0xf0);\n  }\n  tempPtr = DAT_0010d558;\n  *(undefined8 *)(srcPtr + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempPtr + 0xf8) = srcPtr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "filePosition",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int sourceFileDescriptor,char *destinationFilePath)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t filePosition;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (filePosition = lseek(sourceFileDescriptor,0,0), filePosition == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = FUN_00102f55();\n      return returnValue;\n    }\n    do {\n      returnValue = read(sourceFileDescriptor,buffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoPointer = __errno_location();\n    bytesRead = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "write",
                "close",
                "open",
                "FUN_00102f55",
                "__errno_location",
                "lseek",
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_info_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "errorMsg",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileInfo_001052a0(char *filePath)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  char *errorReason;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMsg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(errorMsg,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMsg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(errorMsg,filePath,errorReason);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMsg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(errorMsg,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMsg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(errorMsg,filePath);\n    }\n    else {\n      errorMsg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(errorMsg,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_info_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOption"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOption;\n  \n  emulationOption = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOption);\n  emulationOption = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOption);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00103ba8",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103172",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "initialize_output_archive_00103c60",
                "param_1": "inputFilePath",
                "param_2": "isPlugin",
                "cVar1": "checkResult",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchive",
                "lVar5": "archivedFile",
                "uVar6": "fileName",
                "plVar7": "nextArchivedFile"
            },
            "code": "\n\n\nvoid initializeOutputArchive_00103c60(char *inputFilePath,int isPlugin)\n\n{\n  char checkResult;\n  int *errorNumber;\n  char *errorMessage;\n  long inputArchive;\n  long archivedFile;\n  undefined8 fileName;\n  long *nextArchivedFile;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errorNumber = __errno_location();\n    inputFilePath = strerror(*errorNumber);\n    fileName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      inputFilePath = DAT_0010d560;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchive = bfd_openr(inputFilePath,\"plugin\");\n      if (inputArchive == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        checkResult = bfd_check_format(inputArchive,2);\n        if (checkResult != '\\0') {\n          nextArchivedFile = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFile = bfd_openr_next_archived_file(inputArchive,0); archivedFile != 0;\n              archivedFile = bfd_openr_next_archived_file(inputArchive,archivedFile)) {\n            *nextArchivedFile = archivedFile;\n            nextArchivedFile = (long *)(archivedFile + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    fileName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,fileName,inputFilePath);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "FUN_0010315d",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "bfd_check_format",
                "bfd_openr",
                "strerror",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "fprintf",
                "FUN_001057a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_output_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "create_file_and_print_content_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid createFileAndPrintContent_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "create_file_and_print_content_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "ptr_files",
                "param_2": "file",
                "param_3": "extract_archives",
                "param_4": "check_formats",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "extracted_count"
            },
            "code": "\nulong extract_archived_files_00105af0(long *ptr_files,long file,char extract_archives,char check_formats)\n\n{\n  char is_valid_format;\n  uint result;\n  long archived_file;\n  ulong extracted_count;\n  \n  if (check_formats == '\\0') {\n    if (extract_archives != '\\0') {\n      extracted_count = FUN_00102f08();\n      return extracted_count;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(file,2);\n    if (is_valid_format != '\\0') {\n      extracted_count = 0;\n      for (archived_file = bfd_openr_next_archived_file(file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(file,archived_file)) {\n        result = extract_archived_files_00105af0(ptr_files,archived_file,extract_archives,1);\n        if ((char)result != '\\0') {\n          extracted_count = (ulong)result;\n          ptr_files = (long *)(*ptr_files + 0xf0);\n        }\n      }\n      return extracted_count;\n    }\n    if (extract_archives != '\\0') {\n      extracted_count = FUN_00102f08();\n      return extracted_count;\n    }\n  }\n  *(long *)(file + 0xf0) = *ptr_files;\n  *ptr_files = file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_001028ed",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matched_index_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "calculatedIndex",
                "bVar4": "offset",
                "pbVar5": "currentByte",
                "in_R9": "matchBytePtr",
                "in_R10D": "matchIndex",
                "(int)(uint)bVar4": "offsetNextCount"
            },
            "code": "\nvoid findMatchedIndex_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long calculatedIndex;\n  byte offset;\n  byte *currentByte;\n  byte *matchBytePtr;\n  int matchIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    offset = 1;\n    if (*currentByte != 0) {\n      offset = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchBytePtr = currentByte;\n      matchIndex = currentIndex;\n    }\n    while( true ) {\n      calculatedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)offset);\n      if (*(short *)(&DAT_0010a440 + calculatedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        offset = (&DAT_0010a7c0)[offsetNextCount];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + calculatedIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchBytePtr;\n    DAT_0010d5c0 = matchIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matched_index_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_00102ba1",
                "unaff_RBP": "buffer",
                "unaff_retaddr": "return_address",
                "auVar1": "result"
            },
            "code": "\nundefined  [16] free_and_return_00102ba1(void)\n\n{\n  undefined result [16];\n  void *buffer;\n  ulong return_address;\n  \n  free(buffer);\n  result._8_8_ = 0;\n  result._0_8_ = return_address;\n  return result << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_write_archive_00107740",
                "param_1": "input",
                "iVar1": "filenameComparisonResult",
                "iVar2": "statErrorResult",
                "piVar3": "errnoLocation",
                "pcVar4": "errorMessage",
                "uVar5": "message",
                "pplVar6": "entryPoint",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "offset",
                "plVar8": "currentEntry",
                "puVar9": "localFlagsArray",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "local_c8": "localFlagsArray",
                "_Stack_b0": "filePermission",
                "uStack_98": "archiveSize",
                "uStack_80": "callbackResult",
                "uStack_70": "callbackData"
            },
            "code": "\n\n\nlong * extractAndWriteArchive_00107740(long **input)\n\n{\n  int filenameComparisonResult;\n  int statErrorResult;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 message;\n  long **entryPoint;\n  void *buffer;\n  size_t bytesRead;\n  long offset;\n  long *currentEntry;\n  undefined4 *localFlagsArray;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 localFlagsArray [6];\n  __mode_t filePermission;\n  ulong archiveSize;\n  undefined8 callbackResult;\n  undefined8 callbackData;\n  \n  if (_DAT_0010d600 != 0) {\n    localFlagsArray = localFlagsArray;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *localFlagsArray = 0;\n      localFlagsArray = localFlagsArray + 1;\n    }\n  }\n  entryPoint = (long **)input[0x1d];\n  if ((long **)input[0x1d] == (long **)0x0) {\n    entryPoint = input;\n  }\n  statErrorResult = (*(code *)entryPoint[1][0x3d])(input,localFlagsArray);\n  if (statErrorResult != 0) {\n    currentEntry = *input;\n    message = dcgettext(0,\"internal stat error on %s\",5);\n    statErrorResult = FUN_00107690(message,currentEntry);\n    message = DAT_0010d638;\n    if (statErrorResult == 3) {\n      for (; *currentEntry != 0; currentEntry = (long *)(*currentEntry + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentEntry != (undefined8 *)0x0; currentEntry = (long *)(*currentEntry + 0xf0)) {\n        filenameComparisonResult = filename_cmp(*(undefined8 *)*currentEntry,message);\n        if (filenameComparisonResult == 0) {\n          if (statErrorResult != 2) {\n            return currentEntry;\n          }\n          return (long *)(*currentEntry + 0xf0);\n        }\n      }\n    }\n    return currentEntry;\n  }\n  bfd_seek(input,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*input);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead,input);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        input = (long **)*input[0x1d];\n        message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(message,input);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*input);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        errorMessage = strerror(*errnoLocation);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorMessage);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessage = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermission);\n  if (_DAT_0010d600 != 0) {\n    callbackResult = callbackData;\n    FUN_00107c80(errorMessage,localFlagsArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_metadata_00102d2f",
                "__format": "timeErrorMessage",
                "unaff_RBX": "fileLines",
                "unaff_RBP": "filePointer",
                "unaff_R12": "fileMode",
                "unaff_R13": "fileData",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "isExecutable",
                "cStack0000000000000017": "isWritable",
                "in_stack_00000018": "isReadable",
                "cStack0000000000000019": "isExecutableSetuid",
                "cStack000000000000001a": "isWritableSetuid",
                "cStack000000000000001b": "isReadableSetuid",
                "cStack000000000000001c": "isExecutableSetgid",
                "cStack000000000000001d": "isWritableSetgid",
                "cStack000000000000001e": "isReadableSetgid",
                "uStack000000000000001f": "isOther",
                "uStack0000000000000068": "filePermissions",
                "uStack000000000000006c": "fileUserID",
                "in_stack_00000070": "fileGroupID",
                "in_stack_00000080": "fileLastModified"
            },
            "code": "\nvoid printFileMetadata_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *timeErrorMessage;\n  uint uVar4;\n  char **fileLines;\n  FILE *filePointer;\n  long fileMode;\n  void *fileData;\n  int fileDescriptor;\n  undefined fileType;\n  char isExecutable;\n  char isWritable;\n  char isReadable;\n  char isExecutableSetuid;\n  char isWritableSetuid;\n  char isReadableSetuid;\n  char isExecutableSetgid;\n  char isWritableSetgid;\n  char isReadableSetgid;\n  undefined isOther;\n  uint filePermissions;\n  uint fileUserID;\n  uint fileGroupID;\n  undefined8 fileLastModified;\n  \n  do {\n    bVar1 = FUN_00107c10();\n    *(uint *)((long)fileLines + 0x44) = *(uint *)((long)fileLines + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(fileMode + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileLines + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = FUN_00105bc0();\n    if (iVar3 == 0) {\n      free(fileData);\n      free(filePointer);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  timeErrorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeErrorMessage);\n  uVar4 = filePermissions & 0xf000;\n  if (uVar4 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar4 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  isExecutable = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  isWritable = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  isReadable = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  isExecutableSetuid = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  isWritableSetuid = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  isReadableSetuid = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  isExecutableSetgid = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  isWritableSetgid = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  isReadableSetgid = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (isReadable == 'x') {\n      isReadable = 's';\n    }\n    else {\n      isReadable = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (isReadableSetuid == 'x') {\n      isReadableSetuid = 's';\n    }\n    else {\n      isReadableSetuid = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (isReadableSetgid == 'x') {\n      isReadableSetgid = 't';\n    }\n    else {\n      isReadableSetgid = 'T';\n    }\n  }\n  isOther = 0;\n  fprintf(filePointer,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileUserID,\n          (ulong)fileGroupID,fileLastModified,&stack0x00000020,(ulong)filePermissions)\n  ;\n  fputs(*fileLines,filePointer);\n  if ((char)fileMode != '\\0') {\n    if ((*(byte *)((long)fileLines + 0x49) & 0x10) == 0) {\n      if (fileLines[0xb] != (char *)0x0) {\n        fprintf(filePointer,\" 0x%lx\");\n      }\n    }\n    else if (fileLines[0xc] != (char *)0x0) {\n      fprintf(filePointer,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePointer);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "bfd_set_archive_head",
                "xexit",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "dup",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "fileList",
                "param_2": "flags",
                "uVar1": "undefined1",
                "bVar2": "byte1",
                "iVar3": "int1",
                "sVar4": "size1",
                "piVar5": "intPointer",
                "pcVar6": "charPointer1",
                "pcVar7": "charPointer2",
                "ppcVar8": "charPointerPointer",
                "uVar9": "undefined8_1",
                "lVar10": "long1",
                "__s": "string1",
                "__s_00": "string2",
                "lVar11": "long2",
                "uVar12": "undefined8_2",
                "uVar13": "ulong",
                "ppcVar14": "charPointerPointer1",
                "ppcVar15": "charPointerPointer2",
                "bVar16": "bool1",
                "bVar17": "byte2",
                "param_9": "result"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 fileList,long flags)\n\n{\n  undefined undefined1;\n  byte byte1;\n  int int1;\n  size_t size1;\n  int *intPointer;\n  char *charPointer1;\n  char *charPointer2;\n  char **charPointerPointer;\n  undefined8 undefined8_1;\n  long long1;\n  char *string1;\n  char *string2;\n  long long2;\n  undefined8 undefined8_2;\n  ulong ulong;\n  char *unaff_RBX;\n  char **charPointerPointer1;\n  char **unaff_RBP;\n  char **unaff_R12;\n  uint unaff_R13D;\n  char **charPointerPointer2;\n  long unaff_R14;\n  bool bool1;\n  byte byte2;\n  char **param_7;\n  undefined8 result;\n  long in_stack_00000078;\n  long in_stack_00000108;\n  \n  byte2 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(unaff_RBX,flags);\nLAB_001028f5:\n  undefined8_2 = DAT_0010d638;\n  if (unaff_R13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*unaff_R12 == (undefined8 *)0x0) goto LAB_0010571f;\n      int1 = filename_cmp(*(undefined8 *)*unaff_R12,undefined8_2);\n      if (int1 == 0) break;\n      unaff_R12 = (char **)(*unaff_R12 + 0xf0);\n    }\n    if (unaff_R13D != 2) goto LAB_0010571f;\n    unaff_R12 = (char **)(*unaff_R12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long1 = *(long *)(unaff_R14 + 0xf0);\n  if (*(long *)(unaff_R14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long2 = long1;\n    long1 = *(long *)(long2 + 0xf0);\n  } while (long1 != 0);\n  unaff_R12 = (char **)(long2 + 0xf0);\n  unaff_RBX = *unaff_RBP;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined1 = DAT_0010d5f8;\n  unaff_R13D = (uint)(DAT_0010d60c != 0);\n  flags = bfd_openr(unaff_RBX,DAT_0010d5f0);\n  if (flags != 0) {\n    unaff_RBP = unaff_RBP + 1;\n    byte1 = FUN_00105af0(unaff_R12,flags,unaff_R13D,undefined1);\n    result._6_1_ = result._6_1_ | byte1;\n    charPointer1 = *unaff_RBP;\n    do {\n      if (charPointer1 == (char *)0x0) {\n        if (result._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined8_2 = FUN_001058b0();\n        return undefined8_2;\n      }\n      charPointerPointer1 = *(char ***)(unaff_R14 + 0xf0);\n      unaff_R12 = param_7;\n      if (result._7_1_ == '\\0') {\n        charPointerPointer2 = param_7;\n        if (charPointerPointer1 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              string1 = (char *)lbasename(*charPointerPointer1);\n              charPointer2 = string1;\n              if (DAT_0010d5fa != '\\0') {\n                size1 = strlen(string1);\n                ulong = (ulong)*(byte *)(*(long *)(unaff_R14 + 8) + 0x1e);\n                if (ulong < size1) {\n                  charPointer2 = (char *)xmalloc(ulong + 1);\n                  long1 = *(long *)(unaff_R14 + 8);\n                  charPointer1 = charPointer2;\n                  for (ulong = (ulong)*(byte *)(long1 + 0x1e); ulong != 0; ulong = ulong - 1) {\n                    *charPointer1 = *string1;\n                    string1 = string1 + (ulong)byte2 * -2 + 1;\n                    charPointer1 = charPointer1 + (ulong)byte2 * -2 + 1;\n                  }\n                  charPointer2[*(byte *)(long1 + 0x1e)] = '\\0';\n                }\n                charPointer1 = *unaff_RBP;\n                string1 = charPointer2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPointer1 = *unaff_RBP;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string2 = (char *)lbasename(charPointer1);\n              if (DAT_0010d5fa != '\\0') {\n                size1 = strlen(string2);\n                ulong = (ulong)*(byte *)(*(long *)(unaff_R14 + 8) + 0x1e);\n                charPointer1 = string2;\n                string1 = charPointer2;\n                if (ulong < size1) {\n                  charPointer1 = (char *)xmalloc(ulong + 1);\n                  long1 = *(long *)(unaff_R14 + 8);\n                  charPointer2 = charPointer1;\n                  for (ulong = (ulong)*(byte *)(long1 + 0x1e); ulong != 0; ulong = ulong - 1) {\n                    *charPointer2 = *string2;\n                    string2 = string2 + (ulong)byte2 * -2 + 1;\n                    charPointer2 = charPointer2 + (ulong)byte2 * -2 + 1;\n                  }\n                  charPointer1[*(byte *)(long1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int1 = filename_cmp(string2,charPointer2);\n            }\n            else {\n              charPointer1 = *unaff_RBP;\n              string1 = *charPointerPointer1;\nLAB_00102980:\n              int1 = filename_cmp(charPointer1,string1);\n            }\n            if ((int1 == 0) && (charPointerPointer1[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int1 = stat(*unaff_RBP,(stat *)&stack0x000000b0);\n                if (int1 != 0) {\n                  intPointer = __errno_location();\n                  if (*intPointer != 2) {\n                    FUN_00107c10(*unaff_RBP);\nLAB_00102b7e:\n                    charPointer1 = *charPointerPointer1;\n                    undefined8_2 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefined8_2,charPointer1);\n                    free(unaff_RBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPointerPointer = (char **)charPointerPointer1[0x1d];\n                if ((char **)charPointerPointer1[0x1d] == (char **)0x0) {\n                  charPointerPointer = charPointerPointer1;\n                }\n                int1 = (**(code **)(charPointerPointer[1] + 0x1e8))(charPointerPointer1,&stack0x00000020);\n                if (int1 != 0) goto LAB_00102b7e;\n                if (in_stack_00000108 <= in_stack_00000078) goto LAB_0010577e;\n              }\n              undefined8_2 = FUN_00105870(param_7,2,*charPointerPointer1);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                charPointer1 = *unaff_RBP;\n                bool1 = DAT_0010d60c != 0;\n                long1 = bfd_openr(charPointer1,DAT_0010d5f0);\n                if (long1 == 0) {\n                  FUN_00107c10(charPointer1,0);\n                  goto LAB_00102b3e;\n                }\n                byte1 = FUN_00103172(undefined8_2,long1,bool1);\n              }\n              else {\n                undefined8_1 = FUN_00105830(*unaff_RBP);\n                int1 = filename_cmp(undefined8_1,\"__.LIBDEP\");\n                if (int1 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte1 = FUN_00103172(undefined8_2,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte1 != 0) {\n                *charPointerPointer2 = *(char **)(*charPointerPointer2 + 0xf0);\n                result._6_1_ = byte1;\n              }\n              goto LAB_0010577e;\n            }\n            charPointerPointer2 = charPointerPointer1 + 0x1e;\n            charPointerPointer1 = (char **)charPointerPointer1[0x1e];\n          } while (charPointerPointer1 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        unaff_R13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        unaff_R13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long1 = *(long *)(unaff_R14 + 0xf0);\n        if (*(long *)(unaff_R14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaff_RBX = *unaff_RBP;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined8_2 = FUN_00105830(unaff_RBX);\n      int1 = filename_cmp(undefined8_2,\"__.LIBDEP\");\n      if (int1 != 0) goto code_r0x0010574f;\n      byte1 = FUN_00105ae0(unaff_R12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      result._6_1_ = byte1 | result._6_1_;\nLAB_0010577e:\n      unaff_RBP = unaff_RBP + 1;\n      charPointer1 = *unaff_RBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaff_RBX = *unaff_RBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "__errno_location",
                "bfd_openr",
                "xmalloc",
                "FUN_00102943",
                "FUN_00105870",
                "FUN_00103172",
                "dcgettext",
                "stat",
                "FUN_00105ae0",
                "FUN_001058b0",
                "filename_cmp",
                "FUN_001028ed",
                "FUN_00105830",
                "strlen",
                "lbasename",
                "FUN_00105af0",
                "FUN_00107c10",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(standardError,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errorCodePtr",
                "uVar2": "errorMessage",
                "__errno_location": "getErrorCodeLocation",
                "dcgettext": "translateMessage",
                "strerror": "getErrorMessage"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorMessage;\n  \n  errorCodePtr = __errno_location();\n  if (*errorCodePtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(errorMessage);\n  }\n  else {\n    strerror(*errorCodePtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "initialize_application_0010284b"
            },
            "code": "\nundefined8 initializeApplication_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "initialize_application_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_00102c25",
                "param_7": "flags",
                "param_11": "permissions",
                "param_12": "archiveSize",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errorNumberPointer",
                "pcVar4": "errorMessagePointer",
                "uVar5": "message",
                "pplVar6": "functionPointerArray",
                "__ptr": "buffer",
                "__n": "readSize",
                "lVar7": "loopCounter",
                "unaff_RBX": "pointerArray",
                "plVar8": "archivePointer",
                "puVar9": "parameterPointer",
                "uVar10": "totalBytesRead",
                "sVar11": "writeSize"
            },
            "code": "\n\n\nlong * extractAndWriteArchive_00102c25(void)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errorNumberPointer;\n  char *errorMessagePointer;\n  undefined8 message;\n  long **functionPointerArray;\n  void *buffer;\n  size_t readSize;\n  long loopCounter;\n  long **pointerArray;\n  long *archivePointer;\n  undefined4 *parameterPointer;\n  ulong totalBytesRead;\n  size_t writeSize;\n  undefined4 *flags;\n  __mode_t permissions;\n  ulong archiveSize;\n  \n  parameterPointer = flags;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *parameterPointer = 0;\n    parameterPointer = parameterPointer + 1;\n  }\n  functionPointerArray = (long **)pointerArray[0x1d];\n  if ((long **)pointerArray[0x1d] == (long **)0x0) {\n    functionPointerArray = pointerArray;\n  }\n  errorCode = (*(code *)functionPointerArray[1][0x3d])();\n  if (errorCode != 0) {\n    archivePointer = *pointerArray;\n    message = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = FUN_00107690(message,archivePointer);\n    message = DAT_0010d638;\n    if (errorCode == 3) {\n      for (; *archivePointer != 0; archivePointer = (long *)(*archivePointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*archivePointer != (undefined8 *)0x0; archivePointer = (long *)(*archivePointer + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*archivePointer,message);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return archivePointer;\n          }\n          return (long *)(*archivePointer + 0xf0);\n        }\n      }\n    }\n    return archivePointer;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*pointerArray);\n  }\n  else {\n    totalBytesRead = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      writeSize = archiveSize - totalBytesRead;\n      if (0x2000 < writeSize) {\n        writeSize = 0x2000;\n      }\n      readSize = bfd_bread(buffer,writeSize);\n      if (writeSize != readSize) {\nLAB_00102c78:\n        pointerArray = (long **)*pointerArray[0x1d];\n        message = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(message,pointerArray);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*pointerArray);\n      }\n      writeSize = fwrite(buffer,1,readSize,DAT_0010d5d8);\n      if (writeSize != readSize) {\n        errorNumberPointer = __errno_location();\n        errorMessagePointer = strerror(*errorNumberPointer);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorMessagePointer);\n        goto LAB_00102c78;\n      }\n      totalBytesRead = totalBytesRead + readSize;\n    } while (totalBytesRead < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessagePointer = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,permissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(errorMessagePointer,flags);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "chmod",
                "FUN_00105a20",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "strerror",
                "dcgettext",
                "bfd_bread",
                "free",
                "FUN_00107c80",
                "fclose",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_with_length_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "newString",
                "uVar4": "copyLength",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "basePointer",
                "puVar5": "destPointer",
                "bVar6": "byteFlag",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined  [16] copyStringWithLength_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *newString;\n  ulong copyLength;\n  undefined *sourcePointer;\n  long basePointer;\n  undefined *destPointer;\n  byte byteFlag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  byteFlag = 0;\n  inputLength = strlen(inputString);\n  copyLength = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  newString = sourcePointer;\n  if (copyLength < inputLength) {\n    newString = (undefined *)xmalloc(copyLength + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    destPointer = newString;\n    for (copyLength = (ulong)*(byte *)(lVar1 + 0x1e); copyLength != 0; copyLength = copyLength - 1) {\n      *destPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)byteFlag * -2 + 1;\n      destPointer = destPointer + (ulong)byteFlag * -2 + 1;\n    }\n    newString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = newString;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_string_with_length_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_swap_pointers_00102f08",
                "unaff_RBX": "ptrToPrint",
                "unaff_R12": "ptrToSwap"
            },
            "code": "\nundefined8 printAndSwapPointers_00102f08(void)\n\n{\n  undefined8 *ptrToPrint;\n  undefined8 *ptrToSwap;\n  \n  printf(\"a - %s\\n\",*ptrToPrint);\n  ptrToPrint[0x1e] = *ptrToSwap;\n  *ptrToSwap = ptrToPrint;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_swap_pointers_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_binary_data_00105570",
                "param_1": "binaryData",
                "param_2": "filePaths",
                "param_3": "flag",
                "ppcVar1": "currentFilePath",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "index",
                "sVar5": "size",
                "piVar6": "errnoPtr",
                "pcVar7": "currentFileName",
                "pcVar8": "baseFileName",
                "uVar9": "baseFileVar",
                "pcVar10": "selectedFile",
                "__s": "currentBaseName",
                "lVar11": "filePointer1",
                "lVar12": "filePointer2",
                "uVar13": "returnValue",
                "uVar14": "ulongVar",
                "ppcVar15": "filePathList",
                "ppcVar16": "currentFilePtr",
                "uVar17": "uintVar",
                "ppcVar18": "prevFilePtr",
                "bVar19": "boolVar",
                "bVar20": "byteVar",
                "local_15a": "localFlag",
                "auStack_158": "stackArray",
                "lStack_100": "stackVar1",
                "sStack_c8": "statStruct"
            },
            "code": "\n\n\nundefined8 processBinaryData_00105570(long binaryData,char **filePaths,char flag)\n\n{\n  char **currentFilePath;\n  undefined undefinedVar;\n  byte byteVar;\n  int index;\n  size_t size;\n  int *errnoPtr;\n  char *currentFileName;\n  char *baseFileName;\n  undefined8 baseFileVar;\n  char *selectedFile;\n  char *currentBaseName;\n  long filePointer1;\n  long filePointer2;\n  undefined8 returnValue;\n  ulong ulongVar;\n  char **filePathList;\n  char **currentFilePtr;\n  uint uintVar;\n  char **prevFilePtr;\n  bool boolVar;\n  byte byteVar;\n  byte localFlag;\n  undefined stackArray [88];\n  long stackVar1;\n  stat statStruct;\n  \n  byteVar = 0;\n  currentFilePath = (char **)(binaryData + 0xf0);\n  localFlag = 0;\n  if (filePaths == (char **)0x0) {\n    returnValue = FUN_00102943();\n    return returnValue;\n  }\n  do {\n    selectedFile = *filePaths;\njoined_r0x001055aa:\n    if (selectedFile == (char *)0x0) {\n      if (localFlag != 0) {\n        returnValue = FUN_001058b0(binaryData);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    filePathList = *(char ***)(binaryData + 0xf0);\n    currentFilePtr = currentFilePath;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uintVar = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      filePointer2 = *(long *)(binaryData + 0xf0);\n      if (*(long *)(binaryData + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        filePointer1 = filePointer2;\n        filePointer2 = *(long *)(filePointer1 + 0xf0);\n      } while (filePointer2 != 0);\n      currentFilePtr = (char **)(filePointer1 + 0xf0);\n      selectedFile = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = FUN_00105830(selectedFile,binaryData);\n          index = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (index == 0) {\n            byteVar = FUN_00105ae0(currentFilePtr,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localFlag = byteVar | localFlag;\n            goto LAB_0010577e;\n          }\n          selectedFile = *filePaths;\n        }\n        undefinedVar = DAT_0010d5f8;\n        boolVar = DAT_0010d60c != 0;\n        filePointer2 = bfd_openr(selectedFile,DAT_0010d5f0);\n        if (filePointer2 != 0) {\n          filePaths = filePaths + 1;\n          byteVar = FUN_00105af0(currentFilePtr,filePointer2,(uint)boolVar,undefinedVar);\n          localFlag = localFlag | byteVar;\n          selectedFile = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(selectedFile,0);\n        uintVar = (uint)boolVar;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (uintVar == 3) {\n          filePointer2 = *(long *)(binaryData + 0xf0);\n          if (*(long *)(binaryData + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentFilePtr != (undefined8 *)0x0;\n              currentFilePtr = (char **)(*currentFilePtr + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*currentFilePtr,returnValue);\n            if (index == 0) {\n              if (uintVar == 2) {\n                currentFilePtr = (char **)(*currentFilePtr + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        selectedFile = *filePaths;\n      } while( true );\n    }\n    prevFilePtr = currentFilePath;\n    if (filePathList == (char **)0x0) {\n      uintVar = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      selectedFile = (char *)lbasename(*filePathList);\n      baseFileName = selectedFile;\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(selectedFile);\n        ulongVar = (ulong)*(byte *)(*(long *)(binaryData + 8) + 0x1e);\n        if (ulongVar < size) {\n          baseFileName = (char *)xmalloc(ulongVar + 1);\n          filePointer2 = *(long *)(binaryData + 8);\n          currentFileName = baseFileName;\n          for (ulongVar = (ulong)*(byte *)(filePointer2 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *currentFileName = *selectedFile;\n            selectedFile = selectedFile + (ulong)byteVar * -2 + 1;\n            currentFileName = currentFileName + (ulong)byteVar * -2 + 1;\n          }\n          baseFileName[*(byte *)(filePointer2 + 0x1e)] = '\\0';\n        }\n        currentFileName = *filePaths;\n        selectedFile = baseFileName;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentFileName = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      currentBaseName = (char *)lbasename(currentFileName);\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(currentBaseName);\n        ulongVar = (ulong)*(byte *)(*(long *)(binaryData + 8) + 0x1e);\n        currentFileName = currentBaseName;\n        selectedFile = baseFileName;\n        if (ulongVar < size) {\n          currentFileName = (char *)xmalloc(ulongVar + 1);\n          filePointer2 = *(long *)(binaryData + 8);\n          baseFileName = currentFileName;\n          for (ulongVar = (ulong)*(byte *)(filePointer2 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *baseFileName = *currentBaseName;\n            currentBaseName = currentBaseName + (ulong)byteVar * -2 + 1;\n            baseFileName = baseFileName + (ulong)byteVar * -2 + 1;\n          }\n          currentFileName[*(byte *)(filePointer2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(currentBaseName,baseFileName);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      prevFilePtr = filePathList + 0x1e;\n      filePathList = (char **)filePathList[0x1e];\n      if (filePathList == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentFileName = *filePaths;\n    selectedFile = *filePathList;\nLAB_00102980:\n    index = filename_cmp(currentFileName,selectedFile);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (filePathList[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*filePaths,&statStruct);\n      if (index != 0) {\n        errnoPtr = __errno_location();\n        if (*errnoPtr != 2) {\n          FUN_00107c10(*filePaths);\nLAB_00102b7e:\n          selectedFile = *filePathList;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(returnValue,selectedFile);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentFilePtr = (char **)filePathList[0x1d];\n      if ((char **)filePathList[0x1d] == (char **)0x0) {\n        currentFilePtr = filePathList;\n      }\n      index = (**(code **)(currentFilePtr[1] + 0x1e8))(filePathList,stackArray);\n      if (index != 0) goto LAB_00102b7e;\n      if (statStruct.st_mtim.tv_sec <= stackVar1) goto LAB_0010577e;\n    }\n    returnValue = FUN_00105870(currentFilePath,2,*filePathList);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      selectedFile = *filePaths;\n      boolVar = DAT_0010d60c != 0;\n      filePointer2 = bfd_openr(selectedFile,DAT_0010d5f0);\n      if (filePointer2 == 0) {\n        FUN_00107c10(selectedFile,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = FUN_00103172(returnValue,filePointer2,boolVar);\n    }\n    else {\n      baseFileVar = FUN_00105830(*filePaths,binaryData);\n      index = filename_cmp(baseFileVar,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = FUN_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byteVar != 0) {\n      *prevFilePtr = *(char **)(*prevFilePtr + 0xf0);\n      localFlag = byteVar;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_binary_data_00105570"
        }
    },
    "used_tokens": 110000,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}