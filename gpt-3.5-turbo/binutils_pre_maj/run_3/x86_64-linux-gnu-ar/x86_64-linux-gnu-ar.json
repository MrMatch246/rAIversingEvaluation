{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "inputValue",
                "iVar1": "comparisonResult",
                "unaff_RBX": "fileListPtr",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int inputValue;\n  int comparisonResult;\n  long *fileListPtr;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (inputValue == 3) {\n    for (; *fileListPtr != 0; fileListPtr = (long *)(*fileListPtr + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileListPtr != (undefined8 *)0x0; fileListPtr = (long *)(*fileListPtr + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileListPtr,targetFilename);\n      if (comparisonResult == 0) {\n        if (inputValue != 2) {\n          return fileListPtr;\n        }\n        return (long *)(*fileListPtr + 0xf0);\n      }\n    }\n  }\n  return fileListPtr;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00105830",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "printTime",
                "param_4": "printAddress",
                "iVar1": "returnValue",
                "ppcVar2": "fileInfoPtr",
                "pcVar3": "timeString",
                "uVar4": "fileMode",
                "local_100": "currentTime",
                "uStack_f3": "fileTypeChar",
                "cStack_f2": "userReadPermission",
                "cStack_f1": "userWritePermission",
                "cStack_f0": "userExecutePermission",
                "cStack_ef": "groupReadPermission",
                "cStack_ee": "groupWritePermission",
                "cStack_ed": "groupExecutePermission",
                "cStack_ec": "otherReadPermission",
                "cStack_eb": "otherWritePermission",
                "cStack_ea": "otherExecutePermission",
                "local_e8": "formattedTime",
                "local_b8": "buffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "majorDeviceNum",
                "uStack_98": "minorDeviceNum",
                "uStack_88": "inode",
                "local_60": "modifiedTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char printTime,char printAddress)\n\n{\n  int returnValue;\n  char **fileInfoPtr;\n  char *timeString;\n  uint fileMode;\n  time_t currentTime;\n  undefined fileTypeChar;\n  char userReadPermission;\n  char userWritePermission;\n  char userExecutePermission;\n  char groupReadPermission;\n  char groupWritePermission;\n  char groupExecutePermission;\n  char otherReadPermission;\n  char otherWritePermission;\n  char otherExecutePermission;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined buffer [24];\n  uint fileSize;\n  uint majorDeviceNum;\n  uint minorDeviceNum;\n  undefined8 inode;\n  time_t modifiedTime;\n  \n  if (printTime != '\\0') {\n    fileInfoPtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      fileInfoPtr = fileInfo;\n    }\n    returnValue = (**(code **)(fileInfoPtr[1] + 0x1e8))(fileInfo,buffer);\n    if (returnValue == 0) {\n      currentTime = modifiedTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      fileMode = fileSize & 0xf000;\n      if (fileMode == 0x4000) {\n        fileTypeChar = 100;\n      }\n      else if (fileMode == 0xa000) {\n        fileTypeChar = 0x6c;\n      }\n      else if (fileMode == 0x6000) {\n        fileTypeChar = 0x62;\n      }\n      else if (fileMode == 0x2000) {\n        fileTypeChar = 99;\n      }\n      else if (fileMode == 0xc000) {\n        fileTypeChar = 0x73;\n      }\n      else {\n        fileTypeChar = 0x70;\n        if (fileMode != 0x1000) {\n          fileTypeChar = 0x2d;\n        }\n      }\n      userReadPermission = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      userWritePermission = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      userExecutePermission = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      groupReadPermission = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWritePermission = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecutePermission = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      otherReadPermission = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      otherWritePermission = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      otherExecutePermission = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (userExecutePermission == 'x') {\n          userExecutePermission = 's';\n        }\n        else {\n          userExecutePermission = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (groupExecutePermission == 'x') {\n          groupExecutePermission = 's';\n        }\n        else {\n          groupExecutePermission = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (otherExecutePermission == 'x') {\n          otherExecutePermission = 't';\n        }\n        else {\n          otherExecutePermission = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&userReadPermission,(ulong)majorDeviceNum,(ulong)minorDeviceNum,inode,\n              formattedTime,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00107890",
                "FUN_00103ddc"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "create_and_print_file_00105a68",
                "pcVar1": "directoryPath",
                "pFVar2": "filePointer",
                "sVar3": "directoryLength"
            },
            "code": "\nvoid createAndPrintFile_00105a68(void)\n\n{\n  char *directoryPath;\n  FILE *filePointer;\n  size_t directoryLength;\n  \n  directoryPath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directoryLength = strlen(DAT_0010d5e8);\n    if (directoryLength != 0) {\n      if (directoryPath[directoryLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directoryPath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directoryPath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat",
                "printf",
                "xexit",
                "FUN_00102e57",
                "perror",
                "fopen",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_and_print_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archive_data",
                "param_2": "callback_function",
                "param_3": "entry_list",
                "param_4": "result",
                "lVar1": "next_entry_offset",
                "uVar2": "current_entry",
                "bVar3": "found_entry",
                "plVar4": "current_entry_ptr",
                "iVar5": "comparison_result",
                "__format": "format_string",
                "plVar6": "next_entry_ptr",
                "lVar7": "current_entry_offset",
                "plVar8": "previous_entry_ptr"
            },
            "code": "\n\n\nundefined8 process_archive_001032a8(long *archive_data,code *callback_function,undefined8 *entry_list,undefined8 result)\n\n{\n  long next_entry_offset;\n  undefined8 current_entry;\n  bool found_entry;\n  long *current_entry_ptr;\n  int comparison_result;\n  char *format_string;\n  long *next_entry_ptr;\n  long current_entry_offset;\n  long *previous_entry_ptr;\n  \n  current_entry_offset = archive_data[0x1e];\n  if (entry_list == (undefined8 *)0x0) {\n    while (current_entry_offset != 0) {\n      next_entry_offset = *(long *)(current_entry_offset + 0xf0);\n      (*callback_function)(current_entry_offset,0);\n      current_entry_offset = next_entry_offset;\n    }\n  }\n  else {\n    do {\n      found_entry = false;\n      current_entry_ptr = (long *)archive_data[0x1e];\n      previous_entry_ptr = archive_data;\n      while (next_entry_ptr = current_entry_ptr, next_entry_ptr != (long *)0x0) {\n        if (*next_entry_ptr != 0) {\n          comparison_result = filename_cmp(*entry_list);\n          if (comparison_result == 0) {\n            found_entry = true;\n            (*callback_function)(next_entry_ptr,previous_entry_ptr);\n          }\n        }\n        previous_entry_ptr = next_entry_ptr;\n        current_entry_ptr = (long *)next_entry_ptr[0x1e];\n      }\n      if (!found_entry) {\n        current_entry = *entry_list;\n        format_string = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,format_string,current_entry);\n      }\n      entry_list = (undefined8 *)entry_list[1];\n    } while (entry_list != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_entries_in_archive_0010285f",
                "unaff_RBP": "callbackFunction",
                "unaff_R12": "archivePointer",
                "unaff_R13D": "numberOfEntries",
                "unaff_R14": "entryPointer",
                "iStack000000000000000c": "entryCount",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "entryValue",
                "plVar3": "nextEntry",
                "uVar4": "currentEntry",
                "plVar5": "currentEntryPointer"
            },
            "code": "\n\n\nvoid printEntriesInArchive_0010285f(void)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long entryValue;\n  long *nextEntry;\n  undefined8 currentEntry;\n  long *currentEntryPointer;\n  code *callbackFunction;\n  long archivePointer;\n  int numberOfEntries;\n  undefined8 *entryPointer;\n  int entryCount;\n  \ncode_r0x0010285f:\n  currentEntry = *entryPointer;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,currentEntry);\nLAB_0010553e:\n  entryPointer = entryPointer + 1;\n  numberOfEntries = numberOfEntries + -1;\n  if (numberOfEntries == 0) {\n    return;\n  }\n  currentEntryPointer = *(long **)(archivePointer + 0xf0);\n  entryCount = 0;\n  do {\n    if (currentEntryPointer == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntryPointer + 0xac) == 0) {\n      entryValue = *currentEntryPointer;\n      if (entryValue == 0) {\n        nextEntry = (long *)currentEntryPointer[0x1d];\n        if ((long *)currentEntryPointer[0x1d] == (long *)0x0) {\n          nextEntry = currentEntryPointer;\n        }\n        (**(code **)(nextEntry[1] + 0x1e8))(currentEntryPointer,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePointer + 0x49) & 0x10) == 0) || (entryValue = decompiled_function_00105830(), entryValue != 0))\n      {\n        currentEntry = decompiled_function_00105830(*entryPointer);\n        comparisonResult = filename_cmp(currentEntry,entryValue);\n        if ((comparisonResult == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entryCount = entryCount + 1,\n            entryCount == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntryPointer = (long *)currentEntryPointer[0x1e];\n  } while( true );\n  (*callbackFunction)();\n  *(undefined4 *)((long)currentEntryPointer + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_entries_in_archive_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "flagError",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 uVar1;\n  long flagError;\n  undefined8 returnAddress;\n  \n  uVar1 = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (flagError != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,uVar1,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "outputToFile",
                "uVar1": "versionString",
                "pcVar2": "localizedText",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint outputToFile)\n\n{\n  undefined8 versionString;\n  char *localizedText;\n  FILE *outputStream;\n  \n  localizedText = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputToFile != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedText,DAT_0010d660);\n  versionString = DAT_0010d660;\n  localizedText = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedText,versionString);\n  localizedText = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedText);\n  localizedText = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedText);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (outputToFile != 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToFile ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "FUN_0010336b",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "isStandardOutput",
                "uVar1": "standardUsage",
                "pcVar2": "translatedString",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint isStandardOutput)\n\n{\n  undefined8 standardUsage;\n  char *translatedString;\n  FILE *outputStream;\n  \n  standardUsage = DAT_0010d660;\n  outputStream = _stderr;\n  if (isStandardOutput != 0) {\n    outputStream = _stdout;\n  }\n  translatedString = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,translatedString,standardUsage);\n  translatedString = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,translatedString);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (isStandardOutput != 0) {\n    translatedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,translatedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isStandardOutput ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_with_formatted_message_00107920",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "numBytes",
                "local_d4": "size",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "errorBuffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "errorCode",
                "local_78": "param2",
                "local_68": "param3",
                "local_58": "param4",
                "local_48": "param5",
                "local_38": "param6",
                "local_28": "param7",
                "local_18": "param8"
            },
            "code": "\nvoid printErrorWithFormattedMessage_00107920(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 numBytes;\n  undefined4 size;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined errorBuffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 errorCode;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  \n  if (flag != '\\0') {\n    errorCode = errorCode;\n    param2 = param2;\n    param3 = param3;\n    param4 = param4;\n    param5 = param5;\n    param6 = param6;\n    param7 = param7;\n    param8 = param8;\n  }\n  buffer = &stack0x00000008;\n  numBytes = 8;\n  localBuffer = errorBuffer;\n  size = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  print_formatted_error_message_001078c0(errorMessage,&numBytes);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "print_error_with_formatted_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_initialized_00105bb0"
            },
            "code": "\nundefined8 check_initialized_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_initialized_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_00107640"
            },
            "code": "\nundefined8 initialize_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_and_save_file_00102e6f",
                "in_RAX": "filePath",
                "pcVar1": "parentFolder",
                "uVar2": "baseName",
                "uVar3": "errorMessage",
                "pFVar4": "filePointer",
                "sVar5": "parentFolderLength",
                "pcVar6": "currentFolder"
            },
            "code": "\nvoid extractAndSaveFile_00102e6f(void)\n\n{\n  char *parentFolder;\n  char *filePath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t parentFolderLength;\n  char *currentFolder;\n  \n  parentFolder = DAT_0010d5e8;\n  do {\n    filePath = filePath + 1;\n    while (*filePath != '/') {\n      if (*filePath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (parentFolderLength = strlen(DAT_0010d5e8), parentFolderLength != 0)) {\n          if (parentFolder[parentFolderLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(parentFolder,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(parentFolder,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePointer = fopen(DAT_0010d618,\"w\");\n        if (filePointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentFolder = filePath;\n      if ((*filePath == '.') && (currentFolder = filePath + 1, filePath[1] == '.')) {\n        currentFolder = filePath + 2;\n        if ((filePath[2] == '/') || (filePath[2] == '\\0')) {\n          baseName = lbasename();\n          parentFolder = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_with_formatted_message_00107920(errorMessage,parentFolder,baseName);\n          DAT_0010d618 = (char *)baseName;\n          create_and_print_file_00105a68();\n          return;\n        }\n      }\n      for (; (filePath = currentFolder, *currentFolder != '\\0' && (*currentFolder != '/')); currentFolder = currentFolder + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_and_save_file_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_exit_status_0010315d"
            },
            "code": "\n\n\nvoid checkExitStatus_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_exit_status_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_info_from_binary_00107890",
                "param_1": "filePointer",
                "print_file_info_001079c0": "printFileInfo",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printFileInfoFromBinary_00107890(undefined8 filePointer)\n\n{\n  printFileInfo(standardOutput,filePointer,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_info_from_binary_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00105af0",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_and_process_file_001033d6",
                "param_1": "input_data",
                "param_4": "output_data",
                "pvVar1": "buffer",
                "pvVar2": "chunk",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreate_buffer_and_process_file_001033d6(undefined8 input_data,undefined8 param_2,undefined8 param_3,undefined8 output_data)\n\n{\n  void *buffer;\n  void *chunk;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    chunk = malloc(0x4002);\n    *(void **)((long)buffer + 8) = chunk;\n  } while (chunk == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  process_file_001031cf(buffer,input_data);\n  result._8_8_ = output_data;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_and_process_file_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "process_data_00103172",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "print_flag",
                "param_4": "param",
                "uVar1": "input_value",
                "auVar2": "temp_var"
            },
            "code": "\nundefined  [16]\nprocess_data_00103172(undefined8 *input_ptr,undefined8 *output_ptr,char print_flag,undefined8 param)\n\n{\n  undefined8 input_value;\n  undefined temp_var [16];\n  \n  if (print_flag != '\\0') {\n    printf(\"r - %s\\n\",*output_ptr);\n  }\n  input_value = *input_ptr;\n  output_ptr[0x1e] = input_value;\n  temp_var._1_7_ = (undefined7)((ulong)input_value >> 8);\n  temp_var[0] = 1;\n  *input_ptr = output_ptr;\n  temp_var._8_8_ = param;\n  return temp_var;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_data_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_last_match_or_end_00105870",
                "param_1": "array",
                "param_2": "size",
                "param_3": "search_value",
                "iVar1": "comparison_result",
                "uVar2": "default_search_value",
                "iVar3": "search_mode"
            },
            "code": "\nlong * find_last_match_or_end_00105870(long *array,int size,undefined8 search_value)\n\n{\n  int comparison_result;\n  undefined8 default_search_value;\n  int search_mode;\n  \n  default_search_value = DAT_0010d638;\n  search_mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_search_value = search_value;\n    search_mode = size;\n  }\n  if (search_mode == 3) {\n    for (; *array != 0; array = (long *)(*array + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*array != (undefined8 *)0x0; array = (long *)(*array + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*array,default_search_value);\n      if (comparison_result == 0) {\n        if (search_mode != 2) {\n          return array;\n        }\n        return (long *)(*array + 0xf0);\n      }\n    }\n  }\n  return array;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_last_match_or_end_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_001030ed",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid extractData_001030ed(void)\n\n{\n  undefined8 *dataPointer;\n  \n  dataPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_file_and_print_error_00105bc0",
                "param_1": "source_file_path",
                "param_2": "destination_file_path",
                "param_3": "buffer_size",
                "param_4": "file_size",
                "uVar1": "copy_result",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "uVar4": "error_template",
                "uVar5": "file_copy_size",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16] copy_file_and_print_error_00105bc0(char *source_file_path,char *destination_file_path,undefined4 buffer_size,undefined8 file_size)\n\n{\n  uint copy_result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 error_template;\n  ulong file_copy_size;\n  undefined return_value [16];\n  \n  if (destination_file_path == source_file_path) {\n    file_copy_size = 0;\n  }\n  else {\n    copy_result = copy_file_contents_00105c00(buffer_size);\n    file_copy_size = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_ptr = __errno_location();\n      error_message = strerror(*errno_ptr);\n      error_template = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_with_formatted_message_00107920(error_template,destination_file_path,error_message);\n    }\n    unlink(source_file_path);\n  }\n  return_value._8_8_ = file_size;\n  return_value._0_8_ = file_copy_size;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_file_and_print_error_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_library_file_00107650",
                "param_1": "file",
                "uVar1": "result",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkLibraryFile_00107650(undefined8 file)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size_001052a0();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileSize = process_library_file_00105300(file,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    extract_archive_information_001058b0(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00105300",
                "xexit",
                "FUN_001052a0",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_library_file_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_print_error_00102f1e",
                "unaff_RBP": "errorFlag",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyFileAndPrintError_00102f1e(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  ulong errorFlag;\n  char *filePath;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  piVar1 = __errno_location();\n  strerror(*piVar1);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_with_formatted_message_00107920(uVar2);\n  unlink(filePath);\n  auVar3._0_8_ = errorFlag & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_print_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_error_if_cannot_set_time_00102fd7",
                "piVar1": "errno_address",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_if_cannot_set_time_00102fd7(void)\n\n{\n  int *errno_address;\n  undefined8 error_message;\n  \n  errno_address = __errno_location();\n  strerror(*errno_address);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_with_formatted_message_00107920(error_message);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_error_if_cannot_set_time_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_ar_status_00103ba8",
                "printf": "printARPrompt",
                "fflush": "flushStandardOutput"
            },
            "code": "\n\n\nvoid checkARStatus_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_ar_status_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00102cd9"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_001031a5",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001075e0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_0010266f",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001052a0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1",
                "FUN_001028ed",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_0010266f",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_info_00103ddc",
                "param_1": "file_path"
            },
            "code": "\nvoid print_file_info_00103ddc(undefined8 file_path)\n\n{\n  print_file_info_00103ddc_001079c0(DAT_0010d578,file_path,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_info_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_formatted_error_message_001078c0",
                "param_1": "message",
                "param_2": "arguments"
            },
            "code": "\n\n\nvoid printFormattedErrorMessage_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010d660);\n  vfprintf(_stderr,message,arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "vfprintf",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_software_info_001075e0",
                "param_1": "version",
                "pcVar1": "message"
            },
            "code": "\nvoid printSoftwareInfo_001075e0(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_software_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archives_00105480",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entries",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "formatStr",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "result",
                "plVar5": "entryPtr",
                "local_cc": "counter",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processArchives_00105480(long archive,code *callback,undefined8 *entries,int numEntries)\n\n{\n  int comparisonResult;\n  char *formatStr;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 result;\n  long *entryPtr;\n  int counter;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryPtr = *(long **)(archive + 0xf0);\n      counter = 0;\n      for (; entryPtr != (long *)0x0; entryPtr = (long *)entryPtr[0x1e]) {\n        if (*(int *)((long)entryPtr + 0xac) == 0) {\n          currentEntry = *entryPtr;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entryPtr[0x1d];\n            if ((long *)entryPtr[0x1d] == (long *)0x0) {\n              fallbackEntry = entryPtr;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entryPtr,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = decompiled_function_00105830(currentEntry,archive), currentEntry != 0)) {\n            result = decompiled_function_00105830(*entries,archive);\n            comparisonResult = filename_cmp(result,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (counter = counter + 1, counter == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *entries;\n      formatStr = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatStr,result);\nLAB_0010553e:\n      entries = entries + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archives_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_archive_script_error_001031a5",
                "__format": "errorMessageFormat",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printArchiveScriptError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorMessageFormat;\n  \n  lineNumber = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_archive_script_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00102ba1",
                "FUN_0010266f",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_0010342d",
                "FUN_00107690",
                "FUN_0010394a",
                "FUN_0010315d",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_001058b0",
                "FUN_00102f55"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_00105db0",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001052a0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input",
                "lVar1": "index",
                "lVar2": "newSize",
                "puVar3": "bufferPtr",
                "bVar4": "tempByte",
                "__size": "totalSize"
            },
            "code": "\nundefined8 ensureBufferStack_00103df9(void)\n\n{\n  size_t totalSize;\n  undefined8 input;\n  long index;\n  long newSize;\n  undefined4 *bufferPtr;\n  byte tempByte;\n  \n  tempByte = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return input;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return input;\n    }\n    newSize = DAT_0010d580 + 8;\n    totalSize = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,totalSize);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      bufferPtr = (undefined4 *)((long)DAT_0010d5a8 + (totalSize - 0x40));\n      DAT_0010d580 = newSize;\n      for (index = 0x10; index != 0; index = index + -1) {\n        *bufferPtr = 0;\n        bufferPtr = bufferPtr + (ulong)tempByte * -2 + 1;\n      }\n      return input;\n    }\n  }\n  print_error_message_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return input;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "param_1": "inputParameters",
                "__ptr": "buffer",
                "puVar2": "secondaryParam",
                "iVar1": "result",
                "uVar3": "bytesRead",
                "uVar4": "text",
                "sVar5": "bytesWritten",
                "piVar6": "errorNumber",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "fileSize",
                "auStack_b8": "auxiliaryStack",
                "local_88": "maxBytesToRead"
            },
            "code": "\n\n\nvoid extractAndPrintArchiveContents_00103a78(undefined8 *inputParameters)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *secondaryParam;\n  ulong bytesRead;\n  undefined8 text;\n  size_t bytesWritten;\n  int *errorNumber;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong fileSize;\n  undefined auxiliaryStack [48];\n  ulong maxBytesToRead;\n  \n  buffer = (void *)xmalloc(0x2000);\n  secondaryParam = (undefined8 *)inputParameters[0x1d];\n  if ((undefined8 *)inputParameters[0x1d] == (undefined8 *)0x0) {\n    secondaryParam = inputParameters;\n  }\n  result = (**(code **)(secondaryParam[1] + 0x1e8))(inputParameters,auxiliaryStack);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputParameters);\n    }\n    totalBytesRead = 0;\n    bfd_seek(inputParameters,0,0);\n    goto LAB_00103afd;\n  }\n  inputParameters = (undefined8 *)*inputParameters;\n  errorString = \"internal stat error on %s\";\n  do {\n    text = dcgettext(0,errorString,5);\n    print_error_and_exit_00107690(text,inputParameters);\n    maxBytesToRead = fileSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errorNumber = __errno_location();\n        errorString = strerror(*errorNumber);\n        print_error_and_exit_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (maxBytesToRead <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = maxBytesToRead - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,inputParameters);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    inputParameters = *(undefined8 **)inputParameters[0x1d];\n    fileSize = maxBytesToRead;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "printf",
                "xmalloc",
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "bfd_seek",
                "__errno_location",
                "strerror",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_contents_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_0010285f",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001033b0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "extract_archive_information_001058b0",
                "param_1": "archive",
                "cVar1": "charValue",
                "uVar2": "tempVar",
                "iVar3": "tempVar2",
                "uVar4": "tempVar3",
                "__format": "formatString",
                "__ptr": "archivePath",
                "__stream": "tempFile",
                "ppcVar5": "fileDescriptor",
                "uStack0000000000000020": "stackVar",
                "in_stack_00000028": "stackVar2",
                "in_stack_00000038": "stackVar3",
                "local_3c": "result",
                "uStack_33": "filePermission"
            },
            "code": "\n\n\nvoid extractArchiveInformation_001058b0(undefined8 *archive)\n\n{\n  char charValue;\n  uint tempVar;\n  int tempVar2;\n  undefined8 tempVar3;\n  char *formatString;\n  void *archivePath;\n  FILE *tempFile;\n  char **fileDescriptor;\n  uint stackVar;\n  uint stackVar2;\n  undefined8 stackVar3;\n  int result [2];\n  undefined filePermission;\n  char cStack_32;\n  char cStack_31;\n  \n  tempVar3 = archive[0x1e];\n  result[0] = -1;\n  archivePath = (void *)xstrdup(*archive);\n  tempFile = (FILE *)create_temp_file_001057a0(archivePath,result);\n  tempVar2 = result[0];\n  if (tempFile != (FILE *)0x0) {\n    DAT_0010d618 = tempFile;\n    fileDescriptor = (char **)bfd_fdopenw(tempFile,*(undefined8 *)archive[1],result[0]);\n    if (fileDescriptor != (char **)0x0) {\n      DAT_0010d5e0 = fileDescriptor;\n      bfd_set_format(fileDescriptor,2);\n      tempVar = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)fileDescriptor + 0x49) & 0xfffffff7;\n      *(char *)((long)fileDescriptor + 0x49) = (char)tempVar;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)archive + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)fileDescriptor + 0x49) = (byte)tempVar | 0x10;\n        }\n        charValue = bfd_set_archive_head(fileDescriptor,tempVar3);\n        if (charValue != '\\0') break;\n        tempVar = exit_on_error_00107c10(archivePath);\nLAB_00102d37:\n        *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x100000;\n      }\n      tempVar2 = dup(tempVar2);\n      charValue = bfd_close(fileDescriptor);\n      if (charValue == '\\0') {\n        exit_on_error_00107c10(archivePath);\n        formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,formatString);\n        tempVar = stackVar & 0xf000;\n        if (tempVar == 0x4000) {\n          filePermission = 100;\n        }\n        else if (tempVar == 0xa000) {\n          filePermission = 0x6c;\n        }\n        else if (tempVar == 0x6000) {\n          filePermission = 0x62;\n        }\n        else if (tempVar == 0x2000) {\n          filePermission = 99;\n        }\n        else if (tempVar == 0xc000) {\n          filePermission = 0x73;\n        }\n        else {\n          filePermission = 0x70;\n          if (tempVar != 0x1000) {\n            filePermission = 0x2d;\n          }\n        }\n        cStack_32 = (-((_stackVar & 0x100) == 0) & 0xbbU) + 0x72;\n        cStack_31 = (-((_stackVar & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(tempFile,\"%s %ld/%ld %6lu %s \",&cStack_32,_stackVar >> 0x20,\n                (ulong)stackVar2,stackVar3,&stack0xffffffffffffffd8,\n                _stackVar & 0xffffffff);\n        fputs(*fileDescriptor,tempFile);\n        if ((char)archive != '\\0') {\n          if ((*(byte *)((long)fileDescriptor + 0x49) & 0x10) == 0) {\n            if (fileDescriptor[0xb] != (char *)0x0) {\n              fprintf(tempFile,\" 0x%lx\");\n            }\n          }\n          else if (fileDescriptor[0xc] != (char *)0x0) {\n            fprintf(tempFile,\" 0x%lx\");\n          }\n        }\n        fputc(10,tempFile);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(archive);\n      tempVar2 = copy_file_and_print_error_00105bc0(tempFile,archivePath,tempVar2);\n      if (tempVar2 == 0) {\n        free(archivePath);\n        free(tempFile);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(tempVar2);\n    exit_on_error_00107c10(archivePath);\n  }\n  tempVar3 = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  exit_on_error_00107c10(tempVar3);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "bfd_set_format",
                "FUN_001057a0",
                "FUN_00107c10",
                "xstrdup",
                "dcgettext",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_archive_information_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_function_00102020",
                "undefined": "functionPointer"
            },
            "code": "\nvoid executeFunction_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(functionPointer *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_modified_time_00107c80",
                "param_1": "path",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "uVar4": "message",
                "local_38": "timespec1",
                "uStack_34": "timespec2",
                "uStack_30": "timespec3",
                "uStack_2c": "timespec4",
                "local_28": "value1",
                "uStack_24": "value2",
                "uStack_20": "value3",
                "uStack_1c": "value4"
            },
            "code": "\nvoid setModifiedTime_00107c80(char *path,long fileInfo)\n\n{\n  int result;\n  int *error;\n  char *errorMessage;\n  undefined8 message;\n  undefined4 timespec1;\n  undefined4 timespec2;\n  undefined4 timespec3;\n  undefined4 timespec4;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  value1 = *(undefined4 *)(fileInfo + 0x58);\n  value2 = *(undefined4 *)(fileInfo + 0x5c);\n  value3 = *(undefined4 *)(fileInfo + 0x60);\n  value4 = *(undefined4 *)(fileInfo + 100);\n  timespec1 = *(undefined4 *)(fileInfo + 0x48);\n  timespec2 = *(undefined4 *)(fileInfo + 0x4c);\n  timespec3 = *(undefined4 *)(fileInfo + 0x50);\n  timespec4 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,path,(timespec *)&timespec1,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorMessage = strerror(*error);\n    message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_with_formatted_message_00107920(message,path,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_modified_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "process_file_00105a20",
                "param_1": "filename",
                "pcVar1": "originalDir",
                "pcVar2": "nextDir",
                "uVar3": "baseName",
                "uVar4": "errorMsg",
                "pFVar5": "filePtr",
                "sVar6": "len"
            },
            "code": "\nvoid processFile_00105a20(char *filename)\n\n{\n  char *originalDir;\n  char *nextDir;\n  undefined8 baseName;\n  undefined8 errorMsg;\n  FILE *filePtr;\n  size_t len;\n  \n  originalDir = DAT_0010d5e8;\n  DAT_0010d618 = filename;\n  if (*filename == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    originalDir = DAT_0010d618;\n    errorMsg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_with_formatted_message_00107920(errorMsg,originalDir,baseName);\n    DAT_0010d618 = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*filename == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (len = strlen(DAT_0010d5e8), len != 0)) {\n        if (originalDir[len - 1] == '/') {\n          DAT_0010d618 = (char *)concat(originalDir,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(originalDir,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePtr = fopen(DAT_0010d618,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    nextDir = filename;\n    if ((*filename == '.') && (nextDir = filename + 1, filename[1] == '.')) {\n      nextDir = filename + 2;\n      if ((filename[2] == '/') || (filename[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*nextDir != '\\0' && (*nextDir != '/')); nextDir = nextDir + 1) {\n    }\n    for (; filename = nextDir, *nextDir == '/'; nextDir = nextDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "process_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_and_set_errno_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPtr",
                "iVar1": "oldErrno"
            },
            "code": "\nundefined8 closeAndSetErrno_00102f55(void)\n\n{\n  int oldErrno;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  oldErrno = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = oldErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "create_temp_file_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param",
                "param_4": "unused_param2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "filename_start",
                "lVar4": "current_index",
                "lVar5": "last_slash_index",
                "pcVar6": "temp_file_path",
                "bVar7": "byte_value",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] create_temp_file_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param,undefined8 unused_param2)\n\n{\n  int result;\n  char *last_slash;\n  long filename_start;\n  long current_index;\n  long last_slash_index;\n  char *temp_file_path;\n  byte byte_value;\n  undefined return_value [16];\n  \n  byte_value = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    filename_start = 0;\n  }\n  else {\n    last_slash_index = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(last_slash_index + 0xb);\n    filename_start = last_slash_index + 1;\n    temp_file_path = last_slash;\n    for (current_index = last_slash_index; current_index != 0; current_index = current_index + -1) {\n      *temp_file_path = *file_path;\n      file_path = file_path + (ulong)byte_value * -2 + 1;\n      temp_file_path = temp_file_path + (ulong)byte_value * -2 + 1;\n    }\n    last_slash[last_slash_index] = '/';\n  }\n  *(undefined8 *)(last_slash + filename_start) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + filename_start) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    temp_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    temp_file_path = last_slash;\n  }\n  return_value._8_8_ = unused_param2;\n  return_value._0_8_ = temp_file_path;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00102ba1",
                "xmalloc",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "create_temp_file_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "filePermissions",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "shouldPrintHex",
                "uStack0000000000000015": "permissionChar",
                "uStack000000000000001f": "flag",
                "uStack000000000000006c": "num1",
                "fprintf": "printToOutputFile",
                "fputs": "writeToFile",
                "fputc": "writeCharToFile"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *__format;\n  uint uVar1;\n  char **fileData;\n  FILE *outputFile;\n  char shouldPrintHex;\n  undefined permissionChar;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char param_9;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined flag;\n  uint filePermissions;\n  uint num1;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar1 = filePermissions & 0xf000;\n  if (uVar1 == 0x4000) {\n    permissionChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    permissionChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    permissionChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    permissionChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    permissionChar = 0x73;\n  }\n  else {\n    permissionChar = 0x70;\n    if (uVar1 != 0x1000) {\n      permissionChar = 0x2d;\n    }\n  }\n  cStack0000000000000016 = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  cStack0000000000000017 = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  param_9 = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  cStack0000000000000019 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001a = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001b = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  cStack000000000000001c = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001d = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001e = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (param_9 == 'x') {\n      param_9 = 's';\n    }\n    else {\n      param_9 = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (cStack000000000000001b == 'x') {\n      cStack000000000000001b = 's';\n    }\n    else {\n      cStack000000000000001b = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (cStack000000000000001e == 'x') {\n      cStack000000000000001e = 't';\n    }\n    else {\n      cStack000000000000001e = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)num1,\n          (ulong)fileSize,timestamp,&stack0x00000020,(ulong)filePermissions);\n  fputs(*fileData,outputFile);\n  if (shouldPrintHex != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fprintf",
                "sprintf",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105c00",
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00103e95",
                "FUN_001031cf",
                "FUN_001028ed",
                "FUN_00102f55",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "process_library_file_00105300",
                "param_1": "filename",
                "param_2": "archivedFiles",
                "plVar1": "archivedFilePtr",
                "pcVar2": "pluginName",
                "bVar3": "isThinLibrary",
                "cVar4": "formatCheckResult",
                "iVar5": "result",
                "uVar6": "translationMsg",
                "uVar7": "translationContext",
                "piVar8": "errnoPtr",
                "lVar9": "filePtr",
                "puVar10": "convertedFiles",
                "local_b0": "deviceStatistics",
                "local_a8": "fileStatistics"
            },
            "code": "\n\n\nundefined8 * processLibraryFile_00105300(char *filename,undefined8 *archivedFiles)\n\n{\n  long *archivedFilePtr;\n  char *pluginName;\n  byte isThinLibrary;\n  char formatCheckResult;\n  int result;\n  undefined8 translationMsg;\n  undefined8 translationContext;\n  int *errnoPtr;\n  long filePtr;\n  undefined8 *convertedFiles;\n  undefined8 deviceStatistics;\n  stat fileStatistics;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  result = stat(filename,&fileStatistics);\n  pluginName = DAT_0010d618;\n  if (result == 0) goto LAB_001053be;\n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(filename);\n      check_exit_status_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archivedFiles != (undefined8 *)0x0)) {\n      convertedFiles = (undefined8 *)open_convert_close_00102710();\n      return convertedFiles;\n    }\n    archivedFiles = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((archivedFiles != (undefined8 *)0x0) && (formatCheckResult = bfd_set_format(archivedFiles,2), formatCheckResult != '\\0')) &&\n       (formatCheckResult = bfd_close(archivedFiles), formatCheckResult != '\\0')) {\n      pluginName = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  exit_on_error_00107c10(filename);\n  do {\n    isThinLibrary = *(byte *)((long)archivedFiles + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        translationContext = *archivedFiles;\n        translationMsg = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(translationMsg,translationContext);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      translationContext = *archivedFiles;\n      translationMsg = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(translationMsg,translationContext);\nLAB_001027cb:\n      print_error_00107c20(filename);\n      result = bfd_get_error();\n      if (result == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(deviceStatistics);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePtr = archivedFiles + 0x1e;\n      for (filePtr = bfd_openr_next_archived_file(archivedFiles,0); filePtr != 0;\n          filePtr = bfd_openr_next_archived_file(archivedFiles,filePtr)) {\n        *archivedFilePtr = filePtr;\n        archivedFilePtr = (long *)(filePtr + 0xf0);\n      }\n      *archivedFilePtr = 0;\n      result = bfd_get_error();\n      if (result == 9) {\n        return archivedFiles;\n      }\n      do {\n        exit_on_error_00107c10(filename);\nLAB_00102826:\n        translationContext = dcgettext(0,\"creating %s\",5);\n        print_error_with_formatted_message_00107920(translationContext,filename);\n        pluginName = filename;\nLAB_001053be:\n        DAT_0010d618 = pluginName;\n        archivedFiles = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (archivedFiles == (undefined8 *)0x0);\n      formatCheckResult = bfd_check_format_matches(archivedFiles,2,&deviceStatistics);\n      if (formatCheckResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (filePtr = bfd_openr_next_archived_file(archivedFiles,0), filePtr == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openw",
                "bfd_set_format",
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "xexit",
                "bfd_openr_next_archived_file",
                "FUN_00107690",
                "bfd_set_error",
                "stat",
                "FUN_00102710",
                "bfd_close",
                "bfd_check_format_matches",
                "FUN_00107c20",
                "bfd_get_error",
                "fprintf",
                "perror",
                "__errno_location",
                "FUN_00103bd1",
                "FUN_0010315d",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_library_file_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte1",
                "puVar2": "ptrUInt1",
                "bVar3": "byteVar3",
                "plVar4": "ptrLong1",
                "puVar5": "ptrUndef8",
                "uVar6": "undefVar6",
                "uVar7": "undefVar7",
                "bVar8": "boolVar8",
                "bVar9": "boolVar9",
                "cVar14": "charVar14",
                "ppcVar10": "ptrPtrChar1",
                "piVar11": "ptrInt1",
                "puVar12": "ptrUndef1",
                "bVar13": "byteVar13",
                "iVar15": "intVar15",
                "uVar16": "uintVar16",
                "uVar17": "undefVar17",
                "pFVar18": "fileVar18",
                "sVar19": "sizeVar19",
                "sVar20": "sizeVar20",
                "__ptr": "ptrByte2",
                "plVar21": "ptrLong2",
                "pFVar22": "fileVar22",
                "pcVar23": "ptrChar1",
                "lVar24": "longVar24",
                "uVar25": "ulongVar25",
                "puVar26": "ptrUndef8_1",
                "uVar27": "undefVar27",
                "pFVar28": "fileVar28",
                "lVar34": "longVar34",
                "lVar35": "longVar35",
                "uVar37": "uintVar37",
                "iVar45": "intVar45",
                "bVar47": "boolVar47",
                "bVar48": "byteVar48",
                "local_130": "localFile1",
                "local_128": "localFile2",
                "local_118": "localByte1",
                "local_110": "localPtrChar1",
                "local_108": "localSize1",
                "local_100": "localLong1",
                "local_c8": "localUndef2",
                "uStack_c5": "undefStack5",
                "uStack_c6": "undefStack6",
                "local_b0": "localUint1"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptrByte1;\n  uint *ptrUInt1;\n  byte byteVar3;\n  long *ptrLong1;\n  undefined8 *ptrUndef8;\n  undefined4 undefVar6;\n  undefined4 undefVar7;\n  bool boolVar8;\n  bool boolVar9;\n  char **ptrPtrChar1;\n  int *ptrInt1;\n  undefined *ptrUndef1;\n  byte byteVar13;\n  char charVar14;\n  int intVar15;\n  uint uintVar16;\n  undefined4 undefVar17;\n  FILE *fileVar18;\n  size_t sizeVar19;\n  size_t sizeVar20;\n  byte *ptrByte2;\n  long *ptrLong2;\n  FILE *fileVar22;\n  char *ptrChar1;\n  long longVar24;\n  ulong ulongVar25;\n  undefined8 *ptrUndef8_1;\n  undefined8 undefVar27;\n  FILE *fileVar28;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar33;\n  long longVar34;\n  long longVar35;\n  undefined **ppuVar36;\n  uint uintVar37;\n  char *unaff_RBP;\n  byte *pbyteVar38;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int intVar45;\n  char *pcVar46;\n  bool boolVar47;\n  byte byteVar48;\n  undefined8 localFile1;\n  FILE *localFile2;\n  byte *localByte1;\n  char **localPtrChar1;\n  size_t localSize1;\n  long localLong1;\n  undefined localUndef2 [2];\n  undefined undefStack6;\n  undefined5 undefStack5;\n  uint localUint1;\n  \n  byteVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  fileVar18 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  localPtrChar1 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  localFile2 = (FILE *)0x0;\n  fileVar22 = argv;\n  do {\n    uintVar16 = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar16;\n    localFile1 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)fileVar22;\n    if (**(char **)(&fileVar22->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)localPtrChar1 - 1;\n      localPtrChar1 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        ptrLong2 = *(long **)fileVar22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,ptrLong2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&fileVar22->_flags + (long)unaff_RBP * 2) + 1;\n      intVar15 = stat(pcVar39,(stat *)localUndef2);\n      if (-1 < intVar15) {\n        if ((localUint1 & 0xf000) == 0x4000) {\n          ptrLong2 = *(long **)fileVar22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        fileVar18 = fopen(pcVar39,\"r\");\n        if (fileVar18 != (FILE *)0x0) {\n          intVar15 = fseek(fileVar18,0,2);\n          if (((intVar15 != -1) && (sizeVar19 = ftell(fileVar18), sizeVar19 != 0xffffffffffffffff)) &&\n             (intVar15 = fseek(fileVar18,0,0), intVar15 != -1)) {\n            localByte1 = (byte *)xmalloc(sizeVar19 + 1);\n            sizeVar20 = fread(localByte1,1,sizeVar19,fileVar18);\n            if ((sizeVar19 == sizeVar20) || (intVar15 = ferror(fileVar18), intVar15 == 0)) {\n              localByte1[sizeVar20] = 0;\n              byteVar13 = *localByte1;\n              pbyteVar33 = localByte1;\n              while( true ) {\n                if (byteVar13 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) == 0) break;\n                byteVar13 = pbyteVar33[1];\n                pbyteVar33 = pbyteVar33 + 1;\n              }\n              sizeVar19 = strlen((char *)localByte1);\n              ptrByte2 = (byte *)xmalloc(sizeVar19 + 1);\n              fileVar28 = (FILE *)0x0;\n              intVar15 = 0;\n              boolVar9 = false;\n              boolVar47 = false;\n              boolVar8 = false;\n              localLong1 = 0;\n              pbyteVar33 = localByte1;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar33 * 2] & 0x40) != 0) {\n                  pbyteVar33 = pbyteVar33 + 1;\n                }\n                if ((intVar15 == 0) || (intVar15 + -1 <= (int)localLong1)) {\n                  if (fileVar28 == (FILE *)0x0) {\n                    intVar15 = 8;\n                    fileVar28 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&fileVar28->_flags + localLong1 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar15 = intVar15 * 2;\n                    fileVar28 = (FILE *)xrealloc(fileVar28,(long)intVar15 << 3);\n                    ppcVar31 = (char **)((long)&fileVar28->_flags + localLong1 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&fileVar28->_flags + localLong1 * 8);\n                }\n                byteVar13 = *pbyteVar33;\n                pbyteVar38 = ptrByte2;\n                while (byteVar13 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar9 | boolVar8 | boolVar47))) {\n                      boolVar8 = false;\n                      boolVar9 = false;\n                      boolVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar8) break;\n                    pbyteVar33 = pbyteVar33 + 1;\n                    *pbyteVar38 = byteVar13;\n                    pbyteVar38 = pbyteVar38 + 1;\n                    boolVar8 = false;\n                    byteVar13 = *pbyteVar33;\n                    if (byteVar13 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar13 == 0x5c) {\n                    boolVar8 = true;\n                  }\n                  else if (boolVar47) {\n                    if (byteVar13 == 0x27) {\n                      boolVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar38 = byteVar13;\n                      pbyteVar38 = pbyteVar38 + 1;\n                    }\n                  }\n                  else if (boolVar9) {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = false;\n                  }\n                  else if (byteVar13 == 0x27) {\n                    boolVar47 = true;\n                  }\n                  else {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = true;\n                  }\n                  ptrByte1 = pbyteVar33 + 1;\n                  pbyteVar33 = pbyteVar33 + 1;\n                  byteVar13 = *ptrByte1;\n                }\nLAB_0010606f:\n                *pbyteVar38 = 0;\n                ptrLong2 = (long *)xstrdup(ptrByte2);\n                *ppcVar31 = (char *)ptrLong2;\n                *(undefined8 *)(fileVar28->_shortbuf + localLong1 * 8 + -0x7b) = 0;\n                byteVar13 = *pbyteVar33;\n                byteVar3 = (&_sch_istable)[(ulong)byteVar13 * 2];\n                while ((byteVar3 & 0x40) != 0) {\n                  byteVar13 = pbyteVar33[1];\n                  pbyteVar33 = pbyteVar33 + 1;\n                  byteVar3 = (&_sch_istable)[(ulong)byteVar13 * 2];\n                }\n                localLong1 = localLong1 + 1;\n                if (byteVar13 == 0) {\n                  free(ptrByte2);\n                  if (fileVar22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(localByte1);\n          }\n          fclose(fileVar18);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar16 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar16 = (uint)unaff_R12;\n        intVar15 = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar15 != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVar16 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptrUndef1 = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar16;\n        if ((char)uintVar16 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_functions_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            ptrUndef1 = PTR_DAT_0010d2e0;\n            intVar15 = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar15 + 1;\n            *(code **)(ptrUndef1 + (long)intVar15 * 8 + 0x10) = cleanup_and_delete_file_00107730;\n          }\n          else {\n            ptrUndef8_1 = (undefined8 *)malloc(0x110);\n            if (ptrUndef8_1 != (undefined8 *)0x0) {\n              *ptrUndef8_1 = ptrUndef1;\n              *(undefined4 *)(ptrUndef8_1 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)ptrUndef8_1;\n              goto LAB_0010632b;\n            }\n          }\n          longVar24 = 1;\n          do {\n            longVar35 = longVar24;\n            intVar15 = (int)pcVar46;\n            if (intVar15 <= (int)longVar35) break;\n            charVar14 = initialize_00107640(*(undefined8 *)((int *)pcVar43 + longVar35 * 2));\n            longVar24 = longVar35 + 1;\n          } while (charVar14 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar35 * 8 + -8);\n          uVar44 = intVar15 - ((int)longVar35 + -1);\n          fileVar18 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar37 = 0;\n            while (intVar15 = getopt_long(fileVar18,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar15 != -1)\n            {\n              if (intVar15 < 0x77) {\n                if (0x43 < intVar15) {\n                  switch(intVar15) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintVar37 = uintVar16;\n                  }\n                }\n              }\n              else if (intVar15 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              print_usage_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_software_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uintVar37 != '\\0') break;\n                uintVar16 = check_library_file_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar16);\n              }\n            }\n            while (longVar24 = get_file_size_001052a0(pcVar39), longVar24 < 1) {\n              uintVar16 = 1;\nLAB_001071c4:\n              ptrInt1 = (int *)pcVar43;\n              pcVar43 = (char *)((long)ptrInt1 + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar16);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)ptrInt1 * 8 + -0x7b);\n            }\n            intVar15 = open(pcVar39,2,0);\n            if (intVar15 < 0) {\n              bfd_set_error(1);\n              exit_on_error_00107c10(pcVar39);\nLAB_0010737f:\n              exit_on_error_00107c10(pcVar39);\nLAB_00107387:\n              print_error_00107c20(pcVar39);\n              intVar15 = bfd_get_error();\n              if (intVar15 == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(undefStack5,\n                                      CONCAT12(undefStack6,CONCAT11(localUndef2[1],localUndef2[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar14 = bfd_check_format_matches(unaff_RBP,2,localUndef2);\n            if (charVar14 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                ptrUInt1 = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *ptrUInt1 = *ptrUInt1 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar14 = bfd_close(unaff_RBP);\n              if (charVar14 != '\\0') {\n                uintVar16 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefVar27 = dcgettext(0,\"%s: no archive map to update\",5);\n            print_error_and_exit_00107690(undefVar27,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            sizeVar19 = strlen(pcVar39);\n            if ((sizeVar19 < 6) ||\n               (intVar15 = filename_cmp(pcVar39 + (sizeVar19 - 6),\"ranlib\"), intVar15 != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          fileVar22 = (FILE *)unaff_RBP;\n          fileVar28 = fileVar18;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          localFile1 = (FILE *)CONCAT71(localFile1._1_7_,(char)uintVar16);\nLAB_001063a3:\n          fileVar22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            localUndef2[0] = 0x2d;\n            undefStack6 = 0;\n            sizeVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar15 = (int)sizeVar19 + (int)fileVar18;\n            unaff_R12 = (FILE *)xmalloc((long)intVar15 * 8);\n            undefVar17 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefVar17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            localFile2 = (FILE *)((long)pcVar46 + 0x10);\n            localPtrChar1 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              localByte1 = localUndef2;\n              localUndef2[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                localUndef2[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(localByte1);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  localUndef2[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(localByte1);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    localUndef2[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(localByte1);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar14 = *(char *)((long)ppcVar31 + 4);\n                    localPtrChar1 = ppcVar32;\n                    if (charVar14 != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        localUndef2[1] = charVar14;\n                        ptrChar1 = (char *)xstrdup(localByte1);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = ptrChar1;\n                        charVar14 = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        localPtrChar1 = ppcVar32;\n                      } while (charVar14 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar24 = (long)(int)fileVar18;\n            ptrInt1 = (int *)pcVar46 + longVar24 * 2;\n            if (localFile2 < ptrInt1) {\n              ulongVar25 = longVar24 * 8 - 0x11;\n              if ((ulongVar25 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < ptrInt1) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < ptrInt1 &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < ptrInt1)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < ptrInt1)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < ptrInt1)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  ptrPtrChar1 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < ptrInt1;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar48 * -2 + 1) {\n                    *ptrPtrChar1 = *ppcVar31;\n                    ptrPtrChar1 = ptrPtrChar1 + (ulong)byteVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefVar6 = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar25 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefVar17;\n                *(undefined4 *)(ppcVar32 + 1) = undefVar6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefVar7;\n                undefVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefVar6 = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar25 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefVar17;\n                *(undefined4 *)(ppcVar32 + 3) = undefVar6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefVar7;\n                if (ulongVar25 != 2) {\n                  undefVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefVar6 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefVar17;\n                  *(undefined4 *)(ppcVar32 + 5) = undefVar6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefVar7;\n                  if (ulongVar25 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefVar17 = *(undefined4 *)(pcVar39 + 4);\n                      undefVar6 = *(undefined4 *)(pcVar39 + 8);\n                      undefVar7 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefVar17;\n                      *(undefined4 *)(ppcVar31 + 1) = undefVar6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefVar7;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar25);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)localFile2 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar24 + -2;\n            }\n            fileVar18 = (FILE *)(ulong)(intVar15 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar16 = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)fileVar18 & 0xffffffff,pcVar46,fileVar22,ppuVar36,0);\n            unaff_RBP = (char *)fileVar22;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            fileVar28 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_0010342d(0);\n            pcVar46 = (char *)fileVar28;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          fileVar22 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)fileVar18 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar16 = (int)fileVar18 - (_optind + -1);\n            fileVar18 = (FILE *)(ulong)uintVar16;\n            _optind = 0;\n            if (1 < (int)uintVar16) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)localFile1 & 0xff);\n          uintVar16 = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_software_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              fileVar28 = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefVar17 = check_library_file_00107650();\n                    \n                  xexit(undefVar17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar15 = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar15 * 2 * 4) == (char *)0x0) {\n                    undefVar27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_error_and_exit_00107690(undefVar27);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar15 + 1);\n                  longVar24 = strtol(*(char **)((long)ppuVar36 + (long)intVar15 * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar24 = (long)(int)unaff_RBP;\n              fileVar22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + longVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              fileVar22 = (FILE *)((long)ppuVar36 + (longVar24 + 1) * 2 * 4);\n              if (*(FILE **)fileVar22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                fileVar22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                fileVar18 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)fileVar18;\n                  fileVar18 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVar24 * 2 * 4) + (long)fileVar18 * 2) !=\n                         0);\n              }\n              ptrUndef8_1 = (undefined8 *)process_library_file_00105300();\n              fileVar18 = fileVar22;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrUndef8_1 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)fileVar22;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archives_00105480(ptrUndef8_1,extract_archive_contents_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar19 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sizeVar19 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",ptrUndef8_1);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar24 != 0) {\n                    charVar14 = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    charVar14 = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    fileVar28 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (fileVar28 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar14 = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    longVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (longVar24 == 0) goto LAB_00106803;\n                    intVar15 = (int)pcVar43;\n                    localFile1 = (FILE *)((long)(intVar15 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(localFile1,\"Cannot reset libdeps record type.\");\n                    if (intVar15 == 0) {\n                      longVar24 = 0;\n                    }\n                    else {\n                      undefVar17 = *(undefined4 *)&fileVar22->field_0x4;\n                      *(int *)unaff_RBP = fileVar22->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = undefVar17;\n                      longVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = localFile1[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&fileVar22->_flags;\n                        fileVar22 = (FILE *)((long)fileVar22 + (ulong)byteVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar15 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)localFile1) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      fileVar22 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)fileVar22;\n                if (fileVar22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                fileVar18 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)fileVar22;\n                if ((fileVar22 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_files_00105570(ptrUndef8_1,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)fileVar22;\nswitchD_00106ed8_caseD_3:\n                process_archives_00105480(ptrUndef8_1,print_file_info_from_binary_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)fileVar22;\nswitchD_00106ed8_caseD_4:\n                process_archives_00105480(ptrUndef8_1,extract_and_print_archive_contents_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (fileVar22 == (FILE *)0x0) break;\nLAB_00106afb:\n                fileVar18 = (FILE *)(ptrUndef8_1 + 0x1e);\n                do {\n                  unaff_R12 = fileVar18;\n                  if (*(FILE **)fileVar22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_archive_information_001058b0(ptrUndef8_1);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    ptrLong2 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)fileVar22;\n                    if (ptrLong2 == (long *)0x0) {\n                      undefVar27 = *ptrUndef8_1;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_error_and_exit_00107690(uVar30,pcVar46,undefVar27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar24 = *ptrLong2;\n                    undefVar27 = decompiled_function_00105830(pcVar46,ptrUndef8_1);\n                    intVar15 = filename_cmp(undefVar27,longVar24);\n                    if (intVar15 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)ptrLong2[0x1e];\n                  pplVar29 = (long **)find_last_match_or_end_00105870(fileVar18,3,0);\n                  boolVar47 = DAT_0010d60c != 0;\n                  ptrLong1 = *pplVar29;\n                  *pplVar29 = ptrLong2;\n                  ptrLong2[0x1e] = (long)ptrLong1;\n                  if (boolVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)fileVar22);\n                  }\n                  fileVar22 = (FILE *)&fileVar22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar15 = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar15);\n          process_archive_script_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefVar17 = bfd_get_error();\n        fileVar22 = (FILE *)bfd_errmsg(undefVar17);\n        undefVar27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar15 = print_error_and_exit_00107690(undefVar27,\"x86_64-pc-linux-gnu\",fileVar22);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          fileVar28 = (FILE *)pcVar46;\n          switch(intVar15) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar16 = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)fileVar22;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)fileVar22;\nLAB_00106803:\n        undefVar27 = dcgettext(0,pcVar39,5);\n        print_error_and_exit_00107690(undefVar27);\nLAB_00106814:\n        intVar15 = (int)pcVar46;\n        fileVar28 = (FILE *)xmalloc(8);\n        *(long **)fileVar28 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar15 = 0;\n          }\n          else {\n            longVar24 = 1;\n            do {\n              intVar15 = (int)longVar24;\n              longVar35 = longVar24 * 2;\n              longVar24 = longVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + longVar35) != 0);\n          }\n          fileVar22 = (FILE *)xmalloc((long)(intVar15 + 1) << 3);\n          ptrLong2 = *(long **)pcVar43;\n          longVar24 = 0;\n          while (ptrLong2 != (long *)0x0) {\n            undefVar27 = xstrdup();\n            *(undefined8 *)((long)&fileVar22->_flags + longVar24) = undefVar27;\n            ptrLong2 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar24 + -0x7b);\n            longVar24 = longVar24 + 8;\n          }\n          *(undefined8 *)((long)&fileVar22->_flags + longVar24) = 0;\nLAB_0010610a:\n          intVar15 = (int)pcVar46;\n          pcVar43 = (char *)fileVar22;\n          if (*(long **)fileVar28 == (long *)0x0) goto LAB_00106a80;\n          longVar24 = 0;\n          do {\n            longVar34 = longVar24 + 1;\n            longVar35 = longVar24 * 8;\n            longVar24 = longVar34;\n          } while (*(long *)(fileVar28->_shortbuf + longVar35 + -0x7b) != 0);\n          localSize1 = longVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar34 = 0;\n          localSize1 = 0;\n        }\n        longVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + longVar34);\n        free(*(void **)((int *)pcVar43 + longVar24));\n        fileVar22 = (FILE *)xrealloc(pcVar43,(longVar34 + 1 + (long)intVar15) * 8);\n        uVar44 = intVar15 + -1 + (int)longVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&fileVar22->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&fileVar22->_IO_read_ptr + (long)localFile1),\n                (long)(int)(intVar15 - uintVar16) << 3);\n        memcpy((void *)((long)&localFile1->_flags + (long)&fileVar22->_flags),fileVar28,localSize1);\n        free(fileVar28);\n        free(localByte1);\n        fclose(fileVar18);\n        uintVar16 = (int)localFile2 + 1;\n        unaff_R12 = localFile1;\n        pcVar43 = (char *)fileVar22;\n        localFile1 = fileVar28;\n        if ((int)uintVar16 < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar16 = uintVar16 + 1;\n    localFile2 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar16;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar15 = getopt_long((ulong)fileVar18 & 0xffffffff,pcVar46,fileVar22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)fileVar22;\n  if (intVar15 == -1) goto LAB_00106680;\n  if ((0x14 < intVar15 - 100U) || ((0x117201UL >> ((byte)(intVar15 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefVar27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_with_formatted_message_00107920(undefVar27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)fileVar18 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intVar45 = 0;\n  intVar15 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  ptrUndef8 = ptrUndef8_1;\n  if (intVar15 == 0) {\n    *(byte *)((long)ptrUndef8_1 + 0x49) = *(byte *)((long)ptrUndef8_1 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      ptrLong2 = ptrUndef8 + 0x1e;\n      if ((undefined8 *)*ptrLong2 == (undefined8 *)0x0) break;\n      undefVar27 = *(undefined8 *)*ptrLong2;\n      uVar30 = decompiled_function_00105830(*(FILE **)unaff_RBP,ptrUndef8_1);\n      intVar15 = filename_cmp(uVar30,undefVar27);\n      if ((intVar15 == 0) &&\n         ((DAT_0010d634 == '\\0' || (intVar45 = intVar45 + 1, intVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *ptrLong2 = *(long *)(*ptrLong2 + 0xf0);\n        fileVar18 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      ptrUndef8 = (undefined8 *)*ptrLong2;\n    }\n    if (DAT_0010d60c != 0) {\n      fileVar22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,fileVar22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_bwrite",
                "strtol",
                "bfd_init",
                "isatty",
                "FUN_00107640",
                "FUN_001075e0",
                "bindtextdomain",
                "FUN_00103a78",
                "bfd_find_target",
                "memcpy",
                "fread",
                "FUN_00107730",
                "FUN_00105570",
                "FUN_00107c20",
                "bfd_plugin_set_plugin",
                "FUN_001052a0",
                "bfd_plugin_set_program_name",
                "open",
                "xrealloc",
                "bfd_create",
                "FUN_00107650",
                "FUN_00107740",
                "setlocale",
                "bfd_set_format",
                "xexit",
                "bfd_make_writable",
                "strcmp",
                "stat",
                "fseek",
                "bfd_fdopenr",
                "xmalloc",
                "lbasename",
                "bfd_set_error_program_name",
                "fprintf",
                "getopt_long",
                "xmalloc_set_program_name",
                "FUN_00105870",
                "FUN_00105300",
                "printf",
                "FUN_00105830",
                "dcgettext",
                "FUN_00107cc0",
                "bfd_set_error",
                "memmove",
                "fclose",
                "strlen",
                "bfd_close",
                "free",
                "bfd_set_default_target",
                "bfd_check_format_matches",
                "filename_cmp",
                "xstrdup",
                "ftell",
                "FUN_00105480",
                "FUN_0010394a",
                "FUN_00107920",
                "bfd_errmsg",
                "FUN_00107c10",
                "fileno",
                "FUN_00103e95",
                "FUN_00107690",
                "fopen",
                "ferror",
                "FUN_001058b0",
                "FUN_00107890",
                "FUN_0010342d",
                "bfd_get_error",
                "textdomain",
                "bfd_make_readable",
                "malloc",
                "FUN_00103bd1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "__format": "formatString",
                "plVar2": "currentParam",
                "uVar1": "translationTable",
                "param_1": "inputParams"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *inputParams)\n\n{\n  undefined8 translationTable;\n  char *formatString;\n  long *currentParam;\n  \n  fflush(_stdout);\n  translationTable = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,translationTable);\n  for (currentParam = inputParams; *currentParam != 0; currentParam = currentParam + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(inputParams);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "fflush",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_on_error_00107c10",
                "print_error_00107c20": "printErrorMessage",
                "xexit": "exitProgram"
            },
            "code": "\nvoid exitOnError_00107c10(void)\n\n{\n  printErrorMessage();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_001028ed",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "exit_on_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "open_convert_close_00102710",
                "plVar1": "pointer",
                "cVar2": "format_valid",
                "bVar3": "thin_convert",
                "iVar4": "error_status",
                "lVar5": "file_descriptor",
                "uVar6": "error_message",
                "uVar7": "file_name",
                "puVar8": "output_file",
                "unaff_RBP": "return_address",
                "in_stack_00000008": "stack_argument"
            },
            "code": "\n\n\nundefined8 * open_convert_close_00102710(void)\n\n{\n  long *pointer;\n  char format_valid;\n  byte thin_convert;\n  int error_status;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 file_name;\n  undefined8 *output_file;\n  undefined8 return_address;\n  undefined8 stack_argument;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_valid = bfd_check_format(file_descriptor,1);\n    if (format_valid != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  output_file = (undefined8 *)bfd_openw();\n  if (((output_file != (undefined8 *)0x0) && (format_valid = bfd_set_format(output_file,2), format_valid != '\\0')) &&\n     (format_valid = bfd_close(output_file), format_valid != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  exit_on_error_00107c10();\n  do {\n    thin_convert = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (thin_convert != 0) {\n        file_name = *output_file;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(error_message,file_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (thin_convert == 0) {\n      file_name = *output_file;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(error_message,file_name);\nLAB_001027cb:\n      print_error_00107c20();\n      error_status = bfd_get_error();\n      if (error_status == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(stack_argument);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      pointer = output_file + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_file,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_file,file_descriptor)) {\n        *pointer = file_descriptor;\n        pointer = (long *)(file_descriptor + 0xf0);\n      }\n      *pointer = 0;\n      error_status = bfd_get_error();\n      if (error_status == 9) {\n        return output_file;\n      }\n      do {\n        exit_on_error_00107c10();\nLAB_00102826:\n        file_name = dcgettext(0,\"creating %s\",5);\n        print_error_with_formatted_message_00107920(file_name);\nLAB_001053b7:\n        DAT_0010d618 = return_address;\n        output_file = (undefined8 *)bfd_openr();\n      } while (output_file == (undefined8 *)0x0);\n      format_valid = bfd_check_format_matches(output_file,2,&stack0x00000008);\n      if (format_valid == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_file,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "open_convert_close_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "process_archive_script_00103e95",
                "pplVar1": "doublePointer",
                "cVar2": "character",
                "ppFVar3": "doublePointerPointer",
                "pFVar4": "filePointer",
                "plVar5": "pointer",
                "uVar6": "unsignedLong",
                "pbVar7": "bytePointer",
                "iVar8": "integer",
                "pcVar10": "pointerToCharacter",
                "uVar11": "unsignedLong",
                "iVar9": "integer",
                "plVar12": "pointer",
                "sVar13": "size_t",
                "pvVar14": "pointer",
                "pcVar15": "pointerToCharacter",
                "pcVar16": "pointerToCharacter",
                "lVar17": "long",
                "lVar18": "long",
                "uVar19": "ulong",
                "uVar20": "uint",
                "lVar21": "long",
                "puVar22": "doublePointer",
                "puVar23": "doublePointer",
                "uVar24": "uint",
                "iVar25": "integer",
                "uVar26": "ulong",
                "ppcVar27": "doublePointerPointer",
                "bVar28": "boolean",
                "ppcVar29": "doublePointerPointer",
                "bVar30": "byte",
                "lVar31": "long",
                "pbVar32": "bytePointer",
                "pbVar33": "bytePointer",
                "piVar34": "integerPointer",
                "pbVar35": "bytePointer",
                "uVar36": "uint",
                "iVar37": "integer",
                "ppcVar38": "doublePointerPointer",
                "bVar39": "byte",
                "local_828": "newLocalVariable",
                "local_820": "newLocalVariable",
                "local_818": "newLocalVariable",
                "local_810": "newLocalVariable",
                "local_800": "newLocalVariable",
                "local_7fc": "newLocalVariable",
                "local_7f8": "newLocalVariable",
                "local_7d0": "newLocalVariable"
            },
            "code": "\n\n\nvoid processArchiveScript_00103e95(void)\n\n{\n  long **doublePointer;\n  char character;\n  FILE **doublePointerPointer;\n  FILE *filePointer;\n  long *pointer;\n  undefined8 unsignedLong;\n  byte *bytePointer;\n  int integer;\n  char *pointerToCharacter;\n  undefined8 unsignedLong;\n  int integer;\n  long *pointer;\n  size_t size_t;\n  void *pointer;\n  char *pointerToCharacter;\n  char *pointerToCharacter;\n  long long;\n  long long;\n  ulong ulong;\n  uint uint;\n  long long;\n  undefined8 *doublePointer;\n  undefined8 *doublePointer;\n  uint uint;\n  int integer;\n  ulong ulong;\n  char **doublePointerPointer;\n  bool boolean;\n  char **doublePointerPointer;\n  byte byte;\n  long long;\n  byte *bytePointer;\n  byte *bytePointer;\n  int *integerPointer;\n  byte *bytePointer;\n  uint uint;\n  int integer;\n  char **doublePointerPointer;\n  byte byte;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *newLocalVariable;\n  char *newLocalVariable;\n  long newLocalVariable;\n  char **newLocalVariable;\n  int newLocalVariable;\n  uint newLocalVariable;\n  byte *newLocalVariable;\n  stat newLocalVariable;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  byte = 0;\n  long = 0;\n  DAT_0010d550 = -2;\n  doublePointerPointer = local_678;\n  newLocalVariable = 0;\n  newLocalVariable = local_740;\n  newLocalVariable = 200;\n  newLocalVariable = newLocalVariable;\n  newLocalVariable = doublePointerPointer;\nLAB_00103ee9:\n  *newLocalVariable = (char)long;\n  if (newLocalVariable + newLocalVariable + -1 <= newLocalVariable) {\n    long = (long)newLocalVariable - (long)newLocalVariable;\n    long = long + 1;\n    if (newLocalVariable < 10000) {\n      long = newLocalVariable * 2;\n      newLocalVariable = 10000;\n      if (long < 0x2711) {\n        newLocalVariable = long;\n      }\n      pointerToCharacter = (char *)malloc(newLocalVariable * 9 + 7);\n      if (pointerToCharacter != (char *)0x0) {\n        long = long * 8;\n        pointerToCharacter = newLocalVariable;\n        pointerToCharacter = pointerToCharacter;\n        for (; long != 0; long = long + -1) {\n          *pointerToCharacter = *pointerToCharacter;\n          pointerToCharacter = pointerToCharacter + (ulong)byte * -2 + 1;\n          pointerToCharacter = pointerToCharacter + (ulong)byte * -2 + 1;\n        }\n        doublePointerPointer = (char **)(pointerToCharacter + newLocalVariable);\n        doublePointerPointer = doublePointerPointer;\n        for (; long != 0; long = long + -1) {\n          *(undefined *)doublePointerPointer = *(undefined *)newLocalVariable;\n          newLocalVariable = (char **)((long)newLocalVariable + (ulong)byte * -2 + 1);\n          doublePointerPointer = (char **)((long)doublePointerPointer + (ulong)byte * -2 + 1);\n        }\n        if (newLocalVariable != local_740) {\n          free(newLocalVariable);\n        }\n        newLocalVariable = pointerToCharacter + long;\n        doublePointerPointer = doublePointerPointer + long;\n        newLocalVariable = pointerToCharacter;\n        newLocalVariable = doublePointerPointer;\n        if (pointerToCharacter + newLocalVariable + -1 <= newLocalVariable) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_archive_script_error_001031a5();\nLAB_0010524c:\n    pointerToCharacter = newLocalVariable;\n    if (newLocalVariable == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pointerToCharacter);\n    return;\n  }\nLAB_00103fd8:\n  integer = (int)long;\n  if (integer == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[integer];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          doublePointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          unsignedLong = create_buffer_and_process_file_001033d6(DAT_0010d590);\n          *doublePointer = unsignedLong;\n        }\n        extract_data_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      bytePointer = DAT_0010d5b0;\n      bytePointer = DAT_0010d5b0;\n      uint = DAT_0010d5d0;\nLAB_001040d4:\n      ulong = (ulong)uint;\n      ulong = (ulong)newLocalVariable;\n      boolean = false;\n      do {\n        byte = (&DAT_0010ab00)[*bytePointer];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong * 2) != 0) {\n          boolean = true;\n          ulong = ulong & 0xffffffff;\n          newLocalVariable = bytePointer;\n        }\n        while( true ) {\n          integer = (int)ulong;\n          long = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integer * 2) + (uint)byte);\n          if (integer == *(short *)(&DAT_0010a440 + long * 2)) break;\n          ulong = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integer * 2)) {\n            byte = (&DAT_0010a7c0)[(int)(uint)byte];\n          }\n        }\n        bytePointer = bytePointer + 1;\n        ulong = (ulong)*(short *)(&DAT_0010a240 + long * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong * 2) != 0xc2);\n      newLocalVariable = (uint)ulong;\n      bytePointer = bytePointer;\n      if (boolean) {\n        DAT_0010d5b8 = newLocalVariable;\n        DAT_0010d5c0 = newLocalVariable;\n      }\nLAB_0010419f:\n      integer = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong * 2);\n      if (integer == 0) {\n        integer = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        bytePointer = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)bytePointer - (int)bytePointer;\n      DAT_0010d588 = *bytePointer;\n      DAT_0010d5b0 = bytePointer;\n      DAT_0010d5c8 = bytePointer;\n      *bytePointer = 0;\nLAB_001041f0:\n      bytePointer = DAT_0010d5c8;\n      long = DAT_0010d5a0;\n      switch(integer) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_error_message_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long = (long)integer;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        integer = 2;\n        if (DAT_0010d550 < 0x114) {\n          integer = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    integer = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint = character + integer;\n    if ((0x22 < uint) || (integer != (char)(&DAT_0010a0a0)[(int)uint])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)uint];\n    long = (long)character;\n    if (character < '\\x01') {\n      integer = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    newLocalVariable = newLocalVariable + -1 + (uint)(newLocalVariable == 0);\n    doublePointerPointer = doublePointerPointer + 1;\n    *doublePointerPointer = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  integer = (int)(char)(&DAT_0010a020)[(int)long];\n  if ((&DAT_0010a020)[(int)long] == '\\0') {\n    if (newLocalVariable == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_archive_script_error_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long] != -0xe) &&\n             (uint = (int)(char)(&DAT_0010a200)[long] + 1, uint < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint] == '\\x01')) &&\n           (long = (long)(char)(&DAT_0010a060)[(int)uint],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint])) goto LAB_00105227;\n        if (newLocalVariable == newLocalVariable) goto LAB_0010524c;\n        newLocalVariable = newLocalVariable + -1;\n        doublePointerPointer = doublePointerPointer + -1;\n        long = (long)*newLocalVariable;\n      } while( true );\n    }\n    if (newLocalVariable != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsignedLong = DAT_0010d660;\n  doublePointerPointer = DAT_0010d558;\n  character = (&DAT_00109fe0)[integer];\n  doublePointerPointer = (char **)doublePointerPointer[1 - character];\n  switch(integer) {\n  case 2:\n  case 6:\n    check_ar_status_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_archive_script_error_001031a5();\n    break;\n  case 0x17:\n    doublePointer = (undefined8 *)*doublePointerPointer;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointerToCharacter = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointerToCharacter = (char *)dcgettext(0,pointerToCharacter,5);\n      fprintf(_stderr,pointerToCharacter,unsignedLong);\n      check_exit_status_0010315d();\n    }\n    else {\n      for (; doublePointer != (undefined8 *)0x0; doublePointer = (undefined8 *)doublePointer[1]) {\n        for (doublePointer = (undefined8 *)DAT_0010d558[0x1f]; doublePointer != (undefined8 *)0x0;\n            doublePointer = (undefined8 *)doublePointer[0x1e]) {\n          integer = filename_cmp(*doublePointer);\n          if (integer == 0) {\n            extract_archive_contents_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*doublePointer,0);\n        unsignedLong = DAT_0010d660;\n        unsignedLong = *doublePointer;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedLong,unsignedLong);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    doublePointer = (undefined8 *)*doublePointerPointer;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pointerToCharacter = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; doublePointer != (undefined8 *)0x0; doublePointer = (undefined8 *)doublePointer[1]) {\n      boolean = false;\n      doublePointerPointer = DAT_0010d558 + 0x1f;\n      for (pointerToCharacter = DAT_0010d558[0x1f]; pointerToCharacter != (char *)0x0;\n          pointerToCharacter = *(char **)(pointerToCharacter + 0xf0)) {\n        integer = filename_cmp();\n        if (integer == 0) {\n          pointerToCharacter = (char *)bfd_openr(*doublePointer,0);\n          unsignedLong = DAT_0010d660;\n          if (pointerToCharacter == (char *)0x0) {\n            unsignedLong = *doublePointer;\n            pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointerToCharacter,unsignedLong,unsignedLong);\n            check_exit_status_0010315d();\n          }\n          else {\n            *doublePointerPointer = pointerToCharacter;\n            boolean = true;\n            *(undefined8 *)(pointerToCharacter + 0xf0) = *(undefined8 *)(pointerToCharacter + 0xf0);\n          }\n        }\n        else {\n          doublePointerPointer = (char **)(pointerToCharacter + 0xf0);\n        }\n      }\n      if (!boolean) {\n        pointerToCharacter = (char *)bfd_openr(*doublePointer,0);\n        unsignedLong = DAT_0010d660;\n        unsignedLong = *doublePointer;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedLong,unsignedLong);\n        unsignedLong = DAT_0010d660;\n        if (pointerToCharacter == (char *)0x0) {\n          unsignedLong = *doublePointer;\n          pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointerToCharacter,unsignedLong,unsignedLong);\n          check_exit_status_0010315d();\n        }\n        else {\n          *doublePointerPointer = pointerToCharacter;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    doublePointer = (undefined8 *)*doublePointerPointer;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; doublePointer != (undefined8 *)0x0; doublePointer = (undefined8 *)doublePointer[1]) {\n      boolean = false;\n      doublePointerPointer = DAT_0010d558 + 0x1f;\n      for (doublePointer = (undefined8 *)DAT_0010d558[0x1f]; unsignedLong = DAT_0010d660,\n          doublePointer != (undefined8 *)0x0; doublePointer = (undefined8 *)doublePointer[0x1e]) {\n        integer = filename_cmp(*doublePointer,*doublePointer);\n        if (integer == 0) {\n          boolean = true;\n          *doublePointerPointer = (char *)doublePointer[0x1e];\n        }\n        else {\n          doublePointerPointer = (char **)(doublePointer + 0x1e);\n        }\n      }\n      if (!boolean) {\n        unsignedLong = *doublePointer;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedLong,unsignedLong);\n        check_exit_status_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    doublePointer = (undefined8 *)*doublePointerPointer;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; doublePointer != (undefined8 *)0x0; doublePointer = (undefined8 *)doublePointer[1]) {\n      pointerToCharacter = (char *)bfd_openr(*doublePointer,\"plugin\");\n      unsignedLong = DAT_0010d660;\n      doublePointerPointer = DAT_0010d558;\n      if (pointerToCharacter == (char *)0x0) {\n        unsignedLong = *doublePointer;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedLong,unsignedLong);\n        check_exit_status_0010315d();\n      }\n      else {\n        *(char **)(pointerToCharacter + 0xf0) = DAT_0010d558[0x1f];\n        doublePointerPointer[0x1f] = pointerToCharacter;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pointerToCharacter = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pointerToCharacter = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointerToCharacter,pointerToCharacter);\n    for (pointerToCharacter = DAT_0010d558[0x1f]; pointerToCharacter != (char *)0x0; pointerToCharacter = *(char **)(pointerToCharacter + 0xf0))\n    {\n      print_file_info_00103ddc(pointerToCharacter,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(doublePointerPointer);\n    pointerToCharacter = DAT_0010d570;\n    integer = stat(DAT_0010d570,&newLocalVariable);\n    if ((integer != 0) && (DAT_0010d558 = (char **)bfd_openw(pointerToCharacter,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_file_and_print_error_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    process_archive_files_00103c60(*doublePointerPointer,0);\n    break;\n  case 0x1f:\n    process_archive_files_00103c60(*doublePointerPointer,1);\n    break;\n  case 0x20:\n    pointerToCharacter = *doublePointerPointer;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointerToCharacter = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long = process_library_file_00105300(doublePointerPointer[-1],0);\n    if (long != 0) {\n      process_archive_001032a8(long,copy_data_0010312d,pointerToCharacter);\n    }\n    break;\n  case 0x21:\n    pointerToCharacter = *doublePointerPointer;\n    pointerToCharacter = doublePointerPointer[-1];\n    unsignedLong = process_library_file_00105300(doublePointerPointer[-2],0);\n    if (pointerToCharacter == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pointerToCharacter,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        process_archive_001032a8(unsignedLong,print_file_info_00103ddc,pointerToCharacter);\n        bfd_close(unsignedLong);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointerToCharacter = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointerToCharacter,pointerToCharacter);\n    }\n    process_archive_001032a8(unsignedLong,print_file_info_00103ddc,pointerToCharacter);\n    bfd_close(unsignedLong);\n    break;\n  case 0x22:\n    doublePointerPointer = (char **)*doublePointerPointer;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    doublePointerPointer = (char **)0x0;\n    break;\n  case 0x24:\n    doublePointerPointer = (char **)doublePointerPointer[-1];\n    break;\n  case 0x26:\n    doublePointerPointer = (char **)malloc(0x10);\n    pointerToCharacter = doublePointerPointer[-2];\n    *doublePointerPointer = *doublePointerPointer;\n    doublePointerPointer[1] = pointerToCharacter;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  long = (long)character;\n  newLocalVariable = newLocalVariable + -long;\n  doublePointerPointer[1 - long] = (char *)doublePointerPointer;\n  doublePointerPointer = doublePointerPointer + (1 - long);\n  uint = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[integer] + -0x18] + (int)*newLocalVariable;\n  if ((uint < 0x23) && (*newLocalVariable == (&DAT_0010a0a0)[(int)uint])) {\n    long = (long)(char)(&DAT_0010a060)[(int)uint];\n  }\n  else {\n    long = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[integer] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer = ((int)bytePointer - (int)DAT_0010d5c8) + -1;\n  *bytePointer = DAT_0010d588;\n  doublePointer = (long **)(DAT_0010d5a8 + long * 8);\n  doublePointerPointer = (FILE **)*doublePointer;\n  if (*(int *)(doublePointerPointer + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)doublePointerPointer + 0x1c);\n    *(undefined4 *)(doublePointerPointer + 7) = 1;\n    *doublePointerPointer = DAT_0010d590;\n  }\n  bytePointer = DAT_0010d5b0;\n  filePointer = doublePointerPointer[1];\n  auVar40._8_8_ = filePointer;\n  auVar40._0_8_ = doublePointerPointer;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = print_error_message_and_exit_001033b0();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uint = (int)((long)bytePointer - (long)bytePointer) - 1;\n      for (long = 0; (int)long < (int)uint; long = long + 1) {\n        *(byte *)(auVar40._8_8_ + long) = bytePointer[long];\n      }\n      pointer = *doublePointer;\n      if (*(int *)(pointer + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointer + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = DAT_0010d590;\n        if (uint == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            doublePointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            unsignedLong = create_buffer_and_process_file_001033d6(filePointer);\n            *doublePointer = unsignedLong;\n          }\n          long = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integer = 1;\n          process_file_001031cf(long);\n          extract_data_001030ed();\n        }\n        else {\n          integer = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer = *doublePointer;\n          uint = ~uint + *(int *)(pointer + 3);\n          if (0 < (int)uint) break;\n          uint = (int)DAT_0010d5b0 - (int)(void *)pointer[1];\n          if (*(int *)(pointer + 4) == 0) {\n            pointer[1] = 0;\nLAB_00104626:\n            print_error_message_and_exit_001033b0();\n            break;\n          }\n          integer = *(int *)(pointer + 3);\n          integer = integer;\n          if (integer < 1) {\n            integer = integer / 8;\n          }\n          *(int *)(pointer + 3) = integer + integer;\n          pointer = realloc((void *)pointer[1],(long)(integer + integer + 2));\n          pointer[1] = (long)pointer;\n          if (pointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pointer + (long)(int)uint);\n          pointer = *doublePointer;\n        }\n        if (0x2000 < (int)uint) {\n          uint = 0x2000;\n        }\n        ulong = (ulong)uint;\n        if (*(int *)((long)pointer + 0x24) == 0) {\n          integerPointer = __errno_location();\n          ulong = (ulong)(int)uint;\n          ulong = (ulong)(int)uint;\n          *integerPointer = 0;\n          goto LAB_001046c7;\n        }\n        ulong = 0;\n        integerPointer = (int *)(long)(int)uint;\n        do {\n          integer = getc(DAT_0010d590);\n          uint = (uint)ulong;\n          if (integer == -1) {\n            integer = ferror(DAT_0010d590);\n            uint = uint;\n            if (integer != 0) {\n              do {\n                pointerToCharacter = \"input in flex scanner failed\";\n                print_error_message_and_exit_001033b0();\n                do {\n                  *integerPointer = 0;\n                  clearerr((FILE *)pointerToCharacter);\nLAB_001046c7:\n                  size_t = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong),1,ulong,DAT_0010d590);\n                  pointerToCharacter = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_t;\n                  uint = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integer = ferror(DAT_0010d590), uint = DAT_0010d598, integer == 0))\n                  goto LAB_00104738;\n                } while (*integerPointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integer == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint +\n             (long)(int)uint + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint = uint + 1;\n            break;\n          }\n          ulong = (ulong)(uint + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)integerPointer) =\n               (char)integer;\n          integerPointer = (int *)((long)integerPointer + 1);\n        } while (uint != uint + 1);\nLAB_00104738:\n        DAT_0010d598 = uint;\n        uint = DAT_0010d598;\n        integer = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint == 0) goto LAB_0010475e;\n      }\n      pointer = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long = *pointer;\n      uint = uint + DAT_0010d598;\n      if (*(int *)(long + 0x18) < (int)uint) {\n        integer = ((int)DAT_0010d598 >> 1) + uint;\n        pointer = realloc(*(void **)(long + 8),(long)integer);\n        *(void **)(long + 8) = pointer;\n        auVar41._8_8_ = pointer;\n        auVar41._0_8_ = *pointer;\n        if (*(long *)(*pointer + 8) == 0) {\n          auVar41 = print_error_message_and_exit_001033b0();\n        }\n        pointer = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = integer + -2;\n      }\n      DAT_0010d598 = uint;\n      *(undefined *)(*(long *)(*pointer + 8) + (long)(int)uint) = 0;\n      *(undefined *)(*(long *)(*pointer + 8) + 1 + (long)(int)uint) = 0;\n      bytePointer = *(byte **)(*pointer + 8);\n      DAT_0010d5c8 = bytePointer;\n      if (integer == 1) goto LAB_001048a4;\n      if (integer == 2) goto LAB_001048ca;\n      bytePointer = bytePointer + integer;\n      DAT_0010d5b0 = bytePointer;\n      uint = find_matching_index_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)bytePointer == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointer = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = bytePointer;\n    ulong = find_matching_index_0010300e();\n    bytePointer = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  bytePointer = bytePointer + integer;\n  DAT_0010d5b0 = bytePointer;\n  ulong = find_matching_index_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong * 2) != 0) {\n    DAT_0010d5b8 = bytePointer;\n    DAT_0010d5c0 = (uint)ulong;\n  }\n  ulong = ulong & 0xffffffff;\n  while( true ) {\n    integer = (int)ulong;\n    if (integer == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2)) break;\n    ulong = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n  }\n  uint = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2);\n  bytePointer = bytePointer;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2) == 0)\n     || (uint == 0xb0)) goto LAB_0010419f;\n  bytePointer = bytePointer + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointer = DAT_0010d588;\n  ulong = (ulong)DAT_0010d5c0;\n  bytePointer = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  doublePointerPointer = doublePointerPointer + 1;\n  newLocalVariable = 3;\n  *doublePointerPointer = DAT_0010d548;\nLAB_001049d1:\n  newLocalVariable = newLocalVariable + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00105300",
                "dup",
                "realloc",
                "printf",
                "dcgettext",
                "FUN_001033d6",
                "fclose",
                "fwrite",
                "bfd_close",
                "free",
                "fread",
                "FUN_0010312d",
                "filename_cmp",
                "xstrdup",
                "FUN_001033b0",
                "FUN_00103ba8",
                "__errno_location",
                "FUN_0010315d",
                "FUN_0010300e",
                "FUN_00107740",
                "bfd_openw",
                "FUN_00103df9",
                "bfd_set_format",
                "FUN_001032a8",
                "bfd_openr",
                "FUN_00105bc0",
                "FUN_001031a5",
                "fopen",
                "ferror",
                "FUN_001031cf",
                "stat",
                "FUN_00103c60",
                "bfd_cache_close",
                "clearerr",
                "getc",
                "fprintf",
                "FUN_001030ed",
                "FUN_00103ddc",
                "malloc",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_script_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionList",
                "uVar5": "iterationCount"
            },
            "code": "\nvoid executeFunctions_00107cc0(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionList;\n  uint iterationCount;\n  \n  functionList = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      iterationCount = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)iterationCount) {\n        index = (long)(int)iterationCount;\n        iterationCount = iterationCount & 7;\n        (*(code *)functionList[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (iterationCount != 0) {\n            if (iterationCount != 1) {\n              if (iterationCount != 2) {\n                if (iterationCount != 3) {\n                  if (iterationCount != 4) {\n                    if (iterationCount != 5) {\n                      if (iterationCount != 6) {\n                        (*(code *)functionList[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionList[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[index])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_files_00105ae0",
                "param_1": "file_path",
                "param_2": "options",
                "param_3": "flag_1",
                "param_4": "flag_2"
            },
            "code": "\nvoid process_files_00105ae0(undefined8 file_path,undefined8 options,undefined flag_1,undefined flag_2)\n\n{\n  process_files_00105ae0_00105af0(file_path,options,flag_1,flag_2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_error_and_exit_00107690",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "is_error",
                "local_d8": "buffer_size",
                "local_d4": "message_length",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "additional_data",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "param_1_copy",
                "local_78": "param_2_copy",
                "local_68": "param_3_copy",
                "local_58": "param_4_copy",
                "local_48": "param_5_copy",
                "local_38": "param_6_copy",
                "local_28": "param_7_copy",
                "local_18": "param_8_copy"
            },
            "code": "\nvoid print_error_and_exit_00107690(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char is_error;\n  undefined4 buffer_size;\n  undefined4 message_length;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined additional_data [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (is_error != '\\0') {\n    param_1_copy = error_code;\n    param_2_copy = param_2;\n    param_3_copy = param_3;\n    param_4_copy = param_4;\n    param_5_copy = param_5;\n    param_6_copy = param_6;\n    param_7_copy = param_7;\n    param_8_copy = param_8;\n  }\n  buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = additional_data;\n  message_length = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_formatted_error_message_001078c0(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "targetName",
                "param_2": "outputFile",
                "lVar1": "target",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long targetName,FILE *outputFile)\n\n{\n  long target;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    target = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (target == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "decompiled_function_00105830",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "__s": "baseName",
                "uVar3": "size",
                "pcVar4": "newFilePath",
                "bVar5": "byteValue",
                "auVar6": "returnValue",
                "lVar1": "fileInfoPtr"
            },
            "code": "\nundefined  [16] decompiledFunction_00105830(char *filePath,long fileInfo,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long fileInfoPtr;\n  size_t sVar2;\n  char *baseName;\n  ulong size;\n  char *newFilePath;\n  byte byteValue;\n  undefined returnValue [16];\n  \n  byteValue = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    filePath = baseName;\n    if ((DAT_0010d5fa != '\\0') && (fileInfo != 0)) {\n      sVar2 = strlen(baseName);\n      size = (ulong)*(byte *)(*(long *)(fileInfo + 8) + 0x1e);\n      if (size < sVar2) {\n        filePath = (char *)xmalloc(size + 1);\n        fileInfoPtr = *(long *)(fileInfo + 8);\n        newFilePath = filePath;\n        for (size = (ulong)*(byte *)(fileInfoPtr + 0x1e); size != 0; size = size - 1) {\n          *newFilePath = *baseName;\n          baseName = baseName + (ulong)byteValue * -2 + 1;\n          newFilePath = newFilePath + (ulong)byteValue * -2 + 1;\n        }\n        filePath[*(byte *)(fileInfoPtr + 0x1e)] = '\\0';\n      }\n    }\n  }\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = filePath;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105db0",
                "FUN_00105480",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "decompiled_function_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_delete_file_00107730"
            },
            "code": "\nvoid cleanupAndDeleteFile_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_delete_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorDescription",
                "iVar1": "errorStatus",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorDescription)\n\n{\n  int errorStatus;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00102f96",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "process_file_001031cf",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileNumber",
                "piVar4": "errnoPtr",
                "lVar5": "fileListPtr"
            },
            "code": "\n\n\nundefined8\nprocessFile_001031cf(FILE **outputFile,FILE *inputFile,undefined8 arg3,undefined8 arg4,undefined8 arg5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileNumber;\n  int *errnoPtr;\n  long fileListPtr;\n  \n  errnoPtr = __errno_location();\n  fileListPtr = DAT_0010d5a8;\n  errnoValue = *errnoPtr;\n  if (outputFile == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (outputFile == *(FILE ***)(fileListPtr + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)outputFile + 0x1c) = 0;\n    *(undefined *)&outputFile[1]->_flags = 0;\n    *(undefined *)((long)&outputFile[1]->_flags + 1) = 0;\n    *(undefined4 *)(outputFile + 5) = 1;\n    outputFile[2] = outputFile[1];\n    *(undefined4 *)(outputFile + 7) = 0;\n    if (fileListPtr != 0) {\n      if (outputFile == *(FILE ***)(fileListPtr + DAT_0010d5a0 * 8)) {\n        extract_data_001030ed();\n      }\n      *outputFile = inputFile;\n      *(undefined4 *)((long)outputFile + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *outputFile = inputFile;\n    *(undefined4 *)((long)outputFile + 0x34) = 1;\n  }\n  *(undefined8 *)((long)outputFile + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileNumber = fileno(inputFile);\n    fileNumber = isatty(fileNumber);\n    isTerminal = (uint)(0 < fileNumber);\n  }\n  *(uint *)((long)outputFile + 0x24) = isTerminal;\n  *errnoPtr = errnoValue;\n  return arg5;\n}\n\n",
            "called": [
                "isatty",
                "fileno",
                "FUN_001030ed",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long destination,long source)\n\n{\n  long temp;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_contents_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFileName",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "_Var3": "sourceFileSeekPosition",
                "uVar4": "bytesCopied",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFileContents_00105c00(int sourceFileDescriptor,char *destinationFileName)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int iVar2;\n  __off_t sourceFileSeekPosition;\n  ulong bytesCopied;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFileSeekPosition = lseek(sourceFileDescriptor,0,0), sourceFileSeekPosition == 0)) {\n    destinationFileDescriptor = open(destinationFileName,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesCopied = close_and_set_errno_00102f55();\n      return bytesCopied;\n    }\n    do {\n      bytesCopied = read(sourceFileDescriptor,buffer,0x2000);\n      iVar2 = (int)bytesCopied;\n      if (iVar2 < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (iVar2 != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return bytesCopied & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)iVar2);\n    } while (bytesWritten == (long)iVar2);\n    errnoPointer = __errno_location();\n    iVar2 = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "close",
                "__errno_location",
                "write",
                "FUN_00102f55",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_contents_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_size_001052a0",
                "param_1": "filePath",
                "iVar1": "result",
                "piVar2": "errorCode",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong getFileSize_001052a0(char *filePath)\n\n{\n  int result;\n  int *errorCode;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    result = stat(filePath,&fileStat);\n    if (result < 0) {\n      errorCode = __errno_location();\n      if (*errorCode == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_with_formatted_message_00107920(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errorCode);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_with_formatted_message_00107920(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_with_formatted_message_00107920(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_with_formatted_message_00107920(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_with_formatted_message_00107920(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "dcgettext",
                "stat",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_size_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOption"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOption;\n  \n  emulationOption = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOption);\n  emulationOption = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOption);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103172"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_archive_files_00103c60",
                "param_1": "archive_filename",
                "param_2": "flag",
                "cVar1": "format_check",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "file_array_ptr"
            },
            "code": "\n\n\nvoid process_archive_files_00103c60(char *archive_filename,int flag)\n\n{\n  char format_check;\n  int *errno_ptr;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *file_array_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)create_temp_file_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_ptr = __errno_location();\n    archive_filename = strerror(*errno_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      archive_filename = DAT_0010d560;\n    }\n    else {\n      if (flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(archive_filename,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        format_check = bfd_check_format(input_archive,2);\n        if (format_check != '\\0') {\n          file_array_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *file_array_ptr = archived_file;\n            file_array_ptr = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,archive_filename);\n  check_exit_status_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_set_format",
                "xstrdup",
                "FUN_001057a0",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "fprintf",
                "__errno_location",
                "FUN_0010315d",
                "strerror",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_files_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid writeToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_files_00105af0",
                "param_3": "param_checkFlag",
                "param_4": "param_archivedFlag",
                "cVar1": "check_result",
                "uVar2": "file_process_result",
                "lVar3": "read_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_files_00105af0(long *param_1,long param_2,char param_checkFlag,char param_archivedFlag)\n\n{\n  char check_result;\n  uint file_process_result;\n  long read_file;\n  ulong return_value;\n  \n  if (param_archivedFlag == '\\0') {\n    if (param_checkFlag != '\\0') {\n      return_value = print_and_update_pointer_00102f08();\n      return return_value;\n    }\n  }\n  else {\n    check_result = bfd_check_format(param_2,2);\n    if (check_result != '\\0') {\n      return_value = 0;\n      for (read_file = bfd_openr_next_archived_file(param_2,0); read_file != 0;\n          read_file = bfd_openr_next_archived_file(param_2,read_file)) {\n        file_process_result = process_files_00105af0(param_1,read_file,param_checkFlag,1);\n        if ((char)file_process_result != '\\0') {\n          return_value = (ulong)file_process_result;\n          param_1 = (long *)(*param_1 + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (param_checkFlag != '\\0') {\n      return_value = print_and_update_pointer_00102f08();\n      return return_value;\n    }\n  }\n  *(long *)(param_2 + 0xf0) = *param_1;\n  *param_1 = param_2;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_index_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentIndex",
                "lVar3": "calculatedIndex",
                "bVar4": "lookupResult",
                "pbVar5": "currentBytePtr",
                "in_R9": "matchedBytePtr",
                "in_R10D": "matchedIndex"
            },
            "code": "\nvoid findMatchingIndex_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentIndex;\n  long calculatedIndex;\n  byte lookupResult;\n  byte *currentBytePtr;\n  byte *matchedBytePtr;\n  int matchedIndex;\n  \n  foundMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentBytePtr = DAT_0010d5c8; currentBytePtr < DAT_0010d5b0; currentBytePtr = currentBytePtr + 1) {\n    lookupResult = 1;\n    if (*currentBytePtr != 0) {\n      lookupResult = (&DAT_0010ab00)[*currentBytePtr];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      foundMatch = true;\n      matchedBytePtr = currentBytePtr;\n      matchedIndex = currentIndex;\n    }\n    while( true ) {\n      calculatedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)lookupResult);\n      if (*(short *)(&DAT_0010a440 + calculatedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        lookupResult = (&DAT_0010a7c0)[(int)(uint)lookupResult];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + calculatedIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchedBytePtr;\n    DAT_0010d5c0 = matchedIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_index_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_memory_and_return_00102ba1",
                "unaff_RBP": "memoryToBeFreed",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] freeMemoryAndReturn_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *memoryToBeFreed;\n  ulong returnAddress;\n  \n  free(memoryToBeFreed);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_memory_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_archive_contents_00107740",
                "param_1": "archiveData",
                "iVar1": "filenameComparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoPtr",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "archivePointer",
                "__ptr": "bufferPointer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "plVar8": "filePointer",
                "puVar9": "localArrayPointer",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "local_c8": "localArray",
                "_Stack_b0": "filePermissions",
                "uStack_98": "fileSize",
                "uStack_80": "modifiedTime1",
                "uStack_70": "modifiedTime2"
            },
            "code": "\n\n\nlong * extractArchiveContents_00107740(long **archiveData)\n\n{\n  int filenameComparisonResult;\n  int errorCode;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  long **archivePointer;\n  void *bufferPointer;\n  size_t bytesRead;\n  long loopCounter;\n  long *filePointer;\n  undefined4 *localArrayPointer;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 localArray [6];\n  __mode_t filePermissions;\n  ulong fileSize;\n  undefined8 modifiedTime1;\n  undefined8 modifiedTime2;\n  \n  if (_DAT_0010d600 != 0) {\n    localArrayPointer = localArray;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localArrayPointer = 0;\n      localArrayPointer = localArrayPointer + 1;\n    }\n  }\n  archivePointer = (long **)archiveData[0x1d];\n  if ((long **)archiveData[0x1d] == (long **)0x0) {\n    archivePointer = archiveData;\n  }\n  errorCode = (*(code *)archivePointer[1][0x3d])(archiveData,localArray);\n  if (errorCode != 0) {\n    filePointer = *archiveData;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = print_error_and_exit_00107690(errorMessage,filePointer);\n    errorMessage = DAT_0010d638;\n    if (errorCode == 3) {\n      for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n        filenameComparisonResult = filename_cmp(*(undefined8 *)*filePointer,errorMessage);\n        if (filenameComparisonResult == 0) {\n          if (errorCode != 2) {\n            return filePointer;\n          }\n          return (long *)(*filePointer + 0xf0);\n        }\n      }\n    }\n    return filePointer;\n  }\n  bfd_seek(archiveData,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)process_file_00105a20(*archiveData);\n  }\n  else {\n    bytesProcessed = 0;\n    bufferPointer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = fileSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(bufferPointer,bytesToRead,archiveData);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        archiveData = (long **)*archiveData[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(errorMessage,archiveData);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)process_file_00105a20(*archiveData);\n      }\n      bytesToRead = fwrite(bufferPointer,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < fileSize);\n    free(bufferPointer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermissions);\n  if (_DAT_0010d600 != 0) {\n    modifiedTime1 = modifiedTime2;\n    set_modified_time_00107c80(errorString,localArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_archive_contents_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "filePaths",
                "unaff_RBP": "outputFile",
                "unaff_R12": "timeVal",
                "unaff_R13": "buffer",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "permission1",
                "cStack0000000000000017": "permission2",
                "in_stack_00000018": "permission3",
                "cStack0000000000000019": "permission4",
                "cStack000000000000001a": "permission5",
                "cStack000000000000001b": "permission6",
                "cStack000000000000001c": "permission7",
                "cStack000000000000001d": "permission8",
                "cStack000000000000001e": "permission9",
                "uStack000000000000001f": "flag",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "fileSizeHigh",
                "in_stack_00000070": "fileSizeLow",
                "in_stack_00000080": "timestamp",
                "exit_on_error_00107c10": "exitOnError",
                "bfd_set_archive_head": "setArchiveHead",
                "bfd_close": "closeBfd",
                "copy_file_and_print_error_00105bc0": "copyAndPrintError",
                "free": "freeMemory",
                "xexit": "exit",
                "dcgettext": "getDcText",
                "sprintf": "formatString",
                "fprintf": "printFormatted",
                "fputs": "putString",
                "fputc": "putChar"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **filePaths;\n  FILE *outputFile;\n  long timeVal;\n  void *buffer;\n  int unaff_R14D;\n  undefined fileType;\n  char permission1;\n  char permission2;\n  char permission3;\n  char permission4;\n  char permission5;\n  char permission6;\n  char permission7;\n  char permission8;\n  char permission9;\n  undefined flag;\n  uint fileMode;\n  uint fileSizeHigh;\n  uint fileSizeLow;\n  undefined8 timestamp;\n  \n  do {\n    bVar1 = xexitOnError();\n    *(uint *)((long)filePaths + 0x44) = *(uint *)((long)filePaths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(timeVal + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)filePaths + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(unaff_R14D);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = copyAndPrintError();\n    if (iVar3 == 0) {\n      freeMemory(buffer);\n      freeMemory(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  xexitOnError();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = fileMode & 0xf000;\n  if (uVar4 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar4 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  permission1 = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  permission2 = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permission3 = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  permission4 = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  permission5 = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  permission6 = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  permission7 = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  permission8 = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  permission9 = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permission3 == 'x') {\n      permission3 = 's';\n    }\n    else {\n      permission3 = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (permission6 == 'x') {\n      permission6 = 's';\n    }\n    else {\n      permission6 = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (permission9 == 'x') {\n      permission9 = 't';\n    }\n    else {\n      permission9 = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSizeHigh,\n          (ulong)fileSizeLow,timestamp,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*filePaths,outputFile);\n  if ((char)timeVal != '\\0') {\n    if ((*(byte *)((long)filePaths + 0x49) & 0x10) == 0) {\n      if (filePaths[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (filePaths[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "free",
                "dup",
                "FUN_00107c10",
                "xexit",
                "FUN_00105bc0",
                "bfd_close",
                "bfd_set_archive_head",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "fileName",
                "param_2": "fileHandle",
                "uVar1": "undefinedVar1",
                "bVar2": "byteVar2",
                "iVar3": "intVar",
                "sVar4": "sizeVar",
                "piVar5": "intPtrVar",
                "pcVar6": "charPtrVar1",
                "pcVar7": "charPtrVar2",
                "ppcVar8": "charPtrPtrVar",
                "uVar9": "undefinedVar2",
                "lVar10": "longVar1",
                "__s": "str1",
                "__s_00": "str2",
                "lVar11": "longVar2",
                "uVar12": "undefinedVar3",
                "uVar13": "ulongVar",
                "unaff_RBX": "charPtrVar3",
                "ppcVar14": "charPtrPtrVar1",
                "unaff_RBP": "charPtrPtrVar2",
                "unaff_R12": "charPtrPtrVar3",
                "unaff_R13D": "uintVar",
                "ppcVar15": "charPtrPtrVar4",
                "unaff_R14": "longVar3",
                "bVar16": "boolVar",
                "bVar17": "byteVar3",
                "param_7": "paramPtr",
                "param_9": "paramStruct",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 fileName,long fileHandle)\n\n{\n  undefined undefinedVar1;\n  byte byteVar2;\n  int intVar;\n  size_t sizeVar;\n  int *intPtrVar;\n  char *charPtrVar1;\n  char *charPtrVar2;\n  char **charPtrPtrVar;\n  undefined8 undefinedVar2;\n  long longVar1;\n  char *str1;\n  char *str2;\n  long longVar2;\n  undefined8 undefinedVar3;\n  ulong ulongVar;\n  char *charPtrVar3;\n  char **charPtrPtrVar1;\n  char **charPtrPtrVar2;\n  char **charPtrPtrVar3;\n  uint uintVar;\n  char **charPtrPtrVar4;\n  long longVar3;\n  bool boolVar;\n  byte byteVar3;\n  char **paramPtr;\n  undefined8 paramStruct;\n  long stackVar1;\n  long stackVar2;\n  \n  byteVar3 = 0;\ncode_r0x001028ed:\n  exit_on_error_00107c10(charPtrVar3,fileHandle);\nLAB_001028f5:\n  undefinedVar3 = DAT_0010d638;\n  if (uintVar != 3) {\n    while( true ) {\n      if ((undefined8 *)*charPtrPtrVar3 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar = filename_cmp(*(undefined8 *)*charPtrPtrVar3,undefinedVar3);\n      if (intVar == 0) break;\n      charPtrPtrVar3 = (char **)(*charPtrPtrVar3 + 0xf0);\n    }\n    if (uintVar != 2) goto LAB_0010571f;\n    charPtrPtrVar3 = (char **)(*charPtrPtrVar3 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar1 = *(long *)(longVar3 + 0xf0);\n  if (*(long *)(longVar3 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar2 = longVar1;\n    longVar1 = *(long *)(longVar2 + 0xf0);\n  } while (longVar1 != 0);\n  charPtrPtrVar3 = (char **)(longVar2 + 0xf0);\n  charPtrVar3 = *charPtrPtrVar2;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar1 = DAT_0010d5f8;\n  uintVar = (uint)(DAT_0010d60c != 0);\n  fileHandle = bfd_openr(charPtrVar3,DAT_0010d5f0);\n  if (fileHandle != 0) {\n    charPtrPtrVar2 = charPtrPtrVar2 + 1;\n    byteVar2 = process_files_00105af0(charPtrPtrVar3,fileHandle,uintVar,undefinedVar1);\n    paramStruct._6_1_ = paramStruct._6_1_ | byteVar2;\n    charPtrVar1 = *charPtrPtrVar2;\n    do {\n      if (charPtrVar1 == (char *)0x0) {\n        if (paramStruct._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefinedVar3 = extract_archive_information_001058b0();\n        return undefinedVar3;\n      }\n      charPtrPtrVar1 = *(char ***)(longVar3 + 0xf0);\n      charPtrPtrVar3 = paramPtr;\n      if (paramStruct._7_1_ == '\\0') {\n        charPtrPtrVar4 = paramPtr;\n        if (charPtrPtrVar1 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              str1 = (char *)lbasename(*charPtrPtrVar1);\n              charPtrVar2 = str1;\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar = strlen(str1);\n                ulongVar = (ulong)*(byte *)(*(long *)(longVar3 + 8) + 0x1e);\n                if (ulongVar < sizeVar) {\n                  charPtrVar2 = (char *)xmalloc(ulongVar + 1);\n                  longVar1 = *(long *)(longVar3 + 8);\n                  charPtrVar1 = charPtrVar2;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPtrVar1 = *str1;\n                    str1 = str1 + (ulong)byteVar3 * -2 + 1;\n                    charPtrVar1 = charPtrVar1 + (ulong)byteVar3 * -2 + 1;\n                  }\n                  charPtrVar2[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                charPtrVar1 = *charPtrPtrVar2;\n                str1 = charPtrVar2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPtrVar1 = *charPtrPtrVar2;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              str2 = (char *)lbasename(charPtrVar1);\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar = strlen(str2);\n                ulongVar = (ulong)*(byte *)(*(long *)(longVar3 + 8) + 0x1e);\n                charPtrVar1 = str2;\n                str1 = charPtrVar2;\n                if (ulongVar < sizeVar) {\n                  charPtrVar1 = (char *)xmalloc(ulongVar + 1);\n                  longVar1 = *(long *)(longVar3 + 8);\n                  charPtrVar2 = charPtrVar1;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPtrVar2 = *str2;\n                    str2 = str2 + (ulong)byteVar3 * -2 + 1;\n                    charPtrVar2 = charPtrVar2 + (ulong)byteVar3 * -2 + 1;\n                  }\n                  charPtrVar1[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar = filename_cmp(str2,charPtrVar2);\n            }\n            else {\n              charPtrVar1 = *charPtrPtrVar2;\n              str1 = *charPtrPtrVar1;\nLAB_00102980:\n              intVar = filename_cmp(charPtrVar1,str1);\n            }\n            if ((intVar == 0) && (charPtrPtrVar1[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                intVar = stat(*charPtrPtrVar2,(stat *)&stack0x000000b0);\n                if (intVar != 0) {\n                  intPtrVar = __errno_location();\n                  if (*intPtrVar != 2) {\n                    exit_on_error_00107c10(*charPtrPtrVar2);\nLAB_00102b7e:\n                    charPtrVar1 = *charPtrPtrVar1;\n                    undefinedVar3 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_error_and_exit_00107690(undefinedVar3,charPtrVar1);\n                    free(charPtrPtrVar2);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPtrPtrVar = (char **)charPtrPtrVar1[0x1d];\n                if ((char **)charPtrPtrVar1[0x1d] == (char **)0x0) {\n                  charPtrPtrVar = charPtrPtrVar1;\n                }\n                intVar = (**(code **)(charPtrPtrVar[1] + 0x1e8))(charPtrPtrVar1,&stack0x00000020);\n                if (intVar != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              undefinedVar3 = find_last_match_or_end_00105870(paramPtr,2,*charPtrPtrVar1);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                charPtrVar1 = *charPtrPtrVar2;\n                boolVar = DAT_0010d60c != 0;\n                longVar1 = bfd_openr(charPtrVar1,DAT_0010d5f0);\n                if (longVar1 == 0) {\n                  exit_on_error_00107c10(charPtrVar1,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar2 = process_data_00103172(undefinedVar3,longVar1,boolVar);\n              }\n              else {\n                undefinedVar2 = decompiled_function_00105830(*charPtrPtrVar2);\n                intVar = filename_cmp(undefinedVar2,\"__.LIBDEP\");\n                if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar2 = process_data_00103172(undefinedVar3,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar2 != 0) {\n                *charPtrPtrVar4 = *(char **)(*charPtrPtrVar4 + 0xf0);\n                paramStruct._6_1_ = byteVar2;\n              }\n              goto LAB_0010577e;\n            }\n            charPtrPtrVar4 = charPtrPtrVar1 + 0x1e;\n            charPtrPtrVar1 = (char **)charPtrPtrVar1[0x1e];\n          } while (charPtrPtrVar1 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uintVar = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uintVar = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        longVar1 = *(long *)(longVar3 + 0xf0);\n        if (*(long *)(longVar3 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      charPtrVar3 = *charPtrPtrVar2;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar3 = decompiled_function_00105830(charPtrVar3);\n      intVar = filename_cmp(undefinedVar3,\"__.LIBDEP\");\n      if (intVar != 0) goto code_r0x0010574f;\n      byteVar2 = process_files_00105ae0(charPtrPtrVar3,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      paramStruct._6_1_ = byteVar2 | paramStruct._6_1_;\nLAB_0010577e:\n      charPtrPtrVar2 = charPtrPtrVar2 + 1;\n      charPtrVar1 = *charPtrPtrVar2;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  charPtrVar3 = *charPtrPtrVar2;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "FUN_00105ae0",
                "FUN_00105870",
                "FUN_00107c10",
                "FUN_00105830",
                "bfd_openr",
                "dcgettext",
                "FUN_00105af0",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_001058b0",
                "stat",
                "strlen",
                "FUN_00103172",
                "filename_cmp",
                "lbasename",
                "xmalloc",
                "__errno_location",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "standardError",
                "exit": "terminateProgram"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(standardError,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_00103df9",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103e95",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "find_file_error_001025a0",
                "piVar1": "errorLocation",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 findFileError_001025a0(void)\n\n{\n  int *errorLocation;\n  undefined8 errorMessage;\n  \n  errorLocation = __errno_location();\n  if (*errorLocation == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_with_formatted_message_00107920(errorMessage);\n  }\n  else {\n    strerror(*errorLocation);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_with_formatted_message_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "find_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "initialize_0010284b"
            },
            "code": "\nundefined8 initialize_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "initialize_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_process_archive_00102c25",
                "param_7": "permissions",
                "param_11": "mode",
                "param_12": "archiveSize",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoLocation",
                "pcVar4": "errorMessage",
                "uVar5": "gettextMessage",
                "pplVar6": "archivePointer",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "unaff_RBX": "filePaths",
                "plVar8": "currentFile",
                "puVar9": "parameterIterator",
                "uVar10": "totalBytesRead",
                "sVar11": "bytesToRead"
            },
            "code": "\n\n\nlong * extractAndProcessArchive_00102c25(void)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 gettextMessage;\n  long **archivePointer;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long **filePaths;\n  long *currentFile;\n  undefined4 *parameterIterator;\n  ulong totalBytesRead;\n  size_t bytesToRead;\n  undefined4 *permissions;\n  __mode_t mode;\n  ulong archiveSize;\n  \n  parameterIterator = permissions;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *parameterIterator = 0;\n    parameterIterator = parameterIterator + 1;\n  }\n  archivePointer = (long **)filePaths[0x1d];\n  if ((long **)filePaths[0x1d] == (long **)0x0) {\n    archivePointer = filePaths;\n  }\n  errorCode = (*(code *)archivePointer[1][0x3d])();\n  if (errorCode != 0) {\n    currentFile = *filePaths;\n    gettextMessage = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = print_error_and_exit_00107690(gettextMessage,currentFile);\n    gettextMessage = DAT_0010d638;\n    if (errorCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,gettextMessage);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)process_file_00105a20(*filePaths);\n  }\n  else {\n    totalBytesRead = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - totalBytesRead;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        filePaths = (long **)*filePaths[0x1d];\n        gettextMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(gettextMessage,filePaths);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)process_file_00105a20(*filePaths);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        errorMessage = strerror(*errnoLocation);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorMessage);\n        goto LAB_00102c78;\n      }\n      totalBytesRead = totalBytesRead + bytesRead;\n    } while (totalBytesRead < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessage = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,mode);\n  if (_DAT_0010d600 != 0) {\n    set_modified_time_00107c80(errorMessage,permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "fclose",
                "strerror",
                "fwrite",
                "FUN_00107c80",
                "free",
                "xmalloc",
                "bfd_seek",
                "__errno_location",
                "FUN_00105a20",
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_process_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_substring_00102bb0",
                "in_RAX": "sourceString",
                "sVar2": "sourceLength",
                "puVar3": "destinationBuffer",
                "uVar4": "maxCopyLength",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "basePointer",
                "puVar5": "destinationPointer",
                "bVar6": "isIncrement",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copySubstring_00102bb0(void)\n\n{\n  long lVar1;\n  char *sourceString;\n  size_t sourceLength;\n  undefined *destinationBuffer;\n  ulong maxCopyLength;\n  undefined *sourcePointer;\n  long basePointer;\n  undefined *destinationPointer;\n  byte isIncrement;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  isIncrement = 0;\n  sourceLength = strlen(sourceString);\n  maxCopyLength = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  destinationBuffer = sourcePointer;\n  if (maxCopyLength < sourceLength) {\n    destinationBuffer = (undefined *)xmalloc(maxCopyLength + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    destinationPointer = destinationBuffer;\n    for (maxCopyLength = (ulong)*(byte *)(lVar1 + 0x1e); maxCopyLength != 0; maxCopyLength = maxCopyLength - 1) {\n      *destinationPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)isIncrement * -2 + 1;\n      destinationPointer = destinationPointer + (ulong)isIncrement * -2 + 1;\n    }\n    destinationBuffer[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = destinationBuffer;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_substring_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_update_pointer_00102f08",
                "unaff_RBX": "dataPointer",
                "unaff_R12": "tempPointer"
            },
            "code": "\nundefined8 printAndUpdatePointer_00102f08(void)\n\n{\n  undefined8 *dataPointer;\n  undefined8 *tempPointer;\n  \n  printf(\"a - %s\\n\",*dataPointer);\n  dataPointer[0x1e] = *tempPointer;\n  *tempPointer = dataPointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_update_pointer_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "ppcVar1": "fileListPtr",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "indexVar",
                "sVar5": "sizeVar",
                "piVar6": "errnoPtr",
                "pcVar7": "fileVar1",
                "pcVar8": "fileVar2",
                "uVar9": "extractResult",
                "pcVar10": "fileVar3",
                "__s": "basenameVar1",
                "lVar11": "ptrVar1",
                "lVar12": "ptrVar2",
                "uVar13": "result",
                "uVar14": "ulongVar",
                "ppcVar15": "currentFilePtr",
                "ppcVar16": "nextFilePtr",
                "uVar17": "uintVar",
                "ppcVar18": "prevFilePtr",
                "bVar19": "boolVar",
                "bVar20": "byteVar2",
                "local_15a": "localVar",
                "auStack_158": "stackArray",
                "lStack_100": "lStackVar",
                "sStack_c8": "statStruct"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long arg1,char **arg2,char arg3)\n\n{\n  char **fileListPtr;\n  undefined undefinedVar;\n  byte byteVar;\n  int indexVar;\n  size_t sizeVar;\n  int *errnoPtr;\n  char *fileVar1;\n  char *fileVar2;\n  undefined8 extractResult;\n  char *fileVar3;\n  char *basenameVar1;\n  long ptrVar1;\n  long ptrVar2;\n  undefined8 result;\n  ulong ulongVar;\n  char **currentFilePtr;\n  char **nextFilePtr;\n  uint uintVar;\n  char **prevFilePtr;\n  bool boolVar;\n  byte byteVar2;\n  byte localVar;\n  undefined stackArray [88];\n  long lStackVar;\n  stat statStruct;\n  \n  byteVar2 = 0;\n  fileListPtr = (char **)(arg1 + 0xf0);\n  localVar = 0;\n  if (arg2 == (char **)0x0) {\n    result = initialize_data_00102943();\n    return result;\n  }\n  do {\n    fileVar3 = *arg2;\njoined_r0x001055aa:\n    if (fileVar3 == (char *)0x0) {\n      if (localVar != 0) {\n        result = extract_archive_information_001058b0(arg1);\n        return result;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentFilePtr = *(char ***)(arg1 + 0xf0);\n    nextFilePtr = fileListPtr;\n    if (arg3 != '\\0') {\nLAB_0010564c:\n      uintVar = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      ptrVar2 = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        ptrVar1 = ptrVar2;\n        ptrVar2 = *(long *)(ptrVar1 + 0xf0);\n      } while (ptrVar2 != 0);\n      nextFilePtr = (char **)(ptrVar1 + 0xf0);\n      fileVar3 = *arg2;\n      do {\n        if (DAT_0010d620 != 0) {\n          result = decompiled_function_00105830(fileVar3,arg1);\n          indexVar = filename_cmp(result,\"__.LIBDEP\");\n          if (indexVar == 0) {\n            byteVar = process_files_00105ae0(nextFilePtr,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localVar = byteVar | localVar;\n            goto LAB_0010577e;\n          }\n          fileVar3 = *arg2;\n        }\n        undefinedVar = DAT_0010d5f8;\n        boolVar = DAT_0010d60c != 0;\n        ptrVar2 = bfd_openr(fileVar3,DAT_0010d5f0);\n        if (ptrVar2 != 0) {\n          arg2 = arg2 + 1;\n          byteVar = process_files_00105af0(nextFilePtr,ptrVar2,(uint)boolVar,undefinedVar);\n          localVar = localVar | byteVar;\n          fileVar3 = *arg2;\n          goto joined_r0x001055aa;\n        }\n        exit_on_error_00107c10(fileVar3,0);\n        uintVar = (uint)boolVar;\nLAB_001028f5:\n        result = DAT_0010d638;\n        if (uintVar == 3) {\n          ptrVar2 = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*nextFilePtr != (undefined8 *)0x0;\n              nextFilePtr = (char **)(*nextFilePtr + 0xf0)) {\n            indexVar = filename_cmp(*(undefined8 *)*nextFilePtr,result);\n            if (indexVar == 0) {\n              if (uintVar == 2) {\n                nextFilePtr = (char **)(*nextFilePtr + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        fileVar3 = *arg2;\n      } while( true );\n    }\n    prevFilePtr = fileListPtr;\n    if (currentFilePtr == (char **)0x0) {\n      uintVar = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      fileVar3 = (char *)lbasename(*currentFilePtr);\n      fileVar2 = fileVar3;\n      if (DAT_0010d5fa != '\\0') {\n        sizeVar = strlen(fileVar3);\n        ulongVar = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (ulongVar < sizeVar) {\n          fileVar2 = (char *)xmalloc(ulongVar + 1);\n          ptrVar2 = *(long *)(arg1 + 8);\n          fileVar1 = fileVar2;\n          for (ulongVar = (ulong)*(byte *)(ptrVar2 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *fileVar1 = *fileVar3;\n            fileVar3 = fileVar3 + (ulong)byteVar2 * -2 + 1;\n            fileVar1 = fileVar1 + (ulong)byteVar2 * -2 + 1;\n          }\n          fileVar2[*(byte *)(ptrVar2 + 0x1e)] = '\\0';\n        }\n        fileVar1 = *arg2;\n        fileVar3 = fileVar2;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      fileVar1 = *arg2;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basenameVar1 = (char *)lbasename(fileVar1);\n      if (DAT_0010d5fa != '\\0') {\n        sizeVar = strlen(basenameVar1);\n        ulongVar = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        fileVar1 = basenameVar1;\n        fileVar3 = fileVar2;\n        if (ulongVar < sizeVar) {\n          fileVar1 = (char *)xmalloc(ulongVar + 1);\n          ptrVar2 = *(long *)(arg1 + 8);\n          fileVar2 = fileVar1;\n          for (ulongVar = (ulong)*(byte *)(ptrVar2 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *fileVar2 = *basenameVar1;\n            basenameVar1 = basenameVar1 + (ulong)byteVar2 * -2 + 1;\n            fileVar2 = fileVar2 + (ulong)byteVar2 * -2 + 1;\n          }\n          fileVar1[*(byte *)(ptrVar2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      indexVar = filename_cmp(basenameVar1,fileVar2);\n      if (indexVar == 0) goto LAB_00102993;\nLAB_00105639:\n      prevFilePtr = currentFilePtr + 0x1e;\n      currentFilePtr = (char **)currentFilePtr[0x1e];\n      if (currentFilePtr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    fileVar1 = *arg2;\n    fileVar3 = *currentFilePtr;\nLAB_00102980:\n    indexVar = filename_cmp(fileVar1,fileVar3);\n    if (indexVar != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentFilePtr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      indexVar = stat(*arg2,&statStruct);\n      if (indexVar != 0) {\n        errnoPtr = __errno_location();\n        if (*errnoPtr != 2) {\n          exit_on_error_00107c10(*arg2);\nLAB_00102b7e:\n          fileVar3 = *currentFilePtr;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_and_exit_00107690(result,fileVar3);\n          free(arg2);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      nextFilePtr = (char **)currentFilePtr[0x1d];\n      if ((char **)currentFilePtr[0x1d] == (char **)0x0) {\n        nextFilePtr = currentFilePtr;\n      }\n      indexVar = (**(code **)(nextFilePtr[1] + 0x1e8))(currentFilePtr,stackArray);\n      if (indexVar != 0) goto LAB_00102b7e;\n      if (statStruct.st_mtim.tv_sec <= lStackVar) goto LAB_0010577e;\n    }\n    result = find_last_match_or_end_00105870(fileListPtr,2,*currentFilePtr);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      fileVar3 = *arg2;\n      boolVar = DAT_0010d60c != 0;\n      ptrVar2 = bfd_openr(fileVar3,DAT_0010d5f0);\n      if (ptrVar2 == 0) {\n        exit_on_error_00107c10(fileVar3,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = process_data_00103172(result,ptrVar2,boolVar);\n    }\n    else {\n      extractResult = decompiled_function_00105830(*arg2,arg1);\n      indexVar = filename_cmp(extractResult,\"__.LIBDEP\");\n      if (indexVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = process_data_00103172(result,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byteVar != 0) {\n      *prevFilePtr = *(char **)(*prevFilePtr + 0xf0);\n      localVar = byteVar;\n    }\nLAB_0010577e:\n    arg2 = arg2 + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 75669,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}