{
    "functions": {
        "FUN_001070a0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070a0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_001070a0"
        },
        "FUN_00102620": {
            "renaming": {
                "FUN_00102620": "report_data_00102620",
                "param_1": "reportParam1",
                "param_2": "reportParam2",
                "param_3": "reportParam3",
                "param_4": "reportParam4",
                "param_5": "reportParam5",
                "param_6": "reportParam6",
                "param_7": "reportParam7",
                "param_8": "reportParam8",
                "param_9": "reportParam9",
                "param_10": "reportParam10",
                "param_11": "reportParam11",
                "param_12": "reportParam12",
                "param_13": "reportParam13",
                "param_14": "reportParam14",
                "in_AL": "boolCondition",
                "local_d8": "bufferSize",
                "local_d4": "arraySize",
                "local_d0": "stackPointer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "tempParam1",
                "local_78": "tempParam2",
                "local_68": "tempParam3",
                "local_58": "tempParam4",
                "local_48": "tempParam5",
                "local_38": "tempParam6",
                "local_28": "tempParam7",
                "local_18": "tempParam8"
            },
            "code": "\nvoid reportData_00102620(undefined4 reportParam1,undefined4 reportParam2,undefined4 reportParam3,undefined4 reportParam4,\n                 undefined4 reportParam5,undefined4 reportParam6,undefined4 reportParam7,undefined4 reportParam8,\n                 undefined8 reportParam9,undefined8 reportParam10,undefined8 reportParam11,undefined8 reportParam12,\n                 undefined8 reportParam13,undefined8 reportParam14)\n\n{\n  char boolCondition;\n  undefined4 bufferSize;\n  undefined4 arraySize;\n  undefined *stackPointer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 tempParam1;\n  undefined4 tempParam2;\n  undefined4 tempParam3;\n  undefined4 tempParam4;\n  undefined4 tempParam5;\n  undefined4 tempParam6;\n  undefined4 tempParam7;\n  undefined4 tempParam8;\n  \n  if (boolCondition != '\\0') {\n    tempParam1 = reportParam1;\n    tempParam2 = reportParam2;\n    tempParam3 = reportParam3;\n    tempParam4 = reportParam4;\n    tempParam5 = reportParam5;\n    tempParam6 = reportParam6;\n    tempParam7 = reportParam7;\n    tempParam8 = reportParam8;\n  }\n  stackPointer = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = temporaryBuffer;\n  arraySize = 0x30;\n  param10Copy = reportParam10;\n  param11Copy = reportParam11;\n  param12Copy = reportParam12;\n  param13Copy = reportParam13;\n  param14Copy = reportParam14;\n  report(reportParam9,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102620",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_data_00102620"
        },
        "FUN_001070a8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070a8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_001070a8"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001071c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071c8",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_001071c8"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00107120": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107120",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00107120"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_00107080": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107080",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00107080"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "usage",
                "main",
                "bfd_nonfatal.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107128": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107128",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00107128"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "usage",
                "main",
                "bfd_nonfatal.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_001070b0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070b0",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_001070b0"
        },
        "FUN_00107008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_00107008"
        },
        "FUN_00107090": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107090",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00107090"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001070b8": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070b8",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_001070b8"
        },
        "FUN_001025c0": {
            "renaming": {
                "FUN_001025c0": "print_error_message_001025c0",
                "param_1": "message",
                "__gnuc_va_list": "args",
                "param_2": "arg_list",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "name",
                "fprintf": "print_formatted",
                "putc": "put_character"
            },
            "code": "\n\n\nvoid print_error_message_001025c0(char *message,args arg_list)\n\n{\n  fflush(standard_output);\n  print_formatted(standard_error,\"%s: \",name);\n  vprint_formatted(standard_error,message,arg_list);\n  put_character(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025c0",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001025c0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107098": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107098",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00107098"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_gmon_start_00102000",
                "ctx": "context"
            },
            "code": "\nint initialize_gmon_start_00102000(EVP_PKEY_CTX *context)\n\n{\n  int iVar1;\n  \n  iVar1 = __gmon_start__();\n  return iVar1;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_gmon_start_00102000"
        },
        "FUN_00107018": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107018",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_00107018"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00107138": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107138",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00107138"
        },
        "FUN_00102760": {
            "renaming": {
                "FUN_00102760": "initialize_program_00102760",
                "completed_0": "isProgramInitialized"
            },
            "code": "\nvoid initializeProgram_00102760(void)\n\n{\n  if (isProgramInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  isProgramInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102760",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00102760"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_fprintf_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_001026f0": {
            "renaming": {
                "FUN_001026f0": "FUNC_001026f0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid FUNC_001026f0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001026f0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_001026f0"
        },
        "FUN_001070c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001070c8",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_001070c8"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_00107020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00107020"
        },
        "FUN_00107140": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107140",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00107140"
        },
        "FUN_00107028": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107028",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00107028"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00103cd0": {
            "renaming": {
                "FUN_00103cd0": "FUNC_00103cd0"
            },
            "code": "\nvoid FUNC_00103cd0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103cd0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103cd0"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_001023a0": {
            "renaming": {
                "FUN_001023a0": "print_error_message_001023a0",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "_stdout": "outputStream",
                "_stderr": "errorStream",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_001023a0(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(outputStream);\n  if (errorCode != 0) {\n    fprintf(errorStream,\"%s: %s: %s\\n\",programName);\n    return;\n  }\n  fprintf(errorStream,\"%s: %s\\n\",programName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001023a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001071f8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071f8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001071f8"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00107150": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107150",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_00107150"
        },
        "FUN_001027a0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027a0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001027a0"
        },
        "FUN_00102540": {
            "renaming": {
                "FUN_00102540": "check_and_execute_function_00102540",
                "param_1": "arg1",
                "param_2": "arg2",
                "uVar1": "file_offset",
                "found": "is_found",
                "pc": "program_counter",
                "syms": "symbols",
                "filename": "file_name",
                "functionname": "function_name",
                "line": "line_number"
            },
            "code": "\nvoid check_and_execute_function_00102540(long arg1,long arg2)\n\n{\n  ulong file_offset;\n  \n  if ((is_found == '\\0') && ((*(byte *)(arg2 + 0x24) & 1) != 0)) {\n    file_offset = *(ulong *)(arg2 + 0x30);\n    if ((file_offset <= program_counter) && (program_counter < *(long *)(arg2 + 0x40) + file_offset)) {\n      is_found = (**(code **)(*(long *)(arg1 + 8) + 0x240))\n                        (arg1,symbols,arg2,program_counter - file_offset,&file_name,&function_name,&line_number,\n                         &discriminator);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_execute_function_00102540"
        },
        "FUN_00107158": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107158",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_00107158"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = fgets(__s,__n,__stream);\n  return pcVar1;\n}\n\n",
            "called": [
                "fgets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00107040": {
            "renaming": {},
            "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107040",
            "calling": [
                "puts"
            ],
            "imported": false,
            "current_name": "FUN_00107040"
        },
        "FUN_00107160": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107160",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00107160"
        },
        "FUN_001027b0": {
            "renaming": {
                "FUN_001027b0": "analyze_file_001027b0",
                "param_1": "options",
                "param_2": "inputFile",
                "pbVar1": "ptrByte",
                "puVar2": "ptrUint",
                "bVar3": "byteVar",
                "uVar4": "ushortVar",
                "lVar5": "longVar",
                "bVar6": "boolVar1",
                "bVar7": "boolVar2",
                "bVar8": "boolVar3",
                "pvVar9": "ptrVoid",
                "bVar10": "byteVar2",
                "cVar11": "charVar",
                "iVar12": "intVar",
                "uVar13": "uintVar",
                "iVar14": "intVar2",
                "uVar15": "uintVar2",
                "__stream": "byteStream2",
                "__s": "byteStream",
                "plVar16": "ptrLong315",
                "sVar17": "sizeVar",
                "__ptr": "ptrByte2",
                "lVar18": "localLong3",
                "pFVar19": "filePtr",
                "psVar20": "statVar",
                "uVar21": "uintVar3",
                "piVar22": "ptrInt",
                "plVar23": "ptrLong314",
                "__s_00": "statVar",
                "uVar24": "ulongVar",
                "pcVar26": "strVar6",
                "pbVar27": "ptrByte3",
                "unaff_RBP": "ptrChar1",
                "lVar28": "longVar3",
                "pbVar29": "ptrByte4",
                "pcVar30": "strVar2",
                "plVar31": "ptrLong316",
                "iVar32": "intVar3",
                "unaff_R12": "unaffPtrUndefined",
                "psVar33": "ptrStat2",
                "iVar34": "intVar4",
                "uVar35": "uintVar4",
                "local_148": "localPtrLong8",
                "local_140": "localPtrLong2",
                "local_120": "localSize",
                "local_118": "localLong",
                "local_d0": "localStat",
                "local_c8": "localStat2",
                "syms": "symbols",
                "symcount": "symbolCount",
                "pc": "programCounter2",
                "addr": "addresses",
                "naddr": "numAddresses",
                "found": "foundFlag",
                "pFVar25": "filePtr71"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 analyzeFile_001027b0(uint options,FILE *inputFile)\n\n{\n  byte *ptrByte;\n  uint *ptrUint;\n  byte byteVar;\n  ushort ushortVar;\n  long longVar;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  void *ptrVoid;\n  byte byteVar2;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  int intVar2;\n  undefined4 uintVar2;\n  FILE *byteStream2;\n  byte *byteStream;\n  long *ptrLong315;\n  size_t sizeVar;\n  byte *ptrByte2;\n  long localLong3;\n  FILE *filePtr;\n  stat *statVar;\n  undefined8 uintVar3;\n  int *ptrInt;\n  long *ptrLong314;\n  stat *statVar;\n  ulong ulongVar;\n  FILE *filePtr71;\n  char *strVar6;\n  byte *ptrByte3;\n  char *ptrChar1;\n  long longVar3;\n  byte *ptrByte4;\n  char *strVar2;\n  long *ptrLong316;\n  int intVar3;\n  undefined1 *unaffPtrUndefined;\n  stat *ptrStat2;\n  int intVar4;\n  uint uintVar4;\n  long *localPtrLong8;\n  long *localPtrLong2;\n  size_t localSize;\n  long localLong;\n  long *localStat;\n  stat localStat2;\n  \n  filePtr71 = (FILE *)(ulong)options;\n  setlocale(5,\"\");\n  strVar6 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)inputFile;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  filePtr = inputFile;\n  byteStream2 = inputFile;\n  if (1 < (int)options) {\n    intVar2 = 2000;\n    unaffPtrUndefined = (undefined1 *)0x1;\n    localPtrLong2 = (long *)0x0;\n    do {\n      intVar3 = (int)unaffPtrUndefined;\n      ptrChar1 = (char *)(long)intVar3;\n      localPtrLong8 = (long *)((long)ptrChar1 * 8);\n      intVar4 = (int)filePtr71;\n      if (**(char **)(&filePtr->_flags + (long)ptrChar1 * 2) == '@') {\n        intVar2 = intVar2 + -1;\n        if (intVar2 == 0) {\n          ptrLong315 = *(long **)filePtr;\n          strVar6 = \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        strVar6 = *(char **)(&filePtr->_flags + (long)ptrChar1 * 2) + 1;\n        intVar = stat(strVar6,&localStat2);\n        if (intVar < 0) goto LAB_00102c30;\n        if ((localStat2.st_mode & 0xf000) == 0x4000) {\n          do {\n            ptrLong315 = *(long **)filePtr;\n            strVar6 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(_stderr,strVar6,ptrLong315);\n            xexit(1);\n          } while( true );\n        }\n        byteStream2 = fopen(strVar6,\"r\");\n        if (byteStream2 == (FILE *)0x0) goto LAB_00102c30;\n        intVar = fseek(byteStream2,0,2);\n        if (((intVar == -1) ||\n            (strVar6 = (char *)ftell(byteStream2), (long *)strVar6 == (long *)0xffffffffffffffff)) ||\n           (intVar = fseek(byteStream2,0,0), intVar == -1)) {\nLAB_00102c90:\n          fclose(byteStream2);\n          if (intVar3 + 1 < intVar4) goto LAB_00102c3a;\n          break;\n        }\n        byteStream = (byte *)xmalloc((long)strVar6 + 1);\n        ptrLong315 = (long *)fread(byteStream,1,(size_t)strVar6,byteStream2);\n        if (((long *)strVar6 != ptrLong315) && (intVar = ferror(byteStream2), intVar != 0)) {\n          free(byteStream);\n          goto LAB_00102c90;\n        }\n        byteStream[(long)ptrLong315] = 0;\n        byteVar2 = *byteStream;\n        ptrByte3 = byteStream;\n        if (byteVar2 != 0) {\nLAB_00102980:\n          if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) goto LAB_00102970;\n          sizeVar = strlen((char *)byteStream);\n          ptrByte2 = (byte *)xmalloc(sizeVar + 1);\n          ptrLong315 = (long *)0x0;\n          intVar = 0;\n          boolVar1 = false;\n          boolVar2 = false;\n          boolVar3 = false;\n          localLong = 0;\n          ptrByte3 = byteStream;\n          do {\n            while (((&_sch_istable)[(ulong)*ptrByte3 * 2] & 0x40) != 0) {\n              ptrByte3 = ptrByte3 + 1;\n            }\n            if ((intVar == 0) || (ptrLong314 = ptrLong315 + localLong, intVar + -1 <= (int)localLong)) {\n              if (ptrLong315 == (long *)0x0) {\n                ptrLong315 = (long *)xmalloc(0x40);\n                intVar = 8;\n                ptrLong314 = ptrLong315 + localLong;\n                *ptrLong314 = 0;\n              }\n              else {\n                intVar = intVar * 2;\n                ptrLong315 = (long *)xrealloc(ptrLong315,(long)intVar << 3);\n                ptrLong314 = ptrLong315 + localLong;\n                *ptrLong314 = 0;\n              }\n            }\n            byteVar2 = *ptrByte3;\n            ptrByte4 = ptrByte2;\n            while (byteVar2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                  boolVar3 = false;\n                  boolVar1 = false;\n                  boolVar2 = false;\n                  goto LAB_00102a9e;\n                }\n                if (!boolVar3) break;\n                ptrByte3 = ptrByte3 + 1;\n                *ptrByte4 = byteVar2;\n                ptrByte4 = ptrByte4 + 1;\n                boolVar3 = false;\n                byteVar2 = *ptrByte3;\n                if (byteVar2 == 0) goto LAB_00102a9e;\n              }\n              if (byteVar2 == 0x5c) {\n                boolVar3 = true;\n              }\n              else if (boolVar2) {\n                if (byteVar2 == 0x27) {\n                  boolVar2 = false;\n                }\n                else {\nLAB_00102c0d:\n                  *ptrByte4 = byteVar2;\n                  ptrByte4 = ptrByte4 + 1;\n                }\n              }\n              else if (boolVar1) {\n                if (byteVar2 != 0x22) goto LAB_00102c0d;\n                boolVar1 = false;\n              }\n              else if (byteVar2 == 0x27) {\n                boolVar2 = true;\n              }\n              else {\n                if (byteVar2 != 0x22) goto LAB_00102c0d;\n                boolVar1 = true;\n              }\n              ptrByte = ptrByte3 + 1;\n              ptrByte3 = ptrByte3 + 1;\n              byteVar2 = *ptrByte;\n            }\nLAB_00102a9e:\n            *ptrByte4 = 0;\n            localLong3 = xstrdup(ptrByte2);\n            *ptrLong314 = localLong3;\n            ptrLong315[localLong + 1] = 0;\n            byteVar2 = *ptrByte3;\n            byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n            while ((byteVar & 0x40) != 0) {\n              byteVar2 = ptrByte3[1];\n              ptrByte3 = ptrByte3 + 1;\n              byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n            }\n            localLong = localLong + 1;\n          } while (byteVar2 != 0);\n          free(ptrByte2);\n          filePtr71 = filePtr;\n          if (inputFile == filePtr) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        ptrLong315 = (long *)xmalloc(8);\n        *ptrLong315 = 0;\n        if (inputFile == filePtr) {\nLAB_001030d9:\n          if (*(long **)filePtr == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            localLong3 = 1;\n            do {\n              intVar = (int)localLong3;\n              longVar3 = localLong3 * 2;\n              localLong3 = localLong3 + 1;\n            } while (*(long *)(&filePtr->_flags + longVar3) != 0);\n          }\n          filePtr71 = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          ptrLong314 = *(long **)filePtr;\n          localLong3 = 0;\n          while (ptrLong314 != (long *)0x0) {\n            uintVar3 = xstrdup();\n            *(undefined8 *)((long)&filePtr71->_flags + localLong3) = uintVar3;\n            ptrLong314 = *(long **)(filePtr->_shortbuf + localLong3 + -0x7b);\n            localLong3 = localLong3 + 8;\n          }\n          *(undefined8 *)((long)&filePtr71->_flags + localLong3) = 0;\nLAB_00102b38:\n          filePtr = filePtr71;\n          if (*ptrLong315 == 0) goto LAB_0010318e;\n          strVar6 = (char *)0x0;\n          do {\n            strVar6 = (char *)((long)strVar6 + 1);\n          } while (ptrLong315[(long)strVar6] != 0);\n          localSize = (long)strVar6 * 8;\n        }\n        else {\nLAB_0010318e:\n          strVar6 = (char *)0x0;\n          localSize = 0;\n        }\n        free(*(void **)(&filePtr->_flags + (long)ptrChar1 * 2));\n        filePtr = (FILE *)xrealloc(filePtr,((long)strVar6 + (long)intVar4 + 1) * 8);\n        uintVar4 = intVar4 + -1 + (int)strVar6;\n        filePtr71 = (FILE *)(ulong)uintVar4;\n        memmove(&filePtr->_flags + (long)(FILE **)((long)ptrChar1 + (long)strVar6) * 2,\n                &filePtr->_IO_read_ptr + (long)ptrChar1,(long)(intVar4 - intVar3) << 3);\n        memcpy(&filePtr->_flags + (long)ptrChar1 * 2,ptrLong315,localSize);\n        free(ptrLong315);\n        free(byteStream);\n        fclose(byteStream2);\n        uintVar = (int)localPtrLong2 + 1;\n        ptrChar1 = (char *)(FILE **)((long)ptrChar1 + (long)strVar6);\n        unaffPtrUndefined = (undefined1 *)localPtrLong8;\n        localPtrLong8 = ptrLong315;\n        if ((int)uintVar4 <= (int)uintVar) break;\n      }\n      else {\nLAB_00102c30:\n        if (intVar4 <= intVar3 + 1) break;\nLAB_00102c3a:\n        uintVar = intVar3 + 1;\n        localPtrLong2 = (long *)unaffPtrUndefined;\n      }\n      unaffPtrUndefined = (undefined1 *)(ulong)uintVar;\n    } while( true );\n  }\n  intVar2 = bfd_init();\n  if (intVar2 != 0x118) {\n    uintVar3 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(uintVar3);\n    goto switchD_00102d16_caseD_43;\n  }\n  strVar6 = \"x86_64-programCounter2-linux-gnu\";\n  charVar = bfd_set_default_target();\n  if (charVar == '\\0') {\n    uintVar2 = bfd_get_error();\n    ptrChar1 = (char *)bfd_errmsg(uintVar2);\n    uintVar3 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    fatal(uintVar3,\"x86_64-programCounter2-linux-gnu\",ptrChar1);\n    goto switchD_00102d16_caseD_61;\n  }\n  unaffPtrUndefined = long_options;\n  localPtrLong2 = (long *)0x0;\n  ptrChar1 = \"ab:Ce:rRsfHhij:pVv\";\n  localPtrLong8 = (long *)0x0;\n  strVar6 = (char *)(long *)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uintVar2 = getopt_long(filePtr71,filePtr,ptrChar1,unaffPtrUndefined,0);\n    switch(uintVar2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      usage(_stderr,1);\n    case 0x6a:\n      localPtrLong8 = _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      byteStream2 = (FILE *)&optarg;\n      do_demangle = '\\x01';\n      if (_optarg != (long *)0x0) {\n        intVar2 = cplus_demangle_name_to_style();\n        if (intVar2 == 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nLAB_0010339f:\n      strVar6 = *(char **)byteStream2;\n      strVar2 = \"unknown demangling style `%s\\'\";\nLAB_001033ae:\n      uintVar3 = dcgettext(0,strVar2,5);\n      fatal(uintVar3,strVar6);\nswitchD_00102d16_caseD_72:\n      demangle_flags = demangle_flags | 0x40000;\n      break;\n    case 0x52:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addresses2line\",\"(GNU Binutils for Debian) 2.40\");\n      strVar6 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(strVar6);\n      strVar6 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(strVar6);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      with_addressesesses = '\\x01';\n      break;\n    case 0x62:\n      localPtrLong2 = _optarg;\n      break;\n    case 0x65:\n      strVar6 = (char *)_optarg;\n      break;\n    case 0x66:\n      with_functions = '\\x01';\n      break;\n    case 0x69:\n      unwind_inlines = '\\x01';\n      break;\n    case 0x70:\n      pretty_print = '\\x01';\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      addresses = (char **)(&filePtr->_flags + (long)_optind * 2);\n      numAddresses = (int)filePtr71 - _optind;\n      if ((long *)strVar6 == (long *)0x0) {\n        strVar6 = \"a.out\";\n      }\n      intVar2 = stat(strVar6,&localStat2);\n      if (intVar2 < 0) {\n        ptrInt = __errno_location();\n        strVar2 = \"\\'%s\\': No such file\";\n        if (*ptrInt != 2) {\n          strVar2 = strerror(*ptrInt);\n          uintVar3 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n          non_fatal(uintVar3,strVar6,strVar2);\n          return 1;\n        }\nLAB_001039cd:\n        uintVar3 = dcgettext(0,strVar2,5);\n        non_fatal(uintVar3,strVar6);\n        return 1;\n      }\n      if ((localStat2.st_mode & 0xf000) == 0x4000) {\n        strVar2 = \"Warning: \\'%s\\' is a directory\";\n        goto LAB_001039cd;\n      }\n      strVar2 = \"Warning: \\'%s\\' is not an ordinary file\";\n      if ((localStat2.st_mode & 0xf000) != 0x8000) goto LAB_001039cd;\n      strVar2 = \"Warning: \\'%s\\' has negative size, probably it is too large\";\n      if (localStat2.st_size < 0) goto LAB_001039cd;\n      if (localStat2.st_size == 0) {\n        return 1;\n      }\n      filePtr = (FILE *)bfd_openr(strVar6,localPtrLong2);\n      if (filePtr == (FILE *)0x0) {\n        bfd_nonfatal(strVar6);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      ptrUint = (uint *)((long)&filePtr->_IO_buf_end + 4);\n      *ptrUint = *ptrUint | 0x8000;\n      charVar = bfd_check_format(filePtr,2);\n      if (charVar != '\\0') {\n        strVar2 = \"%s: cannot get addressesesses from archive\";\n        goto LAB_001033ae;\n      }\n      charVar = bfd_check_format_matches(filePtr,1,&localStat);\n      if (charVar == '\\0') {\n        bfd_nonfatal(*(long **)filePtr);\n        intVar2 = bfd_get_error();\n        if (intVar2 == 0xd) {\n          filePtr = (FILE *)0x1040e1;\n          fflush(_stdout);\n          ptrLong315 = program_name;\n          strVar6 = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(_stderr,strVar6,ptrLong315);\n          for (ptrLong315 = localStat; *ptrLong315 != 0; ptrLong315 = ptrLong315 + 1) {\n            fprintf(_stderr,\" %s\");\n          }\n          free(localStat);\n          fputc(10,_stderr);\n        }\n        goto LAB_00103801;\n      }\n      ptrLong315 = localPtrLong8;\n      if ((localPtrLong8 != (long *)0x0) &&\n         (ptrLong315 = (long *)bfd_get_section_by_name(filePtr), ptrLong315 == (long *)0x0)) {\n        uintVar3 = dcgettext(0,\"%s: cannot find section %s\",5);\n        fatal(uintVar3,strVar6,localPtrLong8);\n        goto LAB_0010399c;\n      }\n      localPtrLong8 = ptrLong315;\n      if ((*(byte *)((long)&filePtr->_IO_buf_end + 4) & 0x10) == 0) goto LAB_00102ecd;\n      localLong3 = (**(code **)(filePtr->_IO_read_ptr + 0x1f8))(filePtr);\n      if (localLong3 == 0) {\n        localLong3 = (**(code **)(filePtr->_IO_read_ptr + 0x350))(filePtr);\n        if (-1 < localLong3) {\n          symbols = (void *)xmalloc(localLong3);\n          symbolCount = (**(code **)(filePtr->_IO_read_ptr + 0x358))(filePtr);\n          if (-1 < symbolCount) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 < localLong3) {\n        symbols = (void *)xmalloc(localLong3);\n        symbolCount = (**(code **)(filePtr->_IO_read_ptr + 0x200))(filePtr);\n        if (-1 < symbolCount) {\n          if (symbolCount == 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      bfd_nonfatal(*(long **)filePtr);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      localLong3 = (**(code **)(filePtr->_IO_read_ptr + 0x350))(filePtr);\n      if (0 < localLong3) {\n        free(symbols);\n        symbols = (void *)xmalloc(localLong3);\n        symbolCount = (**(code **)(filePtr->_IO_read_ptr + 0x358))(filePtr);\n      }\nLAB_00102ebf:\n      if (symbolCount < 1) {\n        free(symbols);\n        symbols = (void *)0x0;\n      }\nLAB_00102ecd:\n      unaffPtrUndefined = (undefined1 *)(ulong)numAddresses;\n      byteStream2 = (FILE *)&DAT_0010400a;\n      if (numAddresses == 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)numAddresses < 1) {\nLAB_0010308a:\n        free(symbols);\n        symbols = (void *)0x0;\n        bfd_close(filePtr);\n        return 0;\n      }\n      numAddresses = numAddresses - 1;\n      statVar = (stat *)*addresses;\n      addresses = addresses + 1;\n      do {\n        byteVar2 = *(byte *)&statVar->st_dev;\n        ulongVar = (ulong)byteVar2;\n        ushortVar = *(ushort *)(&_sch_istable + ulongVar * 2);\n        statVar = statVar;\n        while ((ushortVar & 0x40) != 0) {\n          byteVar2 = *(byte *)((long)&statVar->st_dev + 1);\n          ulongVar = (ulong)byteVar2;\n          statVar = (stat *)((long)&statVar->st_dev + 1);\n          ushortVar = *(ushort *)(&_sch_istable + ulongVar * 2);\n        }\n        if ((((ushortVar & 4) == 0) && (byteVar2 != 0)) &&\n           ((ptrStat2 = statVar, 5 < (byte)((&_sch_toupper)[ulongVar] + 0xbf) ||\n            (strVar6 = strchr((char *)statVar,0x2b), strVar6 != (char *)0x0)))) {\n          while( true ) {\n            byteVar2 = *(byte *)&ptrStat2->st_dev;\n            statVar = ptrStat2;\n            if (((byteVar2 == 0) || ((*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) & 0x40) != 0)) ||\n               (byteVar2 == 0x2b)) break;\n            ptrStat2 = (stat *)((long)&ptrStat2->st_dev + 1);\n          }\n          while (((&_sch_istable)[(ulong)*(byte *)&statVar->st_dev * 2] & 0x40) != 0) {\n            statVar = (stat *)((long)&statVar->st_dev + 1);\n          }\n          ulongVar = 0;\n          if (*(byte *)&statVar->st_dev == 0x2b) {\n            ulongVar = strtoul((char *)((long)&statVar->st_dev + 1),(char **)0x0,0);\n          }\n          ptrVoid = symbols;\n          localLong3 = symbolCount;\n          *(undefined *)&ptrStat2->st_dev = 0;\n          for (longVar3 = 0; longVar3 < localLong3; longVar3 = longVar3 + 1) {\n            longVar = *(long *)((long)ptrVoid + longVar3 * 8);\n            intVar2 = strcmp(*(char **)(longVar + 8),(char *)statVar);\n            if (intVar2 == 0) {\n              unaffPtrUndefined = (undefined1 *)((ulong)unaffPtrUndefined & 0xffffffff);\n              programCounter2 = ulongVar + *(long *)(longVar + 0x10) + *(long *)(*(long *)(longVar + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n          }\n          unaffPtrUndefined = (undefined1 *)((ulong)unaffPtrUndefined & 0xffffffff);\n          for (localLong3 = 0; localLong3 < symbolCount; localLong3 = localLong3 + 1) {\n            strVar6 = (char *)bfd_demangle(filePtr,*(undefined8 *)\n                                                    (*(long *)((long)symbols + localLong3 * 8) + 8),\n                                           demangle_flags);\n            if ((strVar6 != (char *)0x0) && (intVar2 = strcmp(strVar6,(char *)statVar), intVar2 == 0))\n            {\n              free(strVar6);\n              localLong3 = *(long *)((long)symbols + localLong3 * 8);\n              programCounter2 = *(long *)(localLong3 + 0x10) + ulongVar + *(long *)(*(long *)(localLong3 + 0x20) + 0x30);\n              goto LAB_00102f4b;\n            }\n            free(strVar6);\n          }\n          programCounter2 = 0;\n        }\n        else {\n          programCounter2 = bfd_scan_vma(statVar,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(filePtr->_IO_read_ptr + 8) == 5) {\n          localLong3 = *(long *)(filePtr->_IO_read_ptr + 0x380);\n          ulongVar = 1L << (*(char *)(*(long *)(localLong3 + 0x340) + 10) - 1U & 0x3f);\n          programCounter2 = programCounter2 & ulongVar * 2 - 1;\n          if ((*(byte *)(localLong3 + 0x3f1) & 1) != 0) {\n            programCounter2 = (programCounter2 ^ ulongVar) - ulongVar;\n          }\n        }\n        if (with_addressesesses != '\\0') {\n          printf(\"0x\");\n          bfd_fprintf_vma(filePtr,_stdout,programCounter2);\n          if (pretty_print == '\\0') {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        ptrChar1 = &stdout;\n        foundFlag = '\\0';\n        if (localPtrLong8 == (long *)0x0) {\n          bfd_map_over_sections(filePtr,find_addressesess_in_section,0);\nLAB_00102fcf:\n          if (foundFlag != '\\0') {\n            do {\n              if (with_functions != '\\0') {\n                ptrLong315 = functionname;\n                if (functionname == (long *)0x0) {\nLAB_00103a4a:\n                  ptrLong314 = (long *)&DAT_0010400a;\n                }\n                else {\n                  if (*(char *)functionname == '\\0') {\n                    ptrLong315 = (long *)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  strVar6 = (char *)functionname;\n                  filePtr71 = filePtr;\n                  if (do_demangle == '\\0') {\nLAB_001031f4:\n                    ptrLong315 = (long *)0x0;\n                    ptrLong314 = (long *)strVar6;\n                    filePtr = filePtr71;\n                  }\n                  else {\nLAB_0010399c:\n                    ptrLong315 = (long *)bfd_demangle(filePtr71,strVar6,demangle_flags);\n                    ptrLong314 = ptrLong315;\n                    filePtr = filePtr71;\n                    if (ptrLong315 == (long *)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",ptrLong314);\n                if (pretty_print == '\\0') {\n                  putchar(10);\n                }\n                else {\n                  strVar6 = (char *)dcgettext(0,&DAT_001040f1,5);\n                  printf(strVar6);\n                }\n                free(ptrLong315);\n              }\n              filePtr71 = filename;\n              if (base_names == '\\0') {\n                if (filename == (FILE *)0x0) {\n                  filePtr71 = byteStream2;\n                }\n              }\n              else if (filename == (FILE *)0x0) {\n                filePtr71 = (FILE *)&DAT_0010400a;\n              }\n              else {\n                strVar6 = strrchr((char *)filename,0x2f);\n                if (strVar6 != (char *)0x0) {\n                  filePtr71 = (FILE *)(strVar6 + 1);\n                  filename = filePtr71;\n                }\n              }\n              printf(\"%s:\",filePtr71);\n              filePtr71 = filePtr;\n              if (line == 0) {\nLAB_00103a85:\n                puts(\"?\");\n                filePtr = filePtr71;\n              }\n              else if (discriminator == 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (unwind_inlines == '\\0') {\nLAB_0010304c:\n                foundFlag = '\\0';\n                goto LAB_00103053;\n              }\n              foundFlag = (**(code **)(filePtr->_IO_read_ptr + 600))\n                                (filePtr,&filename,&functionname,&line);\n              ptrLong315 = functionname;\n              if (foundFlag == '\\0') goto LAB_00103053;\n              while (functionname = ptrLong315, pretty_print == '\\0') {\n                if (with_functions != '\\0') {\n                  ptrLong314 = ptrLong315;\n                  if (ptrLong315 == (long *)0x0) {\nLAB_00103b7b:\n                    ptrLong316 = (long *)&DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)ptrLong315 == '\\0') {\n                      ptrLong314 = (long *)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((do_demangle == '\\0') ||\n                       (ptrLong314 = (long *)bfd_demangle(filePtr,ptrLong315,demangle_flags),\n                       ptrLong316 = ptrLong314, ptrLong314 == (long *)0x0)) {\n                      ptrLong314 = (long *)0x0;\n                      ptrLong316 = ptrLong315;\n                    }\n                  }\n                  printf(\"%s\",ptrLong316);\n                  if (pretty_print == '\\0') {\n                    putchar(10);\n                  }\n                  else {\n                    strVar6 = (char *)dcgettext(0,&DAT_001040f1,5);\n                    printf(strVar6);\n                  }\n                  free(ptrLong314);\n                }\n                filePtr71 = filename;\n                if (base_names == '\\0') {\n                  if (filename == (FILE *)0x0) {\n                    filePtr71 = (FILE *)&DAT_0010400a;\n                  }\n                }\n                else if (filename == (FILE *)0x0) {\n                  filePtr71 = (FILE *)&DAT_0010400a;\n                }\n                else {\n                  strVar6 = strrchr((char *)filename,0x2f);\n                  if (strVar6 != (char *)0x0) {\n                    filePtr71 = (FILE *)(strVar6 + 1);\n                    filename = filePtr71;\n                  }\n                }\n                printf(\"%s:\",filePtr71);\n                if (line == 0) {\n                  puts(\"?\");\n                }\n                else if (discriminator == 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (unwind_inlines == '\\0') goto LAB_0010304c;\n                foundFlag = (**(code **)(filePtr->_IO_read_ptr + 600))\n                                  (filePtr,&filename,&functionname,&line);\n                ptrLong315 = functionname;\n                if (foundFlag == '\\0') {\n                  foundFlag = '\\0';\n                  goto LAB_00103053;\n                }\n              }\n              strVar6 = (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(strVar6);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)localPtrLong8 + 0x24) & 1) != 0) && (programCounter2 < (ulong)localPtrLong8[8])) {\n          foundFlag = (**(code **)(filePtr->_IO_read_ptr + 0x240))\n                            (filePtr,symbols,localPtrLong8,programCounter2,&filename,&functionname,&line,&discriminator)\n          ;\n          goto LAB_00102fcf;\n        }\n        if (with_functions != '\\0') {\n          if (pretty_print == '\\0') {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)ptrChar1);\n        if ((int)unaffPtrUndefined != 0) goto LAB_00102ee7;\nLAB_00103065:\n        strVar6 = fgets((char *)&localStat2,100,_stdin);\n        statVar = &localStat2;\n        if (strVar6 == (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  byteVar2 = ptrByte3[1];\n  ptrByte3 = ptrByte3 + 1;\n  if (byteVar2 == 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  base_names = '\\x01';\n  goto switchD_00102d16_caseD_0;\n}\n\n",
            "called": [
                "xstrdup",
                "non_fatal",
                "bfd_check_format_matches",
                "fputc",
                "bfd_check_format",
                "stat",
                "fgets",
                "bindtextdomain",
                "fread",
                "find_address_in_section",
                "bfd_openr",
                "strtoul",
                "fatal",
                "xmalloc",
                "free",
                "fprintf",
                "strchr",
                "__errno_location",
                "fclose",
                "exit",
                "setlocale",
                "xexit",
                "fopen",
                "bfd_get_section_by_name",
                "bfd_init",
                "bfd_demangle",
                "usage",
                "strlen",
                "ftell",
                "strrchr",
                "bfd_errmsg",
                "getopt_long",
                "strerror",
                "fseek",
                "bfd_map_over_sections",
                "memcpy",
                "ferror",
                "cplus_demangle_set_style",
                "textdomain",
                "dcgettext",
                "bfd_set_default_target",
                "strcmp",
                "bfd_nonfatal",
                "xmalloc_set_program_name",
                "bfd_fprintf_vma",
                "cplus_demangle_name_to_style",
                "bfd_set_error_program_name",
                "fflush",
                "memmove",
                "putchar",
                "bfd_scan_vma",
                "xrealloc",
                "printf",
                "puts",
                "bfd_get_error",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027b0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "analyze_file_001027b0"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00107048": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107048",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_00107048"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00103bd0": {
            "renaming": {
                "FUN_00103bd0": "report_error_00103bd0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "error",
                "uVar2": "errMsg",
                "lVar3": "exitCode",
                "in_R10": "additionalInfo",
                "local_d8": "bufferSize",
                "local_d4": "offset",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "errorCodeBuffer",
                "local_b0": "ptrParam10",
                "local_a8": "ptrParam11",
                "local_a0": "ptrParam12",
                "local_98": "ptrParam13",
                "local_90": "ptrParam14",
                "local_88": "savedErrorCode1",
                "local_78": "savedErrorCode2",
                "local_68": "savedErrorCode3",
                "local_58": "savedErrorCode4",
                "local_48": "savedErrorCode5",
                "local_38": "savedErrorCode6",
                "local_28": "savedErrorCode7",
                "local_18": "savedErrorCode8"
            },
            "code": "\n\n\nvoid reportError_00103bd0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 errMsg;\n  long exitCode;\n  undefined8 additionalInfo;\n  undefined4 bufferSize;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined errorCodeBuffer [8];\n  undefined8 ptrParam10;\n  undefined8 ptrParam11;\n  undefined8 ptrParam12;\n  undefined8 ptrParam13;\n  undefined8 ptrParam14;\n  undefined4 savedErrorCode1;\n  undefined4 savedErrorCode2;\n  undefined4 savedErrorCode3;\n  undefined4 savedErrorCode4;\n  undefined4 savedErrorCode5;\n  undefined4 savedErrorCode6;\n  undefined4 savedErrorCode7;\n  undefined4 savedErrorCode8;\n  \n  if (flag != '\\0') {\n    savedErrorCode1 = errorCode1;\n    savedErrorCode2 = errorCode2;\n    savedErrorCode3 = errorCode3;\n    savedErrorCode4 = errorCode4;\n    savedErrorCode5 = errorCode5;\n    savedErrorCode6 = errorCode6;\n    savedErrorCode7 = errorCode7;\n    savedErrorCode8 = errorCode8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = errorCodeBuffer;\n  offset = 0x30;\n  ptrParam10 = param10;\n  ptrParam11 = param11;\n  ptrParam12 = param12;\n  ptrParam13 = param13;\n  ptrParam14 = param14;\n  report(errorMessage,&bufferSize);\n  exitCode = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errMsg = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (exitCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,exitCode,errMsg,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errMsg,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "report_error_00103bd0"
        },
        "FUN_00107168": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107168",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00107168"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00107208": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107208",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_00107208"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107170": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107170",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00107170"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00107058": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107058",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_00107058"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00102720": {
            "renaming": {
                "FUN_00102720": "FUNC_00102720"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid FUNC_00102720(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102720",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00102720"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_00107180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107180",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_00107180"
        },
        "FUN_001071a8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071a8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_001071a8"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00107100": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107100",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00107100"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001071b8": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001071b8",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_001071b8"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e1": {
            "renaming": {
                "FUN_001023e1": "print_usage_001023e1",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "programName",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr",
                "fprintf": "writeFormattedOutput",
                "dcgettext": "getLocaleMessage",
                "fputc": "writeCharacter",
                "free": "releaseMemory",
                "exit": "terminateExecution"
            },
            "code": "\nvoid printUsage_001023e1(FILE *outputFile,int exitCode)\n\n{\n  long programName;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  programName = program_name;\n  message = (char *)getLocaleMessage(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  writeFormattedOutput(outputFile,message,programName);\n  message = (char *)getLocaleMessage(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  writeFormattedOutput(outputFile,message);\n  message = (char *)getLocaleMessage(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  writeFormattedOutput(outputFile,message);\n  message = (char *)getLocaleMessage(0,\n                             \" The options are:\\n  @<file>                Read options from <file>\\n  -a --addresses         Show addresses\\n  -b --target=<bfdname>  Set the binary file format\\n  -e --exe=<executable>  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section=<name>    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[=style]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\'s version\\n\\n\"\n                             ,5);\n  writeFormattedOutput(outputFile,message);\n  programName = program_name;\n  if (program_name == 0) {\n    message = (char *)getLocaleMessage(0,\"Supported targets:\",5);\n    writeFormattedOutput(outputFile,message);\n  }\n  else {\n    message = (char *)getLocaleMessage(0,\"%s: supported targets:\",5);\n    writeFormattedOutput(outputFile,message,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    programName = *ptr;\n    ptr = ptr + 1;\n    if (programName == 0) break;\n    writeFormattedOutput(outputFile,\" %s\");\n  }\n  writeCharacter(10,outputFile);\n  releaseMemory(targetList);\n  if (exitCode == 0) {\n    message = (char *)getLocaleMessage(0,\"Report bugs to %s\\n\",5);\n    writeFormattedOutput(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  terminateExecution(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "bfd_target_list",
                "fputc",
                "exit",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e1",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_001023e1"
        },
        "FUN_00103c70": {
            "renaming": {
                "FUN_00103c70": "print_error_message_00103c70",
                "param_1": "errorMessage",
                "iVar1": "errorType",
                "uVar2": "errorString",
                "in_R10": "extraInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00103c70(long errorMessage)\n\n{\n  int errorType;\n  undefined8 errorString;\n  undefined8 extraInfo;\n  \n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(errorType);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorMessage,errorString,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorString,extraInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c70",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00103c70"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001026c0": {
            "renaming": {
                "FUN_001026c0": "process_entry_001026c0",
                "param_1": "entryParam",
                "param_2": "mainParam",
                "auStack_8": "stackBuffer"
            },
            "code": "\nvoid processEntry_001026c0 processEntry_001026c0(undefined8 entryParam,undefined8 mainParam)\n\n{\n  undefined stackBuffer [8];\n  \n  __libc_start_main(main,mainParam,&stack0x00000008,0,0,entryParam,stackBuffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026c0",
            "calling": [],
            "imported": false,
            "current_name": "process_entry_001026c0"
        },
        "FUN_00107070": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107070",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_00107070"
        },
        "FUN_00107190": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107190",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_00107190"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00107110": {
            "renaming": {},
            "code": "\n\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fgets@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107110",
            "calling": [
                "fgets"
            ],
            "imported": false,
            "current_name": "FUN_00107110"
        }
    },
    "used_tokens": 14430,
    "layers": [
        [
            "FUN_00102620",
            "FUN_001025c0",
            "FUN_00102000",
            "FUN_00102760",
            "FUN_001023a0",
            "FUN_00102540",
            "FUN_00102020",
            "FUN_001027b0",
            "FUN_00103bd0",
            "FUN_001023e1",
            "FUN_00103c70",
            "FUN_001026c0"
        ]
    ],
    "locked_functions": []
}