{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "initialize_memory_and_set_param_00113dfe",
                "param_1": "memorySize",
                "param_2": "parameterValue",
                "lVar1": "memoryAddress"
            },
            "code": "\nvoid initializeMemoryAndSetParam_00113dfe(undefined4 memorySize,undefined parameterValue)\n\n{\n  long memoryAddress;\n  \n  memoryAddress = initialize_memory_00112904(3,memorySize);\n  if (memoryAddress != 0) {\n    *(undefined *)(memoryAddress + 0x10) = parameterValue;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_and_set_param_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "add_string_to_buffer_0010ab4d",
                "param_1": "bufferAddress",
                "param_2": "stringToAdd",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bufferPointer",
                "lVar2": "bufferPointer2",
                "auVar3": "result1",
                "auVar7": "result2",
                "sVar4": "stringLength1",
                "pcVar5": "allocatedString",
                "sVar6": "stringLength2"
            },
            "code": "\nundefined  [16] addStringToBuffer_0010ab4d(long bufferAddress,char *stringToAdd,undefined8 param3,undefined8 param4)\n\n{\n  ulong bufferPointer;\n  long bufferPointer2;\n  undefined result1 [16];\n  size_t stringLength1;\n  char *allocatedString;\n  size_t stringLength2;\n  undefined result2 [16];\n  \n  bufferPointer = *(ulong *)(bufferAddress + 0x60);\n  if ((bufferPointer != 0) && (*(long *)(bufferPointer + 0x20) != 0)) {\n    allocatedString = *(char **)(bufferPointer + 0x30);\n    stringLength1 = strlen(stringToAdd);\n    if (allocatedString == (char *)0x0) {\n      allocatedString = (char *)xmalloc(stringLength1 + 3);\n      *allocatedString = '\\0';\n    }\n    else {\n      stringLength2 = strlen(allocatedString);\n      allocatedString = (char *)xrealloc(allocatedString,stringLength1 + 4 + stringLength2);\n    }\n    stringLength1 = strlen(allocatedString);\n    sprintf(allocatedString + stringLength1,\"%s::\",stringToAdd);\n    bufferPointer2 = *(long *)(bufferAddress + 0x60);\n    *(char **)(bufferPointer2 + 0x30) = allocatedString;\n    result2._1_7_ = (undefined7)((ulong)bufferPointer2 >> 8);\n    result2[0] = 1;\n    result2._8_8_ = param4;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = bufferPointer;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "xrealloc",
                "strlen",
                "xmalloc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "add_string_to_buffer_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_file_0010c218",
                "param_1": "file_handle",
                "param_2": "name_type",
                "param_3": "current_file",
                "uVar1": "error_message",
                "lVar2": "memory",
                "pauVar3": "data_structure",
                "lVar4": "data_structure_result"
            },
            "code": "\n\n\nlong process_file_0010c218(long file_handle,long name_type,long current_file)\n\n{\n  undefined8 error_message;\n  long memory;\n  undefined (*data_structure) [16];\n  long data_structure_result;\n  \n  if ((name_type != 0) && (current_file != 0)) {\n    if ((*(long *)(file_handle + 8) == 0) || (*(long *)(file_handle + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      memory = initialize_memory_00112904(0x16,0);\n      if (memory != 0) {\n        data_structure = (undefined (*) [16])xmalloc(0x10);\n        data_structure_result = *(long *)(file_handle + 0x10);\n        *data_structure = ZEXT816(0);\n        *(long *)(*data_structure + 8) = current_file;\n        *(undefined (**) [16])(memory + 0x10) = data_structure;\n        data_structure_result = initialize_data_structure_00112925(data_structure_result + 0x10,name_type,0,3);\n        if (data_structure_result != 0) {\n          *(long *)(data_structure_result + 0x20) = memory;\n          *(long *)*data_structure = data_structure_result;\n          return memory;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c2d2",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_file_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_001275e0 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a2c = 0;\n  DAT_00127a28 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_001275e0;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_00127a24;\n  if ((int)_DAT_00127a24 < 0) {\n    sVar15 = strlen(DAT_001275e0);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_00127a24 = uVar10;\n  DAT_001279f8 = initialize_hash_table_00113f20();\n  DAT_001279f0 = initialize_hash_table_00113f20();\n  DAT_00127a08 = initialize_hash_table_00113f20();\n  DAT_001279e8 = initialize_hash_table_00113f20();\n  DAT_001279e0 = initialize_hash_table_00113f20();\n  DAT_001279d8 = initialize_hash_table_00113f20();\n  DAT_001279d0 = initialize_hash_table_00113f20();\n  DAT_001278d0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278c8 = initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264c0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_function_chain_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264c0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264c0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264c0;\n  iVar11 = *(int *)(PTR_DAT_001264c0 + 8);\n  *(int *)(PTR_DAT_001264c0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hashtables_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_00127a24 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_001264e0);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a00 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_and_compare_data_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a2c = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a28 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279cb = 1;\n        break;\n      case 0x73:\n        DAT_00127a2c = 7;\n        break;\n      case 0x76:\n        DAT_001279c9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ca = 1;\n        break;\n      case 0x78:\n        DAT_00127a28 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a18 = 1;\n        break;\n      case 0xb3:\n        process_data_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127939 = 1;\n        break;\n      case 0xba:\n        DAT_00127a00 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a2c = 4;\n        break;\n      case 0xc6:\n        process_data_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a2c = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a2c < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a2c & 0x3f) & 1U) == 0)) {\n          DAT_00127a00 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_license_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a2c | DAT_00127a28) == 0) &&\n           (lVar30 = htab_elements(DAT_001279f8), lVar30 == 0)) {\n          DAT_00127a2c = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_001264e0;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_001268e0);\n  pFVar14 = _optarg;\n  uVar10 = DAT_001278e8;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_arch_info_001199d0();\n    return DAT_00127a20;\n  }\n  if ((char)local_110 != '\\0') {\n    print_license_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a1c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a1c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a1c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a2c | DAT_00127a28) == 0) {\n    DAT_00127a2c = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = compare_strings_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = extract_string_and_compare_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = compare_strings_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = extract_string_and_compare_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  extract_and_copy_archive_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a20 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_delete_file_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279cb);\n    DAT_00127a20 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_001278e0;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127930);\n  free(DAT_00127928);\n  free(DAT_00127920);\n  free(DAT_00127918);\n  return DAT_00127a20;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a20;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a20;\n  }\n  lVar30 = get_file_information_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a20 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a20 = 0;\n    extract_and_copy_archive_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a20 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_delete_file_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279cb);\n      DAT_00127a20 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a20 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a2c = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278d8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_binary_file_copy_info_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278d8;\n    DAT_001278d8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_binary_file_copy_info_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a00 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_and_compare_data_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a2c = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279d0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a28 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a2c = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a1c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a1c = (int)lVar30;\n      if (DAT_00127a1c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_data_00114190(_optarg,1,2);\n    DAT_00127a19 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279cb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279c9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ca = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a28 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279c0 = parse_query_string_00114c80(_optarg,DAT_001279c0,\"--add-section\");\n    read_and_store_file_contents_00114d60(DAT_001279c0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a10 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279a8;\n        bVar39 = DAT_001279a8 == (undefined8 *)0x0;\n        DAT_001279a8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275a0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275a0 = puVar20;\n    PTR_DAT_001275a0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279a0 = DAT_001279a0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127910 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127910 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_00127990 = validate_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_00127998 = _DAT_00127990;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,uVar12);\n    lVar17 = validate_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_00127998 = validate_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_00127984 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_00127984 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_00127980 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_00127984 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279b0 = parse_query_string_00114c80(_optarg,DAT_001279b0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012797c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a2c = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_001278ec = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = validate_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)validate_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127979 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279e0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    load_and_parse_file_00114460(_optarg,DAT_001279e0,&DAT_00127928);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = validate_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_001278f0 = DAT_001278f0 | 0x100;\n    DAT_001278f4 = DAT_001278f4 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    load_and_parse_file_00114460(_optarg,DAT_001279d8,&DAT_00127920);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a18 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_data_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    load_and_parse_file_00114460(_optarg,DAT_00127a08,&DAT_00127940);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127939 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127938 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    load_and_parse_file_00114460(_optarg,DAT_001279e8,&DAT_00127930);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a00 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a2c = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127970 = validate_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127969 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_001278f8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127900 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127908 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_001278f4 = DAT_001278f4 | 0x100;\n    DAT_001278f0 = DAT_001278f0 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_001278f4 = DAT_001278f4 | 0x80;\n    DAT_001278f0 = DAT_001278f0 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127968 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_data_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_001278e8;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001278e8 = (uint)uVar27;\n    if (((int)DAT_001278e8 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_001278e8) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = validate_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_data_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127960 = validate_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = validate_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a2c = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    load_and_parse_file_00114460(_optarg,DAT_001279f8,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a2c = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    load_and_parse_file_00114460(_optarg,DAT_001279f0,&DAT_00127948);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279b8 = parse_query_string_00114c80(_optarg,DAT_001279b8,\"--update-section\");\n    read_and_store_file_contents_00114d60(DAT_001279b8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = validate_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279c8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    load_and_parse_file_00114460(_optarg,DAT_001279d0,&DAT_00127918);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_001278f0 = DAT_001278f0 | 0x80;\n    DAT_001278f4 = DAT_001278f4 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "setlocale",
                "strncpy",
                "FUN_001054af",
                "FUN_00119940",
                "strcasecmp",
                "htab_create_alloc",
                "fopen",
                "FUN_00114cf0",
                "FUN_00114d60",
                "__errno_location",
                "FUN_00108800",
                "strchr",
                "FUN_00114c20",
                "FUN_00108d9a",
                "strerror",
                "textdomain",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "xexit",
                "strcmp",
                "FUN_00113fb0",
                "FUN_00114460",
                "strlen",
                "fprintf",
                "FUN_00108c86",
                "htab_elements",
                "FUN_00108a2a",
                "FUN_00113fe0",
                "xstrdup",
                "unlink_if_ordinary",
                "memcpy",
                "FUN_00114690",
                "strtoul",
                "xcalloc",
                "FUN_00119970",
                "stat",
                "bfd_set_error_program_name",
                "getc",
                "FUN_00113f50",
                "close",
                "free",
                "xmalloc",
                "bfd_set_default_target",
                "malloc",
                "htab_find_slot",
                "FUN_00108916",
                "strncasecmp",
                "memmove",
                "fclose",
                "ftell",
                "xrealloc",
                "FUN_00113f20",
                "getopt_long",
                "FUN_00119ed0",
                "FUN_001199d0",
                "strcpy",
                "FUN_00119dd0",
                "ferror",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00115970",
                "mkstemp",
                "xmalloc_set_program_name",
                "bfd_init",
                "strtol",
                "dup",
                "bfd_scan_arch",
                "bindtextdomain",
                "free",
                "FUN_00108898",
                "FUN_0011a390",
                "filename_cmp",
                "bfd_get_error",
                "fread",
                "fseek"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "debug_start_block_0010be88",
                "param_1": "block_info",
                "param_2": "block_start_addr",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2",
                "puVar1": "next_block",
                "uVar2": "success",
                "puVar3": "new_block_info",
                "puVar4": "current_block",
                "lVar5": "temp_var_1",
                "puVar6": "previous_block",
                "puVar7": "ptr",
                "bVar8": "flag",
                "auVar9": "result"
            },
            "code": "\n\n\nundefined  [16] debug_start_block_0010be88(long block_info,undefined8 block_start_addr,undefined8 unknown_param_1,undefined8 unknown_param_2)\n\n{\n  undefined8 *next_block;\n  undefined8 success;\n  undefined4 *new_block_info;\n  undefined8 *current_block;\n  long temp_var_1;\n  undefined8 *previous_block;\n  undefined4 *ptr;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if ((*(long *)(block_info + 8) == 0) || (*(long *)(block_info + 0x20) == 0)) {\n    success = dcgettext(0,\"debug_start_block_0010be88: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    new_block_info = (undefined4 *)xmalloc(0x30);\n    ptr = new_block_info;\n    for (temp_var_1 = 0xc; temp_var_1 != 0; temp_var_1 = temp_var_1 + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    temp_var_1 = *(long *)(block_info + 0x20);\n    *(undefined8 *)(new_block_info + 6) = block_start_addr;\n    *(undefined8 *)(new_block_info + 8) = 0xffffffffffffffff;\n    *(long *)(new_block_info + 2) = temp_var_1;\n    next_block = *(undefined8 **)(temp_var_1 + 0x10);\n    previous_block = (undefined8 *)(temp_var_1 + 0x10);\n    while (current_block = next_block, current_block != (undefined8 *)0x0) {\n      previous_block = current_block;\n      next_block = (undefined8 *)*current_block;\n    }\n    *previous_block = new_block_info;\n    success = 1;\n    *(undefined4 **)(block_info + 0x20) = new_block_info;\n  }\n  result._8_8_ = unknown_param_2;\n  result._0_8_ = success;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_start_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_00115dc0",
                "FUN_0011378f",
                "FUN_001083b7",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011a110",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "functionParams",
                "param_2": "fieldName",
                "param_3": "paramValue",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "flag",
                "iVar2": "structSize",
                "lVar3": "localVar",
                "__s": "extractedString",
                "sVar4": "paramLength",
                "sVar5": "fieldNameLength",
                "sVar6": "extractedStringLength",
                "__s_00": "concatenatedString",
                "uVar7": "warningMessage",
                "uVar8": "returnValue",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *functionParams,char *fieldName,undefined8 paramValue,ulong fieldSize,int fieldType)\n\n{\n  char flag;\n  int structSize;\n  long localVar;\n  char *extractedString;\n  size_t paramLength;\n  size_t fieldNameLength;\n  size_t extractedStringLength;\n  char *concatenatedString;\n  undefined8 warningMessage;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flag = *(char *)(functionParams[0xc] + 0x1c);\n  structSize = *(int *)(functionParams[0xc] + 0x18);\n  extractedString = (char *)extract_and_free_ptr_00109b2f();\n  if (*(char **)(functionParams[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    paramLength = strlen(*(char **)(functionParams[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    extractedStringLength = strlen(extractedString);\n    concatenatedString = (char *)xmalloc(paramLength + 0x32 + fieldNameLength + extractedStringLength);\n    if (fieldType == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((fieldType != 2) && (flagString = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(structSize * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*functionParams;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message_00119ed0(warningMessage,returnValue,fieldName);\n    }\n    sprintf(concatenatedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(functionParams[0xc] + 0x20),fieldName,flagString,extractedString,\n            paramValue,fieldSize);\n    free(*(void **)(functionParams[0xc] + 0x20));\n    localVar = functionParams[0xc];\n    *(char **)(localVar + 0x20) = concatenatedString;\n    if (flag != '\\0') {\n      *(undefined *)(localVar + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)localVar >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "dcgettext",
                "xmalloc",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "dataPointer",
                "param_2": "paramValue",
                "param_3": "flag",
                "param_4": "option",
                "cVar1": "flagValue",
                "__s": "str",
                "sVar5": "strLen",
                "pcVar6": "newStr",
                "cVar3": "charValue",
                "lVar2": "ptr1",
                "uVar8": "result",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar4": "temp3",
                "lVar7": "ptr2"
            },
            "code": "\nundefined8 processData_0010aa53(long dataPointer,undefined8 paramValue,char flag,int option)\n\n{\n  char flagValue;\n  long ptr1;\n  char charValue;\n  uint temp3;\n  char *str;\n  size_t strLen;\n  char *newStr;\n  long ptr2;\n  undefined8 result;\n  ulong temp1;\n  ulong temp2;\n  \n  flagValue = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  str = (char *)extract_and_free_ptr_00109b2f();\n  strLen = strlen(str);\n  newStr = (char *)xmalloc(strLen + 0x19);\n  *newStr = flag + '0';\n  if (option == 1) {\n    charValue = '1';\n  }\n  else {\n    charValue = '0';\n    if ((option != 2) && (charValue = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  newStr[1] = charValue;\n  sprintf(newStr + 2,\"%ld,%s;\",paramValue);\n  free(str);\n  ptr1 = *(long *)(dataPointer + 0x60);\n  result = 0;\n  if ((ptr1 != 0) && (*(long *)(ptr1 + 0x20) != 0)) {\n    ptr1 = *(long *)(ptr1 + 0x28);\n    temp2 = 0;\n    if (ptr1 != 0) {\n      temp3 = 0;\n      do {\n        temp1 = (ulong)temp3;\n        temp2 = (ulong)temp3;\n        temp3 = temp3 + 1;\n      } while (*(long *)(ptr1 + temp1 * 8) != 0);\n    }\n    ptr2 = xrealloc(ptr1,(ulong)((int)temp2 + 2) << 3);\n    *(char **)(ptr2 + temp2 * 8) = newStr;\n    *(undefined8 *)(ptr2 + (ulong)((int)temp2 + 1) * 8) = 0;\n    ptr1 = *(long *)(dataPointer + 0x60);\n    *(long *)(ptr1 + 0x28) = ptr2;\n    if (flagValue != '\\0') {\n      *(undefined *)(ptr1 + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "process_debug_record_0011173a",
                "param_1": "param",
                "param_2": "record",
                "param_3": "opcode",
                "param_4": "isSymbolTable",
                "param_5": "address",
                "param_6": "data",
                "cVar1": "character",
                "bVar2": "byteValue",
                "__ptr": "ptr",
                "cVar3": "flag",
                "uVar4": "result",
                "iVar5": "index",
                "puVar6": "ptrResult",
                "plVar7": "longResult",
                "pcVar8": "charResult",
                "uVar9": "value",
                "lVar10": "longValue",
                "lVar11": "firstLong",
                "lVar12": "secondLong",
                "lVar13": "thirdLong",
                "uVar14": "firstUnsigned",
                "uVar15": "secondUnsigned",
                "pcVar16": "secondChar",
                "uVar17": "unsignedValue",
                "pplVar18": "ptrPtrResult",
                "dVar19": "doubleValue",
                "local_48": "localString",
                "local_40": "localPtrArray"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined processDebugRecord_0011173a(undefined8 param,long *record,int opcode,int isSymbolTable,ulong address,\n                      char *data)\n\n{\n  char character;\n  byte byteValue;\n  void *ptr;\n  char flag;\n  undefined result;\n  int index;\n  undefined8 *ptrResult;\n  long *longResult;\n  char *charResult;\n  undefined8 value;\n  long longValue;\n  long firstLong;\n  long secondLong;\n  long **ppthirdLong;\n  ulong firstUnsigned;\n  ulong secondUnsigned;\n  char *secondChar;\n  uint unsignedValue;\n  long **ptrPtrResult;\n  double doubleValue;\n  char *localString;\n  long **localPtrArray [2];\n  \n  if (record[4] != 0) {\n    if (((opcode == 100) && (*data != '\\0')) && (record[5] == address)) goto LAB_00111a06;\n    flag = initialize_debug_info_0010bbd3(param);\n    if (flag == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)record + 0x44) = 0;\n    *(undefined4 *)(record + 8) = 0;\n    record[9] = record[4];\n    if (*(char *)(record + 1) == '\\0') {\n      record[6] = record[5];\n    }\n    *(undefined4 *)(record + 0x10) = 1;\n    ptrResult = (undefined8 *)xmalloc(8);\n    record[0x11] = (long)ptrResult;\n    *ptrResult = 0;\n    record[4] = 0;\n  }\n  strlen(data);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    result = source_debugger_00108f08(param,data);\n    return result;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      index = strcmp(data,\"gcc2_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(record + 8) = 2;\n        return 1;\n      }\n      index = strcmp(data,\"gcc_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(record + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)record + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*data == '\\0') {\n          if (*(char *)(record + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(record + 1) != '\\0') {\n            address = address + record[7];\n          }\n          flag = cleanup_records_0010c1c6(param,record);\n          if (flag != '\\0') {\n            flag = debug_end_function_check_0010be1a(param,address);\n            if (flag != '\\0') {\n              *(undefined *)(record + 0xc) = 0;\n              record[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(record + 0xc) != '\\0') &&\n           ((address < (ulong)record[0xd] || (record[0xd] == 0xffffffffffffffff)))) {\n          record[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(record + 0xc) != '\\0') {\n          firstUnsigned = address;\n          if (((*data != '\\0') && (secondUnsigned = record[0xd], secondUnsigned != 0xffffffffffffffff)) &&\n             (firstUnsigned = secondUnsigned, address < secondUnsigned)) {\n            firstUnsigned = address;\n          }\n          flag = cleanup_records_0010c1c6(param,record);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = debug_end_function_check_0010be1a(param,firstUnsigned);\n          if (flag == '\\0') {\n            return 0;\n          }\n          *(undefined *)(record + 0xc) = 0;\n          record[0xd] = -1;\n        }\n        if (*data == '\\0') {\n          return 1;\n        }\n        ptr = (void *)record[4];\n        if (ptr == (void *)0x0) {\n          secondLong = xstrdup(data);\n          record[4] = secondLong;\n        }\n        else {\n          if (*data == '/') {\n            secondLong = xstrdup(data);\n          }\n          else {\n            secondLong = concat(ptr,data,0);\n          }\n          record[4] = secondLong;\n          free(ptr);\n        }\n        record[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          secondLong = 0;\n          if (*(char *)(record + 0xc) != '\\0') {\n            secondLong = record[7];\n          }\n          result = record_debug_line_0010bf86(param,(long)isSymbolTable,secondLong + address);\n          return result;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        longResult = (long *)xmalloc();\n        index = *(int *)(record + 0x10);\n        longValue = record[10];\n        firstLong = record[0xb];\n        longResult[5] = 0;\n        secondLong = record[0x11];\n        *(int *)(longResult + 4) = index;\n        unsignedValue = index + 1;\n        *(uint *)(record + 0x10) = unsignedValue;\n        *longResult = firstLong;\n        longResult[1] = longValue;\n        longResult[2] = (long)data;\n        longResult[3] = address;\n        record[10] = (long)longResult;\n        record[0xb] = (long)longResult;\n        secondLong = xrealloc(secondLong,(ulong)unsignedValue << 3);\n        unsignedValue = *(uint *)(longResult + 4);\n        record[0x11] = secondLong;\n        *(undefined8 *)(secondLong + (ulong)unsignedValue * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charResult = strchr(data,0x3a);\n    if ((charResult != (char *)0x0) && ((charResult[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(record + 0xc) != '\\0') {\n        firstUnsigned = record[0xd];\n        secondUnsigned = address;\n        if ((firstUnsigned != 0xffffffffffffffff) && (secondUnsigned = firstUnsigned, address < firstUnsigned)) {\n          secondUnsigned = address;\n        }\n        flag = cleanup_records_0010c1c6(param,record);\n        if (flag == '\\0') {\n          return 0;\n        }\n        flag = debug_end_function_check_0010be1a(param,secondUnsigned);\n        if (flag == '\\0') {\n          return 0;\n        }\n        record[0xd] = -1;\n      }\n      if (*(char *)(record + 1) != '\\0') {\n        record[7] = address;\n      }\n      *(undefined *)(record + 0xc) = 1;\n    }\n    localString = strchr(data,0x3a);\n    if (localString == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localString[1] == ':') goto code_r0x00111cc7;\n    if (*data == '$') {\n      flag = data[1];\n      secondChar = \"eh_throw\";\n      if (flag != 'e') {\n        if (flag < 'f') {\n          if ((flag != 'X') && (flag != '_')) {\nLAB_00111d1a:\n            value = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_message_00108fe8(data,value);\n          }\n        }\n        else {\n          secondChar = \"this\";\n          if (flag == 't') goto LAB_00111d62;\n          if (flag != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      secondChar = (char *)0x0;\n      if ((data != localString) && ((*data != ' ' || (localString != data + 1)))) {\n        secondChar = (char *)copy_and_null_terminate_00109a0b(data,(int)localString - (int)data);\n      }\n    }\nLAB_00111d62:\n    byteValue = localString[1];\n    charResult = localString + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteValue * 2) >> 2) & 1 |\n        (byteValue == 0x2d || byteValue == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 4;\n      goto LAB_001123e8;\n    }\n    if (byteValue == 0) goto switchD_00111de5_caseD_44;\n    charResult = localString + 2;\n    flag = localString[1];\n    switch(flag) {\n    case 'C':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      charResult = \"debug_record_label: not implemented\";\n      if (secondLong == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      flag = debug_record_function_0010bc80(param,secondChar,secondLong,flag == 'F',address);\n      if (flag != '\\0') {\n        do {\n          if (*localString != ';') {\n            return 1;\n          }\n          localString = localString + 1;\n          secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n        } while (secondLong != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      if (secondChar == (char *)0x0) goto LAB_0011208f;\n      longValue = record[3];\n      longResult = (long *)record[2];\n      flag = *(char *)(*(long *)(*record + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localString = charResult;\n        do {\n          if (*localString != ';') {\n            return 1;\n          }\n          localString = localString + 1;\n          secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n        } while (secondLong != 0);\n        return 0;\n      }\n    case 'R':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 2;\n      break;\n    case 'S':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 2;\n      goto LAB_001121c4;\n    case 'T':\n      flag = localString[2];\n      if (flag == 't') {\n        charResult = localString + 3;\n      }\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,secondChar,&localString,localPtrArray);\n      if (secondLong == 0) {\n        return 0;\n      }\n      if (secondChar == (char *)0x0) {\n        return 1;\n      }\n      character = *(char *)(record + 0x35);\n      longResult = (long *)validate_debug_tag_type_0010c6be(param,secondChar,secondLong);\n      if (longResult == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrArray[0] != (long **)0x0) {\n        *localPtrArray[0] = longResult;\n      }\n      if (character != '\\0') goto LAB_001122f0;\n      ppthirdLong = (long **)(record + 0x34);\n      ptrPtrResult = (long **)record[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charResult = localString + 3;\n      if (((localString[2] != '\\0') && (charResult = localString + 4, localString[3] == 'n')) &&\n         (charResult = localString + 5, secondChar = localString + 4, localString = charResult, *secondChar == '0')) {\n        for (; charResult = localString, *localString != '\\0'; localString = localString + 1) {\n          if (*localString == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 4;\n      break;\n    case 'c':\n      if (localString[2] == '=') {\n        charResult = localString + 4;\n        flag = localString[3];\n        localString = charResult;\n        if (flag == 'i') {\n          secondLong = strtol(charResult,(char **)0x0,10);\n          if (secondChar == (char *)0x0) {\n            return 0;\n          }\n          longValue = initialize_data_structure_00112996(param,secondChar,4);\n          if (longValue != 0) {\n            *(long *)(longValue + 0x20) = (long)(int)secondLong;\n            return 1;\n          }\n          return 0;\n        }\n        if (flag == 'r') {\n          doubleValue = strtod(charResult,(char **)0x0);\n          if (secondChar == (char *)0x0) {\n            return 0;\n          }\n          secondLong = initialize_data_structure_00112996(param,secondChar,5);\n          if (secondLong != 0) {\n            *(double *)(secondLong + 0x20) = doubleValue;\n            return 1;\n          }\n          return 0;\n        }\n        if (flag == 'e') {\n          secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n          if (secondLong == 0) {\n            return 0;\n          }\n          charResult = localString;\n          if (*localString == ',') {\n            longValue = strtol(localString,(char **)0x0,10);\n            if (secondChar == (char *)0x0) {\n              return 0;\n            }\n            firstLong = initialize_data_structure_00112996(param,secondChar,6);\n            if (firstLong != 0) {\n              longResult = (long *)xmalloc(0x10);\n              *longResult = secondLong;\n              longResult[1] = (long)(int)longValue;\n              *(long **)(firstLong + 0x20) = longResult;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localString[2] == 'F') {\n        localString = localString + 3;\n        secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n        if (secondLong == 0) {\n          return 0;\n        }\n        value = initialize_function_00113ce0(secondLong,0,0);\n        secondLong = allocate_memory_if_needed_00113d3a(value);\n      }\n      else {\n        localString = charResult;\n        secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      }\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 1;\n      break;\n    case 'r':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 5;\nLAB_001123e8:\n      flag = update_record_0010c139(param,record,secondChar,secondLong,value,address);\n      goto joined_r0x001123f8;\n    case 't':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,secondChar,&localString,localPtrArray);\n      if (secondLong == 0) {\n        return 0;\n      }\n      if (secondChar == (char *)0x0) {\n        return 1;\n      }\n      longResult = (long *)process_file_0010c218(param,secondChar,secondLong);\n      if (longResult == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrArray[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrArray[0] = longResult;\n      return 1;\n    case 'v':\n      localString = charResult;\n      secondLong = FUNC_0010ee3f(param,record,0,&localString,0);\n      if (secondLong == 0) {\n        return 0;\n      }\n      value = 3;\n    }\n    flag = record_parameter_0010bd62(param,secondChar,secondLong,value,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)record + 0x44) != '\\0') && (isSymbolTable == 1)) {\n      return 1;\n    }\n    flag = cleanup_records_0010c1c6(param,record);\n    if (flag == '\\0') {\n      return 0;\n    }\n    flag = close_debug_block_0010bf20(param,record[7] + record[6] + address);\n    if (flag == '\\0') {\n      return 0;\n    }\n    record = record + 0xe;\n    *(int *)record = *(int *)record + -1;\n    charResult = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)record) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        charResult = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charResult = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      value = dcgettext(0,charResult,5);\n      fprintf(_stderr,\"%s\\n\",value);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        index = *(int *)(record + 0x10);\n        *(uint *)(record + 0x10) = index + 1U;\n        secondLong = xrealloc(record[0x11],(ulong)(index + 1U) << 3);\n        ptrResult = (undefined8 *)record[0xb];\n        record[0x11] = secondLong;\n        while( true ) {\n          if (ptrResult == (undefined8 *)0x0) {\n            value = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_message_00108fe8(data,value);\n            *(undefined8 *)(record[0x11] + (ulong)(*(int *)(record + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptrResult[3]) && (index = strcmp((char *)ptrResult[2],data), index == 0))\n          break;\n          ptrResult = (undefined8 *)*ptrResult;\n        }\n        *(undefined8 *)(secondLong + (ulong)(*(int *)(record + 0x10) - 1) * 8) = ptrResult[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        secondLong = record[10];\n        if (secondLong != 0) {\n          longValue = *(long *)(secondLong + 8);\n          unsignedValue = *(uint *)(secondLong + 0x20);\n          record[10] = longValue;\n          if ((unsignedValue < *(uint *)(record + 0x10)) &&\n             (*(undefined8 *)(secondLong + 0x28) = *(undefined8 *)(record[0x11] + (ulong)unsignedValue * 8),\n             longValue != 0)) {\n            data = *(char **)(longValue + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        data = (char *)record[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)record + 0x44) != '\\0') && (isSymbolTable == 1)) {\n      return 1;\n    }\n    if (*(char *)(record + 0xc) != '\\0') {\n      flag = debug_start_block_0010be88(param,record[7] + record[6] + address);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = cleanup_records_0010c1c6(param,record);\n      if (flag != '\\0') {\n        *(int *)(record + 0xe) = *(int *)(record + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charResult = \"N_LBRAC not within function\\n\";\n  }\n  charResult = (char *)dcgettext(0,charResult,5);\n  fprintf(_stderr,charResult);\n  return 0;\ncode_r0x00111cc7:\n  localString = localString + 2;\n  localString = strchr(localString,0x3a);\n  if (localString == (char *)0x0) {\n    charResult = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localString = charResult;\n    print_bad_stab_error_message_00108fb9(data);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (ptrPtrResult == (long **)0x0) {\nLAB_001122f0:\n    if (flag != 't') {\n      return 1;\n    }\n    longResult = (long *)process_file_0010c218(param,secondChar,longResult);\n    if (longResult != (long *)0x0) {\n      if (localPtrArray[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrArray[0] = longResult;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)ptrPtrResult[1] == *secondChar) &&\n     (index = strcmp((char *)ptrPtrResult[1],secondChar), index == 0)) {\n    ptrPtrResult[3] = longResult;\n    *ppthirdLong = *ptrPtrResult;\n    goto LAB_001122f0;\n  }\n  ppthirdLong = ptrPtrResult;\n  ptrPtrResult = (long **)*ptrPtrResult;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longValue < 1) {\nLAB_0011208f:\n    value = 1;\nLAB_001121c4:\n    flag = record_variable_debug_0010c05d(param,secondChar,secondLong,value,address);\njoined_r0x001123f8:\n    if (flag != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charResult = *(char **)(*longResult + 8);\n  if ((flag != '\\0') && (flag == *charResult)) {\n    charResult = charResult + 1;\n  }\n  if ((*charResult == *secondChar) && (index = strcmp(charResult,secondChar), index == 0)) {\n    address = *(long *)(*longResult + 0x10) + *(long *)(*(long *)(*longResult + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longValue = longValue + -1;\n  longResult = longResult + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strtod",
                "FUN_0010be88",
                "FUN_00108fe8",
                "FUN_0010bbd3",
                "FUN_0010bf86",
                "FUN_00113d3a",
                "xmalloc",
                "FUN_00112996",
                "FUN_0010bf20",
                "xrealloc",
                "strchr",
                "FUN_0010c1c6",
                "concat",
                "FUN_0010c05d",
                "strcmp",
                "FUN_00108f08",
                "strlen",
                "fprintf",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_0010c139",
                "strtol",
                "FUN_00109a0b",
                "xstrdup",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "free",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010bc80"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_record_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_section_options_00115dc0",
                "param_1": "sectionHandle",
                "param_2": "sectionOptions",
                "param_3": "sectionDataSize",
                "cVar1": "sectionOptionsStatus",
                "iVar2": "bfdErrorStatus",
                "uVar3": "relocUpperBound",
                "lVar4": "dataProcessingResult",
                "puVar5": "relocationTable",
                "uVar6": "relocationCount",
                "UNRECOVERED_JUMPTABLE": "jumptableFunction",
                "puVar7": "newRelocationTable",
                "puVar8": "updatedRelocationTable",
                "uVar9": "loopCounter",
                "uStack_38": "errorMessage"
            },
            "code": "\nvoid processSectionOptions_00115dc0(undefined8 sectionHandle,undefined8 *sectionOptions,long sectionDataSize)\n\n{\n  char sectionOptionsStatus;\n  int bfdErrorStatus;\n  undefined8 relocUpperBound;\n  long dataProcessingResult;\n  undefined8 *relocationTable;\n  ulong relocationCount;\n  code *jumptableFunction;\n  undefined8 *newRelocationTable;\n  undefined8 *updatedRelocationTable;\n  ulong loopCounter;\n  undefined8 errorMessage;\n  \n  sectionOptionsStatus = check_section_options_00115f50(sectionHandle,sectionOptions,0);\n  if (sectionOptionsStatus != '\\0') {\n    return;\n  }\n  relocUpperBound = sectionOptions[0xc];\n  if ((((*(byte *)(sectionDataSize + 0x48) & 7) != 3) && (DAT_00127a2c != 6)) &&\n     (dataProcessingResult = process_data_00114190(*sectionOptions,0,0x100), dataProcessingResult == 0)) {\n    dataProcessingResult = bfd_get_reloc_upper_bound(sectionHandle,sectionOptions);\n    if (dataProcessingResult < 0) {\n      if ((dataProcessingResult != -1) || (bfdErrorStatus = bfd_get_error(), bfdErrorStatus != 5)) {\n        DAT_00127a20 = 1;\n        relocUpperBound = 0;\nLAB_00108315:\n        print_error_message_001126c0(0,sectionHandle,sectionOptions,relocUpperBound,errorMessage);\n        return;\n      }\n    }\n    else if (dataProcessingResult != 0) {\n      relocationTable = (undefined8 *)sectionOptions[0xe];\n      if (relocationTable == (undefined8 *)0x0) {\n        relocationTable = (undefined8 *)bfd_alloc(sectionDataSize);\n        if (relocationTable == (undefined8 *)0x0) {\n          print_error_message_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocationCount = bfd_canonicalize_reloc(sectionHandle,sectionOptions,relocationTable,DAT_001278b0);\n        if ((long)relocationCount < 0) {\n          DAT_00127a20 = 1;\n          relocUpperBound = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocationCount = (ulong)*(uint *)(sectionOptions + 0xf);\n      }\n      if (DAT_00127a2c == 7) {\n        newRelocationTable = relocationTable;\n        for (loopCounter = 0; loopCounter != relocationCount; loopCounter = loopCounter + 1) {\n          updatedRelocationTable = newRelocationTable;\n          if (((*(long **)relocationTable[loopCounter] != (long *)0x0) &&\n              (dataProcessingResult = **(long **)relocationTable[loopCounter], dataProcessingResult != 0)) &&\n             (sectionOptionsStatus = check_pattern_match_00115d70(*(undefined8 *)(dataProcessingResult + 8),DAT_00127a08), sectionOptionsStatus != '\\0')) {\n            updatedRelocationTable = newRelocationTable + 1;\n            *newRelocationTable = relocationTable[loopCounter];\n          }\n          newRelocationTable = updatedRelocationTable;\n        }\n        *newRelocationTable = 0;\n        relocationCount = (long)newRelocationTable - (long)relocationTable >> 3;\n      }\n      jumptableFunction = *(code **)(*(long *)(sectionDataSize + 8) + 0x288);\n      if (relocationCount == 0) {\n        relocationCount = 0;\n        relocationTable = (undefined8 *)0x0;\n      }\n      else {\n        relocationCount = relocationCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocationCount = 0;\n  relocationTable = (undefined8 *)0x0;\n  jumptableFunction = *(code **)(*(long *)(sectionDataSize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptableFunction)(sectionDataSize,relocUpperBound,relocationTable,relocationCount);\n  return;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "FUN_001082df",
                "bfd_alloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00114190",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_options_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_extract_items_0010d559",
                "bVar1": "first_byte",
                "pbVar2": "current_item",
                "cVar3": "parse_result",
                "uVar4": "number_of_digits",
                "iVar5": "string_comparison_result",
                "ppcVar6": "local_array",
                "sVar7": "string_length",
                "lVar8": "matching_item",
                "uVar12": "item_type",
                "local_64": "remaining_items",
                "local_40": "dependency_array"
            },
            "code": "\nundefined8 parse_and_extract_items_0010d559(undefined8 *param_1,byte **param_2,long *param_3)\n\n{\n  byte first_byte;\n  byte *current_item;\n  char parse_result;\n  uint number_of_digits;\n  int string_comparison_result;\n  char **local_array;\n  size_t string_length;\n  long matching_item;\n  long *plVar9;\n  char *pcVar10;\n  char *__s1;\n  void *__ptr;\n  byte *pfirst_byte1;\n  undefined8 item_type;\n  byte *__nptr;\n  int remaining_items;\n  char *dependency_array [2];\n  \n  current_item = *param_2;\n  first_byte = current_item[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    remaining_items = (char)first_byte + -0x30;\n    if (current_item[2] == 0x5f) {\n      *param_2 = current_item + 1;\n    }\n    pfirst_byte1 = *param_2 + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_item[2] * 2] & 4) == 0)) ||\n       (current_item[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_item + 2;\n    matching_item = strtol((char *)__nptr,(char **)0x0,10);\n    remaining_items = (int)matching_item;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    pfirst_byte1 = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *param_2 = pfirst_byte1;\n  local_array = (char **)0x0;\n  if (param_3 != (long *)0x0) {\n    local_array = dependency_array;\n  }\n  matching_item = 0;\n  while( true ) {\n    while( true ) {\n      remaining_items = remaining_items + -1;\n      if (remaining_items == -1) {\n        if (param_3 != (long *)0x0) {\n          *param_3 = matching_item;\n        }\n        return 1;\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n      }\n      if (**param_2 != 0x74) break;\n      parse_result = parse_and_extract_string_0010d21c(param_1,param_2,local_array);\n      pcVar10 = dependency_array[0];\n      if (parse_result == '\\0') {\n        return 0;\n      }\n      if (param_3 != (long *)0x0) {\n        string_length = strlen(dependency_array[0]);\n        matching_item = find_matching_item_0010afd5(*param_1,param_1[1],pcVar10,string_length & 0xffffffff,9);\n        free(pcVar10);\n        if (matching_item == 0) {\n          return 0;\n        }\n      }\n    }\n    number_of_digits = parse_digits_00108e76(param_2);\n    string_length = strlen((char *)*param_2);\n    if (string_length < number_of_digits) break;\n    if (param_3 != (long *)0x0) {\n      if ((matching_item != 0) && (plVar9 = (long *)find_circular_dependency_00113b1e(matching_item), plVar9 != (long *)0x0)) {\n        pcVar10 = (char *)copy_and_null_terminate_00109a0b(*param_2,number_of_digits);\n        for (; matching_item = *plVar9, matching_item != 0; plVar9 = plVar9 + 1) {\n          matching_item = *(long *)(matching_item + 8);\n          if (matching_item == 0) {\n            free(pcVar10);\n            return 0;\n          }\n          __s1 = (char *)get_return_value_001129f4(matching_item);\n          if ((__s1 != (char *)0x0) && (string_comparison_result = strcmp(__s1,pcVar10), string_comparison_result == 0)) break;\n        }\n        free(pcVar10);\n        if (matching_item != 0) goto LAB_0010d7ad;\n      }\n      item_type = 9;\n      if (remaining_items == 0) {\n        __ptr = (void *)copy_and_null_terminate_00109a0b(*param_2,number_of_digits);\n        matching_item = find_named_type_0010914e(*param_1,__ptr);\n        free(__ptr);\n        if (matching_item != 0) goto LAB_0010d7ad;\n        item_type = 0;\n      }\n      matching_item = find_matching_item_0010afd5(*param_1,param_1[1],*param_2,number_of_digits,item_type);\n      if (matching_item == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *param_2 = *param_2 + number_of_digits;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(current_item);\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00108e76",
                "strlen",
                "FUN_00113b1e",
                "free",
                "FUN_001129f4",
                "FUN_0010914e",
                "FUN_0010afd5",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_items_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_001275e0);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "vfprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119dd0",
                "FUN_00119ed0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_00108466",
                "param_7": "data_to_free"
            },
            "code": "\nvoid cleanup_and_print_error_00108466(void)\n\n{\n  void *data_to_free;\n  \n  DAT_00127a20 = 1;\n  print_error_message_001126c0(0);\n  free(data_to_free);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_digits_00108e76",
                "param_1": "input",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint parseDigits_00108e76(byte **input)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **input;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_digits_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "initialize_hash_0010bb52",
                "param_1": "hashPointer",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "newHashPointer"
            },
            "code": "\nlong initializeHash_0010bb52(long hashPointer,undefined8 param2,undefined8 param3)\n\n{\n  long newHashPointer;\n  \n  if (((hashPointer != 0) || (hashPointer = bfd_hash_allocate(param2,0x30), hashPointer != 0)) &&\n     (newHashPointer = bfd_hash_newfunc(hashPointer,param2,param3), newHashPointer != 0)) {\n    *(undefined8 *)(newHashPointer + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(newHashPointer + 0x18) = 0;\n    *(undefined4 *)(newHashPointer + 0x28) = 0;\n    return newHashPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "update_data_and_process_thunk_0010e439",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "process_string_data_0010e2f0": "process_string_data"
            },
            "code": "\nvoid update_data_and_process_thunk_0010e439(long data_ptr,undefined8 new_value)\n\n{\n  *(undefined8 *)(data_ptr + 0x210) = new_value;\n  process_string_data(data_ptr,0x84,0,0,new_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_data_and_process_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "param_1": "path",
                "param_2": "input_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_stat"
            },
            "code": "\nchar * check_directory_permission_0011283f(char *path,char *input_directory)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((input_directory == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        input_directory = path;\n      }\n    }\n  }\n  return input_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permission_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_set_errno_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer",
                "iVar1": "previousErrno"
            },
            "code": "\nundefined8 closeFileAndSetErrno_00108237(void)\n\n{\n  int previousErrno;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  previousErrno = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = previousErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_set_errno_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_0011a170",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "debug_info",
                "param_2": "filename",
                "param_3": "data_size",
                "param_4": "param_value",
                "uVar1": "result",
                "plVar2": "data",
                "puVar3": "data_structure",
                "lVar4": "initialize_result",
                "pcVar6": "debug_filename",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long debug_info,char *filename,long data_size,uint param_value,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 result;\n  long *data;\n  undefined4 *data_structure;\n  long initialize_result;\n  undefined4 *puVar5;\n  char *debug_filename;\n  byte bVar7;\n  undefined return_value [16];\n  \n  bVar7 = 0;\n  debug_filename = \"\";\n  if (filename != (char *)0x0) {\n    debug_filename = filename;\n  }\n  if (data_size != 0) {\n    if (*(long *)(debug_info + 8) == 0) {\n      result = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      data = (long *)xmalloc(0x18);\n      *data = data_size;\n      *(undefined (*) [16])(data + 1) = ZEXT816(0);\n      data_structure = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_info + 0x18) = data;\n      data[2] = (long)data_structure;\n      puVar5 = data_structure;\n      for (initialize_result = 0xc; initialize_result != 0; initialize_result = initialize_result + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + (ulong)bVar7 * -2 + 1;\n      }\n      *(undefined4 **)(debug_info + 0x20) = data_structure;\n      initialize_result = *(long *)(debug_info + 0x10);\n      *(undefined8 *)(data_structure + 6) = param_5;\n      *(undefined8 *)(data_structure + 8) = 0xffffffffffffffff;\n      initialize_result = initialize_data_structure_00112925(initialize_result + 0x10,debug_filename,3,(param_value & 0xff) + 1);\n      if (initialize_result != 0) {\n        *(long **)(initialize_result + 0x20) = data;\n        result = CONCAT71((int7)((ulong)initialize_result >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  result = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = get_modified_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_modified_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = decompiled_function_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_record_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = validate_and_initialize_memory_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = create_initialized_buffer_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = process_debug_record_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = validate_and_initialize_memory_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = close_debug_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_check_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278b0 + uStack0000000000000010;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_and_copy_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_section_options_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_and_copy_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = reverse_and_improve_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)parse_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlash",
                "lVar2": "length",
                "lVar3": "prefixLength",
                "lVar4": "suffixLength",
                "pcVar5": "output",
                "bVar6": "foundSlash"
            },
            "code": "\nvoid allocatePath_00114cf0(char *path)\n\n{\n  char *lastSlash;\n  long length;\n  long prefixLength;\n  long suffixLength;\n  char *output;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    prefixLength = 0;\n  }\n  else {\n    suffixLength = (long)lastSlash - (long)path;\n    lastSlash = (char *)xmalloc(suffixLength + 0xb);\n    prefixLength = suffixLength + 1;\n    output = lastSlash;\n    for (length = suffixLength; length != 0; length = length + -1) {\n      *output = *path;\n      path = path + (ulong)foundSlash * -2 + 1;\n      output = output + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlash[suffixLength] = '/';\n  }\n  *(undefined8 *)(lastSlash + prefixLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + prefixLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_0011a0e0",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "allocate_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_data_0010a181",
                "param_1": "data",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "cVar1": "charFlag",
                "iVar2": "intValue",
                "iVar3": "result",
                "uVar4": "returnValue",
                "__s": "str1",
                "__s_00": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "finalString",
                "local_41": "tempFlag",
                "lVar7": "counter"
            },
            "code": "\nundefined4 generateData_0010a181(long data,long start,long end,byte flag)\n\n{\n  char charFlag;\n  int intValue;\n  int result;\n  undefined4 returnValue;\n  char *str1;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *finalString;\n  long counter;\n  byte tempFlag;\n  \n  charFlag = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_ptr_00109b2f();\n  tempFlag = 1;\n  if (charFlag == '\\0') {\n    tempFlag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  }\n  intValue = *(int *)(*(long *)(data + 0x60) + 0x18);\n  str2 = (char *)extract_and_free_ptr_00109b2f(data);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  finalString = (char *)xmalloc(len1 + 100 + len2);\n  if (flag == 0) {\n    *finalString = '\\0';\n    counter = 0;\n    tempFlag = tempFlag & 1;\n  }\n  else {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(finalString,\"%ld=@S;\",counter);\n    tempFlag = flag;\n  }\n  len1 = strlen(finalString);\n  sprintf(finalString + len1,\"ar%s;%ld;%ld;%s\",str1,start,end,str2);\n  free(str1);\n  free(str2);\n  result = 0;\n  if (start <= end) {\n    result = intValue * (((int)end - (int)start) + 1);\n  }\n  returnValue = initialize_data_structure_00109b52(data,finalString,counter,tempFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(finalString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_arch_info_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "i",
                "iVar3": "archIndex",
                "pcVar4": "tempDir",
                "sVar5": "length",
                "pcVar6": "tempFilePath",
                "uVar7": "result",
                "piVar8": "error",
                "iVar9": "targetIndex",
                "lVar10": "tempFilePathLength",
                "lVar11": "index",
                "ppcVar12": "targetData",
                "uVar13": "maxArchLength",
                "uVar14": "stringLength",
                "local_70": "archLength"
            },
            "code": "\n\n\nvoid printArchInfo_001199d0(void)\n\n{\n  int columnWidth;\n  int i;\n  int archIndex;\n  char *tempDir;\n  size_t length;\n  char *tempFilePath;\n  undefined8 result;\n  int *error;\n  int targetIndex;\n  long tempFilePathLength;\n  long index;\n  char **targetData;\n  uint maxArchLength;\n  ulong stringLength;\n  int archLength;\n  \n  tempDir = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(tempDir,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278c0 == (char *)0x0) {\n    tempDir = getenv(\"TMPDIR\");\n    result = check_directory_permission_0011283f(tempDir,0);\n    tempDir = getenv(\"TMP\");\n    result = check_directory_permission_0011283f(tempDir,result);\n    tempDir = getenv(\"TEMP\");\n    result = check_directory_permission_0011283f(tempDir,result);\n    result = check_directory_permission_0011283f(&DAT_0011b39a,result);\n    result = check_directory_permission_0011283f(\"/var/tmp\",result);\n    tempDir = (char *)check_directory_permission_0011283f(&DAT_00120324,result);\n    if (tempDir == (char *)0x0) {\n      tempDir = \".\";\n    }\n    length = strlen(tempDir);\n    tempFilePath = (char *)xmalloc((int)length + 2);\n    DAT_001278c0 = strcpy(tempFilePath,tempDir);\n    DAT_001278c0[length & 0xffffffff] = '/';\n    DAT_001278c0[(int)length + 1] = '\\0';\n  }\n  tempDir = DAT_001278c0;\n  length = strlen(DAT_001278c0);\n  tempFilePathLength = (long)(int)length;\n  tempFilePath = (char *)xmalloc(tempFilePathLength + 9);\n  strcpy(tempFilePath,tempDir);\n  *(undefined2 *)(tempFilePath + tempFilePathLength) = 0x6363;\n  *(undefined4 *)(tempFilePath + tempFilePathLength + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + tempFilePathLength + 2) + 3) = 0x585858;\n  tempFilePath[tempFilePathLength + 8] = '\\0';\n  i = mkstemps(tempFilePath,0);\n  if (i == -1) {\n    error = __errno_location();\n    tempFilePath = strerror(*error);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",tempDir,tempFilePath);\n                    \n    abort();\n  }\n  i = close(i);\n  if (i != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  i = 2;\n  bfd_iterate_over_targets(convert_and_print_header_data_00119f70);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  archLength = 0;\n  do {\n    tempDir = (char *)bfd_printable_arch_mach(i);\n    length = strlen(tempDir);\n    if ((int)maxArchLength < (int)(uint)length) {\n      maxArchLength = (uint)length;\n    }\n    i = i + 1;\n  } while (i != 0x57);\n  tempDir = getenv(\"COLUMNS\");\n  i = archLength;\n  if (tempDir != (char *)0x0) {\n    tempFilePathLength = strtol(tempDir,(char **)0x0,10);\n    columnWidth = (int)tempFilePathLength;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    archLength = i;\n    if (-1 < archLength) {\n      return;\n    }\n    index = (long)archLength;\n    targetIndex = (columnWidth - maxArchLength) + -1;\n    tempFilePathLength = index;\n    do {\n      i = (int)tempFilePathLength;\n      if (-1 < i) break;\n      length = strlen(*(char **)(tempFilePathLength * 0x60));\n      tempFilePathLength = tempFilePathLength + 1;\n      targetIndex = (targetIndex - (int)length) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (targetData = (char **)(index * 0x60);\n        ((ulong)(uint)(i - archLength) + index) * 0x60 - (long)targetData != 0;\n        targetData = targetData + 0xc) {\n      printf(\"%s \",*targetData);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      tempDir = (char *)bfd_printable_arch_mach(targetIndex,0);\n      archIndex = strcmp(tempDir,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        result = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchLength,result);\n        targetData = (char **)(index * 0x60);\n        archIndex = archLength;\n        while (i != archIndex) {\n          if (*(char *)((long)targetData + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            length = strlen(*targetData);\n            for (stringLength = length & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*targetData,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (i != archIndex) {\n            putc(0x20,_stdout);\n          }\n          targetData = targetData + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "close",
                "abort",
                "getenv",
                "strlen",
                "fprintf",
                "bfd_printable_arch_mach",
                "xmalloc",
                "dcgettext",
                "FUN_00104943",
                "FUN_00119f70",
                "__errno_location",
                "unlink",
                "FUN_0011283f",
                "free",
                "strerror",
                "mkstemps",
                "bfd_iterate_over_targets",
                "strcpy",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_arch_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  parse_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_and_extract_string_0010d21c",
                "param_1": "param_ptr",
                "param_2": "byte_array_ptr",
                "param_3": "output_ptr",
                "bVar1": "first_byte",
                "pbVar2": "current_byte_ptr",
                "bVar3": "temp_byte",
                "cVar4": "temp_char",
                "bVar5": "result_byte",
                "uVar6": "result",
                "iVar7": "temp_integer",
                "uVar8": "temp_unsigned_integer",
                "sVar9": "string_length",
                "pbVar10": "temp_byte_ptr",
                "__ptr": "temp_ptr",
                "__ptr_00": "temp_ptr_2",
                "__haystack": "temp_haystack",
                "pcVar11": "temp_char_ptr_1",
                "uVar12": "temp_unsigned_var",
                "pcVar13": "temp_char_ptr_2",
                "bVar14": "temp_byte_2",
                "pcVar15": "temp_char_ptr_3",
                "bVar16": "temp_byte_3",
                "bVar17": "temp_byte_4",
                "bVar18": "temp_byte_5",
                "bVar19": "temp_byte_6",
                "uVar20": "counter",
                "uVar21": "temp_unsigned_long",
                "local_3c": "local_array"
            },
            "code": "\nundefined4 parseAndExtractString_0010d21c(undefined8 param_ptr,byte **byte_array_ptr,undefined8 *output_ptr)\n\n{\n  byte first_byte;\n  byte *current_byte_ptr;\n  byte temp_byte;\n  char temp_char;\n  byte result_byte;\n  undefined4 result;\n  int temp_integer;\n  uint temp_unsigned_integer;\n  size_t string_length;\n  byte *temp_byte_ptr;\n  void *temp_ptr;\n  void *temp_ptr_2;\n  char *temp_haystack;\n  char *temp_char_ptr_1;\n  undefined8 temp_unsigned_var;\n  char *temp_char_ptr_2;\n  byte temp_byte_2;\n  char *temp_char_ptr_3;\n  byte temp_byte_3;\n  byte temp_byte_4;\n  byte temp_byte_5;\n  byte temp_byte_6;\n  uint counter;\n  ulong temp_unsigned_long;\n  uint local_array [3];\n  \n  current_byte_ptr = *byte_array_ptr;\n  *byte_array_ptr = current_byte_ptr + 1;\n  local_array[0] = parse_digits_00108e76(byte_array_ptr);\n  temp_unsigned_long = (ulong)local_array[0];\n  if (local_array[0] != 0) {\n    temp_byte_ptr = *byte_array_ptr;\n    string_length = strlen((char *)temp_byte_ptr);\n    if (temp_unsigned_long <= string_length) {\n      *byte_array_ptr = temp_byte_ptr + temp_unsigned_long;\n      counter = 0;\n      result = extract_and_parse_number_00108ea1(byte_array_ptr,local_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (local_array[0] <= counter) {\n          if (output_ptr == (undefined8 *)0x0) {\n            return result;\n          }\n          temp_ptr = (void *)copy_and_null_terminate_00109a0b(current_byte_ptr,(int)*byte_array_ptr - (int)current_byte_ptr);\n          temp_ptr_2 = (void *)concat(\"NoSuchStrinG__\",temp_ptr,0);\n          free(temp_ptr);\n          temp_haystack = (char *)cplus_demangle(temp_ptr_2,2);\n          free(temp_ptr_2);\n          if ((temp_haystack != (char *)0x0) &&\n             (temp_char_ptr_1 = strstr(temp_haystack,\"::NoSuchStrinG\"), temp_char_ptr_2 = temp_haystack,\n             temp_char_ptr_3 = temp_haystack, temp_char_ptr_1 != (char *)0x0)) {\n            for (; temp_char_ptr_2 != temp_char_ptr_1; temp_char_ptr_2 = temp_char_ptr_2 + 1) {\n              if ((*temp_char_ptr_2 != ' ') ||\n                 (((temp_char_ptr_2[1] == '>' && (temp_haystack < temp_char_ptr_2)) && (temp_char_ptr_2[-1] == '>')))) {\n                *temp_char_ptr_3 = *temp_char_ptr_2;\n                temp_char_ptr_3 = temp_char_ptr_3 + 1;\n              }\n            }\n            temp_unsigned_var = copy_and_null_terminate_00109a0b(temp_haystack,(int)temp_char_ptr_3 - (int)temp_haystack);\n            *output_ptr = temp_unsigned_var;\n            free(temp_haystack);\n            return result;\n          }\n          print_error_message_0010911f(current_byte_ptr);\n          free(temp_haystack);\n          return 0;\n        }\n        temp_byte_ptr = *byte_array_ptr;\n        if (*temp_byte_ptr != 0x5a) {\n          result_byte = reverse_code_0010c95e(param_ptr,byte_array_ptr,0);\n          if (result_byte == 0) {\n            return 0;\n          }\n          temp_byte = 0;\n          temp_byte_2 = 0;\n          temp_byte_5 = 0;\n          temp_byte_4 = 0;\n          temp_byte_6 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              temp_byte_3 = temp_byte;\n              first_byte = *temp_byte_ptr;\n              if ((temp_byte_2 | first_byte == 0) != 0) {\n                result_byte = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp_byte = result_byte;\n              temp_byte_2 = result_byte;\n            } while ('v' < (char)first_byte);\n            if ((char)first_byte < 'b') {\n              if ((char)first_byte < 'U') {\n                if ((char)first_byte < 'C') goto LAB_0010d2e9;\n                temp_unsigned_long = 1L << (first_byte + 0xbd & 0x3f);\n                if ((temp_unsigned_long & 0x11409) == 0) {\n                  if ((temp_unsigned_long & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (first_byte == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(first_byte + 0xab)) goto LAB_0010d2e9;\n              temp_byte_ptr = temp_byte_ptr + 1;\n              temp_byte = temp_byte_3;\n              temp_byte_2 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(first_byte) {\n            case 0x62:\n              temp_byte = temp_byte_3;\n              temp_byte_5 = result_byte;\n              break;\n            case 99:\n              temp_byte = temp_byte_3;\n              temp_byte_6 = result_byte;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp_byte = temp_byte_3;\n              temp_byte_4 = result_byte;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byte_array_ptr = temp_byte_ptr + 1;\n        temp_char = reverse_code_0010c95e(param_ptr,byte_array_ptr,0);\n        if (temp_char == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(current_byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (temp_byte_3 == 0) {\n    if (temp_byte_6 == 0) {\n      if (temp_byte_5 == 0) {\n        if (temp_byte_4 == 0) {\n          if (result_byte != 0) {\n            temp_unsigned_integer = parse_digits_00108e76(byte_array_ptr);\n            if (temp_unsigned_integer == 0) goto LAB_0010d280;\n            *byte_array_ptr = *byte_array_ptr + temp_unsigned_integer;\n          }\n        }\n        else {\n          if (**byte_array_ptr == 0x6d) {\n            *byte_array_ptr = *byte_array_ptr + 1;\n          }\n          while( true ) {\n            temp_byte_ptr = *byte_array_ptr;\n            if (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) == 0) break;\n            *byte_array_ptr = temp_byte_ptr + 1;\n          }\n          if (*temp_byte_ptr == 0x2e) {\n            do {\n              temp_byte_ptr = temp_byte_ptr + 1;\n              *byte_array_ptr = temp_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) != 0);\n          }\n          temp_byte_ptr = *byte_array_ptr;\n          if (*temp_byte_ptr == 0x65) {\n            do {\n              temp_byte_ptr = temp_byte_ptr + 1;\n              *byte_array_ptr = temp_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        temp_unsigned_integer = parse_digits_00108e76(byte_array_ptr);\n        if (1 < temp_unsigned_integer) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byte_array_ptr == 0x6d) {\n        *byte_array_ptr = *byte_array_ptr + 1;\n      }\n      temp_integer = parse_digits_00108e76(byte_array_ptr);\n      if (temp_integer == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byte_array_ptr == 0x6d) {\n      *byte_array_ptr = *byte_array_ptr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byte_array_ptr * 2] & 4) != 0) {\n      *byte_array_ptr = *byte_array_ptr + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "FUN_00108e76",
                "abort",
                "FUN_0010c95e",
                "strlen",
                "free",
                "cplus_demangle",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strstr",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_string_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = parse_digits_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = extract_and_parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = parse_digits_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = parse_digits_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = parse_digits_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hashtables_001054af",
                "param_1": "unused_param_1",
                "param_2": "unused_param_2",
                "in_RAX": "unused_variable"
            },
            "code": "\nvoid cleanup_hashtables_001054af(undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  undefined8 unused_variable;\n  \n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_001279e8);\n  htab_delete(DAT_001279e0);\n  htab_delete(DAT_001279d8);\n  htab_delete(DAT_001279d0);\n  htab_delete(DAT_001278d0);\n  htab_delete(DAT_001278c8,unused_param_2,unused_variable);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hashtables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "update_record_0010c139",
                "param_1": "record",
                "param_2": "recordData",
                "param_3": "newValue",
                "param_4": "dataType",
                "param_5": "flag",
                "param_6": "value",
                "uVar1": "oldRecord",
                "cVar2": "flagValue",
                "uVar3": "result",
                "puVar4": "newRecord",
                "in_R10": "extraParam",
                "unaff_R15": "unusedParam"
            },
            "code": "\nulong updateRecord_0010c139(undefined8 record,long recordData,undefined8 newValue,undefined8 dataType,\n                  undefined4 flag,undefined8 value)\n\n{\n  undefined8 oldRecord;\n  char flagValue;\n  ulong result;\n  undefined8 *newRecord;\n  undefined8 extraParam;\n  undefined8 unusedParam;\n  \n  flagValue = *(char *)(recordData + 0x60);\n  if ((flagValue != '\\0') && ((*(int *)(recordData + 0x40) != 0 || (*(char *)(recordData + 0x44) == '\\0')))) {\n    newRecord = (undefined8 *)xmalloc(0x28);\n    oldRecord = *(undefined8 *)(recordData + 0x78);\n    *(undefined8 *)((long)newRecord + 0x1c) = 0;\n    newRecord[2] = dataType;\n    *(undefined4 *)(newRecord + 3) = flag;\n    newRecord[4] = value;\n    *(undefined8 **)(recordData + 0x78) = newRecord;\n    *newRecord = oldRecord;\n    newRecord[1] = newValue;\n    return CONCAT71((int7)((ulong)unusedParam >> 8),flagValue) & 0xffffffff;\n  }\n  result = record_variable_debug_0010c05d(record,newValue,dataType,flag,value,extraParam);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "store_data_and_process_string_0010e439",
                "param_1": "dataPointer",
                "param_2": "stringData",
                "process_string_data_0010e2f0": "processStringData"
            },
            "code": "\nvoid storeDataAndProcessString_0010e439(long dataPointer,undefined8 stringData)\n\n{\n  *(undefined8 *)(dataPointer + 0x210) = stringData;\n  processStringData(dataPointer,0x84,0,0,stringData);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "store_data_and_process_string_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_00109d97",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_0010554f",
                "FUN_00113ede",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010c95e",
                "FUN_00104943",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_0011173a",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010a2b9",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00115530",
                "FUN_00113fb0",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_00108c86",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010b0fa",
                "FUN_001125fa",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_data_structure_00109d3e",
                "param_1": "param1",
                "param_2": "size",
                "uVar1": "initial_value"
            },
            "code": "\nvoid initialize_data_structure_00109d3e(undefined8 param1,int size)\n\n{\n  undefined8 initial_value;\n  \n  initial_value = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    initial_value = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  initialize_data_structure_00109d3e_00109cf4(param1,initial_value,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_data_00112502",
                "param_1": "data_struct",
                "param_2": "data",
                "param_3": "threshold",
                "uVar1": "counter",
                "puVar2": "ptr",
                "uVar3": "next_ptr",
                "cVar4": "result"
            },
            "code": "\nundefined process_data_00112502(long data_struct,undefined8 data,ulong threshold)\n\n{\n  uint counter;\n  undefined8 *ptr;\n  undefined8 next_ptr;\n  char result;\n  \n  do {\n    ptr = *(undefined8 **)(data_struct + 0x40);\n    if (ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(data_struct + 0x48), counter < 10 && (ptr[(ulong)counter + 2] != -1))) {\n      if (threshold <= (ulong)ptr[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = process_data_00112502_0010edb4(data,*(undefined8 *)(ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data_struct + 0x48) = *(int *)(data_struct + 0x48) + 1;\n    }\n    next_ptr = *ptr;\n    *(undefined4 *)(data_struct + 0x48) = 0;\n    *(undefined8 *)(data_struct + 0x40) = next_ptr;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_file_00104cc1",
                "uVar1": "errorString",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "startOfLine",
                "pbVar5": "currentLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "linePtr",
                "unaff_R13": "param1",
                "unaff_R14": "param2",
                "unaff_R15": "param3",
                "param_7": "param4",
                "param_8": "param5",
                "param_9": "param6"
            },
            "code": "\nvoid parseFile_00104cc1(void)\n\n{\n  undefined8 errorString;\n  byte **slotPtr;\n  byte *currentChar;\n  byte nextChar;\n  byte *startOfLine;\n  byte *currentLine;\n  int lineNumber;\n  byte *linePtr;\n  undefined8 param1;\n  byte *param2;\n  byte *param3;\n  undefined8 param4;\n  undefined8 *param5;\n  byte *param6;\n  \ncode_r0x00104cc1:\n  param6 = linePtr;\n  errorString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(errorString,param4,lineNumber);\n  currentLine = startOfLine;\n  linePtr = param6;\nLAB_00114599:\n  do {\n    *linePtr = 0;\n    if (param3 < linePtr) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = param3;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = currentLine;\n    if (param2[1] == 0) {\n      *param5 = param1;\n      return;\n    }\n    for (; nextChar = *currentChar, param2 = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          startOfLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          startOfLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            startOfLine = currentChar + 2;\n            param2 = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          parse_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      param2 = currentChar + 1;\n      startOfLine = currentChar + 2;\n    }\n    else {\n      startOfLine = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *currentLine;\n    param3 = currentLine;\n    while ((nextChar == 0x20 || (linePtr = param3, nextChar == 9))) {\n      currentLine = param3 + 1;\n      param3 = param3 + 1;\n      nextChar = *currentLine;\n    }\n    do {\n      currentLine = startOfLine;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = linePtr[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = linePtr[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = linePtr[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = linePtr[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = linePtr[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = linePtr[6];\n      currentChar = linePtr + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "dcgettext",
                "FUN_00104c36",
                "FUN_00119ed0",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_file_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00109c2e",
                "FUN_0010ab4d",
                "FUN_0010e07c",
                "FUN_00114dc7",
                "FUN_0010abdd",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0010ee3f",
                "FUN_00109be3",
                "FUN_0010aa53",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_memory_and_store_parameters_00113bfa",
                "param_1": "memory_size",
                "param_2": "data",
                "lVar1": "memory_address",
                "plVar2": "allocated_memory_ptr"
            },
            "code": "\nlong initialize_memory_and_store_parameters_00113bfa(long memory_size,long data)\n\n{\n  long memory_address;\n  long *allocated_memory_ptr;\n  \n  if (((memory_size != 0) && (data != 0)) && (memory_address = initialize_memory_00112904(0x12,0), memory_address != 0)) {\n    allocated_memory_ptr = (long *)xmalloc(0x10);\n    *allocated_memory_ptr = memory_size;\n    allocated_memory_ptr[1] = data;\n    *(long **)(memory_address + 0x10) = allocated_memory_ptr;\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_and_store_parameters_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "drop_share_flag_if_output_not_coff_00108375",
                "param_1": "param1",
                "param_2": "param2Array",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "message",
                "unaff_EBX": "EBX"
            },
            "code": "\nuint dropShareFlagIfOutputNotCOFF_00108375(undefined8 param1,undefined8 *param2Array,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 message;\n  uint EBX;\n  \n  if (*(int *)(param2Array[1] + 8) != 2) {\n    value1 = *param2Array;\n    EBX = EBX & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(message,value1,param3);\n  }\n  return EBX;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_output_not_coff_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107976",
                "FUN_00105828",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_data_structure_00109e76",
                "param_1": "dataStructureAddress",
                "param_2": "value",
                "lVar1": "currentValue",
                "local_5a": "sprintfBuffer"
            },
            "code": "\nvoid updateDataStructure_00109e76(long dataStructureAddress,uint value)\n\n{\n  long currentValue;\n  char sprintfBuffer [58];\n  \n  currentValue = *(long *)(dataStructureAddress + 0x68);\n  *(long *)(dataStructureAddress + 0x68) = currentValue + 1;\n  sprintf(sprintfBuffer,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)value);\n  initialize_data_structure_00109b52(dataStructureAddress,sprintfBuffer,currentValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_structure_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_entry_001088ae",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "stringValue",
                "iVar1": "newIndex",
                "lVar2": "currentIndex",
                "lVar3": "entryOffset",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateDataEntry_001088ae(undefined4 value1,undefined4 value2,undefined8 value3,undefined8 stringValue)\n\n{\n  int newIndex;\n  long currentIndex;\n  long entryOffset;\n  undefined8 duplicatedString;\n  \n  currentIndex = (long)DAT_001278a0;\n  entryOffset = currentIndex * 0x18;\n  free((void *)(&DAT_00127730)[currentIndex * 3]);\n  *(undefined4 *)(&DAT_00127720 + entryOffset) = value1;\n  *(undefined4 *)(&DAT_00127724 + entryOffset) = value2;\n  *(undefined8 *)(&DAT_00127728 + entryOffset) = value3;\n  duplicatedString = xstrdup(stringValue);\n  (&DAT_00127730)[currentIndex * 3] = duplicatedString;\n  newIndex = DAT_001278a0 + 1;\n  DAT_001278a0 = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_entry_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_matching_item_0010afd5",
                "param_1": "listHead",
                "param_2": "dataStructPtr",
                "param_3": "stringPtr",
                "param_4": "length",
                "param_5": "defaultVal",
                "param_6": "returnAddress",
                "iVar1": "comparisonResult",
                "__s2": "inputString",
                "puVar2": "itemPtr",
                "uVar3": "tempValue",
                "lVar4": "itemValue",
                "puVar5": "subItemListPtr",
                "puVar6": "tempPtr",
                "bVar7": "loopVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nfindMatchingItem_0010afd5(undefined8 *listHead,long dataStructPtr,undefined8 stringPtr,undefined4 length,\n            undefined4 defaultVal,undefined8 returnAddress)\n\n{\n  int comparisonResult;\n  char *inputString;\n  undefined8 *itemPtr;\n  undefined8 tempValue;\n  long itemValue;\n  undefined8 *subItemListPtr;\n  undefined4 *tempPtr;\n  byte loopVar;\n  undefined returnValue [16];\n  \n  loopVar = 0;\n  inputString = (char *)copy_and_null_terminate_00109a0b(stringPtr,length);\n  for (listHead = (undefined8 *)*listHead; listHead != (undefined8 *)0x0;\n      listHead = (undefined8 *)*listHead) {\n    for (itemPtr = (undefined8 *)listHead[1]; itemPtr != (undefined8 *)0x0;\n        itemPtr = (undefined8 *)*itemPtr) {\n      if ((undefined8 *)itemPtr[2] != (undefined8 *)0x0) {\n        for (subItemListPtr = *(undefined8 **)(undefined8 *)itemPtr[2]; subItemListPtr != (undefined8 *)0x0;\n            subItemListPtr = (undefined8 *)*subItemListPtr) {\n          if ((*(int *)((long)subItemListPtr + 0x14) == 1) && (*(char *)subItemListPtr[1] == *inputString)) {\n            comparisonResult = strcmp((char *)subItemListPtr[1],inputString);\n            if (comparisonResult == 0) {\n              itemValue = subItemListPtr[4];\n              if (itemValue == 0) goto LAB_0010b05b;\n              free(inputString);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  itemPtr = *(undefined8 **)(dataStructPtr + 0x1a0);\n  do {\n    if (itemPtr == (undefined8 *)0x0) {\n      itemPtr = (undefined8 *)xmalloc(0x28);\n      tempValue = *(undefined8 *)(dataStructPtr + 0x1a0);\n      tempPtr = (undefined4 *)((long)itemPtr + 0x14);\n      for (itemValue = 5; itemValue != 0; itemValue = itemValue + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)loopVar * -2 + 1;\n      }\n      *(undefined4 *)(itemPtr + 2) = defaultVal;\n      *itemPtr = tempValue;\n      itemPtr[1] = inputString;\n      tempValue = create_memory_block_00113e23(itemPtr + 3,inputString);\n      *(undefined8 **)(dataStructPtr + 0x1a0) = itemPtr;\n      itemPtr[4] = tempValue;\nLAB_0010b0e7:\n      itemValue = itemPtr[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = returnAddress;\n      returnValue._0_8_ = itemValue;\n      return returnValue;\n    }\n    if (*(char *)itemPtr[1] == *inputString) {\n      comparisonResult = strcmp((char *)itemPtr[1],inputString);\n      if (comparisonResult == 0) {\n        if (*(int *)(itemPtr + 2) == 0) {\n          *(undefined4 *)(itemPtr + 2) = defaultVal;\n        }\n        free(inputString);\n        goto LAB_0010b0e7;\n      }\n    }\n    itemPtr = (undefined8 *)*itemPtr;\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "free",
                "xmalloc",
                "FUN_00113e23",
                "FUN_00109a0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "find_matching_item_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_entry_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)process_xcoff_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = get_file_of_type_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_memory_and_store_parameters_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_entry_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_memory_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)get_file_of_type_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)get_file_of_type_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_memory_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_error_message_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)find_circular_dependency_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_memory_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_memory_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)allocate_memory_if_needed_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_string_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_memory_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_memory_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_memory_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_for_param_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_entry_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = initialize_memory_and_set_param_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_error_message_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_allocate_memory_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_memory_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_error_message_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_string_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_error_message_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)allocate_and_initialize_memory_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_function_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_if_not_zero_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_entry_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_string_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_string_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_memory_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_error_message_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = process_xcoff_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_message_00108fe8(pbVar27,uVar15);\n                lVar38 = initialize_memory_and_set_param_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_memory_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_memory_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_message_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = compare_strings_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = compare_strings_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = compare_strings_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)initialize_memory_and_set_param_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_string_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_error_message_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_message_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_message_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_string_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)get_return_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_string_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_error_message_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_error_message_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_error_message_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_message_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_string_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_string_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_error_message_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)find_circular_dependency_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)find_circular_dependency_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_message_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = process_xcoff_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)find_circular_dependency_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = extract_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_extract_items_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = resize_and_insert_entry_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_extract_string_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = resize_and_insert_entry_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = parse_digits_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = resize_and_insert_entry_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = extract_and_parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = extract_and_parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = extract_and_parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = extract_and_parse_entries_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_memory_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = validate_and_process_input_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = validate_and_process_input_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = compare_strings_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_memory_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_message_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_string_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_entry_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_error_message_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_memory_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_memory_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_message_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_error_message_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_matching_item_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)get_file_of_type_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_error_message_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "FUN_00108fe8",
                "FUN_00113d3a",
                "FUN_00108e76",
                "strchr",
                "concat",
                "FUN_00113fb0",
                "strcmp",
                "FUN_00113b98",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "FUN_00109ab1",
                "FUN_00113ce0",
                "FUN_00113c43",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_0010d559",
                "strncmp",
                "FUN_0010ee3f",
                "FUN_00112b6e",
                "FUN_00109be3",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "strstr",
                "FUN_00112904",
                "FUN_0010c2d2",
                "xmalloc",
                "malloc",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "strspn",
                "FUN_0010afd5",
                "sprintf",
                "FUN_00109a32",
                "cplus_demangle_mangled_name",
                "strcpy",
                "dcgettext",
                "FUN_0010914e",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "strtol",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strcat",
                "FUN_0010d882",
                "free",
                "FUN_00113df2",
                "FUN_00113e5e"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stabEntry",
                "iVar5": "counter"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long index;\n  long offset;\n  int *stabEntry;\n  int counter;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  counter = DAT_001278a0;\n  do {\n    index = (long)counter;\n    offset = index * 0x18;\n    stabEntry = (int *)(&DAT_00127720 + offset);\n    if ((&DAT_00127730)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabEntry);\n      if (stabName == 0) {\n        if (*stabEntry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127724 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127728 + offset));\n      if (*stabEntry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127730)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    counter = (counter + 1) % 0x10;\n  } while (DAT_001278a0 != counter);\n  return param_3;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "dcgettext",
                "fwrite",
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "data"
            },
            "code": "\nvoid process_data_0010a083(long data)\n\n{\n  process_data_0010a083_00109ed3(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "array_ptr",
                "param_2": "element",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "var_6",
                "lVar1": "current_size",
                "plVar2": "element_ptr",
                "lVar3": "iterator",
                "puVar4": "buffer_ptr",
                "uVar5": "array_max_size",
                "bVar6": "flag2",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long array_ptr,long element,ulong size,int flag,undefined4 *output,\n            undefined8 var_6)\n\n{\n  long current_size;\n  long *element_ptr;\n  long iterator;\n  undefined *buffer_ptr;\n  ulong array_max_size;\n  byte flag2;\n  undefined return_value [16];\n  \n  flag2 = 0;\n  size = size & 0xffffffff;\n  array_max_size = *(ulong *)(array_ptr + 0x1b0);\n  if (array_max_size <= size) {\n    if (array_max_size == 0) {\n      array_max_size = 10;\n    }\n    for (; array_max_size <= size; array_max_size = array_max_size * 2) {\n    }\n    current_size = xrealloc(*(undefined8 *)(array_ptr + 0x1a8),array_max_size * 0x18);\n    *(long *)(array_ptr + 0x1a8) = current_size;\n    buffer_ptr = (undefined *)(*(long *)(array_ptr + 0x1b0) * 0x18 + current_size);\n    for (iterator = (array_max_size - *(long *)(array_ptr + 0x1b0)) * 0x18; iterator != 0; iterator = iterator + -1) {\n      *buffer_ptr = 0;\n      buffer_ptr = buffer_ptr + (ulong)flag2 * -2 + 1;\n    }\n    *(ulong *)(array_ptr + 0x1b0) = array_max_size;\n  }\n  element_ptr = (long *)(size * 0x18 + *(long *)(array_ptr + 0x1a8));\n  if (*element_ptr == 0) {\n    current_size = *(long *)(array_ptr + 0x68);\n    *element_ptr = current_size;\n    *(long *)(array_ptr + 0x68) = current_size + 1;\n    element_ptr[1] = element;\n    *(int *)(element_ptr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element_ptr + 2) = 0;\n    *(undefined4 *)((long)element_ptr + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)element_ptr + 0x14);\n  }\n  return_value._8_8_ = var_6;\n  return_value._0_8_ = *element_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_00109d5c",
                "FUN_0010a69a"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_with_message_001053b5",
                "uVar1": "error_message"
            },
            "code": "\nvoid print_error_with_message_001053b5(void)\n\n{\n  undefined8 error_message;\n  \n  error_message = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_message);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_error_with_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_data_structure_00112996",
                "param_1": "inputParam",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "tempVar"
            },
            "code": "\n\n\nundefined8 initializeDataStructure_00112996(long inputParam,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long tempVar;\n  \n  if ((*(long *)(inputParam + 8) != 0) && (*(long *)(inputParam + 0x10) != 0)) {\n    tempVar = *(long *)(inputParam + 0x10) + 0x10;\n    if (*(long *)(inputParam + 0x20) != 0) {\n      tempVar = *(long *)(inputParam + 0x20) + 0x28;\n    }\n    result = initialize_data_structure_00112925(tempVar,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "debug_data",
                "param_2": "class_name",
                "param_3": "debug_type",
                "param_4": "debug_param",
                "uVar1": "result",
                "uVar2": "type_id",
                "lVar3": "debug_type_data",
                "piVar4": "type_ptr",
                "__s1": "existing_class_name",
                "cVar5": "equality_result",
                "iVar6": "new_type_id",
                "puVar7": "new_debug_data",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] set_class_id_0010c7a0(long debug_data,char *class_name,int *debug_type,undefined8 debug_param)\n\n{\n  undefined8 result;\n  uint type_id;\n  long debug_type_data;\n  int *type_ptr;\n  char *existing_class_name;\n  char equality_result;\n  int new_type_id;\n  undefined8 *new_debug_data;\n  undefined return_value [16];\n  \n  if (3 < *debug_type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  debug_type_data = *(long *)(debug_type + 4);\n  new_debug_data = (undefined8 *)(ulong)*(uint *)(debug_type_data + 0xc);\n  if (*(uint *)(debug_type_data + 0xc) <= *(uint *)(debug_data + 0x38)) {\n    for (new_debug_data = *(undefined8 **)(debug_data + 0x50); new_debug_data != (undefined8 *)0x0;\n        new_debug_data = (undefined8 *)*new_debug_data) {\n      type_ptr = (int *)new_debug_data[1];\n      if (*type_ptr == *debug_type) {\n        existing_class_name = (char *)new_debug_data[2];\n        if (class_name == (char *)0x0) {\n          if (existing_class_name == (char *)0x0) {\nLAB_0010c82c:\n            equality_result = check_equality_0010922b(debug_data,type_ptr,debug_type);\n            if (equality_result != '\\0') {\n              type_id = *(uint *)(*(long *)(new_debug_data[1] + 0x10) + 0xc);\n              new_debug_data = (undefined8 *)(ulong)type_id;\n              *(uint *)(debug_type_data + 0xc) = type_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_class_name != (char *)0x0) && (*existing_class_name == *class_name)) &&\n                (new_type_id = strcmp(existing_class_name,class_name), new_type_id == 0)) goto LAB_0010c82c;\n      }\n    }\n    new_type_id = *(int *)(debug_data + 0x34) + 1;\n    *(int *)(debug_data + 0x34) = new_type_id;\n    *(int *)(debug_type_data + 0xc) = new_type_id;\n    new_debug_data = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(debug_data + 0x50);\n    new_debug_data[2] = class_name;\n    *(undefined8 **)(debug_data + 0x50) = new_debug_data;\n    *new_debug_data = result;\n    new_debug_data[1] = debug_type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)new_debug_data >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = debug_param;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_0010922b",
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "uVar1": "first_value",
                "uVar2": "second_value",
                "pplVar3": "ptr_to_long_ptr_var_1",
                "ppcVar4": "ptr_to_char_ptr_var_1",
                "ppcVar5": "ptr_to_char_ptr_var_2",
                "lVar6": "long_var_1",
                "lVar7": "long_var_2",
                "lVar8": "long_var_3",
                "pcVar9": "char_ptr_var_1",
                "pcVar10": "char_ptr_var_2",
                "cVar11": "char_var_1",
                "bVar12": "result",
                "iVar13": "int_var",
                "uVar14": "uint64_var_1",
                "uVar15": "uint64_var_2",
                "puVar16": "ptr_to_uint64_var_1",
                "puVar17": "ptr_to_uint64_var_2",
                "plVar18": "ptr_to_long_var_1",
                "lVar19": "long_var_4",
                "plVar20": "ptr_to_long_var_2",
                "plVar21": "ptr_to_long_var_3",
                "lVar22": "long_var_5",
                "local_70": "local_long_var_1",
                "local_58": "local_ptr_to_uint64_var_1",
                "local_48": "local_ptr_to_long_var_1"
            },
            "code": "\nbyte checkEquality_0010922b(long input_param_1,long *input_param_2,long *input_param_3)\n\n{\n  uint first_value;\n  uint second_value;\n  long **ptr_to_long_ptr_var_1;\n  char **ptr_to_char_ptr_var_1;\n  char **ptr_to_char_ptr_var_2;\n  long long_var_1;\n  long long_var_2;\n  long long_var_3;\n  char *char_ptr_var_1;\n  char *char_ptr_var_2;\n  char char_var_1;\n  byte result;\n  int int_var;\n  undefined8 uint64_var_1;\n  undefined8 uint64_var_2;\n  undefined8 *ptr_to_uint64_var_1;\n  undefined8 *ptr_to_uint64_var_2;\n  long *ptr_to_long_var_1;\n  long long_var_4;\n  long *ptr_to_long_var_2;\n  long *ptr_to_long_var_3;\n  long long_var_5;\n  long *local_long_var_1;\n  undefined8 *local_ptr_to_uint64_var_1;\n  long *plStack_50;\n  long *local_ptr_to_long_var_1;\n  \n  ptr_to_long_var_1 = input_param_3;\n  if (input_param_2 == (long *)0x0) {\nLAB_00109241:\n    return input_param_3 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr_to_long_var_1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    first_value = *(uint *)input_param_2;\n    if (first_value == 1) goto code_r0x00109263;\n    while (second_value = *(uint *)input_param_3, second_value == 1) {\n      input_param_3 = **(long ***)input_param_3[2];\n      if (input_param_3 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (input_param_2 == input_param_3) {\n      return true;\n    }\n    if (first_value != 0x16) break;\n    if (second_value != 0x17) goto LAB_001092cb;\n    input_param_2 = *(long **)(input_param_2[2] + 8);\n    if (input_param_2 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((first_value == 0x17) && (second_value == 0x16)) {\n    input_param_3 = *(long **)(input_param_3[2] + 8);\n    ptr_to_long_var_1 = input_param_3;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*input_param_2 != *input_param_3) {\n    return false;\n  }\n  if (first_value == 3) {\n    return *(char *)(input_param_2 + 2) == *(char *)(input_param_3 + 2);\n  }\n  if (first_value < 4) {\n    if (first_value == 2) {\n      return true;\n    }\n  }\n  else if (first_value - 4 < 3) {\n    return true;\n  }\n  local_ptr_to_uint64_var_1 = *(undefined8 **)(input_param_1 + 0x58);\n  for (ptr_to_uint64_var_2 = local_ptr_to_uint64_var_1; ptr_to_uint64_var_2 != (undefined8 *)0x0; ptr_to_uint64_var_2 = (undefined8 *)*ptr_to_uint64_var_2) {\n    if (((long *)ptr_to_uint64_var_2[1] == input_param_2) && ((long *)ptr_to_uint64_var_2[2] == input_param_3)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(input_param_1 + 0x58) = &local_ptr_to_uint64_var_1;\n  plStack_50 = input_param_2;\n  local_ptr_to_long_var_1 = input_param_3;\n  switch(first_value) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr_to_long_var_1 = (long *)input_param_2[2];\n    ptr_to_long_ptr_var_1 = (long **)input_param_3[2];\n    if (ptr_to_long_var_1 == (long *)0x0) {\n      result = ptr_to_long_ptr_var_1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_to_long_ptr_var_1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(input_param_1 + 0x38) < *(uint *)((long)ptr_to_long_var_1 + 0xc)) &&\n       (*(uint *)((long)ptr_to_long_var_1 + 0xc) == *(uint *)((long)ptr_to_long_ptr_var_1 + 0xc))) goto LAB_001097af;\n    ptr_to_uint64_var_2 = (undefined8 *)*ptr_to_long_var_1;\n    local_long_var_1 = *ptr_to_long_ptr_var_1;\n    if (((ptr_to_uint64_var_2 == (undefined8 *)0x0) == (local_long_var_1 == (long *)0x0)) &&\n       ((((ptr_to_long_var_1[2] == 0) == (ptr_to_long_ptr_var_1[2] == (long *)0x0) &&\n         ((ptr_to_long_var_1[3] == 0) == (ptr_to_long_ptr_var_1[3] == (long *)0x0))) &&\n        ((ptr_to_long_var_1[4] == 0) == (ptr_to_long_ptr_var_1[4] == (long *)0x0))))) {\n      if (ptr_to_uint64_var_2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr_to_long_var_1[4] != 0) &&\n           (char_var_1 = checkEquality_0010922b(input_param_1,ptr_to_long_var_1[4],ptr_to_long_ptr_var_1[4]), char_var_1 == '\\0'))\n        goto LAB_00109382;\n        ptr_to_long_var_3 = (long *)ptr_to_long_var_1[2];\n        if (ptr_to_long_var_3 == (long *)0x0) {\nLAB_00109540:\n          ptr_to_uint64_var_2 = (undefined8 *)ptr_to_long_var_1[3];\n          if (ptr_to_uint64_var_2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr_to_long_var_1 = ptr_to_long_ptr_var_1[3];\n          while( true ) {\n            ptr_to_char_ptr_var_2 = (char **)*ptr_to_uint64_var_2;\n            if (ptr_to_char_ptr_var_2 == (char **)0x0) {\n              result = *ptr_to_long_var_1 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_to_char_ptr_var_1 = (char **)*ptr_to_long_var_1;\n            if (ptr_to_char_ptr_var_1 == (char **)0x0) break;\n            if ((**ptr_to_char_ptr_var_2 != **ptr_to_char_ptr_var_1) || (int_var = strcmp(*ptr_to_char_ptr_var_2,*ptr_to_char_ptr_var_1), int_var != 0))\n            break;\n            char_ptr_var_1 = ptr_to_char_ptr_var_2[1];\n            char_ptr_var_2 = ptr_to_char_ptr_var_1[1];\n            if ((char_ptr_var_1 == (char *)0x0) != (char_ptr_var_2 == (char *)0x0)) break;\n            if (char_ptr_var_1 != (char *)0x0) {\n              long_var_5 = 0;\n              while( true ) {\n                ptr_to_char_ptr_var_2 = *(char ***)(char_ptr_var_1 + long_var_5);\n                ptr_to_char_ptr_var_1 = *(char ***)(char_ptr_var_2 + long_var_5);\n                if (ptr_to_char_ptr_var_2 == (char **)0x0) break;\n                if (ptr_to_char_ptr_var_1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_to_char_ptr_var_2 != **ptr_to_char_ptr_var_1) ||\n                     ((((ulong)ptr_to_char_ptr_var_2[2] ^ (ulong)ptr_to_char_ptr_var_1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_to_char_ptr_var_2[3] != ptr_to_char_ptr_var_1[3] ||\n                     ((((ptr_to_char_ptr_var_2[4] == (char *)0x0) != (ptr_to_char_ptr_var_1[4] == (char *)0x0) ||\n                       (int_var = strcmp(*ptr_to_char_ptr_var_2,*ptr_to_char_ptr_var_1), int_var != 0)) ||\n                      (char_var_1 = checkEquality_0010922b(input_param_1,ptr_to_char_ptr_var_2[1],ptr_to_char_ptr_var_1[1]), char_var_1 == '\\0')))))) ||\n                   ((ptr_to_char_ptr_var_2[4] != (char *)0x0 &&\n                    (char_var_1 = checkEquality_0010922b(input_param_1,ptr_to_char_ptr_var_2[4],ptr_to_char_ptr_var_1[4]), char_var_1 == '\\0'))))\n                goto LAB_00109382;\n                long_var_5 = long_var_5 + 8;\n              }\n              if (ptr_to_char_ptr_var_1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_to_uint64_var_2 = ptr_to_uint64_var_2 + 1;\n            ptr_to_long_var_1 = ptr_to_long_var_1 + 1;\n          }\n        }\n        else {\n          ptr_to_long_var_2 = ptr_to_long_ptr_var_1[2];\n          for (; ptr_to_uint64_var_2 = (undefined8 *)*ptr_to_long_var_3, ptr_to_uint64_var_2 != (undefined8 *)0x0;\n              ptr_to_long_var_3 = ptr_to_long_var_3 + 1) {\n            ptr_to_uint64_var_1 = (undefined8 *)*ptr_to_long_var_2;\n            if ((((ptr_to_uint64_var_1 == (undefined8 *)0x0) ||\n                 (((ptr_to_uint64_var_2[1] ^ ptr_to_uint64_var_1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_to_uint64_var_2 + 2) != *(int *)(ptr_to_uint64_var_1 + 2))) ||\n               (char_var_1 = checkEquality_0010922b(input_param_1,*ptr_to_uint64_var_2,*ptr_to_uint64_var_1), char_var_1 == '\\0'))\n            goto LAB_00109382;\n            ptr_to_long_var_2 = ptr_to_long_var_2 + 1;\n          }\n          if (*ptr_to_long_var_2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_to_char_ptr_var_2 = (char **)*ptr_to_uint64_var_2, ptr_to_char_ptr_var_2 != (char **)0x0; ptr_to_uint64_var_2 = ptr_to_uint64_var_2 + 1) {\n          ptr_to_char_ptr_var_1 = (char **)*local_long_var_1;\n          if (ptr_to_char_ptr_var_1 == (char **)0x0) goto LAB_00109382;\n          char_ptr_var_1 = *ptr_to_char_ptr_var_1;\n          char_ptr_var_2 = *ptr_to_char_ptr_var_2;\n          if ((*char_ptr_var_2 != *char_ptr_var_1) ||\n             ((((ulong)ptr_to_char_ptr_var_2[2] ^ (ulong)ptr_to_char_ptr_var_1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_to_char_ptr_var_2 + 0x14) == '\\0') {\n            if (ptr_to_char_ptr_var_2[3] == ptr_to_char_ptr_var_1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          int_var = strcmp(ptr_to_char_ptr_var_2[3],ptr_to_char_ptr_var_1[3]);\n          if (int_var != 0) goto LAB_00109382;\nLAB_00109480:\n          int_var = strcmp(char_ptr_var_2,char_ptr_var_1);\n          if (((int_var != 0) || (ptr_to_char_ptr_var_2[1] == (char *)0x0)) || (ptr_to_char_ptr_var_1[1] == (char *)0x0))\n          goto LAB_00109382;\n          uint64_var_1 = find_circular_dependency_00112b6e(ptr_to_char_ptr_var_1[1],0);\n          uint64_var_2 = find_circular_dependency_00112b6e(ptr_to_char_ptr_var_2[1],0);\n          char_var_1 = checkEquality_0010922b(input_param_1,uint64_var_2,uint64_var_1);\n          if (char_var_1 == '\\0') goto LAB_00109382;\n          local_long_var_1 = local_long_var_1 + 1;\n        }\n        if (*local_long_var_1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr_to_long_var_1 = (long *)input_param_2[2];\n    ptr_to_long_var_3 = (long *)input_param_3[2];\n    if (ptr_to_long_var_1 == (long *)0x0) {\n      result = ptr_to_long_var_3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_to_long_var_3 == (long *)0x0) goto LAB_00109382;\n    long_var_5 = *ptr_to_long_var_1;\n    long_var_1 = *ptr_to_long_var_3;\n    long_var_4 = 0;\n    long_var_2 = ptr_to_long_var_1[1];\n    long_var_3 = ptr_to_long_var_3[1];\n    do {\n      char_ptr_var_1 = *(char **)(long_var_5 + long_var_4);\n      if (char_ptr_var_1 == (char *)0x0) {\n        result = *(long *)(long_var_1 + long_var_4) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr_var_2 = *(char **)(long_var_1 + long_var_4);\n      if (((char_ptr_var_2 == (char *)0x0) || (*char_ptr_var_1 != *char_ptr_var_2)) ||\n         (*(long *)(long_var_2 + long_var_4) != *(long *)(long_var_3 + long_var_4))) break;\n      int_var = strcmp(char_ptr_var_1,char_ptr_var_2);\n      long_var_4 = long_var_4 + 8;\n    } while (int_var == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(input_param_1,input_param_2[2],input_param_3[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)input_param_2[2] + 2) == *(char *)((undefined8 *)input_param_3[2] + 2)) &&\n       (char_var_1 = checkEquality_0010922b(input_param_1,*(undefined8 *)input_param_2[2],*(undefined8 *)input_param_3[2]),\n       char_var_1 != '\\0')) {\n      ptr_to_long_var_1 = *(long **)(input_param_2[2] + 8);\n      ptr_to_long_var_3 = *(long **)(input_param_3[2] + 8);\n      if ((ptr_to_long_var_1 == (long *)0x0) == (ptr_to_long_var_3 == (long *)0x0)) {\n        if (ptr_to_long_var_1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr_to_long_var_1 != 0 && (*ptr_to_long_var_3 != 0)) &&\n               (char_var_1 = checkEquality_0010922b(input_param_1), char_var_1 != '\\0'))) {\n          ptr_to_long_var_1 = ptr_to_long_var_1 + 1;\n          ptr_to_long_var_3 = ptr_to_long_var_3 + 1;\n        }\nLAB_0010995d:\n        if (*ptr_to_long_var_1 != 0) goto LAB_00109964;\n        result = *ptr_to_long_var_3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_to_uint64_var_2 = (undefined8 *)input_param_3[2];\n    ptr_to_uint64_var_1 = (undefined8 *)input_param_2[2];\n    result = 0;\n    if ((ptr_to_uint64_var_1[1] == ptr_to_uint64_var_2[1]) && (ptr_to_uint64_var_1[2] == ptr_to_uint64_var_2[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(input_param_1,*ptr_to_uint64_var_1,*ptr_to_uint64_var_2);\n    }\n    break;\n  case 0x10:\n    ptr_to_uint64_var_2 = (undefined8 *)input_param_3[2];\n    ptr_to_uint64_var_1 = (undefined8 *)input_param_2[2];\n    result = 0;\n    if (((ptr_to_uint64_var_1[2] == ptr_to_uint64_var_2[2]) && (ptr_to_uint64_var_1[3] == ptr_to_uint64_var_2[3])) &&\n       (*(char *)(ptr_to_uint64_var_1 + 4) == *(char *)(ptr_to_uint64_var_2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_to_uint64_var_2 = (undefined8 *)input_param_3[2];\n    ptr_to_uint64_var_1 = (undefined8 *)input_param_2[2];\n    result = 0;\n    if (*(char *)(ptr_to_uint64_var_1 + 1) == *(char *)(ptr_to_uint64_var_2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    char_var_1 = checkEquality_0010922b(input_param_1,*(undefined8 *)input_param_2[2],*(undefined8 *)input_param_3[2]);\n    result = 0;\n    if (char_var_1 != '\\0') {\n      result = checkEquality_0010922b(input_param_1,*(undefined8 *)(input_param_2[2] + 8),*(undefined8 *)(input_param_3[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)input_param_2[2] + 3) == *(char *)((undefined8 *)input_param_3[2] + 3)) &&\n        (char_var_1 = checkEquality_0010922b(input_param_1,*(undefined8 *)input_param_2[2],*(undefined8 *)input_param_3[2]),\n        char_var_1 != '\\0')) &&\n       (char_var_1 = checkEquality_0010922b(input_param_1,*(undefined8 *)(input_param_2[2] + 8),\n                              *(undefined8 *)(input_param_3[2] + 8)), char_var_1 != '\\0')) {\n      ptr_to_long_var_1 = *(long **)(input_param_2[2] + 0x10);\n      ptr_to_long_var_3 = *(long **)(input_param_3[2] + 0x10);\n      if ((ptr_to_long_var_1 == (long *)0x0) == (ptr_to_long_var_3 == (long *)0x0)) {\n        if (ptr_to_long_var_1 != (long *)0x0) {\n          while (((*ptr_to_long_var_1 != 0 && (*ptr_to_long_var_3 != 0)) &&\n                 (char_var_1 = checkEquality_0010922b(input_param_1), char_var_1 != '\\0'))) {\n            ptr_to_long_var_1 = ptr_to_long_var_1 + 1;\n            ptr_to_long_var_3 = ptr_to_long_var_3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr_to_long_var_1 = (long *)input_param_3[2];\n    ptr_to_long_var_3 = (long *)input_param_2[2];\n    int_var = strcmp(*(char **)(*ptr_to_long_var_3 + 8),*(char **)(*ptr_to_long_var_1 + 8));\n    result = 0;\n    if (int_var == 0) {\n      result = checkEquality_0010922b(input_param_1,ptr_to_long_var_3[1],ptr_to_long_var_1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(input_param_1 + 0x58) = local_ptr_to_uint64_var_1;\n  return result;\ncode_r0x00109263:\n  input_param_2 = **(long ***)input_param_2[2];\n  ptr_to_long_var_1 = input_param_2;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_001052a2",
                "param_3": "input_archive_path",
                "cVar1": "format_recognized",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "ppcVar4": "arch_files",
                "lVar5": "bytes_read",
                "uVar6": "tmp_string",
                "__format": "error_message_format",
                "puVar7": "temp_dir_info",
                "piVar8": "errno_location",
                "uVar9": "error_message",
                "in_RAX": "current_position",
                "pcVar10": "path_iterator",
                "ppcVar11": "current_file",
                "lVar12": "file_size",
                "pvVar13": "buffer",
                "pcVar14": "bfd_close_function",
                "lVar15": "buffer_size",
                "pcVar16": "current_char",
                "psVar17": "stat_info",
                "unaff_R14": "dir_list",
                "unaff_R15": "arch",
                "bVar18": "flag",
                "unaff_retaddr": "return_address",
                "in_stack_00000008": "output_file",
                "in_stack_00000010": "current_file_offset",
                "in_stack_00000018": "temp_dir",
                "in_stack_00000020": "output_file_arch",
                "in_stack_00000028": "output_file_format",
                "in_stack_00000030": "known_format",
                "in_stack_000000f8": "file_permissions",
                "in_stack_00000110": "file_size_limit"
            },
            "code": "\nvoid extract_and_copy_archive_001052a2(undefined8 param_1,undefined8 param_2,char *input_archive_path)\n\n{\n  char format_recognized;\n  int arch_type;\n  int stat_result;\n  char **arch_files;\n  long bytes_read;\n  undefined8 tmp_string;\n  char *error_message_format;\n  undefined8 *temp_dir_info;\n  int *errno_location;\n  undefined8 error_message;\n  long current_position;\n  char *path_iterator;\n  char **current_file;\n  long file_size;\n  void *buffer;\n  code *bfd_close_function;\n  long buffer_size;\n  char *current_char;\n  stat *stat_info;\n  undefined8 *dir_list;\n  char **arch;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *output_file;\n  long *current_file_offset;\n  char *temp_dir;\n  undefined8 *output_file_arch;\n  undefined8 output_file_format;\n  undefined8 known_format;\n  uint file_permissions;\n  long file_size_limit;\n  \n  flag = 0;\n  path_iterator = (char *)(current_position + 1);\n  do {\n    if (*path_iterator == '/') {\n      extract_and_copy_archive_001052a2();\n      return;\n    }\n    while (*path_iterator == '\\0') {\n      path_iterator = (char *)concat(temp_dir,&DAT_0011b47d);\n      stat_result = stat(path_iterator,(stat *)&stack0x00000050);\n      temp_dir_info = dir_list;\n      if (-1 < stat_result) {\n        file_size = create_temp_directory_0011a0e0(path_iterator);\n        free(path_iterator);\n        if (file_size == 0) {\n          errno_location = __errno_location();\n          path_iterator = strerror(*errno_location);\n          error_message = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(error_message,path_iterator);\n          goto LAB_00104e93;\n        }\n        temp_dir_info = (undefined8 *)xmalloc(0x18);\n        path_iterator = *arch;\n        *temp_dir_info = dir_list;\n        temp_dir_info[2] = 0;\n        temp_dir_info[1] = file_size;\n        path_iterator = (char *)concat(file_size,&DAT_0011b47d,path_iterator);\n      }\n      stat_result = 0;\n      if (DAT_001279cb != '\\0') {\n        stat_info = (stat *)&stack0x00000050;\n        for (file_size = 0x24; file_size != 0; file_size = file_size + -1) {\n          *(undefined4 *)&stat_info->st_dev = 0;\n          stat_info = (stat *)((long)stat_info + (ulong)flag * -8 + 4);\n        }\n        current_file = (char **)arch[0x1d];\n        if ((char **)arch[0x1d] == (char **)0x0) {\n          current_file = arch;\n        }\n        stat_result = (**(code **)(current_file[1] + 0x1e8))(arch,(stat *)&stack0x00000050);\n        if (stat_result != 0) {\n          current_char = *arch;\n          error_message = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(error_message,current_char);\n        }\n      }\n      dir_list = (undefined8 *)xmalloc(0x18);\n      dir_list[1] = path_iterator;\n      *dir_list = temp_dir_info;\n      dir_list[2] = 0;\n      format_recognized = bfd_check_format(arch,1);\n      if (format_recognized == '\\0') {\n        error_message = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,arch,0,error_message);\n        current_file = (char **)bfd_openw(path_iterator,output_file_format);\n        if (current_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        arch_files = (char **)arch[0x1d];\n        if ((char **)arch[0x1d] == (char **)0x0) {\n          arch_files = arch;\n        }\n        arch_type = (**(code **)(arch_files[1] + 0x1e8))(arch,&stack0x000000e0);\n        file_size = file_size_limit;\n        if (arch_type == 0) {\n          if (file_size_limit < 0) {\n            error_message = get_modified_string_001125fa(arch);\n            tmp_string = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(tmp_string,error_message);\n          }\n          else {\n            arch_type = bfd_seek(arch,0,0);\n            if (arch_type == 0) {\n              if (DAT_001279c9 != '\\0') {\n                current_char = *current_file;\n                error_message = get_modified_string_001125fa(arch);\n                error_message_format = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(error_message_format,error_message,current_char);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; file_size != 0; file_size = file_size - buffer_size) {\n                buffer_size = 0x2000;\n                if (file_size < 0x2001) {\n                  buffer_size = file_size;\n                }\n                bytes_read = bfd_bread(buffer,buffer_size,arch);\n                arch_files = arch;\n                if ((buffer_size != bytes_read) ||\n                   (bytes_read = bfd_bwrite(buffer,buffer_size,current_file), arch_files = current_file, buffer_size != bytes_read\n                   )) {\n                  print_error_message_001126c0(0,arch_files,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*current_file,file_permissions | 0x100);\n              free(buffer);\n              format_recognized = bfd_close_all_done(current_file);\n              if (format_recognized == '\\0') {\n                print_error_message_001126c0(path_iterator,0,0,0);\n                DAT_00127a20 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_message = get_modified_string_001125fa(arch);\n            print_error_message_0011a110(error_message);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,arch,0,0);\n        }\nLAB_00104f00:\n        format_recognized = bfd_close_all_done(current_file);\n        if (format_recognized == '\\0') {\n          print_error_message_001126c0(path_iterator,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(path_iterator);\n        DAT_00127a20 = 1;\n      }\n      else {\n        if (known_format._7_1_ == '\\0') {\n          current_file = (char **)bfd_openw(path_iterator,*(undefined8 *)arch[1]);\n        }\n        else {\n          current_file = (char **)bfd_openw(path_iterator,output_file_format);\n        }\n        if (current_file == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(path_iterator,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_recognized = FUNC_00114e50(arch,current_file,return_address);\n        if (format_recognized == '\\0') {\n          arch_type = bfd_get_arch(arch);\n          if (arch_type == 0) goto LAB_00104d75;\n          format_recognized = bfd_close_all_done(current_file);\n          if (format_recognized == '\\0') {\n            print_error_message_001126c0(path_iterator,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_recognized = bfd_close(current_file);\n        if (format_recognized == '\\0') {\n          print_error_message_001126c0(path_iterator,0,0,0);\n          DAT_00127a20 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279cb != '\\0') && (stat_result == 0)) {\n          set_file_time_0011a350(path_iterator,(stat *)&stack0x00000050);\n        }\n        file_size = bfd_openr(path_iterator,output_file_format);\n        dir_list[2] = file_size;\n        *current_file_offset = file_size;\n        current_file_offset = (long *)(file_size + 0xf0);\n        current_file = (char **)bfd_openr_next_archived_file(output_file_arch,arch);\n        bfd_close(arch);\n        arch = current_file;\n      }\n      if ((DAT_00127a20 != 0) || (arch == (char **)0x0)) {\n        *current_file_offset = 0;\n        buffer = (void *)xstrdup(*output_file);\n        if (DAT_00127a20 == 0) {\n          bfd_close_function = bfd_close;\n        }\n        else {\n          bfd_close_function = bfd_close_all_done;\n        }\n        format_recognized = (*bfd_close_function)(output_file);\n        if (format_recognized == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*output_file_arch);\n        format_recognized = bfd_close(output_file_arch);\n        if (format_recognized == '\\0') {\n          DAT_00127a20 = 1;\n          print_error_message_001126c0(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      path_iterator = *arch;\n      input_archive_path = path_iterator;\n      if (*path_iterator == '/') goto LAB_0010527d;\n    }\n    current_char = path_iterator;\n    if ((*path_iterator == '.') && (current_char = path_iterator + 1, path_iterator[1] == '.')) {\n      current_char = path_iterator + 2;\n      if ((path_iterator[2] == '\\0') || (path_iterator[2] == '/')) {\nLAB_0010527d:\n        error_message = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(error_message,input_archive_path);\nLAB_00104e93:\n        DAT_00127a20 = 1;\nLAB_00114b4b:\n        while (dir_list != (undefined8 *)0x0) {\n          if (dir_list[2] == 0) {\n            rmdir((char *)dir_list[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)dir_list[1]);\n          }\n          free((void *)dir_list[1]);\n          temp_dir_info = (undefined8 *)*dir_list;\n          free(dir_list);\n          dir_list = temp_dir_info;\n        }\n        rmdir(temp_dir);\n        free(temp_dir);\n        return;\n      }\n    }\n    for (; (path_iterator = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_data_structure_0010e453",
                "param_2": "input_string",
                "param_3": "input_strings",
                "lVar1": "loop_var_1",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formatted_string",
                "uVar4": "return_value",
                "lVar5": "loop_var_2",
                "ppcVar6": "current_string",
                "lVar7": "loop_var_3"
            },
            "code": "\nundefined8 initialize_data_structure_0010e453(long param_1,char *input_string,char **input_strings)\n\n{\n  long loop_var_1;\n  char result;\n  size_t length;\n  undefined2 *formatted_string;\n  undefined8 return_value;\n  long loop_var_2;\n  char **current_string;\n  long loop_var_3;\n  \n  if (input_strings == (char **)0x0) {\n    if (input_string != (char *)0x0) {\n      length = strlen(input_string);\n      formatted_string = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formatted_string,\"xe%s:\",input_string);\nLAB_0010e578:\n      result = initialize_data_structure_0010e453_00109b52(param_1,formatted_string,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    return_value = 0;\n  }\n  else {\n    loop_var_2 = 10;\n    current_string = input_strings;\n    if (input_string != (char *)0x0) {\n      length = strlen(input_string);\n      loop_var_2 = length + 10;\n    }\n    for (; *current_string != (char *)0x0; current_string = current_string + 1) {\n      length = strlen(*current_string);\n      loop_var_2 = loop_var_2 + 0x14 + length;\n    }\n    formatted_string = (undefined2 *)xmalloc(loop_var_2);\n    if (input_string == (char *)0x0) {\n      *formatted_string = 0x65;\n      loop_var_2 = 0;\n    }\n    else {\n      loop_var_2 = *(long *)(param_1 + 0x68);\n      *(long *)(param_1 + 0x68) = loop_var_2 + 1;\n      sprintf((char *)formatted_string,\"%s:T%ld=e\",input_string,loop_var_2);\n    }\n    loop_var_3 = 0;\n    while( true ) {\n      loop_var_1 = *(long *)((long)input_strings + loop_var_3);\n      length = strlen((char *)formatted_string);\n      if (loop_var_1 == 0) break;\n      loop_var_3 = loop_var_3 + 8;\n      sprintf((char *)(undefined2 *)((long)formatted_string + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formatted_string + length) = 0x3b;\n    if (input_string == (char *)0x0) goto LAB_0010e578;\n    result = process_string_data_0010e2f0(param_1,0x80,0,0,formatted_string);\n    if ((result == '\\0') || (result = initialize_data_structure_0010e453_00109cf4(param_1,loop_var_2,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formatted_string);\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b52",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_and_resize_array_00109d5c",
                "param_1": "inputData",
                "lVar1": "arraySize",
                "uVar2": "result"
            },
            "code": "\nundefined8 initializeAndResizeArray_00109d5c(undefined8 inputData)\n\n{\n  long arraySize;\n  undefined8 result;\n  \n  arraySize = resize_and_initialize_array_00109c2e();\n  if (-1 < arraySize) {\n    result = initialize_data_structure_00109cf4(inputData,arraySize,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "FUN_00109c2e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_resize_array_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_param_set_0010ed2c",
                "param_1": "param_set",
                "param_2": "new_limit",
                "param_3": "extra_param",
                "extraout_RDX": "extra_value",
                "uVar3": "updated_value",
                "in_R10": "additional_data",
                "iVar2": "count",
                "auVar4": "result_data",
                "cVar1": "check_result"
            },
            "code": "\nundefined  [16] update_param_set_0010ed2c(long param_set,ulong new_limit,undefined8 extra_param)\n\n{\n  char check_result;\n  int count;\n  undefined8 extra_value;\n  ulong updated_value;\n  undefined8 additional_data;\n  undefined result_data [16];\n  \n  if (*(ulong *)(param_set + 0x1f0) < new_limit) {\n    *(ulong *)(param_set + 0x1f0) = new_limit;\n  }\n  if (*(long *)(param_set + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(param_set + 0x1f8) != 0) {\n      count = *(int *)(param_set + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)extra_param >> 8),1);\n      *(int *)(param_set + 0x1f8) = count;\n      if (count != 0) {\n        result_data = process_string_data_0010e2f0(param_set,0xe0,0,new_limit - *(long *)(param_set + 0x200),0,additional_data);\n        return result_data;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    check_result = process_string_data_0010e2f0(param_set,0xc0,0,*(long *)(param_set + 0x208),0);\n    if (check_result != '\\0') {\n      *(undefined8 *)(param_set + 0x208) = 0xffffffffffffffff;\n      extra_param = extra_value;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  result_data._0_8_ = updated_value & 0xffffffff;\n  result_data._8_8_ = additional_data;\n  return result_data;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_param_set_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "memoryBlock1",
                "param_2": "memoryBlock2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "block1Size",
                "uVar2": "block2Size",
                "iVar3": "comparisonResult",
                "extraout_var": "extraVar",
                "uVar4": "overallResult",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *memoryBlock1,ulong *memoryBlock2,undefined8 param3,undefined8 param4)\n\n{\n  ulong block1Size;\n  ulong block2Size;\n  int comparisonResult;\n  undefined4 extraVar;\n  ulong overallResult;\n  undefined result [16];\n  \n  overallResult = *memoryBlock1;\n  if (*memoryBlock2 <= *memoryBlock1) {\n    overallResult = *memoryBlock2;\n  }\n  comparisonResult = memcmp((void *)(memoryBlock1[3] + 3),(void *)(memoryBlock2[3] + 3),overallResult - 3);\n  overallResult = CONCAT44(extraVar,comparisonResult);\n  if (comparisonResult == 0) {\n    block1Size = memoryBlock1[8];\n    if (block1Size < memoryBlock2[7]) {\n      overallResult = 0xffffffff;\n    }\n    else {\n      block2Size = memoryBlock2[8];\n      if (block2Size < memoryBlock1[7]) {\n        overallResult = 1;\n      }\n      else {\n        overallResult = 0xffffffff;\n        if (memoryBlock2[7] <= memoryBlock1[7]) {\n          if (block2Size < block1Size) {\n            overallResult = 1;\n          }\n          else {\n            overallResult = 0xffffffff;\n            if (block2Size <= block1Size) {\n              if (memoryBlock1[2] == 0x100) {\n                overallResult = (ulong)-(uint)(memoryBlock2[2] != 0x100);\n              }\n              else {\n                overallResult = (ulong)(memoryBlock2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param4;\n  result._0_8_ = overallResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "parse_build_attribute_notes_001163d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_size",
                "param_4": "output",
                "uVar1": "result",
                "uVar2": "val1",
                "uVar3": "val2",
                "bVar4": "flag",
                "puVar5": "ptr1",
                "iVar6": "count",
                "uVar7": "msg",
                "lVar8": "size",
                "__ptr": "reloc_buffer",
                "uVar9": "attr_size",
                "uVar10": "attr_val1",
                "uVar11": "attr_val2",
                "uVar12": "desc_size",
                "uVar13": "aligned_size",
                "__ptr_00": "temp",
                "uVar14": "temp_val1",
                "uVar15": "temp_val2",
                "uVar16": "temp_val3",
                "puVar17": "record_ptr",
                "puVar18": "record_attr",
                "cVar19": "note_type",
                "puVar20": "record_name",
                "iVar21": "loop_var",
                "puVar22": "note",
                "puVar23": "note_ptr",
                "uVar24": "temp_val4",
                "__nmemb": "num_records",
                "puVar25": "comp_ptr",
                "local_88": "version_note",
                "uStack_80": "version_note_type",
                "local_70": "note_v3",
                "local_68": "output_size",
                "local_60": "record_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong parse_build_attribute_notes_001163d0(undefined8 *input1,undefined8 *input2,ulong input_size,undefined *output)\n\n{\n  ulong result;\n  undefined8 val1;\n  undefined8 val2;\n  bool flag;\n  ulong *ptr1;\n  int count;\n  undefined8 msg;\n  long size;\n  void *reloc_buffer;\n  ulong attr_size;\n  ulong attr_val1;\n  ulong attr_val2;\n  ulong desc_size;\n  undefined *temp;\n  ulong aligned_size;\n  ulong temp_val1;\n  ulong temp_val2;\n  ulong temp_val3;\n  ulong *record_ptr;\n  undefined *record_attr;\n  char note_type;\n  undefined *record_name;\n  int loop_var;\n  undefined *note;\n  ulong *note_ptr;\n  ulong temp_val4;\n  size_t num_records;\n  ulong *comp_ptr;\n  byte bVar26;\n  ulong version_note;\n  ulong version_note_type;\n  ulong note_v3;\n  ulong output_size;\n  ulong *record_array;\n  \n  bVar26 = 0;\n  size = bfd_get_reloc_upper_bound();\n  output_size = input_size;\n  if (0 < size) {\n    reloc_buffer = (void *)xmalloc(size);\n    size = bfd_canonicalize_reloc(input1,input2,reloc_buffer,DAT_001278b0);\n    free(reloc_buffer);\n    if (size != 0) {\n      if (_DAT_00127a24 == 0) {\n        val1 = *input1;\n        val2 = *input2;\n        msg = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(msg,val1,val2);\n      }\n      record_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  record_array = (ulong *)xcalloc(input_size / 0xc,0x48,input_size % 0xc);\n  version_note = 0;\n  note_v3 = 0;\n  temp_val3 = input_size;\n  temp_val2 = 0;\n  note_ptr = record_array;\n  temp_val1 = 0;\n  note = output;\n  while (0xb < temp_val3) {\n    attr_val1 = (**(code **)(input1[1] + 0x40))(note);\n    *note_ptr = attr_val1;\n    attr_val1 = (**(code **)(input1[1] + 0x40))(note + 4);\n    note_ptr[1] = attr_val1;\n    attr_val2 = (**(code **)(input1[1] + 0x40))(note + 8);\n    attr_val1 = *note_ptr;\n    note_ptr[2] = attr_val2;\n    desc_size = note_ptr[1];\n    aligned_size = attr_val1 + 3 & 0xfffffffffffffffc;\n    note_ptr[6] = aligned_size;\n    if (desc_size != (desc_size + 3 & 0xfffffffffffffffc)) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < attr_val2 - 0x100) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = aligned_size + desc_size + 0xc;\n    if (temp_val3 < result) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (attr_val1 < 2) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    note_ptr[3] = (ulong)(note + 0xc);\n    note_ptr[4] = (ulong)(note + aligned_size + 0xc);\n    temp_val3 = temp_val3 + (-0xc - (aligned_size + desc_size));\n    if (attr_val1 != 2) {\n      if (note[0xc] == '$') {\n        if ((note[0xd] == '\\x01') && (note[0xe] == '1')) {\n          temp_val3 = parse_build_attribute_notes_001163d0_00116490();\n          return temp_val3;\n        }\n      }\n      else if ((((4 < attr_val1) && (note[0xc] == 'G')) && (note[0xd] == 'A')) &&\n              ((note[0xe] == '$' && (note[0xf] == '\\x01')))) {\n        if (note[0x10] == '2') {\n          temp_val3 = parse_build_attribute_notes_001163d0_00116490();\n          return temp_val3;\n        }\n        if (note[0x10] == '3') {\n          temp_val3 = parse_build_attribute_notes_001163d0_00116490();\n          return temp_val3;\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    attr_size = temp_val2;\n    temp_val4 = temp_val1;\n    if (desc_size == 0) {\n      if (attr_val2 == 0x100) {\n        note_ptr[7] = version_note;\nLAB_001164af:\n        desc_size = temp_val1;\n        temp_val4 = temp_val1;\n      }\n      else {\n        note_ptr[7] = note_v3;\nLAB_0011669e:\n        attr_size = temp_val2;\n        desc_size = temp_val2;\n      }\n    }\n    else {\n      if (desc_size != 0x10) {\n        if (desc_size < 0x11) {\n          if (desc_size == 4) {\n            attr_val2 = (**(code **)(input1[1] + 0x40))();\n            desc_size = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (desc_size == 8) {\n            temp_val3 = parse_build_attribute_notes_001163d0_001086af();\n            return temp_val3;\n          }\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      attr_val2 = (**(code **)(input1[1] + 0x28))(note + aligned_size + 0xc);\n      desc_size = (**(code **)(input1[1] + 0x28))();\n      if (desc_size < attr_val2) {\n        attr_val2 = desc_size;\n      }\nLAB_00116631:\n      if (note_ptr[2] == 0x100) {\n        if (attr_val2 == 0) {\n          attr_val2 = version_note;\n        }\n        attr_val1 = *note_ptr;\n        note_ptr[7] = attr_val2;\n        temp_val4 = desc_size;\n        version_note = attr_val2;\n        if (desc_size == 0) goto LAB_001164af;\n      }\n      else {\n        if (attr_val2 == 0) {\n          attr_val2 = note_v3;\n        }\n        attr_val1 = *note_ptr;\n        note_ptr[7] = attr_val2;\n        attr_size = desc_size;\n        note_v3 = attr_val2;\n        if (desc_size == 0) goto LAB_0011669e;\n      }\n    }\n    note_ptr[8] = desc_size;\n    if (*(char *)((note_ptr[3] - 1) + attr_val1) != '\\0') {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_ptr = note_ptr + 9;\n    temp_val2 = attr_size;\n    temp_val1 = temp_val4;\n    note = note + result;\n  }\n  if (temp_val3 == 0) {\n    val1 = *input1;\n    val2 = *input2;\n    msg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(msg,val1,val2);\n    num_records = ((long)note_ptr - (long)record_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(record_array,num_records,0x48,compare_memory_0011a1b0);\n    for (record_ptr = record_array; record_ptr < note_ptr; record_ptr = record_ptr + 9) {\n      temp_val3 = record_ptr[2];\n      if (temp_val3 != 0) {\n        temp_val2 = record_ptr[7];\n        temp_val1 = record_ptr[8];\n        comp_ptr = record_ptr;\n        loop_var = 0;\n        if (temp_val2 == temp_val1) {\n          record_ptr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr1 = comp_ptr;\n              comp_ptr = ptr1 + -9;\n              if (comp_ptr < record_array) goto LAB_001167f5;\n              attr_val1 = ptr1[-7];\n            } while (attr_val1 == 0);\n            if ((*comp_ptr != *record_ptr) ||\n               (count = memcmp((void *)ptr1[-6],(void *)record_ptr[3],*record_ptr), count != 0)) break;\n            desc_size = ptr1[-2];\n            attr_val2 = ptr1[-1];\n            if (temp_val2 == desc_size) {\n              if (temp_val1 == attr_val2) {\n                record_ptr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp_val1 <= attr_val2) {\n                record_ptr[2] = 0;\n                break;\n              }\n              if (attr_val2 < temp_val2) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < attr_val2) || (temp_val2 <= (attr_val2 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((temp_val3 == 0x101) == (attr_val1 == 0x101)) {\n                if (attr_val2 <= temp_val1) {\n                  attr_val2 = temp_val1;\n                }\n                if (desc_size < temp_val2) {\n                  temp_val2 = desc_size;\n                }\n                ptr1[-1] = attr_val2;\n                ptr1[-2] = temp_val2;\n                record_ptr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (desc_size <= temp_val2) goto LAB_001167a6;\n              if (attr_val2 < temp_val2) goto LAB_0010852c;\n              if (temp_val1 < temp_val2) {\n                if ((0xfffffffffffffff0 < temp_val1) || (desc_size <= (temp_val1 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp_val1 != attr_val2) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            flag = loop_var < 0x11;\n            loop_var = loop_var + 1;\n          } while (flag);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(record_array,num_records,0x48,compare_records_0011a250);\n    temp = (undefined *)xmalloc(input_size * 2);\n    version_note_type = 0;\n    note_v3 = 0;\n    note = temp;\n    for (record_ptr = record_array; record_ptr < note_ptr; record_ptr = record_ptr + 9) {\n      if (record_ptr[2] != 0) {\n        record_attr = note + 0xc;\n        if ((record_ptr[7] == note_v3) && (record_ptr[8] == version_note_type)) {\n          (**(code **)(input1[1] + 0x50))(*record_ptr,note);\n          (**(code **)(input1[1] + 0x50))(0,note + 4);\n          (**(code **)(input1[1] + 0x50))(record_ptr[2],note + 8);\n          temp_val2 = record_ptr[6];\n          temp_val3 = *record_ptr;\n          note = (undefined *)record_ptr[3];\n          record_name = record_attr;\n          for (temp_val1 = temp_val3; temp_val1 != 0; temp_val1 = temp_val1 - 1) {\n            *record_name = *note;\n            note = note + (ulong)bVar26 * -2 + 1;\n            record_name = record_name + (ulong)bVar26 * -2 + 1;\n          }\n          if (temp_val3 < temp_val2) {\n            for (size = temp_val2 - temp_val3; size != 0; size = size + -1) {\n              *record_name = 0;\n              record_name = record_name + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          note = record_attr + temp_val2;\n        }\n        else {\n          (**(code **)(input1[1] + 0x50))();\n          if (*(int *)(input1[1] + 8) == 5) {\n            note_type = (*(char *)(input1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            note_type = '\\b';\n          }\n          (**(code **)(input1[1] + 0x50))(note_type,note + 4);\n          (**(code **)(input1[1] + 0x50))(record_ptr[2],note + 8);\n          temp_val3 = *record_ptr;\n          note = (undefined *)record_ptr[3];\n          record_name = record_attr;\n          for (temp_val2 = temp_val3; temp_val2 != 0; temp_val2 = temp_val2 - 1) {\n            *record_name = *note;\n            note = note + (ulong)bVar26 * -2 + 1;\n            record_name = record_name + (ulong)bVar26 * -2 + 1;\n          }\n          temp_val2 = record_ptr[6];\n          if (temp_val3 < temp_val2) {\n            for (size = temp_val2 - temp_val3; size != 0; size = size + -1) {\n              *record_name = 0;\n              record_name = record_name + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          size = input1[1];\n          record_attr = record_attr + temp_val2;\n          note = record_attr + 8;\n          if ((*(int *)(size + 8) == 5) && (*(char *)(input1[0x22] + 4) == '\\x02')) {\n            (**(code **)(size + 0x38))(record_ptr[7],record_attr);\n            (**(code **)(input1[1] + 0x38))(record_ptr[8],note);\n            note = record_attr + 0x10;\n          }\n          else {\n            (**(code **)(size + 0x50))(record_ptr[7],record_attr);\n            (**(code **)(input1[1] + 0x50))(record_ptr[8],record_attr + 4);\n          }\n          note_v3 = record_ptr[7];\n          version_note_type = record_ptr[8];\n        }\n      }\n    }\n    temp_val2 = (long)note - (long)temp;\n    temp_val3 = temp_val2;\n    note = temp;\n    output_size = input_size;\n    if (temp_val2 < input_size) {\n      for (; output_size = temp_val2, temp_val3 != 0; temp_val3 = temp_val3 - 1) {\n        *output = *note;\n        note = note + (ulong)bVar26 * -2 + 1;\n        output = output + (ulong)bVar26 * -2 + 1;\n      }\n    }\n    free(temp);\n  }\n  else {\n    size = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (size != 0) {\n      bfd_set_error(0x11);\n      print_error_message_001126c0(0,input1,input2,size);\n      DAT_00127a20 = 1;\n    }\n  }\nLAB_001166f8:\n  free(record_array);\n  return output_size;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xcalloc",
                "free",
                "xmalloc",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "file",
                "param_2": "errorCode",
                "uVar1": "defaultText",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *file,int errorCode)\n\n{\n  undefined8 defaultText;\n  char *message;\n  \n  defaultText = DAT_001275e0;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(file,message,defaultText);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(file,message);\n  print_supported_targets_00104a35(DAT_001275e0,file);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_string_and_compare_00108c86",
                "param_1": "input_ptr",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "__s": "string_ptr",
                "__s1": "sub_string_ptr",
                "puVar4": "new_string_ptr",
                "lVar5": "string_length_minus_1",
                "puVar6": "current_char_ptr",
                "uVar7": "return_value",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_string_and_compare_00108c86(long *input_ptr)\n\n{\n  char result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *new_string_ptr;\n  long string_length_minus_1;\n  char *string_ptr;\n  char *sub_string_ptr;\n  undefined2 *current_char_ptr;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  string_length_minus_1 = *input_ptr;\n  string_ptr = (char *)(string_length_minus_1 + 4);\n  result = compare_strings_00113fb0(string_ptr,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = compare_strings_00113fb0(string_ptr,\"bsdrv-\");\n    if (result == '\\0') {\n      result = compare_strings_00113fb0(string_ptr,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      string_ptr = (char *)(string_length_minus_1 + 6);\n      return_value = 0xc;\n    }\n    else {\n      string_ptr = (char *)(string_length_minus_1 + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(string_ptr);\n  new_string_ptr = (undefined2 *)xmalloc(string_length + 8);\n  sub_string_ptr = string_ptr + 4;\n  current_char_ptr = new_string_ptr;\n  for (string_length_minus_1 = string_length + 1; string_length_minus_1 != 0; string_length_minus_1 = string_length_minus_1 + -1) {\n    *(char *)current_char_ptr = *string_ptr;\n    string_ptr = string_ptr + (ulong)flag * -2 + 1;\n    current_char_ptr = (undefined2 *)((long)current_char_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(new_string_ptr + 1) = 0x69;\n  *new_string_ptr = 0x6570;\n  comparison_result = strcmp(sub_string_ptr,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_string_ptr + 7) = 0x36;\n    *(undefined2 *)((long)new_string_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(sub_string_ptr,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_string_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(sub_string_ptr,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_string_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_string_and_compare_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "execute_error_handling_001053d5",
                "unaff_R12": "errorInfo",
                "unaff_R14": "errorMessage",
                "print_error_message_0011a110": "printErrorMessage",
                "bfd_close_all_done": "closeBfdAndMarkDone"
            },
            "code": "\nundefined4 executeErrorHandling_001053d5(void)\n\n{\n  long errorInfo;\n  undefined8 *errorMessage;\n  \n  printErrorMessage(*errorMessage);\n  *(undefined4 *)(errorInfo + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(errorInfo + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "execute_error_handling_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_process_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "unaffessed_EBP",
                "unaff_R14": "unaddressed_R14"
            },
            "code": "\nvoid validate_AND_process_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint unaffessed_EBP;\n  long unaddressed_R14;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((unaffessed_EBP & 0x10) == 0)) && ((unaffessed_EBP & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((unaffessed_EBP & 0x40) == 0)) && ((unaffessed_EBP & 0x60) != 0x60)) {\n      *(uint *)(unaddressed_R14 + 0x14) = flags | unaffessed_EBP;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "validate_and_process_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "count",
                "puVar3": "destPtr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long count;\n  undefined *destPtr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (count = (long)length; count != 0; count = count + -1) {\n    *destPtr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    destPtr = destPtr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010afd5",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_fill_slots_0010da0b",
                "param_1": "slot_array",
                "param_2": "num_slots",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "uVar1": "errorMsg",
                "plVar2": "new_slot",
                "lVar3": "offset",
                "lVar4": "counter",
                "uVar5": "temp",
                "bVar6": "flag",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_fill_slots_0010da0b(long **slot_array,ulong num_slots,undefined8 arg_3,undefined8 arg_4)\n\n{\n  undefined8 errorMsg;\n  long *new_slot;\n  long offset;\n  long counter;\n  ulong temp;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  temp = num_slots;\n  if ((long)num_slots < 0x3e90) {\n    for (; 0xf < (long)temp; temp = temp - 0x10) {\n      if (*slot_array == (long *)0x0) {\n        new_slot = (long *)xmalloc(0x88);\n        *slot_array = new_slot;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)new_slot = 0;\n          new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_array = (long **)*slot_array;\n    }\n    offset = (num_slots >> 4) * -0x10;\n    if ((long)num_slots < 0) {\n      offset = 0;\n    }\n    if (*slot_array == (long *)0x0) {\n      new_slot = (long *)xmalloc(0x88);\n      *slot_array = new_slot;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)new_slot = 0;\n        new_slot = (long *)((long)new_slot + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = arg_4;\n    result._0_8_ = *slot_array + num_slots + offset + 1;\n    return result;\n  }\n  errorMsg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(errorMsg,num_slots);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_00112a33",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_fill_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "create_initialized_buffer_00112894",
                "param_1": "data",
                "param_2": "byte_value",
                "puVar1": "buffer",
                "puVar2": "current_ptr",
                "lVar3": "counter",
                "bVar4": "iteration",
                "xmalloc": "allocate_memory"
            },
            "code": "\nundefined8 *\ncreate_initialized_buffer_00112894(undefined8 data,undefined byte_value,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *buffer;\n  undefined8 *current_ptr;\n  long counter;\n  byte iteration;\n  \n  iteration = 0;\n  buffer = (undefined8 *)xmalloc(0x1b0);\n  current_ptr = buffer;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)current_ptr = 0;\n    current_ptr = (undefined8 *)((long)current_ptr + (ulong)iteration * -8 + 4);\n  }\n  *buffer = data;\n  *(undefined *)(buffer + 1) = byte_value;\n  buffer[2] = param_3;\n  buffer[3] = param_4;\n  *(undefined4 *)(buffer + 0x10) = 1;\n  current_ptr = (undefined8 *)xmalloc(8);\n  buffer[0xd] = 0xffffffffffffffff;\n  buffer[0x11] = current_ptr;\n  *current_ptr = 0;\n  return buffer;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "create_initialized_buffer_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_ptr_00109b2f",
                "param_1": "sourcePtr",
                "__ptr": "targetPtr",
                "puVar1": "extractedPtr"
            },
            "code": "\nundefined8 * extractAndFreePtr_00109b2f(long sourcePtr)\n\n{\n  undefined8 *targetPtr;\n  undefined8 *extractedPtr;\n  \n  targetPtr = *(undefined8 **)(sourcePtr + 0x60);\n  if (targetPtr != (undefined8 *)0x0) {\n    extractedPtr = (undefined8 *)targetPtr[1];\n    *(undefined8 *)(sourcePtr + 0x60) = *targetPtr;\n    free(targetPtr);\n    return extractedPtr;\n  }\n  return targetPtr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a94e",
                "FUN_0010a0e9",
                "FUN_0010e918",
                "FUN_0010a83e",
                "FUN_0010a181",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_0010a77a",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e7c2",
                "FUN_0010b948",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "extract_and_free_ptr_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "filename",
                "param_2": "symbol_name",
                "param_3": "target_name",
                "param_4": "return_value",
                "ppcVar1": "symbol_pair",
                "pcVar2": "dup_symbol",
                "lVar3": "symbol_entry",
                "uVar4": "error_message",
                "plVar5": "slot_pointer"
            },
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 filename,char *symbol_name,char *target_name,undefined8 return_value)\n\n{\n  char **symbol_pair;\n  char *dup_symbol;\n  long symbol_entry;\n  undefined8 error_message;\n  long *slot_pointer;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  dup_symbol = strdup(symbol_name);\n  *symbol_pair = dup_symbol;\n  dup_symbol = strdup(target_name);\n  error_message = DAT_001278d0;\n  symbol_pair[1] = dup_symbol;\n  symbol_entry = htab_find(error_message,symbol_pair);\n  if (symbol_entry != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,filename,symbol_name);\n  }\n  symbol_entry = htab_find(DAT_001278c8,target_name);\n  if (symbol_entry != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,filename,target_name);\n  }\n  slot_pointer = (long *)htab_find_slot(DAT_001278d0,symbol_pair,1);\n  error_message = DAT_001278c8;\n  *slot_pointer = (long)symbol_pair;\n  dup_symbol = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(error_message,dup_symbol,1);\n  *symbol_pair = dup_symbol;\n  return return_value;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext",
                "strdup",
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "process_string_data_0010e9a0",
                "param_1": "value1",
                "param_2": "inputString",
                "param_3": "option",
                "param_4": "value2",
                "lVar1": "count",
                "uVar2": "result",
                "__s": "str1",
                "__s_00": "str2",
                "sVar3": "inputStringLength",
                "sVar4": "str1Length",
                "__s_01": "outputString",
                "pcVar5": "flagString",
                "uVar6": "flagValue"
            },
            "code": "\nundefined4 processStringData_0010e9a0(long value1,char *inputString,undefined4 option,undefined8 value2)\n\n{\n  long count;\n  undefined4 result;\n  byte *str1;\n  byte *str2;\n  size_t inputStringLength;\n  size_t str1Length;\n  char *outputString;\n  char *flagString;\n  undefined8 flagValue;\n  \n  str1 = (byte *)extract_and_free_ptr_00109b2f();\n  switch(option) {\n  case 1:\n    flagString = \"G\";\n    flagValue = 0x20;\n    break;\n  case 2:\n    flagString = \"S\";\n    flagValue = 0x26;\n    break;\n  case 3:\n    flagString = \"V\";\n    flagValue = 0x26;\n    break;\n  case 4:\n    flagString = \"\";\n    flagValue = 0x80;\n    if (((&_sch_istable)[(ulong)*str1 * 2] & 4) == 0) {\n      count = *(long *)(value1 + 0x68);\n      *(long *)(value1 + 0x68) = count + 1;\n      inputStringLength = strlen((char *)str1);\n      str2 = (byte *)xmalloc(inputStringLength + 0x14);\n      sprintf((char *)str2,\"%ld=%s\",count,str1);\n      free(str1);\n      str1 = str2;\n    }\n    break;\n  case 5:\n    flagString = \"r\";\n    flagValue = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputStringLength = strlen(inputString);\n  str1Length = strlen((char *)str1);\n  outputString = (char *)xmalloc(inputStringLength + 3 + str1Length);\n  sprintf(outputString,\"%s:%s%s\",inputString,flagString,str1);\n  free(str1);\n  result = process_string_data_0010e2f0(value1,flagValue,0,value2,outputString);\n  if ((char)result != '\\0') {\n    free(outputString);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_data_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_section_error_and_exit_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printSectionErrorAndExit_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,sectionValue);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_section_error_and_exit_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_error_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "translateErrorMessage",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid handleBadNumberError_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  printErrorAndExit(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_bad_number_error_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareStrings",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStrings,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "free",
                "htab_hash_string",
                "htab_create_alloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "rbx",
                "unaff_RBP": "rbp",
                "unaff_R12": "r12",
                "unaff_R14B": "r14b",
                "unaff_R15": "r15",
                "lVar1": "errMsgPtr",
                "lVar2": "valuePtr",
                "cVar3": "status",
                "lVar4": "errMsg",
                "lVar5": "matchingValue"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long errMsgPtr;\n  long valuePtr;\n  char status;\n  long errMsg;\n  long matchingValue;\n  long rbx;\n  long rbp;\n  long r12;\n  char r14b;\n  long r15;\n  \n  errMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    errMsgPtr = *(long *)(rbx + 0xd0);\n    matchingValue = find_matching_value_00115d00(errMsgPtr,*(undefined8 *)(rbx + 0xe0));\n    if ((matchingValue != 0) &&\n       (valuePtr = *(long *)(r12 + 8), *(uint *)(matchingValue + 0x18) = *(uint *)(matchingValue + 0x18) | 0x20,\n       *(int *)(valuePtr + 8) == 5)) {\n      *(long *)(errMsgPtr + 0xb0) = matchingValue;\n      status = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (status == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  status = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (status == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (r14b != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (errMsg != 0) {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "dcgettext",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "get_file_of_type_00109022",
                "param_1": "fileNumber",
                "param_2": "fileIndices",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "fileIndex",
                "pcVar2": "errorMessage",
                "plVar3": "fileEntry",
                "lVar4": "loopCounter",
                "uVar5": "fileType",
                "pplVar6": "filePointers",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] getFileOfType_00109022(long fileNumber,uint *fileIndices,undefined8 param3,undefined8 param4)\n\n{\n  uint fileIndex;\n  char *errorMessage;\n  long *fileEntry;\n  long loopCounter;\n  uint fileType;\n  long **filePointers;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  fileType = *fileIndices;\n  fileIndex = fileIndices[1];\n  if (((int)fileType < 0) || (*(uint *)(fileNumber + 0x80) <= fileType)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)fileType);\n  }\n  else {\n    if (-1 < (int)fileIndex) {\n      filePointers = (long **)(*(long *)(fileNumber + 0x88) + (long)(int)fileType * 8);\n      for (fileType = fileIndex; 0xf < (int)fileType; fileType = fileType - 0x10) {\n        if (*filePointers == (long *)0x0) {\n          fileEntry = (long *)xmalloc(0x88);\n          *filePointers = fileEntry;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileEntry = 0;\n            fileEntry = (long *)((long)fileEntry + (ulong)byteVar * -8 + 4);\n          }\n        }\n        filePointers = (long **)*filePointers;\n      }\n      if (*filePointers == (long *)0x0) {\n        fileEntry = (long *)xmalloc(0x88);\n        *filePointers = fileEntry;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileEntry = 0;\n          fileEntry = (long *)((long)fileEntry + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileEntry = *filePointers + (long)(int)((fileIndex >> 4) * -0x10 + fileIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)fileIndex);\n  }\n  fileEntry = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = fileEntry;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_file_of_type_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_0010c05d",
                "param_1": "file_index",
                "param_2": "variable_index",
                "param_3": "value",
                "param_4": "type",
                "auVar1": "output",
                "uVar2": "result",
                "piVar3": "allocated_memory",
                "cVar4": "temp_flag",
                "lVar5": "loop_counter",
                "lVar6": "data_structure",
                "piVar7": "temp_memory",
                "bVar8": "is_false",
                "auVar9": "final_result"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_debug_0010c05d(long file_index,long variable_index,ulong value,int type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined output [16];\n  undefined8 result;\n  int *allocated_memory;\n  char temp_flag;\n  long loop_counter;\n  long data_structure;\n  int *temp_memory;\n  byte is_false;\n  undefined final_result [16];\n  \n  is_false = 0;\n  if (variable_index == 0) {\n    output._8_8_ = 0;\n    output._0_8_ = value;\n    return output << 0x40;\n  }\n  if (value != 0) {\n    if ((*(long *)(file_index + 8) == 0) || (data_structure = *(long *)(file_index + 0x10), data_structure == 0)) {\n      result = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      if (type - 1U < 2) {\n        data_structure = data_structure + 0x10;\n        temp_flag = (type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_index + 0x20) == 0) {\n        data_structure = data_structure + 0x10;\n        temp_flag = '\\0';\n      }\n      else {\n        data_structure = *(long *)(file_index + 0x20) + 0x28;\n        temp_flag = '\\0';\n      }\n      data_structure = initialize_data_structure_00112925(data_structure,variable_index,2,temp_flag);\n      if (data_structure != 0) {\n        allocated_memory = (int *)xmalloc(0x18);\n        temp_memory = allocated_memory + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *temp_memory = 0;\n          temp_memory = temp_memory + (ulong)is_false * -2 + 1;\n        }\n        *allocated_memory = type;\n        result = 1;\n        *(ulong *)(allocated_memory + 2) = value;\n        *(undefined8 *)(allocated_memory + 4) = param_5;\n        *(int **)(data_structure + 0x20) = allocated_memory;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  result = 0;\nLAB_0010c12e:\n  final_result._8_8_ = param_6;\n  final_result._0_8_ = result;\n  return final_result;\n}\n\n",
            "called": [
                "FUN_00112925",
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c139",
                "FUN_0010c1c6"
            ],
            "imported": false,
            "current_name": "record_variable_debug_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_increment_data_00109d97",
                "param_1": "data_structure",
                "local_40": "formatted_string",
                "lVar1": "current_value"
            },
            "code": "\nvoid initialize_or_increment_data_00109d97(long data_structure)\n\n{\n  long current_value;\n  char formatted_string [40];\n  \n  if (*(long *)(data_structure + 0x70) != 0) {\n    initialize_data_structure_00109cf4(data_structure,*(long *)(data_structure + 0x70),0);\n    return;\n  }\n  current_value = *(long *)(data_structure + 0x68);\n  *(long *)(data_structure + 0x68) = current_value + 1;\n  sprintf(formatted_string,\"%ld=%ld\",current_value,current_value);\n  initialize_data_structure_00109b52(data_structure,formatted_string,current_value,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_00112c1f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_data_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "parse_build_attribute_notes_001086af",
                "uVar1": "returnValue",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "bVar4": "isConditionTrue",
                "puVar5": "ptrVar1",
                "iVar6": "loopCounter",
                "lVar7": "stringLength",
                "uVar8": "tempVar3",
                "uVar9": "minValue",
                "uVar10": "tempVar4",
                "uVar11": "param7",
                "uVar12": "param7Copy",
                "puVar15": "param11",
                "uVar13": "param8",
                "uVar14": "memSize",
                "__ptr": "ptr1",
                "in_RCX": "param0",
                "unaff_RBX": "unaffReg1",
                "unaff_RBP": "unaffReg2",
                "puVar16": "ptr2",
                "cVar17": "charVar1",
                "puVar18": "ptr3",
                "puVar19": "ptr4",
                "unaff_R12": "unaffReg3",
                "unaff_R13": "unaffReg4",
                "uVar20": "unaffReg5",
                "__nmemb": "size",
                "unaff_R14": "param14",
                "puVar21": "ptr5",
                "bVar22": "tempVar5",
                "iVar23": "tempVar6",
                "unaff_retaddr": "unaffReg6",
                "param_7": "param0",
                "param_8": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "param4",
                "in_stack_00000030": "param5",
                "in_stack_00000038": "param6",
                "param_13": "param7",
                "param_14": "param8"
            },
            "code": "\nulong parse_build_attribute_notes_001086af(void)\n\n{\n  ulong returnValue;\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  bool isConditionTrue;\n  ulong *ptrVar1;\n  int loopCounter;\n  long stringLength;\n  undefined8 tempVar3;\n  ulong minValue;\n  ulong tempVar4;\n  ulong param7;\n  undefined *ptr1;\n  ulong param0;\n  ulong param7Copy;\n  ulong param8;\n  ulong memSize;\n  ulong unaffReg1;\n  ulong unaffReg2;\n  ulong *param11;\n  undefined *ptr2;\n  char charVar1;\n  undefined *ptr3;\n  undefined *ptr4;\n  ulong *unaffReg3;\n  ulong unaffReg4;\n  ulong unaffReg5;\n  size_t size;\n  undefined8 *param14;\n  ulong *ptr5;\n  byte tempVar5;\n  int tempVar6;\n  ulong unaffReg6;\n  ulong param0;\n  uint param1;\n  ulong param2;\n  ulong param3;\n  ulong *param4;\n  undefined *param5;\n  uint param6;\n  uint param7;\n  undefined8 *param8;\n  \n  tempVar5 = 0;\n  param0 = param0;\n  minValue = (**(code **)(param14[1] + 0x40))();\n  tempVar4 = (**(code **)(param14[1] + 0x40))(unaffReg3[4] + 4);\nLAB_0011662a:\n  param8 = unaffReg2;\n  unaffReg5 = unaffReg4;\n  if (tempVar4 < minValue) {\n    minValue = tempVar4;\n  }\n  do {\n    param7 = param0;\n    param7Copy = param0;\n    param11 = unaffReg3;\n    if (unaffReg3[2] == 0x100) {\n      if (minValue == 0) {\n        minValue = unaffReg6;\n      }\n      memSize = *unaffReg3;\n      unaffReg3[7] = minValue;\n      unaffReg2 = param8;\n      unaffReg4 = tempVar4;\n      unaffReg6 = minValue;\n      if (tempVar4 == 0) goto LAB_001164af;\n    }\n    else {\n      if (minValue == 0) {\n        minValue = param2;\n      }\n      memSize = *unaffReg3;\n      unaffReg3[7] = minValue;\n      unaffReg2 = tempVar4;\n      unaffReg4 = unaffReg5;\n      param2 = minValue;\n      if (tempVar4 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    param11[8] = tempVar4;\n    if (*(char *)((param11[3] - 1) + memSize) != '\\0') {\n      stringLength = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaffReg3 = param11 + 9;\n    if (unaffReg1 < 0xc) {\n      if (unaffReg1 != 0) {\n        stringLength = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((param6 | param7 | param1) != 0) {\n        if (((param7 | param1) == 0) || (param6 == 0)) {\n          if (param7 == 0) {\n            if (param1 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param1 == 0) goto LAB_001166f8;\n        }\n        stringLength = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      tempVar1 = *param14;\n      tempVar2 = *param8;\n      tempVar3 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(tempVar3,tempVar1,tempVar2);\nLAB_0011671b:\n      size = ((long)unaffReg3 - (long)param4 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param4,size,0x48,compare_memory_0011a1b0);\n      param11 = param4;\n      goto LAB_001167f9;\n    }\n    tempVar4 = (**(code **)(param14[1] + 0x40))(param7Copy);\n    *unaffReg3 = tempVar4;\n    tempVar4 = (**(code **)(param14[1] + 0x40))(param7Copy + 4);\n    param11[10] = tempVar4;\n    minValue = (**(code **)(param14[1] + 0x40))(param7Copy + 8);\n    memSize = *unaffReg3;\n    param11[0xb] = minValue;\n    tempVar4 = param11[10];\n    param8 = memSize + 3 & 0xfffffffffffffffc;\n    param11[0xf] = param8;\n    if (tempVar4 != (tempVar4 + 3 & 0xfffffffffffffffc)) {\n      stringLength = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < minValue - 0x100) {\n      stringLength = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    param7 = param8 + tempVar4 + 0xc;\n    if (unaffReg1 < param7) {\n      stringLength = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (memSize < 2) {\n      stringLength = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    param11[0xc] = param7Copy + 0xc;\n    returnValue = param7Copy + 0xc + param8;\n    param11[0xd] = returnValue;\n    unaffReg1 = unaffReg1 + (-0xc - (param8 + tempVar4));\n    param7 = param7Copy + param7;\n    if (memSize != 2) {\n      if (*(char *)(param7Copy + 0xc) == '$') {\n        if ((*(char *)(param7Copy + 0xd) == '\\x01') && (*(char *)(param7Copy + 0xe) == '1')) {\n          tempVar4 = parse_build_attribute_notes_001086af_00116490();\n          return tempVar4;\n        }\n      }\n      else if ((((4 < memSize) && (*(char *)(param7Copy + 0xc) == 'G')) &&\n               (*(char *)(param7Copy + 0xd) == 'A')) &&\n              ((*(char *)(param7Copy + 0xe) == '$' && (*(char *)(param7Copy + 0xf) == '\\x01')))) {\n        if (*(char *)(param7Copy + 0x10) == '2') {\n          tempVar4 = parse_build_attribute_notes_001086af_00116490();\n          return tempVar4;\n        }\n        if (*(char *)(param7Copy + 0x10) == '3') {\n          tempVar4 = parse_build_attribute_notes_001086af_00116490();\n          return tempVar4;\n        }\n        stringLength = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    param8 = unaffReg2;\n    unaffReg5 = unaffReg4;\n    if (tempVar4 == 0) {\n      if (minValue == 0x100) {\n        param11[0x10] = unaffReg6;\nLAB_001164af:\n        param7Copy = param7;\n        tempVar4 = unaffReg5;\n        param11 = unaffReg3;\n        unaffReg4 = unaffReg5;\n      }\n      else {\n        param11[0x10] = param2;\nLAB_0011669e:\n        unaffReg2 = param8;\n        param7Copy = param7;\n        tempVar4 = param8;\n        param11 = unaffReg3;\n        unaffReg4 = unaffReg5;\n      }\n      goto LAB_001164bb;\n    }\n    if (tempVar4 == 0x10) break;\n    if (0x10 < tempVar4) {\nLAB_00116679:\n      stringLength = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (stringLength != 0) {\n        bfd_set_error(0x11);\n        print_error_message_001126c0(0,param14,param8,stringLength);\n        DAT_00127a20 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (tempVar4 != 4) {\n      if (tempVar4 == 8) {\n        tempVar4 = parse_build_attribute_notes_001086af();\n        return tempVar4;\n      }\n      goto LAB_00116679;\n    }\n    param0 = param7;\n    minValue = (**(code **)(param14[1] + 0x40))();\n    tempVar4 = 0xffffffffffffffff;\n  } while( true );\n  param0 = param7;\n  minValue = (**(code **)(param14[1] + 0x28))(returnValue);\n  tempVar4 = (**(code **)(param14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaffReg3 <= param11) {\n    qsort(param4,size,0x48,compare_records_0011a250);\n    ptr1 = (undefined *)xmalloc(param3 * 2);\n    param0 = 0;\n    param2 = 0;\n    ptr4 = ptr1;\n    for (param11 = param4; param11 < unaffReg3; param11 = param11 + 9) {\n      if (param11[2] != 0) {\n        ptr3 = ptr4 + 4;\n        ptr2 = ptr4 + 0xc;\n        if ((param11[7] == param2) && (param11[8] == param0)) {\n          (**(code **)(param14[1] + 0x50))(*param11,ptr4);\n          (**(code **)(param14[1] + 0x50))(0,ptr3);\n          (**(code **)(param14[1] + 0x50))(param11[2],ptr4 + 8);\n          minValue = param11[6];\n          tempVar4 = *param11;\n          ptr4 = (undefined *)param11[3];\n          ptr3 = ptr2;\n          for (param8 = tempVar4; param8 != 0; param8 = param8 - 1) {\n            *ptr3 = *ptr4;\n            ptr4 = ptr4 + (ulong)tempVar5 * -2 + 1;\n            ptr3 = ptr3 + (ulong)tempVar5 * -2 + 1;\n          }\n          if (tempVar4 < minValue) {\n            for (stringLength = minValue - tempVar4; stringLength != 0; stringLength = stringLength + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)tempVar5 * -2 + 1;\n            }\n          }\n          ptr4 = ptr2 + minValue;\n        }\n        else {\n          (**(code **)(param14[1] + 0x50))();\n          if (*(int *)(param14[1] + 8) == 5) {\n            charVar1 = (*(char *)(param14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar1 = '\\b';\n          }\n          (**(code **)(param14[1] + 0x50))(charVar1,ptr3);\n          (**(code **)(param14[1] + 0x50))(param11[2],ptr4 + 8);\n          tempVar4 = *param11;\n          ptr4 = (undefined *)param11[3];\n          ptr3 = ptr2;\n          for (minValue = tempVar4; minValue != 0; minValue = minValue - 1) {\n            *ptr3 = *ptr4;\n            ptr4 = ptr4 + (ulong)tempVar5 * -2 + 1;\n            ptr3 = ptr3 + (ulong)tempVar5 * -2 + 1;\n          }\n          minValue = param11[6];\n          if (tempVar4 < minValue) {\n            for (stringLength = minValue - tempVar4; stringLength != 0; stringLength = stringLength + -1) {\n              *ptr3 = 0;\n              ptr3 = ptr3 + (ulong)tempVar5 * -2 + 1;\n            }\n          }\n          stringLength = param14[1];\n          ptr2 = ptr2 + minValue;\n          ptr4 = ptr2 + 8;\n          if ((*(int *)(stringLength + 8) == 5) && (*(char *)(param14[0x22] + 4) == '\\x02')) {\n            (**(code **)(stringLength + 0x38))(param11[7],ptr2);\n            (**(code **)(param14[1] + 0x38))(param11[8],ptr4);\n            ptr4 = ptr2 + 0x10;\n          }\n          else {\n            (**(code **)(stringLength + 0x50))(param11[7],ptr2);\n            (**(code **)(param14[1] + 0x50))(param11[8],ptr2 + 4);\n          }\n          param2 = param11[7];\n          param0 = param11[8];\n        }\n      }\n    }\n    minValue = (long)ptr4 - (long)ptr1;\n    tempVar4 = minValue;\n    ptr4 = ptr1;\n    if (minValue < param3) {\n      for (; param3 = minValue, tempVar4 != 0; tempVar4 = tempVar4 - 1) {\n        *param5 = *ptr4;\n        ptr4 = ptr4 + (ulong)tempVar5 * -2 + 1;\n        param5 = param5 + (ulong)tempVar5 * -2 + 1;\n      }\n    }\n    free(ptr1);\nLAB_001166f8:\n    free(param4);\n    return param3;\n  }\n  if (param11[2] != 0) {\n    tempVar4 = param11[7];\n    minValue = param11[8];\n    param8 = param11[2];\n    ptr5 = param11;\n    tempVar6 = 0;\n    if (tempVar4 == minValue) {\n      param11[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptrVar1 = ptr5;\n          ptr5 = ptrVar1 + -9;\n          if (ptr5 < param4) goto LAB_001167f5;\n          unaffReg5 = ptrVar1[-7];\n        } while (unaffReg5 == 0);\n        param0 = param8;\n        if ((*ptr5 != *param11) ||\n           (loopCounter = memcmp((void *)ptrVar1[-6],(void *)param11[3],*param11), loopCounter != 0)) break;\n        param8 = ptrVar1[-2];\n        param7 = ptrVar1[-1];\n        if (tempVar4 == param8) {\n          if (minValue == param7) {\n            param11[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (minValue <= param7) {\n            param11[2] = 0;\n            break;\n          }\n          if (param7 < tempVar4) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < param7) || (tempVar4 <= (param7 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n          }\nLAB_001167b8:\n          if ((param0 == 0x101) == (unaffReg5 == 0x101)) {\n            if (param7 <= minValue) {\n              param7 = minValue;\n            }\n            if (param8 < tempVar4) {\n              tempVar4 = param8;\n            }\n            ptrVar1[-1] = param7;\n            ptrVar1[-2] = tempVar4;\n            param11[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (param8 <= tempVar4) goto LAB_001167a6;\n          if (param7 < tempVar4) goto LAB_0010852c;\n          if (minValue < tempVar4) {\n            if ((0xfffffffffffffff0 < minValue) || (param8 <= (minValue + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (minValue != param7) goto LAB_001167b8;\n        }\nprocess_records_00116852:\n        isConditionTrue = tempVar6 < 0x11;\n        param8 = param0;\n        tempVar6 = tempVar6 + 1;\n      } while (isConditionTrue);\n    }\n  }\nLAB_001167f5:\n  param11 = param11 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_0011a1b0",
                "qsort",
                "FUN_00116490",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_0010847a",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "update_data_0010add5"
            },
            "code": "\nvoid update_data_0010add5(void)\n\n{\n  update_data_0010add5_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_data_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_memory_00113e17"
            },
            "code": "\nvoid initializeMemory_00113e17(void)\n\n{\n  initialize_memory_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "dataStructurePointer",
                "param_2": "sourceString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "oldPointer",
                "puVar2": "newPointer",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long dataStructurePointer,undefined8 sourceString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 oldPointer;\n  undefined8 *newPointer;\n  undefined8 duplicatedString;\n  \n  newPointer = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  newPointer[2] = param3;\n  *(undefined (*) [16])(newPointer + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newPointer + 6) = ZEXT816(0);\n  oldPointer = *(undefined8 *)(dataStructurePointer + 0x60);\n  *(undefined *)((long)newPointer + 0x1c) = param4;\n  *(undefined4 *)(newPointer + 3) = param5;\n  *(undefined8 **)(dataStructurePointer + 0x60) = newPointer;\n  *newPointer = oldPointer;\n  newPointer[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109cf4",
                "FUN_0010a0e9",
                "FUN_0010a181",
                "FUN_00109d97",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109dfe",
                "FUN_0010a69a",
                "FUN_0010a2b9",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "input_string",
                "param_2": "overflow_flag",
                "param_3": "end_string",
                "param_4": "unused_param",
                "param_5": "result",
                "__nptr": "current_position",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_number",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *overflow_flag,char *end_string,undefined8 unused_param,undefined8 result)\n\n{\n  char *current_position;\n  int *errno_ptr;\n  ulong parsed_number;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (overflow_flag != (undefined *)0x0) {\n    *overflow_flag = 0;\n  }\n  current_position = *input_string;\n  if ((current_position < end_string) && (*current_position != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_number = strtoul(current_position,input_string,0);\n    if ((parsed_number != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (overflow_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_message_00108fe8(current_position,error_message);\n    }\n    else {\n      *overflow_flag = 1;\n    }\n  }\n  parsed_number = 0;\nLAB_00109aa9:\n  return_value._8_8_ = result;\n  return_value._0_8_ = parsed_number;\n  return return_value;\n}\n\n",
            "called": [
                "__errno_location",
                "FUN_00108fe8",
                "dcgettext",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "validate_debug_tag_type_0010c6be",
                "param_1": "file_handle",
                "param_2": "tag_name",
                "param_3": "tag_structure",
                "iVar1": "comparison_result",
                "piVar3": "initialized_tag_structure",
                "pauVar4": "memory_allocation",
                "lVar5": "data_structure_offset",
                "pcVar6": "debug_message",
                "dcgettext": "get_debug_message",
                "_stderr": "error_output",
                "uVar2": "localized_message"
            },
            "code": "\n\n\nint * validate_debug_tag_type_0010c6be(long file_handle,char *tag_name,int *tag_structure)\n\n{\n  int comparison_result;\n  undefined8 localized_message;\n  int *initialized_tag_structure;\n  undefined (*memory_allocation) [16];\n  long data_structure_offset;\n  char *debug_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_structure != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      debug_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_structure != 0x17) {\n        initialized_tag_structure = (int *)initialize_memory_00112904(0x17,0);\n        if (initialized_tag_structure == (int *)0x0) {\n          return (int *)0x0;\n        }\n        memory_allocation = (undefined (*) [16])xmalloc(0x10);\n        data_structure_offset = *(long *)(file_handle + 0x10);\n        *memory_allocation = ZEXT816(0);\n        *(int **)(*memory_allocation + 8) = tag_structure;\n        *(undefined (**) [16])(initialized_tag_structure + 4) = memory_allocation;\n        data_structure_offset = initialize_data_structure_00112925(data_structure_offset + 0x10,tag_name,1,3);\n        if (data_structure_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(data_structure_offset + 0x20) = initialized_tag_structure;\n        *(long *)*memory_allocation = data_structure_offset;\n        return initialized_tag_structure;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_structure + 4) + 8),tag_name);\n      debug_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_structure;\n      }\n    }\n    localized_message = dcgettext(0,debug_message,5);\n    fprintf(error_output,\"%s\\n\",localized_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00112925",
                "fprintf",
                "dcgettext",
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_00112a33",
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "validate_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "extract_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist_ptr",
                "param_4": "status_ptr",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "result",
                "uVar2": "count",
                "uVar3": "size",
                "uVar4": "index",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * extract_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist_ptr,undefined *status_ptr)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long result;\n  ulong count;\n  ulong size;\n  uint index;\n  char temp_buffer [9];\n  \n  size = 10;\n  count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *status_ptr = 0;\n  for (; arglist_ptr != (int *)0x0; arglist_ptr = *(int **)(arglist_ptr + 6)) {\n    if (*arglist_ptr != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist_ptr + 4) == 0) break;\n    result = extract_and_initialize_data_0010b0fa(arg1,arg2,*(long *)(arglist_ptr + 4),0,temp_buffer);\n    if (result == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *status_ptr = 1;\n    }\n    else {\n      index = (int)count + 1;\n      if ((uint)size <= index) {\n        size = (ulong)((uint)size + 10);\n        result_ptr = (void *)xrealloc(result_ptr,size << 3);\n      }\n      *(long *)((long)result_ptr + count * 8) = result;\n      count = (ulong)index;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "xrealloc",
                "fprintf",
                "free",
                "dcgettext",
                "FUN_0010b0fa",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_and_copy_section_0011a2e0",
                "param_1": "source_section",
                "param_2": "binary_file",
                "uVar1": "section_data",
                "uVar2": "error_message",
                "lVar3": "destination_section",
                "lVar4": "section_by_name"
            },
            "code": "\nlong extract_and_copy_section_0011a2e0(long source_section,long binary_file)\n\n{\n  undefined8 section_data;\n  undefined8 error_message;\n  long destination_section;\n  long section_by_name;\n  \n  destination_section = (**(code **)(*(long *)(binary_file + 8) + 0x208))(binary_file);\n  section_by_name = *(long *)(source_section + 0x20);\n  *(undefined8 *)(destination_section + 8) = *(undefined8 *)(source_section + 8);\n  *(undefined8 *)(destination_section + 0x10) = *(undefined8 *)(source_section + 0x10);\n  *(undefined4 *)(destination_section + 0x18) = *(undefined4 *)(source_section + 0x18);\n  if (section_by_name == 0) {\n    section_by_name = 0x128598;\n  }\n  else {\n    section_by_name = bfd_get_section_by_name(binary_file);\n    if (section_by_name == 0) {\n      section_data = *(undefined8 *)(source_section + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit_00119dd0(error_message,section_data);\n    }\n  }\n  *(long *)(destination_section + 0x20) = section_by_name;\n  return destination_section;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_and_copy_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_data_0010e8a9",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "uVar1": "result",
                "sVar2": "data_length",
                "__s": "formatted_data"
            },
            "code": "\nundefined4 process_data_0010e8a9(undefined8 input1,undefined8 input2,char *data)\n\n{\n  undefined4 result;\n  size_t data_length;\n  char *formatted_data;\n  \n  data_length = strlen(data);\n  formatted_data = (char *)xmalloc(data_length + 0x14);\n  sprintf(formatted_data,\"%s:c=f%g\",input1,data);\n  result = process_string_data_0010e2f0(input2,0x80,0,0,formatted_data);\n  if ((char)result != '\\0') {\n    free(formatted_data);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "remainingFlags",
                "sVar4": "flagLength",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "supportedFlags",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "iVar5": "remainingFlagLength",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 errorMessage;\n  char *commaPosition;\n  char *currentFlag;\n  char *remainingFlags;\n  size_t flagLength;\n  int remainingFlagLength;\n  uint sectionFlags;\n  char *supportedFlags;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    remainingFlags = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (remainingFlags == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaPosition = strchr(remainingFlags,0x2c);\n              if (commaPosition == (char *)0x0) {\n                flagLength = strlen(remainingFlags);\n                remainingFlagLength = (int)flagLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                remainingFlagLength = (int)commaPosition - (int)remainingFlags;\n              }\n              flagLength = (size_t)remainingFlagLength;\n              comparisonResult = strncasecmp(supportedFlags,remainingFlags,flagLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              remainingFlags = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",remainingFlags,flagLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            remainingFlags = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",remainingFlags,flagLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          remainingFlags = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",remainingFlags,flagLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        remainingFlags = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",remainingFlags,flagLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",remainingFlags,flagLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        remainingFlags = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",remainingFlags,flagLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          remainingFlags = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",remainingFlags,flagLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            remainingFlags = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",remainingFlags,flagLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              remainingFlags = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",remainingFlags,flagLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                remainingFlags = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",remainingFlags,flagLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  remainingFlags = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",remainingFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    remainingFlags = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",remainingFlags,flagLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(remainingFlagLength + 1));\n                      strncpy(commaPosition,remainingFlags,flagLength);\n                      commaPosition[flagLength] = '\\0';\n                      errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(errorMessage,commaPosition);\n                      errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(errorMessage,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    remainingFlags = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strncpy",
                "strlen",
                "dcgettext",
                "strchr",
                "xmalloc",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70",
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_is100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXIs100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_is100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f",
                "FUN_001125fa"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "unitPtr",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentUnitPtr",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "elementPtr",
                "lVar5": "listPtr",
                "puVar6": "currentElemPtr",
                "auVar7": "resultVar"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long unitPtr,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentUnitPtr;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *elementPtr;\n  long listPtr;\n  undefined8 *currentElemPtr;\n  undefined resultVar [16];\n  \n  currentUnitPtr = *(long *)(unitPtr + 8);\n  if (currentUnitPtr == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (listPtr = *(long *)(unitPtr + 0x20); listPtr != 0; listPtr = *(long *)(listPtr + 8)) {\n      if (*(undefined8 **)(listPtr + 0x28) != (undefined8 *)0x0) {\n        for (elementPtr = (undefined8 *)**(undefined8 **)(listPtr + 0x28); elementPtr != (undefined8 *)0x0;\n            elementPtr = (undefined8 *)*elementPtr) {\n          if (*(int *)((long)elementPtr + 0x14) == 0) {\n            if (*(char *)elementPtr[1] == *typeName) {\n              comparisonResult = strcmp((char *)elementPtr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (currentElemPtr = *(undefined8 **)(currentUnitPtr + 8); currentElemPtr != (undefined8 *)0x0;\n        currentElemPtr = (undefined8 *)*currentElemPtr) {\n      if ((undefined8 *)currentElemPtr[2] != (undefined8 *)0x0) {\n        for (elementPtr = *(undefined8 **)(undefined8 *)currentElemPtr[2]; elementPtr != (undefined8 *)0x0;\n            elementPtr = (undefined8 *)*elementPtr) {\n          if (*(int *)((long)elementPtr + 0x14) == 0) {\n            if (*(char *)elementPtr[1] == *typeName) {\n              comparisonResult = strcmp((char *)elementPtr[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  resultVar._8_8_ = param4;\n  resultVar._0_8_ = errorMessage;\n  return resultVar;\nLAB_00109216:\n  errorMessage = elementPtr[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "strcmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_and_calculate_0010829e",
                "unaff_EBP": "parameter",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_and_calculate_0010829e(void)\n\n{\n  undefined8 result;\n  int parameter;\n  \n  if (parameter == 5) {\n    result = check_string_length_00113ede();\n    return result;\n  }\n  if ((parameter != 4) && (parameter == 6)) {\n    result = calculate_flipped_value_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_and_calculate_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_strings_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedNumber",
                "iVar1": "defaultSize",
                "iVar2": "archIndex",
                "pcVar5": "archString",
                "uVar6": "printableArch",
                "iVar7": "index",
                "lVar8": "startIndex",
                "iVar9": "endIndex",
                "unaff_R15D": "stackValue",
                "uVar10": "stringLength",
                "uVar11": "archIndex2",
                "param_7": "endIndexCopy",
                "uStack000000000000000c": "stackValueCopy",
                "param_11": "param11",
                "param_13": "param13"
            },
            "code": "\n\n\nvoid printReverseStrings_00104943(void)\n\n{\n  int defaultSize;\n  int archIndex;\n  char *inputString;\n  long convertedNumber;\n  size_t sVar4;\n  char *archString;\n  undefined8 printableArch;\n  int index;\n  long startIndex;\n  int endIndex;\n  uint stackValue;\n  ulong stringLength;\n  uint archIndex2;\n  int endIndexCopy;\n  uint stackValueCopy;\n  undefined8 param11;\n  long param13;\n  \n  convertedNumber = strtol(inputString,(char **)0x0,10);\n  defaultSize = (int)convertedNumber;\n  endIndex = endIndexCopy;\n  stackValueCopy = stackValue;\n  if (defaultSize == 0) {\n    defaultSize = 0x50;\n  }\n  do {\n    endIndexCopy = endIndex;\n    if (param11._4_4_ <= endIndexCopy) {\n      return;\n    }\n    startIndex = (long)endIndexCopy;\n    index = (defaultSize - stackValueCopy) + -1;\n    convertedNumber = startIndex;\n    do {\n      endIndex = (int)convertedNumber;\n      if (param11._4_4_ <= endIndex) break;\n      sVar4 = strlen(*(char **)(param13 + convertedNumber * 0x60));\n      convertedNumber = convertedNumber + 1;\n      index = (index - (int)sVar4) + -1;\n    } while (-1 < index);\n    printf(\"\\n%*s\",(ulong)(stackValueCopy + 1),&DAT_0011b4a1);\n    for (convertedNumber = startIndex * 0x60; ((ulong)(uint)(endIndex - endIndexCopy) + startIndex) * 0x60 - convertedNumber != 0;\n        convertedNumber = convertedNumber + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param13 + convertedNumber));\n    }\n    index = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(index,0);\n      archIndex = strcmp(archString,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        printableArch = bfd_printable_arch_mach(index,0);\n        printf(\"%*s \",(ulong)stackValueCopy,printableArch);\n        archIndex2 = index - 2;\n        convertedNumber = startIndex * 0x60;\n        archIndex = endIndexCopy;\n        while (endIndex != archIndex) {\n          archString = *(char **)(param13 + convertedNumber);\n          if (*(char *)((long)(char **)(param13 + convertedNumber) + (ulong)archIndex2 + 8) == '\\0') {\n            sVar4 = strlen(archString);\n            for (stringLength = sVar4 & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (endIndex != archIndex) {\n            putc(0x20,_stdout);\n          }\n          convertedNumber = convertedNumber + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      index = index + 1;\n    } while (index != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "fputs",
                "strlen",
                "bfd_printable_arch_mach",
                "strtol",
                "printf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_strings_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_memory_block_00113e23",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "memory_block",
                "puVar2": "ptr_to_data"
            },
            "code": "\nlong create_memory_block_00113e23(undefined8 data_1,undefined8 data_2)\n\n{\n  long memory_block;\n  undefined8 *ptr_to_data;\n  \n  memory_block = initialize_memory_00112904(1,0);\n  if (memory_block != 0) {\n    ptr_to_data = (undefined8 *)xmalloc(0x10);\n    *ptr_to_data = data_1;\n    ptr_to_data[1] = data_2;\n    *(undefined8 **)(memory_block + 0x10) = ptr_to_data;\n  }\n  return memory_block;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_memory_block_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00108b3e",
                "FUN_0011256b",
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_message_00108fb9",
                "param_1": "errorMessage",
                "__format": "errorFormat"
            },
            "code": "\n\n\nvoid printBadStabErrorMessage_00108fb9(undefined8 errorMessage)\n\n{\n  char *errorFormat;\n  \n  errorFormat = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,errorFormat,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_message_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "extract_and_parse_number_00108ea1",
                "param_1": "input_data",
                "param_2": "output_number",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong extract_and_parse_number_00108ea1(byte **input_data,int *output_number)\n\n{\n  int iVar1;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_data;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    iVar1 = (char)*current_byte + -0x30;\n    *output_number = iVar1;\n    *input_data = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        iVar1 = iVar1 * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_data = next_byte;\n        *output_number = iVar1;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "extract_and_parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "validate_and_update_size_00108072",
                "bVar1": "flags",
                "uVar2": "dataPtr",
                "cVar3": "returnValue",
                "uVar4": "alignment",
                "lVar5": "errorString",
                "lVar6": "result1",
                "lVar7": "result2",
                "lVar8": "value1",
                "unaff_RBX": "parameters",
                "unaff_RBP": "basePointer",
                "unaff_R12": "register12",
                "unaff_R14B": "booleanValue",
                "unaff_R15": "register15"
            },
            "code": "\n\n\nvoid validateAndUpdateSize_00108072(void)\n\n{\n  byte flags;\n  undefined8 dataPtr;\n  char returnValue;\n  uint alignment;\n  long errorString;\n  long result1;\n  long result2;\n  undefined8 *parameters;\n  long basePointer;\n  long register12;\n  long value1;\n  char booleanValue;\n  long register15;\n  \n  errorString = dcgettext(0,\"failed to set size\",5);\n  value1 = parameters[6];\n  result1 = process_data_00114190(*parameters,0,0x18);\n  if (result1 == 0) {\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    dataPtr = *parameters;\n    value1 = value1 + _DAT_00127990;\n    *(long *)(register15 + 0x30) = value1;\n    *(long *)(register15 + 0x38) = value1;\n    value1 = parameters[7];\n    result1 = process_data_00114190(dataPtr,0,0x60);\n    if (result1 == 0) goto LAB_00115695;\nLAB_00115860:\n    result2 = *(long *)(result1 + 0x20);\n    if ((*(byte *)(result1 + 0x14) & 0x40) != 0) {\n      result2 = result2 + value1;\n    }\n    *(long *)(register15 + 0x38) = result2;\n    value1 = process_data_00114190(*parameters,0,0x200);\n    if (value1 != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment = *(uint *)((long)parameters + 0x7c);\n    if (alignment < 0x3f) goto LAB_001156c4;\n    errorString = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = register15;\n    parameters[0xb] = 0;\n    flags = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    result2 = *(long *)(result1 + 0x18);\n    if ((*(byte *)(result1 + 0x14) & 8) == 0) {\n      result2 = result2 + value1;\n    }\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    dataPtr = *parameters;\n    *(long *)(register15 + 0x30) = result2;\n    *(long *)(register15 + 0x38) = result2;\n    value1 = parameters[7];\n    result1 = process_data_00114190(dataPtr,0,0x60);\n    if (result1 != 0) goto LAB_00115860;\nLAB_00115695:\n    dataPtr = *parameters;\n    *(long *)(register15 + 0x38) = value1 + _DAT_00127990;\n    value1 = process_data_00114190(dataPtr,0,0x200);\n    if (value1 == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment = *(uint *)(value1 + 0x2c);\n    if (0x3e < alignment) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register15 + 0x7c) = alignment;\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = register15;\n    parameters[0xb] = 0;\n    flags = *(byte *)((long)parameters + 0x27);\n  }\n  if ((flags & 2) != 0) {\n    value1 = parameters[0x1a];\n    result1 = find_matching_value_00115d00(value1,parameters[0x1c]);\n    if ((result1 != 0) &&\n       (result2 = *(long *)(register12 + 8), *(uint *)(result1 + 0x18) = *(uint *)(result1 + 0x18) | 0x20,\n       *(int *)(result2 + 8) == 5)) {\n      *(long *)(value1 + 0xb0) = result1;\n      returnValue = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (returnValue == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  returnValue = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (returnValue == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (booleanValue != '\\0') {\n    *(undefined4 *)(*(long *)(register15 + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "dcgettext",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "validate_and_update_size_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "arg1",
                "param_4": "arg2",
                "cVar1": "charVar1",
                "__s": "string1",
                "sVar2": "strLength1",
                "__s_00": "string2",
                "lVar3": "count",
                "auVar4": "result",
                "extract_and_free_ptr_00109b2f": "extractAndFreePtr",
                "xmalloc": "allocateMemory",
                "initialize_data_structure_00109b52": "initializeDataStructure"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long dataPointer,char flag,undefined8 arg1,undefined8 arg2)\n\n{\n  char charVar1;\n  char *string1;\n  size_t strLength1;\n  char *string2;\n  long count;\n  undefined result [16];\n  \n  charVar1 = *(char *)(*(long *)(dataPointer + 0x60) + 0x1c);\n  string1 = (char *)extractAndFreePtr();\n  strLength1 = strlen(string1);\n  string2 = (char *)xmalloc(strLength1 + 0x1e);\n  if (flag == '\\0') {\n    *string2 = '\\0';\n    count = 0;\n    flag = charVar1;\n  }\n  else {\n    count = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = count + 1;\n    sprintf(string2,\"%ld=@S;\",count);\n  }\n  strLength1 = strlen(string2);\n  sprintf(string2 + strLength1,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = initializeDataStructure(dataPointer,string2,count,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(string2);\n  }\n  result._8_8_ = arg2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_and_update_data_0010ec73",
                "param_1": "data_array",
                "param_2": "data_value",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "param_5": "unused_param_3",
                "param_6": "unused_param_4",
                "iVar1": "counter",
                "cVar2": "result"
            },
            "code": "\nundefined process_and_update_data_0010ec73(long *data_array,long data_value,undefined8 unused_param_1,undefined8 unused_param_2,\n                      undefined8 unused_param_3,undefined8 unused_param_4)\n\n{\n  int counter;\n  char result;\n  \n  if (data_array[0x3c] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(data_value,data_array[1] + 8 + data_array[0x3c]);\n    data_array[0x3c] = -1;\n  }\n  if (data_array[0x3d] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(data_value,data_array[1] + 8 + data_array[0x3d]);\n    data_array[0x3d] = -1;\n  }\n  counter = *(int *)(data_array + 0x3f);\n  *(int *)(data_array + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data_array[0x40] = data_value;\n  }\n  else {\n    if ((data_array[0x41] != -1) &&\n       (result = process_string_data_0010e2f0(data_array,0xc0,0,data_array[0x41],0,unused_param_4,unused_param_2), result == '\\0')) {\n      return 0;\n    }\n    data_array[0x41] = data_value - data_array[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_and_update_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness",
                "dcgettext": "displayEndianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "fileSize",
                "param_5": "shouldSetFileTime",
                "param_6": "originalFileSize",
                "uVar1": "copyResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copyErrorCode",
                "auVar6": "returnData"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 fileSize,char shouldSetFileTime,\n            undefined8 originalFileSize)\n\n{\n  uint copyResult;\n  int *errorLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copyErrorCode;\n  undefined returnData [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copyErrorCode = 0;\n  }\n  else {\n    copyResult = copy_file_00115a90(filePermissions,destinationFilePath,fileSize);\n    copyErrorCode = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorLocation = __errno_location();\n      errorString = strerror(*errorLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetFileTime != '\\0') {\n    set_file_time_0011a350(destinationFilePath,fileSize);\n  }\n  returnData._8_8_ = originalFileSize;\n  returnData._0_8_ = copyErrorCode;\n  return returnData;\n}\n\n",
            "called": [
                "FUN_00108200",
                "FUN_00115a90"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_data_0010adf2",
                "update_data_0010abdd": "update_data"
            },
            "code": "\nvoid initialize_data_0010adf2(void)\n\n{\n  update_data();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "insert_entry_into_array_0010d7d4",
                "param_1": "entry",
                "param_2": "base_address",
                "param_3": "array",
                "param_4": "current_index",
                "param_5": "array_capacity",
                "uVar1": "entry_value",
                "cVar2": "result",
                "uVar3": "resize_result",
                "lVar4": "old_array",
                "plVar5": "new_array",
                "local_40": "new_array_buffer",
                "resize_and_insert_entry_00109be3": "resize_and_insert_entry",
                "uVar6": "new_index"
            },
            "code": "\nundefined4\ninsert_entry_into_array_0010d7d4(undefined8 entry,undefined8 *base_address,long *array,uint *current_index,uint *array_capacity)\n\n{\n  undefined8 entry_value;\n  char result;\n  undefined4 resize_result;\n  long old_array;\n  long *new_array;\n  uint new_index;\n  long new_array_buffer [2];\n  \n  entry_value = *base_address;\n  new_array = new_array_buffer;\n  if (array == (long *)0x0) {\n    new_array = (long *)0x0;\n  }\n  result = reverse_code_0010c95e(entry,base_address,new_array);\n  if ((result != '\\0') &&\n     (resize_result = resize_and_insert_entry(entry,entry_value,(int)*base_address - (int)entry_value), (char)resize_result != '\\0')) {\n    if (array == (long *)0x0) {\n      return resize_result;\n    }\n    if (new_array_buffer[0] != 0) {\n      if (*array_capacity <= *current_index + 1) {\n        new_index = *array_capacity + 10;\n        old_array = *array;\n        *array_capacity = new_index;\n        old_array = xrealloc(old_array,(ulong)new_index << 3);\n        *array = old_array;\n      }\n      new_index = *current_index;\n      *(long *)(*array + (ulong)new_index * 8) = new_array_buffer[0];\n      *current_index = new_index + 1;\n      return resize_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "xrealloc",
                "FUN_00109be3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "insert_entry_into_array_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = resize_and_insert_entry_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileInformation_00113f50(char *filePath)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "stat",
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "get_file_information_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_default_value_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "get_default_value_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatList",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "formatPtr"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatList)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *formatPtr;\n  \n  fflush(_stdout);\n  data = DAT_001275e0;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (formatPtr = formatList; *formatPtr != 0; formatPtr = formatPtr + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fflush",
                "free",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "reverse_and_improve_binary_0011378f",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "size_ptr",
                "param_4": "result_ptr",
                "param_5": "string_ptr",
                "param_6": "index_ptr",
                "auVar1": "temp_var",
                "cVar2": "check_var",
                "uVar3": "error_val",
                "uVar4": "error_msg",
                "puVar5": "ptr_var",
                "sVar6": "string_length",
                "lVar7": "loop_var",
                "puVar8": "ptr_var_2",
                "puVar9": "ptr_var_3",
                "__dest": "dest",
                "puVar10": "ptr_var_4",
                "plVar11": "ptr_var_5",
                "bVar12": "flag",
                "local_258": "local_input_ptr",
                "local_250": "local_data_ptr",
                "local_248": "local_var_1",
                "uStack_244": "local_var_2",
                "uStack_240": "local_var_3",
                "uStack_23c": "local_var_4",
                "local_238": "local_var_5",
                "local_228": "local_hash_val",
                "local_220": "local_hash_table",
                "local_1f8": "local_var_6",
                "local_1f0": "local_var_7",
                "local_1e8": "local_array",
                "local_a0": "local_data",
                "local_78": "local_flag",
                "uStack_70": "local_temp_val",
                "local_68": "local_var_8",
                "local_60": "local_var_9",
                "local_58": "local_var_10",
                "uStack_54": "local_var_11",
                "uStack_50": "local_var_12",
                "uStack_4c": "local_var_13"
            },
            "code": "\nundefined4\nreverse_and_improve_binary_0011378f(undefined8 *input_ptr,undefined8 *output_ptr,long *size_ptr,undefined8 *result_ptr,\n            undefined8 *string_ptr,undefined8 *index_ptr)\n\n{\n  undefined temp_var [16];\n  char check_var;\n  undefined4 error_val;\n  undefined8 error_msg;\n  undefined *ptr_var;\n  size_t string_length;\n  long loop_var;\n  undefined8 *ptr_var_2;\n  undefined4 *ptr_var_3;\n  char *dest;\n  undefined8 *ptr_var_4;\n  long *ptr_var_5;\n  byte flag;\n  undefined8 *local_input_ptr;\n  long local_data_ptr;\n  undefined4 local_var_1;\n  undefined4 local_var_2;\n  undefined4 local_var_3;\n  undefined4 local_var_4;\n  undefined local_var_5 [16];\n  undefined8 local_hash_val;\n  undefined local_hash_table [40];\n  undefined8 local_var_6;\n  undefined8 local_var_7;\n  undefined4 local_array [82];\n  undefined local_data [40];\n  undefined local_flag [8];\n  undefined8 local_temp_val;\n  undefined8 local_var_8;\n  undefined4 local_var_9;\n  undefined4 local_var_10;\n  undefined4 local_var_11;\n  undefined4 local_var_12;\n  undefined4 local_var_13;\n  \n  flag = 0;\n  local_var_1 = 0;\n  local_var_2 = 0;\n  local_var_3 = 500;\n  local_var_4 = 0;\n  local_input_ptr = input_ptr;\n  local_data_ptr = xmalloc(500);\n  local_hash_val = 1;\n  local_var_5 = ZEXT816(0);\n  check_var = bfd_hash_table_init(local_hash_table,initialize_hash_0010bb52,0x30);\n  if ((check_var == '\\0') || (check_var = bfd_hash_table_init(local_data,initialize_hash_0010bb52,0x30), check_var == '\\0')) {\n    error_val = bfd_get_error();\n    error_msg = bfd_errmsg(error_val);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",error_msg);\n  }\n  else {\n    local_var_6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_flag = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    ptr_var_3 = local_array;\n    for (loop_var = 0x52; loop_var != 0; loop_var = loop_var + -1) {\n      *ptr_var_3 = 0;\n      ptr_var_3 = ptr_var_3 + (ulong)flag * -2 + 1;\n    }\n    local_var_8 = 0;\n    local_var_9 = 0;\n    local_var_7 = 1;\n    local_var_10 = 0;\n    local_var_11 = 0;\n    local_var_12 = 0xffffffff;\n    local_var_13 = 0xffffffff;\n    check_var = process_string_data_0010e2f0(&local_input_ptr,0,0,0,0);\n    temp_var = _local_flag;\n    if (check_var != '\\0') {\n      local_flag._4_4_ = local_var_2;\n      local_flag._0_4_ = local_var_1;\n      local_temp_val = temp_var._8_8_;\n      check_var = process_string_data_0010e2f0(&local_input_ptr,100,0,0,*input_ptr);\n      if (check_var != '\\0') {\n        *(int *)(output_ptr + 6) = *(int *)(output_ptr + 6) + 1;\n        output_ptr[10] = 0;\n        ptr_var_4 = (undefined8 *)*output_ptr;\n        *(undefined4 *)(output_ptr + 7) = *(undefined4 *)((long)output_ptr + 0x34);\n        for (; ptr_var_4 != (undefined8 *)0x0; ptr_var_4 = (undefined8 *)*ptr_var_4) {\n          output_ptr[8] = ptr_var_4[2];\n          *(undefined4 *)(output_ptr + 9) = 0;\n          check_var = update_data_and_process_thunk_0010e439(&local_input_ptr,*(undefined8 *)(ptr_var_4[1] + 8));\n          if (check_var == '\\0') {\n            return 0;\n          }\n          ptr_var_5 = (long *)ptr_var_4[1];\n          if (ptr_var_5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)ptr_var_5[2] != (undefined8 *)0x0) {\n                for (ptr_var_2 = *(undefined8 **)(undefined8 *)ptr_var_5[2]; ptr_var_2 != (undefined8 *)0x0;\n                    ptr_var_2 = (undefined8 *)*ptr_var_2) {\n                  check_var = process_extracted_data_001135a5(output_ptr,&local_input_ptr);\n                  if (check_var == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              ptr_var_5 = (long *)*ptr_var_5;\n              if (ptr_var_5 == (long *)0x0) break;\n              check_var = store_data_and_process_string_0010e439(&local_input_ptr,ptr_var_5[1]);\n              if (check_var == '\\0') {\n                return 0;\n              }\n            }\n          }\n          check_var = process_data_00112502(output_ptr,&local_input_ptr,0xffffffffffffffff);\n          if (check_var == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(local_var_13,local_var_12) == -1) &&\n           (error_val = process_string_data_0010e2f0(&local_input_ptr,100,0,local_var_8,0), (char)error_val != '\\0')) {\n          (**(code **)(input_ptr[1] + 0x50))(local_hash_val,local_data_ptr + 8);\n          *size_ptr = local_data_ptr;\n          *result_ptr = CONCAT44(local_var_2,local_var_1);\n          *index_ptr = local_hash_val;\n          ptr_var = (undefined *)xmalloc();\n          *ptr_var = 0;\n          dest = ptr_var + 1;\n          *string_ptr = ptr_var;\n          for (loop_var = local_var_5._0_8_; loop_var != 0; loop_var = *(long *)(loop_var + 0x18)) {\n            strcpy(dest,*(char **)(loop_var + 8));\n            string_length = strlen(dest);\n            dest = dest + string_length + 1;\n          }\n          return error_val;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010e439",
                "thunk_FUN_0010e439",
                "bfd_errmsg",
                "bfd_hash_table_init",
                "strlen",
                "xmalloc",
                "FUN_0010bb52",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00112502",
                "strcpy",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_binary_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_data_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_data_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = update_data_and_process_thunk_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = store_data_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_data_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_data_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_error_00104966",
                "piVar1": "errno_ptr",
                "uVar2": "error_text",
                "dcgettext": "get_error_message",
                "print_error_message_00119ed0": "print_error_message"
            },
            "code": "\nundefined8 handle_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_text;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_text = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_text);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_text = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_text);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "input",
                "process_data_00109ed3": "process_data_helper"
            },
            "code": "\nvoid process_data_0010a0a0(long input)\n\n{\n  process_data_0010a0a0_helper(input,0x26,4,input + 0x198,input + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "conditionFlag",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "stackBuffer",
                "local_c8": "localBuffer",
                "local_b8": "bufferArray",
                "local_b0": "param10Value",
                "local_a8": "param11Value",
                "local_a0": "param12Value",
                "local_98": "param13Value",
                "local_90": "param14Value",
                "local_88": "errorCode1Value",
                "local_78": "errorCode2Value",
                "local_68": "errorCode3Value",
                "local_58": "errorCode4Value",
                "local_48": "errorCode5Value",
                "local_38": "errorCode6Value",
                "local_28": "errorCode7Value",
                "local_18": "errorCode8Value"
            },
            "code": "\nvoid print_error_message_00119ed0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char conditionFlag;\n  undefined4 size;\n  undefined4 length;\n  undefined *stackBuffer;\n  undefined *localBuffer;\n  undefined bufferArray [8];\n  undefined8 param10Value;\n  undefined8 param11Value;\n  undefined8 param12Value;\n  undefined8 param13Value;\n  undefined8 param14Value;\n  undefined4 errorCode1Value;\n  undefined4 errorCode2Value;\n  undefined4 errorCode3Value;\n  undefined4 errorCode4Value;\n  undefined4 errorCode5Value;\n  undefined4 errorCode6Value;\n  undefined4 errorCode7Value;\n  undefined4 errorCode8Value;\n  \n  if (conditionFlag != '\\0') {\n    errorCode1Value = errorCode1;\n    errorCode2Value = errorCode2;\n    errorCode3Value = errorCode3;\n    errorCode4Value = errorCode4;\n    errorCode5Value = errorCode5;\n    errorCode6Value = errorCode6;\n    errorCode7Value = errorCode7;\n    errorCode8Value = errorCode8;\n  }\n  stackBuffer = &stack0x00000008;\n  size = 8;\n  localBuffer = bufferArray;\n  length = 0x30;\n  param10Value = param10;\n  param11Value = param11;\n  param12Value = param12;\n  param13Value = param13;\n  param14Value = param14;\n  print_error_message_00119ed0_00119e70(errorMessage,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_0010554f",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010e07c",
                "FUN_001152b6",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001163d0",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00108375",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_debug_data_00112c1f",
                "param_1": "data",
                "param_2": "param",
                "param_3": "arr",
                "param_4": "current",
                "plVar1": "ptr1",
                "lVar2": "var1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "cVar5": "flag",
                "piVar6": "ptr4",
                "uVar7": "result",
                "uVar8": "var2",
                "iVar9": "var3",
                "uVar10": "var4",
                "uVar11": "var5",
                "uVar12": "count",
                "uVar13": "value",
                "bVar14": "bool",
                "local_3c": "local"
            },
            "code": "\n\n\nundefined8 processDebugData_00112c1f(ulong data,undefined8 param,int *arr,long current)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  char flag;\n  int *ptr4;\n  undefined8 result;\n  undefined8 var2;\n  int var3;\n  undefined4 var4;\n  undefined8 var5;\n  ulong count;\n  uint value;\n  bool bool;\n  uint local;\n  \n  count = data;\nLAB_00112c39:\n  if (arr != (int *)0x0) {\n    var3 = *arr;\n    if (var3 - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(arr + 4);\n        value = *(uint *)(data + 0x30);\n        count = (ulong)value;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == value) {\n          if (var3 == 0x16) {\n            result = lookup_and_initialize_data_structure_0010bba1(param,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr4 = (int *)find_circular_dependency_00112b6e(arr,0);\n          if (ptr4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr4 - 7U < 4) && (*(long *)(ptr4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr4 + 4) + 0xc) <= *(uint *)(data + 0x38)) &&\n               (flag = set_class_id_0010c7a0(data,*(undefined8 *)(**(long **)(arr + 4) + 8),ptr4),\n               flag == '\\0')) {\n              return 0;\n            }\n            value = *(uint *)(*(long *)(ptr4 + 4) + 0xc);\n          }\n          else {\n            value = 0;\n          }\n          var3 = *ptr4;\n          result = *(undefined8 *)(**(long **)(arr + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (var3 == 0x17) {\n          if (var1 != current) goto LAB_00112c94;\n          *(uint *)(current + 0x10) = value;\n          current = *ptr1;\n          arr = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (current != 0) {\n          *(uint *)(current + 0x10) = value;\n        }\n        arr = (int *)ptr1[1];\n        if (arr == (int *)0x0) goto LAB_00112dd6;\n        var3 = *arr;\n        current = 0;\n      } while (var3 - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (current == 0) goto LAB_00112d74;\n      *(undefined4 *)(current + 0x10) = *(undefined4 *)(data + 0x30);\n      if (*(int *)(current + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(current + 8);\n    }\n    switch(var3) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = initialize_or_increment_00109dfe(param);\n      return result;\n    case 3:\n      result = initialize_data_structure_0010b800(param,arr[1],*(undefined *)(arr + 4));\n      return result;\n    case 4:\n      result = initialize_data_structure_0010b948(param,arr[1]);\n      return result;\n    case 5:\n      result = update_data_structure_00109e76(param,arr[1]);\n      return result;\n    case 6:\n      result = initialize_data_structure_00109d3e(param,arr[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(arr + 4) != 0) {\n        if ((*(uint *)(*(long *)(arr + 4) + 0xc) <= *(uint *)(data + 0x38)) &&\n           (flag = set_class_id_0010c7a0(data,result,arr), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(arr + 4);\n        if (*(int *)(data + 0x30) == *(int *)(var1 + 8)) {\n          value = *(uint *)(var1 + 0xc);\n          if (value <= *(uint *)(data + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          var3 = *arr;\nLAB_00112ed2:\n          result = initialize_and_resize_array_00109d5c(param,result,value,var3);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(data + 0x30);\n      }\n      var4 = 0;\n      if (*(long *)(arr + 4) != 0) {\n        var4 = *(undefined4 *)(*(long *)(arr + 4) + 0xc);\n      }\n      flag = initialize_data_0010a69a(param,result,var4,*arr == 7,arr[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(arr + 4) != (long *)0x0) && (count = 0, **(long **)(arr + 4) != 0)) {\n        while( true ) {\n          ptr3 = *(undefined8 **)(**(long **)(arr + 4) + count * 8);\n          if (ptr3 == (undefined8 *)0x0) break;\n          flag = processDebugData_00112c1f(data,param,ptr3[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = generate_warning_message_0010ba08(param,*ptr3,*(undefined4 *)(ptr3 + 3),\n                               *(undefined4 *)((long)ptr3 + 0x1c),*(undefined4 *)(ptr3 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          count = (ulong)((int)count + 1);\n        }\n      }\n      result = extract_and_initialize_data_structure_0010a77a(param);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(arr + 4) == 0) {\n        value = 0;\n        ptr4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(arr + 4) + 0xc) <= *(uint *)(data + 0x38)) &&\n           (count = data, flag = set_class_id_0010c7a0(data,result,arr), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(arr + 4);\n        value = *(uint *)(var1 + 0xc);\n        if (*(int *)(data + 0x30) == *(int *)(var1 + 8)) {\n          if (value <= *(uint *)(data + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          var3 = *arr;\n          goto LAB_00112ed2;\n        }\n        ptr4 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(data + 0x30);\n        if (((ptr4 != (int *)0x0) && (arr != ptr4)) &&\n           (count = data, flag = processDebugData_00112c1f(data,param,ptr4,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = process_data_0010a83e(param,result,value,*arr == 9,arr[1],ptr4 != (int *)0x0,\n                           arr == ptr4,count);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(arr + 4) != (long *)0x0) {\n        value = 0;\n        if (**(long **)(arr + 4) != 0) {\n          while (ptr3 = *(undefined8 **)(**(long **)(arr + 4) + (ulong)value * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = processDebugData_00112c1f(data,param,ptr3[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n              flag = generate_warning_message_0010ba08(param,*ptr3,*(undefined4 *)(ptr3 + 3));\n            }\n            else {\n              flag = create_formatted_message_0010a94e(param,*ptr3,ptr3[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            value = value + 1;\n          }\n        }\n        value = 0;\n        if (*(long *)(*(long *)(arr + 4) + 0x10) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(arr + 4) + 0x10) + (ulong)value * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = processDebugData_00112c1f(data,param,*ptr3,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = process_data_0010aa53(param,*(undefined4 *)(ptr3 + 1),\n                                 *(undefined *)((long)ptr3 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            value = value + 1;\n          }\n        }\n        local = 0;\n        if (*(long *)(*(long *)(arr + 4) + 0x18) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(arr + 4) + 0x18) + (ulong)local * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = add_string_to_buffer_0010ab4d(param,*ptr3);\n            if (flag == '\\0') {\n              return 0;\n            }\n            value = 0;\n            while (ptr2 = *(undefined8 **)(ptr3[1] + (ulong)value * 8),\n                  ptr2 != (undefined8 *)0x0) {\n              if ((ptr2[4] != 0) &&\n                 (flag = processDebugData_00112c1f(data,param,ptr2[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = processDebugData_00112c1f(data,param,ptr2[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr2[3] == -1) {\n                flag = initialize_data_0010adf2(param,*ptr2,*(undefined4 *)(ptr2 + 2),\n                                     *(undefined *)((long)ptr2 + 0x14),\n                                     *(undefined *)((long)ptr2 + 0x15));\n              }\n              else {\n                flag = update_data_0010add5(param);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              value = value + 1;\n            }\n            flag = check_and_append_semicolon_00109bbb(param);\n            if (flag == '\\0') {\n              return 0;\n            }\n            local = local + 1;\n          }\n        }\n      }\n      result = combine_strings_0010ae0e(param);\n      return result;\n    case 0xb:\n      ptr3 = *(undefined8 **)(arr + 4);\n      if (ptr3 == (undefined8 *)0x0) {\n        var2 = 0;\n        var5 = 0;\n      }\n      else {\n        var2 = ptr3[1];\n        var5 = *ptr3;\n      }\n      result = initialize_data_structure_0010e453(param,result,var5,var2);\n      return result;\n    case 0xc:\n      flag = processDebugData_00112c1f(data,param,*(undefined8 *)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a083(param);\n      return result;\n    case 0xd:\n      flag = processDebugData_00112c1f(data,param,**(undefined8 **)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      count = 0;\n      if (*(long *)(*(long *)(arr + 4) + 8) == 0) {\n        count = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(arr + 4) + 8) + count * 8), var1 != 0) {\n          count = count + 1;\n          flag = processDebugData_00112c1f(data,param,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        count = count & 0xffffffff;\n      }\n      result = process_data_0010e5db(param,count,*(undefined *)(*(long *)(arr + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = processDebugData_00112c1f(data,param,*(undefined8 *)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0a0(param);\n      return result;\n    case 0xf:\n      flag = processDebugData_00112c1f(data,param,**(undefined8 **)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = build_request_0010a0e9(param,*(undefined8 *)(*(long *)(arr + 4) + 8),\n                           *(undefined8 *)(*(long *)(arr + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = processDebugData_00112c1f(data,param,**(undefined8 **)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = processDebugData_00112c1f(data,param,*(undefined8 *)(*(long *)(arr + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(arr + 4);\n      result = generate_data_0010a181(param,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      flag = processDebugData_00112c1f(data,param,**(undefined8 **)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a2b9(param,*(undefined *)(*(long *)(arr + 4) + 8));\n      return result;\n    case 0x12:\n      flag = processDebugData_00112c1f(data,param,**(undefined8 **)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = processDebugData_00112c1f(data,param,*(undefined8 *)(*(long *)(arr + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = extract_and_initialize_data_structure_0010a377(param);\n      return result;\n    case 0x13:\n      flag = processDebugData_00112c1f(data,param,**(undefined8 **)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      count = 0;\n      if (*(long *)(*(long *)(arr + 4) + 0x10) == 0) {\n        count = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(arr + 4) + 0x10) + count * 8), var1 != 0)\n        {\n          count = count + 1;\n          flag = processDebugData_00112c1f(data,param,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(arr + 4) + 8) != 0) &&\n         (flag = processDebugData_00112c1f(data,param,*(long *)(*(long *)(arr + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = generate_formatted_string_0010a424(param,*(long *)(*(long *)(arr + 4) + 8) != 0,count & 0xffffffff,\n                           *(undefined *)(*(long *)(arr + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = processDebugData_00112c1f(data,param,*(undefined8 *)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(param);\n      return result;\n    case 0x15:\n      flag = processDebugData_00112c1f(data,param,*(undefined8 *)(arr + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0d3(param);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool = *(int **)**(undefined8 **)(arr + 4) == arr;\n  arr = *(int **)**(undefined8 **)(arr + 4);\n  if (bool) {\nLAB_00112dd6:\n    result = initialize_or_increment_data_00109d97(param);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "FUN_0010adf2",
                "FUN_0010e5db",
                "abort",
                "FUN_0010a0e9",
                "FUN_00109d5c",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00109d97",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00109e76",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_0010aa53",
                "FUN_00109bbb",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010a83e",
                "FUN_0010a181",
                "fprintf",
                "dcgettext",
                "FUN_0010a0a0",
                "FUN_0010a083",
                "FUN_0010a424",
                "FUN_0010add5",
                "FUN_0010a0d3",
                "FUN_0010a377",
                "FUN_00112c1f",
                "FUN_00109dfe",
                "FUN_00112b6e",
                "FUN_0010a69a",
                "__assert_fail",
                "FUN_0010b800",
                "FUN_00109d3e",
                "FUN_0010bba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_debug_data_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isCopySuccessful",
                "unaff_R15": "dataAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopySuccessful;\n  long dataAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(dataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "errorMessage",
                "param_2": "warningMessage",
                "in_RAX": "formattedMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 errorMessage,undefined8 warningMessage)\n\n{\n  undefined8 formattedMessage;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,warningMessage,errorMessage,formattedMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "iVar1": "archType",
                "uVar2": "archValue",
                "uVar3": "inputFile",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileArchitecture_00105828(void)\n\n{\n  int archType;\n  undefined4 archValue;\n  undefined8 inputFile;\n  undefined8 errorMessage;\n  \n  archType = bfd_get_arch();\n  if (archType == 0) {\n    inputFile = get_modified_string_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,inputFile);\n  }\n  else {\n    inputFile = bfd_get_mach();\n    archValue = bfd_get_arch();\n    inputFile = bfd_printable_arch_mach(archValue,inputFile);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,inputFile);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "path_template",
                "pcVar1": "result_ptr"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *path_template;\n  char *result_ptr;\n  \n  path_template = (char *)allocate_path_00114cf0();\n  result_ptr = mkdtemp(path_template);\n  if (result_ptr == (char *)0x0) {\n    free(path_template);\n  }\n  return result_ptr;\n}\n\n",
            "called": [
                "FUN_001081e9",
                "mkdtemp",
                "FUN_00114cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_structure_0010bba1",
                "param_1": "input_param",
                "param_2": "data_param",
                "lVar1": "hash_result",
                "uVar2": "result"
            },
            "code": "\nundefined8 lookup_and_initialize_data_structure_0010bba1(long input_param,undefined8 data_param)\n\n{\n  long hash_result;\n  undefined8 result;\n  \n  hash_result = bfd_hash_lookup(input_param + 0x1b8,data_param,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    result = initialize_data_structure_00109cf4(input_param,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_initialize_data_structure_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_string_data_0010e6a8",
                "param_1": "inputParameter",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "extractedString",
                "sVar3": "inputStringLength",
                "sVar4": "extractedStringLength",
                "__s_00": "resultString",
                "lVar8": "counter",
                "uVar2": "extractedValue",
                "lVar5": "lookupResult",
                "uVar1": "processResult",
                "uVar6": "errorString",
                "uVar7": "errorMessage",
                "uVar9": "returnValue",
                "auVar10": "returnTuple"
            },
            "code": "\nundefined  [16] processStringData_0010e6a8(long inputParameter,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  uint processResult;\n  undefined4 extractedValue;\n  char *extractedString;\n  size_t inputStringLength;\n  size_t extractedStringLength;\n  char *resultString;\n  long lookupResult;\n  undefined8 errorString;\n  undefined8 errorMessage;\n  long counter;\n  ulong returnValue;\n  undefined returnTuple [16];\n  \n  counter = *(long *)(*(long *)(inputParameter + 0x60) + 0x10);\n  extractedValue = *(undefined4 *)(*(long *)(inputParameter + 0x60) + 0x18);\n  extractedString = (char *)extract_and_free_ptr_00109b2f();\n  inputStringLength = strlen(inputString);\n  extractedStringLength = strlen(extractedString);\n  resultString = (char *)xmalloc(inputStringLength + 0x14 + extractedStringLength);\n  if (counter < 1) {\n    counter = *(long *)(inputParameter + 0x68);\n    *(long *)(inputParameter + 0x68) = counter + 1;\n    sprintf(resultString,\"%s:t%ld=%s\",inputString,counter,extractedString);\n  }\n  else {\n    sprintf(resultString,\"%s:t%s\",inputString,extractedString);\n  }\n  free(extractedString);\n  processResult = process_string_data_0010e2f0(inputParameter,0x80,0,0,resultString);\n  returnValue = (ulong)processResult;\n  if ((char)processResult != '\\0') {\n    free(resultString);\n    lookupResult = bfd_hash_lookup(inputParameter + 0x1b8,inputString,1,0);\n    if (lookupResult != 0) {\n      *(long *)(lookupResult + 0x20) = counter;\n      *(undefined4 *)(lookupResult + 0x28) = extractedValue;\n      goto LAB_0010e7b3;\n    }\n    extractedValue = bfd_get_error();\n    errorString = bfd_errmsg(extractedValue);\n    errorMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(errorMessage,errorString);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  returnTuple._8_8_ = param4;\n  returnTuple._0_8_ = returnValue;\n  return returnTuple;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "strlen",
                "free",
                "xmalloc",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_data_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "reverse_and_process_string_0010e7c2",
                "param_1": "source_data",
                "param_2": "input_string",
                "param_3": "unused1",
                "param_4": "unused2",
                "__s": "extracted_data",
                "sVar1": "input_length",
                "sVar2": "extracted_length",
                "__s_00": "modified_string",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] reverse_and_process_string_0010e7c2(undefined8 source_data,char *input_string,undefined8 unused1,undefined8 unused2)\n\n{\n  char *extracted_data;\n  size_t input_length;\n  size_t extracted_length;\n  char *modified_string;\n  undefined result [16];\n  \n  extracted_data = (char *)extract_and_free_ptr_00109b2f();\n  input_length = strlen(input_string);\n  extracted_length = strlen(extracted_data);\n  modified_string = (char *)xmalloc(input_length + 3 + extracted_length);\n  sprintf(modified_string,\"%s:T%s\",input_string,extracted_data);\n  free(extracted_data);\n  result._0_4_ = process_string_data_0010e2f0(source_data,0x80,0,0,modified_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(modified_string);\n  }\n  result._8_8_ = unused2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "reverse_and_process_string_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "condition",
                "local_d8": "array_length",
                "local_d4": "buffer_length",
                "local_d0": "array_pointer",
                "local_c8": "buffer_pointer",
                "local_b8": "buffer",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "param_1",
                "local_78": "param_2",
                "local_68": "param_3",
                "local_58": "param_4",
                "local_48": "param_5",
                "local_38": "param_6",
                "local_28": "param_7",
                "local_18": "param_8"
            },
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char condition;\n  undefined4 array_length;\n  undefined4 buffer_length;\n  undefined *array_pointer;\n  undefined *buffer_pointer;\n  undefined buffer [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  if (condition != '\\0') {\n    param_1 = error_code;\n    param_2 = param_2;\n    param_3 = param_3;\n    param_4 = param_4;\n    param_5 = param_5;\n    param_6 = param_6;\n    param_7 = param_7;\n    param_8 = param_8;\n  }\n  array_pointer = &stack0x00000008;\n  array_length = 8;\n  buffer_pointer = buffer;\n  buffer_length = 0x30;\n  param_10 = error_code0;\n  param_11 = error_code1;\n  param_12 = error_code2;\n  param_13 = error_code3;\n  param_14 = error_code4;\n  print_error_message_00119e70(error_message,&array_length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_001083de",
                "FUN_0010554f",
                "FUN_00104ad6",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00114dc7",
                "FUN_0010827b",
                "FUN_00108808",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_00115b70",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_0010da0b"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "error_ptr",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined8 handle_bfd_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *error_ptr;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_message_0011a110(*error_ptr);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "in_RCX": "recordArray",
                "size_t": "SizeT",
                "int": "Int",
                "uint": "UInt",
                "ulong": "ULong",
                "long": "Long",
                "byte": "Byte",
                "char": "Char",
                "param_7": "recordId",
                "param_9": "param_2",
                "param_10": "param_3",
                "param_11": "otherRecordArray",
                "param_12": "outputBuffer",
                "param_13": "param_5",
                "param_14": "recordCount",
                "sVar1": "recordSize",
                "iVar3": "compareResult",
                "cVar10": "charResult",
                "uVar4": "index",
                "__ptr": "dynamicArray",
                "unaff_RBX": "maxValue",
                "unaff_RBP": "unaff_RBPArr",
                "in_R10": "loopIndex",
                "unaff_R13": "unaff_R13Arr",
                "unaff_R14": "unaff_R14Arr",
                "unaff_R15": "unaff_R15Value",
                "psVar13": "recordPointer",
                "bVar14": "loopFlag",
                "lVar7": "loopVar",
                "uVar5": "recordValue1",
                "uVar6": "recordValue2",
                "puVar9": "strPtr1",
                "puVar11": "strPtr2",
                "puVar12": "outputPtr"
            },
            "code": "\nULong processRecords_00116852(void)\n\n{\n  SizeT recordSize;\n  code *pcVar2;\n  Int compareResult;\n  UInt index;\n  undefined *dynamicArray;\n  SizeT *recordArray;\n  ULong recordValue1;\n  ULong recordValue2;\n  Long loopVar;\n  ULong uVar8;\n  SizeT maxValue;\n  SizeT *unaff_RBPArr;\n  undefined *strPtr1;\n  Char charResult;\n  undefined *strPtr2;\n  ULong loopIndex;\n  undefined *outputPtr;\n  SizeT in_R11;\n  SizeT *unaff_R13Arr;\n  SizeT *unaff_R14Arr;\n  SizeT unaff_R15Value;\n  SizeT *recordPointer;\n  Byte loopFlag;\n  SizeT recordId;\n  SizeT param_2;\n  ULong param_3;\n  SizeT *otherRecordArray;\n  undefined *outputBuffer;\n  Long param_5;\n  SizeT recordCount;\n  \n  loopFlag = 0;\ncode_r0x00116852:\n  index = (Int)loopIndex + 1;\n  if (0x10 < (Int)loopIndex) goto LAB_001167f5;\nLAB_00116863:\n  unaff_R14Arr = unaff_R14Arr + -9;\n  do {\n    if (unaff_R13Arr <= unaff_R14Arr) {\n      recordSize = unaff_R14Arr[2];\n      if (recordSize == 0) goto LAB_00116863;\n      uVar8 = (ULong)index;\n      if ((*unaff_R14Arr == *unaff_RBPArr) &&\n         (compareResult = memcmp((void *)unaff_R14Arr[3],(void *)unaff_RBPArr[3],*unaff_RBPArr), compareResult == 0)) {\n        recordValue2 = unaff_R14Arr[7];\n        recordValue1 = unaff_R14Arr[8];\n        loopIndex = uVar8 & 0xffffffff;\n        if (unaff_R15Value == recordValue2) {\n          if (maxValue != recordValue1) goto LAB_001167a6;\n          unaff_RBPArr[2] = 0;\n        }\n        else {\n          if (unaff_R15Value < recordValue2) {\n            if (recordValue1 < unaff_R15Value) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < recordValue1) || (unaff_R15Value <= (recordValue1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (maxValue < unaff_R15Value) {\n              if ((0xfffffffffffffff0 < maxValue) ||\n                 (recordValue2 <= (maxValue + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (maxValue == recordValue1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (maxValue <= recordValue1) {\n              unaff_RBPArr[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (recordValue1 < unaff_R15Value) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (recordSize == 0x101)) goto code_r0x00116852;\n          if (recordValue1 <= maxValue) {\n            recordValue1 = maxValue;\n          }\n          if (recordValue2 < unaff_R15Value) {\n            unaff_R15Value = recordValue2;\n          }\n          unaff_R14Arr[8] = recordValue1;\n          unaff_R14Arr[7] = unaff_R15Value;\n          unaff_RBPArr[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        unaff_R14Arr = unaff_RBPArr;\n        unaff_RBPArr = unaff_R14Arr + 9;\n        if (recordArray <= unaff_RBPArr) {\n          qsort(otherRecordArray,recordCount,0x48,compare_records_0011a250);\n          dynamicArray = (undefined *)xmalloc(param_3 * 2);\n          recordId = 0;\n          outputPtr = dynamicArray;\n          for (recordPointer = otherRecordArray; recordPointer < recordArray; recordPointer = recordPointer + 9) {\n            if (recordPointer[2] != 0) {\n              strPtr2 = outputPtr + 4;\n              strPtr1 = outputPtr + 0xc;\n              pcVar2 = *(code **)(*(Long *)(param_5 + 8) + 0x50);\n              if ((recordPointer[7] == param_2) && (recordPointer[8] == recordId)) {\n                (*pcVar2)(*recordPointer,outputPtr);\n                (**(code **)(*(Long *)(param_5 + 8) + 0x50))(0,strPtr2);\n                (**(code **)(*(Long *)(param_5 + 8) + 0x50))(recordPointer[2],outputPtr + 8);\n                recordValue2 = recordPointer[6];\n                uVar8 = *recordPointer;\n                outputPtr = (undefined *)recordPointer[3];\n                strPtr2 = strPtr1;\n                for (recordValue1 = uVar8; recordValue1 != 0; recordValue1 = recordValue1 - 1) {\n                  *strPtr2 = *outputPtr;\n                  outputPtr = outputPtr + (ULong)loopFlag * -2 + 1;\n                  strPtr2 = strPtr2 + (ULong)loopFlag * -2 + 1;\n                }\n                if (uVar8 < recordValue2) {\n                  for (loopVar = recordValue2 - uVar8; loopVar != 0; loopVar = loopVar + -1) {\n                    *strPtr2 = 0;\n                    strPtr2 = strPtr2 + (ULong)loopFlag * -2 + 1;\n                  }\n                }\n                outputPtr = strPtr1 + recordValue2;\n              }\n              else {\n                (*pcVar2)();\n                if (*(Int *)(*(Long *)(param_5 + 8) + 8) == 5) {\n                  charResult = (*(Char *)(*(Long *)(param_5 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charResult = '\\b';\n                }\n                (**(code **)(*(Long *)(param_5 + 8) + 0x50))(charResult,strPtr2);\n                (**(code **)(*(Long *)(param_5 + 8) + 0x50))(recordPointer[2],outputPtr + 8);\n                uVar8 = *recordPointer;\n                outputPtr = (undefined *)recordPointer[3];\n                strPtr2 = strPtr1;\n                for (recordValue2 = uVar8; recordValue2 != 0; recordValue2 = recordValue2 - 1) {\n                  *strPtr2 = *outputPtr;\n                  outputPtr = outputPtr + (ULong)loopFlag * -2 + 1;\n                  strPtr2 = strPtr2 + (ULong)loopFlag * -2 + 1;\n                }\n                recordValue2 = recordPointer[6];\n                if (uVar8 < recordValue2) {\n                  for (loopVar = recordValue2 - uVar8; loopVar != 0; loopVar = loopVar + -1) {\n                    *strPtr2 = 0;\n                    strPtr2 = strPtr2 + (ULong)loopFlag * -2 + 1;\n                  }\n                }\n                loopVar = *(Long *)(param_5 + 8);\n                strPtr1 = strPtr1 + recordValue2;\n                outputPtr = strPtr1 + 8;\n                if ((*(Int *)(loopVar + 8) == 5) &&\n                   (*(Char *)(*(Long *)(param_5 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopVar + 0x38))(recordPointer[7],strPtr1);\n                  (**(code **)(*(Long *)(param_5 + 8) + 0x38))(recordPointer[8],outputPtr);\n                  outputPtr = strPtr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopVar + 0x50))(recordPointer[7],strPtr1);\n                  (**(code **)(*(Long *)(param_5 + 8) + 0x50))(recordPointer[8],strPtr1 + 4);\n                }\n                param_2 = recordPointer[7];\n                recordId = recordPointer[8];\n              }\n            }\n          }\n          recordValue2 = (Long)outputPtr - (Long)dynamicArray;\n          uVar8 = recordValue2;\n          outputPtr = dynamicArray;\n          if (recordValue2 < param_3) {\n            for (; param_3 = recordValue2, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *outputBuffer = *outputPtr;\n              outputPtr = outputPtr + (ULong)loopFlag * -2 + 1;\n              outputBuffer = outputBuffer + (ULong)loopFlag * -2 + 1;\n            }\n          }\n          free(dynamicArray);\n          free(otherRecordArray);\n          return param_3;\n        }\n        in_R11 = unaff_R14Arr[0xb];\n      } while (in_R11 == 0);\n      unaff_R15Value = unaff_R14Arr[0x10];\n      maxValue = unaff_R14Arr[0x11];\n      index = 0;\n      if (unaff_R15Value != maxValue) break;\n      unaff_R14Arr[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "qsort",
                "FUN_00116852",
                "free",
                "xmalloc",
                "memcmp",
                "FUN_0011a250"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "allocate_memory_if_needed_00113d3a",
                "param_1": "input_value",
                "lVar1": "allocated_memory",
                "initialize_memory_00112904": "initialize_memory"
            },
            "code": "\nlong allocate_memory_if_needed_00113d3a(long input_value)\n\n{\n  long allocated_memory;\n  \n  if (input_value != 0) {\n    allocated_memory = *(long *)(input_value + 8);\n    if (allocated_memory == 0) {\n      allocated_memory = initialize_memory(0xc,0);\n      if (allocated_memory == 0) {\n        allocated_memory = 0;\n      }\n      else {\n        *(long *)(allocated_memory + 0x10) = input_value;\n        *(long *)(input_value + 8) = allocated_memory;\n      }\n    }\n    return allocated_memory;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_memory_if_needed_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "data",
                "process_data_00109ed3": "processDataImpl"
            },
            "code": "\nvoid processData_0010a0d3(long data)\n\n{\n  processData_0010a0d3Impl(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_2": "section_options",
                "lVar1": "length",
                "pcVar2": "current_section",
                "ppcVar3": "section_list",
                "cVar4": "check",
                "iVar5": "result",
                "uVar6": "flag",
                "sVar7": "strlen_1",
                "sVar8": "strlen_2",
                "lVar9": "data",
                "pcVar10": "temp_1",
                "pcVar11": "temp_2",
                "pcVar12": "temp_3",
                "uVar13": "temp_flag",
                "bVar14": "bool_flag",
                "local_50": "error_message",
                "local_48": "section_name",
                "local_40": "section_sizes"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid create_output_section_00115530(long param_1,char **section_options,long param_3)\n\n{\n  long length;\n  char *current_section;\n  char **section_list;\n  char check;\n  int result;\n  uint flag;\n  size_t strlen_1;\n  size_t strlen_2;\n  long data;\n  char *temp_1;\n  char *temp_2;\n  char *temp_3;\n  uint temp_flag;\n  bool bool_flag;\n  long error_message;\n  char *section_name;\n  long section_sizes [2];\n  \n  check = check_section_options_001159d0(section_options);\n  if (check != '\\0') {\n    return;\n  }\n  temp_1 = *section_options;\n  temp_flag = *(uint *)((long)section_options + 0x24);\n  section_name = temp_1;\n  section_list = DAT_001278d8;\n  if (*(int *)(*(long *)(param_1 + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    temp_flag = temp_flag & *(uint *)(*(long *)(param_1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; section_list != (char **)0x0; section_list = (char **)section_list[3]) {\n    result = strcmp(*section_list,temp_1);\n    if (result == 0) {\n      if (*(uint *)(section_list + 2) != 0xffffffff) {\n        temp_flag = *(uint *)(section_list + 2);\n      }\n      if (temp_1 != section_list[1]) {\n        section_name = section_list[1];\n        temp_flag = drop_share_flag_if_not_coff_00115f30(temp_flag,param_3);\n      }\n      break;\n    }\n  }\n  if (((DAT_001278f8 != (char *)0x0) &&\n      (temp_1 = DAT_001278f8, (*(byte *)((long)section_options + 0x24) & 1) != 0)) ||\n     (temp_1 = DAT_00127900, DAT_00127900 != (char *)0x0)) {\n    strlen_1 = strlen(temp_1);\n    strlen_2 = strlen(section_name);\n    temp_3 = (char *)xmalloc(strlen_1 + 1 + strlen_2);\n    temp_1 = strcpy(temp_3,temp_1);\n    section_name = strcat(temp_1,section_name);\n  }\n  data = process_data_00114190(*section_options,0,0x80);\n  bool_flag = false;\n  if (data == 0) {\n    if ((DAT_00127a2c == 4) && ((temp_flag & 0x2000001) != 0)) {\n      result = *(int *)(*(long *)(param_1 + 8) + 8);\n      if (result == 5) {\n        if (*(int *)(section_options[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            bool_flag = (temp_flag & 0x2000000) == 0;\n            flag = ~((-(uint)((temp_flag & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)section_options + 0x24) = *(uint *)((long)section_options + 0x24) & flag;\n          }\n          else {\n            flag = 0xfdfffefd;\n          }\n          temp_flag = temp_flag & flag;\n        }\n      }\n      else if ((result != 2) || (result = strcmp(*section_options,\".buildid\"), result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    temp_flag = drop_share_flag_if_not_coff_00115f30(temp_flag & 0x104 | *(uint *)(data + 0x28),param_3,*section_options);\n  }\n  check = bfd_convert_section_setup(param_1,section_options,param_3,&section_name,section_sizes);\n  if (check == '\\0') {\n    temp_1 = (char *)0x0;\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  temp_1 = (char *)bfd_make_section_anyway_with_flags(param_3,section_name,temp_flag);\n  if (temp_1 == (char *)0x0) {\n    error_message = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_001278ec != '\\0') {\n      section_sizes[0] = 0;\n      goto LAB_001158e7;\n    }\n    check = bfd_set_section_size(temp_1,section_sizes[0]);\n    if (check == '\\0') {\n      validate_and_update_size_00108072();\n      return;\n    }\n  }\n  else {\n    section_sizes[0] = ((((long)DAT_00127a1c - 1U) + section_sizes[0]) / (ulong)(long)DAT_00127a1c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    check = bfd_set_section_size(temp_1);\n    if (check == '\\0') {\n      validate_and_update_size_00108072();\n      return;\n    }\n  }\n  error_message = 0;\n  temp_3 = section_options[6];\n  data = process_data_00114190(*section_options,0,0x18);\n  if (data == 0) {\n    temp_1[0x28] = temp_1[0x28] | 1;\n    temp_2 = *section_options;\n    temp_3 = temp_3 + _DAT_00127990;\n    *(char **)(temp_1 + 0x30) = temp_3;\n    *(char **)(temp_1 + 0x38) = temp_3;\n    temp_3 = section_options[7];\n    data = process_data_00114190(temp_2,0,0x60);\n    if (data == 0) goto LAB_00115695;\nLAB_00115860:\n    temp_2 = *(char **)(data + 0x20);\n    if ((*(byte *)(data + 0x14) & 0x40) != 0) {\n      temp_2 = temp_2 + (long)temp_3;\n    }\n    *(char **)(temp_1 + 0x38) = temp_2;\n    data = process_data_00114190(*section_options,0,0x200);\n    if (data != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp_flag = *(uint *)((long)section_options + 0x7c);\n    if (temp_flag < 0x3f) goto LAB_001156c4;\n    error_message = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(temp_1 + 0xb4) = *(undefined4 *)((long)section_options + 0xb4);\n    temp_1[0x28] = temp_1[0x28] & 0xcfU | *(byte *)(section_options + 5) & 0x30;\n    section_options[0xc] = temp_1;\n    section_options[0xb] = (char *)0x0;\n    if ((*(byte *)((long)section_options + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    check = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,section_options,param_3,temp_1);\n    if (check == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    temp_2 = *(char **)(data + 0x18);\n    if ((*(byte *)(data + 0x14) & 8) == 0) {\n      temp_2 = temp_2 + (long)temp_3;\n    }\n    temp_1[0x28] = temp_1[0x28] | 1;\n    current_section = *section_options;\n    *(char **)(temp_1 + 0x30) = temp_2;\n    *(char **)(temp_1 + 0x38) = temp_2;\n    temp_3 = section_options[7];\n    data = process_data_00114190(current_section,0,0x60);\n    if (data != 0) goto LAB_00115860;\nLAB_00115695:\n    temp_2 = *section_options;\n    *(char **)(temp_1 + 0x38) = temp_3 + _DAT_00127990;\n    data = process_data_00114190(temp_2,0,0x200);\n    if (data == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp_flag = *(uint *)(data + 0x2c);\n    if (0x3e < temp_flag) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(temp_1 + 0x7c) = temp_flag;\n    *(undefined4 *)(temp_1 + 0xb4) = *(undefined4 *)((long)section_options + 0xb4);\n    temp_1[0x28] = temp_1[0x28] & 0xcfU | *(byte *)(section_options + 5) & 0x30;\n    section_options[0xc] = temp_1;\n    section_options[0xb] = (char *)0x0;\n    if ((*(byte *)((long)section_options + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    temp_3 = section_options[0x1a];\n    data = find_matching_value_00115d00(temp_3,section_options[0x1c]);\n    if ((data == 0) ||\n       (length = *(long *)(param_1 + 8), *(uint *)(data + 0x18) = *(uint *)(data + 0x18) | 0x20,\n       *(int *)(length + 8) != 5)) goto LAB_00115700;\n    *(long *)(temp_3 + 0xb0) = data;\n    check = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,section_options,param_3,temp_1);\n    if (check == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (bool_flag) {\n    *(undefined4 *)(*(long *)(temp_1 + 0xd0) + 4) = 8;\n  }\n  if (error_message == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a20 = 1;\n  print_error_message_001126c0(0,param_3,temp_1,error_message);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00115f30",
                "strlen",
                "dcgettext",
                "xmalloc",
                "bfd_convert_section_setup",
                "strcat",
                "FUN_00108072",
                "bfd_make_section_anyway_with_flags",
                "FUN_001159d0",
                "strcpy",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data",
                "process_data_00109ed3": "processDataFunction"
            },
            "code": "\nvoid processData_0010a0bd(long data)\n\n{\n  processData_0010a0bdFunction(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_and_process_input_00113e5e",
                "param_1": "param",
                "param_2": "input",
                "param_3": "length",
                "cVar1": "comparison_result",
                "local_20[0]": "current_input"
            },
            "code": "\nundefined8 validate_and_process_input_00113e5e(undefined8 param,char **input,long length)\n\n{\n  char comparison_result;\n  char *local_20 [2];\n  \n  current_input = *input;\n  *input = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)current_input < 5) ||\n      (comparison_result = compare_strings_00113fb0(current_input,\"type\"), comparison_result == '\\0')) ||\n     ((current_input[4] != '$' && (current_input[4] != '.')))) {\n    if (*current_input != '_') {\n      return 1;\n    }\n    if (current_input[1] != '_') {\n      return 1;\n    }\n    if (current_input[2] != 'o') {\n      return 1;\n    }\n    if (current_input[3] != 'p') {\n      return 1;\n    }\n    current_input = current_input + 4;\n  }\n  else {\n    current_input = current_input + 5;\n  }\n  comparison_result = reverse_code_0010c95e(param,local_20,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_and_process_input_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "update_data_0010abdd",
                "param_1": "data",
                "param_2": "str1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "num",
                "param_8": "flag4",
                "lVar1": "ptr1",
                "pcVar2": "ptr2",
                "bVar3": "byteVar",
                "pcVar4": "ptr3",
                "__s": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nupdateData_0010abdd(long data,char *str1,uint length,char flag1,char flag2,char flag3,\n            undefined8 num,char flag4)\n\n{\n  long ptr1;\n  char *ptr2;\n  byte byteVar;\n  char *ptr3;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByte;\n  \n  str2 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  ptr3 = (char *)extract_and_free_ptr_00109b2f();\n  if (flag4 != '\\0') {\n    byteVar = 1;\n    if (localByte == 0) {\n      byteVar = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    localByte = byteVar & 1;\n    str2 = (char *)extract_and_free_ptr_00109b2f(data);\n  }\n  ptr1 = *(long *)(data + 0x60);\n  if ((ptr1 == 0) || (ptr2 = *(char **)(ptr1 + 0x30), ptr2 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(ptr2);\n    len2 = strlen(ptr3);\n    len3 = strlen(str1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str2);\n    }\n    result = xrealloc(ptr2,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(ptr1 + 0x30) = result;\n    ptr2 = *(char **)(*(long *)(data + 0x60) + 0x30);\n    len1 = strlen(ptr2);\n    sprintf(ptr2 + len1,\"%s:%s;%c%c%c\",ptr3,str1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,len1);\n    free(ptr3);\n    if (flag4 != '\\0') {\n      ptr3 = *(char **)(*(long *)(data + 0x60) + 0x30);\n      len1 = strlen(ptr3);\n      sprintf(ptr3 + len1,\"%ld;%s;\",num,str2);\n      free(str2);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xrealloc",
                "strlen",
                "free",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "update_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "arguments",
                "param_3": "outputFormat",
                "uVar1": "value",
                "uVar2": "error_message"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *arguments,undefined8 outputFormat)\n\n{\n  undefined8 value;\n  undefined8 error_message;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(arguments[1] + 8) != 2)) {\n    value = *arguments;\n    flags = flags & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(error_message,value,outputFormat);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275c0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275c0 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00116ad0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "arrayPointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *arrayPointer;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    arrayPointer = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*arrayPointer;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*arrayPointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010d559",
                "FUN_0010ee3f",
                "FUN_001129f4",
                "FUN_00112b6e",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0011173a",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_0010ee3f",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "calculate_flipped_value_001082b3",
                "uVar1": "string_length",
                "check_string_length_00113ede": "get_string_length"
            },
            "code": "\nuint calculate_flipped_value_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "calculate_flipped_value_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "extract_and_copy_archive_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "fileStat",
                "param_5": "bfdFlags",
                "param_6": "tempDir",
                "param_7": "extraFlags",
                "bVar1": "byteValue",
                "cVar2": "charValue1",
                "cVar3": "charValue2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerToPointerToChar1",
                "pvVar7": "voidPointer",
                "lVar8": "longVar1",
                "puVar9": "pointerToVoidPointer1",
                "piVar10": "pointerToInt1",
                "uVar11": "uVar1",
                "uVar12": "uVar2",
                "lVar13": "longVar2",
                "puVar14": "pointerToVoidPointer2",
                "pcVar15": "pcValue1",
                "pcVar16": "pcValue2",
                "pcVar17": "pcValue3",
                "pcVar18": "pcValue4",
                "pcVar19": "pcValue5",
                "lVar21": "longVar3",
                "uVar22": "uVar3",
                "pcVar23": "pcValue6",
                "psVar24": "statStruct",
                "bVar25": "boolValue1",
                "bVar26": "boolValue2",
                "local_1a0": "localPointer1",
                "local_198": "localPointer2",
                "local_158": "localStatStruct",
                "local_c8": "localArray1",
                "uStack_b0": "uStackValue1",
                "lStack_98": "lStackValue1"
            },
            "code": "\n\n\nvoid extractAndCopyArchive_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 fileStat,\n                 undefined8 bfdFlags,long tempDir,undefined8 extraFlags)\n\n{\n  byte byteValue;\n  char charValue1;\n  char charValue2;\n  int intVar1;\n  int intVar2;\n  char **pointerToPointerToChar1;\n  void *voidPointer;\n  long longVar1;\n  undefined8 *pointerToVoidPointer1;\n  int *pointerToInt1;\n  undefined8 uVar1;\n  undefined8 uVar2;\n  long longVar2;\n  undefined8 *pointerToVoidPointer2;\n  char *pcValue1;\n  char **ppcValue2;\n  char *pcValue3;\n  char *pcValue4;\n  undefined8 *__ptr;\n  char **ppcValue5;\n  code *pcharValue10;\n  long longVar3;\n  uint uVar3;\n  char *pcValue6;\n  stat *statStruct;\n  bool boolValue1;\n  byte boolValue2;\n  undefined8 *localPointer1;\n  long *localPointer2;\n  stat localStatStruct;\n  void *localArray1 [3];\n  uint uStackValue1;\n  long lStackValue1;\n  \n  boolValue2 = 0;\n  longVar2 = get_file_information_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      uVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(uVar2,inputFilePath);\n    }\n    DAT_00127a20 = 1;\n    return;\n  }\n  pointerToVoidPointer2 = (undefined8 *)bfd_openr(inputFilePath,bfdFlags);\n  if ((pointerToVoidPointer2 == (undefined8 *)0x0) || (intVar2 = bfd_stat(pointerToVoidPointer2,fileStat), intVar2 != 0)) {\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  switch(DAT_00127984) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerToVoidPointer2 + 0x44) = *(uint *)((long)pointerToVoidPointer2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerToVoidPointer2 + 0x44) = *(uint *)((long)pointerToVoidPointer2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerToVoidPointer2 + 0x44) = *(uint *)((long)pointerToVoidPointer2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerToVoidPointer2 + 0x44) = *(uint *)((long)pointerToVoidPointer2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012797c == 1) {\n    *(uint *)((long)pointerToVoidPointer2 + 0x44) = *(uint *)((long)pointerToVoidPointer2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012797c == 2) {\n    *(uint *)((long)pointerToVoidPointer2 + 0x44) = *(uint *)((long)pointerToVoidPointer2 + 0x44) | 0x40000;\n  }\n  charValue1 = bfd_check_format(pointerToVoidPointer2,2);\n  if (charValue1 != '\\0') {\n    if (tempDir == 0) {\n      charValue1 = '\\0';\n      tempDir = *(long *)pointerToVoidPointer2[1];\n    }\n    if (fileDescriptor < 0) {\n      localPointer1 = (undefined8 *)bfd_openw(outputFilePath,tempDir);\n    }\n    else {\n      localPointer1 = (undefined8 *)bfd_fdopenw(outputFilePath,tempDir,fileDescriptor);\n    }\n    if (localPointer1 != (undefined8 *)0x0) {\n      if (DAT_00127a10 != 0) {\n        uVar2 = *pointerToVoidPointer2;\n        uVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(uVar1,uVar2);\n        DAT_00127a10 = 0;\n      }\n      execute_function_00114d50(localPointer1,pointerToVoidPointer2,DAT_001264b4);\n      localPointer2 = localPointer1 + 0x1f;\n      if ((*(byte *)((long)pointerToVoidPointer2 + 0x49) & 0x10) != 0) {\n        DAT_00127a20 = 1;\n        bfd_set_error(5);\n        uVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,pointerToVoidPointer2,0,uVar2);\n        return;\n      }\n      pcValue1 = (char *)create_temp_directory_0011a0e0(*localPointer1);\n      if (pcValue1 == (char *)0x0) {\n        pointerToInt1 = __errno_location();\n        pcValue1 = strerror(*pointerToInt1);\n        uVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(uVar2,pcValue1);\n      }\n      if (DAT_00127a2c == 7) {\n        byteValue = *(byte *)((long)pointerToVoidPointer2 + 0x49);\n        uVar3 = 0;\n      }\n      else {\n        byteValue = *(byte *)((long)pointerToVoidPointer2 + 0x49);\n        uVar3 = byteValue >> 3 & 1;\n      }\n      boolValue1 = _DAT_001264b0 != 0;\n      *(byte *)((long)localPointer1 + 0x49) =\n           byteValue & 0x10 | (byte)(uVar3 << 3) | *(byte *)((long)localPointer1 + 0x49) & 0xe7;\n      if (boolValue1) {\n        *(uint *)((long)localPointer1 + 0x44) = *(uint *)((long)localPointer1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      ppcValue2 = (char **)bfd_openr_next_archived_file(pointerToVoidPointer2,0);\n      charValue2 = bfd_set_format(localPointer1,*(byte *)(pointerToVoidPointer2 + 9) & 7);\n      if (charValue2 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(0,localPointer1,0,0);\n        remove_dir_and_free_memory_00114b84();\n        return;\n      }\n      while ((DAT_00127a20 == 0 && (ppcValue2 != (char **)0x0))) {\n        pcValue4 = *ppcValue2;\n        pcValue3 = pcValue4;\n        if (*pcValue4 == '/') {\nLAB_0010527d:\n          uVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(uVar2,pcValue4);\nLAB_00104e93:\n          DAT_00127a20 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pcValue3 != '\\0') {\n          pcValue6 = pcValue3;\n          if ((*pcValue3 == '.') && (pcValue6 = pcValue3 + 1, pcValue3[1] == '.')) {\n            pcValue6 = pcValue3 + 2;\n            if ((pcValue3[2] == '\\0') || (pcValue3[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pcValue6 != '\\0' && (*pcValue6 != '/')); pcValue6 = pcValue6 + 1) {\n          }\n          pcValue3 = pcValue6;\n          if (*pcValue6 == '/') {\n            extract_and_copy_archive_001052a2();\n            return;\n          }\n        }\n        pcValue4 = (char *)concat(pcValue1,&DAT_0011b47d);\n        intVar2 = stat(pcValue4,&localStatStruct);\n        pointerToVoidPointer1 = __ptr;\n        if (-1 < intVar2) {\n          longVar2 = create_temp_directory_0011a0e0(pcValue4);\n          free(pcValue4);\n          if (longVar2 == 0) {\n            pointerToInt1 = __errno_location();\n            pcValue4 = strerror(*pointerToInt1);\n            uVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(uVar2,pcValue4);\n            goto LAB_00104e93;\n          }\n          pointerToVoidPointer1 = (undefined8 *)xmalloc(0x18);\n          pcValue4 = *ppcValue2;\n          *pointerToVoidPointer1 = __ptr;\n          pointerToVoidPointer1[2] = 0;\n          pointerToVoidPointer1[1] = longVar2;\n          pcValue4 = (char *)concat(longVar2,&DAT_0011b47d,pcValue4);\n        }\n        intVar2 = 0;\n        if (DAT_001279cb != '\\0') {\n          statStruct = &localStatStruct;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&statStruct->st_dev = 0;\n            statStruct = (stat *)((long)statStruct + (ulong)boolValue2 * -8 + 4);\n          }\n          ppcValue5 = (char **)ppcValue2[0x1d];\n          if ((char **)ppcValue2[0x1d] == (char **)0x0) {\n            ppcValue5 = ppcValue2;\n          }\n          intVar2 = (**(code **)(ppcValue5[1] + 0x1e8))(ppcValue2,&localStatStruct);\n          if (intVar2 != 0) {\n            pcValue3 = *ppcValue2;\n            uVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(uVar2,pcValue3);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = pcValue4;\n        *__ptr = pointerToVoidPointer1;\n        __ptr[2] = 0;\n        charValue2 = bfd_check_format(ppcValue2,1);\n        if (charValue2 == '\\0') {\n          uVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,ppcValue2,0,uVar2);\n          ppcValue5 = (char **)bfd_openw(pcValue4,tempDir);\n          if (ppcValue5 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(pcValue4,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToPointerToChar1 = (char **)ppcValue2[0x1d];\n          if ((char **)ppcValue2[0x1d] == (char **)0x0) {\n            pointerToPointerToChar1 = ppcValue2;\n          }\n          intVar1 = (**(code **)(pointerToPointerToChar1[1] + 0x1e8))(ppcValue2);\n          longVar2 = lStackValue1;\n          if (intVar1 == 0) {\n            if (lStackValue1 < 0) {\n              get_modified_string_001125fa(ppcValue2);\n              uVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(uVar2);\n            }\n            else {\n              intVar1 = bfd_seek(ppcValue2,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279c9 != '\\0') {\n                  pcValue3 = *ppcValue5;\n                  uVar2 = get_modified_string_001125fa(ppcValue2);\n                  pcValue6 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pcValue6,uVar2,pcValue3);\n                }\n                voidPointer = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidPointer,longVar3,ppcValue2);\n                  pointerToPointerToChar1 = ppcValue2;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPointer,longVar3,ppcValue5), pointerToPointerToChar1 = ppcValue5,\n                     longVar3 != longVar1)) {\n                    print_error_message_001126c0(0,pointerToPointerToChar1,0,0);\n                    free(voidPointer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcValue5,uStackValue1 | 0x100);\n                free(voidPointer);\n                charValue2 = bfd_close_all_done(ppcValue5);\n                if (charValue2 == '\\0') {\n                  print_error_message_001126c0(pcValue4,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              uVar2 = get_modified_string_001125fa(ppcValue2);\n              print_error_message_0011a110(uVar2);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,ppcValue2,0,0);\n          }\nLAB_00104f00:\n          charValue2 = bfd_close_all_done(ppcValue5);\n          if (charValue2 == '\\0') {\n            print_error_message_001126c0(pcValue4,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pcValue4);\n          DAT_00127a20 = 1;\n        }\n        else {\n          if (charValue1 == '\\0') {\n            ppcValue5 = (char **)bfd_openw(pcValue4,*(undefined8 *)ppcValue2[1]);\n          }\n          else {\n            ppcValue5 = (char **)bfd_openw(pcValue4,tempDir);\n          }\n          if (ppcValue5 == (char **)0x0) goto LAB_00104e80;\n          charValue2 = FUNC_00114e50(ppcValue2,ppcValue5,extraFlags);\n          if (charValue2 == '\\0') {\n            intVar1 = bfd_get_arch(ppcValue2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charValue2 = bfd_close_all_done(ppcValue5);\n            if (charValue2 == '\\0') {\n              print_error_message_001126c0(pcValue4,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charValue2 = bfd_close(ppcValue5);\n          if (charValue2 == '\\0') {\n            print_error_message_001126c0(pcValue4,0,0,0);\n            DAT_00127a20 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279cb != '\\0') && (intVar2 == 0)) {\n            set_file_time_0011a350(pcValue4,&localStatStruct);\n          }\n          longVar2 = bfd_openr(pcValue4,tempDir);\n          __ptr[2] = longVar2;\n          *localPointer2 = longVar2;\n          localPointer2 = (long *)(longVar2 + 0xf0);\n          ppcValue5 = (char **)bfd_openr_next_archived_file(pointerToVoidPointer2);\n          bfd_close(ppcValue2);\n          ppcValue2 = ppcValue5;\n        }\n      }\n      *localPointer2 = 0;\n      voidPointer = (void *)xstrdup(*localPointer1);\n      if (DAT_00127a20 == 0) {\n        pcharValue10 = bfd_close;\n      }\n      else {\n        pcharValue10 = bfd_close_all_done;\n      }\n      charValue1 = (*pcharValue10)(localPointer1);\n      if (charValue1 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(voidPointer,0,0,0);\n      }\n      free(voidPointer);\n      voidPointer = (void *)xstrdup(*pointerToVoidPointer2);\n      charValue1 = bfd_close(pointerToVoidPointer2);\n      if (charValue1 == '\\0') {\n        DAT_00127a20 = 1;\n        print_error_message_001126c0(voidPointer,0,0,0);\n      }\n      free(voidPointer);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointerToVoidPointer2 = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointerToVoidPointer2;\n      }\n      rmdir(pcValue1);\n      free(pcValue1);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    DAT_00127a20 = 1;\n    return;\n  }\n  charValue1 = bfd_check_format_matches(pointerToVoidPointer2,1,localArray1);\n  if (charValue1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charValue1 = bfd_check_format_matches(pointerToVoidPointer2,3,&localStatStruct);\n    if (charValue1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      print_error_message_001126c0(inputFilePath,0,0,0);\n      if (intVar2 == 0xd) {\n        print_matching_formats_0011256b(localArray1[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a20 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(localStatStruct.st_dev);\n      DAT_00127a20 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(localArray1[0]);\n    }\n  }\n  if (tempDir == 0) {\n    tempDir = *(long *)pointerToVoidPointer2[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilePath,tempDir);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilePath,tempDir,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  execute_function_00114d50(longVar2,pointerToVoidPointer2,DAT_001264b4);\n  charValue1 = FUNC_00114e50(pointerToVoidPointer2,longVar2,extraFlags);\n  if (charValue1 == '\\0') {\n    DAT_00127a20 = 1;\n  }\n  else if (DAT_00127a20 == 0) {\n    charValue1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charValue1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charValue1 != '\\x01') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charValue1 = bfd_close(pointerToVoidPointer2);\n  if (charValue1 == '\\0') {\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "close",
                "FUN_00113f50",
                "bfd_stat",
                "bfd_set_error",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "bfd_set_format",
                "FUN_00114d50",
                "FUN_0011a0e0",
                "FUN_00119dd0",
                "FUN_00104d25",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_fdopenw",
                "bfd_openr_next_archived_file",
                "FUN_0011256b",
                "bfd_check_format",
                "free",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "param_1": "dataStructurePtr",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptrToElement",
                "uVar2": "result",
                "sVar3": "strLength",
                "lVar4": "temp1",
                "lVar5": "temp2",
                "local_8c": "formattedStr",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 initializeDataStructure_0010b800(long dataStructurePtr,int size,char flag)\n\n{\n  long *ptrToElement;\n  undefined8 result;\n  size_t strLength;\n  long temp1;\n  long temp2;\n  undefined2 formattedStr;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    temp1 = dataStructurePtr + 0xb8;\n    if (flag != '\\0') {\n      temp1 = dataStructurePtr + 0x78;\n    }\n    ptrToElement = (long *)(temp1 + (ulong)(size - 1U) * 8);\n    temp1 = *ptrToElement;\n    if (temp1 != 0) {\n      result = initialize_data_structure_00109cf4(dataStructurePtr,temp1,size);\n      return result;\n    }\n    temp1 = *(long *)(dataStructurePtr + 0x68);\n    *(long *)(dataStructurePtr + 0x68) = temp1 + 1;\n    *ptrToElement = temp1;\n    sprintf((char *)&formattedStr,\"%ld=r%ld;\",temp1,temp1);\n    if (flag == '\\0') {\n      temp2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      strLength = strlen((char *)&formattedStr);\n      sprintf((char *)((long)&formattedStr + strLength),\"%ld;%ld;\",-temp2,temp2 + -1);\n    }\n    else {\n      strLength = strlen((char *)&formattedStr);\n      *(undefined2 *)((long)&formattedStr + strLength) = 0x3b30;\n      *(undefined *)((long)&formattedStr + strLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedStr + strLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedStr + strLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_structure_00109b52(dataStructurePtr,&formattedStr,temp1,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "buffer",
                "param_5": "bufferSize",
                "uVar1": "value1",
                "uVar2": "value2",
                "cVar3": "character",
                "pcVar4": "str",
                "sVar5": "strLen",
                "__s": "combinedStr",
                "lVar6": "count",
                "__ptr": "tempPtr",
                "uVar7": "result",
                "uVar8": "flag2",
                "lVar9": "index",
                "uVar10": "newValue",
                "puVar11": "ptr",
                "bVar12": "flag3"
            },
            "code": "\nundefined8 processData_00109ed3(long data,uint flag,undefined4 value,long *buffer,ulong *bufferSize)\n\n{\n  ulong value1;\n  ulong value2;\n  char character;\n  char *str;\n  size_t strLen;\n  char *combinedStr;\n  long count;\n  void *tempPtr;\n  undefined8 result;\n  undefined flag2;\n  long index;\n  ulong newValue;\n  undefined *ptr;\n  byte flag3;\n  \n  flag3 = 0;\n  count = *(long *)(data + 0x60);\n  if (count != 0) {\n    value1 = *(ulong *)(count + 0x10);\n    if (((long)value1 < 1) || (buffer == (long *)0x0)) {\n      flag2 = *(undefined *)(count + 0x1c);\n      str = (char *)extract_and_free_ptr_00109b2f(data);\n      strLen = strlen(str);\n      combinedStr = (char *)xmalloc(strLen + 2);\n      sprintf(combinedStr,\"%c%s\",(ulong)flag,str);\n      free(str);\n      count = 0;\n    }\n    else {\n      newValue = *bufferSize;\n      if (newValue <= value1) {\n        if (newValue == 0) {\n          newValue = 10;\n        }\n        for (; newValue <= value1; newValue = newValue * 2) {\n        }\n        count = xrealloc(*buffer,newValue * 8);\n        value2 = *bufferSize;\n        *buffer = count;\n        ptr = (undefined *)(count + value2 * 8);\n        for (index = (newValue - value2) * 8; index != 0; index = index + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)flag3 * -2 + 1;\n        }\n        *bufferSize = newValue;\n      }\n      count = *(long *)(*buffer + value1 * 8);\n      if ((count != 0) && (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0')) {\n        tempPtr = (void *)extract_and_free_ptr_00109b2f(data);\n        free(tempPtr);\n        result = initialize_data_structure_00109cf4(data,count,value);\n        return result;\n      }\n      count = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = count + 1;\n      str = (char *)extract_and_free_ptr_00109b2f(data);\n      strLen = strlen(str);\n      combinedStr = (char *)xmalloc(strLen + 0x14);\n      sprintf(combinedStr,\"%ld=%c%s\",count,(ulong)flag,str);\n      free(str);\n      flag2 = 1;\n      *(long *)(*buffer + value1 * 8) = count;\n    }\n    character = initialize_data_structure_00109b52(data,combinedStr,count,flag2,value);\n    if (character != '\\0') {\n      free(combinedStr);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "xrealloc",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010a0d3",
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_00112925",
                "FUN_0010bf86",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0011378f",
                "FUN_0010a77a",
                "FUN_00114cf0",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_00114d60",
                "FUN_0010a2b9",
                "FUN_00108d9a",
                "FUN_00114190",
                "FUN_0011a480",
                "FUN_00114c80",
                "FUN_00115530",
                "FUN_00113b98",
                "FUN_0010ab4d",
                "FUN_0010c7a0",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a181",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00108c86",
                "FUN_0010c139",
                "FUN_0010e9a0",
                "FUN_00109022",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010bd62",
                "FUN_001125fa",
                "FUN_00109ed3",
                "FUN_00112904",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_00104ad6",
                "FUN_0010e842",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bbd3",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010aa53",
                "FUN_0010da0b",
                "FUN_0010e8a9",
                "FUN_0010a94e",
                "FUN_00108f08",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_00113e23",
                "FUN_00109a0b",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010d882",
                "FUN_0010c6be",
                "FUN_00112894",
                "FUN_0010bc80",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debug_info",
                "param_2": "filename",
                "puVar1": "previous_debug_info",
                "puVar2": "debug_units",
                "puVar3": "new_debug_info",
                "lVar4": "loop_counter",
                "puVar5": "pointer",
                "pcVar6": "filename_copy",
                "bVar7": "flag",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *previous_debug_info;\n  undefined4 *debug_units;\n  undefined4 *new_debug_info;\n  long loop_counter;\n  undefined4 *pointer;\n  char *filename_copy;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  filename_copy = \"\";\n  if (filename != (char *)0x0) {\n    filename_copy = filename;\n  }\n  debug_units = (undefined4 *)xmalloc(0x18);\n  pointer = debug_units;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *pointer = 0;\n    pointer = pointer + (ulong)flag * -2 + 1;\n  }\n  *(char **)(debug_units + 2) = filename_copy;\n  new_debug_info = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)debug_units;\n  pointer = new_debug_info;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *pointer = 0;\n    pointer = pointer + (ulong)flag * -2 + 1;\n  }\n  previous_debug_info = (undefined8 *)debug_info[1];\n  *(undefined4 **)(new_debug_info + 2) = debug_units;\n  if (previous_debug_info == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)new_debug_info;\n  }\n  else {\n    *previous_debug_info = new_debug_info;\n  }\n  debug_info[1] = (long)new_debug_info;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  return_value._8_8_ = param_4;\n  return_value._0_8_ = 1;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = get_modified_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = get_modified_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = get_modified_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_00127984 != 1) && ((DAT_00127984 & 1) != 0)) {\n      uVar18 = get_modified_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012797c != 0) {\n      uVar18 = get_modified_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279c9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_001278ec == '\\0') {\n    if (DAT_00127958 == '\\0') {\n      lVar35 = DAT_00127998 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_00127998 + _DAT_00127960;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_001278f0 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_modified_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = get_modified_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = compare_strings_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = compare_strings_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279cb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278a8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,create_output_section_00115530,param_2);\n  puVar30 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279c0,\n     cVar11 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_data_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a10;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = decompiled_function_0010554f();\n    return uVar26;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)create_initialized_buffer_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = process_debug_record_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = validate_and_initialize_memory_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = create_initialized_buffer_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_entry_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = process_debug_record_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = validate_and_initialize_memory_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_debug_record_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = close_debug_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_debug_line_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function_check_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278b0 + uStack_1f8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279a8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_and_copy_section_0011a2e0(puVar30);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278d0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278d0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278d8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127908;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127908;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = check_section_options_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_match_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279d8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_and_copy_section_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_00127980 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = reverse_and_improve_binary_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,perform_relocation_00116030,DAT_001278b0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_001279f8);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a08), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_001279e8), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_001279e0), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279d8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279d0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278d0), lVar35 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278a8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_section_options_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_binary_section_00116110,param_2);\n    for (puVar30 = DAT_001279c0; puVar38 = DAT_001279b8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = compare_strings_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a10,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = compare_strings_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)parse_build_attribute_notes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279b0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_format",
                "dcgettext",
                "FUN_00119ed0",
                "FUN_00107976",
                "FUN_001125fa",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "param_1": "inputValue",
                "param_2": "dataStruct",
                "uVar1": "count",
                "lVar2": "matchedValue"
            },
            "code": "\nlong findMatchingValue_00115d00(long inputValue,long dataStruct)\n\n{\n  uint count;\n  long matchedValue;\n  \n  matchedValue = DAT_001278b0;\n  if (DAT_001278b0 != 0) {\n    if (*(int *)(*(long *)(dataStruct + 8) + 8) == 5) {\n      if (*(int *)(inputValue + 0x28) == *(int *)(*(long *)(dataStruct + 0x110) + 0xd40)) {\n        count = *(uint *)(inputValue + 0x2c);\n        if (count == 0) {\n          matchedValue = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(dataStruct + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(dataStruct + 8) + 0x380) + 0x340) + 5))\n        {\n          matchedValue = *(long *)(DAT_001278b0 + (ulong)(count - 1) * 8);\n        }\n        else {\n          matchedValue = 0;\n        }\n      }\n      else {\n        matchedValue = 0;\n      }\n    }\n    else {\n      matchedValue = 0;\n    }\n  }\n  return matchedValue;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "find_matching_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_and_allocate_memory_00113c43",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "lVar1": "memory_ptr",
                "plVar2": "allocated_memory_ptr",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ninitialize_and_allocate_memory_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long memory_ptr;\n  long *allocated_memory_ptr;\n  undefined return_value [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    memory_ptr = initialize_memory_00112904(0x10,0);\n    if (memory_ptr != 0) {\n      allocated_memory_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_memory_ptr + 0x21) = 0;\n      *allocated_memory_ptr = input_1;\n      *(undefined4 *)((long)allocated_memory_ptr + 0x24) = 0;\n      allocated_memory_ptr[1] = input_2;\n      allocated_memory_ptr[2] = input_3;\n      allocated_memory_ptr[3] = input_4;\n      *(undefined *)(allocated_memory_ptr + 4) = input_5;\n      *(long **)(memory_ptr + 0x10) = allocated_memory_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  memory_ptr = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_6;\n  return_value._0_8_ = memory_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_debug_record_00112a33",
                "param_2": "filePtr",
                "param_4": "recordType",
                "uVar1": "result",
                "lVar2": "returnValue",
                "plVar3": "allocatedSlots"
            },
            "code": "\nbool processDebugRecord_00112a33(undefined8 param_1,long filePtr,undefined8 param_3,byte recordType,undefined8 param_5\n                 ,undefined8 param_6,uint param_7)\n\n{\n  undefined result;\n  long returnValue;\n  long *allocatedSlots;\n  \n  if (recordType < 0x12) {\n    if (recordType != 0) {\n      switch(recordType) {\n      case 1:\n        result = record_variable_debug_0010c05d(param_5,*(undefined8 *)(filePtr + 8),param_6,4,\n                             *(long *)(filePtr + 0x10) + *(long *)(*(long *)(filePtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable_debug_0010c05d(param_5,*(undefined8 *)(filePtr + 8),param_6,(param_7 & 0xff) + 2,\n                             *(long *)(filePtr + 0x10) + *(long *)(*(long *)(filePtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable_debug_0010c05d(param_5,*(undefined8 *)(filePtr + 8),param_6,5,\n                             *(long *)(filePtr + 0x10) + *(long *)(*(long *)(filePtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_0010bd62(param_5,*(undefined8 *)(filePtr + 8),param_6,1,\n                             *(long *)(filePtr + 0x10) + *(long *)(*(long *)(filePtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        returnValue = validate_debug_tag_type_0010c6be(param_5,*(undefined8 *)(filePtr + 8));\n        if (returnValue == 0) {\n          return false;\n        }\n        allocatedSlots = (long *)allocate_and_fill_slots_0010da0b(param_1,param_3);\n        *allocatedSlots = returnValue;\n        break;\n      case 0xd:\n        returnValue = process_file_0010c218(param_5,*(undefined8 *)(filePtr + 8));\n        return returnValue != 0;\n      case 0x11:\n        result = record_parameter_0010bd62(param_5,*(undefined8 *)(filePtr + 8),param_6,2,\n                             *(long *)(filePtr + 0x10) + *(long *)(*(long *)(filePtr + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (recordType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable_debug_0010c05d(param_5,*(undefined8 *)(filePtr + 8),param_6,1,\n                         *(long *)(filePtr + 0x10) + *(long *)(*(long *)(filePtr + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_record_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "process_xcoff_type_0010c2d2",
                "uVar1": "typeIndicator",
                "pcVar2": "typeString",
                "uVar3": "memoryBlock",
                "lVar4": "result",
                "plVar5": "fileType"
            },
            "code": "\n\n\nlong processXCOFFType_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint typeIndicator;\n  char *typeString;\n  undefined8 memoryBlock;\n  long result;\n  long *fileType;\n  uint uVar6;\n  \n  if ((*param_3 == 0) && (typeIndicator = param_3[1], (int)typeIndicator < 0)) {\n    uVar6 = ~typeIndicator;\n    if (uVar6 < 0x22) {\n      result = *(long *)(param_2 + 0x90 + (ulong)uVar6 * 8);\n      if (result == 0) {\n        switch(uVar6) {\n        case 1:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(1,0);\n          typeString = \"char\";\n          break;\n        case 2:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(2,0);\n          typeString = \"short\";\n          break;\n        case 3:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,0);\n          typeString = \"long\";\n          break;\n        case 4:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(1,1);\n          typeString = \"unsigned char\";\n          break;\n        case 5:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(1,0);\n          typeString = \"signed char\";\n          break;\n        case 6:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(2,1);\n          typeString = \"unsigned short\";\n          break;\n        case 7:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,1);\n          typeString = \"unsigned int\";\n          break;\n        case 8:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,1);\n          typeString = \"unsigned\";\n          break;\n        case 9:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,1);\n          typeString = \"unsigned long\";\n          break;\n        case 10:\n          memoryBlock = initialize_memory_00113e17();\n          typeString = \"void\";\n          break;\n        case 0xb:\n          memoryBlock = initialize_memory_00113df2(4);\n          typeString = \"float\";\n          break;\n        case 0xc:\n          memoryBlock = initialize_memory_00113df2(8);\n          typeString = \"double\";\n          break;\n        case 0xd:\n          memoryBlock = initialize_memory_00113df2(8);\n          typeString = \"long double\";\n          break;\n        case 0xe:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,0);\n          typeString = \"integer\";\n          break;\n        case 0xf:\n          memoryBlock = initialize_memory_00112904(6,4);\n          typeString = \"boolean\";\n          break;\n        case 0x10:\n          memoryBlock = initialize_memory_00113df2(4);\n          typeString = \"short real\";\n          break;\n        case 0x11:\n          memoryBlock = initialize_memory_00113df2(8);\n          typeString = \"real\";\n          break;\n        case 0x12:\n          typeString = \"stringptr\";\n          memoryBlock = 0;\n          break;\n        case 0x13:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(1,1);\n          typeString = \"character\";\n          break;\n        case 0x14:\n          memoryBlock = initialize_memory_00112904(6,1);\n          typeString = \"logical*1\";\n          break;\n        case 0x15:\n          memoryBlock = initialize_memory_00112904(6,2);\n          typeString = \"logical*2\";\n          break;\n        case 0x16:\n          memoryBlock = initialize_memory_00112904(6,4);\n          typeString = \"logical*4\";\n          break;\n        case 0x17:\n          memoryBlock = initialize_memory_00112904(6,4);\n          typeString = \"logical\";\n          break;\n        case 0x18:\n          memoryBlock = initialize_memory_00112904(5,8);\n          typeString = \"complex\";\n          break;\n        case 0x19:\n          memoryBlock = initialize_memory_00112904(5,0x10);\n          typeString = \"double complex\";\n          break;\n        case 0x1a:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(1,0);\n          typeString = \"integer*1\";\n          break;\n        case 0x1b:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(2,0);\n          typeString = \"integer*2\";\n          break;\n        case 0x1c:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,0);\n          typeString = \"integer*4\";\n          break;\n        case 0x1d:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(2,0);\n          typeString = \"wchar\";\n          break;\n        case 0x1e:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(8,0);\n          typeString = \"long long\";\n          break;\n        case 0x1f:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(8,1);\n          typeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          memoryBlock = initialize_memory_00112904(6,8);\n          typeString = \"logical*8\";\n          break;\n        case 0x21:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(8,0);\n          typeString = \"integer*8\";\n          break;\n        default:\n          memoryBlock = initialize_memory_and_set_param_00113dfe(4,0);\n          typeString = \"int\";\n        }\n        result = process_file_0010c218(param_1,typeString,memoryBlock);\n        *(long *)(param_2 + 0x90 + (ulong)uVar6 * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    typeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeString,(ulong)typeIndicator);\n  }\n  else {\n    fileType = (long *)get_file_of_type_00109022(param_2);\n    if (fileType != (long *)0x0) {\n      if (*fileType == 0) {\n        result = create_memory_block_00113e23(fileType,0);\n        return result;\n      }\n      return *fileType;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c218",
                "fprintf",
                "dcgettext",
                "FUN_00113df2",
                "FUN_00113e23",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00109022",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_xcoff_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "extract_symbols_0010e07c",
                "param_1": "param1",
                "param_2": "symbolTable",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "header",
                "param_6": "param6",
                "lVar1": "fileSize",
                "lVar2": "symbolAddress",
                "lVar3": "currentSymbol",
                "cVar4": "symbolStatus",
                "uVar5": "bfdError",
                "__ptr": "symbolList",
                "uVar6": "symbolValue",
                "uVar7": "symbolIndex",
                "puVar8": "newSymbol",
                "pcVar9": "errorMsg",
                "puVar10": "auxPtr",
                "uVar11": "symbolSize",
                "lVar12": "symbolCount",
                "iVar13": "symbolOffset",
                "iVar14": "symbolCapacity",
                "local_a8": "newSymbolValue",
                "uStack_a4": "newSymbolValueUpper",
                "uStack_a0": "newSymbolIndex",
                "uStack_9c": "newSymbolIndexUpper",
                "local_88": "symbolName",
                "local_6a": "symbolType",
                "local_68": "auxType",
                "local_67": "auxPresent",
                "local_60": "auxData",
                "local_56": "sectionIndex"
            },
            "code": "\nundefined8\nextractSymbols_0010e07c(undefined8 param1,long *symbolTable,undefined8 param3,int param4,long header,\n            undefined8 param6)\n\n{\n  long fileSize;\n  long symbolAddress;\n  long currentSymbol;\n  char symbolStatus;\n  undefined4 bfdError;\n  void *symbolList;\n  undefined8 symbolValue;\n  undefined8 symbolIndex;\n  undefined4 *newSymbol;\n  char *errorMsg;\n  undefined *auxPtr;\n  uint symbolSize;\n  long symbolCount;\n  int symbolOffset;\n  int symbolCapacity;\n  undefined4 newSymbolValue;\n  undefined4 newSymbolValueUpper;\n  undefined4 newSymbolIndex;\n  undefined4 newSymbolIndexUpper;\n  undefined symbolName [30];\n  undefined2 symbolType;\n  byte auxType;\n  byte auxPresent;\n  undefined auxData [10];\n  ushort sectionIndex;\n  \n  symbolCapacity = 10;\n  symbolCount = 0;\n  fileSize = *(long *)(header + 0x18);\n  symbolList = (void *)xmalloc(0x50);\n  while ((symbolTable[3] < fileSize && (symbolTable[2] < symbolTable[1]))) {\n    symbolAddress = *(long *)(*symbolTable + symbolTable[2] * 8);\n    symbolStatus = bfd_coff_get_syment(param1,symbolAddress,symbolName);\n    if (symbolStatus == '\\0') {\n      bfdError = bfd_get_error();\n      symbolValue = bfd_errmsg(bfdError);\n      errorMsg = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      symbolIndex = dcgettext(0,errorMsg,5);\n      print_error_message_00119ed0(symbolIndex,symbolValue);\n      free(symbolList);\n      return 0;\n    }\n    currentSymbol = symbolTable[3];\n    auxPtr = (undefined *)0x0;\n    symbolTable[2] = symbolTable[2] + 1;\n    symbolTable[3] = currentSymbol + 1 + (ulong)auxPresent;\n    if (auxPresent != 0) {\n      auxPtr = auxData;\n      symbolStatus = bfd_coff_get_auxent(param1,symbolAddress,0,auxPtr);\n      if (symbolStatus == '\\0') {\n        bfdError = bfd_get_error();\n        symbolValue = bfd_errmsg(bfdError);\n        errorMsg = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (auxType == 0x12) {\n      symbolSize = (uint)sectionIndex;\n      symbolOffset = (int)*(undefined8 *)(symbolAddress + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolAddress + 0x20) + 0x30);\n    }\n    else {\n      if (auxType < 0x13) {\n        if ((auxType == 8) || (auxType == 0xb)) {\n          symbolSize = 0;\n          symbolOffset = ((int)*(undefined8 *)(symbolAddress + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolAddress + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (auxType == 0x66) break;\n      symbolSize = 0;\n      symbolOffset = 0;\n    }\nLAB_0010e214:\n    symbolIndex = parse_coff_type_0010dac0(param1,symbolTable,param3,currentSymbol,symbolType,auxPtr,1);\n    symbolValue = *(undefined8 *)(symbolAddress + 8);\n    newSymbol = (undefined4 *)xmalloc(0x20);\n    newSymbolValue = (undefined4)symbolValue;\n    newSymbolValueUpper = (undefined4)((ulong)symbolValue >> 0x20);\n    newSymbolIndex = (undefined4)symbolIndex;\n    newSymbolIndexUpper = (undefined4)((ulong)symbolIndex >> 0x20);\n    *(undefined8 *)(newSymbol + 5) = 0;\n    newSymbol[6] = symbolOffset;\n    newSymbol[7] = symbolSize;\n    newSymbol[4] = 0;\n    *newSymbol = newSymbolValue;\n    newSymbol[1] = newSymbolValueUpper;\n    newSymbol[2] = newSymbolIndex;\n    newSymbol[3] = newSymbolIndexUpper;\n    if (symbolCapacity <= (int)symbolCount + 1) {\n      symbolCapacity = symbolCapacity + 10;\n      symbolList = (void *)xrealloc(symbolList,(long)symbolCapacity << 3,newSymbol,0,param6);\n    }\n    *(undefined4 **)((long)symbolList + symbolCount * 8) = newSymbol;\n    symbolCount = symbolCount + 1;\n  }\n  *(undefined8 *)((long)symbolList + (long)(int)symbolCount * 8) = 0;\n  symbolValue = initialize_memory_00113da9(param4 == 8,*(undefined2 *)(header + 10),symbolList);\n  return symbolValue;\n}\n\n",
            "called": [
                "FUN_00113da9",
                "xrealloc",
                "bfd_errmsg",
                "free",
                "dcgettext",
                "xmalloc",
                "bfd_coff_get_syment",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "FUN_0010dac0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "extract_symbols_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_application_001082c3"
            },
            "code": "\nundefined8 initializeApplication_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_application_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "load_and_parse_file_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "fileData",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashSlot",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextChar",
                "pbVar10": "currentPtr",
                "pbVar11": "nextPtr",
                "pbVar12": "linePtr",
                "iVar1": "lineNumber",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "localizedError"
            },
            "code": "\nvoid loadAndParseFile_00114460(char *filename,undefined8 hashTable,byte **fileData)\n\n{\n  int lineNumber;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 localizedError;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashSlot;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  byte *currentPtr;\n  byte *nextPtr;\n  byte *linePtr;\n  \n  fileSize = get_file_information_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a20 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      localizedError = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(localizedError,filename,errorString);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      localizedError = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(localizedError,filename);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    linePtr = fileBuffer;\n    while (currentPtr = linePtr, currentByte != 0) {\n      for (; currentByte = *currentPtr, nextPtr = currentPtr, currentByte != 10; currentPtr = currentPtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextChar = currentPtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPtr = 0;\n            nextChar = currentPtr + 1;\n            if (currentPtr[1] == 10) {\n              nextChar = currentPtr + 2;\n              nextPtr = currentPtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            parse_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPtr = 0;\n      if (currentPtr[1] == 0xd) {\n        nextPtr = currentPtr + 1;\n        nextChar = currentPtr + 2;\n      }\n      else {\n        nextChar = currentPtr + 1;\n      }\nLAB_00114553:\n      currentByte = *linePtr;\n      while ((currentByte == 0x20 || (currentPtr = linePtr, currentByte == 9))) {\n        currentPtr = linePtr + 1;\n        linePtr = linePtr + 1;\n        currentByte = *currentPtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPtr[1];\n        currentPtr = currentPtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPtr[6];\n          currentChar = currentPtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          localizedError = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(localizedError,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentPtr = 0;\n      if (linePtr < currentPtr) {\n        hashSlot = (byte **)htab_find_slot(hashTable,linePtr,1);\n        *hashSlot = linePtr;\n      }\n      lineNumber = lineNumber + 1;\n      linePtr = nextChar;\n      currentByte = nextPtr[1];\n    }\n    *fileData = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "__errno_location",
                "FUN_00113f50",
                "dcgettext",
                "xmalloc",
                "strerror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "load_and_parse_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "create_formatted_message_0010a94e",
                "param_1": "input",
                "param_2": "name",
                "param_3": "data",
                "param_4": "flag",
                "cVar1": "flagChar",
                "__s": "extractedData",
                "sVar3": "inputSize",
                "sVar4": "nameSize",
                "sVar5": "dataSize",
                "sVar6": "flagSize",
                "pcVar7": "formattedMessage",
                "uVar8": "result",
                "pcVar9": "flagStr",
                "lVar2": "ptrToInputStruct"
            },
            "code": "\nundefined8 createFormattedMessage_0010a94e(long input,char *name,char *data,int flag)\n\n{\n  char flagChar;\n  long ptrToInputStruct;\n  char *extractedData;\n  size_t inputSize;\n  size_t nameSize;\n  size_t dataSize;\n  size_t flagSize;\n  char *formattedMessage;\n  undefined8 result;\n  char *flagStr;\n  \n  flagChar = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  extractedData = (char *)extract_and_free_ptr_00109b2f();\n  formattedMessage = *(char **)(*(long *)(input + 0x60) + 0x20);\n  if (formattedMessage == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    inputSize = strlen(formattedMessage);\n    nameSize = strlen(name);\n    dataSize = strlen(extractedData);\n    flagSize = strlen(data);\n    formattedMessage = (char *)xmalloc(inputSize + 10 + nameSize + dataSize + flagSize);\n    if (flag == 1) {\n      flagStr = \"/1\";\n    }\n    else {\n      flagStr = \"/0\";\n      if ((flag != 2) && (flagStr = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedMessage,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(input + 0x60) + 0x20),name,flagStr,\n            extractedData,data,*(long *)(input + 0x60));\n    free(*(void **)(*(long *)(input + 0x60) + 0x20));\n    ptrToInputStruct = *(long *)(input + 0x60);\n    *(char **)(ptrToInputStruct + 0x20) = formattedMessage;\n    if (flagChar != '\\0') {\n      *(undefined *)(ptrToInputStruct + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptrToInputStruct >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_formatted_message_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "find_circular_dependency_00113b1e",
                "param_1": "input_value",
                "param_2": "unused_param",
                "param_3": "param_value",
                "param_4": "result_value",
                "auVar1": "result_1",
                "piVar2": "circular_dependency",
                "uVar3": "dependency_value",
                "auVar4": "result_2"
            },
            "code": "\nundefined  [16] find_circular_dependency_00113b1e(long input_value,undefined8 unused_param,ulong param_value,undefined8 result_value)\n\n{\n  undefined result_1 [16];\n  int *circular_dependency;\n  undefined8 dependency_value;\n  undefined result_2 [16];\n  \n  if (input_value != 0) {\n    circular_dependency = (int *)find_circular_dependency_00113b1e_00112b6e(input_value,0);\n    if ((circular_dependency == (int *)0x0) || (3 < *circular_dependency - 7U)) {\n      dependency_value = 0;\n    }\n    else {\n      dependency_value = **(undefined8 **)(circular_dependency + 4);\n    }\n    result_2._8_8_ = result_value;\n    result_2._0_8_ = dependency_value;\n    return result_2;\n  }\n  result_1._8_8_ = 0;\n  result_1._0_8_ = param_value;\n  return result_1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "find_circular_dependency_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "build_request_0010a0e9",
                "param_1": "requestPtr",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "flag",
                "uVar2": "result",
                "__s": "extractedString",
                "sVar3": "stringLength",
                "__s_00": "newString"
            },
            "code": "\nundefined4 buildRequest_0010a0e9(long requestPtr,undefined8 value1,undefined8 value2)\n\n{\n  undefined flag;\n  undefined4 result;\n  char *extractedString;\n  size_t stringLength;\n  char *newString;\n  \n  flag = *(undefined *)(*(long *)(requestPtr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(requestPtr + 0x60) + 0x18);\n  extractedString = (char *)extract_and_free_ptr_00109b2f();\n  stringLength = strlen(extractedString);\n  newString = (char *)xmalloc(stringLength + 100);\n  sprintf(newString,\"r%s;%ld;%ld;\",extractedString,value1,value2);\n  free(extractedString);\n  result = initialize_data_structure_00109b52(requestPtr,newString,0,flag,result);\n  if ((char)result != '\\0') {\n    free(newString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "build_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_and_compare_data_00114c20",
                "param_1": "data",
                "cVar1": "comparisonResult",
                "pcVar2": "stringPointer"
            },
            "code": "\nvoid processAndCompareData_00114c20(long data)\n\n{\n  char comparisonResult;\n  char *stringPointer;\n  \n  process_data_00114190(data,1,1);\n  comparisonResult = compare_strings_00113fb0(data,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    stringPointer = (char *)(data + 5);\n    if (*(char *)(data + 4) != 'a') {\n      stringPointer = (char *)(data + 4);\n    }\n    if (*stringPointer != '\\0') {\n      process_data_00114190(stringPointer,1,0x100);\n    }\n  }\n  DAT_001278b8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_00114190"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_and_compare_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_section_options_00115f50",
                "param_1": "section_options",
                "param_2": "arguments",
                "param_3": "flag",
                "__s1": "arg_string",
                "uVar1": "string_comparison_result",
                "uVar2": "return_value",
                "extraout_EDX": "comparison_result",
                "plVar3": "section_options_ptr",
                "auVar4": "section_check_result"
            },
            "code": "\nuint check_section_options_00115f50(long section_options,char **arguments,char flag)\n\n{\n  char *arg_string;\n  uint string_comparison_result;\n  undefined4 return_value;\n  undefined4 comparison_result;\n  long *section_options_ptr;\n  undefined section_check_result [12];\n  \n  if ((DAT_00127a20 != 0) || (DAT_001278ec != '\\0')) {\n    return 1;\n  }\n  section_check_result = check_section_options_00115f50_001159d0(arguments);\n  if (section_check_result[0] == '\\0') {\n    if (DAT_001279b8 != (long *)0x0) {\n      arg_string = *arguments;\n      section_options_ptr = DAT_001279b8;\n      do {\n        string_comparison_result = strcmp(arg_string,(char *)section_options_ptr[1]);\n        section_check_result._4_4_ = 0;\n        section_check_result._0_4_ = string_comparison_result;\n        section_check_result._8_4_ = comparison_result;\n        if (string_comparison_result == 0) {\n          return 1;\n        }\n        section_options_ptr = (long *)*section_options_ptr;\n      } while (section_options_ptr != (long *)0x0);\n    }\n    return_value = section_check_result._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a00 == '\\0')) ||\n         (section_check_result._8_4_ = return_value, section_check_result._0_8_ = *(long *)(section_options + 8),\n         *(int *)(*(long *)(section_options + 8) + 8) != 5)) ||\n        ((section_check_result._0_8_ = (ulong)arguments[0x1a], *(int *)(arguments[0x1a] + 4) != 7 ||\n         (section_check_result = compare_strings_00113fb0(*arguments,\".gnu.build.attributes\"), section_check_result[0] == '\\0')))) &&\n       ((*(byte *)((long)arguments + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(section_check_result._1_7_,arguments[8] == (char *)0x0) |\n             CONCAT31(section_check_result._9_3_,arguments[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "unaff_RBX": "section_length",
                "unaff_EBP": "message_length",
                "uVar1": "section",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_and_exit_001083de(void)\n\n{\n  undefined8 section;\n  undefined8 error_message;\n  undefined8 *section_length;\n  undefined4 message_length;\n  \n  section = *section_length;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_001083de_00119dd0(error_message,section,message_length);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880",
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "param_1": "dataStructurePtr",
                "param_2": "numElements",
                "lVar1": "currentElement",
                "cVar2": "successFlag",
                "__ptr": "extractedPtr",
                "uVar3": "unsignedNumElements",
                "uVar4": "unsignedIndex",
                "local_5a": "outputString"
            },
            "code": "\nvoid initializeDataStructure_0010b948(long dataStructurePtr,uint numElements)\n\n{\n  long currentElement;\n  char successFlag;\n  void *extractedPtr;\n  ulong unsignedNumElements;\n  uint unsignedIndex;\n  char outputString [50];\n  \n  unsignedIndex = numElements - 1;\n  unsignedNumElements = (ulong)numElements;\n  if ((unsignedIndex < 0x10) && (currentElement = *(long *)(dataStructurePtr + 0xf8 + (ulong)unsignedIndex * 8), currentElement != 0)) {\n    initialize_data_structure_00109cf4(dataStructurePtr,currentElement,unsignedNumElements);\n    return;\n  }\n  successFlag = initialize_data_structure_0010b800(dataStructurePtr,4,0);\n  if (successFlag != '\\0') {\n    extractedPtr = (void *)extract_and_free_ptr_00109b2f(dataStructurePtr);\n    currentElement = *(long *)(dataStructurePtr + 0x68);\n    *(long *)(dataStructurePtr + 0x68) = currentElement + 1;\n    if (unsignedIndex < 0x10) {\n      *(long *)(dataStructurePtr + 0xf8 + (ulong)unsignedIndex * 8) = currentElement;\n    }\n    sprintf(outputString,\"%ld=r%s;%u;0;\",currentElement,extractedPtr,unsignedNumElements);\n    free(extractedPtr);\n    initialize_data_structure_00109b52(dataStructurePtr,outputString,currentElement,1,unsignedNumElements);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010b800",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104966",
                "FUN_00116490",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010827b",
                "FUN_00104cc1",
                "FUN_0010bf20",
                "FUN_00108b3e",
                "FUN_00108072",
                "FUN_00114e50",
                "FUN_00104a35",
                "FUN_00107976",
                "FUN_001053b5",
                "FUN_00108d9a",
                "FUN_001126c0",
                "FUN_00114190",
                "FUN_001083de",
                "FUN_00115530",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00108fb9",
                "FUN_00115dc0",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_001163d0",
                "FUN_00116b90",
                "FUN_0011256b",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_00114690",
                "FUN_00115b70",
                "FUN_0010e2f0",
                "FUN_00119970",
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010882c",
                "FUN_00104ad6",
                "FUN_00113f50",
                "FUN_0010be88",
                "FUN_0010543c",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_00112996",
                "FUN_0010dac0",
                "FUN_00108916",
                "FUN_00108808",
                "FUN_0011173a",
                "FUN_0010871c",
                "FUN_001086af",
                "FUN_00109a32",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_0010808f",
                "FUN_0010da0b",
                "FUN_00108200",
                "FUN_0010551d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010bc80",
                "FUN_00105828",
                "FUN_0010b800",
                "FUN_00107880",
                "FUN_00104920"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_circular_dependency_00112b6e",
                "param_1": "input_list",
                "param_2": "debug_info_list",
                "iVar1": "input_value",
                "__format": "debug_message_format",
                "piVar3": "result_list",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "next_debug_info_list",
                "local_10": "next_input_list",
                "uVar2": "return_value"
            },
            "code": "\n\n\nint * find_circular_dependency_00112b6e(int *input_list,long *debug_info_list)\n\n{\n  int input_value;\n  undefined8 return_value;\n  char *debug_message_format;\n  int *result_list;\n  long *current_debug_info;\n  bool is_circular;\n  long *next_debug_info_list;\n  int *next_input_list;\n  \n  input_value = *input_list;\n  if ((input_value != 1) && (1 < input_value - 0x16U)) {\n    return input_list;\n  }\n  current_debug_info = debug_info_list;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_list == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      return_value = get_return_value_001129f4(input_list,\"debug_get_real_type: circular debug information for %s\\n\");\n      debug_message_format = (char *)dcgettext(0);\n      fprintf(_stderr,debug_message_format,return_value);\n      return (int *)0x0;\n    }\n  }\n  next_debug_info_list = debug_info_list;\n  next_input_list = input_list;\n  if (input_value - 0x16U < 2) {\n    result_list = (int *)find_circular_dependency_00112b6e((*(undefined8 **)(input_list + 4))[1],&next_debug_info_list);\n    return result_list;\n  }\n  result_list = *(int **)**(undefined8 **)(input_list + 4);\n  if (input_list == result_list) {\n    return input_list;\n  }\n  if (result_list == (int *)0x0) {\n    return input_list;\n  }\n  result_list = (int *)find_circular_dependency_00112b6e(result_list,&next_debug_info_list);\n  return result_list;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010922b",
                "FUN_00113b1e",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "find_circular_dependency_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "length",
                "param_4": "flag",
                "param_5": "mask",
                "param_6": "is_condition_met",
                "param_7": "has_value",
                "uVar1": "result",
                "__s": "str1",
                "__s_00": "str2",
                "sVar2": "str_len",
                "cVar3": "flag_value"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 param_ptr,ulong length,undefined flag,ulong mask,\n            byte is_condition_met,byte has_value)\n\n{\n  undefined4 result;\n  char *str1;\n  char *str2;\n  size_t str_len;\n  char flag_value;\n  \n  if (((has_value ^ 1) & is_condition_met) == 0) {\n    str1 = (char *)0x0;\n    flag_value = '\\0';\n  }\n  else {\n    flag_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    str1 = (char *)extract_and_free_ptr_00109b2f();\n    mask = mask & 0xffffffff;\n    length = length & 0xffffffff;\n  }\n  result = initialize_data_0010a69a(data_ptr,param_ptr,length,flag,mask);\n  if ((char)result != '\\0') {\n    if (is_condition_met == 0) {\n      return result;\n    }\n    if (has_value == 0) {\n      if (str1 == (char *)0x0) {\n        return 0;\n      }\n      str_len = strlen(str1);\n      str2 = (char *)xmalloc(str_len + 3);\n      sprintf(str2,\"~%%%s\",str1);\n      free(str1);\n      if (flag_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      str2 = (char *)xmalloc(0x14);\n      sprintf(str2,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = str2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_initialize_memory_00113d6e",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "lVar1": "memory_address",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong allocate_and_initialize_memory_00113d6e(undefined8 input_param1,undefined8 input_param2)\n\n{\n  long memory_address;\n  undefined8 *allocated_memory;\n  \n  memory_address = initialize_memory_00112904(0xb,0);\n  if (memory_address != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_param1;\n    allocated_memory[1] = input_param2;\n    *(undefined8 **)(memory_address + 0x10) = allocated_memory;\n  }\n  return memory_address;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010e07c",
                "FUN_0010ba08",
                "FUN_0010a77a",
                "FUN_00116852",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_0010a2b9",
                "FUN_00104a35",
                "FUN_0010c1c6",
                "FUN_00109b2f",
                "FUN_0010e918",
                "FUN_0010a181",
                "FUN_0010e9a0",
                "FUN_00108466",
                "FUN_001163d0",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010a377",
                "FUN_0011256b",
                "FUN_0010eafe",
                "FUN_001081e9",
                "FUN_0010ee3f",
                "FUN_00114690",
                "FUN_001125fa",
                "FUN_001088ae",
                "FUN_00109ed3",
                "FUN_0010554f",
                "FUN_0010e5db",
                "FUN_0010e842",
                "FUN_0010a0e9",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010afd5",
                "FUN_001199d0",
                "FUN_0010aa53",
                "FUN_0010e8a9",
                "FUN_00114b84",
                "FUN_0010a94e",
                "FUN_0010551d",
                "FUN_0010a83e",
                "FUN_00116110",
                "FUN_0010d21c",
                "FUN_00108863",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_0010b6ea",
                "FUN_0010b0fa",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "inputData1",
                "param_2": "inputData2",
                "param_3": "flags",
                "byte": "byteValue"
            },
            "code": "\nvoid executeFunction_00114d50(long inputData1,long inputData2,uint flags)\n\n{\n  if (*(int *)(*(long *)(inputData1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flags == 2) && (*(int *)(*(long *)(inputData2 + 8) + 8) == 2)) {\n    flags = (uint)*(byteValue *)(*(long *)(*(long *)(inputData2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(inputData1 + 8) + 0x380) + 0x78))(inputData1,flags != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00114d60",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00113f50",
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_binary_file_copy_info_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "dataVariable",
                "pcVar2": "textPointer"
            },
            "code": "\nvoid printBinaryFileCopyInfo_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 dataVariable;\n  char *textPointer;\n  \n  dataVariable = DAT_001275e0;\n  textPointer = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,textPointer,dataVariable);\n  textPointer = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,textPointer);\n  textPointer = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,textPointer);\n  textPointer = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,textPointer);\n  textPointer = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,textPointer);\n  textPointer = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,textPointer);\n  print_supported_targets_00104a35(DAT_001275e0,outputFile);\n  if (exitCode == 0) {\n    textPointer = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,textPointer,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "FUN_00104a35",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binary_file_copy_info_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorType",
                "param_2": "errorCode",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMsg",
                "param_10": "stringSize",
                "param_11": "modifiedString",
                "param_12": "formatString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "boolFlag",
                "iVar1": "bfdError",
                "uVar2": "errorString",
                "local_100": "temp1",
                "local_fc": "temp2",
                "local_f8": "temp3",
                "local_f0": "temp4",
                "local_e8": "buffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "param1Copy",
                "local_a8": "param2Copy",
                "local_98": "param3Copy",
                "local_88": "param4Copy",
                "local_78": "param5Copy",
                "local_68": "param6Copy",
                "local_58": "param7Copy",
                "local_48": "param8Copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorType,undefined4 errorCode,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long errorMsg,long stringSize,long *modifiedString,char *formatString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char boolFlag;\n  int bfdError;\n  undefined8 errorString;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined *temp3;\n  undefined *temp4;\n  undefined buffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (boolFlag != '\\0') {\n    param1Copy = errorType;\n    param2Copy = errorCode;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_001275e0,_stderr);\n  if (stringSize != 0) {\n    if (errorMsg == 0) {\n      errorMsg = get_modified_string_001125fa(stringSize);\n    }\n    if ((modifiedString != (long *)0x0) && (*modifiedString != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMsg);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMsg);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    temp3 = &stack0x00000008;\n    temp4 = buffer;\n    temp1 = 0x20;\n    temp2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&temp1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorString);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "bfd_errmsg",
                "fprintf",
                "fflush",
                "dcgettext",
                "fwrite",
                "bfd_get_error",
                "vfprintf",
                "FUN_001125fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_0010554f",
                "FUN_00104d25",
                "FUN_0010551d",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00108466",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001086af",
                "FUN_00114e50",
                "FUN_00114690",
                "FUN_0010808f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_001088ae",
                "FUN_00109b52"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_memory_for_param_00113b4a",
                "param_1": "param",
                "lVar1": "mem_ptr"
            },
            "code": "\nlong initialize_memory_for_param_00113b4a(long param)\n\n{\n  long mem_ptr;\n  \n  if (param != 0) {\n    mem_ptr = initialize_memory_00112904(0x15,0);\n    if (mem_ptr == 0) {\n      mem_ptr = 0;\n    }\n    else {\n      *(long *)(mem_ptr + 0x10) = param;\n    }\n    return mem_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_for_param_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "process_data_0010edb4",
                "param_1": "data_ptr",
                "param_2": "filename",
                "param_3": "data_type",
                "param_4": "data_size",
                "cVar1": "char_result",
                "iVar2": "filename_comparison_result",
                "uVar3": "process_result",
                "in_R10": "additional_data",
                "process_string_data_0010e2f0": "process_string_data"
            },
            "code": "\nundefined8 process_data_0010edb4(long data_ptr,undefined8 filename,undefined4 data_type,ulong data_size)\n\n{\n  char char_result;\n  int filename_comparison_result;\n  undefined8 process_result;\n  undefined8 additional_data;\n  \n  if (*(long *)(data_ptr + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(data_ptr + 0x1f0) < data_size) {\n    *(ulong *)(data_ptr + 0x1f0) = data_size;\n  }\n  filename_comparison_result = filename_cmp(filename);\n  if (filename_comparison_result != 0) {\n    char_result = process_string_data(data_ptr,0x84,0,data_size,filename);\n    if (char_result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(data_ptr + 0x210) = filename;\n  }\n  process_result = process_string_data(data_ptr,0x44,data_type,data_size - *(long *)(data_ptr + 0x200),0,additional_data);\n  return process_result;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "process_data_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bf86",
                "FUN_00108fe8",
                "FUN_00112996",
                "FUN_00108916",
                "FUN_0011173a",
                "FUN_0010bf20",
                "FUN_0010871c",
                "FUN_00108b3e",
                "FUN_00104a35",
                "FUN_001126c0",
                "FUN_001199d0",
                "FUN_0010c05d",
                "FUN_00108f08",
                "FUN_0010914e",
                "FUN_0010be1a",
                "FUN_00108fb9",
                "FUN_00109022",
                "FUN_00108a2a",
                "FUN_0010911f",
                "FUN_00116b90",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_00112c1f",
                "FUN_0010c6be",
                "FUN_00112b6e",
                "FUN_0010b0fa",
                "FUN_0010bd62",
                "FUN_0010c892",
                "FUN_0010bc80"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "data",
                "param_2": "length",
                "cVar1": "charVal",
                "__ptr": "dataPtr",
                "__s": "string",
                "sVar2": "stringLength",
                "__s_00": "newString",
                "in_R10": "inputR10",
                "iVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010e5db(long data,int length)\n\n{\n  char charVal;\n  void *dataPtr;\n  char *string;\n  size_t stringLength;\n  char *newString;\n  ulong inputR10;\n  int counter;\n  undefined result [16];\n  \n  counter = 0;\n  do {\n    if (length <= counter) {\n      result = process_data_00109ed3(data,0x66,0,data + 0x188,data + 400,inputR10);\n      return result;\n    }\n    if (*(char *)(*(long *)(data + 0x60) + 0x1c) == '\\0') {\n      dataPtr = (void *)extract_and_free_ptr_00109b2f(data);\n      free(dataPtr);\n    }\n    else {\n      string = (char *)extract_and_free_ptr_00109b2f(data);\n      stringLength = strlen(string);\n      newString = (char *)xmalloc(stringLength + 3);\n      sprintf(newString,\":t%s\",string);\n      free(string);\n      charVal = process_string_data_0010e2f0(data,0x80,0,0,newString);\n      if (charVal == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = inputR10;\n        return result << 0x40;\n      }\n      free(newString);\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109ed3",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_function_00104d25",
                "param_7": "param",
                "print_error_message_001126c0": "printErrorMessage",
                "remove_dir_and_free_memory_00114b84": "removeDirectoryAndFreeMemory"
            },
            "code": "\nvoid cleanupFunction_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a20 = 1;\n  printErrorMessage(0,param,0,0);\n  removeDirectoryAndFreeMemory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_function_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debug_sections_0010551d",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "puVar3": "pointerVar3",
                "pcVar4": "pointerVar4",
                "puVar5": "pointerVar5",
                "uVar6": "ulongVar6",
                "uVar7": "ulongVar7",
                "__s": "stringVar",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "uVar10": "uintVar10",
                "iVar11": "intVar11",
                "uVar12": "uintVar12",
                "uVar13": "uintVar13",
                "iVar14": "intVar14",
                "plVar15": "pointerVar15",
                "uVar16": "ulongVar16",
                "uVar17": "ulongVar17",
                "sVar18": "sizeVar18",
                "pcVar19": "pointerVar19",
                "ppcVar35": "pointerPointerVar35",
                "uVar20": "ulongVar20",
                "lVar21": "longVar21",
                "uVar22": "ulongVar22",
                "piVar23": "pointerIntVar23",
                "uVar24": "ulongVar24",
                "lVar25": "longVar25",
                "lVar27": "longVar27",
                "unaff_R14": "unaffectedRegister14",
                "unaff_R13": "unaffectedRegister13",
                "bVar38": "boolVar38",
                "bVar39": "byteVar39"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong mergeDebugSections_0010551d(void)\n\n{\n  uint *pointerVar1;\n  byte byteVar2;\n  undefined *pointerVar3;\n  code *pointerVar4;\n  undefined8 *pointerVar5;\n  ulong ulongVar6;\n  ulong ulongVar7;\n  char *stringVar;\n  char charVar8;\n  char charVar9;\n  uint uintVar10;\n  int intVar11;\n  uint uintVar12;\n  undefined4 uintVar13;\n  int intVar14;\n  long *pointerVar15;\n  undefined8 ulongVar16;\n  undefined8 ulongVar17;\n  size_t sizeVar18;\n  char *pointerVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong ulongVar20;\n  long longVar21;\n  ulong ulongVar22;\n  int *pointerIntVar23;\n  ulong ulongVar24;\n  long longVar25;\n  FILE *stringVar_00;\n  size_t sVar26;\n  long longVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *pointerVar34;\n  char **pointerPointerVar35;\n  long *unaffectedRegister13;\n  void *pvVar36;\n  undefined8 *unaffectedRegister14;\n  undefined **ppointerVar37;\n  bool boolVar38;\n  byte byteVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279b0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a00 != '\\0') {\n    if ((((*(int *)(unaffectedRegister14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar9 = compare_strings_00113fb0(), charVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (longVar25 = *(long *)(unaff_RBP + 0x40), longVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar9 = bfd_get_full_section_contents();\n    if (charVar9 != '\\0') {\n      longVar27 = parse_build_attribute_notes_001163d0();\n      unaff_RBX[2] = longVar27;\n      if ((longVar27 == longVar25) || (charVar9 = bfd_set_section_size(), charVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaffectedRegister13;\n        *unaff_RBX = unaff_RBP;\n        unaffectedRegister13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (longVar25 = *(long *)(unaff_RBP + 8); longVar25 != 0; longVar25 = *(long *)(longVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    longVar25 = bfd_get_section_by_name();\n    if (longVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(longVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sizeVar18 = *(size_t *)(longVar25 + 0x40);\n      stringVar_00 = fopen((char *)puVar29[2],\"w\");\n      if (stringVar_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVar9 = bfd_malloc_and_get_section();\n        if (charVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sizeVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sizeVar18,stringVar_00), sVar26 != sizeVar18)) {\n          pointerIntVar23 = __errno_location();\n          pcVar33 = strerror(*pointerIntVar23);\n          ulongVar17 = puVar29[2];\n          ulongVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(ulongVar16,ulongVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(stringVar_00);\n          return 0;\n        }\n        fclose(stringVar_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    longVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (longVar25 != 0) {\n      ulongVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(ulongVar17);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    longVar25 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      ulongVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17,longVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      ulongVar20 = 0;\n      for (ulongVar24 = *(ulong *)(in_stack_00000008 + 0x90); ulongVar24 != 0;\n          ulongVar24 = *(ulong *)(ulongVar24 + 8)) {\n        ulongVar22 = *(ulong *)(ulongVar24 + 0x30);\n        uVar30 = ulongVar20;\n        ulongVar6 = ulongVar24;\n        ulongVar7 = ulongVar20;\n        if (ulongVar22 != 0) {\n          while ((uVar30 = ulongVar6, ulongVar7 != 0 &&\n                 (uVar30 = ulongVar24, ulongVar22 <= *(ulong *)(ulongVar20 + 0x30)))) {\n            ulongVar24 = *(ulong *)(ulongVar24 + 8);\n            if (ulongVar24 == 0) goto LAB_00107db8;\n            ulongVar22 = *(ulong *)(ulongVar24 + 0x30);\n            ulongVar6 = ulongVar20;\n            ulongVar7 = ulongVar22;\n          }\n        }\n        ulongVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (ulongVar20 == 0) {\n        ulongVar24 = 0x1000;\n      }\n      else {\n        ulongVar20 = *(long *)(ulongVar20 + 0x40) + *(long *)(ulongVar20 + 0x30);\n        ulongVar24 = 0xffffffffffffffff;\n        if (ulongVar20 < 0xfffffffffffff001) {\n          ulongVar24 = ulongVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = ulongVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = ulongVar24;\n    }\n  }\n  plVar32 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    ulongVar24 = decompiled_function_0010554f();\n    return ulongVar24;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppointerVar37 = &PTR_sstringVartab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointerVar34 = puStack0000000000000020;\n    for (longVar25 = 0x18; longVar25 != 0; longVar25 = longVar25 + -1) {\n      *pointerVar34 = 0;\n      pointerVar34 = pointerVar34 + (ulong)byteVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerVar3 = *ppointerVar37;\n      longVar25 = bfd_get_section_by_name();\n      longVar27 = bfd_get_section_by_name();\n      if ((longVar25 != 0) && (longVar27 != 0)) {\n        longVar25 = *(long *)(longVar25 + 0x40);\n        __ptr = (void *)xmalloc(longVar25);\n        charVar9 = bfd_get_section_contents();\n        if (charVar9 == '\\0') {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedRegister14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          ulongVar24 = *(ulong *)(longVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(ulongVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintVar13 = bfd_get_error();\n            bfd_errmsg(uintVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedRegister14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + ulongVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + longVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                ulongVar20 = (**(code **)(unaffectedRegister14[1] + 0x40))(pvVar36);\n                byteVar2 = *(byte *)((long)pvVar36 + 4);\n                uintVar13 = (**(code **)(unaffectedRegister14[1] + 0x58))((long)pvVar36 + 6);\n                longVar27 = (**(code **)(unaffectedRegister14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + longVar27;\n                }\n                else {\n                  ulongVar22 = (ulongVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (ulongVar22 < ulongVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + ulongVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar18 = strlen(pcVar33);\n                      if (((sizeVar18 == 0) || (pcVar28 = pcVar33 + (sizeVar18 - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + longVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar11 = (**(code **)(unaffectedRegister14[1] + 0x40))(pvVar36);\n                      ulongVar20 = (ulong)(uint)(intVar11 + (int)lStack0000000000000088);\n                      if (ulongVar24 <= ulongVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + ulongVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    ulongVar17 = *unaffectedRegister14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,ulongVar17,pointerVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)byteVar2,uintVar13,longVar27,pcVar33);\n                    charVar9 = process_debug_record_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar2);\n                    if (charVar9 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar17 = *unaffectedRegister14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,ulongVar17,pointerVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            ulongVar20 & 0xffffffff,(ulong)byteVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppointerVar37 = ppointerVar37 + 2;\n    } while (ppointerVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar9 = validate_and_initialize_memory_0010c892(), charVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaffectedRegister14[1] + 8) == 1) {\n      longVar25 = 0;\n      for (pointerVar15 = plVar32; pointerVar15 < plVar32 + in_stack_00000010; pointerVar15 = pointerVar15 + 1) {\n        (**(code **)(unaffectedRegister14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((longVar25 != 0) || (longVar25 = create_initialized_buffer_00112894(), longVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sizeVar18 = strlen(pcVar28), pcVar28[sizeVar18 - 1] == '\\')) &&\n                   (pointerVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pointerVar19 = (char *)xstrdup(pcVar28);\n              sizeVar18 = strlen(pointerVar19);\n              pointerVar19[sizeVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pointerVar19,*(undefined8 *)(pointerVar15[1] + 8),0);\n              free(pointerVar19);\n              free(pcVar33);\n              pointerVar15 = pointerVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pcVar28);\n            in_stack_00000018 = process_debug_record_0011173a(puStack0000000000000020,longVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      clear_memory_00108863();\n      if ((longVar25 != 0) && (charVar9 = validate_and_initialize_memory_0010c892(), charVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaffectedRegister14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (longVar25 = 0x22; longVar25 != 0; longVar25 = longVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)byteVar39 * -8 + 4);\n      }\n      charVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        longVar25 = plVar32[in_stack_000000d0];\n        charVar8 = bfd_coff_get_syment();\n        longVar27 = in_stack_000000d8;\n        if (charVar8 == '\\0') {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar17 = dcgettext(0,pcVar33,5);\n          print_error_message_00119ed0(ulongVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(longVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar8 = bfd_coff_get_auxent(), charVar8 == '\\0')) {\n          uintVar13 = bfd_get_error();\n          bfd_errmsg(uintVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)longVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar8 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (charVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar8 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaffectedRegister14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaffectedRegister14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaffectedRegister14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar11 = strcmp(pcVar33,\".bb\");\n              if (intVar11 == 0) {\n                charVar8 = debug_start_block_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar11 = strcmp(pcVar33,\".eb\");\n              if (intVar11 == 0) {\n                charVar8 = close_debug_block_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar11 = strcmp(pcVar33,\".bf\");\n              if (intVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  longVar27 = parse_coff_type_0010dac0();\n                  if ((longVar27 == 0) ||\n                     (charVar9 = debug_record_function_0010bc80(puStack0000000000000020), charVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar11 = in_stack_00000118 - 1;\n                    }\n                    longVar25 = *(long *)(*(long *)(longVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      charVar8 = record_debug_line_0010bf86(puStack0000000000000020,intVar11 + iVar31,\n                                           *(long *)(_uStack0000000000000048 + 6) + longVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar11 = strcmp(pcVar33,\".ef\");\n                if (intVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar9 != '\\0') {\n                  charVar9 = debug_end_function_check_0010be1a(puStack0000000000000020);\n                  if (charVar9 == '\\0') goto LAB_00105981;\n                  charVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar17 = dcgettext(0,pcVar33,5);\n              print_error_message_00119ed0(ulongVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar21 = parse_coff_type_0010dac0();\n          if (longVar21 == 0) goto LAB_00105981;\n          charVar8 = process_debug_record_00112a33(&stack0x00000140,longVar25,longVar27);\n        }\njoined_r0x00107247:\n        if (charVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278b0 + in_stack_00000010;\n        pointerVar15 = DAT_001278b0;\n        do {\n          uintVar10 = *(uint *)(*pointerVar15 + 0x18);\n          if ((uintVar10 & 0x1000000) != 0) {\n            *(uint *)(*pointerVar15 + 0x18) = uintVar10 & 0xfeffffff;\n          }\n          pointerVar15 = pointerVar15 + 1;\n        } while (plVar32 != pointerVar15);\n      }\n    }\n    else {\n      for (longVar25 = *(long *)(in_stack_00000008 + 0x90); longVar25 != 0; longVar25 = *(long *)(longVar25 + 8)\n          ) {\n        if (*(long *)(longVar25 + 0xe8) != 0) {\n          pointerVar1 = (uint *)(*(long *)(longVar25 + 0xe8) + 0x18);\n          *pointerVar1 = *pointerVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar11 = bfd_get_error();\n      if (intVar11 != 0) {\n        DAT_00127a20 = 1;\n        return 0;\n      }\n    }\n    longVar25 = xmalloc();\n    plVar32 = DAT_001278b0;\n    uStack0000000000000048 = *(uint *)((long)unaffectedRegister14 + 0x44) & 0x42;\n    DAT_001278a8 = longVar25;\n    if (in_stack_00000010 == 0) {\n      ulongVar24 = 0;\n    }\n    else {\n      ulongVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar11 = DAT_001279a0;\n        pointerVar15 = (long *)plVar32[_in_stack_00000018];\n        pointerVar4 = (code *)pointerVar15[4];\n        uintVar10 = *(uint *)(pointerVar15 + 3);\n        pcVar33 = (char *)pointerVar15[1];\n        pcVar28 = pcVar33;\n        if (DAT_001279a8 != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = DAT_001279a8;\n          while( true ) {\n            if ((intVar11 <= iVar31) || (pointerVar19 = (char *)puVar29[5], pointerVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointerVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          intVar14 = strcmp(pointerVar19,pcVar33);\n          if (intVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pointerVar19);\n          ulongVar20 = ulongVar24 + 1;\n          puVar29[5] = \"\";\n          ulongVar16 = extract_and_copy_section_0011a2e0(puVar29);\n          ulongVar17 = DAT_001278d0;\n          *(undefined8 *)(longVar25 + ulongVar24 * 8) = ulongVar16;\n          longVar27 = htab_elements(ulongVar17);\n          if ((longVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar9 = *pcVar33;\n          if (charVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127908;\n          if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            longVar27 = unaffectedRegister14[1];\n            charVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        longVar27 = htab_elements(DAT_001278d0);\n        ulongVar20 = ulongVar24;\n        if ((longVar27 == 0) && (DAT_001278d8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intVar11 == 0)) {\n            ulongVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(ulongVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        longVar27 = htab_find(DAT_001278d0);\n        if (((longVar27 == 0) || (pcVar28 = *(char **)(longVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, pointerPointerVar35 = DAT_001278d8, (uintVar10 & 0x100) != 0)) {\n          for (; pointerPointerVar35 != (char **)0x0; pointerPointerVar35 = (char **)pointerPointerVar35[3]) {\n            intVar11 = strcmp(*pointerPointerVar35,pcVar33);\n            if (intVar11 == 0) {\n              pcVar28 = pointerPointerVar35[1];\n              break;\n            }\n          }\n        }\n        pointerVar15[1] = (long)pcVar28;\n        charVar9 = *pcVar28;\n        if (charVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127908;\n        longVar27 = unaffectedRegister14[1];\n        if (*(char *)(longVar27 + 0x1c) == charVar9) {\n          if (DAT_00127988 == '\\0') {\n            if ((DAT_00127968 == '\\0') ||\n               ((((uintVar10 & 0x82) == 0 && (pointerVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            pointerVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          charVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar9 == '\\0') goto LAB_0010677d;\n          if (DAT_00127908 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            pointerVar15[1] = (long)pcVar28;\n            sizeVar18 = strlen(pcVar28);\n            longVar27 = sizeVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = charVar9;\n          pointerVar15[1] = (long)pcVar28;\n          ulongVar24 = ulongVar20;\n        }\n        else {\n          if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulongVar24 = ulongVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sizeVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sizeVar18 + 1);\n            pointerVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127908;\n            if ((*(char *)(longVar27 + 0x1c) != '\\0') && (charVar9 != *(char *)(longVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar18 = strlen(pcVar28);\n            longVar27 = sizeVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pointerVar19 = (char *)xmalloc(longVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar18 = strlen(pcVar33);\n              pointerVar19 = (char *)xmalloc(sizeVar18 + longVar27);\n            }\n            pcVar33 = pointerVar19 + 1;\n            *pointerVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          stringVar = DAT_00127908;\n          if (DAT_00127908 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127908);\n            sizeVar18 = strlen(stringVar);\n            pcVar33 = pcVar33 + sizeVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          pointerVar15[1] = (long)pointerVar19;\n          pcVar28 = pointerVar19;\n          ulongVar24 = ulongVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a2c == 7) goto LAB_001067a8;\n        if (((uintVar10 & 0x20) == 0) &&\n           (((uintVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointerVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar10 & 0x82) != 0 || ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar11 = bfd_decode_symclass(pointerVar15), intVar11 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ca == '\\0') {\n              longVar27 = htab_find();\n              if (longVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar10 & 0x82) == 0) && (pointerVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar10 & 4) == 0) {\n              if (((*(int *)(unaffectedRegister14[1] + 8) != 2) ||\n                  (longVar27 = *(long *)(pointerVar15[4] + 0xd0), longVar27 == 0)) ||\n                 (*(long *)(longVar27 + 0x40) == 0)) {\n                if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                if (DAT_00127a28 == 1) {\n                  charVar9 = bfd_is_local_label(unaffectedRegister14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar9 = DAT_00127980;\n            if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n              if (charVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a2c != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ca == '\\0') {\n          longVar27 = htab_find();\n          if (longVar27 != 0) {\nLAB_0010687f:\n            ulongVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(ulongVar17);\n            DAT_00127a20 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ca != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          longVar27 = htab_find();\n          if (longVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a18 != '\\0') && ((uintVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ca == '\\0') {\n            longVar27 = htab_find();\n            if (longVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar9 = check_section_options_001159d0(pointerVar15[4]);\n          if (charVar9 == '\\0') {\n            if (((uintVar10 & 0x800002) == 0) && (pointerVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar10 & 0x82) != 0) {\n                charVar9 = check_pattern_match_00115d70(pcVar28);\n                if ((charVar9 == '\\0') &&\n                   ((longVar27 = htab_elements(DAT_001279d8), longVar27 == 0 ||\n                    (charVar9 = check_pattern_match_00115d70(pcVar28), charVar9 != '\\0')))) {\n                  if (((((DAT_00127938 == '\\0') ||\n                        (uintVar12 = *(uint *)(pointerVar15 + 3), (uintVar12 & 0x200000) != 0)) ||\n                       (longVar27 = *pointerVar15, longVar27 == 0)) ||\n                      ((*(int *)(*(long *)(longVar27 + 8) + 8) != 5 || (*(long *)(longVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointerVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar12 = *(uint *)(pointerVar15 + 3);\n                }\n                *(uint *)(pointerVar15 + 3) = uintVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar10 & 1) != 0) && (charVar9 = check_pattern_match_00115d70(pcVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279c8 != '\\0') || (charVar9 = check_pattern_match_00115d70(pcVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pointerVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(longVar25 + ulongVar24 * 8) = pointerVar15;\n            ulongVar24 = ulongVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279a8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279a8;\n      intVar11 = DAT_001279a0;\n      for (longVar27 = 0; longVar27 < intVar11; longVar27 = longVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          longVar21 = ulongVar24 * 8;\n          ulongVar24 = ulongVar24 + 1;\n          ulongVar17 = extract_and_copy_section_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(longVar25 + longVar21) = ulongVar17;\n          intVar11 = DAT_001279a0;\n        }\n        else if (pcVar33 != \"\") {\n          ulongVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(ulongVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    boolVar38 = DAT_00127980 != '\\0';\n    *(undefined8 *)(longVar25 + ulongVar24 * 8) = 0;\n    if ((boolVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar11 != 5) && (intVar11 != 2)) {\n        ulongVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,in_stack_00000008,0,ulongVar16,ulongVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar9 = reverse_and_improve_binary_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar9 == '\\0') goto LAB_00105d8c;\n      longVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      longVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((longVar25 == 0) || (longVar27 == 0)) ||\n          (charVar9 = bfd_set_section_size(longVar25,in_stack_00000110), charVar9 == '\\0')) ||\n         (charVar9 = bfd_set_section_size(longVar27,in_stack_00000140), charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar17 = dcgettext(0,pcVar33,5);\n        print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a20 = 1;\n        return 0;\n      }\n      *(undefined4 *)(longVar25 + 0x7c) = 2;\n      *(undefined4 *)(longVar27 + 0x7c) = 0;\n      charVar9 = bfd_set_section_contents\n                        (in_stack_00000008,longVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar9 == '\\0') ||\n         (charVar9 = bfd_set_section_contents\n                            (in_stack_00000008,longVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = ulongVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    longVar25 = htab_elements(DAT_001279f8);\n    if (((longVar25 != 0) ||\n        (((((((longVar25 = htab_elements(DAT_00127a08), longVar25 != 0 ||\n              (longVar25 = htab_elements(DAT_001279e8), longVar25 != 0)) ||\n             (longVar25 = htab_elements(DAT_001279e0), longVar25 != 0)) ||\n            ((longVar25 = htab_elements(DAT_001279d8), longVar25 != 0 ||\n             (longVar25 = htab_elements(DAT_001279d0), longVar25 != 0)))) ||\n           (longVar25 = htab_elements(DAT_001278d0), longVar25 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278a8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaffectedRegister14,process_section_options_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaffectedRegister14,process_binary_section_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279c0; pointerVar5 = DAT_001279b8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVar9 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVar9 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pointerVar5 != (undefined8 *)0x0; pointerVar5 = (undefined8 *)*pointerVar5) {\n    ulongVar17 = *(undefined8 *)(pointerVar5[5] + 0x60);\n    charVar9 = bfd_set_section_contents(in_stack_00000008,ulongVar17,pointerVar5[4],0,pointerVar5[3]);\n    if (charVar9 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,ulongVar17,0);\n      return 0;\n    }\n  }\n  if (unaffectedRegister13 == (long *)0x0) {\n    if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n      ulongVar17 = *unaffectedRegister14;\n      ulongVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(ulongVar16,ulongVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a10 == 0) ||\n       (charVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       longVar25 = DAT_00127a10, charVar9 != '\\0')) {\n      uintVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaffectedRegister14);\n      ulongVar24 = (ulong)uintVar10;\n      if ((char)uintVar10 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return ulongVar24;\n        }\n        charVar9 = bfd_alt_mach_code(in_stack_00000008,DAT_00127910 & 0xffffffff);\n        ulongVar20 = DAT_00127910;\n        if (charVar9 != '\\0') {\n          return ulongVar24;\n        }\n        ulongVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(ulongVar17,ulongVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(ulongVar17);\n          return ulongVar24;\n        }\n        ulongVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(ulongVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127910;\n        return ulongVar24;\n      }\n      ulongVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17);\n    }\n    else {\n      ulongVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar17,longVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaffectedRegister13[3];\n        free((void *)unaffectedRegister13[1]);\n        free(unaffectedRegister13);\n        unaffectedRegister13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVar9 = compare_strings_00113fb0(*puVar29,\".gnu.build.attributes\"), charVar9 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaffectedRegister13;\n      }\n      pointerVar15 = unaffectedRegister13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charVar9 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (charVar9 == '\\0') {\n            ulongVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,in_stack_00000008,puVar29,ulongVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = pointerVar15;\n          if (*(undefined8 **)(*pointerVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)pointerVar15[3];\n          pointerVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      ulongVar17 = dcgettext(0,pcVar33,5);\n      print_error_message_001126c0(0,in_stack_00000008,puVar29,ulongVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debug_sections_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00104943",
                "FUN_00105828",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString",
                "htab_hash_string": "computeHash"
            },
            "code": "\nvoid hashString_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "cleanup_records_0010c1c6",
                "param_3": "record_ptr",
                "puVar1": "next_ptr",
                "cVar2": "result",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined cleanupRecords_0010c1c6(undefined8 param_1,long param_2,undefined8 record_ptr,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_ptr;\n  char result;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(param_2 + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(param_2 + 0x78) = 0;\n      return 1;\n    }\n    result = record_variable_debug_0010c05d(param_1,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_6,\n                         param_5);\n    if (result == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "cleanup_records_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "pattern_matching_function_001082df",
                "unaff_RBX": "input_data",
                "puVar4": "result_array",
                "puVar5": "temp_array",
                "unaff_RBP": "stack_base",
                "uVar6": "index",
                "unaff_R13": "data_array",
                "uVar1": "array_size",
                "lVar2": "current_data",
                "cVar3": "match_result"
            },
            "code": "\nvoid pattern_matching_function_001082df(void)\n\n{\n  uint array_size;\n  long current_data;\n  char match_result;\n  long input_data;\n  undefined8 *result_array;\n  undefined8 *temp_array;\n  long stack_base;\n  ulong index;\n  undefined8 *data_array;\n  \n  array_size = *(uint *)(input_data + 0x78);\n  if (DAT_00127a2c == 7) {\n    result_array = data_array;\n    for (index = 0; index != array_size; index = index + 1) {\n      temp_array = result_array;\n      if (((*(long **)data_array[index] != (long *)0x0) &&\n          (current_data = **(long **)data_array[index], current_data != 0)) &&\n         (match_result = check_pattern_match_00115d70(*(undefined8 *)(current_data + 8),DAT_00127a08), match_result != '\\0')) {\n        temp_array = result_array + 1;\n        *result_array = data_array[index];\n      }\n      result_array = temp_array;\n    }\n    *result_array = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(stack_base + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "pattern_matching_function_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_contents_00114d60",
                "param_1": "fileInfo",
                "iVar1": "endOfFile",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar4": "errorFormatString",
                "__stream": "filePointer",
                "uVar5": "allocationResult",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndStoreFileContents_00114d60(long fileInfo)\n\n{\n  int endOfFile;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorFormatString;\n  FILE *filePointer;\n  undefined8 allocationResult;\n  size_t bytesRead;\n  long totalBytesRead;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errorLocation = __errno_location();\n    errorMessage = strerror(*errorLocation);\n    allocationResult = *(undefined8 *)(fileInfo + 0x10);\n    errorFormatString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit_00119dd0(errorFormatString,allocationResult,errorMessage);\n  }\n  bufferSize = 0x1000;\n  totalBytesRead = 0;\n  allocationResult = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocationResult;\n  while( true ) {\n    endOfFile = feof(filePointer);\n    if (endOfFile != 0) {\n      *(long *)(fileInfo + 0x18) = totalBytesRead;\n      fclose(filePointer);\n      return;\n    }\n    if (totalBytesRead == bufferSize) {\n      bufferSize = totalBytesRead * 2;\n      allocationResult = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = allocationResult;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + totalBytesRead),1,bufferSize - totalBytesRead,filePointer);\n    endOfFile = ferror(filePointer);\n    if (endOfFile != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  allocationResult = *(undefined8 *)(fileInfo + 0x10);\n  errorFormatString = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit_00119dd0(errorFormatString,allocationResult);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_contents_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_error_if_section_not_found_00108808",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "unaff_RBP": "stack_base_pointer"
            },
            "code": "\nvoid print_error_if_section_not_found_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long stack_base_pointer;\n  \n  section_address = *(undefined8 *)(stack_base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_error_if_section_not_found_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_lines_00104d1c",
                "unaff_EBP": "line_number",
                "unaff_R13": "error_handler",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address",
                "bVar4": "current_byte",
                "unaff_R14": "line_start",
                "unaff_R15": "line_end",
                "htab_find_slot": "find_slot",
                "dcgettext": "internationalization_function"
            },
            "code": "\nvoid parse_lines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte current_byte;\n  byte *pbVar5;\n  int line_number;\n  byte *pbVar6;\n  undefined8 error_handler;\n  byte *pbVar7;\n  byte *line_start;\n  byte *line_end;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  *line_start = 0;\nLAB_00114520:\n  line_start = line_start + 1;\n  do {\n    current_byte = *line_start;\n    pbVar7 = line_start;\n    if (current_byte == 10) {\n      *line_start = 0;\n      if (line_start[1] == 0xd) {\n        pbVar7 = line_start + 1;\n        pbVar5 = line_start + 2;\n      }\n      else {\n        pbVar5 = line_start + 1;\n      }\n    }\n    else if ((char)current_byte < '\\v') {\n      if (current_byte != 0) goto LAB_00114520;\n      pbVar5 = line_start + 1;\n    }\n    else {\n      if (current_byte != 0xd) break;\n      *line_start = 0;\n      pbVar5 = line_start + 1;\n      if (line_start[1] == 10) {\n        pbVar5 = line_start + 2;\n        pbVar7 = line_start + 1;\n      }\n    }\n    current_byte = *line_end;\n    while ((current_byte == 0x20 || (pbVar6 = line_end, current_byte == 9))) {\n      pbVar6 = line_end + 1;\n      line_end = line_end + 1;\n      current_byte = *pbVar6;\n    }\n    do {\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = pbVar6[1];\n      pbVar6 = pbVar6 + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_byte = pbVar6[1];\n      if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n            ((current_byte = pbVar6[2], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = pbVar6[3], current_byte == 9 || (current_byte == 0x20)))) &&\n          ((current_byte = pbVar6[4], current_byte == 9 || (current_byte == 0x20)))) &&\n         ((current_byte = pbVar6[5], current_byte == 9 || (current_byte == 0x20)))) {\n        current_byte = pbVar6[6];\n        pbVar3 = pbVar6 + 6;\n        if ((current_byte == 9) || (current_byte == 0x20)) {\n          do {\n            do {\n              current_byte = pbVar3[1];\n              pbVar3 = pbVar3 + 1;\n            } while (current_byte == 0x20);\n          } while (current_byte == 9);\n        }\n      }\n      if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(uVar1,filename,line_number);\n      }\n    }\nLAB_00114599:\n    *pbVar6 = 0;\n    if (line_end < pbVar6) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = line_end;\n    }\n    line_number = line_number + 1;\n    line_start = pbVar5;\n    line_end = pbVar5;\n    if (pbVar7[1] == 0) {\n      *return_address = error_handler;\n      return;\n    }\n  } while( true );\n  if (current_byte == 0x23) {\n    parse_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_print_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "errorMessage",
                "local_20": "buffer"
            },
            "code": "\nvoid validate_and_print_error_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 errorMessage;\n  char *buffer [2];\n  \n  bfd_scan_vma(address,buffer,0);\n  if (*buffer[0] == '\\0') {\n    return;\n  }\n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "process_data_0010540e",
                "param_1": "input",
                "param_2": "address",
                "param_3": "condition",
                "in_RAX": "eax_value"
            },
            "code": "\nvoid processData_0010540e(undefined8 input,long address,uint condition)\n\n{\n  long eax_value;\n  \n  if ((condition == 2) && (*(int *)(*(long *)(address + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(address + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(eax_value + 0x380) + 0x78))(input,condition != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "process_data_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_and_extract_data_00113a4d",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "data5",
                "cVar1": "charValue",
                "uVar2": "returnValue",
                "puVar3": "ptrVar",
                "auVar4": "arrayVar",
                "process_data_00112502": "processData",
                "process_and_update_data_0010ec73": "processAndUpdateData",
                "process_extracted_data_001135a5": "processExtractedData",
                "update_param_set_0010ed2c": "updateParamSet"
            },
            "code": "\nundefined8\nprocessAndExtractData_00113a4d(undefined8 data1,undefined8 data2,long data3,undefined8 data4,\n            undefined8 data5)\n\n{\n  char charValue;\n  undefined8 returnValue;\n  undefined8 *ptrVar;\n  undefined arrayVar [16];\n  \n  charValue = processData(data1,data2,*(undefined8 *)(data3 + 0x18));\n  if ((charValue != '\\0') &&\n     (((*(long *)(data3 + 0x28) == 0 && (*(long *)(data3 + 8) != 0)) ||\n      (charValue = processAndUpdateData(data2,*(undefined8 *)(data3 + 0x18)), charValue != '\\0')))) {\n    if (*(undefined8 **)(data3 + 0x28) != (undefined8 *)0x0) {\n      for (ptrVar = (undefined8 *)**(undefined8 **)(data3 + 0x28); ptrVar != (undefined8 *)0x0;\n          ptrVar = (undefined8 *)*ptrVar) {\n        charValue = processExtractedData(data1,data2,ptrVar);\n        if (charValue == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptrVar = *(undefined8 **)(data3 + 0x10); ptrVar != (undefined8 *)0x0;\n        ptrVar = (undefined8 *)*ptrVar) {\n      charValue = processAndExtractData_00113a4d(data1,data2,ptrVar);\n      if (charValue == '\\0') {\n        return 0;\n      }\n    }\n    arrayVar = processData(data1,data2,*(undefined8 *)(data3 + 0x20));\n    if (arrayVar[0] != '\\0') {\n      if ((*(long *)(data3 + 0x28) == 0) && (*(long *)(data3 + 8) != 0)) {\n        return arrayVar._0_8_;\n      }\n      returnValue = updateParamSet(data2,*(undefined8 *)(data3 + 0x20),arrayVar._8_8_,data5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0010ed2c",
                "FUN_00112502",
                "FUN_0010ec73"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_and_extract_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryToRelease",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 releaseMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryToRelease;\n  undefined8 returnValue;\n  \n  returnValue = returnValue;\n  free(memoryToRelease);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010b0fa",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c",
                "FUN_0010e9a0",
                "FUN_001199d0",
                "FUN_0010aa53"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_memory_if_not_zero_00113b71",
                "param_1": "input_value",
                "lVar1": "memory_address"
            },
            "code": "\nlong initialize_memory_if_not_zero_00113b71(long input_value)\n\n{\n  long memory_address;\n  \n  if (input_value != 0) {\n    memory_address = initialize_memory_00112904(0x14,0);\n    if (memory_address == 0) {\n      memory_address = 0;\n    }\n    else {\n      *(long *)(memory_address + 0x10) = input_value;\n    }\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_if_not_zero_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_00109dfe",
                "param_1": "ptr_data",
                "local_40": "buffer",
                "lVar1": "counter"
            },
            "code": "\nvoid initialize_or_increment_00109dfe(long ptr_data)\n\n{\n  long counter;\n  char buffer [40];\n  \n  if (*(long *)(ptr_data + 0x70) != 0) {\n    initialize_data_structure_00109cf4(ptr_data,*(long *)(ptr_data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(ptr_data + 0x68);\n  *(long *)(ptr_data + 0x68) = counter + 1;\n  *(long *)(ptr_data + 0x70) = counter;\n  sprintf(buffer,\"%ld=%ld\",counter,counter);\n  initialize_data_structure_00109b52(ptr_data,buffer,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "inputParam",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long inputParam)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(inputParam + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(inputParam + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "combine_strings_0010ae0e",
                "param_1": "data",
                "lVar1": "ptr1",
                "lVar2": "ptr2",
                "__ptr": "tempPtr",
                "pcVar3": "tempStr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "result",
                "uVar7": "returnValue",
                "lVar8": "totalLen",
                "uVar9": "count",
                "uVar10": "tempCount"
            },
            "code": "\nundefined8 combineStrings_0010ae0e(long data)\n\n{\n  long ptr1;\n  long ptr2;\n  void *tempPtr;\n  char *tempStr;\n  size_t len1;\n  size_t len2;\n  char *result;\n  undefined8 returnValue;\n  long totalLen;\n  uint count;\n  ulong tempCount;\n  \n  returnValue = 0;\n  ptr1 = *(long *)(data + 0x60);\n  if (((ptr1 != 0) && (*(char **)(ptr1 + 8) != (char *)0x0)) &&\n     (result = *(char **)(ptr1 + 0x20), result != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptr1 + 8));\n    len2 = strlen(result);\n    ptr2 = *(long *)(ptr1 + 0x28);\n    if (ptr2 == 0) {\n      totalLen = len1 + len2 + 10;\n      tempCount = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      tempCount = 0;\n      while( true ) {\n        result = *(char **)(ptr2 + tempCount * 8);\n        if (result == (char *)0x0) break;\n        len1 = strlen(result);\n        tempCount = (ulong)((int)tempCount + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(ptr1 + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x38));\n      totalLen = totalLen + len1;\n    }\n    result = (char *)xmalloc(totalLen);\n    ptr1 = *(long *)(data + 0x60);\n    strcpy(result,*(char **)(ptr1 + 8));\n    if (*(long *)(ptr1 + 0x28) != 0) {\n      count = 0;\n      len1 = strlen(result);\n      sprintf(result + len1,\"!%u,\",tempCount);\n      while( true ) {\n        ptr1 = *(long *)(data + 0x60);\n        tempCount = (ulong)count;\n        tempPtr = *(void **)(ptr1 + 0x28);\n        tempStr = *(char **)((long)tempPtr + tempCount * 8);\n        if (tempStr == (char *)0x0) break;\n        count = count + 1;\n        strcat(result,tempStr);\n        free(*(void **)(*(long *)(ptr1 + 0x28) + tempCount * 8));\n      }\n      free(tempPtr);\n      *(undefined8 *)(*(long *)(data + 0x60) + 0x28) = 0;\n    }\n    ptr1 = *(long *)(data + 0x60);\n    strcat(result,*(char **)(ptr1 + 0x20));\n    free(*(void **)(ptr1 + 0x20));\n    ptr1 = *(long *)(data + 0x60);\n    *(undefined8 *)(ptr1 + 0x20) = 0;\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      strcat(result,*(char **)(ptr1 + 0x30));\n      free(*(void **)(ptr1 + 0x30));\n      *(undefined8 *)(*(long *)(data + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result);\n    ptr1 = *(long *)(data + 0x60);\n    *(undefined2 *)(result + len1) = 0x3b;\n    tempStr = *(char **)(ptr1 + 0x38);\n    if (tempStr != (char *)0x0) {\n      strcpy(result + len1 + 1,tempStr);\n      free(*(void **)(ptr1 + 0x38));\n      *(undefined8 *)(*(long *)(data + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(data + 0x60) + 8));\n    ptr1 = *(long *)(data + 0x60);\n    *(char **)(ptr1 + 8) = result;\n    returnValue = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "combine_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_extracted_data_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "value",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "ptr1",
                "puVar5": "ptr2"
            },
            "code": "\nundefined8 processExtractedData_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int value;\n  char result;\n  undefined8 output;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = process_debug_data_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = process_string_data_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = process_debug_data_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = reverse_and_process_string_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = process_debug_data_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = process_string_data_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    value = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    result = process_data_00112502(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = process_debug_data_00112c1f(input1,input2,*ptr2,0), result != '\\0')) &&\n       (result = process_data_0010eafe(input2,output,value == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = process_debug_data_00112c1f(input1,input2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_send_data_0010ebb0(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          output = check_success_00108f05(input2);\n          return output;\n        }\n        result = process_and_extract_data_00113a4d(input1,input2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    output = format_and_process_data_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = process_data_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    result = process_debug_data_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      output = process_and_send_data_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010e8a9",
                "FUN_0010e842",
                "abort",
                "FUN_0010e918",
                "FUN_0010ebb0",
                "FUN_0010e9a0",
                "FUN_0010e6a8",
                "FUN_00108f05",
                "FUN_0010e7c2",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "FUN_00112c1f",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_extracted_data_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_data_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = reverse_and_process_string_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_data_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_data_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_debug_data_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_data_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_debug_data_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_send_data_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = check_success_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = format_and_process_data_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_data_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_debug_data_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_send_data_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = get_modified_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_001278f0 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_001278f4 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a2c == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = get_modified_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = get_modified_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279cb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279c0, cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279c0;\n  }\n  for (; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_data_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a10;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = decompiled_function_0010554f();\n    return uVar29;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = process_debug_record_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = validate_and_initialize_memory_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = create_initialized_buffer_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = process_debug_record_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = validate_and_initialize_memory_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = close_debug_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_check_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279a8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_and_copy_section_0011a2e0(puVar33);\n                  uVar18 = DAT_001278d0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278d0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278d8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278d0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278d8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127908;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127908;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127908);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_section_options_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279d8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279a8;\n        iVar13 = DAT_001279a0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_and_copy_section_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279a0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_00127980 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = reverse_and_improve_binary_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_001279f8);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a08), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_001279e8), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_001279e0), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279d8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279d0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278d0), lVar28 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00116110,param_7);\n    for (puVar33 = DAT_001279c0; puVar38 = DAT_001279b8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a10, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar22 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127910;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)parse_build_attribute_notes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279b0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_mach",
                "bfd_set_file_flags",
                "dcgettext",
                "FUN_001152b6",
                "FUN_001125fa",
                "bfd_get_arch",
                "printf",
                "bfd_set_start_address"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_00104943",
                "FUN_00107976",
                "FUN_001199d0",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ee3f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "extract_and_initialize_data_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "paramArr",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "index",
                "iVar2": "comparisonResult",
                "pcVar3": "result",
                "plVar4": "circularDepPtr",
                "pcVar5": "message",
                "sVar6": "length",
                "__ptr": "memoryPtr",
                "lVar7": "argListLen",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * extractAndInitializeData_0010b0fa(undefined8 param1,undefined8 param2,uint *paramArr,long param4,\n                   undefined *param5)\n\n{\n  uint index;\n  int comparisonResult;\n  char *result;\n  long *circularDepPtr;\n  char *message;\n  size_t length;\n  void *memoryPtr;\n  long argListLen;\n  undefined localArray [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    index = *paramArr;\n    if (0x29 < index) break;\n    if (0x17 < index) {\n      switch(index) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)extractAndInitializeData_0010b0fa(param1,param2,*(undefined8 *)(paramArr + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*paramArr) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)initialize_memory_for_param_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)initialize_memory_if_not_zero_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)allocate_memory_if_needed_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)initialize_memory_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,paramArr,0x14,localArray);\n        if (result == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparisonResult = strcmp(result,\"signed char\");\n        if (comparisonResult == 0) {\nLAB_0010b406:\n          message = (char *)initialize_memory_and_set_param_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"bool\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"char\");\n        if (comparisonResult == 0) goto LAB_0010b406;\n        comparisonResult = strcmp(result,\"double\");\n        if ((comparisonResult == 0) || (comparisonResult = strcmp(result,\"long double\"), comparisonResult == 0)) {\n          message = (char *)initialize_memory_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"float\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"__float128\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned char\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"int\");\n        if (comparisonResult == 0) {\nLAB_0010b504:\n          message = (char *)initialize_memory_and_set_param_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned int\");\n        if (comparisonResult == 0) {\nLAB_0010b528:\n          message = (char *)initialize_memory_and_set_param_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"long\");\n        if (comparisonResult == 0) goto LAB_0010b504;\n        comparisonResult = strcmp(result,\"unsigned long\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(result,\"__int128\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned __int128\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"short\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned short\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"void\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"wchar_t\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(result,\"long long\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"unsigned long long\");\n        if (comparisonResult == 0) {\n          message = (char *)initialize_memory_and_set_param_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(result,\"...\");\n        if (comparisonResult == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return message;\n      case 0x29:\n        if (*(long *)(paramArr + 4) == 0) {\n          memoryPtr = (void *)initialize_memory_00113e17();\n        }\n        else {\n          memoryPtr = (void *)extractAndInitializeData_0010b0fa(param1,param2,*(long *)(paramArr + 4),0,0);\n        }\n        if (memoryPtr != (void *)0x0) {\n          argListLen = extract_arglist_0010b6ea(param1,param2,*(undefined8 *)(paramArr + 6),localArray);\n          if (argListLen != 0) {\n            result = (char *)initialize_function_00113ce0(memoryPtr,argListLen,localArray[0]);\n            return result;\n          }\n          free(memoryPtr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (index != 1) {\n      if (index == 4) {\n        result = (char *)cplus_demangle_print(3,paramArr,0x14,localArray);\n        message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          length = strlen(result);\n          message = (char *)find_matching_item_0010afd5(param1,param2,result,length & 0xffffffff,9);\n          free(result);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return result;\n      }\n      if (index == 0) {\n        if ((param4 == 0) || (circularDepPtr = (long *)find_circular_dependency_00113b1e(param4), circularDepPtr == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = extractAndInitializeData_0010b0fa(param1,param2,*(undefined8 *)(paramArr + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    paramArr = *(uint **)(paramArr + 6);\n    param5 = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)index);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*circularDepPtr == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)find_matching_item_0010afd5(param1,param2,*(undefined8 *)(paramArr + 4),paramArr[6],0);\n    return result;\n  }\n  result = *(char **)(*circularDepPtr + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)get_return_value_001129f4(result);\n  if (message != (char *)0x0) {\n    length = strlen(message);\n    if ((paramArr[6] == (uint)length) &&\n       (comparisonResult = strncmp(message,*(char **)(paramArr + 4),(long)(int)paramArr[6]), comparisonResult == 0)) {\n      return result;\n    }\n  }\n  circularDepPtr = circularDepPtr + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_00113d3a",
                "strlen",
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113b71",
                "cplus_demangle_print",
                "FUN_00113b4a",
                "FUN_0010b6ea",
                "strncmp",
                "FUN_00113b1e",
                "free",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113cb9",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b6ea",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "in_CL": "currentChar",
                "ppbVar2": "slot",
                "pbVar3": "currentByte",
                "bVar4": "nextByte",
                "unaff_RBX": "lineBuf",
                "unaff_EBP": "lineIndex",
                "pbVar5": "currentLine",
                "unaff_R13": "msgDomain",
                "unaff_R14": "endOfFile",
                "unaff_R15": "startOfFile",
                "in_stack_00000008": "msg",
                "in_stack_00000010": "retAddr"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 uVar1;\n  byte **slot;\n  byte *currentByte;\n  byte currentChar;\n  byte nextByte;\n  byte *lineBuf;\n  int lineIndex;\n  byte *currentLine;\n  undefined8 msgDomain;\n  byte *endOfFile;\n  byte *startOfFile;\n  undefined8 msg;\n  undefined8 *retAddr;\n  \n  do {\n    currentLine = startOfFile;\n    if (currentChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextByte = currentLine[1];\n      if ((((((nextByte == 9) || (nextByte == 0x20)) &&\n            ((nextByte = currentLine[2], nextByte == 9 || (nextByte == 0x20)))) &&\n           ((nextByte = currentLine[3], nextByte == 9 || (nextByte == 0x20)))) &&\n          ((nextByte = currentLine[4], nextByte == 9 || (nextByte == 0x20)))) &&\n         ((nextByte = currentLine[5], nextByte == 9 || (nextByte == 0x20)))) {\n        nextByte = currentLine[6];\n        currentByte = currentLine + 6;\n        if ((nextByte == 9) || (nextByte == 0x20)) {\n          do {\n            do {\n              nextByte = currentByte[1];\n              currentByte = currentByte + 1;\n            } while (nextByte == 0x20);\n          } while (nextByte == 9);\n        }\n      }\n      if ((0xd < nextByte) || ((-0x2402L >> (nextByte & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(uVar1,msg,lineIndex);\n      }\n    }\nLAB_00114599:\n    *currentLine = 0;\n    if (startOfFile < currentLine) {\n      slot = (byte **)htab_find_slot();\n      *slot = startOfFile;\n    }\n    lineIndex = lineIndex + 1;\n    currentLine = lineBuf;\n    if (endOfFile[1] == 0) {\n      *retAddr = msgDomain;\n      return;\n    }\n    for (; nextByte = *currentLine, endOfFile = currentLine, nextByte != 10; currentLine = currentLine + 1) {\n      if ((char)nextByte < '\\v') {\n        if (nextByte == 0) {\n          currentByte = currentLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextByte == 0xd) {\n          *currentLine = 0;\n          currentByte = currentLine + 1;\n          if (currentLine[1] == 10) {\n            currentByte = currentLine + 2;\n            endOfFile = currentLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextByte == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentLine = 0;\n    if (currentLine[1] == 0xd) {\n      endOfFile = currentLine + 1;\n      currentByte = currentLine + 2;\n    }\n    else {\n      currentByte = currentLine + 1;\n    }\nLAB_00114553:\n    currentChar = *lineBuf;\n    startOfFile = lineBuf;\n    while (lineBuf = currentByte, currentChar == 0x20) {\nLAB_00104c3f:\n      currentLine = startOfFile + 1;\n      startOfFile = startOfFile + 1;\n      currentByte = lineBuf;\n      currentChar = *currentLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "decompiled_function_0010554f",
                "param_7": "binary",
                "param_12": "sectionSize",
                "param_14": "gap",
                "param_17": "sections",
                "lVar14": "sectionSizeInBytes",
                "param_40": "sortedSections",
                "compare_records_0010875d": "compareSections",
                "__ptr_02": "stabInfo",
                "param_21": "alternativeMachineCode",
                "dcgettext": "getErrorMessage",
                "print_error_message_001126c0": "printErrorMessage"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 decompiledFunction_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long sectionSizeInBytes;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binary;\n  ulong param_8;\n  char param_9;\n  undefined4 *stabInfo;\n  ulong sectionSize;\n  char *param_13;\n  undefined *gap;\n  uint param_15;\n  long *sections;\n  undefined8 in_stack_00000068;\n  undefined8 alternativeMachineCode;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *sortedSections;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127978 == '\\0') && (DAT_00127969 == '\\0')) {\n    sectionSize = 0;\n    gap = (undefined *)0x0;\n    sections = (long *)0x0;\n    uVar29 = sectionSize;\n  }\n  else {\n    sectionSizeInBytes = (ulong)in_stack_00000068._4_4_ * 8;\n    sections = (long *)xmalloc(sectionSizeInBytes);\n    sortedSections = sections;\n    bfd_map_over_sections(binary,update_and_increment_pointer_0010870e,&stack0x00000140);\n    qsort(sections,(ulong)in_stack_00000068._4_4_,8,compareSections);\n    gap = (undefined *)xmalloc(sectionSizeInBytes);\n    bVar38 = DAT_00127978 != '\\0';\n    puVar33 = gap;\n    for (; sectionSizeInBytes != 0; sectionSizeInBytes = sectionSizeInBytes + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      sectionSize = 0;\n      do {\n        puVar30 = (ulong *)(gap + uVar29 * 8);\n        plVar28 = sections + uVar29;\n        uVar21 = sectionSize;\n        do {\n          sectionSize = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(binary,*plVar28);\n          uVar13 = bfd_octets_per_byte(binary);\n          sectionSizeInBytes = *plVar28;\n          if ((*(uint *)(sectionSizeInBytes + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(sectionSizeInBytes + 0x38) + *(long *)(sectionSizeInBytes + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            printErrorMessage(0,binary,*plVar28);\n            DAT_00127a20 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (sectionSize < uVar21);\n      } while( true );\n    }\n    sectionSize = 0;\nLAB_00107cd1:\n    uVar29 = sectionSize;\n    if (DAT_00127969 != '\\0') {\n      uVar12 = bfd_octets_per_byte(binary);\n      sectionSizeInBytes = sections[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127970 * (ulong)uVar12;\n      uVar24 = *(long *)(sectionSizeInBytes + 0x40) + (ulong)uVar12 * *(long *)(sectionSizeInBytes + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          printErrorMessage(0,binary,sections[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a20 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(gap + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= sectionSize) {\n            uVar29 = sectionSize;\n          }\n        }\n      }\n    }\n  }\n  sectionSize = uVar29;\n  plVar28 = DAT_001278b0;\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    stabInfo = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    stabInfo = (undefined4 *)xmalloc(0x60);\n    puVar32 = stabInfo;\n    for (sectionSizeInBytes = 0x18; sectionSizeInBytes != 0; sectionSizeInBytes = sectionSizeInBytes + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      sectionSizeInBytes = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((sectionSizeInBytes != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(sectionSizeInBytes + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,sectionSizeInBytes,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)create_initialized_buffer_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                sectionSizeInBytes = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + sectionSizeInBytes;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar9,sectionSizeInBytes,pcVar31);\n                    cVar7 = process_debug_record_0011173a(stabInfo,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = validate_and_initialize_memory_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(stabInfo);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      sectionSizeInBytes = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((sectionSizeInBytes == 0) && (sectionSizeInBytes = create_initialized_buffer_00112894(unaff_R14,0,plVar28), sectionSizeInBytes == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          update_data_entry_001088ae(param_43,(int)param_44,sortedSections,pcVar22);\n          param_9 = process_debug_record_0011173a(stabInfo,sectionSizeInBytes,param_43);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((sectionSizeInBytes != 0) && (cVar7 = validate_and_initialize_memory_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        sortedSections = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (sectionSizeInBytes = 0x22; sectionSizeInBytes != 0; sectionSizeInBytes = sectionSizeInBytes + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            sectionSizeInBytes = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,sectionSizeInBytes,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(sectionSizeInBytes + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,sectionSizeInBytes,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(stabInfo);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = initialize_debug_info_0010bbd3(stabInfo);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = process_debug_record_00112a33(&stack0x00000140,sectionSizeInBytes,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block_0010be88(stabInfo);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = close_debug_block_0010bf20(stabInfo);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        stabInfo);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function_0010bc80(stabInfo), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    sectionSizeInBytes = *(long *)(*(long *)(sectionSizeInBytes + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_debug_line_0010bf86(stabInfo,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + sectionSizeInBytes);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function_check_0010be1a(stabInfo);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = DAT_001278b0 + param_8;\n        plVar15 = DAT_001278b0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (sectionSizeInBytes = *(long *)(binary + 0x90); sectionSizeInBytes != 0; sectionSizeInBytes = *(long *)(sectionSizeInBytes + 8)) {\n        if (*(long *)(sectionSizeInBytes + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(sectionSizeInBytes + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      sectionSizeInBytes = xmalloc();\n      plVar28 = DAT_001278b0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = sectionSizeInBytes;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279a0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279a8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = extract_and_copy_section_0011a2e0(puVar26);\n                  uVar17 = DAT_001278d0;\n                  *(undefined8 *)(sectionSizeInBytes + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278d0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            sortedSections = plVar20;\n            lVar37 = htab_find(DAT_001278d0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278d8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127908;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127908;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127908);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                sortedSections = plVar25;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            sortedSections = plVar25;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              sortedSections = plVar25;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              sortedSections = plVar25;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = check_section_options_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = check_pattern_match_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279d8), lVar37 == 0 ||\n                      (cVar7 = check_pattern_match_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = check_pattern_match_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar7 = check_pattern_match_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(sectionSizeInBytes + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279a8;\n        iVar10 = DAT_001279a0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = extract_and_copy_section_0011a2e0(puVar26,binary);\n            *(undefined8 *)(sectionSizeInBytes + lVar23) = uVar17;\n            iVar10 = DAT_001279a0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_00127980 == '\\0';\n      *(undefined8 *)(sectionSizeInBytes + uVar29 * 8) = 0;\n      if ((bVar38) || (stabInfo == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = reverse_and_improve_binary_0011378f(binary,stabInfo,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          sectionSizeInBytes = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((sectionSizeInBytes == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(sectionSizeInBytes,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,sortedSections), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(sectionSizeInBytes + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binary,sectionSizeInBytes,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binary,lVar37,param_33,0,sortedSections), cVar7 != '\\0')\n               ) {\n              free(stabInfo);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          printErrorMessage(0,binary,0,uVar17);\n          free(param_33);\n          free(stabInfo);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binary + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        printErrorMessage(0,binary,0,uVar16,uVar17);\n      }\n      free(stabInfo);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,perform_relocation_00116030,DAT_001278b0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    sectionSizeInBytes = htab_elements(DAT_001279f8);\n    if (((sectionSizeInBytes != 0) ||\n        ((((sectionSizeInBytes = htab_elements(DAT_00127a08), sectionSizeInBytes != 0 ||\n           (sectionSizeInBytes = htab_elements(DAT_001279e8), sectionSizeInBytes != 0)) ||\n          (sectionSizeInBytes = htab_elements(DAT_001279e0), sectionSizeInBytes != 0)) ||\n         ((sectionSizeInBytes = htab_elements(DAT_001279d8), sectionSizeInBytes != 0 ||\n          (sectionSizeInBytes = htab_elements(DAT_001279d0), sectionSizeInBytes != 0)))))) ||\n       ((((sectionSizeInBytes = htab_elements(DAT_001278d0), sectionSizeInBytes != 0 ||\n          ((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')))) || (DAT_00127a19 != '\\0')) ||\n        ((((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')) ||\n         (((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')) || (DAT_001279a0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,binary);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00116110,binary);\n    for (puVar26 = DAT_001279c0; puVar4 = DAT_001279b8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(binary,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        printErrorMessage(0,binary,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binary,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        printErrorMessage(0,binary,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(binary + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = compare_strings_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(binary,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                printErrorMessage(0,binary,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          printErrorMessage(0,binary,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binary,alternativeMachineCode), sectionSizeInBytes = DAT_00127a10,\n       cVar7 != '\\0')) {\n      if (gap != (undefined *)0x0) {\n        if (0x2000 < sectionSize) {\n          sectionSize = 0x2000;\n        }\n        sectionSizeInBytes = 0;\n        __ptr = (undefined *)xmalloc(sectionSize);\n        uVar5 = DAT_00127979;\n        puVar33 = __ptr;\n        for (sectionSize = sectionSize & 0xffffffff; sectionSize != 0; sectionSize = sectionSize - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)sectionSizeInBytes < in_stack_00000068._4_4_; sectionSizeInBytes = sectionSizeInBytes + 1) {\n          uVar29 = *(ulong *)(gap + sectionSizeInBytes * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*sections + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(binary,*sections,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                printErrorMessage(0,binary,*sections,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          sections = sections + 1;\n        }\n        free(__ptr);\n        free(gap);\n      }\n      uVar9 = (**(code **)(*(long *)(binary + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(binary,DAT_00127910 & 0xffffffff);\n        uVar29 = DAT_00127910;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      printErrorMessage(0,binary,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      printErrorMessage(0,binary,0,uVar17,sectionSizeInBytes);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "htab_find",
                "FUN_0010bf86",
                "FUN_0011a170",
                "FUN_00115d70",
                "FUN_0011378f",
                "bfd_set_error",
                "FUN_0010bf20",
                "qsort",
                "FUN_00108b3e",
                "bfd_coff_get_syment",
                "bfd_make_section_with_flags",
                "FUN_001126c0",
                "FUN_001159d0",
                "concat",
                "bfd_set_section_size",
                "strcmp",
                "FUN_00113fb0",
                "strlen",
                "fprintf",
                "FUN_00115dc0",
                "htab_elements",
                "xstrdup",
                "bfd_get_section_by_name",
                "FUN_0010870e",
                "FUN_0010c892",
                "bfd_is_local_label",
                "FUN_001088ae",
                "htab_traverse",
                "FUN_0010be88",
                "FUN_0010bbd3",
                "bfd_map_over_sections",
                "xmalloc",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33",
                "bfd_map_over_sections",
                "FUN_00119ed0",
                "bfd_get_section_contents",
                "strcpy",
                "bfd_set_section_contents",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_00119dd0",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "dcgettext",
                "FUN_00116110",
                "FUN_0010be1a",
                "FUN_00108863",
                "FUN_0011a2e0",
                "FUN_00116030",
                "FUN_0010875d",
                "bfd_set_symtab",
                "free",
                "FUN_00112894",
                "bfd_get_error",
                "bfd_octets_per_byte",
                "FUN_0010bc80",
                "bfd_coff_get_auxent",
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decompiled_function_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "param_1": "data_structure",
                "param_2": "value",
                "param_3": "param",
                "local_3c": "value_string"
            },
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 data_structure,undefined8 value,undefined4 param)\n\n{\n  char value_string [28];\n  \n  sprintf(value_string,\"%ld\",value);\n  initialize_data_structure_00109cf4_00109b52(data_structure,value_string,value,0,param);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d5c",
                "FUN_00109dfe",
                "FUN_00109d97",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_stab_entry_00109ab1",
                "param_1": "stab_entry",
                "param_2": "parsed_values",
                "uVar1": "parsed_value",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "output"
            },
            "code": "\nundefined  [16]\nparse_stab_entry_00109ab1(char **stab_entry,undefined4 *parsed_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined output [16];\n  \n  current_char = *stab_entry;\n  if (*current_char == '(') {\n    *stab_entry = current_char + 1;\n    parsed_value = parse_numeric_string_00109a32(stab_entry,0);\n    *parsed_values = parsed_value;\n    if (**stab_entry == ',') {\n      *stab_entry = *stab_entry + 1;\n      parsed_value = parse_numeric_string_00109a32(stab_entry,0,param_3);\n      parsed_values[1] = parsed_value;\n      if (**stab_entry == ')') {\n        current_char = *stab_entry + 1;\n        *stab_entry = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_error_message_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *parsed_values = 0;\n    current_char = (char *)parse_numeric_string_00109a32(stab_entry,0);\n    parsed_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  output._8_8_ = param_5;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_stab_entry_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_section_options_001159d0",
                "param_1": "sectionAddress",
                "uVar1": "matchingValue",
                "cVar2": "matchResult",
                "uVar3": "sectionOptionsResult",
                "lVar4": "matchingValueAddress",
                "lVar5": "currentValueAddress"
            },
            "code": "\nundefined4 checkSectionOptions_001159d0(long sectionAddress)\n\n{\n  undefined8 matchingValue;\n  char matchResult;\n  undefined4 sectionOptionsResult;\n  long matchingValueAddress;\n  long currentValueAddress;\n  \n  sectionOptionsResult = check_section_options_00115b70();\n  if ((char)sectionOptionsResult == '\\0') {\n    if ((*(byte *)(sectionAddress + 0x27) & 2) == 0) {\n      return sectionOptionsResult;\n    }\n    matchingValueAddress = find_matching_value_00115d00(*(undefined8 *)(sectionAddress + 0xd0),*(undefined8 *)(sectionAddress + 0xe0));\n    if ((matchingValueAddress != 0) &&\n       (((matchingValue = *(undefined8 *)(matchingValueAddress + 8), DAT_00127a2c != 7 ||\n         (matchResult = check_pattern_match_00115d70(matchingValue,DAT_00127a08), matchResult != '\\0')) &&\n        (matchResult = check_pattern_match_00115d70(matchingValue,DAT_001279f8), matchResult == '\\0')))) {\n      matchingValueAddress = *(long *)(*(long *)(sectionAddress + 0xd0) + 0xc0);\n      currentValueAddress = matchingValueAddress;\n      do {\n        if (currentValueAddress == 0) {\n          return 1;\n        }\n        matchResult = check_section_options_00115b70(currentValueAddress);\n        if (matchResult == '\\0') {\n          return sectionOptionsResult;\n        }\n        currentValueAddress = *(long *)(*(long *)(currentValueAddress + 0xd0) + 0xc0);\n      } while (matchingValueAddress != currentValueAddress);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00115f50"
            ],
            "imported": false,
            "current_name": "check_section_options_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "extract_and_initialize_data_structure_0010a77a",
                "param_1": "data_structure_ptr",
                "__s": "string_ptr",
                "uVar4": "retval",
                "uVar1": "char_val",
                "uVar3": "long_val",
                "__s_00": "extracted_string",
                "sVar5": "extracted_string_length",
                "sVar6": "original_string_length",
                "__s_01": "combined_string"
            },
            "code": "\nundefined4 extract_and_initialize_data_structure_0010a77a(long data_structure_ptr)\n\n{\n  undefined char_val;\n  long lVar2;\n  char *string_ptr;\n  undefined8 long_val;\n  undefined4 retval;\n  char *extracted_string;\n  size_t extracted_string_length;\n  size_t original_string_length;\n  char *combined_string;\n  \n  lVar2 = *(long *)(data_structure_ptr + 0x60);\n  if ((lVar2 != 0) && (string_ptr = *(char **)(lVar2 + 0x20), string_ptr != (char *)0x0)) {\n    retval = *(undefined4 *)(lVar2 + 0x18);\n    char_val = *(undefined *)(lVar2 + 0x1c);\n    long_val = *(undefined8 *)(lVar2 + 0x10);\n    extracted_string = (char *)extract_and_free_ptr_00109b2f();\n    extracted_string_length = strlen(extracted_string);\n    original_string_length = strlen(string_ptr);\n    combined_string = (char *)xmalloc(extracted_string_length + 2 + original_string_length);\n    sprintf(combined_string,\"%s%s;\",extracted_string,string_ptr);\n    free(extracted_string);\n    free(string_ptr);\n    retval = initialize_data_structure_00109b52(data_structure_ptr,combined_string,long_val,char_val,retval);\n    if ((char)retval != '\\0') {\n      free(combined_string);\n      return retval;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_structure_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "uVar1": "file_descriptor",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "uVar4": "localized_error",
                "unaff_RBP": "base_pointer"
            },
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_location;\n  char *error_message;\n  undefined8 localized_error;\n  long base_pointer;\n  \n  errno_location = __errno_location();\n  error_message = strerror(*errno_location);\n  file_descriptor = *(undefined8 *)(base_pointer + 0x10);\n  localized_error = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c_00119dd0(localized_error,file_descriptor,error_message);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "__errno_location",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "param_1": "input_ptr",
                "param_2": "flag_1",
                "param_3": "count",
                "param_4": "flag_2",
                "cVar1": "result",
                "bVar2": "temp_byte",
                "iVar3": "temp_int",
                "uVar4": "output",
                "pcVar5": "str1",
                "__ptr": "extracted_ptrs",
                "uVar6": "temp_ptr",
                "__s": "str2",
                "sVar7": "len1",
                "sVar8": "len2",
                "__s_00": "final_str",
                "lVar9": "i",
                "bVar10": "temp_flag",
                "lVar11": "temp_index",
                "uVar12": "temp_undefined"
            },
            "code": "\nundefined4 generateFormattedString_0010a424(long input_ptr,char flag_1,int count,char flag_2)\n\n{\n  char result;\n  byte temp_byte;\n  int temp_int;\n  undefined4 output;\n  char *str1;\n  undefined8 *extracted_ptrs;\n  undefined8 temp_ptr;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *final_str;\n  long i;\n  byte temp_flag;\n  long temp_index;\n  undefined temp_undefined;\n  \n  if ((flag_1 == '\\0') && (result = initialize_or_increment_data_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  temp_flag = *(byte *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_ptr_00109b2f(input_ptr);\n  if (count < 0) {\n    extracted_ptrs = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    temp_undefined = 1;\n    if (temp_flag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      temp_int = count + 1;\n      extracted_ptrs = (undefined8 *)xmalloc((long)temp_int * 8);\n      i = (long)(count + -1);\n      do {\n        temp_byte = 1;\n        if (temp_flag == 0) {\n          temp_byte = *(byte *)(*(long *)(input_ptr + 0x60) + 0x1c);\n        }\n        temp_ptr = extract_and_free_ptr_00109b2f(input_ptr);\n        temp_flag = temp_byte & 1;\n        extracted_ptrs[i] = temp_ptr;\n        i = i + -1;\n      } while ((int)i != -1);\n      if (flag_2 == '\\0') {\n        result = initialize_or_increment_data_00109d97(input_ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n        temp_byte = 1;\n        if (temp_flag == 0) {\n          temp_byte = *(byte *)(*(long *)(input_ptr + 0x60) + 0x1c);\n        }\n        temp_flag = temp_byte & 1;\n        temp_ptr = extract_and_free_ptr_00109b2f(input_ptr);\n        extracted_ptrs[(long)temp_int + -1] = temp_ptr;\n        count = temp_int;\n      }\n      goto LAB_0010a582;\n    }\n    extracted_ptrs = (undefined8 *)0x0;\n    if (flag_2 != '\\0') goto LAB_0010a582;\n    extracted_ptrs = (undefined8 *)xmalloc(8);\n    result = initialize_or_increment_data_00109d97(input_ptr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((temp_flag != 0) || (*(char *)(*(long *)(input_ptr + 0x60) + 0x1c) != '\\0')) {\n      temp_ptr = extract_and_free_ptr_00109b2f(input_ptr);\n      count = 1;\n      temp_undefined = 1;\n      *extracted_ptrs = temp_ptr;\n      goto LAB_0010a596;\n    }\n    temp_ptr = extract_and_free_ptr_00109b2f(input_ptr);\n    count = 1;\n    *extracted_ptrs = temp_ptr;\n  }\n  temp_undefined = *(undefined *)(*(long *)(input_ptr + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_and_free_ptr_00109b2f(input_ptr);\n  len1 = strlen(str1);\n  len2 = strlen(str2);\n  i = len1 + 10 + len2;\n  for (temp_index = 0; (int)temp_index < count; temp_index = temp_index + 1) {\n    len1 = strlen((char *)extracted_ptrs[temp_index]);\n    i = i + len1;\n  }\n  final_str = (char *)xmalloc(i);\n  sprintf(final_str,\"#%s,%s\",str1,str2);\n  i = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    len1 = strlen(final_str);\n    if (count <= (int)i) break;\n    *(undefined2 *)(final_str + len1) = 0x2c;\n    str1 = (char *)extracted_ptrs[i];\n    i = i + 1;\n    strcpy(final_str + len1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(final_str + len1) = 0x3b;\n  free(extracted_ptrs);\n  output = initialize_data_structure_00109b52(input_ptr,final_str,0,temp_undefined,0);\n  if ((char)output == '\\0') {\n    return 0;\n  }\n  free(final_str);\n  return output;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "FUN_00109d97",
                "sprintf",
                "FUN_00109b2f",
                "strcpy",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_license_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printLicenseInfo_00119970(undefined8 version)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_license_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_query_string_00114c80",
                "param_1": "queryString",
                "param_2": "defaultValue",
                "param_3": "errorMessage",
                "param_4": "userData",
                "pcVar1": "equalSignPtr",
                "uVar2": "errorMessagePtr",
                "auVar3": "parsedQueryString"
            },
            "code": "\nundefined  [16] parseQueryString_00114c80(char *queryString,undefined8 defaultValue,undefined8 errorMessage,undefined8 userData)\n\n{\n  char *equalSignPtr;\n  undefined8 errorMessagePtr;\n  undefined parsedQueryString [16];\n  \n  equalSignPtr = strchr(queryString,0x3d);\n  if (equalSignPtr != (char *)0x0) {\n    parsedQueryString._0_8_ = (undefined8 *)xmalloc(0x30);\n    errorMessagePtr = copy_string_0011a480(queryString,(long)equalSignPtr - (long)queryString);\n    parsedQueryString._0_8_[2] = equalSignPtr + 1;\n    parsedQueryString._0_8_[1] = errorMessagePtr;\n    parsedQueryString._0_8_[4] = 0;\n    parsedQueryString._0_8_[3] = 0;\n    *parsedQueryString._0_8_ = defaultValue;\n    parsedQueryString._8_8_ = userData;\n    return parsedQueryString;\n  }\n  errorMessagePtr = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessagePtr,errorMessage);\n}\n\n",
            "called": [
                "xmalloc",
                "strchr",
                "FUN_001053b5",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_query_string_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_and_increment_pointer_0010870e",
                "param_1": "newValue",
                "param_2": "valueToStore",
                "param_3": "pointerToValue",
                "puVar1": "pointerToValue"
            },
            "code": "\nvoid updateAndIncrementPointer_0010870e(undefined8 newValue,undefined8 valueToStore,long *pointerToValue)\n\n{\n  undefined8 *pointerToValue;\n  \n  pointerToValue = (undefined8 *)*pointerToValue;\n  *pointerToValue = valueToStore;\n  *pointerToValue = (long)(pointerToValue + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_and_increment_pointer_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_file",
                "param_2": "symbols",
                "param_3": "type_table",
                "param_4": "translation_unit",
                "param_5": "type_code",
                "param_6": "type_name",
                "param_7": "is_unsigned",
                "param_8": "error_message",
                "lVar1": "type_entry",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "result",
                "lVar5": "result",
                "uVar6": "result",
                "plVar7": "output",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "type_shift",
                "iVar9": "counter",
                "pcVar10": "type_str",
                "uVar11": "type_mask",
                "lVar12": "index",
                "uVar13": "modified_code",
                "local_68": "local_buffer",
                "local_48": "local_byte",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_file,long *symbols,long type_table,undefined8 translation_unit,uint type_code,\n                 long *type_name,char is_unsigned,undefined8 error_message)\n\n{\n  long type_entry;\n  char result;\n  undefined4 error_code;\n  undefined8 result;\n  long result;\n  undefined8 result;\n  long *output;\n  void *ptr1;\n  void *ptr2;\n  byte type_shift;\n  int counter;\n  char *type_str;\n  ulong type_mask;\n  long index;\n  uint modified_code;\n  uint uVar14;\n  undefined8 uVar15;\n  undefined local_buffer [32];\n  char local_byte;\n  byte local_byte;\n  \n  result = *(long *)(coff_file + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    modified_code = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    type_mask = (ulong)(type_code & *(uint *)(result + 0x40));\n    type_shift = (byte)*(undefined4 *)(result + 0x3c);\n    modified_code = (modified_code ^ type_code) & *(uint *)(result + 0x38) ^ modified_code;\n    if (type_mask == 1L << (type_shift & 0x3f)) {\n      result = parse_coff_type_0010dac0(coff_file,symbols,type_table,translation_unit,modified_code,type_name,is_unsigned,error_message);\n      result = allocate_memory_if_needed_00113d3a(result);\n      return result;\n    }\n    if (type_mask != 2L << (type_shift & 0x3f)) {\n      if (type_mask != 3L << (type_shift & 0x3f)) {\n        result = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          modified_code);\n        print_error_message_00119ed0(result,type_code);\n        return 0;\n      }\n      uVar14 = 0;\n      if (type_name != (long *)0x0) {\n        uVar14 = (uint)*(ushort *)(type_name + 2);\n        output = type_name + 2;\n        for (counter = 0; (*(short *)output != 0 && (counter != 3)); counter = counter + 1) {\n          *(short *)output = *(short *)((long)output + 2);\n          output = (long *)((long)output + 2);\n        }\n        *(short *)output = 0;\n      }\n      uVar15 = 0;\n      result = error_message;\n      result = parse_coff_type_0010dac0(coff_file,symbols,type_table,translation_unit,modified_code,type_name,0);\n      result = *(long *)(type_table + 0x28);\n      if (result == 0) {\n        result = initialize_memory_and_set_param_00113dfe(4,0,uVar15,result);\n        result = process_file_0010c218(error_message,\"int\",result);\n        *(long *)(type_table + 0x28) = result;\n      }\n      result = initialize_and_allocate_memory_00113c43(result,result,0,(long)(int)(uVar14 - 1),0);\n      return result;\n    }\n    result = parse_coff_type_0010dac0(coff_file,symbols,type_table,translation_unit,modified_code,type_name,is_unsigned,error_message);\n    result = initialize_function_00113ce0(result,0,0);\n    return result;\n  }\n  if ((type_name != (long *)0x0) && (0 < *type_name)) {\n    output = (long *)allocate_and_fill_slots_0010da0b(type_table);\n    if (*output != 0) {\n      return *output;\n    }\n    result = create_memory_block_00113e23(output,0);\n    return result;\n  }\n  if (is_unsigned == '\\0') {\n    type_name = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = initialize_memory_00113e17();\n    return result;\n  }\n  result = *(long *)(type_table + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    result = initialize_memory_00113e17();\n    type_str = \"void\";\n    break;\n  case 2:\n    result = initialize_memory_and_set_param_00113dfe(1,0);\n    type_str = \"char\";\n    break;\n  case 3:\n    result = initialize_memory_and_set_param_00113dfe(2,0);\n    type_str = \"short\";\n    break;\n  case 4:\n    result = initialize_memory_and_set_param_00113dfe(4,0);\n    type_str = \"int\";\n    break;\n  case 5:\n    result = initialize_memory_and_set_param_00113dfe(4,0);\n    type_str = \"long\";\n    break;\n  case 6:\n    result = initialize_memory_00113df2(4);\n    type_str = \"float\";\n    break;\n  case 7:\n    result = initialize_memory_00113df2(8);\n    type_str = \"double\";\n    break;\n  case 8:\n    if (type_name == (long *)0x0) {\n      result = initialize_memory_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_name == (long *)0x0) {\n      result = initialize_memory_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result = 9;\nLAB_0010de7a:\n    result = extract_symbols_0010e07c(coff_file,symbols,type_table,result,type_name,error_message);\nLAB_0010e046:\n    output = (long *)allocate_and_fill_slots_0010da0b(type_table,translation_unit);\n    *output = result;\n    return result;\n  case 10:\n    if (type_name == (long *)0x0) {\n      result = allocate_and_initialize_memory_00113d6e(0,0);\n    }\n    else {\n      result = type_name[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      index = 0;\n      do {\n        while( true ) {\n          if ((result <= symbols[3]) || (symbols[1] <= symbols[2])) goto LAB_0010e032;\n          counter = (int)index;\n          type_entry = *(long *)(*symbols + symbols[2] * 8);\n          result = bfd_coff_get_syment(coff_file,type_entry,local_buffer);\n          index = (long)counter;\n          if (result == '\\0') {\n            error_code = bfd_get_error();\n            result = bfd_errmsg(error_code);\n            result = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(result,result);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          symbols[2] = symbols[2] + 1;\n          symbols[3] = (ulong)local_byte + 1 + symbols[3];\n          if (local_byte != '\\x10') break;\n          if ((int)type_code <= counter + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          index = *(long *)(type_entry + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)counter * 8) = *(undefined8 *)(type_entry + 8);\n          *(long *)((long)ptr2 + (long)counter * 8) =\n               *(long *)(type_entry + 0x10) + *(long *)(index + 0x30);\n          index = (long)(counter + 1);\n        }\n      } while (local_byte != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + index * 8) = 0;\n      result = allocate_and_initialize_memory_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = initialize_memory_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result = initialize_memory_and_set_param_00113dfe(1,1);\n    type_str = \"unsigned char\";\n    break;\n  case 0xd:\n    result = initialize_memory_and_set_param_00113dfe(2,1);\n    type_str = \"unsigned short\";\n    break;\n  case 0xe:\n    result = initialize_memory_and_set_param_00113dfe(4,1);\n    type_str = \"unsigned int\";\n    break;\n  case 0xf:\n    result = initialize_memory_and_set_param_00113dfe(4,1);\n    type_str = \"unsigned long\";\n    break;\n  case 0x10:\n    result = initialize_memory_00113df2(0xc);\n    type_str = \"long double\";\n  }\n  result = process_file_0010c218(error_message,type_str,result);\nLAB_0010e065:\n  *(long *)(type_table + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00113d3a",
                "FUN_0010e07c",
                "FUN_00113c43",
                "dcgettext",
                "FUN_00113ce0",
                "xmalloc",
                "FUN_00113e23",
                "FUN_0010dac0",
                "FUN_00113d6e",
                "FUN_00113da9",
                "xrealloc",
                "FUN_0010c218",
                "free",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010554f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string_1",
                "param_2": "string_2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "stringLength",
                "extraout_var": "overflowCheck",
                "auVar2": "resultArray"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string_1,char *string_2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t stringLength;\n  undefined4 overflowCheck;\n  undefined resultArray [16];\n  \n  stringLength = strlen(string_2);\n  comparisonResult = strncmp(string_1,string_2,stringLength);\n  resultArray._1_7_ = (undefined7)(CONCAT44(overflowCheck,comparisonResult) >> 8);\n  resultArray[0] = comparisonResult == 0;\n  resultArray._8_8_ = returnValue;\n  return resultArray;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_00113ede",
                "FUN_0010ee3f",
                "FUN_00108c86",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_message_cannot_set_time_0010882c",
                "piVar1": "errnoLocation",
                "uVar2": "errorMessage",
                "__errno_location": "__get_error_number_location",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedMessage",
                "print_error_message_00119ed0": "printErrorMessage"
            },
            "code": "\nvoid printErrorMessageCannotSetTime_0010882c(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorMessage;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  printErrorMessage(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_message_cannot_set_time_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_and_send_data_0010ebb0",
                "param_1": "input_param",
                "param_2": "input_string",
                "param_3": "str_len",
                "param_4": "output_param",
                "__s": "extracted_data",
                "cVar1": "character",
                "uVar2": "str_len_minus_one",
                "uVar3": "result",
                "sVar4": "input_str_len",
                "sVar5": "extracted_data_len",
                "__s_00": "processed_data"
            },
            "code": "\nundefined4 process_and_send_data_0010ebb0(undefined8 input_param,char *input_string,int str_len,undefined8 output_param)\n\n{\n  char character;\n  uint str_len_minus_one;\n  undefined4 result;\n  char *extracted_data;\n  size_t input_str_len;\n  size_t extracted_data_len;\n  char *processed_data;\n  \n  extracted_data = (char *)extract_and_free_ptr_00109b2f();\n  str_len_minus_one = str_len - 1;\n  if (str_len_minus_one < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)str_len_minus_one * 4);\n    character = (&DAT_00121334)[str_len_minus_one];\n    input_str_len = strlen(input_string);\n    extracted_data_len = strlen(extracted_data);\n    processed_data = (char *)xmalloc(input_str_len + 3 + extracted_data_len);\n    sprintf(processed_data,\"%s:%c%s\",input_string,(ulong)(uint)(int)character,extracted_data);\n    free(extracted_data);\n    result = process_string_data_0010e2f0(input_param,result,0,output_param,processed_data);\n    if ((char)result != '\\0') {\n      free(processed_data);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_memory_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "memoryAddress",
                "plVar2": "pointer",
                "initialize_memory_00112904": "allocateMemory",
                "xmalloc": "allocateMemoryBlock"
            },
            "code": "\nlong initializeMemory_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long memoryAddress;\n  long *pointer;\n  \n  if ((input1 != 0) && (memoryAddress = allocateMemory(0x13,0), memoryAddress != 0)) {\n    pointer = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)pointer + 0x19) = 0;\n    *pointer = input1;\n    *(undefined4 *)((long)pointer + 0x1c) = 0;\n    pointer[1] = input2;\n    pointer[2] = input3;\n    *(undefined *)(pointer + 3) = input4;\n    *(long **)(memoryAddress + 0x10) = pointer;\n    return memoryAddress;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_pattern_match_00115d70",
                "param_1": "input_value",
                "param_2": "hash_table",
                "lVar1": "result",
                "local_18": "input_value_copy",
                "local_10": "is_matched"
            },
            "code": "\nundefined check_pattern_match_00115d70(undefined8 input_value,undefined8 hash_table)\n\n{\n  long result;\n  undefined8 input_value_copy;\n  undefined is_matched;\n  \n  if (DAT_001279ca == '\\0') {\n    result = htab_find(hash_table,input_value);\n    is_matched = result != 0;\n  }\n  else {\n    is_matched = 0;\n    input_value_copy = input_value;\n    htab_traverse(hash_table,match_pattern_0011a170,&input_value_copy);\n  }\n  return is_matched;\n}\n\n",
            "called": [
                "htab_find",
                "htab_traverse",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_0010554f",
                "FUN_001082df",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_pattern_match_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "resize_and_insert_entry_00109be3",
                "param_1": "entry",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "newPointer",
                "puVar2": "entryPtr",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 resizeAndInsertEntry_00109be3(long entry,undefined8 value,undefined4 flag)\n\n{\n  undefined8 newPointer;\n  undefined8 *entryPtr;\n  uint currentSize;\n  \n  if (*(uint *)(entry + 0x2c) <= *(uint *)(entry + 0x28)) {\n    currentSize = *(uint *)(entry + 0x2c) + 10;\n    *(uint *)(entry + 0x2c) = currentSize;\n    newPointer = xrealloc(*(undefined8 *)(entry + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(entry + 0x20) = newPointer;\n  }\n  currentSize = *(uint *)(entry + 0x28);\n  entryPtr = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(entry + 0x20));\n  *entryPtr = value;\n  *(undefined4 *)(entryPtr + 1) = flag;\n  *(uint *)(entry + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)entryPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "resize_and_insert_entry_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "destinationString"
            },
            "code": "\nvoid copyString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *destinationString;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  destinationString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)destinationString + stringLength) = 0;\n  memcpy(destinationString,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_and_send_data_0010e918",
                "param_1": "data_buffer",
                "param_2": "input_string",
                "param_3": "num",
                "__s": "extracted_string",
                "sVar2": "input_length",
                "sVar3": "extracted_length",
                "__s_00": "output_string",
                "uVar1": "result"
            },
            "code": "\nundefined4 process_and_send_data_0010e918(undefined8 data_buffer,char *input_string,undefined8 num)\n\n{\n  undefined4 result;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_length;\n  char *output_string;\n  \n  extracted_string = (char *)extract_and_free_ptr_00109b2f();\n  input_length = strlen(input_string);\n  extracted_length = strlen(extracted_string);\n  output_string = (char *)xmalloc(input_length + 0x14 + extracted_length);\n  sprintf(output_string,\"%s:c=e%s,%ld\",input_string,extracted_string,num);\n  free(extracted_string);\n  result = process_string_data_0010e2f0(data_buffer,0x80,0,0,output_string);\n  if ((char)result != '\\0') {\n    free(output_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010ae0e",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010a424"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_binary_section_00116110",
                "param_1": "binaryHandle",
                "param_2": "sectionInfo",
                "param_3": "outputSection",
                "uVar1": "tempByte",
                "uVar2": "tempHandle",
                "lVar3": "tempSize",
                "iVar4": "tempVar1",
                "iVar5": "tempVar2",
                "cVar6": "result",
                "uVar7": "errorMsg",
                "__ptr": "bufferPtr",
                "lVar8": "loopCounter",
                "uVar9": "loopCounter2",
                "iVar10": "loopCounter3",
                "uVar11": "tempVar3",
                "puVar12": "ptrByte",
                "lVar13": "tempSize2",
                "puVar14": "bufferPtr2",
                "puVar15": "bufferPtr3",
                "pvVar16": "ptrToSection",
                "uVar17": "tempVar4",
                "uVar18": "tempVar5",
                "uVar19": "tempVar6",
                "bVar20": "flag",
                "local_38": "sectionSize",
                "local_30": "sectionData"
            },
            "code": "\nvoid processBinarySection_00116110(undefined8 binaryHandle,undefined8 *sectionInfo,undefined8 outputSection)\n\n{\n  undefined tempByte;\n  undefined8 tempHandle;\n  long tempSize;\n  int tempVar1;\n  int tempVar2;\n  char result;\n  undefined8 errorMsg;\n  undefined8 *bufferPtr;\n  long loopCounter;\n  ulong loopCounter2;\n  int loopCounter3;\n  ulong tempVar3;\n  undefined *ptrByte;\n  long tempSize2;\n  undefined8 *bufferPtr2;\n  undefined8 *bufferPtr3;\n  void *ptrToSection;\n  ulong tempVar4;\n  ulong tempVar5;\n  ulong tempVar6;\n  byte flag;\n  ulong sectionSize;\n  void *sectionData;\n  \n  flag = 0;\n  result = check_section_options_00115f50(binaryHandle,sectionInfo,1);\n  if (result != '\\0') {\n    return;\n  }\n  sectionSize = sectionInfo[8];\n  tempSize = sectionInfo[0xc];\n  if (((*(byte *)((long)sectionInfo + 0x25) & 1) == 0) || ((*(byte *)(tempSize + 0x25) & 1) == 0)) {\n    tempSize2 = process_data_00114190(*sectionInfo,0,0x80);\n    if (tempSize2 == 0) {\n      return;\n    }\n    if ((*(byte *)(tempSize2 + 0x29) & 1) == 0) {\n      return;\n    }\n    bufferPtr = (undefined8 *)xmalloc(sectionSize);\n    bufferPtr3 = bufferPtr;\n    if (7 < sectionSize) {\n      for (tempVar5 = sectionSize >> 3; tempVar5 != 0; tempVar5 = tempVar5 - 1) {\n        *bufferPtr3 = 0;\n        bufferPtr3 = bufferPtr3 + (ulong)flag * -2 + 1;\n      }\n    }\n    bufferPtr2 = bufferPtr3;\n    if ((sectionSize & 4) != 0) {\n      bufferPtr2 = (undefined8 *)((long)bufferPtr3 + (ulong)flag * -8 + 4);\n      *(undefined4 *)bufferPtr3 = 0;\n    }\n    bufferPtr3 = bufferPtr2;\n    if ((sectionSize & 2) != 0) {\n      bufferPtr3 = (undefined8 *)((long)bufferPtr2 + (ulong)flag * -4 + 2);\n      *(undefined2 *)bufferPtr2 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)bufferPtr3 = 0;\n    }\n    result = bfd_set_section_contents(outputSection,tempSize,bufferPtr,0);\n    if (result != '\\0') {\n      free(bufferPtr);\n      return;\n    }\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0,outputSection,tempSize,0);\n    free(bufferPtr);\n    return;\n  }\n  sectionData = (void *)0x0;\n  result = bfd_get_full_section_contents(binaryHandle,sectionInfo,&sectionData);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(binaryHandle,sectionInfo,outputSection,&sectionData,&sectionSize),\n     loopCounter3 = DAT_001278e8, result == '\\0')) {\n    bfd_set_section_size(tempSize,0);\n    DAT_00127a20 = 1;\n    print_error_message_001126c0(0,binaryHandle,sectionInfo,0);\n    free(sectionData);\n    return;\n  }\n  tempVar1 = DAT_001264b8;\n  tempVar2 = DAT_001264bc;\n  if (DAT_001278e8 != 0) {\n    tempVar5 = (ulong)DAT_001278e8;\n    if (sectionSize % tempVar5 != 0) {\n      tempHandle = *sectionInfo;\n      errorMsg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(errorMsg,tempHandle,loopCounter3);\n    }\n    loopCounter3 = DAT_001278e8 / 2;\n    tempVar3 = 0;\n    while (tempVar6 = tempVar3, tempVar1 = DAT_001264b8, tempVar2 = DAT_001264bc, tempVar6 < sectionSize) {\n      tempVar3 = tempVar5 + tempVar6;\n      tempVar4 = tempVar3;\n      for (loopCounter2 = 0; loopCounter2 < (ulong)(long)loopCounter3; loopCounter2 = loopCounter2 + 1) {\n        tempVar4 = tempVar4 - 1;\n        ptrByte = (undefined *)(tempVar6 + loopCounter2 + (long)sectionData);\n        tempByte = *ptrByte;\n        *ptrByte = *(undefined *)((long)sectionData + tempVar4);\n        *(undefined *)((long)sectionData + tempVar4) = tempByte;\n      }\n    }\n  }\n  DAT_001264b8 = tempVar1;\n  DAT_001264bc = tempVar2;\n  if (-1 < tempVar2) {\n    tempVar5 = (ulong)DAT_00127a1c;\n    loopCounter3 = (int)((ulong)sectionInfo[7] % tempVar5);\n    tempVar3 = ((long)tempVar2 - (long)loopCounter3) + (long)sectionData;\n    if (tempVar2 < loopCounter3) {\n      tempVar3 = tempVar3 + tempVar5;\n    }\n    tempSize2 = (sectionSize + (long)sectionData) - tempVar3;\n    ptrToSection = sectionData;\n    for (; tempVar3 < sectionSize + (long)sectionData; tempVar3 = tempVar3 + tempVar5) {\n      for (loopCounter = 0; ((int)loopCounter < tempVar1 && (loopCounter != tempSize2)); loopCounter = loopCounter + 1) {\n        *(undefined *)((long)ptrToSection + loopCounter) = *(undefined *)(tempVar3 + loopCounter);\n      }\n      ptrToSection = (void *)((long)ptrToSection + loopCounter);\n      tempSize2 = tempSize2 - tempVar5;\n    }\n    sectionSize = ((((tempVar5 - 1) + sectionSize) - (long)tempVar2) / tempVar5) * (long)tempVar1;\n    tempVar5 = *(ulong *)(tempSize + 0x38) / tempVar5;\n    *(ulong *)(tempSize + 0x38) = tempVar5;\n    if (tempVar2 < loopCounter3) {\n      *(ulong *)(tempSize + 0x38) = tempVar5 + 1;\n      result = bfd_set_section_contents(outputSection,tempSize,sectionData,0,sectionSize);\n      if (result == '\\0') {\n        cleanup_and_print_error_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(outputSection,tempSize,sectionData,0,sectionSize);\n  if (result == '\\0') {\n    cleanup_and_print_error_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_001083de",
                "bfd_get_full_section_contents",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "free",
                "xmalloc",
                "FUN_00115f50",
                "FUN_001126c0",
                "FUN_00108466",
                "FUN_00114190",
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "close_debug_block_0010bf20",
                "param_1": "blockData",
                "param_2": "newBlockData",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "currentBlock",
                "uVar2": "localizedMessage",
                "pcVar3": "errorMessage",
                "auVar4": "returnValueStruct"
            },
            "code": "\n\n\nundefined  [16] closeDebugBlock_0010bf20(long blockData,undefined8 newBlockData,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long currentBlock;\n  undefined8 localizedMessage;\n  char *errorMessage;\n  undefined returnValueStruct [16];\n  \n  if ((*(long *)(blockData + 8) == 0) || (currentBlock = *(long *)(blockData + 0x20), currentBlock == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newBlockData;\n      localizedMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(blockData + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  localizedMessage = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",localizedMessage);\n  localizedMessage = 0;\nLAB_0010bf84:\n  returnValueStruct._8_8_ = returnValue;\n  returnValueStruct._0_8_ = localizedMessage;\n  return returnValueStruct;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "close_debug_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "reverse_code_0010c95e",
                "param_1": "functionParams",
                "param_2": "byteArray",
                "param_3": "memoryPtr",
                "bVar1": "currentByte",
                "bVar2": "nextByte",
                "pbVar3": "bytePtr",
                "bVar4": "isSigned",
                "bVar5": "isChar",
                "bVar6": "isVoid",
                "cVar7": "returnValue",
                "uVar8": "parsedValue",
                "pbVar9": "tempBytePtr",
                "lVar10": "itemSize",
                "uVar11": "parsedResult",
                "pcVar12": "charPtr",
                "sVar13": "stringLength",
                "uVar14": "parsedValue64",
                "__ptr": "parsedPtr",
                "lVar15": "result",
                "pcVar19": "typeName",
                "local_49": "isInitialized",
                "local_48": "itemIndex",
                "local_40": "stringBuffer",
                "puVar16": "sizePtr",
                "puVar17": "isInitializedPtr",
                "ppcVar18": "stringPtr"
            },
            "code": "\nundefined8 reverseCode_0010c95e(undefined8 *functionParams,byte **byteArray,long *memoryPtr)\n\n{\n  byte currentByte;\n  byte nextByte;\n  byte *bytePtr;\n  bool isSigned;\n  bool isChar;\n  bool isVoid;\n  char returnValue;\n  uint parsedValue;\n  byte *tempBytePtr;\n  long itemSize;\n  undefined8 parsedResult;\n  char *charPtr;\n  size_t stringLength;\n  ulong parsedValue64;\n  void *parsedPtr;\n  long result;\n  ulong *sizePtr;\n  undefined *isInitializedPtr;\n  char **stringPtr;\n  char *typeName;\n  byte *pnextByte0;\n  undefined isInitialized;\n  ulong itemIndex;\n  char *stringBuffer [2];\n  \n  while( true ) {\n    pnextByte0 = *byteArray;\n    currentByte = *pnextByte0;\n    if ('T' < (char)currentByte) break;\n    if ((char)currentByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(currentByte) {\n    case 0x41:\n      result = 0;\n      bytePtr = pnextByte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byteArray = pnextByte0 + 1;\n      returnValue = reverseCode_0010c95e(functionParams,byteArray,memoryPtr);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (memoryPtr == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_memory_if_not_zero_00113b71(*memoryPtr);\n      *memoryPtr = result;\n      return 1;\n    case 0x46:\n      *byteArray = pnextByte0 + 1;\n      if (memoryPtr == (long *)0x0) {\n        sizePtr = (ulong *)0x0;\n        stringPtr = (char **)0x0;\n      }\n      else {\n        sizePtr = &itemIndex;\n        stringPtr = stringBuffer;\n      }\n      returnValue = extract_and_parse_entries_0010d882(functionParams,byteArray,stringPtr,sizePtr);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (**byteArray == 0x5f) {\n        *byteArray = *byteArray + 1;\n        returnValue = reverseCode_0010c95e(functionParams,byteArray,memoryPtr);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (memoryPtr == (long *)0x0) {\n          return 1;\n        }\n        result = initialize_function_00113ce0(*memoryPtr,stringBuffer[0],itemIndex & 0xff);\n        *memoryPtr = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byteArray = pnextByte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      isInitialized = 0;\n      stringBuffer[0] = (char *)0x0;\n      itemIndex = 0;\n      *byteArray = pnextByte0 + 1;\n      if (((&_sch_istable)[(ulong)pnextByte0[1] * 2] & 4) == 0) {\n        if (pnextByte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        stringPtr = stringBuffer;\n        if (memoryPtr == (long *)0x0) {\n          stringPtr = (char **)0x0;\n        }\n        returnValue = parse_and_extract_items_0010d559(functionParams,byteArray,stringPtr);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        parsedValue = parse_digits_00108e76(byteArray);\n        bytePtr = *byteArray;\n        stringLength = strlen((char *)bytePtr);\n        if (stringLength < parsedValue) goto switchD_0010cdf9_caseD_60;\n        *byteArray = bytePtr + parsedValue;\n        if ((memoryPtr != (long *)0x0) &&\n           (stringBuffer[0] = (char *)find_matching_item_0010afd5(*functionParams,functionParams[1],bytePtr,parsedValue,9),\n           stringBuffer[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextByte = **byteArray;\n      if (currentByte == 0x4d) {\n        if ((nextByte == 0x43) || (nextByte == 0x56)) {\n          *byteArray = *byteArray + 1;\n        }\n        if (**byteArray != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byteArray = *byteArray + 1;\n        if (memoryPtr == (long *)0x0) {\n          isInitializedPtr = (undefined *)0x0;\n          sizePtr = (ulong *)0x0;\n        }\n        else {\n          isInitializedPtr = &isInitialized;\n          sizePtr = &itemIndex;\n        }\n        returnValue = extract_and_parse_entries_0010d882(functionParams,byteArray,sizePtr,isInitializedPtr);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n      }\n      if (**byteArray == 0x5f) {\n        *byteArray = *byteArray + 1;\n        returnValue = reverseCode_0010c95e(functionParams,byteArray,memoryPtr);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (memoryPtr == (long *)0x0) {\n          return 1;\n        }\n        if (currentByte != 0x4d) {\n          result = initialize_memory_and_store_parameters_00113bfa(stringBuffer[0],*memoryPtr);\n          *memoryPtr = result;\n          return 1;\n        }\n        result = initialize_memory_00113b98(*memoryPtr,stringBuffer[0],itemIndex,isInitialized);\n        *memoryPtr = result;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      parsedResult = parse_and_extract_items_0010d559(functionParams,byteArray,memoryPtr);\n      return parsedResult;\n    case 0x52:\n      *byteArray = pnextByte0 + 1;\n      returnValue = reverseCode_0010c95e(functionParams,byteArray,memoryPtr);\n      if (returnValue == '\\0') {\n        return 0;\n      }\n      if (memoryPtr == (long *)0x0) {\n        return 1;\n      }\n      result = initialize_memory_00113cb9(*memoryPtr);\n      *memoryPtr = result;\n      return 1;\n    case 0x54:\n      *byteArray = pnextByte0 + 1;\n      returnValue = extract_and_parse_number_00108ea1(byteArray,&itemIndex);\n      if (returnValue != '\\0') {\n        if ((uint)itemIndex < *(uint *)(functionParams + 5)) {\n          stringBuffer[0] = *(char **)((itemIndex & 0xffffffff) * 0x10 + functionParams[4]);\n          returnValue = reverseCode_0010c95e(functionParams,stringBuffer,memoryPtr);\n          if (returnValue == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (currentByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byteArray = pnextByte0 + 1;\n    returnValue = reverseCode_0010c95e(functionParams,byteArray,memoryPtr);\n    if (returnValue == '\\0') {\n      return 0;\n    }\n    if (memoryPtr == (long *)0x0) {\n      return 1;\n    }\n    result = allocate_memory_if_needed_00113d3a(*memoryPtr);\n    *memoryPtr = result;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isVoid = false;\n  isSigned = false;\n  returnValue = '\\0';\n  isChar = false;\n  do {\n    bytePtr = *byteArray;\n    currentByte = *bytePtr;\n    if (currentByte == 0x55) {\n      returnValue = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)currentByte) {\n      if (currentByte == 0x56) {\n        isVoid = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)currentByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)currentByte < '_') goto LAB_0010cdfb;\n      switch(currentByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (memoryPtr == (long *)0x0) {\nLAB_0010d0aa:\n          *byteArray = bytePtr + 1;\n          return 1;\n        }\n        result = find_named_type_0010914e(*functionParams,&DAT_00120436);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_00112904(6,4);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"unsigned char\";\n        if ((returnValue == '\\0') && (typeName = \"char\", isSigned)) {\n          typeName = \"signed char\";\n        }\n        result = find_named_type_0010914e(*functionParams,typeName);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(1,returnValue);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*functionParams,\"float\");\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_00113df2(4);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"unsigned int\";\n        charPtr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"long unsigned int\";\n        charPtr = \"long int\";\nLAB_0010ced2:\n        if (returnValue == '\\0') {\n          typeName = charPtr;\n        }\n        result = find_named_type_0010914e(*functionParams,typeName);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(4,returnValue);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        typeName = \"long double\";\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        result = find_named_type_0010914e(*functionParams,typeName);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_00113df2(8);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"short unsigned int\";\n        if (returnValue == '\\0') {\n          typeName = \"short int\";\n        }\n        result = find_named_type_0010914e(*functionParams,typeName);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(2,returnValue);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        stringPtr = stringBuffer;\n        if (memoryPtr == (long *)0x0) {\n          stringPtr = (char **)0x0;\n        }\n        returnValue = parse_and_extract_string_0010d21c(functionParams,byteArray,stringPtr);\n        if (returnValue == '\\0') {\n          return 0;\n        }\n        if (memoryPtr == (long *)0x0) {\n          return 1;\n        }\n        stringLength = strlen(stringBuffer[0]);\n        result = find_matching_item_0010afd5(*functionParams,functionParams[1],stringBuffer[0],stringLength & 0xffffffff,9);\n        *memoryPtr = result;\n        free(stringBuffer[0]);\n        result = *memoryPtr;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*functionParams,&DAT_00120495);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_00113e17();\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        result = find_named_type_0010914e(*functionParams,\"__wchar_t\");\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(2,1);\n          *memoryPtr = result;\n          *byteArray = *byteArray + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (memoryPtr == (long *)0x0) goto LAB_0010d0aa;\n        typeName = \"long long unsigned int\";\n        if (returnValue == '\\0') {\n          typeName = \"long long int\";\n        }\n        result = find_named_type_0010914e(*functionParams,typeName);\n        *memoryPtr = result;\n        if (result == 0) {\n          result = initialize_memory_and_set_param_00113dfe(8,returnValue);\n          *memoryPtr = result;\n        }\n      }\n      *byteArray = *byteArray + 1;\n      goto LAB_0010d1de;\n    }\n    if (currentByte == 0x43) {\n      isChar = true;\n      goto LAB_0010cd84;\n    }\n    if (currentByte != 0x53) goto LAB_0010cdc5;\n    isSigned = true;\nLAB_0010cd84:\n    *byteArray = bytePtr + 1;\n  } while( true );\nLAB_0010ca26:\n  tempBytePtr = bytePtr + 1;\n  *byteArray = tempBytePtr;\n  currentByte = *tempBytePtr;\n  if (currentByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (currentByte == 0x5f) {\n    *byteArray = bytePtr + 2;\n    returnValue = reverseCode_0010c95e(functionParams,byteArray,memoryPtr);\n    if (returnValue == '\\0') {\n      return 0;\n    }\n    if (memoryPtr == (long *)0x0) {\n      return 1;\n    }\n    itemSize = find_named_type_0010914e(*functionParams,\"int\");\n    if (itemSize == 0) {\n      itemSize = initialize_memory_and_set_param_00113dfe(4,0);\n    }\n    result = initialize_and_allocate_memory_00113c43(*memoryPtr,itemSize,0,result,0);\n    *memoryPtr = result;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  result = result * 10 + (long)((char)currentByte + -0x30);\n  bytePtr = tempBytePtr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '0') {\n      if (currentByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(pnextByte0);\n      if (memoryPtr == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((currentByte != 0x47) || (*byteArray = bytePtr + 1, ((&_sch_istable)[(ulong)bytePtr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextByte0 = *byteArray;\n  parsedValue = parse_digits_00108e76(byteArray);\n  bytePtr = *byteArray;\n  stringLength = strlen((char *)bytePtr);\n  parsedValue64 = (ulong)parsedValue;\n  if (parsedValue64 <= stringLength) {\n    *byteArray = bytePtr + parsedValue64;\n    if (memoryPtr == (long *)0x0) {\n      return 1;\n    }\n    parsedPtr = (void *)copy_and_null_terminate_00109a0b(bytePtr,parsedValue64);\n    result = find_named_type_0010914e(*functionParams,parsedPtr);\n    *memoryPtr = result;\n    free(parsedPtr);\n    if (*memoryPtr == 0) {\n      result = find_matching_item_0010afd5(*functionParams,functionParams[1],bytePtr,(int)*byteArray - (int)bytePtr,0);\n      *memoryPtr = result;\njoined_r0x0010d1d8:\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isChar) {\n      result = initialize_memory_if_not_zero_00113b71(*memoryPtr);\n      *memoryPtr = result;\n    }\n    if (isVoid) {\n      result = initialize_memory_for_param_00113b4a(*memoryPtr);\n      *memoryPtr = result;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(pnextByte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b98",
                "FUN_0010c95e",
                "strlen",
                "FUN_00113d3a",
                "FUN_0010914e",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_0010d21c",
                "FUN_00109a0b",
                "FUN_00113b71",
                "FUN_0010911f",
                "FUN_00113b4a",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00108e76",
                "FUN_0010d882",
                "free",
                "FUN_0010afd5",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17",
                "FUN_00108ea1",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010c95e",
                "FUN_00113e5e",
                "FUN_0010d21c",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "reverse_code_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = get_modified_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279cb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278b0;\n  free(DAT_001278b0);\n  if (plVar6 == DAT_001278a8) {\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278a8);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278a8 = (long *)xmalloc();\n  DAT_001278b0 = DAT_001278a8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278b0);\n    DAT_001278b0 = (long *)0x0;\n    DAT_001278a8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279c0;\n  if ((DAT_001278ec == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279c0,\n     cVar10 == '\\0')) {\n    DAT_00127a20 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279c0;\n  }\n  for (; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279b0;\n  if (DAT_00127a00 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a00 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279b0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a10 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a10 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a10;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278b0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = decompiled_function_0010554f();\n    return uVar28;\n  }\n  if (DAT_00127980 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)create_initialized_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_entry_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = process_debug_record_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      clear_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              clear_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = validate_and_initialize_memory_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = create_initialized_buffer_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_entry_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = process_debug_record_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            clear_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      clear_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = validate_and_initialize_memory_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = close_debug_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_debug_line_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_check_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127939 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278b0 + param_8;\n        plVar16 = DAT_001278b0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a2c == 2) || (DAT_00127a2c == 7)) {\nLAB_001059fe:\n    if (DAT_00127a2c == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278b0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278a8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279a0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279a8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279a8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_and_copy_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278d0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278d0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278d8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278d0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278d8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127908;\n            if ((DAT_00127988 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127908;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_00127988 == '\\0') {\n              if ((DAT_00127968 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127908 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_00127988 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127908;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127908;\n            if (DAT_00127908 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127908);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a2c == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ca == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a2c == 3) || (DAT_00127a28 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a28 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_00127980;\n              if (1 < DAT_00127a2c - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a2c != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ca == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a20 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_001279f8,match_pattern_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ca != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_001279f0,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a18 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ca == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a08,match_pattern_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = check_section_options_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279d8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127938 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279c8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279a8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279a8;\n        iVar12 = DAT_001279a0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_and_copy_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279a0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_00127980 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = reverse_and_improve_binary_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a20 = 1;\n  }\n  else {\n    if ((DAT_00127a2c - 3U < 4) || ((DAT_00127a28 != 0 || (DAT_00127938 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_001279f8);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a08), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_001279e8), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_001279e0), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279d8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279d0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278d0), lVar27 != 0)) ||\n          (((DAT_00127908 != (char *)0x0 || (DAT_001278b8 != '\\0')) ||\n           ((DAT_00127a19 != '\\0' ||\n            (((DAT_00127980 != '\\0' || (DAT_00127988 != '\\0')) || (DAT_00127968 != '\\0')))))))) ||\n         ((DAT_001278d8 != (char **)0x0 || (DAT_001279c8 != '\\0')))))) || (DAT_001279a0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278a8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_options_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_binary_section_00116110,param_7);\n    for (puVar31 = DAT_001279c0; puVar37 = DAT_001279b8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a00 != '\\0') && (_DAT_00127a24 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a00 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a10 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a10,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127910 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127910 & 0xffffffff);\n        uVar23 = DAT_00127910;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127910;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)parse_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279b0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_0010554f",
                "xmalloc",
                "fopen",
                "bfd_get_full_section_contents",
                "fclose",
                "bfd_map_over_sections",
                "__errno_location",
                "fwrite",
                "bfd_make_section_with_flags",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "FUN_00114190",
                "bfd_set_section_size",
                "bfd_create_gnu_debuglink_section",
                "FUN_00115530",
                "bfd_set_format",
                "FUN_00113fb0",
                "FUN_0010551d",
                "FUN_00115f30",
                "dcgettext",
                "bfd_get_arch",
                "FUN_001163d0",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "free",
                "FUN_00105828"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfoPtr",
                "iVar1": "result",
                "piVar2": "errorPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "timeSpec5",
                "uStack_24": "timeSpec6",
                "uStack_20": "timeSpec7",
                "uStack_1c": "timeSpec8"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfoPtr)\n\n{\n  int result;\n  int *errorPtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 timeSpec5;\n  undefined4 timeSpec6;\n  undefined4 timeSpec7;\n  undefined4 timeSpec8;\n  \n  timeSpec5 = *(undefined4 *)(fileInfoPtr + 0x58);\n  timeSpec6 = *(undefined4 *)(fileInfoPtr + 0x5c);\n  timeSpec7 = *(undefined4 *)(fileInfoPtr + 0x60);\n  timeSpec8 = *(undefined4 *)(fileInfoPtr + 100);\n  timeSpec1 = *(undefined4 *)(fileInfoPtr + 0x48);\n  timeSpec2 = *(undefined4 *)(fileInfoPtr + 0x4c);\n  timeSpec3 = *(undefined4 *)(fileInfoPtr + 0x50);\n  timeSpec4 = *(undefined4 *)(fileInfoPtr + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errorPtr = __errno_location();\n    errorMessage = strerror(*errorPtr);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_001275e0,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_001275e0,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_data_0010e2f0",
                "param_1": "symbolTable",
                "param_2": "undefinedParam",
                "param_3": "intParam",
                "param_4": "inputParam",
                "param_5": "stringParam",
                "lVar1": "temp1",
                "uVar2": "bfdErrorCode",
                "lVar3": "temp2",
                "uVar4": "errorString",
                "uVar5": "gettextResult",
                "sVar6": "stringLength",
                "lVar7": "symbolIndex",
                "local_44": "localVar1",
                "uStack_40": "stackVar1",
                "uStack_3f": "stackVar2",
                "uStack_3e": "stackVar3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessStringData_0010e2f0(long *symbolTable,undefined undefinedParam,int intParam,undefined8 inputParam,char *stringParam)\n\n{\n  long temp1;\n  undefined4 bfdErrorCode;\n  long temp2;\n  undefined8 errorString;\n  undefined8 gettextResult;\n  size_t stringLength;\n  long symbolIndex;\n  undefined4 localVar1;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined2 stackVar3;\n  undefined4 localVar2 [3];\n  \n  if (stringParam == (char *)0x0) {\n    symbolIndex = 0;\n  }\n  else {\n    temp2 = bfd_hash_lookup(symbolTable + 7,stringParam,1,1);\n    if (temp2 == 0) {\n      bfdErrorCode = bfd_get_error();\n      errorString = bfd_errmsg(bfdErrorCode);\n      gettextResult = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(gettextResult,errorString);\n      return 0;\n    }\n    symbolIndex = *(long *)(temp2 + 0x20);\n    if (symbolIndex == -1) {\n      symbolIndex = symbolTable[6];\n      temp1 = symbolTable[5];\n      *(long *)(temp2 + 0x20) = symbolIndex;\n      if (temp1 == 0) {\n        symbolTable[4] = temp2;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = temp2;\n      }\n      symbolTable[5] = temp2;\n      stringLength = strlen(stringParam);\n      symbolTable[6] = symbolIndex + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*symbolTable + 8) + 0x50))(symbolIndex,&localVar1);\n  stackVar2 = 0;\n  stackVar1 = undefinedParam;\n  (**(code **)(*(long *)(*symbolTable + 8) + 0x68))((long)intParam,&stackVar3);\n  (**(code **)(*(long *)(*symbolTable + 8) + 0x50))(inputParam,localVar2);\n  if ((ulong)symbolTable[3] < symbolTable[2] + 0xcU) {\n    symbolTable[3] = symbolTable[3] * 2;\n    symbolIndex = xrealloc(symbolTable[1]);\n    symbolTable[1] = symbolIndex;\n  }\n  symbolIndex = symbolTable[2];\n  temp2 = symbolTable[1];\n  *(ulong *)(temp2 + symbolIndex) = CONCAT26(stackVar3,CONCAT15(stackVar2,CONCAT14(stackVar1,localVar1)));\n  *(undefined4 *)(temp2 + 8 + symbolIndex) = localVar2[0];\n  symbolTable[2] = symbolTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)symbolIndex >> 8),1);\n}\n\n",
            "called": [
                "xrealloc",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_error",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e8a9",
                "FUN_0010e5db",
                "FUN_0010e439",
                "FUN_0010e842",
                "FUN_0010e918",
                "FUN_0010ed2c",
                "FUN_0010ebb0",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010edb4",
                "FUN_0010e6a8",
                "FUN_0010e453",
                "FUN_0010e7c2",
                "FUN_0010eafe"
            ],
            "imported": false,
            "current_name": "process_string_data_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "inputString",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "errMessage",
                "pcVar3": "commaPosition",
                "pcVar4": "nextValue",
                "sVar5": "length",
                "iVar6": "comparison",
                "uVar7": "sectionFlags",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *inputString,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 errMessage;\n  char *commaPosition;\n  char *nextValue;\n  size_t length;\n  int comparison;\n  uint sectionFlags;\n  undefined returnValue [16];\n  \n  sectionFlags = 0;\n  do {\n    commaPosition = strchr(inputString,0x2c);\n    if (commaPosition == (char *)0x0) {\n      length = strlen(inputString);\n      comparison = (int)length;\n      nextValue = (char *)0x0;\n    }\n    else {\n      nextValue = commaPosition + 1;\n      comparison = (int)commaPosition - (int)inputString;\n    }\n    length = (size_t)comparison;\n    result = strncasecmp(\"alloc\",inputString,length);\n    if (result == 0) {\n      sectionFlags = sectionFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",inputString,length);\n      if (result == 0) {\n        sectionFlags = sectionFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",inputString,length);\n        if (result == 0) {\n          sectionFlags = sectionFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",inputString,length);\n          if (result == 0) {\n            sectionFlags = sectionFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",inputString,length);\n            if (result == 0) {\n              sectionFlags = sectionFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",inputString,length);\n              if (result == 0) {\n                sectionFlags = sectionFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",inputString,length);\n                if (result == 0) {\n                  sectionFlags = sectionFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",inputString,length);\n                  if (result == 0) {\n                    sectionFlags = sectionFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",inputString,length);\n                    if (result == 0) {\n                      sectionFlags = sectionFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",inputString,length);\n                      if (result == 0) {\n                        sectionFlags = sectionFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",inputString,length);\n                        if (result == 0) {\n                          sectionFlags = sectionFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",inputString,length);\n                          if (result == 0) {\n                            sectionFlags = sectionFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",inputString,length);\n                            if (result != 0) {\n                              commaPosition = (char *)xmalloc((long)(comparison + 1));\n                              strncpy(commaPosition,inputString,length);\n                              commaPosition[length] = '\\0';\n                              errMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(errMessage,commaPosition);\n                              errMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(errMessage,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            sectionFlags = sectionFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    inputString = nextValue;\n  } while (nextValue != (char *)0x0);\n  returnValue._4_4_ = 0;\n  returnValue._0_4_ = sectionFlags;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_modified_string_001125fa",
                "param_1": "inputParams",
                "__s": "result",
                "ppcVar2": "ptrToChar",
                "sVar3": "length1",
                "sVar4": "length2",
                "uVar1": "totalLength"
            },
            "code": "\nchar * getModifiedString_001125fa(char **inputParams)\n\n{\n  ulong totalLength;\n  char **ptrToChar;\n  size_t length1;\n  size_t length2;\n  char *result;\n  \n  if (inputParams == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptrToChar = (char **)inputParams[0x1d];\n  result = *inputParams;\n  if ((ptrToChar != (char **)0x0) && ((*(byte *)((long)ptrToChar + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*ptrToChar);\n    length2 = strlen(result);\n    totalLength = length1 + 3 + length2;\n    if (DAT_00127a38 < totalLength) {\n      if (DAT_00127a38 != 0) {\n        free(DAT_00127a30);\n      }\n      DAT_00127a38 = (totalLength >> 1) + totalLength;\n      DAT_00127a30 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a30,\"%s(%s)\",*(undefined8 *)inputParams[0x1d],*inputParams);\n    result = DAT_00127a30;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114e50",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "get_modified_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "check_success_00108f05"
            },
            "code": "\nundefined check_success_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "check_success_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_00108863",
                "puVar1": "dataPointer",
                "puVar2": "nextDataPointer"
            },
            "code": "\nvoid clearMemory_00108863(void)\n\n{\n  undefined4 *dataPointer;\n  undefined4 *nextDataPointer;\n  \n  dataPointer = (undefined4 *)&DAT_00127720;\n  do {\n    nextDataPointer = dataPointer + 6;\n    free(*(void **)(dataPointer + 4));\n    *(undefined8 *)(dataPointer + 4) = 0;\n    dataPointer = nextDataPointer;\n  } while (nextDataPointer != &DAT_001278a0);\n  DAT_001278a0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_function_00104020"
            },
            "code": "\nvoid executeIndirectFunction_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "source_debugger_00108f08",
                "param_1": "debugger_handle",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "result",
                "puVar3": "iterator",
                "puVar4": "previous_iterator",
                "lVar5": "loop_counter",
                "puVar6": "list_head",
                "pcVar7": "current_filename",
                "puVar8": "new_node",
                "bVar9": "zero_flag"
            },
            "code": "\n\n\nundefined8 source_debugger_00108f08(long debugger_handle,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *iterator;\n  undefined8 *previous_iterator;\n  long loop_counter;\n  undefined8 *list_head;\n  char *current_filename;\n  undefined8 *new_node;\n  byte zero_flag;\n  \n  zero_flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(debugger_handle + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (iterator = *(undefined8 **)(*(long *)(debugger_handle + 8) + 8); iterator != (undefined8 *)0x0;\n        iterator = (undefined8 *)*iterator) {\n      comparison_result = filename_cmp(iterator[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    iterator = (undefined8 *)xmalloc(0x18);\n    list_head = *(undefined8 **)(debugger_handle + 0x10);\n    new_node = iterator;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)new_node = 0;\n      new_node = (undefined8 *)((long)new_node + (ulong)zero_flag * -8 + 4);\n    }\n    iterator[1] = current_filename;\n    new_node = (undefined8 *)*list_head;\n    while (previous_iterator = new_node, previous_iterator != (undefined8 *)0x0) {\n      list_head = previous_iterator;\n      new_node = (undefined8 *)*previous_iterator;\n    }\n    *list_head = iterator;\nLAB_00108fad:\n    *(undefined8 **)(debugger_handle + 0x10) = iterator;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "source_debugger_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_dir_and_free_memory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirAndFreeMemory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_dir_and_free_memory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_data_00114190",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "options",
                "uVar1": "temp",
                "plVar2": "ptr",
                "pplVar3": "result",
                "iVar4": "index",
                "uVar5": "errorMessage",
                "pplVar6": "currentNode",
                "pplVar7": "prevNode",
                "pplVar8": "nextNode"
            },
            "code": "\nlong ** processData_00114190(long *data,char flag,uint options)\n\n{\n  uint temp;\n  long *ptr;\n  long **result;\n  int index;\n  undefined8 errorMessage;\n  long **currentNode;\n  long **prevNode;\n  long **nextNode;\n  \n  prevNode = DAT_001278e0;\n  if (DAT_001278e0 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((options & *(uint *)((long)DAT_001278e0 + 0x14)) == 0) {\nLAB_001141e5:\n      currentNode = (long **)*prevNode;\n      if (currentNode == (long **)0x0) {\n        return (long **)0x0;\n      }\n      prevNode = (long **)0x0;\n    }\n    else {\n      ptr = DAT_001278e0[1];\n      if (*(char *)ptr == '!') {\n        index = fnmatch((char *)((long)ptr + 1),(char *)data,0);\n        currentNode = prevNode;\n        if (index == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      index = fnmatch((char *)ptr,(char *)data,0);\n      if (index != 0) goto LAB_001141e5;\n      currentNode = (long **)*prevNode;\n      if (currentNode == (long **)0x0) goto LAB_00114245;\n    }\n    if ((options & *(uint *)((long)currentNode + 0x14)) != 0) {\n      ptr = currentNode[1];\n      if (*(char *)ptr == '!') {\n        index = fnmatch((char *)((long)ptr + 1),(char *)data,0);\n        if (index == 0) {\nLAB_0011438e:\n          *(undefined *)(currentNode + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        index = fnmatch((char *)ptr,(char *)data,0);\n        if ((prevNode == (long **)0x0) && (index == 0)) {\n          nextNode = (long **)*currentNode;\n          prevNode = currentNode;\n          if (nextNode == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextNode = (long **)*currentNode;\n    currentNode = prevNode;\n    if (nextNode != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    index = strcmp((char *)DAT_001278e0[1],(char *)data);\n    if (index == 0) {\nLAB_001143cd:\n      temp = *(uint *)((long)prevNode + 0x14);\n      if ((((temp & 1) != 0) && ((options & 2) != 0)) ||\n         (((options & 1) != 0 && ((temp & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,data);\n      }\n      if ((((temp & 8) != 0) && ((options & 0x10) != 0)) || ((options & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(errorMessage,data);\n      }\n      if ((((temp & 0x20) == 0) || ((options & 0x40) == 0)) && ((options & 0x60) != 0x60)) {\n        *(uint *)((long)prevNode + 0x14) = temp | options;\n        return prevNode;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,data);\n    }\n    prevNode = (long **)*prevNode;\n    if (prevNode == (long **)0x0) goto LAB_001142a9;\n    index = strcmp((char *)prevNode[1],(char *)data);\n    if (index == 0) goto LAB_001143cd;\n    nextNode = (long **)*prevNode;\n    currentNode = (long **)0x0;\n    if (nextNode == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      prevNode = currentNode;\n      if (flag == '\\0') {\n        while (currentNode = nextNode, result = prevNode, nextNode = currentNode,\n              (options & *(uint *)((long)currentNode + 0x14)) != 0) {\n          ptr = currentNode[1];\n          if (*(char *)ptr == '!') {\n            index = fnmatch((char *)((long)ptr + 1),(char *)data,0);\n            if (index == 0) goto LAB_0011438e;\n            nextNode = (long **)*currentNode;\n            if ((long **)*currentNode == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            index = fnmatch((char *)ptr,(char *)data,0);\n            if ((prevNode == (long **)0x0) && (index == 0)) {\n              prevNode = currentNode;\n              nextNode = (long **)*currentNode;\n              if ((long **)*currentNode == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextNode = (long **)*currentNode;\n              if ((long **)*currentNode == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        index = strcmp((char *)nextNode[1],(char *)data);\n        result = currentNode;\n        prevNode = nextNode;\n        if (index == 0) goto LAB_001143cd;\n      }\n      currentNode = result;\n      nextNode = (long **)*nextNode;\n      prevNode = currentNode;\n    } while (nextNode != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      currentNode = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentNode + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentNode + 2) = 0;\n      *(uint *)((long)currentNode + 0x14) = options;\n      currentNode[5] = (long *)0x0;\n      prevNode = currentNode;\n      *currentNode = (long *)DAT_001278e0;\n      DAT_001278e0 = prevNode;\n      currentNode[1] = data;\n      return currentNode;\n    }\n  }\nLAB_00114212:\n  if (prevNode == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(prevNode + 2) = 1;\n  return prevNode;\n}\n\n",
            "called": [
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115530",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00114c20",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_data_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "parse_build_attribute_notes_00116490",
                "param_1": "param1",
                "param_2": "noteSize",
                "param_3": "noteContent",
                "param_4": "numNotes",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "bVar4": "flag",
                "puVar5": "ptrVar1",
                "iVar6": "index",
                "lVar7": "tempVar4",
                "uVar8": "tempVar5",
                "in_RAX": "noteType",
                "uVar9": "tempVar6",
                "uVar10": "tempVar7",
                "uVar11": "tempVar8",
                "uVar12": "tempVar9",
                "__ptr": "dynamicMemory",
                "uVar13": "tempVar10",
                "unaff_RBX": "remainingNotesSize",
                "unaff_RBP": "param2",
                "puVar14": "ptrVar2",
                "puVar15": "ptrVar3",
                "cVar16": "charVar",
                "puVar17": "ptrVar4",
                "puVar18": "ptrVar5",
                "in_R11": "noteNamePtr",
                "unaff_R12": "noteMetadata",
                "puVar19": "ptrVar6",
                "unaff_R13": "lastNoteSize",
                "__nmemb": "numElements",
                "unaff_R14": "functionPointers",
                "puVar20": "ptrVar7",
                "bVar21": "byteVar",
                "iVar22": "loopVar",
                "unaff_retaddr": "returnAddress",
                "param_7": "result",
                "param_8": "flag1",
                "param_9": "param3",
                "in_stack_00000020": "memorySize",
                "in_stack_00000028": "noteList",
                "in_stack_00000030": "tempPtr",
                "in_stack_00000038": "flag2",
                "in_stack_00000040": "flag3",
                "in_stack_00000048": "errorMessages"
            },
            "code": "\nulong parseBuildAttributeNotes_00116490(undefined8 param1,ulong noteSize,ulong noteContent,long numNotes)\n\n{\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  ulong tempVar3;\n  bool flag;\n  ulong *ptrVar1;\n  int index;\n  long tempVar4;\n  undefined8 tempVar5;\n  ulong noteType;\n  ulong tempVar6;\n  ulong tempVar7;\n  ulong tempVar8;\n  ulong tempVar9;\n  undefined *dynamicMemory;\n  ulong tempVar10;\n  ulong remainingNotesSize;\n  ulong param2;\n  ulong *ptrVar2;\n  undefined *ptrVar3;\n  char charVar;\n  undefined *ptrVar4;\n  undefined *ptrVar5;\n  ulong noteNamePtr;\n  ulong *noteMetadata;\n  ulong *ptrVar6;\n  ulong lastNoteSize;\n  size_t numElements;\n  undefined8 *functionPointers;\n  ulong *ptrVar7;\n  byte byteVar;\n  int loopVar;\n  ulong returnAddress;\n  ulong result;\n  uint flag1;\n  ulong param3;\n  ulong memorySize;\n  ulong *noteList;\n  undefined *tempPtr;\n  uint flag2;\n  uint flag3;\n  undefined8 *errorMessages;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  tempVar4 = numNotes;\n  tempVar7 = param2;\n  tempVar10 = lastNoteSize;\n  if (noteType == 0) {\n    if (noteSize == 0x100) {\n      noteMetadata[7] = returnAddress;\n      tempVar8 = returnAddress;\nLAB_001164af:\n      tempVar6 = lastNoteSize;\n      tempVar10 = lastNoteSize;\n      returnAddress = tempVar8;\n    }\n    else {\n      noteMetadata[7] = param3;\nLAB_0011669e:\n      tempVar7 = param2;\n      tempVar6 = param2;\n    }\nLAB_001164bb:\n    noteMetadata[8] = tempVar6;\n    if (*(char *)((noteMetadata[3] - 1) + noteContent) != '\\0') {\n      tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar6 = noteMetadata + 9;\n    if (0xb < remainingNotesSize) {\n      tempVar6 = (**(code **)(functionPointers[1] + 0x40))(tempVar4);\n      *ptrVar6 = tempVar6;\n      tempVar6 = (**(code **)(functionPointers[1] + 0x40))(tempVar4 + 4);\n      noteMetadata[10] = tempVar6;\n      noteSize = (**(code **)(functionPointers[1] + 0x40))(tempVar4 + 8);\n      noteContent = *ptrVar6;\n      noteMetadata[0xb] = noteSize;\n      noteType = noteMetadata[10];\n      tempVar6 = noteContent + 3 & 0xfffffffffffffffc;\n      noteMetadata[0xf] = tempVar6;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteSize - 0x100) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      tempVar8 = tempVar6 + noteType + 0xc;\n      if (remainingNotesSize < tempVar8) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteContent < 2) {\n        tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      noteMetadata[0xc] = tempVar4 + 0xc;\n      noteNamePtr = tempVar4 + 0xc + tempVar6;\n      noteMetadata[0xd] = noteNamePtr;\n      remainingNotesSize = remainingNotesSize + (-0xc - (tempVar6 + noteType));\n      numNotes = tempVar4 + tempVar8;\n      param2 = tempVar7;\n      noteMetadata = ptrVar6;\n      lastNoteSize = tempVar10;\n      if (noteContent != 2) {\n        if (*(char *)(tempVar4 + 0xc) == '$') {\n          if ((*(char *)(tempVar4 + 0xd) == '\\x01') && (*(char *)(tempVar4 + 0xe) == '1')) {\n            tempVar7 = parseBuildAttributeNotes_00116490();\n            return tempVar7;\n          }\n        }\n        else if ((((4 < noteContent) && (*(char *)(tempVar4 + 0xc) == 'G')) &&\n                 (*(char *)(tempVar4 + 0xd) == 'A')) &&\n                ((*(char *)(tempVar4 + 0xe) == '$' && (*(char *)(tempVar4 + 0xf) == '\\x01')))) {\n          if (*(char *)(tempVar4 + 0x10) == '2') {\n            tempVar7 = parseBuildAttributeNotes_00116490();\n            return tempVar7;\n          }\n          if (*(char *)(tempVar4 + 0x10) == '3') {\n            tempVar7 = parseBuildAttributeNotes_00116490();\n            return tempVar7;\n          }\n          tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remainingNotesSize != 0) {\n      tempVar4 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag2 | flag3 | flag1) == 0) {\n      tempVar1 = *functionPointers;\n      tempVar2 = *errorMessages;\n      tempVar5 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(tempVar5,tempVar1,tempVar2);\nLAB_0011671b:\n      numElements = ((long)ptrVar6 - (long)noteList >> 3) * -0x71c71c71c71c71c7;\n      qsort(noteList,numElements,0x48,compare_memory_0011a1b0);\n      for (ptrVar2 = noteList; ptrVar2 < ptrVar6; ptrVar2 = ptrVar2 + 9) {\n        tempVar7 = ptrVar2[2];\n        if (tempVar7 != 0) {\n          tempVar10 = ptrVar2[7];\n          tempVar6 = ptrVar2[8];\n          ptrVar7 = ptrVar2;\n          loopVar = 0;\n          if (tempVar10 == tempVar6) {\n            ptrVar2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptrVar1 = ptrVar7;\n                ptrVar7 = ptrVar1 + -9;\n                if (ptrVar7 < noteList) goto LAB_001167f5;\n                tempVar8 = ptrVar1[-7];\n              } while (tempVar8 == 0);\n              if ((*ptrVar7 != *ptrVar2) ||\n                 (index = memcmp((void *)ptrVar1[-6],(void *)ptrVar2[3],*ptrVar2), index != 0))\n              break;\n              tempVar3 = ptrVar1[-2];\n              tempVar9 = ptrVar1[-1];\n              if (tempVar10 == tempVar3) {\n                if (tempVar6 == tempVar9) {\n                  ptrVar2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (tempVar6 <= tempVar9) {\n                  ptrVar2[2] = 0;\n                  break;\n                }\n                if (tempVar9 < tempVar10) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < tempVar9) ||\n                     (tempVar10 <= (tempVar9 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((tempVar7 == 0x101) == (tempVar8 == 0x101)) {\n                  if (tempVar9 <= tempVar6) {\n                    tempVar9 = tempVar6;\n                  }\n                  if (tempVar3 < tempVar10) {\n                    tempVar10 = tempVar3;\n                  }\n                  ptrVar1[-1] = tempVar9;\n                  ptrVar1[-2] = tempVar10;\n                  ptrVar2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (tempVar3 <= tempVar10) goto LAB_001167a6;\n                if (tempVar9 < tempVar10) goto LAB_0010852c;\n                if (tempVar6 < tempVar10) {\n                  if ((0xfffffffffffffff0 < tempVar6) || (tempVar3 <= (tempVar6 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (tempVar6 != tempVar9) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              flag = loopVar < 0x11;\n              loopVar = loopVar + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(noteList,numElements,0x48,compare_records_0011a250);\n      dynamicMemory = (undefined *)xmalloc(memorySize * 2);\n      result = 0;\n      param3 = 0;\n      ptrVar5 = dynamicMemory;\n      for (ptrVar2 = noteList; ptrVar2 < ptrVar6; ptrVar2 = ptrVar2 + 9) {\n        if (ptrVar2[2] != 0) {\n          ptrVar4 = ptrVar5 + 4;\n          ptrVar3 = ptrVar5 + 0xc;\n          if ((ptrVar2[7] == param3) && (ptrVar2[8] == result)) {\n            (**(code **)(functionPointers[1] + 0x50))(*ptrVar2,ptrVar5);\n            (**(code **)(functionPointers[1] + 0x50))(0,ptrVar4);\n            (**(code **)(functionPointers[1] + 0x50))(ptrVar2[2],ptrVar5 + 8);\n            tempVar10 = ptrVar2[6];\n            tempVar7 = *ptrVar2;\n            ptrVar5 = (undefined *)ptrVar2[3];\n            ptrVar4 = ptrVar3;\n            for (tempVar6 = tempVar7; tempVar6 != 0; tempVar6 = tempVar6 - 1) {\n              *ptrVar4 = *ptrVar5;\n              ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n              ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n            }\n            if (tempVar7 < tempVar10) {\n              for (tempVar4 = tempVar10 - tempVar7; tempVar4 != 0; tempVar4 = tempVar4 + -1) {\n                *ptrVar4 = 0;\n                ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            ptrVar5 = ptrVar3 + tempVar10;\n          }\n          else {\n            (**(code **)(functionPointers[1] + 0x50))();\n            if (*(int *)(functionPointers[1] + 8) == 5) {\n              charVar = (*(char *)(functionPointers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(functionPointers[1] + 0x50))(charVar,ptrVar4);\n            (**(code **)(functionPointers[1] + 0x50))(ptrVar2[2],ptrVar5 + 8);\n            tempVar7 = *ptrVar2;\n            ptrVar5 = (undefined *)ptrVar2[3];\n            ptrVar4 = ptrVar3;\n            for (tempVar10 = tempVar7; tempVar10 != 0; tempVar10 = tempVar10 - 1) {\n              *ptrVar4 = *ptrVar5;\n              ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n              ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n            }\n            tempVar10 = ptrVar2[6];\n            if (tempVar7 < tempVar10) {\n              for (tempVar4 = tempVar10 - tempVar7; tempVar4 != 0; tempVar4 = tempVar4 + -1) {\n                *ptrVar4 = 0;\n                ptrVar4 = ptrVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            tempVar4 = functionPointers[1];\n            ptrVar3 = ptrVar3 + tempVar10;\n            ptrVar5 = ptrVar3 + 8;\n            if ((*(int *)(tempVar4 + 8) == 5) && (*(char *)(functionPointers[0x22] + 4) == '\\x02')) {\n              (**(code **)(tempVar4 + 0x38))(ptrVar2[7],ptrVar3);\n              (**(code **)(functionPointers[1] + 0x38))(ptrVar2[8],ptrVar5);\n              ptrVar5 = ptrVar3 + 0x10;\n            }\n            else {\n              (**(code **)(tempVar4 + 0x50))(ptrVar2[7],ptrVar3);\n              (**(code **)(functionPointers[1] + 0x50))(ptrVar2[8],ptrVar3 + 4);\n            }\n            param3 = ptrVar2[7];\n            result = ptrVar2[8];\n          }\n        }\n      }\n      tempVar10 = (long)ptrVar5 - (long)dynamicMemory;\n      tempVar7 = tempVar10;\n      ptrVar5 = dynamicMemory;\n      if (tempVar10 < memorySize) {\n        for (; memorySize = tempVar10, tempVar7 != 0; tempVar7 = tempVar7 - 1) {\n          *tempPtr = *ptrVar5;\n          ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n          tempPtr = tempPtr + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(dynamicMemory);\nLAB_001166f8:\n      free(noteList);\n      return memorySize;\n    }\n    if (((flag3 | flag1) == 0) || (flag2 == 0)) {\n      if (flag3 == 0) {\n        if (flag1 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (flag1 == 0) goto LAB_001166f8;\n    }\n    tempVar4 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      tempVar8 = (**(code **)(functionPointers[1] + 0x28))(noteNamePtr);\n      tempVar6 = (**(code **)(functionPointers[1] + 0x28))(noteMetadata[4] + 8);\n      if (tempVar6 < tempVar8) {\n        tempVar8 = tempVar6;\n      }\nLAB_00116631:\n      if (noteMetadata[2] == 0x100) {\n        if (tempVar8 == 0) {\n          tempVar8 = returnAddress;\n        }\n        noteContent = *noteMetadata;\n        noteMetadata[7] = tempVar8;\n        tempVar10 = tempVar6;\n        returnAddress = tempVar8;\n        if (tempVar6 == 0) goto LAB_001164af;\n      }\n      else {\n        if (tempVar8 == 0) {\n          tempVar8 = param3;\n        }\n        noteContent = *noteMetadata;\n        noteMetadata[7] = tempVar8;\n        tempVar7 = tempVar6;\n        param3 = tempVar8;\n        if (tempVar6 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        tempVar8 = (**(code **)(functionPointers[1] + 0x40))(noteNamePtr);\n        tempVar6 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        tempVar7 = parse_build_attribute_notes_001086af();\n        return tempVar7;\n      }\n    }\n    tempVar4 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (tempVar4 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,functionPointers,errorMessages,tempVar4);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "parse_build_attribute_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a20 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "currentTarget",
                "pcVar2": "targetString",
                "__ptr": "targetList",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *file)\n\n{\n  long currentTarget;\n  char *targetString;\n  long *targetList;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    targetString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,targetString);\n  }\n  else {\n    targetString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,targetString,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTargetPtr = targetList;\n  while( true ) {\n    currentTarget = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fprintf",
                "free",
                "dcgettext",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_check_0010be1a",
                "param_1": "function_data",
                "param_2": "new_function",
                "param_3": "unused_param",
                "param_4": "status_code",
                "lVar1": "block_data",
                "uVar2": "error_message",
                "pcVar3": "error_string",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_check_0010be1a(long function_data,undefined8 new_function,undefined8 unused_param,undefined8 status_code)\n\n{\n  long block_data;\n  undefined8 error_message;\n  char *error_string;\n  undefined result [16];\n  \n  if (((*(long *)(function_data + 8) == 0) || (block_data = *(long *)(function_data + 0x20), block_data == 0)) ||\n     (*(long *)(function_data + 0x18) == 0)) {\n    error_string = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(block_data + 8) == 0) {\n      *(undefined8 *)(block_data + 0x20) = new_function;\n      error_message = CONCAT71((int7)((ulong)block_data >> 8),1);\n      *(undefined (*) [16])(function_data + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_string = \"debug_end_function: some blocks were not closed\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010be86:\n  result._8_8_ = status_code;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "debug_end_function_check_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116030",
                "FUN_00116b90",
                "FUN_00119dd0",
                "FUN_00115dc0",
                "FUN_001083b7"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_00113da9",
                "param_1": "byte_value",
                "param_2": "unused_param",
                "param_3": "data_ptr",
                "param_4": "memory_ptr",
                "puVar1": "memory_block",
                "lVar2": "loop_counter",
                "puVar3": "current_ptr",
                "bVar4": "offset",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initialize_memory_00113da9(byte byte_value,undefined8 unused_param,undefined8 data_ptr,undefined8 memory_ptr)\n\n{\n  undefined8 *memory_block;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte offset;\n  undefined result [16];\n  \n  offset = 0;\n  result._0_8_ = initialize_memory_00113da9_00112904(8 - (uint)byte_value);\n  if (result._0_8_ != 0) {\n    memory_block = (undefined8 *)xmalloc(0x28);\n    current_ptr = memory_block + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)offset * -8 + 4);\n    }\n    *memory_block = data_ptr;\n    *(undefined8 **)(result._0_8_ + 0x10) = memory_block;\n  }\n  result._8_8_ = memory_ptr;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_value2",
                "param_1[2]": "record1_value2",
                "param_2[2]": "record2_value2",
                "param_2[7]": "record2_value7",
                "param_1[7]": "record1_value7",
                "param_2[8]": "record2_value8",
                "param_1[8]": "record1_value8",
                "param_1[3]": "record1_value3",
                "param_2[3]": "record2_value3"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_value2;\n  \n  record1_value2 = record1_value2;\n  if (record1_value2 == record2_value2) {\n    if (record2_value7 <= record1_value7) {\n      if (record1_value7 <= record2_value7) {\n        if (record2_value8 < record1_value8) {\n          return -1;\n        }\n        if (record2_value8 <= record1_value8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1_value3 + 3) != *(char *)(record2_value3 + 3)) {\n              return (int)*(char *)(record1_value3 + 3) - (int)*(char *)(record2_value3 + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_value2 == 0) || ((record1_value2 != 0x100 && (record2_value2 != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "initialize_data_0010a69a",
                "param_1": "array_ptr",
                "param_2": "struct_ptr",
                "param_3": "is_resizable",
                "param_4": "bool_condition",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "resized_array",
                "sVar3": "string_length",
                "uVar4": "heap_memory",
                "uVar5": "is_initialized",
                "local_60": "string_array"
            },
            "code": "\nundefined4 initialize_data_0010a69a(long array_ptr,undefined8 struct_ptr,int is_resizable,char bool_condition,uint value)\n\n{\n  undefined4 result;\n  long resized_array;\n  size_t string_length;\n  undefined8 heap_memory;\n  undefined is_initialized;\n  char string_array [48];\n  \n  if (is_resizable == 0) {\n    string_array[0] = '\\0';\n    is_initialized = 0;\n    resized_array = 0;\n  }\n  else {\n    resized_array = resize_and_initialize_array_00109c2e();\n    if (resized_array < 0) {\n      return 0;\n    }\n    is_initialized = 1;\n    sprintf(string_array,\"%ld=\",resized_array);\n  }\n  string_length = strlen(string_array);\n  sprintf(string_array + string_length,\"%c%u\",(ulong)((-(uint)(bool_condition == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_0010a69a_structure_00109b52(array_ptr,string_array,resized_array,is_initialized,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  resized_array = *(long *)(array_ptr + 0x60);\n  heap_memory = xmalloc(1);\n  *(undefined8 *)(resized_array + 0x20) = heap_memory;\n  **(undefined **)(*(long *)(array_ptr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "strlen",
                "xmalloc",
                "sprintf",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_options_00115b70",
                "param_1": "section_name",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "section_option",
                "lVar4": "result1",
                "lVar5": "result2",
                "uVar6": "error_message",
                "plVar7": "section_list"
            },
            "code": "\nundefined8 check_section_options_00115b70(char **section_name)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_option;\n  long result1;\n  long result2;\n  undefined8 error_message;\n  long *section_list;\n  \n  result1 = process_data_00114190(*section_name,0,4);\n  if (result1 == 0) {\n    if ((DAT_001278b8 != '\\0') || (DAT_00127a19 != '\\0')) {\n      result1 = process_data_00114190(*section_name,0,1);\n      result2 = process_data_00114190(*section_name,0,2);\n      if (result1 != 0) {\n        if (result2 != 0) {\n          current_section = *section_name;\n          error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(error_message,current_section);\n        }\n        if (result1 != 0) {\n          if (DAT_001279b8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_name;\n          section_list = DAT_001279b8;\n          do {\n            section_option = strcmp(current_section,(char *)section_list[1]);\n            if (section_option == 0) {\n              error_message = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(error_message,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a19 != '\\0') && (result2 == 0)) {\n        return 1;\n      }\n    }\n    section_option = DAT_00127a2c;\n    if ((*(byte *)((long)section_name + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a2c - 2U < 2) || (DAT_00127a2c == 7)) || (DAT_00127a28 == 2)) ||\n         (DAT_00127980 != '\\0')) {\n        current_section = *section_name;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_option = strcmp(current_section,\".reloc\");\n          if (section_option != 0) {\n            return 1;\n          }\n          error_message = check_and_calculate_0010829e();\n          return error_message;\n        }\n      }\n      if (section_option == 5) {\n        error_message = check_string_length_00113ede(section_name);\n        return error_message;\n      }\n      if (section_option == 4) {\n        return 0;\n      }\n    }\n    if (section_option == 6) {\n      error_message = calculate_flipped_value_001082b3();\n      return error_message;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00119dd0",
                "dcgettext",
                "FUN_0010829e",
                "FUN_00114190",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "perform_relocation_00116030",
                "param_1": "paramPointer",
                "param_2": "paramValue",
                "plVar1": "pointerValue",
                "lVar2": "longValue",
                "lVar3": "longValue2",
                "lVar4": "longValue3",
                "iVar5": "errorCode",
                "in_RAX": "returnValue",
                "lVar6": "upperBound",
                "__ptr": "relocPtr",
                "lVar7": "canonicalizeResult",
                "lVar8": "loopIndex",
                "uStack_28": "stackVariable",
                "_fwrite": "fwriteValue",
                "free": "freeFunction",
                "xmalloc": "xmallocFunction",
                "xexit": "xexitFunction",
                "bfd_get_reloc_upper_bound": "getRelocUpperBound",
                "bfd_get_error": "getError",
                "print_error_message_0011a110": "printErrorMessage"
            },
            "code": "\n\n\nundefined8 performRelocation_00116030(undefined8 *paramPointer,long paramValue)\n\n{\n  long *pointerValue;\n  long longValue;\n  long longValue2;\n  long longValue3;\n  int errorCode;\n  undefined8 returnValue;\n  long upperBound;\n  void *relocPtr;\n  long canonicalizeResult;\n  undefined8 extraout_RAX;\n  long loopIndex;\n  undefined8 stackVariable;\n  \n  if (*(long *)(paramValue + 0x60) == 0) {\n    return returnValue;\n  }\n  upperBound = bfd_get_reloc_upper_bound();\n  if (upperBound < 0) {\n    if ((upperBound != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n      printErrorMessage(*paramPointer);\n                    \n      xexitFunction(1);\n    }\n  }\n  else if (upperBound != 0) {\n    relocPtr = (void *)xmallocFunction();\n    canonicalizeResult = bfd_canonicalize_reloc(paramPointer,paramValue,relocPtr);\n    longValue3 = _DAT_00128680;\n    longValue2 = _DAT_00128568;\n    upperBound = fwriteValue;\n    if (canonicalizeResult < 0) {\n      printErrorMessage(*paramPointer);\n                    \n      xexitFunction(1);\n    }\n    if (canonicalizeResult != 0) {\n      loopIndex = 0;\n      do {\n        pointerValue = **(long ***)((long)relocPtr + loopIndex * 8);\n        if ((((pointerValue != (long *)0x0) && (longValue = *pointerValue, longValue != 0)) && (longValue != upperBound)) &&\n           ((longValue != longValue3 && (longValue != longValue2)))) {\n          *(uint *)(longValue + 0x18) = *(uint *)(longValue + 0x18) | 0x20;\n        }\n        loopIndex = loopIndex + 1;\n      } while (canonicalizeResult != loopIndex);\n    }\n    freeFunction(relocPtr);\n    return extraout_RAX;\n  }\n  return stackVariable;\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_canonicalize_reloc",
                "fwrite",
                "free",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "FUN_001083b7",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "perform_relocation_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "string_pointer",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **string_pointer)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (string_pointer == (char **)0x0) {\n    return 0;\n  }\n  string = *string_pointer;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      comparison_result = compare_strings_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "validate_and_initialize_memory_0010c892",
                "param_1": "arg1",
                "param_2": "arg2",
                "cVar1": "cleanup",
                "lVar2": "memory",
                "lVar3": "tag_type",
                "uVar4": "result",
                "puVar5": "pointer",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 validate_and_initialize_memory_0010c892(undefined8 arg1,long arg2)\n\n{\n  char cleanup;\n  long memory;\n  long tag_type;\n  undefined8 result;\n  undefined8 *pointer;\n  int kind;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (pointer = *(undefined8 **)(arg2 + 0x1a0); pointer != (undefined8 *)0x0;\n        pointer = (undefined8 *)*pointer) {\n      kind = *(int *)(pointer + 2);\n      tag_type = pointer[1];\n      if (kind != 0) {\n        if (tag_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        pointer[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tag_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      memory = initialize_memory_00112904(kind,0);\n      if (memory == 0) goto LAB_0010c910;\n      tag_type = validate_debug_tag_type_0010c6be(arg1,tag_type,memory);\n      pointer[3] = tag_type;\n      if (tag_type == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    cleanup = cleanup_records_0010c1c6();\n    if (cleanup != '\\0') {\n      cleanup = debug_end_function_check_0010be1a(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (cleanup != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_0010c6be",
                "dcgettext",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "validate_and_initialize_memory_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_memory_00112904",
                "param_1": "source",
                "param_2": "destination",
                "puVar1": "ptrMemory",
                "xmalloc": "allocateMemory",
                "ZEXT816": "zeroExtend"
            },
            "code": "\nvoid initializeMemory_00112904(undefined4 source,undefined4 destination)\n\n{\n  undefined4 *ptrMemory;\n  \n  ptrMemory = (undefined4 *)xmalloc(0x18);\n  *ptrMemory = source;\n  ptrMemory[1] = destination;\n  *(undefined (*) [16])(ptrMemory + 2) = zeroExtend(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c2d2",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00113d3a",
                "FUN_00113c43",
                "FUN_00113ce0",
                "FUN_00113e23",
                "FUN_00113b71",
                "FUN_00113b4a",
                "FUN_00113bfa",
                "FUN_00113d6e",
                "FUN_00113da9",
                "FUN_0010c218",
                "FUN_0010ee3f",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_00113dfe",
                "FUN_00113cb9",
                "FUN_00113e17"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00108200",
                "FUN_00114460",
                "FUN_0010543c",
                "FUN_00104ea2",
                "FUN_00116b90",
                "FUN_00115a90",
                "FUN_00114690",
                "FUN_00109a32",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010c7a0",
                "FUN_0010922b",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010914e",
                "FUN_0011173a",
                "FUN_0010d559",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00108898",
                "FUN_0010c6be",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00115f50",
                "FUN_00115b70",
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionChain",
                "uVar5": "loopCount"
            },
            "code": "\nvoid executeFunctionChain_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionChain;\n  uint loopCount;\n  \n  functionChain = (long *)PTR_DAT_001264c0;\n  if (PTR_DAT_001264c0 != (undefined *)0x0) {\n    do {\n      loopCount = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)loopCount) {\n        index = (long)(int)loopCount;\n        loopCount = loopCount & 7;\n        (*(code *)functionChain[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (loopCount != 0) {\n            if (loopCount != 1) {\n              if (loopCount != 2) {\n                if (loopCount != 3) {\n                  if (loopCount != 4) {\n                    if (loopCount != 5) {\n                      if (loopCount != 6) {\n                        (*(code *)functionChain[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionChain[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionChain[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionChain[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionChain[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionChain[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionChain[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionChain[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionChain[tempIndex + 1])();\n            (*(code *)functionChain[tempIndex])();\n            (*(code *)functionChain[index])();\n            (*(code *)functionChain[tempIndex + -2])();\n            (*(code *)functionChain[tempIndex + -3])();\n            (*(code *)functionChain[tempIndex + -4])();\n            (*(code *)functionChain[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_function_chain_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_process_data_0010e842",
                "param_1": "data",
                "param_2": "message",
                "param_3": "counter",
                "param_4": "value",
                "__s": "formattedString",
                "sVar1": "messageLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] formatAndProcessData_0010e842(undefined8 data,char *message,undefined8 counter,undefined8 value)\n\n{\n  size_t messageLength;\n  char *formattedString;\n  undefined result [16];\n  \n  messageLength = strlen(message);\n  formattedString = (char *)xmalloc(messageLength + 0x14);\n  sprintf(formattedString,\"%s:c=i%ld\",message,counter);\n  result._0_4_ = process_string_data_0010e2f0(data,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_process_data_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_0010554f",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_memory_00113cb9",
                "param_1": "input_value",
                "lVar1": "memory_address"
            },
            "code": "\nlong initialize_memory_00113cb9(long input_value)\n\n{\n  long memory_address;\n  \n  if (input_value != 0) {\n    memory_address = initialize_memory_00113cb9_00112904(0xe,0);\n    if (memory_address == 0) {\n      memory_address = 0;\n    }\n    else {\n      *(long *)(memory_address + 0x10) = input_value;\n    }\n    return memory_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "dataPointer",
                "param_2": "inputString",
                "param_3": "flag",
                "__s": "extractedString",
                "sVar2": "inputStringLength",
                "sVar3": "extractedStringLength",
                "__s_00": "combinedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processData_0010eafe(long dataPointer,char *inputString,char flag)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t inputStringLength;\n  size_t extractedStringLength;\n  char *combinedString;\n  \n  if ((*(int *)(dataPointer + 0x1f8) == 0) && (*(long *)(dataPointer + 0x1e8) == -1)) {\n    extractedString = (char *)extract_and_free_ptr_00109b2f();\n    inputStringLength = strlen(inputString);\n    extractedStringLength = strlen(extractedString);\n    combinedString = (char *)xmalloc(inputStringLength + 3 + extractedStringLength);\n    sprintf(combinedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extractedString);\n    *(undefined8 *)(dataPointer + 0x1e8) = *(undefined8 *)(dataPointer + 0x10);\n    result = process_string_data_0010e2f0(dataPointer,0x24,0,0,combinedString);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_memory_00113df2",
                "param_1": "param",
                "initialize_memory_00112904": "initializeMemoryHelper"
            },
            "code": "\nvoid initializeMemory_00113df2(undefined4 param)\n\n{\n  initializeMemory_00113df2Helper(4,param);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "extract_and_initialize_data_structure_0010a377",
                "param_1": "input_ptr",
                "cVar1": "check_value",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar3": "length_1",
                "sVar4": "length_2",
                "__s_01": "combined_string",
                "uVar2": "result",
                "uVar5": "use_special_value"
            },
            "code": "\nundefined4 extract_and_initialize_data_structure_0010a377(long input_ptr)\n\n{\n  char check_value;\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t length_1;\n  size_t length_2;\n  char *combined_string;\n  undefined use_special_value;\n  \n  use_special_value = 1;\n  check_value = *(char *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  string_1 = (char *)extract_and_free_ptr_00109b2f();\n  if (check_value == '\\0') {\n    use_special_value = *(undefined *)(*(long *)(input_ptr + 0x60) + 0x1c);\n  }\n  string_2 = (char *)extract_and_free_ptr_00109b2f(input_ptr);\n  length_1 = strlen(string_1);\n  length_2 = strlen(string_2);\n  combined_string = (char *)xmalloc(length_1 + 3 + length_2);\n  sprintf(combined_string,\"@%s,%s\",string_2,string_1);\n  free(string_2);\n  free(string_1);\n  result = initialize_data_structure_00109b52(input_ptr,combined_string,0,use_special_value,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "xmalloc",
                "sprintf",
                "FUN_00109b2f",
                "FUN_00109b52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_structure_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "extract_and_parse_entries_0010d882",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_array",
                "param_4": "error_flag",
                "iVar1": "iteration_count",
                "pcVar2": "current_char",
                "cVar3": "current_char_value",
                "lVar4": "allocated_memory",
                "pcVar5": "current_string",
                "uVar6": "entry_index",
                "bVar7": "is_iteration_remaining",
                "local_50": "num_entries",
                "local_4c": "max_entries",
                "local_48": "entry_length",
                "local_44": "temp_value",
                "local_40": "entry",
                "extract_and_parse_number_00108ea1": "extract_and_parse_number",
                "print_error_message_0010911f": "print_error_message",
                "insert_entry_into_array_0010d7d4": "insert_entry_into_array"
            },
            "code": "\nundefined8 extract_and_parse_entries_0010d882(long input_array,char **input_string,long *output_array,undefined *error_flag)\n\n{\n  int iteration_count;\n  char *current_char;\n  char current_char_value;\n  long allocated_memory;\n  char *current_string;\n  ulong entry_index;\n  bool is_iteration_remaining;\n  uint num_entries;\n  undefined4 max_entries;\n  uint entry_length;\n  int temp_value;\n  undefined8 entry [2];\n  \n  current_char = *input_string;\n  max_entries = 10;\n  if (output_array != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_array = allocated_memory;\n    *error_flag = 0;\n  }\n  num_entries = 0;\n  while( true ) {\n    current_string = *input_string;\n    current_char_value = *current_string;\n    if ((current_char_value == '_' || current_char_value == '\\0') || (current_char_value == 'e')) break;\n    if ((current_char_value == 'N') || (current_char_value == 'T')) {\n      *input_string = current_string + 1;\n      if (current_char_value == 'T') {\n        temp_value = 1;\n      }\n      else {\n        current_char_value = extract_and_parse_number(input_string,&temp_value);\n        if (current_char_value == '\\0') goto LAB_0010d958;\n      }\n      current_char_value = extract_and_parse_number(input_string,&entry_length);\n      if ((current_char_value == '\\0') || (*(uint *)(input_array + 0x28) <= entry_length)) {\nLAB_0010d958:\n        print_error_message(current_char);\n        return 0;\n      }\n      entry_index = (ulong)entry_length;\n      while (iteration_count = temp_value + -1, is_iteration_remaining = temp_value != 0, temp_value = iteration_count, is_iteration_remaining) {\n        entry[0] = *(undefined8 *)(*(long *)(input_array + 0x20) + entry_index * 0x10);\n        current_char_value = insert_entry_into_array(input_array,entry,output_array,&num_entries,&max_entries);\n        if (current_char_value == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char_value = insert_entry_into_array(input_array,input_string,output_array,&num_entries,&max_entries);\n      if (current_char_value == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_array == (long *)0x0) {\n    if (current_char_value != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_array + (ulong)num_entries * 8) = 0;\n    if (*current_string != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_string = current_string + 1;\n  *input_string = current_string;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_string >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00108ea1",
                "FUN_0010d7d4",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_and_parse_entries_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_data_structure_00112925",
                "param_1": "dataStructure",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "dataPtr",
                "pauVar2": "existingDataStructure",
                "lVar3": "loopCounter",
                "puVar4": "currentPtr",
                "bVar5": "byteVar"
            },
            "code": "\nundefined4 *\ninitializeDataStructure_00112925(undefined (**dataStructure) [16],undefined8 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *dataPtr;\n  undefined (*existingDataStructure) [16];\n  long loopCounter;\n  undefined4 *currentPtr;\n  byte byteVar;\n  \n  byteVar = 0;\n  dataPtr = (undefined4 *)xmalloc(0x28);\n  currentPtr = dataPtr;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentPtr = 0;\n    currentPtr = currentPtr + (ulong)byteVar * -2 + 1;\n  }\n  existingDataStructure = *dataStructure;\n  *(undefined8 *)(dataPtr + 2) = param2;\n  dataPtr[5] = param3;\n  dataPtr[6] = param4;\n  if (existingDataStructure == (undefined (*) [16])0x0) {\n    existingDataStructure = (undefined (*) [16])xmalloc(0x10);\n    *existingDataStructure = ZEXT816(0);\n    *dataStructure = existingDataStructure;\n    *(undefined (**) [16])(*existingDataStructure + 8) = existingDataStructure;\n  }\n  **(undefined8 **)(*existingDataStructure + 8) = dataPtr;\n  *(undefined4 **)(*existingDataStructure + 8) = dataPtr;\n  return dataPtr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_0010bc80",
                "FUN_00112996",
                "FUN_0010c05d"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_debug_line_0010bf86",
                "param_1": "debugContext",
                "param_2": "record",
                "param_3": "unit",
                "uVar1": "errorMessage",
                "puVar2": "currentUnit",
                "uVar3": "index",
                "puVar4": "newRecord",
                "lVar5": "temp",
                "puVar6": "tempPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordDebugLine_0010bf86(long debugContext,undefined8 record,undefined8 unit)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentUnit;\n  ulong index;\n  undefined4 *newRecord;\n  long temp;\n  undefined4 *tempPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(debugContext + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    temp = *(long *)(debugContext + 0x28);\n    if ((temp != 0) && (*(long *)(temp + 8) == *(long *)(debugContext + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(temp + 0x10 + index * 8) == -1) {\n          currentUnit = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(temp + 0x10 + (long)currentUnit * 8) = record;\n          *(undefined8 *)(temp + 0x60 + (long)currentUnit * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecord = (undefined4 *)xmalloc(0xb0);\n    tempPtr = newRecord;\n    for (temp = 0x2c; temp != 0; temp = temp + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(debugContext + 0x10);\n    *(undefined8 *)(newRecord + 4) = record;\n    *(undefined8 *)(newRecord + 2) = errorMessage;\n    *(undefined8 *)(newRecord + 0x18) = unit;\n    tempPtr = newRecord + 6;\n    for (temp = 0x48; temp != 0; temp = temp + -1) {\n      *(undefined *)tempPtr = 0xff;\n      tempPtr = (undefined4 *)((long)tempPtr + (ulong)flag * -2 + 1);\n    }\n    currentUnit = *(undefined8 **)(debugContext + 0x28);\n    if (currentUnit == (undefined8 *)0x0) {\n      currentUnit = *(undefined8 **)(debugContext + 8);\n      currentUnit[2] = newRecord;\n    }\n    else {\n      *currentUnit = newRecord;\n    }\n    *(undefined4 **)(debugContext + 0x28) = newRecord;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentUnit >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_00116852",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "param_1": "pattern",
                "param_2": "input",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint matchPattern_0011a170(char **pattern,char **input)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "match_pattern_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "current_ptr",
                "uVar2": "error_message",
                "puVar3": "new_parameter",
                "puVar4": "temp_ptr",
                "puVar6": "last_ptr",
                "puVar7": "new_parameter2",
                "bVar8": "constant"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function,long param1,long param2,undefined4 param3,undefined8 param4)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *new_parameter;\n  undefined8 *temp_ptr;\n  long lVar5;\n  undefined8 *last_ptr;\n  undefined4 *new_parameter2;\n  byte constant;\n  \n  constant = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(long *)(function + 8) != 0) && (*(long *)(function + 0x18) != 0)) {\n      new_parameter = (undefined4 *)xmalloc(0x28);\n      new_parameter2 = new_parameter;\n      for (lVar5 = 10; lVar5 != 0; lVar5 = lVar5 + -1) {\n        *new_parameter2 = 0;\n        new_parameter2 = new_parameter2 + (ulong)constant * -2 + 1;\n      }\n      lVar5 = *(long *)(function + 0x18);\n      *(long *)(new_parameter + 2) = param1;\n      *(long *)(new_parameter + 4) = param2;\n      new_parameter[6] = param3;\n      current_ptr = *(undefined8 **)(lVar5 + 8);\n      *(undefined8 *)(new_parameter + 8) = param4;\n      last_ptr = (undefined8 *)(lVar5 + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        last_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *last_ptr = new_parameter;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "unaff_RBP": "statInfo",
                "unaff_R12": "archivePath",
                "unaff_R13": "tempDirInfo",
                "unaff_R15": "archiveInfo",
                "param_7": "outputPath",
                "param_8": "tempDirPtr",
                "param_9": "tempDirPath",
                "param_10": "archivePtr",
                "param_11": "openMode",
                "param_18": "chmodValue",
                "param_19": "fileSize"
            },
            "code": "\nvoid extractAndCopyArchive_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **ppcVar6;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int unaff_EBX;\n  stat *statInfo;\n  char *pcVar15;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *tempDirInfo;\n  char **archiveInfo;\n  byte bVar17;\n  undefined8 unaff_retaddr;\n  undefined8 *outputPath;\n  long *tempDirPtr;\n  char *tempDirPath;\n  undefined8 *archivePtr;\n  undefined8 openMode;\n  undefined8 in_stack_00000030;\n  uint chmodValue;\n  long fileSize;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  ppcVar6 = (char **)bfd_openw(archivePath,openMode);\n  if (ppcVar6 == (char **)0x0) {\nLAB_00104e80:\n    print_error_message_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a20 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(archiveInfo,ppcVar6,unaff_retaddr);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(archiveInfo);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      print_error_message_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(ppcVar6);\n    ppcVar6 = archiveInfo;\n    if (cVar1 == '\\0') {\n      print_error_message_001126c0(archivePath,0,0,0);\n      DAT_00127a20 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279cb != '\\0') && (unaff_EBX == 0)) {\n      set_file_time_0011a350(archivePath,statInfo);\n    }\n    lVar12 = bfd_openr(archivePath,openMode);\n    tempDirInfo[2] = lVar12;\n    *tempDirPtr = lVar12;\n    tempDirPtr = (long *)(lVar12 + 0xf0);\n    archiveInfo = (char **)bfd_openr_next_archived_file(archivePtr,ppcVar6);\n    bfd_close(ppcVar6);\n    while ((DAT_00127a20 == 0 && (archiveInfo != (char **)0x0))) {\n      pcVar10 = *archiveInfo;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          extract_and_copy_archive_001052a2();\n          return;\n        }\n      }\n      statInfo = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      iVar2 = stat(archivePath,statInfo);\n      puVar8 = tempDirInfo;\n      if (-1 < iVar2) {\n        lVar12 = create_temp_directory_0011a0e0(archivePath);\n        free(archivePath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *archiveInfo;\n        *puVar8 = tempDirInfo;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        archivePath = (char *)concat(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      unaff_EBX = 0;\n      if (DAT_001279cb != '\\0') {\n        psVar16 = statInfo;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        ppcVar6 = (char **)archiveInfo[0x1d];\n        if ((char **)archiveInfo[0x1d] == (char **)0x0) {\n          ppcVar6 = archiveInfo;\n        }\n        unaff_EBX = (**(code **)(ppcVar6[1] + 0x1e8))(archiveInfo,statInfo);\n        if (unaff_EBX != 0) {\n          pcVar10 = *archiveInfo;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n        }\n      }\n      tempDirInfo = (undefined8 *)xmalloc(0x18);\n      tempDirInfo[1] = archivePath;\n      *tempDirInfo = puVar8;\n      tempDirInfo[2] = 0;\n      cVar1 = bfd_check_format(archiveInfo,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        ppcVar6 = (char **)bfd_openw(archivePath,*(undefined8 *)archiveInfo[1]);\n        if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_message_001126c0(0,archiveInfo,0,uVar11);\n      ppcVar6 = (char **)bfd_openw(archivePath,openMode);\n      if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)archiveInfo[0x1d];\n      if ((char **)archiveInfo[0x1d] == (char **)0x0) {\n        ppcVar3 = archiveInfo;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(archiveInfo);\n      lVar12 = fileSize;\n      if (iVar2 == 0) {\n        if (fileSize < 0) {\n          get_modified_string_001125fa(archiveInfo);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(archiveInfo,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279c9 != '\\0') {\n              pcVar10 = *ppcVar6;\n              uVar11 = get_modified_string_001125fa(archiveInfo);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*ppcVar6,chmodValue | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(ppcVar6);\n                ppcVar6 = archiveInfo;\n                if (cVar1 == '\\0') {\n                  print_error_message_001126c0(archivePath,0,0,0);\n                  DAT_00127a20 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,archiveInfo);\n              ppcVar3 = archiveInfo;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,ppcVar6), ppcVar3 = ppcVar6, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            print_error_message_001126c0(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = get_modified_string_001125fa(archiveInfo);\n            print_error_message_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        print_error_message_001126c0(0,archiveInfo,0,0);\n      }\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 == '\\0') {\n        print_error_message_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a20 = 1;\n    }\n    *tempDirPtr = 0;\n    pvVar4 = (void *)xstrdup(*outputPath);\n    if (DAT_00127a20 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(outputPath);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*archivePtr);\n    cVar1 = bfd_close(archivePtr);\n    if (cVar1 == '\\0') {\n      DAT_00127a20 = 1;\n      print_error_message_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (tempDirInfo != (undefined8 *)0x0) {\n    if (tempDirInfo[2] == 0) {\n      rmdir((char *)tempDirInfo[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirInfo[1]);\n    }\n    free((void *)tempDirInfo[1]);\n    puVar8 = (undefined8 *)*tempDirInfo;\n    free(tempDirInfo);\n    tempDirInfo = puVar8;\n  }\n  rmdir(tempDirPath);\n  free(tempDirPath);\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "stat",
                "bfd_close",
                "xmalloc",
                "rmdir",
                "bfd_openw",
                "bfd_close",
                "__errno_location",
                "FUN_00114e50",
                "bfd_seek",
                "FUN_00119ed0",
                "strerror",
                "FUN_001126c0",
                "concat",
                "printf",
                "FUN_0011a0e0",
                "FUN_00114b84",
                "FUN_001052a2",
                "chmod",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_bread",
                "bfd_get_arch",
                "FUN_0011a110",
                "FUN_00104ea2",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "unlink",
                "free",
                "FUN_0011a350",
                "bfd_bwrite",
                "FUN_001125fa",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0011a110",
                "FUN_0010554f",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_001126c0",
                "FUN_0011378f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_function_00113ce0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "lVar1": "memory_initialized",
                "plVar2": "allocated_memory",
                "auVar3": "result",
                "initialize_memory_00112904": "initialize_memory",
                "xmalloc": "allocate_memory"
            },
            "code": "\nundefined  [16]\ninitialize_function_00113ce0(long input_param1,long input_param2,undefined input_param3,undefined8 input_param4,undefined8 input_param5)\n\n{\n  long memory_initialized;\n  long *allocated_memory;\n  undefined result [16];\n  \n  if (input_param1 != 0) {\n    memory_initialized = initialize_memory(0xd,0);\n    if (memory_initialized != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_param1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_param2;\n      *(undefined *)(allocated_memory + 2) = input_param3;\n      *(long **)(memory_initialized + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  memory_initialized = 0;\nLAB_00113d2f:\n  result._8_8_ = input_param5;\n  result._0_8_ = memory_initialized;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_function_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_data_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "startPos",
                "unaff_R14": "endPos",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorString",
                "uVar3": "errorMessage"
            },
            "code": "\nvoid readAndResizeData_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 errorMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long startPos;\n  long endPos;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + startPos),1,endPos - startPos,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      errorMessage = *(undefined8 *)(buffer + 0x10);\n      errorString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(errorString,errorMessage);\n    }\n    startPos = startPos + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (startPos == endPos) {\n      endPos = startPos * 2;\n      errorMessage = xrealloc(*(undefined8 *)(buffer + 0x20),endPos);\n      *(undefined8 *)(buffer + 0x20) = errorMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = startPos;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "ferror",
                "FUN_00119dd0",
                "xrealloc",
                "dcgettext",
                "FUN_00114dc7",
                "fread",
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_data_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "convert_and_print_header_data_00119f70",
                "param_1": "headerData",
                "param_2": "convertedData",
                "uVar1": "formatVersion",
                "cVar2": "comparisonResult",
                "iVar3": "iterationCounter",
                "uVar4": "endianness1",
                "uVar5": "endianness2",
                "__format": "formatString",
                "lVar6": "bufferSize",
                "uVar7": "currentHeader",
                "lVar8": "reallocResult"
            },
            "code": "\nundefined4 convertAndPrintHeaderData_00119f70(undefined8 *headerData,undefined8 *convertedData)\n\n{\n  undefined4 formatVersion;\n  char comparisonResult;\n  int iterationCounter;\n  undefined8 endianness1;\n  undefined8 endianness2;\n  char *formatString;\n  long bufferSize;\n  undefined8 currentHeader;\n  long reallocResult;\n  \n  iterationCounter = *(int *)((long)convertedData + 0xc) + 1;\n  *(int *)((long)convertedData + 0xc) = iterationCounter;\n  if ((ulong)convertedData[2] < (ulong)((long)iterationCounter * 0x60)) {\n    bufferSize = 0x3000;\n    if (0x3f < iterationCounter) {\n      bufferSize = (long)iterationCounter * 0xc0;\n    }\n    reallocResult = xrealloc(convertedData[3]);\n    convertedData[3] = reallocResult;\n    memset((void *)(reallocResult + convertedData[2]),0,bufferSize - convertedData[2]);\n    convertedData[2] = bufferSize;\n  }\n  formatVersion = *(undefined4 *)((long)headerData + 0xc);\n  *(undefined8 *)((long)*(int *)((long)convertedData + 0xc) * 0x60 + convertedData[3] + -0x60) = *headerData;\n  endianness1 = get_endianness_00114e00(formatVersion);\n  endianness2 = get_endianness_00114e00(*(undefined4 *)(headerData + 2));\n  currentHeader = *headerData;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,currentHeader,endianness2,endianness1);\n  bufferSize = bfd_openw(*convertedData,*headerData);\n  if (bufferSize == 0) {\n    print_error_message_0011a110(*convertedData);\n    *(undefined4 *)(convertedData + 1) = 1;\n  }\n  else {\n    iterationCounter = 2;\n    comparisonResult = bfd_set_format(bufferSize,1);\n    if (comparisonResult == '\\0') {\n      iterationCounter = bfd_get_error();\n      if (iterationCounter != 5) {\n        print_error_message_0011a110(*headerData);\n        *(undefined4 *)(convertedData + 1) = 1;\n      }\n    }\n    else {\n      do {\n        comparisonResult = (**(code **)(*(long *)(bufferSize + 8) + 0x2a0))(bufferSize,iterationCounter,0);\n        if (comparisonResult != '\\0') {\n          currentHeader = bfd_printable_arch_mach(iterationCounter,0);\n          printf(\"  %s\\n\",currentHeader);\n          *(undefined *)\n           ((long)*(int *)((long)convertedData + 0xc) * 0x60 + convertedData[3] + -0x58 + (ulong)(iterationCounter - 2)) =\n               1;\n        }\n        iterationCounter = iterationCounter + 1;\n      } while (iterationCounter != 0x57);\n    }\n    bfd_close_all_done(bufferSize);\n  }\n  return *(undefined4 *)(convertedData + 1);\n}\n\n",
            "called": [
                "memset",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "xrealloc",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_close_all_done",
                "bfd_get_error",
                "FUN_00114e00",
                "printf",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "convert_and_print_header_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00108200",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "param_3": "statBufferAddress",
                "iVar1": "sourceFileErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "readBytes",
                "_Var3": "seekResult",
                "uVar4": "returnVal",
                "sVar5": "writeResult",
                "piVar6": "errnoPointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int sourceFileDescriptor,char *destinationFilePath,long statBufferAddress)\n\n{\n  int sourceFileErrno;\n  int destinationFileDescriptor;\n  int readBytes;\n  __off_t seekResult;\n  ulong returnVal;\n  size_t writeResult;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (seekResult = lseek(sourceFileDescriptor,0,0), seekResult == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnVal = close_file_and_set_errno_00108237();\n      return returnVal;\n    }\n    do {\n      returnVal = read(sourceFileDescriptor,buffer,0x2000);\n      readBytes = (int)returnVal;\n      if (readBytes < 1) {\n        errnoPointer = __errno_location();\n        sourceFileErrno = *errnoPointer;\n        fchmod(destinationFileDescriptor,*(__mode_t *)(statBufferAddress + 0x18));\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (readBytes != 0) {\n          *errnoPointer = sourceFileErrno;\n          return 0xffffffff;\n        }\n        return returnVal & 0xffffffff;\n      }\n      writeResult = write(destinationFileDescriptor,buffer,(long)readBytes);\n    } while (writeResult == (long)readBytes);\n    errnoPointer = __errno_location();\n    readBytes = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = readBytes;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "close",
                "__errno_location",
                "open",
                "write",
                "fchmod",
                "FUN_00108237",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_check_error_00108200",
                "unaff_RBP": "file_path",
                "unaff_R12B": "perform_time_modification",
                "unaff_R13": "file_permissions",
                "unaff_retaddr": "return_address",
                "piVar1": "errno_location",
                "uVar2": "error_message",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16] copy_file_and_check_error_00108200(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  char *file_path;\n  char perform_time_modification;\n  ulong file_permissions;\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  errno_location = __errno_location();\n  strerror(*errno_location);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(error_message);\n  unlink(file_path);\n  if (perform_time_modification != '\\0') {\n    set_file_time_0011a350();\n  }\n  return_value._0_8_ = file_permissions & 0xffffffff;\n  return_value._8_8_ = return_address;\n  return return_value;\n}\n\n",
            "called": [
                "__errno_location",
                "unlink",
                "dcgettext",
                "FUN_0011a350",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_check_error_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 295685,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}