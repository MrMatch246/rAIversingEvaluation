{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_type_with_constant_00113dfe",
                "param_1": "type",
                "param_2": "constant",
                "lVar1": "typeWithValue"
            },
            "code": "\nvoid updateTypeWithConstant_00113dfe(undefined4 type,undefined constant)\n\n{\n  long typeWithValue;\n  \n  typeWithValue = debug_make_type_constprop_0(3,type);\n  if (typeWithValue != 0) {\n    *(undefined *)(typeWithValue + 0x10) = constant;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "update_type_with_constant_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "bfd_nonfatal.cold",
                "debug_find_named_type",
                "display_info.isra.0",
                "debug_record_function",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "debug_tag_type",
                "debug_get_real_type.isra.0",
                "stab_context",
                "debug_record_variable",
                "parse_stab",
                "list_supported_targets",
                "debug_name_type",
                "list_matching_formats",
                "finish_stab",
                "parse_stab_type",
                "debug_record_parameter",
                "copy_usage",
                "debug_end_block",
                "main",
                "debug_end_function",
                "bad_stab",
                "warn_stab",
                "stab_bad_demangle",
                "debug_start_block",
                "report",
                "bfd_nonfatal_message",
                "strip_usage",
                "debug_record_line",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "debug_start_source",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_to_variable_0010ab4d",
                "param_1": "dataPtr",
                "param_2": "stringParam",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "dataValue",
                "lVar2": "ptrValue",
                "auVar3": "returnValue",
                "sVar4": "stringLength",
                "pcVar5": "variablePtr",
                "sVar6": "variableLength",
                "auVar7": "returnValueAux"
            },
            "code": "\nundefined  [16] appendStringToVariable_0010ab4d(long dataPtr,char *stringParam,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  ulong dataValue;\n  long ptrValue;\n  undefined returnValue [16];\n  size_t stringLength;\n  char *variablePtr;\n  size_t variableLength;\n  undefined returnValueAux [16];\n  \n  dataValue = *(ulong *)(dataPtr + 0x60);\n  if ((dataValue != 0) && (*(long *)(dataValue + 0x20) != 0)) {\n    variablePtr = *(char **)(dataValue + 0x30);\n    stringLength = strlen(stringParam);\n    if (variablePtr == (char *)0x0) {\n      variablePtr = (char *)xmalloc(stringLength + 3);\n      *variablePtr = '\\0';\n    }\n    else {\n      variableLength = strlen(variablePtr);\n      variablePtr = (char *)xrealloc(variablePtr,stringLength + 4 + variableLength);\n    }\n    stringLength = strlen(variablePtr);\n    sprintf(variablePtr + stringLength,\"%s::\",stringParam);\n    ptrValue = *(long *)(dataPtr + 0x60);\n    *(char **)(ptrValue + 0x30) = variablePtr;\n    returnValueAux._1_7_ = (undefined7)((ulong)ptrValue >> 8);\n    returnValueAux[0] = 1;\n    returnValueAux._8_8_ = unusedParam2;\n    return returnValueAux;\n  }\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = dataValue;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_string_to_variable_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_debug_type_0010c218",
                "param_1": "file_data",
                "param_2": "name_type",
                "param_3": "debug_data",
                "uVar1": "error_msg",
                "lVar2": "type_result",
                "pauVar3": "type_ptr",
                "lVar4": "debug_result"
            },
            "code": "\n\n\nlong process_debug_type_0010c218(long file_data,long name_type,long debug_data)\n\n{\n  undefined8 error_msg;\n  long type_result;\n  undefined (*type_ptr) [16];\n  long debug_result;\n  \n  if ((name_type != 0) && (debug_data != 0)) {\n    if ((*(long *)(file_data + 8) == 0) || (*(long *)(file_data + 0x10) == 0)) {\n      error_msg = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_msg);\n    }\n    else {\n      type_result = debug_make_type_constprop_0(0x16,0);\n      if (type_result != 0) {\n        type_ptr = (undefined (*) [16])xmalloc(0x10);\n        debug_result = *(long *)(file_data + 0x10);\n        *type_ptr = ZEXT816(0);\n        *(long *)(*type_ptr + 8) = debug_data;\n        *(undefined (**) [16])(type_result + 0x10) = type_ptr;\n        debug_result = debug_add_to_namespace_constprop_0(debug_result + 0x10,name_type,0,3);\n        if (debug_result != 0) {\n          *(long *)(debug_result + 0x20) = type_result;\n          *(long *)*type_ptr = debug_result;\n          return type_result;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "process_debug_type_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "fseek",
                "xstrdup",
                "bfd_set_default_target",
                "delete_symbol_htabs",
                "display_info.isra.0",
                "xatexit_cleanup.lto_priv.0",
                "setlocale",
                "filename_cmp",
                "textdomain",
                "parse_flags",
                "getc",
                "htab_create_alloc",
                "section_add_load_file",
                "malloc",
                "bfd_set_error_program_name",
                "non_fatal",
                "fopen",
                "smart_rename",
                "xcalloc",
                "fread",
                "bfd_scan_arch",
                "strlen",
                "dcgettext",
                "memcpy",
                "mkstemp",
                "strcpy",
                "xmalloc",
                "htab_hash_redefnode",
                "bfd_nonfatal_message",
                "close",
                "bfd_init",
                "create_symbol_htab",
                "strchr",
                "bfd_errmsg",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_find_slot",
                "template_in_dir",
                "print_version",
                "stat",
                "ftell",
                "add_redefine_and_check",
                "xexit",
                "xrealloc",
                "htab_elements",
                "copy_file",
                "find_section_list",
                "strtoul",
                "strcasecmp",
                "get_file_size",
                "unlink_if_ordinary",
                "strtol",
                "xmalloc_set_program_name",
                "ferror",
                "strncasecmp",
                "dup",
                "strncpy",
                "free",
                "add_specific_symbols",
                "bindtextdomain",
                "strerror",
                "fprintf",
                "init_section_add",
                "copy_usage",
                "memmove",
                "fatal",
                "strcmp",
                "__errno_location",
                "eq_string_redefnode",
                "handle_remove_section_option",
                "bfd_get_error",
                "strip_usage",
                "fclose",
                "getopt_long",
                "parse_vma",
                "xstrndup",
                "convert_efi_target",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "blockPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "childBlockPointer",
                "uVar2": "returnVal",
                "puVar3": "allocation",
                "puVar4": "nextChildBlock",
                "puVar6": "lastChildBlock",
                "puVar7": "loopCounter",
                "bVar8": "byteVar",
                "lVar5": "blockAddress",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugging_0010be88(long blockPointer,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *childBlockPointer;\n  undefined8 returnVal;\n  undefined4 *allocation;\n  undefined8 *nextChildBlock;\n  long blockAddress;\n  undefined8 *lastChildBlock;\n  undefined4 *loopCounter;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  if ((*(long *)(blockPointer + 8) == 0) || (*(long *)(blockPointer + 0x20) == 0)) {\n    returnVal = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",returnVal);\n    returnVal = 0;\n  }\n  else {\n    allocation = (undefined4 *)xmalloc(0x30);\n    loopCounter = allocation;\n    for (blockAddress = 0xc; blockAddress != 0; blockAddress = blockAddress + -1) {\n      *loopCounter = 0;\n      loopCounter = loopCounter + (ulong)byteVar * -2 + 1;\n    }\n    blockAddress = *(long *)(blockPointer + 0x20);\n    *(undefined8 *)(allocation + 6) = param2;\n    *(undefined8 *)(allocation + 8) = 0xffffffffffffffff;\n    *(long *)(allocation + 2) = blockAddress;\n    childBlockPointer = *(undefined8 **)(blockAddress + 0x10);\n    lastChildBlock = (undefined8 *)(blockAddress + 0x10);\n    while (nextChildBlock = childBlockPointer, nextChildBlock != (undefined8 *)0x0) {\n      lastChildBlock = nextChildBlock;\n      childBlockPointer = (undefined8 *)*nextChildBlock;\n    }\n    *lastChildBlock = allocation;\n    returnVal = 1;\n    *(undefined4 **)(blockPointer + 0x20) = allocation;\n  }\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = returnVal;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "paramArray",
                "param_2": "fieldName",
                "param_3": "fieldValue",
                "param_4": "fieldSize",
                "param_5": "flag",
                "cVar1": "charVar1",
                "iVar2": "intVar2",
                "lVar3": "longVar3",
                "__s": "type",
                "sVar4": "paramSize",
                "sVar5": "fieldNameSize",
                "sVar6": "typeSize",
                "__s_00": "formattedString",
                "uVar7": "msg",
                "uVar8": "result",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *paramArray,char *fieldName,undefined8 fieldValue,ulong fieldSize,int flag)\n\n{\n  char charVar1;\n  int intVar2;\n  long longVar3;\n  char *type;\n  size_t paramSize;\n  size_t fieldNameSize;\n  size_t typeSize;\n  char *formattedString;\n  undefined8 msg;\n  undefined8 result;\n  char *flagString;\n  \n  charVar1 = *(char *)(paramArray[0xc] + 0x1c);\n  intVar2 = *(int *)(paramArray[0xc] + 0x18);\n  type = (char *)stab_pop_type();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    paramSize = strlen(*(char **)(paramArray[0xc] + 0x20));\n    fieldNameSize = strlen(fieldName);\n    typeSize = strlen(type);\n    formattedString = (char *)xmalloc(paramSize + 0x32 + fieldNameSize + typeSize);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(intVar2 * 8), fieldSize == 0)) {\n      result = *(undefined8 *)*paramArray;\n      msg = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(msg,result,fieldName);\n    }\n    sprintf(formattedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),fieldName,flagString,type,\n            fieldValue,fieldSize);\n    free(*(void **)(paramArray[0xc] + 0x20));\n    longVar3 = paramArray[0xc];\n    *(char **)(longVar3 + 0x20) = formattedString;\n    if (charVar1 != '\\0') {\n      *(undefined *)(longVar3 + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)longVar3 >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "dcgettext",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "modify_and_store_value_0010aa53",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "flag",
                "param_4": "value",
                "cVar1": "flagVal",
                "__s": "stringPtr",
                "sVar5": "strLength",
                "pcVar6": "newString",
                "lVar2": "ptrVar",
                "cVar3": "flagChar",
                "uVar4": "loopVar",
                "uVar9": "loopIndex",
                "uVar10": "loopEnd",
                "lVar7": "reallocPtr",
                "uVar8": "returnValue"
            },
            "code": "\nundefined8 modifyAndStoreValue_0010aa53(long arg1,undefined8 arg2,char flag,int value)\n\n{\n  char flagVal;\n  long ptrVar;\n  char flagChar;\n  uint loopVar;\n  char *stringPtr;\n  size_t strLength;\n  char *newString;\n  long reallocPtr;\n  undefined8 returnValue;\n  ulong loopIndex;\n  ulong loopEnd;\n  \n  flagVal = *(char *)(*(long *)(arg1 + 0x60) + 0x1c);\n  stringPtr = (char *)stab_pop_type();\n  strLength = strlen(stringPtr);\n  newString = (char *)xmalloc(strLength + 0x19);\n  *newString = flag + '0';\n  if (value == 1) {\n    flagChar = '1';\n  }\n  else {\n    flagChar = '0';\n    if ((value != 2) && (flagChar = '2', value != 0)) {\n                    \n      abort();\n    }\n  }\n  newString[1] = flagChar;\n  sprintf(newString + 2,\"%ld,%s;\",arg2);\n  free(stringPtr);\n  ptrVar = *(long *)(arg1 + 0x60);\n  returnValue = 0;\n  if ((ptrVar != 0) && (*(long *)(ptrVar + 0x20) != 0)) {\n    ptrVar = *(long *)(ptrVar + 0x28);\n    loopEnd = 0;\n    if (ptrVar != 0) {\n      loopVar = 0;\n      do {\n        loopIndex = (ulong)loopVar;\n        loopEnd = (ulong)loopVar;\n        loopVar = loopVar + 1;\n      } while (*(long *)(ptrVar + loopIndex * 8) != 0);\n    }\n    reallocPtr = xrealloc(ptrVar,(ulong)((int)loopEnd + 2) << 3);\n    *(char **)(reallocPtr + loopEnd * 8) = newString;\n    *(undefined8 *)(reallocPtr + (ulong)((int)loopEnd + 1) * 8) = 0;\n    ptrVar = *(long *)(arg1 + 0x60);\n    *(long *)(ptrVar + 0x28) = reallocPtr;\n    if (flagVal != '\\0') {\n      *(undefined *)(ptrVar + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "xmalloc",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_and_store_value_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_stab_entry_0011173a",
                "param_2": "symbol_table",
                "param_3": "entry_type",
                "param_5": "current_address",
                "param_6": "entry_name",
                "cVar1": "char_value",
                "bVar2": "byte_value",
                "__ptr": "pointer",
                "cVar3": "status",
                "uVar4": "return_value",
                "iVar5": "index",
                "puVar6": "dynamic_memory",
                "plVar7": "long_pointer",
                "pcVar8": "char_pointer",
                "uVar9": "undefined_value",
                "lVar10": "long_value_1",
                "lVar11": "long_value_2",
                "lVar12": "long_value_3",
                "lVar13": "long_pointer_pointer",
                "uVar14": "ulong_value_1",
                "uVar15": "ulong_value_2",
                "pcVar16": "char_pointer_2",
                "uVar17": "uint_value",
                "dVar19": "double_value",
                "local_48": "local_char_pointer",
                "local_40": "local_long_pointer_pointer_array"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_entry_0011173a(undefined8 param_1,long *symbol_table,int entry_type,int param_4,ulong current_address,\n                      char *entry_name)\n\n{\n  char char_value;\n  byte byte_value;\n  void *pointer;\n  char status;\n  undefined return_value;\n  int index;\n  undefined8 *dynamic_memory;\n  long *long_pointer;\n  char *char_pointer;\n  undefined8 undefined_value;\n  long long_value_1;\n  long long_value_2;\n  long long_value_3;\n  long **pplong_pointer_pointer;\n  ulong ulong_value_1;\n  ulong ulong_value_2;\n  char *char_pointer_2;\n  uint uint_value;\n  long **pplVar18;\n  double double_value;\n  char *local_char_pointer;\n  long **local_long_pointer_pointer_array [2];\n  \n  if (symbol_table[4] != 0) {\n    if (((entry_type == 100) && (*entry_name != '\\0')) && (symbol_table[5] == current_address)) goto LAB_00111a06;\n    status = debug_set_filename(param_1);\n    if (status == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)symbol_table + 0x44) = 0;\n    *(undefined4 *)(symbol_table + 8) = 0;\n    symbol_table[9] = symbol_table[4];\n    if (*(char *)(symbol_table + 1) == '\\0') {\n      symbol_table[6] = symbol_table[5];\n    }\n    *(undefined4 *)(symbol_table + 0x10) = 1;\n    dynamic_memory = (undefined8 *)xmalloc(8);\n    symbol_table[0x11] = (long)dynamic_memory;\n    *dynamic_memory = 0;\n    symbol_table[4] = 0;\n  }\n  strlen(entry_name);\n  if (entry_type == 0x84) {\nLAB_00111ab7:\n    return_value = debug_start_source(param_1,entry_name);\n    return return_value;\n  }\n  if (entry_type < 0x85) {\n    if (entry_type == 0x3c) {\n      index = strcmp(entry_name,\"gcc2_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(symbol_table + 8) = 2;\n        return 1;\n      }\n      index = strcmp(entry_name,\"gcc_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(symbol_table + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)symbol_table + 0x44) = 1;\n      return 1;\n    }\n    if (entry_type < 0x3d) {\n      if (entry_type == 0x24) {\n        if (*entry_name == '\\0') {\n          if (*(char *)(symbol_table + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(symbol_table + 1) != '\\0') {\n            current_address = current_address + symbol_table[7];\n          }\n          status = stab_emit_pending_vars(param_1,symbol_table);\n          if (status != '\\0') {\n            status = debug_end_function(param_1,current_address);\n            if (status != '\\0') {\n              *(undefined *)(symbol_table + 0xc) = 0;\n              symbol_table[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(symbol_table + 0xc) != '\\0') &&\n           ((current_address < (ulong)symbol_table[0xd] || (symbol_table[0xd] == 0xffffffffffffffff)))) {\n          symbol_table[0xd] = current_address;\n        }\n      }\n      else if (entry_type < 0x25) {\n        if (entry_type == 0xc) {\n          return 1;\n        }\n        if (entry_type - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (entry_type == 0x2a) {\n          return 1;\n        }\n        if (entry_type == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (entry_type == 100) {\nLAB_00111a06:\n        if (*(char *)(symbol_table + 0xc) != '\\0') {\n          ulong_value_1 = current_address;\n          if (((*entry_name != '\\0') && (ulong_value_2 = symbol_table[0xd], ulong_value_2 != 0xffffffffffffffff)) &&\n             (ulong_value_1 = ulong_value_2, current_address < ulong_value_2)) {\n            ulong_value_1 = current_address;\n          }\n          status = stab_emit_pending_vars(param_1,symbol_table);\n          if (status == '\\0') {\n            return 0;\n          }\n          status = debug_end_function(param_1,ulong_value_1);\n          if (status == '\\0') {\n            return 0;\n          }\n          *(undefined *)(symbol_table + 0xc) = 0;\n          symbol_table[0xd] = -1;\n        }\n        if (*entry_name == '\\0') {\n          return 1;\n        }\n        pointer = (void *)symbol_table[4];\n        if (pointer == (void *)0x0) {\n          long_value_3 = xstrdup(entry_name);\n          symbol_table[4] = long_value_3;\n        }\n        else {\n          if (*entry_name == '/') {\n            long_value_3 = xstrdup(entry_name);\n          }\n          else {\n            long_value_3 = concat(pointer,entry_name,0);\n          }\n          symbol_table[4] = long_value_3;\n          free(pointer);\n        }\n        symbol_table[5] = current_address;\n        return 1;\n      }\n      if (entry_type < 0x65) {\n        if (entry_type == 0x44) {\n          long_value_3 = 0;\n          if (*(char *)(symbol_table + 0xc) != '\\0') {\n            long_value_3 = symbol_table[7];\n          }\n          return_value = debug_record_line(param_1,(long)param_4,long_value_3 + current_address);\n          return return_value;\n        }\n        if (entry_type == 0x62) {\n          return 1;\n        }\n      }\n      else if (entry_type == 0x82) {\n        long_pointer = (long *)xmalloc();\n        index = *(int *)(symbol_table + 0x10);\n        long_value_1 = symbol_table[10];\n        long_value_2 = symbol_table[0xb];\n        long_pointer[5] = 0;\n        long_value_3 = symbol_table[0x11];\n        *(int *)(long_pointer + 4) = index;\n        uint_value = index + 1;\n        *(uint *)(symbol_table + 0x10) = uint_value;\n        *long_pointer = long_value_2;\n        long_pointer[1] = long_value_1;\n        long_pointer[2] = (long)entry_name;\n        long_pointer[3] = current_address;\n        symbol_table[10] = (long)long_pointer;\n        symbol_table[0xb] = (long)long_pointer;\n        long_value_3 = xrealloc(long_value_3,(ulong)uint_value << 3);\n        uint_value = *(uint *)(long_pointer + 4);\n        symbol_table[0x11] = long_value_3;\n        *(undefined8 *)(long_value_3 + (ulong)uint_value * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_pointer = strchr(entry_name,0x3a);\n    if ((char_pointer != (char *)0x0) && ((char_pointer[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(symbol_table + 0xc) != '\\0') {\n        ulong_value_1 = symbol_table[0xd];\n        ulong_value_2 = current_address;\n        if ((ulong_value_1 != 0xffffffffffffffff) && (ulong_value_2 = ulong_value_1, current_address < ulong_value_1)) {\n          ulong_value_2 = current_address;\n        }\n        status = stab_emit_pending_vars(param_1,symbol_table);\n        if (status == '\\0') {\n          return 0;\n        }\n        status = debug_end_function(param_1,ulong_value_2);\n        if (status == '\\0') {\n          return 0;\n        }\n        symbol_table[0xd] = -1;\n      }\n      if (*(char *)(symbol_table + 1) != '\\0') {\n        symbol_table[7] = current_address;\n      }\n      *(undefined *)(symbol_table + 0xc) = 1;\n    }\n    local_char_pointer = strchr(entry_name,0x3a);\n    if (local_char_pointer == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_char_pointer[1] == ':') goto code_r0x00111cc7;\n    if (*entry_name == '$') {\n      status = entry_name[1];\n      char_pointer_2 = \"eh_throw\";\n      if (status != 'e') {\n        if (status < 'f') {\n          if ((status != 'X') && (status != '_')) {\nLAB_00111d1a:\n            undefined_value = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(entry_name,undefined_value);\n          }\n        }\n        else {\n          char_pointer_2 = \"this\";\n          if (status == 't') goto LAB_00111d62;\n          if (status != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_pointer_2 = (char *)0x0;\n      if ((entry_name != local_char_pointer) && ((*entry_name != ' ' || (local_char_pointer != entry_name + 1)))) {\n        char_pointer_2 = (char *)savestring(entry_name,(int)local_char_pointer - (int)entry_name);\n      }\n    }\nLAB_00111d62:\n    byte_value = local_char_pointer[1];\n    char_pointer = local_char_pointer + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte_value * 2) >> 2) & 1 |\n        (byte_value == 0x2d || byte_value == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 4;\n      goto LAB_001123e8;\n    }\n    if (byte_value == 0) goto switchD_00111de5_caseD_44;\n    char_pointer = local_char_pointer + 2;\n    status = local_char_pointer[1];\n    switch(status) {\n    case 'C':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      char_pointer = \"debug_record_label: not implemented\";\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      status = debug_record_function(param_1,char_pointer_2,long_value_3,status == 'F',current_address);\n      if (status != '\\0') {\n        do {\n          if (*local_char_pointer != ';') {\n            return 1;\n          }\n          local_char_pointer = local_char_pointer + 1;\n          long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n        } while (long_value_3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      if (char_pointer_2 == (char *)0x0) goto LAB_0011208f;\n      long_value_1 = symbol_table[3];\n      long_pointer = (long *)symbol_table[2];\n      status = *(char *)(*(long *)(*symbol_table + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (entry_type == 0x24) {\n        local_char_pointer = char_pointer;\n        do {\n          if (*local_char_pointer != ';') {\n            return 1;\n          }\n          local_char_pointer = local_char_pointer + 1;\n          long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n        } while (long_value_3 != 0);\n        return 0;\n      }\n    case 'R':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 2;\n      break;\n    case 'S':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 2;\n      goto LAB_001121c4;\n    case 'T':\n      status = local_char_pointer[2];\n      if (status == 't') {\n        char_pointer = local_char_pointer + 3;\n      }\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,char_pointer_2,&local_char_pointer,local_long_pointer_pointer_array);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      if (char_pointer_2 == (char *)0x0) {\n        return 1;\n      }\n      char_value = *(char *)(symbol_table + 0x35);\n      long_pointer = (long *)debug_tag_type(param_1,char_pointer_2,long_value_3);\n      if (long_pointer == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_pointer_pointer_array[0] != (long **)0x0) {\n        *local_long_pointer_pointer_array[0] = long_pointer;\n      }\n      if (char_value != '\\0') goto LAB_001122f0;\n      pplong_pointer_pointer = (long **)(symbol_table + 0x34);\n      pplVar18 = (long **)symbol_table[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_pointer = local_char_pointer + 3;\n      if (((local_char_pointer[2] != '\\0') && (char_pointer = local_char_pointer + 4, local_char_pointer[3] == 'n')) &&\n         (char_pointer = local_char_pointer + 5, char_pointer_2 = local_char_pointer + 4, local_char_pointer = char_pointer, *char_pointer_2 == '0')) {\n        for (; char_pointer = local_char_pointer, *local_char_pointer != '\\0'; local_char_pointer = local_char_pointer + 1) {\n          if (*local_char_pointer == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 4;\n      break;\n    case 'c':\n      if (local_char_pointer[2] == '=') {\n        char_pointer = local_char_pointer + 4;\n        status = local_char_pointer[3];\n        local_char_pointer = char_pointer;\n        if (status == 'i') {\n          long_value_3 = strtol(char_pointer,(char **)0x0,10);\n          if (char_pointer_2 == (char *)0x0) {\n            return 0;\n          }\n          long_value_1 = debug_add_to_current_namespace_constprop_0(param_1,char_pointer_2,4);\n          if (long_value_1 != 0) {\n            *(long *)(long_value_1 + 0x20) = (long)(int)long_value_3;\n            return 1;\n          }\n          return 0;\n        }\n        if (status == 'r') {\n          double_value = strtod(char_pointer,(char **)0x0);\n          if (char_pointer_2 == (char *)0x0) {\n            return 0;\n          }\n          long_value_3 = debug_add_to_current_namespace_constprop_0(param_1,char_pointer_2,5);\n          if (long_value_3 != 0) {\n            *(double *)(long_value_3 + 0x20) = double_value;\n            return 1;\n          }\n          return 0;\n        }\n        if (status == 'e') {\n          long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n          if (long_value_3 == 0) {\n            return 0;\n          }\n          char_pointer = local_char_pointer;\n          if (*local_char_pointer == ',') {\n            long_value_1 = strtol(local_char_pointer,(char **)0x0,10);\n            if (char_pointer_2 == (char *)0x0) {\n              return 0;\n            }\n            long_value_2 = debug_add_to_current_namespace_constprop_0(param_1,char_pointer_2,6);\n            if (long_value_2 != 0) {\n              long_pointer = (long *)xmalloc(0x10);\n              *long_pointer = long_value_3;\n              long_pointer[1] = (long)(int)long_value_1;\n              *(long **)(long_value_2 + 0x20) = long_pointer;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_char_pointer[2] == 'F') {\n        local_char_pointer = local_char_pointer + 3;\n        long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n        if (long_value_3 == 0) {\n          return 0;\n        }\n        undefined_value = debug_make_function_type_isra_0(long_value_3,0,0);\n        long_value_3 = debug_make_pointer_type_isra_0(undefined_value);\n      }\n      else {\n        local_char_pointer = char_pointer;\n        long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      }\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 1;\n      break;\n    case 'r':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 5;\nLAB_001123e8:\n      status = stab_record_variable(param_1,symbol_table,char_pointer_2,long_value_3,undefined_value,current_address);\n      goto joined_r0x001123f8;\n    case 't':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,char_pointer_2,&local_char_pointer,local_long_pointer_pointer_array);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      if (char_pointer_2 == (char *)0x0) {\n        return 1;\n      }\n      long_pointer = (long *)debug_name_type(param_1,char_pointer_2,long_value_3);\n      if (long_pointer == (long *)0x0) {\n        return 0;\n      }\n      if (local_long_pointer_pointer_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_pointer_pointer_array[0] = long_pointer;\n      return 1;\n    case 'v':\n      local_char_pointer = char_pointer;\n      long_value_3 = parse_stab_type(param_1,symbol_table,0,&local_char_pointer,0);\n      if (long_value_3 == 0) {\n        return 0;\n      }\n      undefined_value = 3;\n    }\n    status = debug_record_parameter(param_1,char_pointer_2,long_value_3,undefined_value,current_address);\n    goto joined_r0x001123f8;\n  }\n  if (entry_type == 0xe0) {\n    if ((*(char *)((long)symbol_table + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    status = stab_emit_pending_vars(param_1,symbol_table);\n    if (status == '\\0') {\n      return 0;\n    }\n    status = debug_end_block(param_1,symbol_table[7] + symbol_table[6] + current_address);\n    if (status == '\\0') {\n      return 0;\n    }\n    symbol_table = symbol_table + 0xe;\n    *(int *)symbol_table = *(int *)symbol_table + -1;\n    char_pointer = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)symbol_table) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < entry_type) {\n      if (entry_type == 0xe2) {\n        char_pointer = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_pointer = \"debug_end_common_block: not implemented\";\n        if (entry_type != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined_value = dcgettext(0,char_pointer,5);\n      fprintf(_stderr,\"%s\\n\",undefined_value);\n      return 0;\n    }\n    if (entry_type != 0xc0) {\n      if (entry_type == 0xc2) {\n        index = *(int *)(symbol_table + 0x10);\n        *(uint *)(symbol_table + 0x10) = index + 1U;\n        long_value_3 = xrealloc(symbol_table[0x11],(ulong)(index + 1U) << 3);\n        dynamic_memory = (undefined8 *)symbol_table[0xb];\n        symbol_table[0x11] = long_value_3;\n        while( true ) {\n          if (dynamic_memory == (undefined8 *)0x0) {\n            undefined_value = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(entry_name,undefined_value);\n            *(undefined8 *)(symbol_table[0x11] + (ulong)(*(int *)(symbol_table + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((current_address == dynamic_memory[3]) && (index = strcmp((char *)dynamic_memory[2],entry_name), index == 0))\n          break;\n          dynamic_memory = (undefined8 *)*dynamic_memory;\n        }\n        *(undefined8 *)(long_value_3 + (ulong)(*(int *)(symbol_table + 0x10) - 1) * 8) = dynamic_memory[5];\n        return 1;\n      }\n      if (entry_type == 0xa2) {\n        long_value_3 = symbol_table[10];\n        if (long_value_3 != 0) {\n          long_value_1 = *(long *)(long_value_3 + 8);\n          uint_value = *(uint *)(long_value_3 + 0x20);\n          symbol_table[10] = long_value_1;\n          if ((uint_value < *(uint *)(symbol_table + 0x10)) &&\n             (*(undefined8 *)(long_value_3 + 0x28) = *(undefined8 *)(symbol_table[0x11] + (ulong)uint_value * 8),\n             long_value_1 != 0)) {\n            entry_name = *(char **)(long_value_1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        entry_name = (char *)symbol_table[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)symbol_table + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(symbol_table + 0xc) != '\\0') {\n      status = debug_start_block(param_1,symbol_table[7] + symbol_table[6] + current_address);\n      if (status == '\\0') {\n        return 0;\n      }\n      status = stab_emit_pending_vars(param_1,symbol_table);\n      if (status != '\\0') {\n        *(int *)(symbol_table + 0xe) = *(int *)(symbol_table + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_pointer = \"N_LBRAC not within function\\n\";\n  }\n  char_pointer = (char *)dcgettext(0,char_pointer,5);\n  fprintf(_stderr,char_pointer);\n  return 0;\ncode_r0x00111cc7:\n  local_char_pointer = local_char_pointer + 2;\n  local_char_pointer = strchr(local_char_pointer,0x3a);\n  if (local_char_pointer == (char *)0x0) {\n    char_pointer = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_char_pointer = char_pointer;\n    bad_stab(entry_name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (status != 't') {\n      return 1;\n    }\n    long_pointer = (long *)debug_name_type(param_1,char_pointer_2,long_pointer);\n    if (long_pointer != (long *)0x0) {\n      if (local_long_pointer_pointer_array[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_long_pointer_pointer_array[0] = long_pointer;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *char_pointer_2) &&\n     (index = strcmp((char *)pplVar18[1],char_pointer_2), index == 0)) {\n    pplVar18[3] = long_pointer;\n    *pplong_pointer_pointer = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pplong_pointer_pointer = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long_value_1 < 1) {\nLAB_0011208f:\n    undefined_value = 1;\nLAB_001121c4:\n    status = debug_record_variable(param_1,char_pointer_2,long_value_3,undefined_value,current_address);\njoined_r0x001123f8:\n    if (status != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_pointer = *(char **)(*long_pointer + 8);\n  if ((status != '\\0') && (status == *char_pointer)) {\n    char_pointer = char_pointer + 1;\n  }\n  if ((*char_pointer == *char_pointer_2) && (index = strcmp(char_pointer,char_pointer_2), index == 0)) {\n    current_address = *(long *)(*long_pointer + 0x10) + *(long *)(*(long *)(*long_pointer + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long_value_1 = long_value_1 + -1;\n  long_pointer = long_pointer + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "xstrdup",
                "debug_record_function",
                "strtod",
                "stab_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_tag_type",
                "strtol",
                "debug_record_variable",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "free",
                "parse_stab_type",
                "fprintf",
                "debug_record_parameter",
                "savestring",
                "debug_end_block",
                "debug_end_function",
                "strlen",
                "bad_stab",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "warn_stab",
                "debug_start_block",
                "stab_emit_pending_vars",
                "strchr",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "debug_start_source",
                "debug_make_function_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_stab_entry_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "analyze_binary_00115dc0",
                "param_2": "param_list",
                "cVar1": "skip_result",
                "iVar2": "error_code",
                "uVar3": "reloc_size",
                "lVar4": "section_offset",
                "puVar5": "reloc_list",
                "uVar6": "reloc_count",
                "UNRECOVERED_JUMPTABLE": "jmp_table",
                "puVar7": "filtered_reloc_list",
                "puVar8": "filtered_reloc_list_ptr",
                "uVar9": "loop_counter",
                "uStack_38": "message_ptr"
            },
            "code": "\nvoid analyze_binary_00115dc0(undefined8 param_1,undefined8 *param_list,long param_3)\n\n{\n  char skip_result;\n  int error_code;\n  undefined8 reloc_size;\n  long section_offset;\n  undefined8 *reloc_list;\n  ulong reloc_count;\n  code *jmp_table;\n  undefined8 *filtered_reloc_list;\n  undefined8 *filtered_reloc_list_ptr;\n  ulong loop_counter;\n  undefined8 message_ptr;\n  \n  skip_result = skip_section(param_1,param_list,0);\n  if (skip_result != '\\0') {\n    return;\n  }\n  reloc_size = param_list[0xc];\n  if ((((*(byte *)(param_3 + 0x48) & 7) != 3) && (strip_symbols != 6)) &&\n     (section_offset = find_section_list(*param_list,0,0x100), section_offset == 0)) {\n    section_offset = bfd_get_reloc_upper_bound(param_1,param_list);\n    if (section_offset < 0) {\n      if ((section_offset != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n        status = 1;\n        reloc_size = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,param_1,param_list,reloc_size,message_ptr);\n        return;\n      }\n    }\n    else if (section_offset != 0) {\n      reloc_list = (undefined8 *)param_list[0xe];\n      if (reloc_list == (undefined8 *)0x0) {\n        reloc_list = (undefined8 *)bfd_alloc(param_3);\n        if (reloc_list == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(param_1,param_list,reloc_list,isympp);\n        if ((long)reloc_count < 0) {\n          status = 1;\n          reloc_size = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(param_list + 0xf);\n      }\n      if (strip_symbols == 7) {\n        filtered_reloc_list = reloc_list;\n        for (loop_counter = 0; loop_counter != reloc_count; loop_counter = loop_counter + 1) {\n          filtered_reloc_list_ptr = filtered_reloc_list;\n          if (((*(long **)reloc_list[loop_counter] != (long *)0x0) &&\n              (section_offset = **(long **)reloc_list[loop_counter], section_offset != 0)) &&\n             (skip_result = is_specified_symbol(*(undefined8 *)(section_offset + 8),keep_specific_htab),\n             skip_result != '\\0')) {\n            filtered_reloc_list_ptr = filtered_reloc_list + 1;\n            *filtered_reloc_list = reloc_list[loop_counter];\n          }\n          filtered_reloc_list = filtered_reloc_list_ptr;\n        }\n        *filtered_reloc_list = 0;\n        reloc_count = (long)filtered_reloc_list - (long)reloc_list >> 3;\n      }\n      jmp_table = *(code **)(*(long *)(param_3 + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_list = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_list = (undefined8 *)0x0;\n  jmp_table = *(code **)(*(long *)(param_3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmp_table)(param_3,reloc_size,reloc_list,reloc_count);\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_error",
                "skip_section",
                "dcgettext",
                "copy_relocations_in_section.cold",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_binary_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "copy_file",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "report",
                "bfd_nonfatal_message",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_identifier_0010d559",
                "param_1": "identifiers",
                "param_2": "input",
                "param_3": "count",
                "bVar1": "byteValue",
                "pbVar2": "currentByte",
                "cVar3": "charResult",
                "uVar4": "lengthResult",
                "iVar5": "comparisonResult",
                "ppcVar6": "templates",
                "sVar7": "strlenResult",
                "lVar8": "typeResult",
                "plVar9": "fields",
                "pcVar10": "typeName",
                "__s1": "typeName2",
                "__ptr": "strPtr",
                "pbVar11": "updatedByte",
                "uVar12": "taggedTypeValue",
                "__nptr": "numberByte",
                "local_64": "loopIterations",
                "local_40": "localArray"
            },
            "code": "\nundefined8 parseIdentifier_0010d559(undefined8 *identifiers,byte **input,long *count)\n\n{\n  byte byteValue;\n  byte *currentByte;\n  char charResult;\n  uint lengthResult;\n  int comparisonResult;\n  char **templates;\n  size_t strlenResult;\n  long typeResult;\n  long *fields;\n  char *typeName;\n  char *typeName2;\n  void *strPtr;\n  byte *updatedByte;\n  undefined8 taggedTypeValue;\n  byte *numberByte;\n  int loopIterations;\n  char *localArray [2];\n  \n  currentByte = *input;\n  byteValue = currentByte[1];\n  if ((char)byteValue < ':') {\n    if ((char)byteValue < '1') goto LAB_0010d5d8;\n    loopIterations = (char)byteValue + -0x30;\n    if (currentByte[2] == 0x5f) {\n      *input = currentByte + 1;\n    }\n    updatedByte = *input + 2;\n  }\n  else {\n    if (((byteValue != 0x5f) || (((&_sch_istable)[(ulong)currentByte[2] * 2] & 4) == 0)) ||\n       (currentByte[2] == 0x30)) goto LAB_0010d5d8;\n    numberByte = currentByte + 2;\n    typeResult = strtol((char *)numberByte,(char **)0x0,10);\n    loopIterations = (int)typeResult;\n    while (((&_sch_istable)[(ulong)*numberByte * 2] & 4) != 0) {\n      numberByte = numberByte + 1;\n    }\n    updatedByte = numberByte + 1;\n    if (*numberByte != 0x5f) goto LAB_0010d5d8;\n  }\n  *input = updatedByte;\n  templates = (char **)0x0;\n  if (count != (long *)0x0) {\n    templates = localArray;\n  }\n  typeResult = 0;\n  while( true ) {\n    while( true ) {\n      loopIterations = loopIterations + -1;\n      if (loopIterations == -1) {\n        if (count != (long *)0x0) {\n          *count = typeResult;\n        }\n        return 1;\n      }\n      if (**input == 0x5f) {\n        *input = *input + 1;\n      }\n      if (**input != 0x74) break;\n      charResult = stab_demangle_template(identifiers,input,templates);\n      typeName = localArray[0];\n      if (charResult == '\\0') {\n        return 0;\n      }\n      if (count != (long *)0x0) {\n        strlenResult = strlen(localArray[0]);\n        typeResult = stab_find_tagged_type(*identifiers,identifiers[1],typeName,strlenResult & 0xffffffff,9);\n        free(typeName);\n        if (typeResult == 0) {\n          return 0;\n        }\n      }\n    }\n    lengthResult = stab_demangle_count(input);\n    strlenResult = strlen((char *)*input);\n    if (strlenResult < lengthResult) break;\n    if (count != (long *)0x0) {\n      if ((typeResult != 0) && (fields = (long *)debug_get_fields_isra_0(typeResult), fields != (long *)0x0))\n      {\n        typeName = (char *)savestring(*input,lengthResult);\n        for (; typeResult = *fields, typeResult != 0; fields = fields + 1) {\n          typeResult = *(long *)(typeResult + 8);\n          if (typeResult == 0) {\n            free(typeName);\n            return 0;\n          }\n          typeName2 = (char *)debug_get_type_name_constprop_0(typeResult);\n          if ((typeName2 != (char *)0x0) && (comparisonResult = strcmp(typeName2,typeName), comparisonResult == 0)) break;\n        }\n        free(typeName);\n        if (typeResult != 0) goto LAB_0010d7ad;\n      }\n      taggedTypeValue = 9;\n      if (loopIterations == 0) {\n        strPtr = (void *)savestring(*input,lengthResult);\n        typeResult = debug_find_named_type(*identifiers,strPtr);\n        free(strPtr);\n        if (typeResult != 0) goto LAB_0010d7ad;\n        taggedTypeValue = 0;\n      }\n      typeResult = stab_find_tagged_type(*identifiers,identifiers[1],*input,lengthResult,taggedTypeValue);\n      if (typeResult == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input = *input + lengthResult;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(currentByte);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "savestring",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_find_tagged_type",
                "stab_demangle_template",
                "free",
                "debug_get_type_name.constprop.0",
                "stab_demangle_count",
                "strcmp",
                "strtol",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_identifier_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "format_string",
                "param_2": "arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "executable_name"
            },
            "code": "\n\n\nvoid print_error_message_00119e70(char *format_string,__gnuc_va_list arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",executable_name);\n  vfprintf(standard_error,format_string,arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree",
                "status": "currentStatus"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  currentStatus = 1;\n  bfd_nonfatal_message(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_integer_00108e76",
                "param_1": "input",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint parseInteger_00108e76(byte **input)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **input;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_integer_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "param_1": "input_value",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "lVar1": "hash_function_ptr"
            },
            "code": "\nlong create_hash_function_0010bb52(long input_value,undefined8 param_2_value,undefined8 param_3_value)\n\n{\n  long hash_function_ptr;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2_value,0x30), input_value != 0)) &&\n     (hash_function_ptr = bfd_hash_newfunc(input_value,param_2_value,param_3_value), hash_function_ptr != 0)) {\n    *(undefined8 *)(hash_function_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_function_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_function_ptr + 0x28) = 0;\n    return hash_function_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "create_hash_function_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_access_0011283f",
                "param_1": "path",
                "param_2": "directory",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * check_directory_access_0011283f(char *path,char *directory)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((directory == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        directory = path;\n      }\n    }\n  }\n  return directory;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_access_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "copy_section",
                "FUN_00107880",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer",
                "iVar1": "originalErrnoValue"
            },
            "code": "\nundefined8 closeFile_00108237(void)\n\n{\n  int originalErrnoValue;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  originalErrnoValue = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = originalErrnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "base_address",
                "param_2": "filename",
                "param_3": "record_size",
                "param_4": "flags",
                "uVar1": "error_message",
                "plVar2": "record_ptr",
                "puVar3": "debug_data_ptr",
                "lVar4": "temp_var",
                "puVar5": "temp_ptr",
                "pcVar6": "temp_char_ptr",
                "bVar7": "temp_byte",
                "auVar8": "return_val"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long base_address,char *filename,long record_size,uint flags,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *record_ptr;\n  undefined4 *debug_data_ptr;\n  long temp_var;\n  undefined4 *temp_ptr;\n  char *temp_char_ptr;\n  byte temp_byte;\n  undefined return_val [16];\n  \n  temp_byte = 0;\n  temp_char_ptr = \"\";\n  if (filename != (char *)0x0) {\n    temp_char_ptr = filename;\n  }\n  if (record_size != 0) {\n    if (*(long *)(base_address + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      record_ptr = (long *)xmalloc(0x18);\n      *record_ptr = record_size;\n      *(undefined (*) [16])(record_ptr + 1) = ZEXT816(0);\n      debug_data_ptr = (undefined4 *)xmalloc(0x30);\n      *(long **)(base_address + 0x18) = record_ptr;\n      record_ptr[2] = (long)debug_data_ptr;\n      temp_ptr = debug_data_ptr;\n      for (temp_var = 0xc; temp_var != 0; temp_var = temp_var + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)temp_byte * -2 + 1;\n      }\n      *(undefined4 **)(base_address + 0x20) = debug_data_ptr;\n      temp_var = *(long *)(base_address + 0x10);\n      *(undefined8 *)(debug_data_ptr + 6) = param_5;\n      *(undefined8 *)(debug_data_ptr + 8) = 0xffffffffffffffff;\n      temp_var = debug_add_to_namespace_constprop_0(temp_var + 0x10,temp_char_ptr,3,(flags & 0xff) + 1);\n      if (temp_var != 0) {\n        *(long **)(temp_var + 0x20) = record_ptr;\n        error_message = CONCAT71((int7)((ulong)temp_var >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_val._8_8_ = param_6;\n  return_val._0_8_ = error_message;\n  return return_val;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_binary_function_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00107880",
                "non_fatal",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "main",
                "simple_copy.cold",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_and_initialize_directory_path_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlash",
                "lVar2": "remainingLength",
                "lVar3": "allocatedLength",
                "lVar4": "pathLength",
                "pcVar5": "writePosition",
                "bVar6": "isSlashPresent"
            },
            "code": "\nvoid allocateAndInitializeDirectoryPath_00114cf0(char *path)\n\n{\n  char *lastSlash;\n  long remainingLength;\n  long allocatedLength;\n  long pathLength;\n  char *writePosition;\n  byte isSlashPresent;\n  \n  isSlashPresent = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    allocatedLength = 0;\n  }\n  else {\n    pathLength = (long)lastSlash - (long)path;\n    lastSlash = (char *)xmalloc(pathLength + 0xb);\n    allocatedLength = pathLength + 1;\n    writePosition = lastSlash;\n    for (remainingLength = pathLength; remainingLength != 0; remainingLength = remainingLength + -1) {\n      *writePosition = *path;\n      path = path + (ulong)isSlashPresent * -2 + 1;\n      writePosition = writePosition + (ulong)isSlashPresent * -2 + 1;\n    }\n    lastSlash[pathLength] = '/';\n  }\n  *(undefined8 *)(lastSlash + allocatedLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + allocatedLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_directory_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_string_0010a181",
                "param_1": "baseAddress",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "checkFlag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "newString",
                "lVar7": "count",
                "local_41": "modifiedFlag",
                "iVar2": "ptr1",
                "iVar3": "result",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 generateString_0010a181(long baseAddress,long startValue,long endValue,byte flag)\n\n{\n  char checkFlag;\n  int ptr1;\n  int result;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t len1;\n  size_t len2;\n  char *newString;\n  long count;\n  byte modifiedFlag;\n  \n  checkFlag = *(char *)(*(long *)(baseAddress + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  modifiedFlag = 1;\n  if (checkFlag == '\\0') {\n    modifiedFlag = *(byte *)(*(long *)(baseAddress + 0x60) + 0x1c);\n  }\n  ptr1 = *(int *)(*(long *)(baseAddress + 0x60) + 0x18);\n  string2 = (char *)stab_pop_type(baseAddress);\n  len1 = strlen(string1);\n  len2 = strlen(string2);\n  newString = (char *)xmalloc(len1 + 100 + len2);\n  if (flag == 0) {\n    *newString = '\\0';\n    count = 0;\n    modifiedFlag = modifiedFlag & 1;\n  }\n  else {\n    count = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = count + 1;\n    sprintf(newString,\"%ld=@S;\",count);\n    modifiedFlag = flag;\n  }\n  len1 = strlen(newString);\n  sprintf(newString + len1,\"ar%s;%ld;%ld;%s\",string1,startValue,endValue,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (startValue <= endValue) {\n    result = ptr1 * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = stab_push_string(baseAddress,newString,count,modifiedFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(newString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_string_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "display_bfd_target_info_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "archMachIndex",
                "iVar3": "strcmpResult",
                "pcVar4": "locMessage",
                "sVar5": "strLen",
                "pcVar6": "tempDirPath",
                "uVar7": "archMachStr",
                "piVar8": "errnoPtr",
                "iVar9": "innerLoopIndex",
                "lVar10": "outerLoopIndex",
                "lVar11": "tempIndex",
                "ppcVar12": "tarPointer",
                "uVar13": "maxArchMachLen",
                "uVar14": "archMachLen",
                "local_70": "loopIndex"
            },
            "code": "\n\n\nvoid displayBFDTargetInfo_001199d0(void)\n\n{\n  int columnWidth;\n  int archMachIndex;\n  int strcmpResult;\n  char *locMessage;\n  size_t strLen;\n  char *tempDirPath;\n  undefined8 archMachStr;\n  int *errnoPtr;\n  int innerLoopIndex;\n  long outerLoopIndex;\n  long tempIndex;\n  char **tarPointer;\n  uint maxArchMachLen;\n  ulong archMachLen;\n  int loopIndex;\n  \n  locMessage = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(locMessage,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    locMessage = getenv(\"TMPDIR\");\n    archMachStr = try_dir_lto_priv_0(locMessage,0);\n    locMessage = getenv(\"TMP\");\n    archMachStr = try_dir_lto_priv_0(locMessage,archMachStr);\n    locMessage = getenv(\"TEMP\");\n    archMachStr = try_dir_lto_priv_0(locMessage,archMachStr);\n    archMachStr = try_dir_lto_priv_0(&DAT_0011b39a,archMachStr);\n    archMachStr = try_dir_lto_priv_0(vartmp,archMachStr);\n    locMessage = (char *)try_dir_lto_priv_0(&tmp,archMachStr);\n    if (locMessage == (char *)0x0) {\n      locMessage = \".\";\n    }\n    strLen = strlen(locMessage);\n    tempDirPath = (char *)xmalloc((int)strLen + 2);\n    memoized_tmpdir = strcpy(tempDirPath,locMessage);\n    memoized_tmpdir[strLen & 0xffffffff] = '/';\n    memoized_tmpdir[(int)strLen + 1] = '\\0';\n  }\n  locMessage = memoized_tmpdir;\n  strLen = strlen(memoized_tmpdir);\n  outerLoopIndex = (long)(int)strLen;\n  tempDirPath = (char *)xmalloc(outerLoopIndex + 9);\n  strcpy(tempDirPath,locMessage);\n  *(undefined2 *)(tempDirPath + outerLoopIndex) = 0x6363;\n  *(undefined4 *)(tempDirPath + outerLoopIndex + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempDirPath + outerLoopIndex + 2) + 3) = 0x585858;\n  tempDirPath[outerLoopIndex + 8] = '\\0';\n  archMachIndex = mkstemps(tempDirPath,0);\n  if (archMachIndex == -1) {\n    errnoPtr = __errno_location();\n    tempDirPath = strerror(*errnoPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",locMessage,tempDirPath);\n                    \n    abort();\n  }\n  archMachIndex = close(archMachIndex);\n  if (archMachIndex != 0) {\n                    \n    abort();\n  }\n  maxArchMachLen = 0;\n  archMachIndex = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempDirPath);\n  free(tempDirPath);\n  loopIndex = 0;\n  do {\n    locMessage = (char *)bfd_printable_arch_mach(archMachIndex);\n    strLen = strlen(locMessage);\n    if ((int)maxArchMachLen < (int)(uint)strLen) {\n      maxArchMachLen = (uint)strLen;\n    }\n    archMachIndex = archMachIndex + 1;\n  } while (archMachIndex != 0x57);\n  locMessage = getenv(\"COLUMNS\");\n  archMachIndex = loopIndex;\n  if (locMessage != (char *)0x0) {\n    outerLoopIndex = strtol(locMessage,(char **)0x0,10);\n    columnWidth = (int)outerLoopIndex;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    loopIndex = archMachIndex;\n    if (-1 < loopIndex) {\n      return;\n    }\n    tempIndex = (long)loopIndex;\n    innerLoopIndex = (columnWidth - maxArchMachLen) + -1;\n    outerLoopIndex = tempIndex;\n    do {\n      archMachIndex = (int)outerLoopIndex;\n      if (-1 < archMachIndex) break;\n      strLen = strlen(*(char **)(outerLoopIndex * 0x60));\n      outerLoopIndex = outerLoopIndex + 1;\n      innerLoopIndex = (innerLoopIndex - (int)strLen) + -1;\n    } while (-1 < innerLoopIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLen + 1),&DAT_0011b4a1);\n    for (tarPointer = (char **)(tempIndex * 0x60);\n        ((ulong)(uint)(archMachIndex - loopIndex) + tempIndex) * 0x60 - (long)tarPointer != 0;\n        tarPointer = tarPointer + 0xc) {\n      printf(\"%s \",*tarPointer);\n    }\n    innerLoopIndex = 2;\n    putc(10,_stdout);\n    do {\n      locMessage = (char *)bfd_printable_arch_mach(innerLoopIndex,0);\n      strcmpResult = strcmp(locMessage,\"UNKNOWN!\");\n      if (strcmpResult != 0) {\n        archMachStr = bfd_printable_arch_mach(innerLoopIndex,0);\n        printf(\"%*s \",(ulong)maxArchMachLen,archMachStr);\n        tarPointer = (char **)(tempIndex * 0x60);\n        strcmpResult = loopIndex;\n        while (archMachIndex != strcmpResult) {\n          if (*(char *)((long)tarPointer + (ulong)(innerLoopIndex - 2) + 8) == '\\0') {\n            strLen = strlen(*tarPointer);\n            for (archMachLen = strLen & 0xffffffff; (int)archMachLen != 0; archMachLen = (ulong)((int)archMachLen - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*tarPointer,_stdout);\n          }\n          strcmpResult = strcmpResult + 1;\n          if (archMachIndex != strcmpResult) {\n            putc(0x20,_stdout);\n          }\n          tarPointer = tarPointer + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      innerLoopIndex = innerLoopIndex + 1;\n    } while (innerLoopIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "try_dir.lto_priv.0",
                "strlen",
                "dcgettext",
                "getenv",
                "strcpy",
                "display_info.isra.0.cold",
                "do_display_target",
                "xmalloc",
                "__errno_location",
                "bfd_printable_arch_mach",
                "mkstemps",
                "close",
                "abort",
                "bfd_iterate_over_targets",
                "unlink",
                "free",
                "printf",
                "strerror",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_bfd_target_info_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "reconstruct_gnu_build_attribute_notes_0010847a"
            },
            "code": "\nvoid reconstruct_gnu_build_attribute_notes_0010847a(void)\n\n{\n  reconstruct_gnu_build_attribute_notes_0010847a_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "reconstruct_gnu_build_attribute_notes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_improve_0010d21c",
                "param_1": "input",
                "param_2": "byteArray",
                "param_3": "outputArray",
                "bVar1": "byte1",
                "pbVar2": "bytePointer",
                "bVar3": "byteVar",
                "cVar4": "charVar",
                "bVar5": "byteVar2",
                "uVar6": "result",
                "iVar7": "intVar",
                "uVar8": "uintVar",
                "sVar9": "size",
                "pbVar10": "bytePointer2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "var11",
                "uVar12": "var12",
                "pcVar13": "var13",
                "bVar14": "byteVar3",
                "pcVar15": "var15",
                "bVar16": "byteVar4",
                "bVar17": "byteVar5",
                "bVar18": "byteVar6",
                "bVar19": "byteVar7",
                "uVar20": "count",
                "uVar21": "ulongVar",
                "local_3c": "array",
                "_sch_istable": "sch_istable"
            },
            "code": "\nundefined4 reverseAndImprove_0010d21c(undefined8 input,byte **byteArray,undefined8 *outputArray)\n\n{\n  byte byte1;\n  byte *bytePointer;\n  byte byteVar;\n  char charVar;\n  byte byteVar2;\n  undefined4 result;\n  int intVar;\n  uint uintVar;\n  size_t size;\n  byte *bytePointer2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 var12;\n  char *var13;\n  byte byteVar3;\n  char *var15;\n  byte byteVar4;\n  byte byteVar5;\n  byte byteVar6;\n  byte byteVar7;\n  uint count;\n  ulong ulongVar;\n  uint array [3];\n  \n  bytePointer = *byteArray;\n  *byteArray = bytePointer + 1;\n  array[0] = stab_demangle_count(byteArray);\n  ulongVar = (ulong)array[0];\n  if (array[0] != 0) {\n    bytePointer2 = *byteArray;\n    size = strlen((char *)bytePointer2);\n    if (ulongVar <= size) {\n      *byteArray = bytePointer2 + ulongVar;\n      count = 0;\n      result = stab_demangle_get_count(byteArray,array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (array[0] <= count) {\n          if (outputArray == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)savestring(bytePointer,(int)*byteArray - (int)bytePointer);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            var12 = savestring(haystack,(int)var15 - (int)haystack);\n            *outputArray = var12;\n            free(haystack);\n            return result;\n          }\n          stab_bad_demangle(bytePointer);\n          free(haystack);\n          return 0;\n        }\n        bytePointer2 = *byteArray;\n        if (*bytePointer2 != 0x5a) {\n          byteVar2 = stab_demangle_type_lto_priv_0(input,byteArray,0);\n          if (byteVar2 == 0) {\n            return 0;\n          }\n          byteVar = 0;\n          byteVar3 = 0;\n          byteVar6 = 0;\n          byteVar5 = 0;\n          byteVar7 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar4 = byteVar;\n              byte1 = *bytePointer2;\n              if ((byteVar3 | byte1 == 0) != 0) {\n                byteVar2 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar = byteVar2;\n              byteVar3 = byteVar2;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              bytePointer2 = bytePointer2 + 1;\n              byteVar = byteVar4;\n              byteVar3 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byteVar = byteVar4;\n              byteVar6 = byteVar2;\n              break;\n            case 99:\n              byteVar = byteVar4;\n              byteVar7 = byteVar2;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar = byteVar4;\n              byteVar5 = byteVar2;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byteArray = bytePointer2 + 1;\n        charVar = stab_demangle_type_lto_priv_0(input,byteArray,0);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(bytePointer);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar4 == 0) {\n    if (byteVar7 == 0) {\n      if (byteVar6 == 0) {\n        if (byteVar5 == 0) {\n          if (byteVar2 != 0) {\n            uintVar = stab_demangle_count(byteArray);\n            if (uintVar == 0) goto LAB_0010d280;\n            *byteArray = *byteArray + uintVar;\n          }\n        }\n        else {\n          if (**byteArray == 0x6d) {\n            *byteArray = *byteArray + 1;\n          }\n          while( true ) {\n            bytePointer2 = *byteArray;\n            if (((&sch_istable)[(ulong)*bytePointer2 * 2] & 4) == 0) break;\n            *byteArray = bytePointer2 + 1;\n          }\n          if (*bytePointer2 == 0x2e) {\n            do {\n              bytePointer2 = bytePointer2 + 1;\n              *byteArray = bytePointer2;\n            } while (((&sch_istable)[(ulong)*bytePointer2 * 2] & 4) != 0);\n          }\n          bytePointer2 = *byteArray;\n          if (*bytePointer2 == 0x65) {\n            do {\n              bytePointer2 = bytePointer2 + 1;\n              *byteArray = bytePointer2;\n            } while (((&sch_istable)[(ulong)*bytePointer2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar = stab_demangle_count(byteArray);\n        if (1 < uintVar) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byteArray == 0x6d) {\n        *byteArray = *byteArray + 1;\n      }\n      intVar = stab_demangle_count(byteArray);\n      if (intVar == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byteArray == 0x6d) {\n      *byteArray = *byteArray + 1;\n    }\n    while (((&sch_istable)[(ulong)**byteArray * 2] & 4) != 0) {\n      *byteArray = *byteArray + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "cplus_demangle",
                "savestring",
                "strlen",
                "abort",
                "strstr",
                "concat",
                "stab_demangle_type.lto_priv.0",
                "free",
                "stab_demangle_count",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_htabs_001054af",
                "param_1": "unused_param",
                "param_2": "unused_param",
                "in_RAX": "return_value"
            },
            "code": "\nvoid cleanup_htabs_001054af(undefined8 unused_param,undefined8 unused_param)\n\n{\n  undefined8 return_value;\n  \n  htab_delete(strip_specific_htab);\n  htab_delete(strip_unneeded_htab);\n  htab_delete(keep_specific_htab);\n  htab_delete(localize_specific_htab);\n  htab_delete(globalize_specific_htab);\n  htab_delete(keepglobal_specific_htab);\n  htab_delete(weaken_specific_htab);\n  htab_delete(redefine_specific_htab);\n  htab_delete(redefine_specific_reverse_htab,unused_param,return_value);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_htabs_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "record_or_debug_variable_0010c139",
                "param_1": "record",
                "param_2": "object_ptr",
                "param_3": "value",
                "param_4": "type",
                "param_5": "flag",
                "param_6": "address",
                "uVar1": "old_ptr",
                "cVar2": "flag_value",
                "uVar3": "result",
                "puVar4": "new_ptr",
                "in_R10": "unused",
                "unaff_R15": "unused"
            },
            "code": "\nulong record_or_debug_variable_0010c139(undefined8 record,long object_ptr,undefined8 value,undefined8 type,\n                  undefined4 flag,undefined8 address)\n\n{\n  undefined8 old_ptr;\n  char flag_value;\n  ulong result;\n  undefined8 *new_ptr;\n  undefined8 unused;\n  undefined8 unused;\n  \n  flag_value = *(char *)(object_ptr + 0x60);\n  if ((flag_value != '\\0') && ((*(int *)(object_ptr + 0x40) != 0 || (*(char *)(object_ptr + 0x44) == '\\0')))) {\n    new_ptr = (undefined8 *)xmalloc(0x28);\n    old_ptr = *(undefined8 *)(object_ptr + 0x78);\n    *(undefined8 *)((long)new_ptr + 0x1c) = 0;\n    new_ptr[2] = type;\n    *(undefined4 *)(new_ptr + 3) = flag;\n    new_ptr[4] = address;\n    *(undefined8 **)(object_ptr + 0x78) = new_ptr;\n    *new_ptr = old_ptr;\n    new_ptr[1] = value;\n    return CONCAT71((int7)((ulong)unused >> 8),flag_value) & 0xffffffff;\n  }\n  result = debug_record_variable(record,value,type,flag,address,unused);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "record_or_debug_variable_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "write_symbol_to_stab_0010e439",
                "param_1": "base_address",
                "param_2": "symbol_address",
                "stab_write_symbol_lto_priv_0": "write_symbol_to_stab_table"
            },
            "code": "\nvoid write_symbol_to_stab_0010e439(long base_address,undefined8 symbol_address)\n\n{\n  *(undefined8 *)(base_address + 0x210) = symbol_address;\n  write_symbol_to_stab_0010e439_table(base_address,0x84,0,0,symbol_address);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_stab_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "main",
                "parse_stab",
                "stab_push_string",
                "FUN_0010554f",
                "save_stab"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "stab_modify_type",
                "FUN_00114dc7",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "stab_class_start_method.lto_priv.0",
                "stab_demangle_remember_type",
                "stab_demangle_v3_arglist",
                "do_display_target",
                "stab_class_baseclass.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_class_method_var",
                "stab_demangle_arg",
                "stab_get_struct_index",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "try_dir.lto_priv.0",
                "FUN_00104ea2",
                "main",
                "get_file_size"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "data",
                "param_2": "count",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 data,int count)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (count - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(count - 1U) * 8);\n  }\n  stab_push_defined_type(data,defaultValue,count);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_validity_00112502",
                "param_1": "input",
                "param_2": "parameter",
                "param_3": "value",
                "uVar1": "counter",
                "puVar2": "ptrArray",
                "uVar3": "returnValue",
                "cVar4": "flag"
            },
            "code": "\nundefined checkValidity_00112502(long input,undefined8 parameter,ulong value)\n\n{\n  uint counter;\n  undefined8 *ptrArray;\n  undefined8 returnValue;\n  char flag;\n  \n  do {\n    ptrArray = *(undefined8 **)(input + 0x40);\n    if (ptrArray == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(input + 0x48), counter < 10 && (ptrArray[(ulong)counter + 2] != -1))) {\n      if (value <= (ulong)ptrArray[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      flag = stab_lineno_lto_priv_0(parameter,*(undefined8 *)(ptrArray[1] + 8));\n      if (flag == '\\0') {\n        return 0;\n      }\n      *(int *)(input + 0x48) = *(int *)(input + 0x48) + 1;\n    }\n    returnValue = *ptrArray;\n    *(undefined4 *)(input + 0x48) = 0;\n    *(undefined8 *)(input + 0x40) = returnValue;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "check_validity_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "parse_lines_00104cc1",
                "unaff_RBX": "inputPtr",
                "unaff_EBP": "counter",
                "in_R10": "linePtr",
                "unaff_R13": "returnValue",
                "unaff_R14": "currentLine",
                "unaff_R15": "previousLine",
                "param_7": "param1",
                "param_8": "param2",
                "param_9": "param3",
                "uVar1": "message",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "pbVar5": "lineStart"
            },
            "code": "\nvoid parseLines_00104cc1(void)\n\n{\n  undefined8 message;\n  byte **slotPtr;\n  byte *currentChar;\n  byte nextChar;\n  byte *inputPtr;\n  byte *lineStart;\n  int counter;\n  byte *linePtr;\n  undefined8 returnValue;\n  byte *currentLine;\n  byte *previousLine;\n  undefined8 param1;\n  undefined8 *param2;\n  byte *param3;\n  \ncode_r0x00104cc1:\n  param3 = linePtr;\n  message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(message,param1,counter);\n  lineStart = inputPtr;\n  linePtr = param3;\nLAB_00114599:\n  do {\n    *linePtr = 0;\n    if (previousLine < linePtr) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = previousLine;\n    }\n    counter = counter + 1;\n    currentChar = lineStart;\n    if (currentLine[1] == 0) {\n      *param2 = returnValue;\n      return;\n    }\n    for (; nextChar = *currentChar, currentLine = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          inputPtr = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          inputPtr = currentChar + 1;\n          if (currentChar[1] == 10) {\n            inputPtr = currentChar + 2;\n            currentLine = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          parse_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      currentLine = currentChar + 1;\n      inputPtr = currentChar + 2;\n    }\n    else {\n      inputPtr = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *lineStart;\n    previousLine = lineStart;\n    while ((nextChar == 0x20 || (linePtr = previousLine, nextChar == 9))) {\n      lineStart = previousLine + 1;\n      previousLine = previousLine + 1;\n      nextChar = *lineStart;\n    }\n    do {\n      lineStart = inputPtr;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = linePtr[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = linePtr[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = linePtr[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = linePtr[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = linePtr[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = linePtr[6];\n      currentChar = linePtr + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "non_fatal",
                "htab_find_slot",
                "dcgettext",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_type_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "typeHandle",
                "plVar2": "typePointer"
            },
            "code": "\nlong createType_00113bfa(long input1,long input2)\n\n{\n  long typeHandle;\n  long *typePointer;\n  \n  if (((input1 != 0) && (input2 != 0)) &&\n     (typeHandle = debug_make_type_constprop_0(0x12,0), typeHandle != 0)) {\n    typePointer = (long *)xmalloc(0x10);\n    *typePointer = input1;\n    typePointer[1] = input2;\n    *(long **)(typeHandle + 0x10) = typePointer;\n    return typeHandle;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_type_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "validate_and_drop_share_flag_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "message",
                "unaff_EBX": "ebx_value"
            },
            "code": "\nuint validate_and_drop_share_flag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 message;\n  uint ebx_value;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    value1 = *param2;\n    ebx_value = ebx_value & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(message,value1,param3);\n  }\n  return ebx_value;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "validate_and_drop_share_flag_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "format_and_push_string_00109e76",
                "param_1": "functionData",
                "param_2": "paramValue",
                "lVar1": "counter",
                "local_5a": "formattedString"
            },
            "code": "\nvoid formatAndPushString_00109e76(long functionData,uint paramValue)\n\n{\n  long counter;\n  char formattedString [58];\n  \n  counter = *(long *)(functionData + 0x68);\n  *(long *)(functionData + 0x68) = counter + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",counter,counter,(ulong)paramValue);\n  stab_push_string(functionData,formattedString,counter,1,paramValue * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_saved_stabs_001088ae",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "newIndex",
                "lVar2": "offset",
                "uVar3": "duplicatedValue"
            },
            "code": "\nulong updateSavedStabs_001088ae(undefined4 flag1,undefined4 flag2,undefined8 value1,undefined8 value2)\n\n{\n  int newIndex;\n  long offset;\n  undefined8 duplicatedValue;\n  \n  offset = (long)saved_stabs_index * 0x18;\n  free(*(void **)(saved_stabs + offset + 0x10));\n  *(undefined4 *)(saved_stabs + offset) = flag1;\n  *(undefined4 *)(saved_stabs + offset + 4) = flag2;\n  *(undefined8 *)(saved_stabs + offset + 8) = value1;\n  duplicatedValue = xstrdup(value2);\n  *(undefined8 *)(saved_stabs + offset + 0x10) = duplicatedValue;\n  newIndex = saved_stabs_index + 1;\n  saved_stabs_index = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_saved_stabs_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "stab_lineno.lto_priv.0",
                "debug_start_source"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_list_0010afd5",
                "param_1": "stringList",
                "param_2": "context",
                "param_3": "inputString",
                "param_4": "inputLength",
                "param_5": "dataType",
                "param_6": "result",
                "__s2": "targetString",
                "puVar2": "currentList",
                "uVar3": "tempResult",
                "lVar4": "tempValue",
                "puVar5": "currentNode",
                "puVar6": "tempData",
                "bVar7": "flag",
                "auVar8": "returnVal"
            },
            "code": "\nundefined  [16]\nfindStringInList_0010afd5(undefined8 *stringList,long context,undefined8 inputString,undefined4 inputLength,\n            undefined4 dataType,undefined8 result)\n\n{\n  int iVar1;\n  char *targetString;\n  undefined8 *currentList;\n  undefined8 tempResult;\n  long tempValue;\n  undefined8 *currentNode;\n  undefined4 *tempData;\n  byte flag;\n  undefined returnVal [16];\n  \n  flag = 0;\n  targetString = (char *)savestring(inputString,inputLength);\n  for (stringList = (undefined8 *)*stringList; stringList != (undefined8 *)0x0;\n      stringList = (undefined8 *)*stringList) {\n    for (currentList = (undefined8 *)stringList[1]; currentList != (undefined8 *)0x0;\n        currentList = (undefined8 *)*currentList) {\n      if ((undefined8 *)currentList[2] != (undefined8 *)0x0) {\n        for (currentNode = *(undefined8 **)(undefined8 *)currentList[2]; currentNode != (undefined8 *)0x0;\n            currentNode = (undefined8 *)*currentNode) {\n          if ((*(int *)((long)currentNode + 0x14) == 1) && (*(char *)currentNode[1] == *targetString)) {\n            iVar1 = strcmp((char *)currentNode[1],targetString);\n            if (iVar1 == 0) {\n              tempValue = currentNode[4];\n              if (tempValue == 0) goto LAB_0010b05b;\n              free(targetString);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentList = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (currentList == (undefined8 *)0x0) {\n      currentList = (undefined8 *)xmalloc(0x28);\n      tempResult = *(undefined8 *)(context + 0x1a0);\n      tempData = (undefined4 *)((long)currentList + 0x14);\n      for (tempValue = 5; tempValue != 0; tempValue = tempValue + -1) {\n        *tempData = 0;\n        tempData = tempData + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(currentList + 2) = dataType;\n      *currentList = tempResult;\n      currentList[1] = targetString;\n      tempResult = debug_make_indirect_type_isra_0(currentList + 3,targetString);\n      *(undefined8 **)(context + 0x1a0) = currentList;\n      currentList[4] = tempResult;\nLAB_0010b0e7:\n      tempValue = currentList[4];\nLAB_0010b0eb:\n      returnVal._8_8_ = result;\n      returnVal._0_8_ = tempValue;\n      return returnVal;\n    }\n    if (*(char *)currentList[1] == *targetString) {\n      iVar1 = strcmp((char *)currentList[1],targetString);\n      if (iVar1 == 0) {\n        if (*(int *)(currentList + 2) == 0) {\n          *(undefined4 *)(currentList + 2) = dataType;\n        }\n        free(targetString);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentList = (undefined8 *)*currentList;\n  } while( true );\n}\n\n",
            "called": [
                "savestring",
                "debug_make_indirect_type.isra.0",
                "free",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_string_in_list_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_count",
                "debug_get_real_type.isra.0",
                "debug_make_type.constprop.0",
                "malloc",
                "sprintf",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_qualified",
                "debug_make_float_type.isra.0",
                "parse_number",
                "cplus_demangle_init_info",
                "debug_make_void_type.isra.0",
                "savestring",
                "strlen",
                "dcgettext",
                "strcpy",
                "xmalloc",
                "warn_stab",
                "parse_stab_type_number",
                "debug_make_enum_type.isra.0",
                "cplus_demangle_mangled_name",
                "startswith.lto_priv.0.lto_priv.0",
                "strchr",
                "stab_find_tagged_type",
                "xrealloc",
                "debug_find_named_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "stab_find_type",
                "stab_demangle_template",
                "strtol",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_make_const_type.isra.0",
                "free",
                "parse_stab_type",
                "strncmp",
                "fprintf",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_remember_type",
                "bad_stab",
                "strcat",
                "debug_make_offset_type.isra.0",
                "strcmp",
                "stab_bad_demangle",
                "strstr",
                "strspn",
                "concat",
                "debug_make_function_type.isra.0",
                "stab_find_slot",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_saved_stabs_entries_00108b3e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "stabEntryOffset",
                "piVar3": "ptrToSavedStab",
                "iVar4": "index",
                "saved_stabs_index": "currentIndex",
                "saved_stabs": "stabEntries"
            },
            "code": "\n\n\nundefined8 printSavedStabsEntries_00108b3e(undefined8 arg1,undefined8 arg2,undefined8 arg3)\n\n{\n  char *formatString;\n  long stabName;\n  long stabEntryOffset;\n  int *ptrToSavedStab;\n  int index;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  index = currentIndex;\n  do {\n    stabEntryOffset = (long)index * 0x18;\n    ptrToSavedStab = (int *)(stabEntries + stabEntryOffset);\n    if (*(long *)(stabEntries + stabEntryOffset + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*ptrToSavedStab);\n      if (stabName == 0) {\n        if (*ptrToSavedStab == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(stabEntries + stabEntryOffset + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(stabEntries + stabEntryOffset + 8));\n      if (*ptrToSavedStab != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(stabEntries + stabEntryOffset + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    index = (index + 1) % 0x10;\n  } while (currentIndex != index);\n  return arg3;\n}\n\n",
            "called": [
                "fwrite",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_saved_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_type_with_stab_0010a083",
                "param_1": "input",
                "stab_modify_type": "updateTypeInStab"
            },
            "code": "\nvoid modifyTypeWithStab_0010a083(long input)\n\n{\n  updateTypeInStab(input,0x2a,4,input + 0x178,input + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_with_stab_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_copy_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "var_18",
                "lVar1": "newArray",
                "plVar2": "currentElement",
                "lVar3": "remainingElements",
                "puVar4": "ptr",
                "uVar5": "arraySize",
                "bVar6": "zero",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandAndCopyArray_00109c2e(long array,long value,ulong size,int flag,undefined4 *result,\n            undefined8 var_18)\n\n{\n  long newArray;\n  long *currentElement;\n  long remainingElements;\n  undefined *ptr;\n  ulong arraySize;\n  byte zero;\n  undefined returnValue [16];\n  \n  zero = 0;\n  size = size & 0xffffffff;\n  arraySize = *(ulong *)(array + 0x1b0);\n  if (arraySize <= size) {\n    if (arraySize == 0) {\n      arraySize = 10;\n    }\n    for (; arraySize <= size; arraySize = arraySize * 2) {\n    }\n    newArray = xrealloc(*(undefined8 *)(array + 0x1a8),arraySize * 0x18);\n    *(long *)(array + 0x1a8) = newArray;\n    ptr = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newArray);\n    for (remainingElements = (arraySize - *(long *)(array + 0x1b0)) * 0x18; remainingElements != 0; remainingElements = remainingElements + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)zero * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = arraySize;\n  }\n  currentElement = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*currentElement == 0) {\n    newArray = *(long *)(array + 0x68);\n    *currentElement = newArray;\n    *(long *)(array + 0x68) = newArray + 1;\n    currentElement[1] = value;\n    *(int *)(currentElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(currentElement + 2) = 0;\n    *(undefined4 *)((long)currentElement + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)currentElement + 0x14);\n  }\n  returnValue._8_8_ = var_18;\n  returnValue._0_8_ = *currentElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_start_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "expand_and_copy_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedMessage",
                "fatal": "exitWithError"
            },
            "code": "\nvoid printBadFormatErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = getTranslatedMessage(0,\"bad format for %s\",5);\n                    \n  exitWithError(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "file_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "file_offset"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long file_ptr,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long file_offset;\n  \n  if ((*(long *)(file_ptr + 8) != 0) && (*(long *)(file_ptr + 0x10) != 0)) {\n    file_offset = *(long *)(file_ptr + 0x10) + 0x10;\n    if (*(long *)(file_ptr + 0x20) != 0) {\n      file_offset = *(long *)(file_ptr + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(file_offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_class_id_0010c7a0",
                "param_1": "inputParam",
                "param_2": "charArray",
                "param_3": "typeKind",
                "param_4": "paramValue",
                "uVar1": "result",
                "uVar2": "length",
                "lVar3": "structPtr",
                "piVar4": "intPtr",
                "__s1": "charPtr",
                "cVar5": "comparisonResult",
                "iVar6": "increment",
                "puVar7": "structNode",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setClassID_0010c7a0(long inputParam,char *charArray,int *typeKind,undefined8 paramValue)\n\n{\n  undefined8 result;\n  uint length;\n  long structPtr;\n  int *intPtr;\n  char *charPtr;\n  char comparisonResult;\n  int increment;\n  undefined8 *structNode;\n  undefined returnValue [16];\n  \n  if (3 < *typeKind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  structPtr = *(long *)(typeKind + 4);\n  structNode = (undefined8 *)(ulong)*(uint *)(structPtr + 0xc);\n  if (*(uint *)(structPtr + 0xc) <= *(uint *)(inputParam + 0x38)) {\n    for (structNode = *(undefined8 **)(inputParam + 0x50); structNode != (undefined8 *)0x0;\n        structNode = (undefined8 *)*structNode) {\n      intPtr = (int *)structNode[1];\n      if (*intPtr == *typeKind) {\n        charPtr = (char *)structNode[2];\n        if (charArray == (char *)0x0) {\n          if (charPtr == (char *)0x0) {\nLAB_0010c82c:\n            comparisonResult = debug_type_samep(inputParam,intPtr,typeKind);\n            if (comparisonResult != '\\0') {\n              length = *(uint *)(*(long *)(structNode[1] + 0x10) + 0xc);\n              structNode = (undefined8 *)(ulong)length;\n              *(uint *)(structPtr + 0xc) = length;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((charPtr != (char *)0x0) && (*charPtr == *charArray)) &&\n                (increment = strcmp(charPtr,charArray), increment == 0)) goto LAB_0010c82c;\n      }\n    }\n    increment = *(int *)(inputParam + 0x34) + 1;\n    *(int *)(inputParam + 0x34) = increment;\n    *(int *)(structPtr + 0xc) = increment;\n    structNode = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(inputParam + 0x50);\n    structNode[2] = charArray;\n    *(undefined8 **)(inputParam + 0x50) = structNode;\n    *structNode = result;\n    structNode[1] = typeKind;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)structNode >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = paramValue;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "debug_type_samep",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_values_0010922b",
                "param_1": "param1",
                "param_2": "ptr_param2",
                "param_3": "ptr_param3",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "ptr_ptr_param3",
                "ppcVar4": "ptr_ptr_param4",
                "ppcVar5": "ptr_ptr_param5",
                "lVar6": "var6",
                "lVar7": "var7",
                "lVar8": "var8",
                "pcVar9": "ptr_param9",
                "pcVar10": "ptr_param10",
                "cVar11": "char_value",
                "bVar12": "result",
                "iVar13": "int_value",
                "uVar14": "ptr_param14",
                "uVar15": "ptr_param15",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "plVar18": "ptr_param3_copy",
                "lVar19": "var19",
                "plVar20": "ptr_var20",
                "plVar21": "ptr_var21",
                "lVar22": "var22",
                "local_70": "local_ptr70",
                "local_58": "local_ptr58",
                "plStack_50": "local_stack50",
                "local_48": "local_var48"
            },
            "code": "\nbyte compare_values_0010922b(long param1,long *ptr_param2,long *ptr_param3)\n\n{\n  uint value1;\n  uint value2;\n  long **ptr_ptr_param3;\n  char **ptr_ptr_param4;\n  char **ptr_ptr_param5;\n  long var6;\n  long var7;\n  long var8;\n  char *ptr_param9;\n  char *ptr_param10;\n  char char_value;\n  byte result;\n  int int_value;\n  undefined8 ptr_param14;\n  undefined8 ptr_param15;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *ptr_param3_copy;\n  long var19;\n  long *ptr_var20;\n  long *ptr_var21;\n  long var22;\n  long *local_ptr70;\n  undefined8 *local_ptr58;\n  long *local_stack50;\n  long *local_var48;\n  \n  ptr_param3_copy = ptr_param3;\n  if (ptr_param2 == (long *)0x0) {\nLAB_00109241:\n    return ptr_param3 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr_param3_copy == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)ptr_param2;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)ptr_param3, value2 == 1) {\n      ptr_param3 = **(long ***)ptr_param3[2];\n      if (ptr_param3 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (ptr_param2 == ptr_param3) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    ptr_param2 = *(long **)(ptr_param2[2] + 8);\n    if (ptr_param2 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    ptr_param3 = *(long **)(ptr_param3[2] + 8);\n    ptr_param3_copy = ptr_param3;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*ptr_param2 != *ptr_param3) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(ptr_param2 + 2) == *(char *)(ptr_param3 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  local_ptr58 = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = local_ptr58; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == ptr_param2) && ((long *)ptr2[2] == ptr_param3)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &local_ptr58;\n  local_stack50 = ptr_param2;\n  local_var48 = ptr_param3;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr_param3_copy = (long *)ptr_param2[2];\n    ptr_ptr_param3 = (long **)ptr_param3[2];\n    if (ptr_param3_copy == (long *)0x0) {\n      result = ptr_ptr_param3 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr_param3 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptr_param3_copy + 0xc)) &&\n       (*(uint *)((long)ptr_param3_copy + 0xc) == *(uint *)((long)ptr_ptr_param3 + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*ptr_param3_copy;\n    local_ptr70 = *ptr_ptr_param3;\n    if (((ptr2 == (undefined8 *)0x0) == (local_ptr70 == (long *)0x0)) &&\n       ((((ptr_param3_copy[2] == 0) == (ptr_ptr_param3[2] == (long *)0x0) &&\n         ((ptr_param3_copy[3] == 0) == (ptr_ptr_param3[3] == (long *)0x0))) &&\n        ((ptr_param3_copy[4] == 0) == (ptr_ptr_param3[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr_param3_copy[4] != 0) &&\n           (char_value = compare_values_0010922b(param1,ptr_param3_copy[4],ptr_ptr_param3[4]), char_value == '\\0'))\n        goto LAB_00109382;\n        ptr_var21 = (long *)ptr_param3_copy[2];\n        if (ptr_var21 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)ptr_param3_copy[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr_param3_copy = ptr_ptr_param3[3];\n          while( true ) {\n            ptr_ptr_param5 = (char **)*ptr2;\n            if (ptr_ptr_param5 == (char **)0x0) {\n              result = *ptr_param3_copy == 0;\n              goto LAB_001099c4;\n            }\n            ptr_ptr_param4 = (char **)*ptr_param3_copy;\n            if (ptr_ptr_param4 == (char **)0x0) break;\n            if ((**ptr_ptr_param5 != **ptr_ptr_param4) || (int_value = strcmp(*ptr_ptr_param5,*ptr_ptr_param4), int_value != 0))\n            break;\n            ptr_param9 = ptr_ptr_param5[1];\n            ptr_param10 = ptr_ptr_param4[1];\n            if ((ptr_param9 == (char *)0x0) != (ptr_param10 == (char *)0x0)) break;\n            if (ptr_param9 != (char *)0x0) {\n              var22 = 0;\n              while( true ) {\n                ptr_ptr_param5 = *(char ***)(ptr_param9 + var22);\n                ptr_ptr_param4 = *(char ***)(ptr_param10 + var22);\n                if (ptr_ptr_param5 == (char **)0x0) break;\n                if (ptr_ptr_param4 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_ptr_param5 != **ptr_ptr_param4) ||\n                     ((((ulong)ptr_ptr_param5[2] ^ (ulong)ptr_ptr_param4[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_ptr_param5[3] != ptr_ptr_param4[3] ||\n                     ((((ptr_ptr_param5[4] == (char *)0x0) != (ptr_ptr_param4[4] == (char *)0x0) ||\n                       (int_value = strcmp(*ptr_ptr_param5,*ptr_ptr_param4), int_value != 0)) ||\n                      (char_value = compare_values_0010922b(param1,ptr_ptr_param5[1],ptr_ptr_param4[1]), char_value == '\\0')))))) ||\n                   ((ptr_ptr_param5[4] != (char *)0x0 &&\n                    (char_value = compare_values_0010922b(param1,ptr_ptr_param5[4],ptr_ptr_param4[4]), char_value == '\\0'))))\n                goto LAB_00109382;\n                var22 = var22 + 8;\n              }\n              if (ptr_ptr_param4 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            ptr_param3_copy = ptr_param3_copy + 1;\n          }\n        }\n        else {\n          ptr_var20 = ptr_ptr_param3[2];\n          for (; ptr2 = (undefined8 *)*ptr_var21, ptr2 != (undefined8 *)0x0;\n              ptr_var21 = ptr_var21 + 1) {\n            ptr1 = (undefined8 *)*ptr_var20;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (char_value = compare_values_0010922b(param1,*ptr2,*ptr1), char_value == '\\0'))\n            goto LAB_00109382;\n            ptr_var20 = ptr_var20 + 1;\n          }\n          if (*ptr_var20 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_ptr_param5 = (char **)*ptr2, ptr_ptr_param5 != (char **)0x0; ptr2 = ptr2 + 1) {\n          ptr_ptr_param4 = (char **)*local_ptr70;\n          if (ptr_ptr_param4 == (char **)0x0) goto LAB_00109382;\n          ptr_param9 = *ptr_ptr_param4;\n          ptr_param10 = *ptr_ptr_param5;\n          if ((*ptr_param10 != *ptr_param9) ||\n             ((((ulong)ptr_ptr_param5[2] ^ (ulong)ptr_ptr_param4[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_ptr_param5 + 0x14) == '\\0') {\n            if (ptr_ptr_param5[3] == ptr_ptr_param4[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          int_value = strcmp(ptr_ptr_param5[3],ptr_ptr_param4[3]);\n          if (int_value != 0) goto LAB_00109382;\nLAB_00109480:\n          int_value = strcmp(ptr_param10,ptr_param9);\n          if (((int_value != 0) || (ptr_ptr_param5[1] == (char *)0x0)) || (ptr_ptr_param4[1] == (char *)0x0))\n          goto LAB_00109382;\n          ptr_param14 = debug_get_real_type_isra_0(ptr_ptr_param4[1],0);\n          ptr_param15 = debug_get_real_type_isra_0(ptr_ptr_param5[1],0);\n          char_value = compare_values_0010922b(param1,ptr_param15,ptr_param14);\n          if (char_value == '\\0') goto LAB_00109382;\n          local_ptr70 = local_ptr70 + 1;\n        }\n        if (*local_ptr70 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr_param3_copy = (long *)ptr_param2[2];\n    ptr_var21 = (long *)ptr_param3[2];\n    if (ptr_param3_copy == (long *)0x0) {\n      result = ptr_var21 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_var21 == (long *)0x0) goto LAB_00109382;\n    var22 = *ptr_param3_copy;\n    var6 = *ptr_var21;\n    var19 = 0;\n    var7 = ptr_param3_copy[1];\n    var8 = ptr_var21[1];\n    do {\n      ptr_param9 = *(char **)(var22 + var19);\n      if (ptr_param9 == (char *)0x0) {\n        result = *(long *)(var6 + var19) == 0;\n        goto LAB_001099c1;\n      }\n      ptr_param10 = *(char **)(var6 + var19);\n      if (((ptr_param10 == (char *)0x0) || (*ptr_param9 != *ptr_param10)) ||\n         (*(long *)(var7 + var19) != *(long *)(var8 + var19))) break;\n      int_value = strcmp(ptr_param9,ptr_param10);\n      var19 = var19 + 8;\n    } while (int_value == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = compare_values_0010922b(param1,ptr_param2[2],ptr_param3[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)ptr_param2[2] + 2) == *(char *)((undefined8 *)ptr_param3[2] + 2)) &&\n       (char_value = compare_values_0010922b(param1,*(undefined8 *)ptr_param2[2],*(undefined8 *)ptr_param3[2]),\n       char_value != '\\0')) {\n      ptr_param3_copy = *(long **)(ptr_param2[2] + 8);\n      ptr_var21 = *(long **)(ptr_param3[2] + 8);\n      if ((ptr_param3_copy == (long *)0x0) == (ptr_var21 == (long *)0x0)) {\n        if (ptr_param3_copy == (long *)0x0) goto LAB_001097af;\n        while (((*ptr_param3_copy != 0 && (*ptr_var21 != 0)) &&\n               (char_value = compare_values_0010922b(param1), char_value != '\\0'))) {\n          ptr_param3_copy = ptr_param3_copy + 1;\n          ptr_var21 = ptr_var21 + 1;\n        }\nLAB_0010995d:\n        if (*ptr_param3_copy != 0) goto LAB_00109964;\n        result = *ptr_var21 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)ptr_param3[2];\n    ptr1 = (undefined8 *)ptr_param2[2];\n    result = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      result = compare_values_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)ptr_param3[2];\n    ptr1 = (undefined8 *)ptr_param2[2];\n    result = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)ptr_param3[2];\n    ptr1 = (undefined8 *)ptr_param2[2];\n    result = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    char_value = compare_values_0010922b(param1,*(undefined8 *)ptr_param2[2],*(undefined8 *)ptr_param3[2]);\n    result = 0;\n    if (char_value != '\\0') {\n      result = compare_values_0010922b(param1,*(undefined8 *)(ptr_param2[2] + 8),*(undefined8 *)(ptr_param3[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)ptr_param2[2] + 3) == *(char *)((undefined8 *)ptr_param3[2] + 3)) &&\n        (char_value = compare_values_0010922b(param1,*(undefined8 *)ptr_param2[2],*(undefined8 *)ptr_param3[2]),\n        char_value != '\\0')) &&\n       (char_value = compare_values_0010922b(param1,*(undefined8 *)(ptr_param2[2] + 8),\n                              *(undefined8 *)(ptr_param3[2] + 8)), char_value != '\\0')) {\n      ptr_param3_copy = *(long **)(ptr_param2[2] + 0x10);\n      ptr_var21 = *(long **)(ptr_param3[2] + 0x10);\n      if ((ptr_param3_copy == (long *)0x0) == (ptr_var21 == (long *)0x0)) {\n        if (ptr_param3_copy != (long *)0x0) {\n          while (((*ptr_param3_copy != 0 && (*ptr_var21 != 0)) &&\n                 (char_value = compare_values_0010922b(param1), char_value != '\\0'))) {\n            ptr_param3_copy = ptr_param3_copy + 1;\n            ptr_var21 = ptr_var21 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr_param3_copy = (long *)ptr_param3[2];\n    ptr_var21 = (long *)ptr_param2[2];\n    int_value = strcmp(*(char **)(*ptr_var21 + 8),*(char **)(*ptr_param3_copy + 8));\n    result = 0;\n    if (int_value == 0) {\n      result = compare_values_0010922b(param1,ptr_var21[1],ptr_param3_copy[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = local_ptr58;\n  return result;\ncode_r0x00109263:\n  ptr_param2 = **(long ***)ptr_param2[2];\n  ptr_param3_copy = ptr_param2;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "debug_type_samep",
                "strcmp",
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_set_class_id.lto_priv.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "compare_values_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_member_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "formatIsValid",
                "iVar2": "archType",
                "iVar3": "statResult",
                "ppcVar4": "archPtr",
                "lVar5": "breadResult",
                "uVar6": "msgContext",
                "__format": "messageFormat",
                "puVar7": "tempDirPtr",
                "piVar8": "errnoPtr",
                "uVar9": "errorMsg",
                "in_RAX": "fileIndex",
                "pcVar10": "currentFilePath",
                "ppcVar11": "nextArchMember",
                "lVar12": "fileSize",
                "pvVar13": "memoryBuffer",
                "pcVar14": "closeFunction",
                "lVar15": "bytesRemaining",
                "pcVar16": "fileNameIterator",
                "psVar17": "statBuffer",
                "unaff_R14": "tempDirNode",
                "unaff_R15": "archHandle",
                "bVar18": "preserveDates",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "archFilePath",
                "in_stack_00000010": "nextArchHandle",
                "in_stack_00000018": "tempDirPath",
                "in_stack_00000020": "nextArchFileName",
                "in_stack_00000028": "copyFilePath",
                "in_stack_00000030": "formatFlag",
                "in_stack_000000f8": "permissionFlag",
                "in_stack_00000110": "totalBytes",
                "status": "operationStatus"
            },
            "code": "\nvoid extractAndCopyArchiveMember_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char formatIsValid;\n  int archType;\n  int statResult;\n  char **archPtr;\n  long breadResult;\n  undefined8 msgContext;\n  char *messageFormat;\n  undefined8 *tempDirPtr;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  long fileIndex;\n  char *currentFilePath;\n  char **nextArchMember;\n  long fileSize;\n  void *memoryBuffer;\n  code *closeFunction;\n  long bytesRemaining;\n  char *fileNameIterator;\n  stat *statBuffer;\n  undefined8 *tempDirNode;\n  char **archHandle;\n  byte preserveDates;\n  undefined8 returnAddress;\n  undefined8 *archFilePath;\n  long *nextArchHandle;\n  char *tempDirPath;\n  undefined8 *nextArchFileName;\n  undefined8 copyFilePath;\n  undefined8 formatFlag;\n  uint permissionFlag;\n  long totalBytes;\n  \n  preserveDates = 0;\n  currentFilePath = (char *)(fileIndex + 1);\n  do {\n    if (*currentFilePath == '/') {\n      extractAndCopyArchiveMember_001052a2();\n      return;\n    }\n    while (*currentFilePath == '\\0') {\n      currentFilePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      statResult = stat(currentFilePath,(stat *)&stack0x00000050);\n      tempDirPtr = tempDirNode;\n      if (-1 < statResult) {\n        fileSize = make_tempdir(currentFilePath);\n        free(currentFilePath);\n        if (fileSize == 0) {\n          errnoPtr = __errno_location();\n          currentFilePath = strerror(*errnoPtr);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorMsg,currentFilePath);\n          goto LAB_00104e93;\n        }\n        tempDirPtr = (undefined8 *)xmalloc(0x18);\n        currentFilePath = *archHandle;\n        *tempDirPtr = tempDirNode;\n        tempDirPtr[2] = 0;\n        tempDirPtr[1] = fileSize;\n        currentFilePath = (char *)concat(fileSize,&DAT_0011b47d,currentFilePath);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        statBuffer = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statBuffer->st_dev = 0;\n          statBuffer = (stat *)((long)statBuffer + (ulong)preserveDates * -8 + 4);\n        }\n        nextArchMember = (char **)archHandle[0x1d];\n        if ((char **)archHandle[0x1d] == (char **)0x0) {\n          nextArchMember = archHandle;\n        }\n        statResult = (**(code **)(nextArchMember[1] + 0x1e8))(archHandle,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          fileNameIterator = *archHandle;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorMsg,fileNameIterator);\n        }\n      }\n      tempDirNode = (undefined8 *)xmalloc(0x18);\n      tempDirNode[1] = currentFilePath;\n      *tempDirNode = tempDirPtr;\n      tempDirNode[2] = 0;\n      formatIsValid = bfd_check_format(archHandle,1);\n      if (formatIsValid == '\\0') {\n        errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archHandle,0,errorMsg);\n        nextArchMember = (char **)bfd_openw(currentFilePath,copyFilePath);\n        if (nextArchMember == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archPtr = (char **)archHandle[0x1d];\n        if ((char **)archHandle[0x1d] == (char **)0x0) {\n          archPtr = archHandle;\n        }\n        archType = (**(code **)(archPtr[1] + 0x1e8))(archHandle,&stack0x000000e0);\n        fileSize = totalBytes;\n        if (archType == 0) {\n          if (totalBytes < 0) {\n            errorMsg = bfd_get_archive_filename(archHandle);\n            msgContext = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(msgContext,errorMsg);\n          }\n          else {\n            archType = bfd_seek(archHandle,0,0);\n            if (archType == 0) {\n              if (verbose != '\\0') {\n                fileNameIterator = *nextArchMember;\n                errorMsg = bfd_get_archive_filename(archHandle);\n                messageFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(messageFormat,errorMsg,fileNameIterator);\n              }\n              memoryBuffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesRemaining) {\n                bytesRemaining = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesRemaining = fileSize;\n                }\n                breadResult = bfd_bread(memoryBuffer,bytesRemaining,archHandle);\n                archPtr = archHandle;\n                if ((bytesRemaining != breadResult) ||\n                   (breadResult = bfd_bwrite(memoryBuffer,bytesRemaining,nextArchMember), archPtr = nextArchMember, bytesRemaining != breadResult\n                   )) {\n                  bfd_nonfatal_message(0,archPtr,0,0);\n                  free(memoryBuffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*nextArchMember,permissionFlag | 0x100);\n              free(memoryBuffer);\n              formatIsValid = bfd_close_all_done(nextArchMember);\n              if (formatIsValid == '\\0') {\n                bfd_nonfatal_message(currentFilePath,0,0,0);\n                operationStatus = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg = bfd_get_archive_filename(archHandle);\n            bfd_nonfatal(errorMsg);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archHandle,0,0);\n        }\nLAB_00104f00:\n        formatIsValid = bfd_close_all_done(nextArchMember);\n        if (formatIsValid == '\\0') {\n          bfd_nonfatal_message(currentFilePath,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentFilePath);\n        operationStatus = 1;\n      }\n      else {\n        if (formatFlag._7_1_ == '\\0') {\n          nextArchMember = (char **)bfd_openw(currentFilePath,*(undefined8 *)archHandle[1]);\n        }\n        else {\n          nextArchMember = (char **)bfd_openw(currentFilePath,copyFilePath);\n        }\n        if (nextArchMember == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currentFilePath,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatIsValid = copy_object(archHandle,nextArchMember,returnAddress);\n        if (formatIsValid == '\\0') {\n          archType = bfd_get_arch(archHandle);\n          if (archType == 0) goto LAB_00104d75;\n          formatIsValid = bfd_close_all_done(nextArchMember);\n          if (formatIsValid == '\\0') {\n            bfd_nonfatal_message(currentFilePath,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatIsValid = bfd_close(nextArchMember);\n        if (formatIsValid == '\\0') {\n          bfd_nonfatal_message(currentFilePath,0,0,0);\n          operationStatus = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(currentFilePath,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentFilePath,copyFilePath);\n        tempDirNode[2] = fileSize;\n        *nextArchHandle = fileSize;\n        nextArchHandle = (long *)(fileSize + 0xf0);\n        nextArchMember = (char **)bfd_openr_next_archived_file(nextArchFileName,archHandle);\n        bfd_close(archHandle);\n        archHandle = nextArchMember;\n      }\n      if ((operationStatus != 0) || (archHandle == (char **)0x0)) {\n        *nextArchHandle = 0;\n        memoryBuffer = (void *)xstrdup(*archFilePath);\n        if (operationStatus == 0) {\n          closeFunction = bfd_close;\n        }\n        else {\n          closeFunction = bfd_close_all_done;\n        }\n        formatIsValid = (*closeFunction)(archFilePath);\n        if (formatIsValid == '\\0') {\n          operationStatus = 1;\n          bfd_nonfatal_message(memoryBuffer,0,0,0);\n        }\n        free(memoryBuffer);\n        memoryBuffer = (void *)xstrdup(*nextArchFileName);\n        formatIsValid = bfd_close(nextArchFileName);\n        if (formatIsValid == '\\0') {\n          operationStatus = 1;\n          bfd_nonfatal_message(memoryBuffer,0,0,0);\n        }\n        free(memoryBuffer);\n        goto LAB_00114b4b;\n      }\n      currentFilePath = *archHandle;\n      param3 = currentFilePath;\n      if (*currentFilePath == '/') goto LAB_0010527d;\n    }\n    fileNameIterator = currentFilePath;\n    if ((*currentFilePath == '.') && (fileNameIterator = currentFilePath + 1, currentFilePath[1] == '.')) {\n      fileNameIterator = currentFilePath + 2;\n      if ((currentFilePath[2] == '\\0') || (currentFilePath[2] == '/')) {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorMsg,param3);\nLAB_00104e93:\n        operationStatus = 1;\nLAB_00114b4b:\n        while (tempDirNode != (undefined8 *)0x0) {\n          if (tempDirNode[2] == 0) {\n            rmdir((char *)tempDirNode[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempDirNode[1]);\n          }\n          free((void *)tempDirNode[1]);\n          tempDirPtr = (undefined8 *)*tempDirNode;\n          free(tempDirNode);\n          tempDirNode = tempDirPtr;\n        }\n        rmdir(tempDirPath);\n        free(tempDirPath);\n        return;\n      }\n    }\n    for (; (currentFilePath = fileNameIterator, *fileNameIterator != '\\0' && (*fileNameIterator != '/')); fileNameIterator = fileNameIterator + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_member_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "process_data_0010e453",
                "param_1": "input_param",
                "param_2": "data",
                "param_3": "list_of_strings",
                "lVar1": "long_var1",
                "cVar2": "char_var",
                "sVar3": "size",
                "__s": "output_string",
                "uVar4": "result",
                "lVar5": "length",
                "ppcVar6": "string_ptr",
                "lVar7": "loop_var"
            },
            "code": "\nundefined8 processData_0010e453(long input_param,char *data,char **list_of_strings)\n\n{\n  long long_var1;\n  char char_var;\n  size_t size;\n  undefined2 *output_string;\n  undefined8 result;\n  long length;\n  char **string_ptr;\n  long loop_var;\n  \n  if (list_of_strings == (char **)0x0) {\n    if (data != (char *)0x0) {\n      size = strlen(data);\n      output_string = (undefined2 *)xmalloc(size + 10);\n      sprintf((char *)output_string,\"xe%s:\",data);\nLAB_0010e578:\n      char_var = stab_push_string(input_param,output_string,0,0,4);\n      if (char_var != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    length = 10;\n    string_ptr = list_of_strings;\n    if (data != (char *)0x0) {\n      size = strlen(data);\n      length = size + 10;\n    }\n    for (; *string_ptr != (char *)0x0; string_ptr = string_ptr + 1) {\n      size = strlen(*string_ptr);\n      length = length + 0x14 + size;\n    }\n    output_string = (undefined2 *)xmalloc(length);\n    if (data == (char *)0x0) {\n      *output_string = 0x65;\n      length = 0;\n    }\n    else {\n      length = *(long *)(input_param + 0x68);\n      *(long *)(input_param + 0x68) = length + 1;\n      sprintf((char *)output_string,\"%s:T%ld=e\",data,length);\n    }\n    loop_var = 0;\n    while( true ) {\n      long_var1 = *(long *)((long)list_of_strings + loop_var);\n      size = strlen((char *)output_string);\n      if (long_var1 == 0) break;\n      loop_var = loop_var + 8;\n      sprintf((char *)(undefined2 *)((long)output_string + size),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)output_string + size) = 0x3b;\n    if (data == (char *)0x0) goto LAB_0010e578;\n    char_var = stab_write_symbol_lto_priv_0(input_param,0x80,0,0,output_string);\n    if ((char_var == '\\0') || (char_var = stab_push_defined_type(input_param,length,4), char_var == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(output_string);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_symbol_and_write_0010ed2c",
                "param_1": "symbolTable",
                "param_2": "newSize",
                "param_3": "inputExtra",
                "extraout_RDX": "outputExtra",
                "in_R10": "inputR10",
                "cVar1": "isWriteSuccessful",
                "iVar2": "count",
                "uVar3": "returnValue",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] updateSymbolAndWrite_0010ed2c(long symbolTable,ulong newSize,undefined8 inputExtra)\n\n{\n  char isWriteSuccessful;\n  int count;\n  undefined8 outputExtra;\n  ulong returnValue;\n  undefined8 inputR10;\n  undefined result [16];\n  \n  if (*(ulong *)(symbolTable + 0x1f0) < newSize) {\n    *(ulong *)(symbolTable + 0x1f0) = newSize;\n  }\n  if (*(long *)(symbolTable + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(symbolTable + 0x1f8) != 0) {\n      count = *(int *)(symbolTable + 0x1f8) + -1;\n      returnValue = CONCAT71((int7)((ulong)inputExtra >> 8),1);\n      *(int *)(symbolTable + 0x1f8) = count;\n      if (count != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (symbolTable,0xe0,0,newSize - *(long *)(symbolTable + 0x200),0,inputR10);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    isWriteSuccessful = stab_write_symbol_lto_priv_0(symbolTable,0xc0,0,*(long *)(symbolTable + 0x208),0);\n    if (isWriteSuccessful != '\\0') {\n      *(undefined8 *)(symbolTable + 0x208) = 0xffffffffffffffff;\n      inputExtra = outputExtra;\n      goto LAB_0010ed78;\n    }\n  }\n  returnValue = 0;\nLAB_0010edae:\n  result._0_8_ = returnValue & 0xffffffff;\n  result._8_8_ = inputR10;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_and_write_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "memory_1",
                "param_2": "memory_2",
                "uVar1": "memory_1_size",
                "uVar2": "memory_2_size",
                "iVar3": "comparison_result",
                "extraout_var": "extra_output",
                "uVar4": "result",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *memory_1,ulong *memory_2,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong memory_1_size;\n  ulong memory_2_size;\n  int comparison_result;\n  undefined4 extra_output;\n  ulong result;\n  undefined output [16];\n  \n  result = *memory_1;\n  if (*memory_2 <= *memory_1) {\n    result = *memory_2;\n  }\n  comparison_result = memcmp((void *)(memory_1[3] + 3),(void *)(memory_2[3] + 3),result - 3);\n  result = CONCAT44(extra_output,comparison_result);\n  if (comparison_result == 0) {\n    memory_1_size = memory_1[8];\n    if (memory_1_size < memory_2[7]) {\n      result = 0xffffffff;\n    }\n    else {\n      memory_2_size = memory_2[8];\n      if (memory_2_size < memory_1[7]) {\n        result = 1;\n      }\n      else {\n        result = 0xffffffff;\n        if (memory_2[7] <= memory_1[7]) {\n          if (memory_2_size < memory_1_size) {\n            result = 1;\n          }\n          else {\n            result = 0xffffffff;\n            if (memory_2_size <= memory_1_size) {\n              if (memory_1[2] == 0x100) {\n                result = (ulong)-(uint)(memory_2[2] != 0x100);\n              }\n              else {\n                result = (ulong)(memory_2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = param_4;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "compare_gnu_build_notes.cold",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "reconstruct_gnu_build_attribute_notes_001163d0",
                "param_1": "input_section_headers",
                "param_2": "input_sections",
                "param_3": "input_sections_size",
                "param_4": "output_buffer",
                "uVar1": "result",
                "uVar2": "input_section_name",
                "uVar3": "input_section_file_name",
                "puVar5": "reloc_table",
                "iVar6": "status",
                "uVar7": "error_message",
                "lVar8": "reloc_size",
                "__ptr": "reloc_buffer",
                "uVar9": "reloc_value",
                "uVar10": "reloc_value_1",
                "uVar11": "reloc_value_2",
                "uVar12": "description_aligned",
                "__ptr_00": "name",
                "__nmemb": "reloc_count",
                "bVar26": "is_64bit",
                "local_88": "name_size",
                "uStack_80": "note_version",
                "local_70": "note_value",
                "local_68": "remaining_size",
                "local_60": "note_array",
                "cVar19": "note_type",
                "puVar20": "dst_ptr",
                "iVar21": "loop_counter",
                "puVar22": "src_ptr",
                "puVar23": "current_note",
                "uVar24": "note_value_2",
                "puVar25": "note_item"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong reconstruct_gnu_build_attribute_notes_001163d0(undefined8 *input_section_headers,undefined8 *input_sections,ulong input_sections_size,undefined *output_buffer)\n\n{\n  ulong result;\n  undefined8 input_section_name;\n  undefined8 input_section_file_name;\n  bool bVar4;\n  ulong *reloc_table;\n  int status;\n  undefined8 error_message;\n  long reloc_size;\n  void *reloc_buffer;\n  ulong reloc_value;\n  ulong reloc_value_1;\n  ulong reloc_value_2;\n  ulong description_aligned;\n  undefined *name;\n  ulong result3;\n  ulong result4;\n  ulong result5;\n  ulong result6;\n  ulong *presult7;\n  undefined *presult8;\n  char note_type;\n  undefined *dst_ptr;\n  int loop_counter;\n  undefined *src_ptr;\n  ulong *current_note;\n  ulong note_value_2;\n  size_t reloc_count;\n  ulong *note_item;\n  byte is_64bit;\n  ulong name_size;\n  ulong note_version;\n  ulong note_value;\n  ulong remaining_size;\n  ulong *note_array;\n  \n  is_64bit = 0;\n  reloc_size = bfd_get_reloc_upper_bound();\n  remaining_size = input_sections_size;\n  if (0 < reloc_size) {\n    reloc_buffer = (void *)xmalloc(reloc_size);\n    reloc_size = bfd_canonicalize_reloc(input_section_headers,input_sections,reloc_buffer,isympp);\n    free(reloc_buffer);\n    if (reloc_size != 0) {\n      if (is_strip == 0) {\n        input_section_name = *input_section_headers;\n        input_section_file_name = *input_sections;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(error_message,input_section_name,input_section_file_name);\n      }\n      note_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  note_array = (ulong *)xcalloc(input_sections_size / 0xc,0x48,input_sections_size % 0xc);\n  name_size = 0;\n  note_value = 0;\n  result6 = input_sections_size;\n  result5 = 0;\n  current_note = note_array;\n  result4 = 0;\n  src_ptr = output_buffer;\n  while (0xb < result6) {\n    reloc_value_1 = (**(code **)(input_section_headers[1] + 0x40))(src_ptr);\n    *current_note = reloc_value_1;\n    reloc_value_1 = (**(code **)(input_section_headers[1] + 0x40))(src_ptr + 4);\n    current_note[1] = reloc_value_1;\n    reloc_value_2 = (**(code **)(input_section_headers[1] + 0x40))(src_ptr + 8);\n    reloc_value_1 = *current_note;\n    current_note[2] = reloc_value_2;\n    description_aligned = current_note[1];\n    result3 = reloc_value_1 + 3 & 0xfffffffffffffffc;\n    current_note[6] = result3;\n    if (description_aligned != (description_aligned + 3 & 0xfffffffffffffffc)) {\n      reloc_size = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < reloc_value_2 - 0x100) {\n      reloc_size = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = result3 + description_aligned + 0xc;\n    if (result6 < result) {\n      reloc_size = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (reloc_value_1 < 2) {\n      reloc_size = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    current_note[3] = (ulong)(src_ptr + 0xc);\n    current_note[4] = (ulong)(src_ptr + result3 + 0xc);\n    result6 = result6 + (-0xc - (result3 + description_aligned));\n    if (reloc_value_1 != 2) {\n      if (src_ptr[0xc] == '$') {\n        if ((src_ptr[0xd] == '\\x01') && (src_ptr[0xe] == '1')) {\n          result6 = reconstruct_gnu_build_attribute_notes_001163d0_00116490();\n          return result6;\n        }\n      }\n      else if ((((4 < reloc_value_1) && (src_ptr[0xc] == 'G')) && (src_ptr[0xd] == 'A')) &&\n              ((src_ptr[0xe] == '$' && (src_ptr[0xf] == '\\x01')))) {\n        if (src_ptr[0x10] == '2') {\n          result6 = reconstruct_gnu_build_attribute_notes_001163d0_00116490();\n          return result6;\n        }\n        if (src_ptr[0x10] == '3') {\n          result6 = reconstruct_gnu_build_attribute_notes_001163d0_00116490();\n          return result6;\n        }\n        reloc_size = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    reloc_value = result5;\n    note_value_2 = result4;\n    if (description_aligned == 0) {\n      if (reloc_value_2 == 0x100) {\n        current_note[7] = name_size;\nLAB_001164af:\n        description_aligned = result4;\n        note_value_2 = result4;\n      }\n      else {\n        current_note[7] = note_value;\nLAB_0011669e:\n        reloc_value = result5;\n        description_aligned = result5;\n      }\n    }\n    else {\n      if (description_aligned != 0x10) {\n        if (description_aligned < 0x11) {\n          if (description_aligned == 4) {\n            reloc_value_2 = (**(code **)(input_section_headers[1] + 0x40))();\n            description_aligned = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (description_aligned == 8) {\n            result6 = FUNC_001086af();\n            return result6;\n          }\n        }\n        reloc_size = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      reloc_value_2 = (**(code **)(input_section_headers[1] + 0x28))(src_ptr + result3 + 0xc);\n      description_aligned = (**(code **)(input_section_headers[1] + 0x28))();\n      if (description_aligned < reloc_value_2) {\n        reloc_value_2 = description_aligned;\n      }\nLAB_00116631:\n      if (current_note[2] == 0x100) {\n        if (reloc_value_2 == 0) {\n          reloc_value_2 = name_size;\n        }\n        reloc_value_1 = *current_note;\n        current_note[7] = reloc_value_2;\n        note_value_2 = description_aligned;\n        name_size = reloc_value_2;\n        if (description_aligned == 0) goto LAB_001164af;\n      }\n      else {\n        if (reloc_value_2 == 0) {\n          reloc_value_2 = note_value;\n        }\n        reloc_value_1 = *current_note;\n        current_note[7] = reloc_value_2;\n        reloc_value = description_aligned;\n        note_value = reloc_value_2;\n        if (description_aligned == 0) goto LAB_0011669e;\n      }\n    }\n    current_note[8] = description_aligned;\n    if (*(char *)((current_note[3] - 1) + reloc_value_1) != '\\0') {\n      reloc_size = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    current_note = current_note + 9;\n    result5 = reloc_value;\n    result4 = note_value_2;\n    src_ptr = src_ptr + result;\n  }\n  if (result6 == 0) {\n    input_section_name = *input_section_headers;\n    input_section_file_name = *input_sections;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(error_message,input_section_name,input_section_file_name);\n    reloc_count = ((long)current_note - (long)note_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(note_array,reloc_count,0x48,compare_gnu_build_notes);\n    for (presult7 = note_array; presult7 < current_note; presult7 = presult7 + 9) {\n      result6 = presult7[2];\n      if (result6 != 0) {\n        result5 = presult7[7];\n        result4 = presult7[8];\n        note_item = presult7;\n        loop_counter = 0;\n        if (result5 == result4) {\n          presult7[2] = 0;\n        }\n        else {\n          do {\n            do {\n              reloc_table = note_item;\n              note_item = reloc_table + -9;\n              if (note_item < note_array) goto LAB_001167f5;\n              reloc_value_1 = reloc_table[-7];\n            } while (reloc_value_1 == 0);\n            if ((*note_item != *presult7) ||\n               (status = memcmp((void *)reloc_table[-6],(void *)presult7[3],*presult7), status != 0)) break;\n            description_aligned = reloc_table[-2];\n            reloc_value_2 = reloc_table[-1];\n            if (result5 == description_aligned) {\n              if (result4 == reloc_value_2) {\n                presult7[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (result4 <= reloc_value_2) {\n                presult7[2] = 0;\n                break;\n              }\n              if (reloc_value_2 < result5) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < reloc_value_2) || (result5 <= (reloc_value_2 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_notes_00116852;\n              }\nLAB_001167b8:\n              if ((result6 == 0x101) == (reloc_value_1 == 0x101)) {\n                if (reloc_value_2 <= result4) {\n                  reloc_value_2 = result4;\n                }\n                if (description_aligned < result5) {\n                  result5 = description_aligned;\n                }\n                reloc_table[-1] = reloc_value_2;\n                reloc_table[-2] = result5;\n                presult7[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (description_aligned <= result5) goto LAB_001167a6;\n              if (reloc_value_2 < result5) goto LAB_0010852c;\n              if (result4 < result5) {\n                if ((0xfffffffffffffff0 < result4) || (description_aligned <= (result4 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (result4 != reloc_value_2) goto LAB_001167b8;\n            }\nprocess_notes_00116852:\n            bVar4 = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (bVar4);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(note_array,reloc_count,0x48,sort_gnu_build_notes);\n    name = (undefined *)xmalloc(input_sections_size * 2);\n    note_version = 0;\n    note_value = 0;\n    src_ptr = name;\n    for (presult7 = note_array; presult7 < current_note; presult7 = presult7 + 9) {\n      if (presult7[2] != 0) {\n        presult8 = src_ptr + 0xc;\n        if ((presult7[7] == note_value) && (presult7[8] == note_version)) {\n          (**(code **)(input_section_headers[1] + 0x50))(*presult7,src_ptr);\n          (**(code **)(input_section_headers[1] + 0x50))(0,src_ptr + 4);\n          (**(code **)(input_section_headers[1] + 0x50))(presult7[2],src_ptr + 8);\n          result5 = presult7[6];\n          result6 = *presult7;\n          src_ptr = (undefined *)presult7[3];\n          dst_ptr = presult8;\n          for (result4 = result6; result4 != 0; result4 = result4 - 1) {\n            *dst_ptr = *src_ptr;\n            src_ptr = src_ptr + (ulong)is_64bit * -2 + 1;\n            dst_ptr = dst_ptr + (ulong)is_64bit * -2 + 1;\n          }\n          if (result6 < result5) {\n            for (reloc_size = result5 - result6; reloc_size != 0; reloc_size = reloc_size + -1) {\n              *dst_ptr = 0;\n              dst_ptr = dst_ptr + (ulong)is_64bit * -2 + 1;\n            }\n          }\n          src_ptr = presult8 + result5;\n        }\n        else {\n          (**(code **)(input_section_headers[1] + 0x50))();\n          if (*(int *)(input_section_headers[1] + 8) == 5) {\n            note_type = (*(char *)(input_section_headers[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            note_type = '\\b';\n          }\n          (**(code **)(input_section_headers[1] + 0x50))(note_type,src_ptr + 4);\n          (**(code **)(input_section_headers[1] + 0x50))(presult7[2],src_ptr + 8);\n          result6 = *presult7;\n          src_ptr = (undefined *)presult7[3];\n          dst_ptr = presult8;\n          for (result5 = result6; result5 != 0; result5 = result5 - 1) {\n            *dst_ptr = *src_ptr;\n            src_ptr = src_ptr + (ulong)is_64bit * -2 + 1;\n            dst_ptr = dst_ptr + (ulong)is_64bit * -2 + 1;\n          }\n          result5 = presult7[6];\n          if (result6 < result5) {\n            for (reloc_size = result5 - result6; reloc_size != 0; reloc_size = reloc_size + -1) {\n              *dst_ptr = 0;\n              dst_ptr = dst_ptr + (ulong)is_64bit * -2 + 1;\n            }\n          }\n          reloc_size = input_section_headers[1];\n          presult8 = presult8 + result5;\n          src_ptr = presult8 + 8;\n          if ((*(int *)(reloc_size + 8) == 5) && (*(char *)(input_section_headers[0x22] + 4) == '\\x02')) {\n            (**(code **)(reloc_size + 0x38))(presult7[7],presult8);\n            (**(code **)(input_section_headers[1] + 0x38))(presult7[8],src_ptr);\n            src_ptr = presult8 + 0x10;\n          }\n          else {\n            (**(code **)(reloc_size + 0x50))(presult7[7],presult8);\n            (**(code **)(input_section_headers[1] + 0x50))(presult7[8],presult8 + 4);\n          }\n          note_value = presult7[7];\n          note_version = presult7[8];\n        }\n      }\n    }\n    result5 = (long)src_ptr - (long)name;\n    result6 = result5;\n    src_ptr = name;\n    remaining_size = input_sections_size;\n    if (result5 < input_sections_size) {\n      for (; remaining_size = result5, result6 != 0; result6 = result6 - 1) {\n        *output_buffer = *src_ptr;\n        src_ptr = src_ptr + (ulong)is_64bit * -2 + 1;\n        output_buffer = output_buffer + (ulong)is_64bit * -2 + 1;\n      }\n    }\n    free(name);\n  }\n  else {\n    reloc_size = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (reloc_size != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,input_section_headers,input_sections,reloc_size);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(note_array);\n  return remaining_size;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "reconstruct_gnu_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_message_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageMessage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "param_1": "driver_name_ptr",
                "cVar1": "startsWith_lto_priv_0",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "puVar4": "parsed_driver_name_ptr",
                "lVar5": "offset",
                "__s": "driver_name",
                "__s1": "architecture",
                "puVar6": "parsed_name_ptr",
                "uVar7": "return_value",
                "bVar8": "isNegative"
            },
            "code": "\nundefined8 parse_driver_name_00108c86(long *driver_name_ptr)\n\n{\n  char startsWith_lto_priv_0;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *parsed_driver_name_ptr;\n  long offset;\n  char *driver_name;\n  char *architecture;\n  undefined2 *parsed_name_ptr;\n  undefined8 return_value;\n  byte isNegative;\n  \n  isNegative = 0;\n  offset = *driver_name_ptr;\n  driver_name = (char *)(offset + 4);\n  startsWith_lto_priv_0 = startswith_lto_priv_0_lto_priv_0(driver_name,&DAT_0011b73b);\n  if (startsWith_lto_priv_0 == '\\0') {\n    startsWith_lto_priv_0 = startswith_lto_priv_0_lto_priv_0(driver_name,\"bsdrv-\");\n    if (startsWith_lto_priv_0 == '\\0') {\n      startsWith_lto_priv_0 = startswith_lto_priv_0_lto_priv_0(driver_name,\"rtdrv-\");\n      if (startsWith_lto_priv_0 == '\\0') {\n        return 0xffffffff;\n      }\n      driver_name = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      driver_name = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(driver_name);\n  parsed_driver_name_ptr = (undefined2 *)xmalloc(string_length + 8);\n  architecture = driver_name + 4;\n  parsed_name_ptr = parsed_driver_name_ptr;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)parsed_name_ptr = *driver_name;\n    driver_name = driver_name + (ulong)isNegative * -2 + 1;\n    parsed_name_ptr = (undefined2 *)((long)parsed_name_ptr + (ulong)isNegative * -2 + 1);\n  }\n  *(undefined *)(parsed_driver_name_ptr + 1) = 0x69;\n  *parsed_driver_name_ptr = 0x6570;\n  comparison_result = strcmp(architecture,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)parsed_driver_name_ptr + 7) = 0x36;\n    *(undefined2 *)((long)parsed_driver_name_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)parsed_driver_name_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)parsed_driver_name_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_name_ptr = (long)parsed_driver_name_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "messageFormat"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *messageFormat;\n  \n  messageFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,messageFormat,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_001053d5",
                "unaff_R12": "ptrData",
                "unaff_R14": "ptrBFD",
                "bfd_nonfatal": "handleNonFatalBFD",
                "bfd_close_all_done": "closeAllBFD"
            },
            "code": "\nundefined4 closeBFD_001053d5(void)\n\n{\n  long ptrData;\n  undefined8 *ptrBFD;\n  \n  handleNonFatalBFD(*ptrBFD);\n  *(undefined4 *)(ptrData + 8) = 1;\n  closeAllBFD();\n  return *(undefined4 *)(ptrData + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_bfd_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_permissions_00104bba",
                "in_EAX": "flags",
                "unaff_EBP": "permissions",
                "unaff_R14": "address"
            },
            "code": "\nvoid validate_permissions_00104bba(void)\n\n{\n  uint flags;\n  undefined8 uVar1;\n  uint permissions;\n  long address;\n  \n  if ((flags & 2) != 0) {\n    uVar1 = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(uVar1);\n  }\n  if ((((flags & 8) == 0) || ((permissions & 0x10) == 0)) && ((permissions & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((permissions & 0x40) == 0)) && ((permissions & 0x60) != 0x60)) {\n      *(uint *)(address + 0x14) = flags | permissions;\n      return;\n    }\n    uVar1 = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(uVar1);\n  }\n  uVar1 = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(uVar1);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "validate_permissions_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "stab_class_baseclass.lto_priv.0",
                "display_info.isra.0",
                "stab_class_static_member.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_template",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "i",
                "puVar3": "dest_ptr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_array_0010da0b",
                "param_1": "array",
                "param_2": "slot_index",
                "uVar1": "errorMessage",
                "plVar2": "ptrToAllocatedMemory",
                "lVar3": "offset",
                "lVar4": "index",
                "uVar5": "remainingSlots",
                "bVar6": "flag",
                "auVar7": "updatedValue"
            },
            "code": "\nundefined  [16] allocate_and_initialize_array_0010da0b(long **array,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 errorMessage;\n  long *ptrToAllocatedMemory;\n  long offset;\n  long index;\n  ulong remainingSlots;\n  byte flag;\n  undefined updatedValue [16];\n  \n  flag = 0;\n  remainingSlots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*array == (long *)0x0) {\n        ptrToAllocatedMemory = (long *)xmalloc(0x88);\n        *array = ptrToAllocatedMemory;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)ptrToAllocatedMemory = 0;\n          ptrToAllocatedMemory = (long *)((long)ptrToAllocatedMemory + (ulong)flag * -8 + 4);\n        }\n      }\n      array = (long **)*array;\n    }\n    offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      offset = 0;\n    }\n    if (*array == (long *)0x0) {\n      ptrToAllocatedMemory = (long *)xmalloc(0x88);\n      *array = ptrToAllocatedMemory;\n      for (index = 0x22; index != 0; index = index + -1) {\n        *(undefined4 *)ptrToAllocatedMemory = 0;\n        ptrToAllocatedMemory = (long *)((long)ptrToAllocatedMemory + (ulong)flag * -8 + 4);\n      }\n    }\n    updatedValue._8_8_ = param_4;\n    updatedValue._0_8_ = *array + slot_index + offset + 1;\n    return updatedValue;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(errorMessage,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_array_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "puVar1": "allocatedMemory",
                "puVar2": "tempPointer",
                "lVar3": "loopCounter",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 *\ninitializeDataStructure_00112894(undefined8 value1,undefined value2,undefined8 value3,undefined8 value4)\n\n{\n  undefined8 *allocatedMemory;\n  undefined8 *tempPointer;\n  long loopCounter;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedMemory = (undefined8 *)xmalloc(0x1b0);\n  tempPointer = allocatedMemory;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)tempPointer = 0;\n    tempPointer = (undefined8 *)((long)tempPointer + (ulong)byteValue * -8 + 4);\n  }\n  *allocatedMemory = value1;\n  *(undefined *)(allocatedMemory + 1) = value2;\n  allocatedMemory[2] = value3;\n  allocatedMemory[3] = value4;\n  *(undefined4 *)(allocatedMemory + 0x10) = 1;\n  tempPointer = (undefined8 *)xmalloc(8);\n  allocatedMemory[0xd] = 0xffffffffffffffff;\n  allocatedMemory[0x11] = tempPointer;\n  *tempPointer = 0;\n  return allocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_next_pointer_00109b2f",
                "param_1": "ptr",
                "__ptr": "currentPointer",
                "puVar1": "nextPointer"
            },
            "code": "\nundefined8 * extractNextPointer_00109b2f(long ptr)\n\n{\n  undefined8 *currentPointer;\n  undefined8 *nextPointer;\n  \n  currentPointer = *(undefined8 **)(ptr + 0x60);\n  if (currentPointer != (undefined8 *)0x0) {\n    nextPointer = (undefined8 *)currentPointer[1];\n    *(undefined8 *)(ptr + 0x60) = *currentPointer;\n    free(currentPointer);\n    return nextPointer;\n  }\n  return currentPointer;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_modify_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_next_pointer_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinition_00108d9a",
                "param_1": "error_msg",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_pair",
                "pcVar2": "symbol_name_copy",
                "lVar3": "lookup_result",
                "uVar4": "error_message",
                "plVar5": "slot_result"
            },
            "code": "\nundefined8 check_redefinition_00108d9a(undefined8 error_msg,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *symbol_name_copy;\n  long lookup_result;\n  undefined8 error_message;\n  long *slot_result;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_pair = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  error_message = redefine_specific_htab;\n  symbol_pair[1] = symbol_name_copy;\n  lookup_result = htab_find(error_message,symbol_pair);\n  if (lookup_result != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(error_message,error_msg,symbol_name);\n  }\n  lookup_result = htab_find(redefine_specific_reverse_htab,target_symbol);\n  if (lookup_result != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(error_message,error_msg,target_symbol);\n  }\n  slot_result = (long *)htab_find_slot(redefine_specific_htab,symbol_pair,1);\n  error_message = redefine_specific_reverse_htab;\n  *slot_result = (long)symbol_pair;\n  symbol_name_copy = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(error_message,symbol_name_copy,1);\n  *symbol_pair = symbol_name_copy;\n  return result;\n}\n\n",
            "called": [
                "htab_find",
                "strdup",
                "htab_find_slot",
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_to_private_0010e9a0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "lVar1": "symbolCounter",
                "uVar2": "result",
                "__s": "symbol",
                "__s_00": "newSymbol",
                "sVar3": "param2Length",
                "sVar4": "symbolLength",
                "__s_01": "symbolString",
                "pcVar5": "symbolPrefix",
                "uVar6": "flag"
            },
            "code": "\nundefined4 writeSymbolToPrivate_0010e9a0(long arg1,char *arg2,undefined4 arg3,undefined8 arg4)\n\n{\n  long symbolCounter;\n  undefined4 result;\n  byte *symbol;\n  byte *newSymbol;\n  size_t param2Length;\n  size_t symbolLength;\n  char *symbolString;\n  char *symbolPrefix;\n  undefined8 flag;\n  \n  symbol = (byte *)stab_pop_type();\n  switch(arg3) {\n  case 1:\n    symbolPrefix = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    symbolPrefix = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    symbolPrefix = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    symbolPrefix = \"\";\n    flag = 0x80;\n    if (((&_sch_istable)[(ulong)*symbol * 2] & 4) == 0) {\n      symbolCounter = *(long *)(arg1 + 0x68);\n      *(long *)(arg1 + 0x68) = symbolCounter + 1;\n      param2Length = strlen((char *)symbol);\n      newSymbol = (byte *)xmalloc(param2Length + 0x14);\n      sprintf((char *)newSymbol,\"%ld=%s\",symbolCounter,symbol);\n      free(symbol);\n      symbol = newSymbol;\n    }\n    break;\n  case 5:\n    symbolPrefix = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  param2Length = strlen(arg2);\n  symbolLength = strlen((char *)symbol);\n  symbolString = (char *)xmalloc(param2Length + 3 + symbolLength);\n  sprintf(symbolString,\"%s:%s%s\",arg2,symbolPrefix,symbol);\n  free(symbol);\n  result = stab_write_symbol_lto_priv_0(arg1,flag,0,arg4,symbolString);\n  if ((char)result != '\\0') {\n    free(symbolString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_private_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_matching_options_error_0010827b",
                "unaff_RBX": "section",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage",
                "dcgettext": "getErrorMessage",
                "fatal": "terminateProgram"
            },
            "code": "\nvoid handleSectionMatchingOptionsError_0010827b(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  undefined8 *section;\n  \n  sectionAddress = *section;\n  errorMessage = getErrorMessage(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  terminateProgram(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_section_matching_options_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "bfd_nonfatal_message",
                "FUN_00107880",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "stringHashFunction",
                "htab_eq_string": "stringEqualityFunction",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  createHashTable(0x10,stringHashFunction,stringEqualityFunction,0,allocateMemory,releaseMemory);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc",
                "free",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "get_file_size.cold",
                "smart_rename.cold",
                "main",
                "simple_copy.cold",
                "simple_copy",
                "set_times.cold",
                "FUN_00104ea2",
                "FUN_00107880",
                "section_add_load_file.cold",
                "add_specific_symbols",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "process_entry_00116aa0",
                "param_1": "param_address",
                "param_2": "param_value",
                "auStack_8": "stack_variable",
                "__libc_start_main": "initiate_main",
                "main": "main_function",
                "&stack0x00000008": "stack_address"
            },
            "code": "\nvoid processEntry_00116aa0 processEntry_00116aa0(undefined8 param_address,undefined8 param_value)\n\n{\n  undefined stack_variable [8];\n  \n  initiate_main(main_function,param_value,stack_address,0,0,param_address,stack_variable);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "process_entry_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_and_copy_data_00108179",
                "unaff_RBX": "data1",
                "unaff_RBP": "data2",
                "unaff_R12": "data3",
                "unaff_R14B": "flag",
                "unaff_R15": "data4",
                "lVar1": "errorMsg",
                "lVar2": "signatureValue",
                "cVar3": "checkResult",
                "lVar4": "errorMessage",
                "lVar5": "signatureCheck"
            },
            "code": "\nvoid setAlignmentAndCopyData_00108179(void)\n\n{\n  long errorMsg;\n  long signatureValue;\n  char checkResult;\n  long errorMessage;\n  long signatureCheck;\n  long data1;\n  long data2;\n  long data3;\n  char flag;\n  long data4;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(data4 + 0xb4) = *(undefined4 *)(data1 + 0xb4);\n  *(byte *)(data4 + 0x28) =\n       *(byte *)(data4 + 0x28) & 0xcf | *(byte *)(data1 + 0x28) & 0x30;\n  *(long *)(data1 + 0x60) = data4;\n  *(undefined8 *)(data1 + 0x58) = 0;\n  if ((*(byte *)(data1 + 0x27) & 2) != 0) {\n    errorMsg = *(long *)(data1 + 0xd0);\n    signatureCheck = group_signature_isra_0(errorMsg,*(undefined8 *)(data1 + 0xe0));\n    if ((signatureCheck != 0) &&\n       (signatureValue = *(long *)(data3 + 8), *(uint *)(signatureCheck + 0x18) = *(uint *)(signatureCheck + 0x18) | 0x20,\n       *(int *)(signatureValue + 8) == 5)) {\n      *(long *)(errorMsg + 0xb0) = signatureCheck;\n      checkResult = (**(code **)(*(long *)(data2 + 8) + 0x158))();\n      if (checkResult == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  checkResult = (**(code **)(*(long *)(data2 + 8) + 0x158))();\n  if (checkResult == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(data4 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "group_signature.isra.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_and_copy_data_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "validate_and_get_file_entry_00109022",
                "param_1": "file_entry_table",
                "param_2": "type_file_numbers",
                "param_3": "stdout",
                "param_4": "stderr",
                "uVar1": "type_index_number",
                "pcVar2": "error_message",
                "plVar3": "file_entry",
                "lVar4": "loop_counter",
                "uVar5": "loop_iteration_counter",
                "pplVar6": "file_entry_ptr",
                "bVar7": "temp_byte_variable",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16] validate_and_get_file_entry_00109022(long file_entry_table,uint *type_file_numbers,undefined8 stdout,undefined8 stderr)\n\n{\n  uint type_index_number;\n  char *error_message;\n  long *file_entry;\n  long loop_counter;\n  uint loop_iteration_counter;\n  long **file_entry_ptr;\n  byte temp_byte_variable;\n  undefined return_value [16];\n  \n  temp_byte_variable = 0;\n  loop_iteration_counter = *type_file_numbers;\n  type_index_number = type_file_numbers[1];\n  if (((int)loop_iteration_counter < 0) || (*(uint *)(file_entry_table + 0x80) <= loop_iteration_counter)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)loop_iteration_counter);\n  }\n  else {\n    if (-1 < (int)type_index_number) {\n      file_entry_ptr = (long **)(*(long *)(file_entry_table + 0x88) + (long)(int)loop_iteration_counter * 8);\n      for (loop_iteration_counter = type_index_number; 0xf < (int)loop_iteration_counter; loop_iteration_counter = loop_iteration_counter - 0x10) {\n        if (*file_entry_ptr == (long *)0x0) {\n          file_entry = (long *)xmalloc(0x88);\n          *file_entry_ptr = file_entry;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)file_entry = 0;\n            file_entry = (long *)((long)file_entry + (ulong)temp_byte_variable * -8 + 4);\n          }\n        }\n        file_entry_ptr = (long **)*file_entry_ptr;\n      }\n      if (*file_entry_ptr == (long *)0x0) {\n        file_entry = (long *)xmalloc(0x88);\n        *file_entry_ptr = file_entry;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)file_entry = 0;\n          file_entry = (long *)((long)file_entry + (ulong)temp_byte_variable * -8 + 4);\n        }\n      }\n      file_entry = *file_entry_ptr + (long)(int)((type_index_number >> 4) * -0x10 + type_index_number) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index_number);\n  }\n  file_entry = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = stderr;\n  return_value._0_8_ = file_entry;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "validate_and_get_file_entry_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debugging_info_0010c05d",
                "param_1": "fileRecord",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "recordType",
                "param_5": "record",
                "param_6": "result",
                "auVar1": "returnVal",
                "uVar2": "returnValue",
                "piVar3": "intPointer",
                "cVar4": "isRecordTypeOne",
                "lVar5": "loopCounter",
                "lVar6": "namespacePtr",
                "piVar7": "intPointer2",
                "bVar8": "byteVar",
                "auVar9": "resultStruct"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariableDebuggingInfo_0010c05d(long fileRecord,long variable,ulong namespace,int recordType,undefined8 record,\n            undefined8 result)\n\n{\n  undefined returnVal [16];\n  undefined8 returnValue;\n  int *intPointer;\n  char isRecordTypeOne;\n  long loopCounter;\n  long namespacePtr;\n  int *intPointer2;\n  byte byteVar;\n  undefined resultStruct [16];\n  \n  byteVar = 0;\n  if (variable == 0) {\n    returnVal._8_8_ = 0;\n    returnVal._0_8_ = namespace;\n    return returnVal << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(fileRecord + 8) == 0) || (namespacePtr = *(long *)(fileRecord + 0x10), namespacePtr == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (recordType - 1U < 2) {\n        namespacePtr = namespacePtr + 0x10;\n        isRecordTypeOne = (recordType == 1) + '\\x01';\n      }\n      else if (*(long *)(fileRecord + 0x20) == 0) {\n        namespacePtr = namespacePtr + 0x10;\n        isRecordTypeOne = '\\0';\n      }\n      else {\n        namespacePtr = *(long *)(fileRecord + 0x20) + 0x28;\n        isRecordTypeOne = '\\0';\n      }\n      namespacePtr = debug_add_to_namespace_constprop_0(namespacePtr,variable,2,isRecordTypeOne);\n      if (namespacePtr != 0) {\n        intPointer = (int *)xmalloc(0x18);\n        intPointer2 = intPointer + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *intPointer2 = 0;\n          intPointer2 = intPointer2 + (ulong)byteVar * -2 + 1;\n        }\n        *intPointer = recordType;\n        returnValue = 1;\n        *(ulong *)(intPointer + 2) = namespace;\n        *(undefined8 *)(intPointer + 4) = record;\n        *(int **)(namespacePtr + 0x20) = intPointer;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  resultStruct._8_8_ = result;\n  resultStruct._0_8_ = returnValue;\n  return resultStruct;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_emit_pending_vars",
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_variable_debugging_info_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "handle_stab_push_00109d97",
                "param_1": "param",
                "lVar1": "count",
                "local_40": "message"
            },
            "code": "\nvoid handleStabPush_00109d97(long param)\n\n{\n  long count;\n  char message [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    stab_push_defined_type(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  count = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = count + 1;\n  sprintf(message,\"%ld=%ld\",count,count);\n  stab_push_string(param,message,count,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "handle_stab_push_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "create_symbol_htab",
                "main",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = reconstruct_gnu_build_attribute_notes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = reconstruct_gnu_build_attribute_notes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = reconstruct_gnu_build_attribute_notes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto process_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto process_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nprocess_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "FUN_00116490",
                "dcgettext",
                "qsort",
                "merge_gnu_build_notes.cold",
                "bfd_set_error",
                "compare_gnu_build_notes"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_stab_class_method_var_0010add5",
                "stab_class_method_var()": "initialize_stab_class_method_var()"
            },
            "code": "\nvoid initialize_stab_class_method_var_0010add5(void)\n\n{\n  initialize_stab_class_method_var_0010add5();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_stab_class_method_var_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_constant_property_00113e17",
                "debug_make_type_constprop_0": "debugConstPropertyTransformation"
            },
            "code": "\nvoid initializeConstantProperty_00113e17(void)\n\n{\n  debugConstPropertyTransformation(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_constant_property_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "create_data_entry_00109b52",
                "param_1": "entryList",
                "param_2": "stringParam",
                "param_3": "paramThree",
                "param_4": "paramFour",
                "param_5": "paramFive",
                "uVar1": "prevEntry",
                "puVar2": "newEntry",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined createDataEntry_00109b52(long entryList,undefined8 stringParam,undefined8 paramThree,undefined paramFour,\n                      undefined4 paramFive)\n\n{\n  undefined8 prevEntry;\n  undefined8 *newEntry;\n  undefined8 duplicatedString;\n  \n  newEntry = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(stringParam);\n  newEntry[2] = paramThree;\n  *(undefined (*) [16])(newEntry + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newEntry + 6) = ZEXT816(0);\n  prevEntry = *(undefined8 *)(entryList + 0x60);\n  *(undefined *)((long)newEntry + 0x1c) = paramFour;\n  *(undefined4 *)(newEntry + 3) = paramFive;\n  *(undefined8 **)(entryList + 0x60) = newEntry;\n  *newEntry = prevEntry;\n  newEntry[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_modify_type",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_data_entry_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_string_00109a32",
                "param_1": "input_string",
                "param_2": "out_of_range",
                "param_3": "max_string",
                "param_4": "unused_param_4",
                "param_5": "result",
                "__nptr": "str_ptr",
                "piVar1": "error_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message",
                "auVar4": "output_result"
            },
            "code": "\nundefined  [16]\nparse_numeric_string_00109a32(char **input_string,undefined *out_of_range,char *max_string,undefined8 unused_param_4,undefined8 result)\n\n{\n  char *str_ptr;\n  int *error_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined output_result [16];\n  \n  if (out_of_range != (undefined *)0x0) {\n    *out_of_range = 0;\n  }\n  str_ptr = *input_string;\n  if ((str_ptr < max_string) && (*str_ptr != '\\0')) {\n    error_ptr = __errno_location();\n    *error_ptr = 0;\n    parsed_value = strtoul(str_ptr,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*error_ptr == 0)) goto LAB_00109aa9;\n    if (out_of_range == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(str_ptr,error_message);\n    }\n    else {\n      *out_of_range = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  output_result._8_8_ = result;\n  output_result._0_8_ = parsed_value;\n  return output_result;\n}\n\n",
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "warn_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_numeric_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "find_debug_type_0010c6be",
                "param_1": "file_address",
                "param_2": "tag_name",
                "param_3": "tag_info",
                "iVar1": "string_comparison_result",
                "piVar3": "new_tag_info",
                "pauVar4": "tag_data",
                "lVar5": "offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * find_debug_type_0010c6be(long file_address,char *tag_name,int *tag_info)\n\n{\n  int string_comparison_result;\n  undefined8 uVar2;\n  int *new_tag_info;\n  undefined (*tag_data) [16];\n  long offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_info != (int *)0x0)) {\n    if (*(long *)(file_address + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tag_info != 0x17) {\n        new_tag_info = (int *)debug_make_type_constprop_0(0x17,0);\n        if (new_tag_info == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tag_data = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(file_address + 0x10);\n        *tag_data = ZEXT816(0);\n        *(int **)(*tag_data + 8) = tag_info;\n        *(undefined (**) [16])(new_tag_info + 4) = tag_data;\n        offset = debug_add_to_namespace_constprop_0(offset + 0x10,tag_name,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = new_tag_info;\n        *(long *)*tag_data = offset;\n        return new_tag_info;\n      }\n      string_comparison_result = strcmp(*(char **)(**(long **)(tag_info + 4) + 8),tag_name);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (string_comparison_result == 0) {\n        return tag_info;\n      }\n    }\n    uVar2 = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",uVar2);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "finish_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "find_debug_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_arglist_0010b6ea",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "argListHead",
                "param_4": "errorFlag",
                "__ptr": "result",
                "__format": "errorMsg",
                "lVar1": "demangledValue",
                "uVar2": "numDemangled",
                "uVar3": "capacity",
                "uVar4": "index",
                "local_39": "demangledString"
            },
            "code": "\n\n\nvoid * demangleArglist_0010b6ea(undefined8 param1,undefined8 param2,int *argListHead,undefined *errorFlag)\n\n{\n  void *result;\n  char *errorMsg;\n  long demangledValue;\n  ulong numDemangled;\n  ulong capacity;\n  uint index;\n  char demangledString [9];\n  \n  capacity = 10;\n  numDemangled = 0;\n  result = (void *)xmalloc(0x50);\n  *errorFlag = 0;\n  for (; argListHead != (int *)0x0; argListHead = *(int **)(argListHead + 6)) {\n    if (*argListHead != 0x2e) {\n      errorMsg = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,errorMsg);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(argListHead + 4) == 0) break;\n    demangledValue = stab_demangle_v3_arg(param1,param2,*(long *)(argListHead + 4),0,demangledString);\n    if (demangledValue == 0) {\n      if (demangledString[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *errorFlag = 1;\n    }\n    else {\n      index = (int)numDemangled + 1;\n      if ((uint)capacity <= index) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + numDemangled * 8) = demangledValue;\n      numDemangled = (ulong)index;\n    }\n  }\n  *(undefined8 *)((long)result + numDemangled * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "stab_demangle_v3_arg",
                "xmalloc",
                "free",
                "xrealloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_0011a2e0",
                "param_1": "section_info",
                "param_2": "binary",
                "uVar1": "section_address",
                "uVar2": "error_message",
                "lVar3": "section_info_ptr",
                "lVar4": "section_ptr"
            },
            "code": "\nlong extract_section_0011a2e0(long section_info,long binary)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long section_info_ptr;\n  long section_ptr;\n  \n  section_info_ptr = (**(code **)(*(long *)(binary + 8) + 0x208))(binary);\n  section_ptr = *(long *)(section_info + 0x20);\n  *(undefined8 *)(section_info_ptr + 8) = *(undefined8 *)(section_info + 8);\n  *(undefined8 *)(section_info_ptr + 0x10) = *(undefined8 *)(section_info + 0x10);\n  *(undefined4 *)(section_info_ptr + 0x18) = *(undefined4 *)(section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary);\n    if (section_ptr == 0) {\n      section_address = *(undefined8 *)(section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(error_message,section_address);\n    }\n  }\n  *(long *)(section_info_ptr + 0x20) = section_ptr;\n  return section_info_ptr;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_translated_symbol_0010e8a9",
                "param_1": "originalName",
                "param_2": "symbolTable",
                "param_3": "translatedText",
                "uVar1": "result",
                "sVar2": "textLength",
                "__s": "formattedText"
            },
            "code": "\nundefined4 writeTranslatedSymbol_0010e8a9(undefined8 originalName,undefined8 symbolTable,char *translatedText)\n\n{\n  undefined4 result;\n  size_t textLength;\n  char *formattedText;\n  \n  textLength = strlen(translatedText);\n  formattedText = (char *)xmalloc(textLength + 0x14);\n  sprintf(formattedText,\"%s:c=f%g\",originalName,translatedText);\n  result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedText);\n  if ((char)result != '\\0') {\n    free(formattedText);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_translated_symbol_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "classify_section_flags_00104ad6",
                "unaff_RBP": "sectionName",
                "__s": "remainingString",
                "sVar4": "length",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "iVar5": "substringLength",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "sectionFlag",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] classifySectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *sectionName;\n  char *remainingString;\n  size_t length;\n  int substringLength;\n  uint sectionFlags;\n  char *sectionFlag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    remainingString = sectionName;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (remainingString == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = sectionFlags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(remainingString,0x2c);\n              if (commaPosition == (char *)0x0) {\n                length = strlen(remainingString);\n                substringLength = (int)length;\n                sectionName = (char *)0x0;\n              }\n              else {\n                sectionName = commaPosition + 1;\n                substringLength = (int)commaPosition - (int)remainingString;\n              }\n              length = (size_t)substringLength;\n              comparisonResult = strncasecmp(sectionFlag,remainingString,length);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              remainingString = sectionName;\n            }\n            comparisonResult = strncasecmp(\"load\",remainingString,length);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            remainingString = sectionName;\n          }\n          comparisonResult = strncasecmp(\"noload\",remainingString,length);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          remainingString = sectionName;\n        }\n        comparisonResult = strncasecmp(\"readonly\",remainingString,length);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        remainingString = sectionName;\n      }\n      comparisonResult = strncasecmp(\"debug\",remainingString,length);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",remainingString,length);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        remainingString = sectionName;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",remainingString,length);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          remainingString = sectionName;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",remainingString,length);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            remainingString = sectionName;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",remainingString,length);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              remainingString = sectionName;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",remainingString,length);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                remainingString = sectionName;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",remainingString,length);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  remainingString = sectionName;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",remainingString,length);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    remainingString = sectionName;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",remainingString,length);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(substringLength + 1));\n                      strncpy(commaPosition,remainingString,length);\n                      commaPosition[length] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(uVar2,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    remainingString = sectionName;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "strchr",
                "non_fatal",
                "strlen",
                "dcgettext",
                "parse_flags.cold",
                "fatal",
                "strncpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "classify_section_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "valueToCheck",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long valueToCheck;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = valueToCheck == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "arg3",
                "param_4": "arg4",
                "lVar1": "currentUnit",
                "iVar2": "result",
                "uVar3": "errorMessage",
                "puVar4": "ptr1",
                "lVar5": "ptr2",
                "puVar6": "ptr3",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 arg3,undefined8 arg4)\n\n{\n  long currentUnit;\n  int result;\n  undefined8 errorMessage;\n  undefined8 *ptr1;\n  long ptr2;\n  undefined8 *ptr3;\n  undefined returnValue [16];\n  \n  currentUnit = *(long *)(compilationUnit + 8);\n  if (currentUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (ptr2 = *(long *)(compilationUnit + 0x20); ptr2 != 0; ptr2 = *(long *)(ptr2 + 8)) {\n      if (*(undefined8 **)(ptr2 + 0x28) != (undefined8 *)0x0) {\n        for (ptr1 = (undefined8 *)**(undefined8 **)(ptr2 + 0x28); ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *typeName) {\n              result = strcmp((char *)ptr1[1],typeName);\n              if (result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr3 = *(undefined8 **)(currentUnit + 8); ptr3 != (undefined8 *)0x0;\n        ptr3 = (undefined8 *)*ptr3) {\n      if ((undefined8 *)ptr3[2] != (undefined8 *)0x0) {\n        for (ptr1 = *(undefined8 **)(undefined8 *)ptr3[2]; ptr1 != (undefined8 *)0x0;\n            ptr1 = (undefined8 *)*ptr1) {\n          if (*(int *)((long)ptr1 + 0x14) == 0) {\n            if (*(char *)ptr1[1] == *typeName) {\n              result = strcmp((char *)ptr1[1],typeName);\n              if (result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  returnValue._8_8_ = arg4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\nLAB_00109216:\n  errorMessage = ptr1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "handle_dwo_section_0010829e",
                "unaff_EBP": "ebp_value",
                "uVar1": "result"
            },
            "code": "\nundefined8 handle_dwo_section_0010829e(void)\n\n{\n  undefined8 result;\n  int ebp_value;\n  \n  if (ebp_value == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((ebp_value != 4) && (ebp_value == 6)) {\n    result = check_dwo_section_constprop_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_dwo_section_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_architectures_00104943",
                "in_RAX": "inputString",
                "iVar1": "intValue",
                "iVar2": "index",
                "lVar3": "parsedLong",
                "sVar4": "strLen",
                "pcVar5": "archString",
                "uVar6": "printableArchString",
                "iVar7": "archIndex",
                "lVar8": "startIndex",
                "iVar9": "endIndex",
                "unaff_R15D": "archCount",
                "uVar10": "length",
                "uVar11": "archOffset",
                "param_7": "startIndexCopy",
                "uStack000000000000000c": "archOffsetCopy",
                "param_11": "archMachArray",
                "param_13": "archStringArray"
            },
            "code": "\n\n\nvoid printReverseArchitectures_00104943(void)\n\n{\n  int intValue;\n  int index;\n  char *inputString;\n  long parsedLong;\n  size_t strLen;\n  char *archString;\n  undefined8 printableArchString;\n  int archIndex;\n  long startIndex;\n  int endIndex;\n  uint archCount;\n  ulong length;\n  uint archOffset;\n  int startIndexCopy;\n  uint archOffsetCopy;\n  undefined8 archMachArray;\n  long archStringArray;\n  \n  parsedLong = strtol(inputString,(char **)0x0,10);\n  intValue = (int)parsedLong;\n  endIndex = startIndexCopy;\n  archOffsetCopy = archCount;\n  if (intValue == 0) {\n    intValue = 0x50;\n  }\n  do {\n    startIndexCopy = endIndex;\n    if (archMachArray._4_4_ <= startIndexCopy) {\n      return;\n    }\n    startIndex = (long)startIndexCopy;\n    archIndex = (intValue - archOffsetCopy) + -1;\n    parsedLong = startIndex;\n    do {\n      endIndex = (int)parsedLong;\n      if (archMachArray._4_4_ <= endIndex) break;\n      strLen = strlen(*(char **)(archStringArray + parsedLong * 0x60));\n      parsedLong = parsedLong + 1;\n      archIndex = (archIndex - (int)strLen) + -1;\n    } while (-1 < archIndex);\n    printf(\"\\n%*s\",(ulong)(archOffsetCopy + 1),&DAT_0011b4a1);\n    for (parsedLong = startIndex * 0x60; ((ulong)(uint)(endIndex - startIndexCopy) + startIndex) * 0x60 - parsedLong != 0;\n        parsedLong = parsedLong + 0x60) {\n      printf(\"%s \",*(undefined8 *)(archStringArray + parsedLong));\n    }\n    archIndex = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(archIndex,0);\n      index = strcmp(archString,\"UNKNOWN!\");\n      if (index != 0) {\n        printableArchString = bfd_printable_arch_mach(archIndex,0);\n        printf(\"%*s \",(ulong)archOffsetCopy,printableArchString);\n        archOffset = archIndex - 2;\n        parsedLong = startIndex * 0x60;\n        index = startIndexCopy;\n        while (endIndex != index) {\n          archString = *(char **)(archStringArray + parsedLong);\n          if (*(char *)((long)(char **)(archStringArray + parsedLong) + (ulong)archOffset + 8) == '\\0') {\n            strLen = strlen(archString);\n            for (length = strLen & 0xffffffff; (int)length != 0; length = (ulong)((int)length - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          index = index + 1;\n          if (endIndex != index) {\n            putc(0x20,_stdout);\n          }\n          parsedLong = parsedLong + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archIndex = archIndex + 1;\n    } while (archIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "fputs",
                "strcmp",
                "printf",
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_reverse_architectures_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_type_instance_00113e23",
                "param_1": "type_data",
                "param_2": "instance_data",
                "lVar1": "type_instance",
                "puVar2": "new_instance_ptr"
            },
            "code": "\nlong create_type_instance_00113e23(undefined8 type_data,undefined8 instance_data)\n\n{\n  long type_instance;\n  undefined8 *new_instance_ptr;\n  \n  type_instance = debug_make_type_constprop_0(1,0);\n  if (type_instance != 0) {\n    new_instance_ptr = (undefined8 *)xmalloc(0x10);\n    *new_instance_ptr = type_data;\n    new_instance_ptr[1] = instance_data;\n    *(undefined8 **)(type_instance + 0x10) = new_instance_ptr;\n  }\n  return type_instance;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_tagged_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "create_type_instance_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "stabString",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 stabString)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stabString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab_type_number",
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "extract_and_parse_integer_00108ea1",
                "iVar1": "current_digit",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong extract_and_parse_integer_00108ea1(byte **param_1,int *param_2)\n\n{\n  int current_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *param_1;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_digit = (char)*current_byte + -0x30;\n    *param_2 = current_digit;\n    *param_1 = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *param_1 = next_byte;\n        *param_2 = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "extract_and_parse_integer_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_size_and_alignment_00108072",
                "unaff_RBX": "function_data",
                "unaff_RBP": "binary_address",
                "unaff_R12": "section_address",
                "unaff_R14B": "check_flag",
                "unaff_R15": "result_address",
                "change_section_address": "section_address_change",
                "lVar5": "size_failed_msg",
                "lVar6": "section_list",
                "lVar7": "section_address",
                "lVar8": "section_data",
                "uVar2": "section_value",
                "uVar4": "alignment_value",
                "bVar1": "byte_value",
                "cVar3": "char_value"
            },
            "code": "\nvoid set_size_and_alignment_00108072(void)\n\n{\n  byte byte_value;\n  undefined8 section_value;\n  char char_value;\n  uint alignment_value;\n  long size_failed_msg;\n  long section_list;\n  long section_address;\n  undefined8 *function_data;\n  long binary_address;\n  long section_address;\n  long section_data;\n  char check_flag;\n  long result_address;\n  \n  size_failed_msg = dcgettext(0,\"failed to set size\",5);\n  section_data = function_data[6];\n  section_list = find_section_list(*function_data,0,0x18);\n  if (section_list == 0) {\n    *(byte *)(result_address + 0x28) = *(byte *)(result_address + 0x28) | 1;\n    section_value = *function_data;\n    section_data = section_data + section_address_change;\n    *(long *)(result_address + 0x30) = section_data;\n    *(long *)(result_address + 0x38) = section_data;\n    section_data = function_data[7];\n    section_list = find_section_list(section_value,0,0x60);\n    if (section_list == 0) goto LAB_00115695;\nLAB_00115860:\n    section_address = *(long *)(section_list + 0x20);\n    if ((*(byte *)(section_list + 0x14) & 0x40) != 0) {\n      section_address = section_address + section_data;\n    }\n    *(long *)(result_address + 0x38) = section_address;\n    section_data = find_section_list(*function_data,0,0x200);\n    if (section_data != 0) goto LAB_00115889;\nLAB_001156b8:\n    alignment_value = *(uint *)((long)function_data + 0x7c);\n    if (alignment_value < 0x3f) goto LAB_001156c4;\n    size_failed_msg = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result_address + 0xb4) = *(undefined4 *)((long)function_data + 0xb4);\n    *(byte *)(result_address + 0x28) =\n         *(byte *)(result_address + 0x28) & 0xcf | *(byte *)(function_data + 5) & 0x30;\n    function_data[0xc] = result_address;\n    function_data[0xb] = 0;\n    byte_value = *(byte *)((long)function_data + 0x27);\n  }\n  else {\n    section_address = *(long *)(section_list + 0x18);\n    if ((*(byte *)(section_list + 0x14) & 8) == 0) {\n      section_address = section_address + section_data;\n    }\n    *(byte *)(result_address + 0x28) = *(byte *)(result_address + 0x28) | 1;\n    section_value = *function_data;\n    *(long *)(result_address + 0x30) = section_address;\n    *(long *)(result_address + 0x38) = section_address;\n    section_data = function_data[7];\n    section_list = find_section_list(section_value,0,0x60);\n    if (section_list != 0) goto LAB_00115860;\nLAB_00115695:\n    section_value = *function_data;\n    *(long *)(result_address + 0x38) = section_data + section_address_change;\n    section_data = find_section_list(section_value,0,0x200);\n    if (section_data == 0) goto LAB_001156b8;\nLAB_00115889:\n    alignment_value = *(uint *)(section_data + 0x2c);\n    if (0x3e < alignment_value) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result_address + 0x7c) = alignment_value;\n    *(undefined4 *)(result_address + 0xb4) = *(undefined4 *)((long)function_data + 0xb4);\n    *(byte *)(result_address + 0x28) =\n         *(byte *)(result_address + 0x28) & 0xcf | *(byte *)(function_data + 5) & 0x30;\n    function_data[0xc] = result_address;\n    function_data[0xb] = 0;\n    byte_value = *(byte *)((long)function_data + 0x27);\n  }\n  if ((byte_value & 2) != 0) {\n    section_data = function_data[0x1a];\n    section_list = group_signature_isra_0(section_data,function_data[0x1c]);\n    if ((section_list != 0) &&\n       (section_address = *(long *)(section_address + 8), *(uint *)(section_list + 0x18) = *(uint *)(section_list + 0x18) | 0x20,\n       *(int *)(section_address + 8) == 5)) {\n      *(long *)(section_data + 0xb0) = section_list;\n      char_value = (**(code **)(*(long *)(binary_address + 8) + 0x158))();\n      if (char_value == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  char_value = (**(code **)(*(long *)(binary_address + 8) + 0x158))();\n  if (char_value == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (check_flag != '\\0') {\n    *(undefined4 *)(*(long *)(result_address + 0xd0) + 4) = 8;\n  }\n  if (size_failed_msg != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "FUN_00108179",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_size_and_alignment_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "parse_and_store_string_0010a2b9",
                "param_1": "binary_address",
                "param_2": "flag",
                "param_3": "param_a",
                "param_4": "param_b",
                "cVar1": "char_value",
                "__s": "popped_string",
                "sVar2": "string_length",
                "__s_00": "allocated_string",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] parse_and_store_string_0010a2b9(long binary_address,char flag,undefined8 param_a,undefined8 param_b)\n\n{\n  char char_value;\n  char *popped_string;\n  size_t string_length;\n  char *allocated_string;\n  long counter;\n  undefined result [16];\n  \n  char_value = *(char *)(*(long *)(binary_address + 0x60) + 0x1c);\n  popped_string = (char *)stab_pop_type();\n  string_length = strlen(popped_string);\n  allocated_string = (char *)xmalloc(string_length + 0x1e);\n  if (flag == '\\0') {\n    *allocated_string = '\\0';\n    counter = 0;\n    flag = char_value;\n  }\n  else {\n    counter = *(long *)(binary_address + 0x68);\n    *(long *)(binary_address + 0x68) = counter + 1;\n    sprintf(allocated_string,\"%ld=@S;\",counter);\n  }\n  string_length = strlen(allocated_string);\n  sprintf(allocated_string + string_length,\"S%s\",popped_string);\n  free(popped_string);\n  result._0_4_ = stab_push_string(binary_address,allocated_string,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(allocated_string);\n  }\n  result._8_8_ = param_b;\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "parse_and_store_string_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "update_value_0010ec73",
                "param_1": "array",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined updateValue_0010ec73(long *array,long value,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int count;\n  char result;\n  \n  if (array[0x3c] != -1) {\n    (**(code **)(*(long *)(*array + 8) + 0x50))(value,array[1] + 8 + array[0x3c]);\n    array[0x3c] = -1;\n  }\n  if (array[0x3d] != -1) {\n    (**(code **)(*(long *)(*array + 8) + 0x50))(value,array[1] + 8 + array[0x3d]);\n    array[0x3d] = -1;\n  }\n  count = *(int *)(array + 0x3f);\n  *(int *)(array + 0x3f) = count + 1;\n  if (count == 0) {\n    array[0x40] = value;\n  }\n  else {\n    if ((array[0x41] != -1) &&\n       (result = stab_write_symbol_lto_priv_0(array,0xc0,0,array[0x41],0,param6,param4),\n       result == '\\0')) {\n      return 0;\n    }\n    array[0x41] = value - array[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_value_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endiannessValue"
            },
            "code": "\nvoid getEndianness_00114e00(int endiannessValue)\n\n{\n  if (endiannessValue == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessValue == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_times_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "fileSize",
                "param_5": "shouldSetTimes",
                "param_6": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errorPointer",
                "pcVar3": "errorString",
                "uVar4": "error",
                "uVar5": "bytesCopied",
                "auVar6": "result"
            },
            "code": "\nundefined  [16]\ncopyAndSetTimes_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 fileSize,char shouldSetTimes,\n            undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errorPointer;\n  char *errorString;\n  undefined8 error;\n  ulong bytesCopied;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    bytesCopied = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFilePath,fileSize);\n    bytesCopied = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorPointer = __errno_location();\n      errorString = strerror(*errorPointer);\n      error = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(error,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetTimes != '\\0') {\n    set_times(destinationFilePath,fileSize);\n  }\n  result._8_8_ = errorCode;\n  result._0_8_ = bytesCopied;\n  return result;\n}\n\n",
            "called": [
                "smart_rename.cold",
                "simple_copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_set_times_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_class_0010adf2",
                "stab_class_method_var": "initializeStabClassMethodVar"
            },
            "code": "\nvoid initializeClass_0010adf2(void)\n\n{\n  initializeStabClassMethodVar();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "uVar1": "previous_type",
                "cVar2": "result",
                "uVar3": "remembered_type",
                "lVar4": "temp",
                "plVar5": "destination",
                "uVar6": "counter",
                "local_40": "stored_type"
            },
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 previous_type;\n  char result;\n  undefined4 remembered_type;\n  long temp;\n  long *destination;\n  uint counter;\n  long stored_type [2];\n  \n  previous_type = *param_2;\n  destination = stored_type;\n  if (param_3 == (long *)0x0) {\n    destination = (long *)0x0;\n  }\n  result = stab_demangle_type_lto_priv_0(param_1,param_2,destination);\n  if ((result != '\\0') &&\n     (remembered_type = stab_demangle_remember_type(param_1,previous_type,(int)*param_2 - (int)previous_type),\n     (char)remembered_type != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return remembered_type;\n    }\n    if (stored_type[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        counter = *param_5 + 10;\n        temp = *param_3;\n        *param_5 = counter;\n        temp = xrealloc(temp,(ulong)counter << 3);\n        *param_3 = temp;\n      }\n      counter = *param_4;\n      *(long *)(*param_3 + (ulong)counter * 8) = stored_type[0];\n      *param_4 = counter + 1;\n      return remembered_type;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "stab_demangle_type.lto_priv.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "demangle_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "get_file_information_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "str_error",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong get_file_information_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *str_error;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,file_path);\n      }\n      else {\n        str_error = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,file_path,str_error);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "get_file_size.cold",
                "non_fatal",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "copy_file",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "get_file_information_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "clear_memory_001087fd"
            },
            "code": "\nundefined8 clearMemory_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "clear_memory_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "__format": "formatMsg",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 uVar1;\n  char *formatMsg;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  uVar1 = program_name;\n  formatMsg = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMsg,uVar1);\n  for (currentFormatString = formatStrings; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "extract_and_write_debug_info_0011378f",
                "param_1": "input_files",
                "param_2": "output_data",
                "param_3": "output_buffer",
                "param_4": "output_size",
                "param_5": "output_strings",
                "param_6": "output_count",
                "auVar1": "temp_buffer",
                "cVar2": "status",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "buffer_ptr",
                "sVar6": "string_length",
                "lVar7": "loop_counter",
                "puVar8": "symbol_ptr",
                "puVar9": "symbol_table",
                "__dest": "destination_ptr",
                "puVar10": "compilation_unit_ptr",
                "plVar11": "source_ptr",
                "bVar12": "flag",
                "local_258": "input_file_ptr",
                "local_250": "output_buffer_size",
                "local_248": "temp_var1",
                "uStack_244": "temp_var2",
                "uStack_240": "constant1",
                "uStack_23c": "constant2",
                "local_238": "temp_var3",
                "local_228": "constant3",
                "local_220": "hash_table1",
                "local_1f8": "constant4",
                "local_1f0": "constant5",
                "local_1e8": "hash_table2",
                "local_a0": "hash_table3",
                "local_78": "constant6",
                "uStack_70": "temp_var4",
                "local_68": "temp_var5",
                "local_60": "temp_var6",
                "local_58": "temp_var7",
                "uStack_54": "temp_var8",
                "uStack_50": "temp_var9",
                "uStack_4c": "temp_var10"
            },
            "code": "\nundefined4\nextract_and_write_debug_info_0011378f(undefined8 *input_files,undefined8 *output_data,long *output_buffer,undefined8 *output_size,\n            undefined8 *output_strings,undefined8 *output_count)\n\n{\n  undefined temp_buffer [16];\n  char status;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *buffer_ptr;\n  size_t string_length;\n  long loop_counter;\n  undefined8 *symbol_ptr;\n  undefined4 *symbol_table;\n  char *destination_ptr;\n  undefined8 *compilation_unit_ptr;\n  long *source_ptr;\n  byte flag;\n  undefined8 *input_file_ptr;\n  long output_buffer_size;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined temp_var3 [16];\n  undefined8 constant3;\n  undefined hash_table1 [40];\n  undefined8 constant4;\n  undefined8 constant5;\n  undefined4 hash_table2 [82];\n  undefined hash_table3 [40];\n  undefined constant6 [8];\n  undefined8 temp_var4;\n  undefined8 temp_var5;\n  undefined4 temp_var6;\n  undefined4 temp_var7;\n  undefined4 temp_var8;\n  undefined4 temp_var9;\n  undefined4 temp_var10;\n  \n  flag = 0;\n  temp_var1 = 0;\n  temp_var2 = 0;\n  constant1 = 500;\n  constant2 = 0;\n  input_file_ptr = input_files;\n  output_buffer_size = xmalloc(500);\n  constant3 = 1;\n  temp_var3 = ZEXT816(0);\n  status = bfd_hash_table_init(hash_table1,string_hash_newfunc_lto_priv_0,0x30);\n  if ((status == '\\0') ||\n     (status = bfd_hash_table_init(hash_table3,string_hash_newfunc_lto_priv_0,0x30), status == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    constant4 = 0;\n    unique0x100000e9 = 0xffffffff;\n    constant6 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    symbol_table = hash_table2;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *symbol_table = 0;\n      symbol_table = symbol_table + (ulong)flag * -2 + 1;\n    }\n    temp_var5 = 0;\n    temp_var6 = 0;\n    constant5 = 1;\n    temp_var7 = 0;\n    temp_var8 = 0;\n    temp_var9 = 0xffffffff;\n    temp_var10 = 0xffffffff;\n    status = stab_write_symbol_lto_priv_0(&input_file_ptr,0,0,0,0);\n    temp_buffer = _constant6;\n    if (status != '\\0') {\n      constant6._4_4_ = temp_var2;\n      constant6._0_4_ = temp_var1;\n      temp_var4 = temp_buffer._8_8_;\n      status = stab_write_symbol_lto_priv_0(&input_file_ptr,100,0,0,*input_files);\n      if (status != '\\0') {\n        *(int *)(output_data + 6) = *(int *)(output_data + 6) + 1;\n        output_data[10] = 0;\n        compilation_unit_ptr = (undefined8 *)*output_data;\n        *(undefined4 *)(output_data + 7) = *(undefined4 *)((long)output_data + 0x34);\n        for (; compilation_unit_ptr != (undefined8 *)0x0; compilation_unit_ptr = (undefined8 *)*compilation_unit_ptr) {\n          output_data[8] = compilation_unit_ptr[2];\n          *(undefined4 *)(output_data + 9) = 0;\n          status = stab_start_compilation_unit_lto_priv_0(&input_file_ptr,*(undefined8 *)(compilation_unit_ptr[1] + 8))\n          ;\n          if (status == '\\0') {\n            return 0;\n          }\n          source_ptr = (long *)compilation_unit_ptr[1];\n          if (source_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)source_ptr[2] != (undefined8 *)0x0) {\n                for (symbol_ptr = *(undefined8 **)(undefined8 *)source_ptr[2]; symbol_ptr != (undefined8 *)0x0;\n                    symbol_ptr = (undefined8 *)*symbol_ptr) {\n                  status = debug_write_name_constprop_0(output_data,&input_file_ptr);\n                  if (status == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              source_ptr = (long *)*source_ptr;\n              if (source_ptr == (long *)0x0) break;\n              status = stab_start_source_lto_priv_0(&input_file_ptr,source_ptr[1]);\n              if (status == '\\0') {\n                return 0;\n              }\n            }\n          }\n          status = debug_write_linenos_constprop_0(output_data,&input_file_ptr,0xffffffffffffffff);\n          if (status == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(temp_var10,temp_var9) == -1) &&\n           (error_code = stab_write_symbol_lto_priv_0(&input_file_ptr,100,0,temp_var5,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(input_files[1] + 0x50))(constant3,output_buffer_size + 8);\n          *output_buffer = output_buffer_size;\n          *output_size = CONCAT44(temp_var2,temp_var1);\n          *output_count = constant3;\n          buffer_ptr = (undefined *)xmalloc();\n          *buffer_ptr = 0;\n          destination_ptr = buffer_ptr + 1;\n          *output_strings = buffer_ptr;\n          for (loop_counter = temp_var3._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(destination_ptr,*(char **)(loop_counter + 8));\n            string_length = strlen(destination_ptr);\n            destination_ptr = destination_ptr + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "bfd_hash_table_init",
                "strlen",
                "debug_write_linenos.constprop.0",
                "string_hash_newfunc.lto_priv.0",
                "strcpy",
                "debug_write_name.constprop.0",
                "xmalloc",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_and_write_debug_info_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_error_file_not_found_00104966",
                "piVar1": "errno_location",
                "uVar2": "error_message"
            },
            "code": "\nundefined8 handle_ErrorFileNotFound_00104966(void)\n\n{\n  int *errno_location;\n  undefined8 error_message;\n  \n  errno_location = __errno_location();\n  if (*errno_location == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(error_message);\n  }\n  else {\n    strerror(*errno_location);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_error_file_not_found_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_type_0010a0a0",
                "param_1": "input",
                "stab_modify_type": "modifyStabType"
            },
            "code": "\nvoid modifyType_0010a0a0(long input)\n\n{\n  modifyStabType(input,0x26,4,input + 0x198,input + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "data5",
                "param_6": "data6",
                "param_7": "data7",
                "param_8": "data8",
                "param_9": "reportPtr",
                "param_10": "ptr1",
                "param_11": "ptr2",
                "param_12": "ptr3",
                "param_13": "ptr4",
                "param_14": "ptr5",
                "in_AL": "enableReport",
                "local_d8": "length",
                "local_d4": "dataSize",
                "local_d0": "stackPtr",
                "local_c8": "localBuffer",
                "local_b8": "dataBuffer",
                "local_b0": "ptr1Data",
                "local_a8": "ptr2Data",
                "local_a0": "ptr3Data",
                "local_98": "ptr4Data",
                "local_90": "ptr5Data",
                "local_88": "param1Data",
                "local_78": "param2Data",
                "local_68": "param3Data",
                "local_58": "param4Data",
                "local_48": "param5Data",
                "local_38": "param6Data",
                "local_28": "param7Data",
                "local_18": "param8Data"
            },
            "code": "\nvoid reportData_00119ed0(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4,\n                 undefined4 data5,undefined4 data6,undefined4 data7,undefined4 data8,\n                 undefined8 reportPtr,undefined8 ptr1,undefined8 ptr2,undefined8 ptr3,\n                 undefined8 ptr4,undefined8 ptr5)\n\n{\n  char enableReport;\n  undefined4 length;\n  undefined4 dataSize;\n  undefined *stackPtr;\n  undefined *localBuffer;\n  undefined dataBuffer [8];\n  undefined8 ptr1Data;\n  undefined8 ptr2Data;\n  undefined8 ptr3Data;\n  undefined8 ptr4Data;\n  undefined8 ptr5Data;\n  undefined4 param1Data;\n  undefined4 param2Data;\n  undefined4 param3Data;\n  undefined4 param4Data;\n  undefined4 param5Data;\n  undefined4 param6Data;\n  undefined4 param7Data;\n  undefined4 param8Data;\n  \n  if (enableReport != '\\0') {\n    param1Data = data1;\n    param2Data = data2;\n    param3Data = data3;\n    param4Data = data4;\n    param5Data = data5;\n    param6Data = data6;\n    param7Data = data7;\n    param8Data = data8;\n  }\n  stackPtr = &stack0x00000008;\n  length = 8;\n  localBuffer = dataBuffer;\n  dataSize = 0x30;\n  ptr1Data = ptr1;\n  ptr2Data = ptr2;\n  ptr3Data = ptr3;\n  ptr4Data = ptr4;\n  ptr5Data = ptr5;\n  report(reportPtr,&length);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "main",
                "merge_gnu_build_notes",
                "get_file_size",
                "parse_flags.cold",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "set_times.cold",
                "FUN_00105828",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00107880",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "report_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "FUNC_00112c1f"
            },
            "code": "\n\n\nundefined8 FUNC_00112c1f(ulong param_1,undefined8 param_2,int *param_3,long param_4)\n\n{\n  long *plVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined8 *puVar4;\n  char cVar5;\n  int *piVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined8 uVar11;\n  ulong uVar12;\n  uint uVar13;\n  bool bVar14;\n  uint local_3c;\n  \n  uVar12 = param_1;\nLAB_00112c39:\n  if (param_3 != (int *)0x0) {\n    iVar9 = *param_3;\n    if (iVar9 - 0x16U < 2) {\n      do {\n        plVar1 = *(long **)(param_3 + 4);\n        uVar13 = *(uint *)(param_1 + 0x30);\n        uVar12 = (ulong)uVar13;\n        lVar2 = *plVar1;\n        if (*(uint *)(lVar2 + 0x10) == uVar13) {\n          if (iVar9 == 0x16) {\n            uVar7 = stab_typedef_type_lto_priv_0(param_2,*(undefined8 *)(lVar2 + 8));\n            return uVar7;\n          }\nLAB_00112c94:\n          piVar6 = (int *)debug_get_real_type_isra_0(param_3,0);\n          if (piVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*piVar6 - 7U < 4) && (*(long *)(piVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(piVar6 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n               (cVar5 = debug_set_class_id_lto_priv_0\n                                  (param_1,*(undefined8 *)(**(long **)(param_3 + 4) + 8),piVar6),\n               cVar5 == '\\0')) {\n              return 0;\n            }\n            uVar13 = *(uint *)(*(long *)(piVar6 + 4) + 0xc);\n          }\n          else {\n            uVar13 = 0;\n          }\n          iVar9 = *piVar6;\n          uVar7 = *(undefined8 *)(**(long **)(param_3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar9 == 0x17) {\n          if (lVar2 != param_4) goto LAB_00112c94;\n          *(uint *)(param_4 + 0x10) = uVar13;\n          param_4 = *plVar1;\n          param_3 = (int *)plVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param_4 != 0) {\n          *(uint *)(param_4 + 0x10) = uVar13;\n        }\n        param_3 = (int *)plVar1[1];\n        if (param_3 == (int *)0x0) goto LAB_00112dd6;\n        iVar9 = *param_3;\n        param_4 = 0;\n      } while (iVar9 - 0x16U < 2);\nLAB_00112d74:\n      uVar7 = 0;\n    }\n    else {\n      if (param_4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param_4 + 0x10) = *(undefined4 *)(param_1 + 0x30);\n      if (*(int *)(param_4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      uVar7 = *(undefined8 *)(param_4 + 8);\n    }\n    switch(iVar9) {\n    case 0:\n      uVar7 = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",uVar7);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      uVar7 = stab_void_type_lto_priv_0(param_2);\n      return uVar7;\n    case 3:\n      uVar7 = stab_int_type_lto_priv_0(param_2,param_3[1],*(undefined *)(param_3 + 4));\n      return uVar7;\n    case 4:\n      uVar7 = stab_float_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 5:\n      uVar7 = stab_complex_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 6:\n      uVar7 = stab_bool_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 7:\n    case 8:\n      if (*(long *)(param_3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (cVar5 = debug_set_class_id_lto_priv_0(param_1,uVar7,param_3), cVar5 == '\\0')) {\n          return 0;\n        }\n        lVar2 = *(long *)(param_3 + 4);\n        if (*(int *)(param_1 + 0x30) == *(int *)(lVar2 + 8)) {\n          uVar13 = *(uint *)(lVar2 + 0xc);\n          if (uVar13 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar9 = *param_3;\nLAB_00112ed2:\n          uVar7 = stab_tag_type_lto_priv_0(param_2,uVar7,uVar13,iVar9);\n          return uVar7;\n        }\n        *(int *)(lVar2 + 8) = *(int *)(param_1 + 0x30);\n      }\n      uVar10 = 0;\n      if (*(long *)(param_3 + 4) != 0) {\n        uVar10 = *(undefined4 *)(*(long *)(param_3 + 4) + 0xc);\n      }\n      cVar5 = stab_start_struct_type_lto_priv_0(param_2,uVar7,uVar10,*param_3 == 7,param_3[1]);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_3 + 4) != (long *)0x0) && (uVar12 = 0, **(long **)(param_3 + 4) != 0)) {\n        while( true ) {\n          puVar4 = *(undefined8 **)(**(long **)(param_3 + 4) + uVar12 * 8);\n          if (puVar4 == (undefined8 *)0x0) break;\n          cVar5 = FUNC_00112c1f(param_1,param_2,puVar4[1],0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n          cVar5 = stab_struct_field_lto_priv_0\n                            (param_2,*puVar4,*(undefined4 *)(puVar4 + 3),\n                             *(undefined4 *)((long)puVar4 + 0x1c),*(undefined4 *)(puVar4 + 2));\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n          uVar12 = (ulong)((int)uVar12 + 1);\n        }\n      }\n      uVar7 = stab_end_struct_type_lto_priv_0(param_2);\n      return uVar7;\n    case 9:\n    case 10:\n      if (*(long *)(param_3 + 4) == 0) {\n        uVar13 = 0;\n        piVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (uVar12 = param_1, cVar5 = debug_set_class_id_lto_priv_0(param_1,uVar7,param_3),\n           cVar5 == '\\0')) {\n          return 0;\n        }\n        lVar2 = *(long *)(param_3 + 4);\n        uVar13 = *(uint *)(lVar2 + 0xc);\n        if (*(int *)(param_1 + 0x30) == *(int *)(lVar2 + 8)) {\n          if (uVar13 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar9 = *param_3;\n          goto LAB_00112ed2;\n        }\n        piVar6 = *(int **)(lVar2 + 0x20);\n        *(int *)(lVar2 + 8) = *(int *)(param_1 + 0x30);\n        if (((piVar6 != (int *)0x0) && (param_3 != piVar6)) &&\n           (uVar12 = param_1, cVar5 = FUNC_00112c1f(param_1,param_2,piVar6,0), cVar5 == '\\0')) {\n          return 0;\n        }\n      }\n      cVar5 = stab_start_class_type_lto_priv_0\n                        (param_2,uVar7,uVar13,*param_3 == 9,param_3[1],piVar6 != (int *)0x0,\n                         param_3 == piVar6,uVar12);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_3 + 4) != (long *)0x0) {\n        uVar13 = 0;\n        if (**(long **)(param_3 + 4) != 0) {\n          while (puVar4 = *(undefined8 **)(**(long **)(param_3 + 4) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = FUNC_00112c1f(param_1,param_2,puVar4[1],0);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)puVar4 + 0x14) == '\\0') {\n              cVar5 = stab_struct_field_lto_priv_0(param_2,*puVar4,*(undefined4 *)(puVar4 + 3));\n            }\n            else {\n              cVar5 = stab_class_static_member_lto_priv_0(param_2,*puVar4,puVar4[3]);\n            }\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        uVar13 = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x10) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x10) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = FUNC_00112c1f(param_1,param_2,*puVar4,0);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            cVar5 = stab_class_baseclass_lto_priv_0\n                              (param_2,*(undefined4 *)(puVar4 + 1),\n                               *(undefined *)((long)puVar4 + 0xc));\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        local_3c = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x18) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x18) + (ulong)local_3c * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = stab_class_start_method_lto_priv_0(param_2,*puVar4);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = 0;\n            while (puVar3 = *(undefined8 **)(puVar4[1] + (ulong)uVar13 * 8),\n                  puVar3 != (undefined8 *)0x0) {\n              if ((puVar3[4] != 0) &&\n                 (cVar5 = FUNC_00112c1f(param_1,param_2,puVar3[4],0), cVar5 == '\\0')) {\n                return 0;\n              }\n              cVar5 = FUNC_00112c1f(param_1,param_2,puVar3[1],0);\n              if (cVar5 == '\\0') {\n                return 0;\n              }\n              if (puVar3[3] == -1) {\n                cVar5 = stab_class_static_method_variant_lto_priv_0\n                                  (param_2,*puVar3,*(undefined4 *)(puVar3 + 2),\n                                   *(undefined *)((long)puVar3 + 0x14),\n                                   *(undefined *)((long)puVar3 + 0x15));\n              }\n              else {\n                cVar5 = stab_class_method_variant_lto_priv_0(param_2);\n              }\n              if (cVar5 == '\\0') {\n                return 0;\n              }\n              uVar13 = uVar13 + 1;\n            }\n            cVar5 = stab_class_end_method_lto_priv_0(param_2);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            local_3c = local_3c + 1;\n          }\n        }\n      }\n      uVar7 = stab_end_class_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xb:\n      puVar4 = *(undefined8 **)(param_3 + 4);\n      if (puVar4 == (undefined8 *)0x0) {\n        uVar8 = 0;\n        uVar11 = 0;\n      }\n      else {\n        uVar8 = puVar4[1];\n        uVar11 = *puVar4;\n      }\n      uVar7 = stab_enum_type_lto_priv_0(param_2,uVar7,uVar11,uVar8);\n      return uVar7;\n    case 0xc:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_pointer_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xd:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 8) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (lVar2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 8) + uVar12 * 8), lVar2 != 0) {\n          uVar12 = uVar12 + 1;\n          cVar5 = FUNC_00112c1f(param_1,param_2,lVar2,0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n        }\n        uVar12 = uVar12 & 0xffffffff;\n      }\n      uVar7 = stab_function_type_lto_priv_0\n                        (param_2,uVar12,*(undefined *)(*(long *)(param_3 + 4) + 0x10));\n      return uVar7;\n    case 0xe:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_reference_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xf:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_range_type_lto_priv_0\n                        (param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_3 + 4) + 0x10));\n      return uVar7;\n    case 0x10:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      lVar2 = *(long *)(param_3 + 4);\n      uVar7 = stab_array_type_lto_priv_0\n                        (param_2,*(undefined8 *)(lVar2 + 0x10),*(undefined8 *)(lVar2 + 0x18),\n                         *(undefined *)(lVar2 + 0x20));\n      return uVar7;\n    case 0x11:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_set_type_lto_priv_0(param_2,*(undefined *)(*(long *)(param_3 + 4) + 8));\n      return uVar7;\n    case 0x12:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_offset_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0x13:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 0x10) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (lVar2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 0x10) + uVar12 * 8), lVar2 != 0)\n        {\n          uVar12 = uVar12 + 1;\n          cVar5 = FUNC_00112c1f(param_1,param_2,lVar2,0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_3 + 4) + 8) != 0) &&\n         (cVar5 = FUNC_00112c1f(param_1,param_2,*(long *)(*(long *)(param_3 + 4) + 8),0),\n         cVar5 == '\\0')) {\n        return 0;\n      }\n      uVar7 = stab_method_type_lto_priv_0\n                        (param_2,*(long *)(*(long *)(param_3 + 4) + 8) != 0,uVar12 & 0xffffffff,\n                         *(undefined *)(*(long *)(param_3 + 4) + 0x18));\n      return uVar7;\n    case 0x14:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_const_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0x15:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_volatile_type_lto_priv_0(param_2);\n      return uVar7;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bVar14 = *(int **)**(undefined8 **)(param_3 + 4) == param_3;\n  param_3 = *(int **)**(undefined8 **)(param_3 + 4);\n  if (bVar14) {\nLAB_00112dd6:\n    uVar7 = stab_empty_type_lto_priv_0(param_2);\n    return uVar7;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "__assert_fail",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_tag_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "abort",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "fprintf",
                "stab_function_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_method_variant.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "dcgettext",
                "stab_int_type.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "FUNC_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "conditionFlag",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char conditionFlag;\n  long dataPointer;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (conditionFlag != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "in_RAX": "result",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 result;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,source,message,result);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_architecture_00105828",
                "iVar1": "architecture_code",
                "uVar2": "machine_code",
                "uVar3": "arch_mach_name",
                "uVar4": "error_message"
            },
            "code": "\nundefined8 check_architecture_00105828(void)\n\n{\n  int architecture_code;\n  undefined4 machine_code;\n  undefined8 arch_mach_name;\n  undefined8 error_message;\n  \n  architecture_code = bfd_get_arch();\n  if (architecture_code == 0) {\n    arch_mach_name = bfd_get_archive_filename();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(error_message,arch_mach_name);\n  }\n  else {\n    arch_mach_name = bfd_get_mach();\n    machine_code = bfd_get_arch();\n    arch_mach_name = bfd_printable_arch_mach(machine_code,arch_mach_name);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(error_message,arch_mach_name);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "non_fatal",
                "bfd_get_arch",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_architecture_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template_path",
                "pcVar1": "temp_directory_path"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temp_directory_path;\n  \n  template_path = (char *)template_in_dir();\n  temp_directory_path = mkdtemp(template_path);\n  if (temp_directory_path == (char *)0x0) {\n    free(template_path);\n  }\n  return temp_directory_path;\n}\n\n",
            "called": [
                "make_tempdir.cold",
                "template_in_dir",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "find_defined_type_0010bba1",
                "param_1": "base_address",
                "param_2": "search_key",
                "lVar1": "hash_result",
                "uVar2": "push_result"
            },
            "code": "\nundefined8 find_defined_type_0010bba1(long base_address,undefined8 search_key)\n\n{\n  long hash_result;\n  undefined8 push_result;\n  \n  hash_result = bfd_hash_lookup(base_address + 0x1b8,search_key,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    push_result = stab_push_defined_type(base_address,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return push_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "find_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "write_symbol_lto_0010e6a8",
                "param_1": "data",
                "param_2": "name",
                "param_3": "arg3",
                "param_4": "arg4",
                "__s": "type",
                "sVar3": "name_length",
                "sVar4": "type_length",
                "__s_00": "formatted_string",
                "lVar5": "hash_result",
                "lVar8": "symbol_count",
                "uVar1": "result",
                "uVar2": "error_code",
                "uVar6": "bfd_error_message",
                "uVar7": "error_message",
                "uVar9": "is_success",
                "auVar10": "return_value"
            },
            "code": "\nundefined  [16] write_symbol_lto_0010e6a8(long data,char *name,undefined8 arg3,undefined8 arg4)\n\n{\n  uint result;\n  undefined4 error_code;\n  char *type;\n  size_t name_length;\n  size_t type_length;\n  char *formatted_string;\n  long hash_result;\n  undefined8 bfd_error_message;\n  undefined8 error_message;\n  long symbol_count;\n  ulong is_success;\n  undefined return_value [16];\n  \n  symbol_count = *(long *)(*(long *)(data + 0x60) + 0x10);\n  error_code = *(undefined4 *)(*(long *)(data + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  name_length = strlen(name);\n  type_length = strlen(type);\n  formatted_string = (char *)xmalloc(name_length + 0x14 + type_length);\n  if (symbol_count < 1) {\n    symbol_count = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = symbol_count + 1;\n    sprintf(formatted_string,\"%s:t%ld=%s\",name,symbol_count,type);\n  }\n  else {\n    sprintf(formatted_string,\"%s:t%s\",name,type);\n  }\n  free(type);\n  result = stab_write_symbol_lto_0010e6a8_priv_0(data,0x80,0,0,formatted_string);\n  is_success = (ulong)result;\n  if ((char)result != '\\0') {\n    free(formatted_string);\n    hash_result = bfd_hash_lookup(data + 0x1b8,name,1,0);\n    if (hash_result != 0) {\n      *(long *)(hash_result + 0x20) = symbol_count;\n      *(undefined4 *)(hash_result + 0x28) = error_code;\n      goto LAB_0010e7b3;\n    }\n    error_code = bfd_get_error();\n    bfd_error_message = bfd_errmsg(error_code);\n    error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(error_message,bfd_error_message);\n  }\n  is_success = 0;\nLAB_0010e7b3:\n  return_value._8_8_ = arg4;\n  return_value._0_8_ = is_success;\n  return return_value;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "bfd_get_error",
                "stab_pop_type",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "sprintf",
                "dcgettext",
                "bfd_hash_lookup",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_lto_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "reverse_str_concatenate_0010e7c2",
                "param_1": "input_data",
                "param_2": "prefix",
                "param_3": "unknown_param",
                "param_4": "output_data",
                "__s": "suffix",
                "sVar1": "prefix_len",
                "sVar2": "suffix_len",
                "__s_00": "concatenated_str",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] reverse_str_concatenate_0010e7c2(undefined8 input_data,char *prefix,undefined8 unknown_param,undefined8 output_data)\n\n{\n  char *suffix;\n  size_t prefix_len;\n  size_t suffix_len;\n  char *concatenated_str;\n  undefined result [16];\n  \n  suffix = (char *)stab_pop_type();\n  prefix_len = strlen(prefix);\n  suffix_len = strlen(suffix);\n  concatenated_str = (char *)xmalloc(prefix_len + 3 + suffix_len);\n  sprintf(concatenated_str,\"%s:T%s\",prefix,suffix);\n  free(suffix);\n  result._0_4_ = stab_write_symbol_lto_priv_0(input_data,0x80,0,0,concatenated_str);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(concatenated_str);\n  }\n  result._8_8_ = output_data;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_str_concatenate_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "process_and_report_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "output1",
                "param_10": "output2",
                "param_11": "output3",
                "param_12": "output4",
                "param_13": "output5",
                "param_14": "output6",
                "in_AL": "isConditionMet",
                "local_d8": "arrayLength",
                "local_d4": "bufferLength",
                "local_d0": "arrayPointer",
                "local_c8": "bufferPointer",
                "local_b8": "buffer",
                "local_b0": "value1",
                "local_a8": "value2",
                "local_a0": "value3",
                "local_98": "value4",
                "local_90": "value5",
                "local_88": "original_input1",
                "local_78": "original_input2",
                "local_68": "original_input3",
                "local_58": "original_input4",
                "local_48": "original_input5",
                "local_38": "original_input6",
                "local_28": "original_input7",
                "local_18": "original_input8"
            },
            "code": "\nvoid processAndReport_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 output1,undefined8 output2,undefined8 output3,undefined8 output4,\n                 undefined8 output5,undefined8 output6)\n\n{\n  char isConditionMet;\n  undefined4 arrayLength;\n  undefined4 bufferLength;\n  undefined *arrayPointer;\n  undefined *bufferPointer;\n  undefined buffer [8];\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  undefined8 value4;\n  undefined8 value5;\n  undefined4 original_input1;\n  undefined4 original_input2;\n  undefined4 original_input3;\n  undefined4 original_input4;\n  undefined4 original_input5;\n  undefined4 original_input6;\n  undefined4 original_input7;\n  undefined4 original_input8;\n  \n  if (isConditionMet != '\\0') {\n    original_input1 = input1;\n    original_input2 = input2;\n    original_input3 = input3;\n    original_input4 = input4;\n    original_input5 = input5;\n    original_input6 = input6;\n    original_input7 = input7;\n    original_input8 = input8;\n  }\n  arrayPointer = &stack0x00000008;\n  arrayLength = 8;\n  bufferPointer = buffer;\n  bufferLength = 0x30;\n  value1 = output2;\n  value2 = output3;\n  value3 = output4;\n  value4 = output5;\n  value5 = output6;\n  report(output1,&arrayLength);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "copy_file",
                "find_section_list",
                "FUN_00114dc7",
                "copy_section.cold",
                "main",
                "parse_flags.cold",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "coff_get_slot.lto_priv.0",
                "init_section_add.cold",
                "section_add_load_file.cold",
                "FUN_0010554f",
                "add_redefine_and_check",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "process_and_report_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_file",
                "FUN_00107880",
                "copy_object",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "unaffectedRBP",
                "unaff_retaddr": "unaffectedRetAddr"
            },
            "code": "\nundefined8 handleBFDError_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *unaffectedRBP;\n  undefined8 unaffectedRetAddr;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return unaffectedRetAddr;\n    }\n  }\n  bfd_nonfatal(*unaffectedRBP);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_notes_00116852",
                "in_RCX": "noteArray",
                "in_R10": "noteCount",
                "in_R11": "noteType",
                "unaff_RBX": "minNoteSize",
                "unaff_RBP": "currentNote",
                "unaff_R13": "startNote",
                "unaff_R14": "note",
                "unaff_R15": "maxNoteSize",
                "param_7": "param7",
                "param_9": "param9",
                "param_10": "outputSize",
                "param_11": "inputArray",
                "param_12": "outputArray",
                "param_13": "param13",
                "param_14": "inputSize",
                "sVar1": "noteSize",
                "pcVar2": "functionPtr",
                "iVar3": "result",
                "uVar4": "counter",
                "__ptr": "tempPtr",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "lVar7": "temp3",
                "uVar8": "temp4",
                "puVar9": "tempPtr1",
                "cVar10": "tempChar",
                "puVar11": "tempPtr2",
                "puVar12": "tempPtr3",
                "bVar14": "tempByte",
                "psVar13": "tempArray"
            },
            "code": "\nulong processNotes_00116852(void)\n\n{\n  size_t noteSize;\n  code *functionPtr;\n  int result;\n  uint counter;\n  undefined *tempPtr;\n  size_t *noteArray;\n  ulong temp1;\n  ulong temp2;\n  long temp3;\n  ulong temp4;\n  size_t minNoteSize;\n  size_t *currentNote;\n  undefined *tempPtr1;\n  char tempChar;\n  undefined *tempPtr2;\n  ulong noteCount;\n  undefined *tempPtr3;\n  size_t noteType;\n  size_t *startNote;\n  size_t *note;\n  size_t maxNoteSize;\n  size_t *tempArray;\n  byte tempByte;\n  size_t param7;\n  size_t param9;\n  ulong outputSize;\n  size_t *inputArray;\n  undefined *outputArray;\n  long param13;\n  size_t inputSize;\n  \n  tempByte = 0;\ncode_r0x00116852:\n  counter = (int)noteCount + 1;\n  if (0x10 < (int)noteCount) goto LAB_001167f5;\nLAB_00116863:\n  note = note + -9;\n  do {\n    if (startNote <= note) {\n      noteSize = note[2];\n      if (noteSize == 0) goto LAB_00116863;\n      temp4 = (ulong)counter;\n      if ((*note == *currentNote) &&\n         (result = memcmp((void *)note[3],(void *)currentNote[3],*currentNote), result == 0)) {\n        temp2 = note[7];\n        temp1 = note[8];\n        noteCount = temp4 & 0xffffffff;\n        if (maxNoteSize == temp2) {\n          if (minNoteSize != temp1) goto LAB_001167a6;\n          currentNote[2] = 0;\n        }\n        else {\n          if (maxNoteSize < temp2) {\n            if (temp1 < maxNoteSize) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < temp1) || (maxNoteSize <= (temp1 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (minNoteSize < maxNoteSize) {\n              if ((0xfffffffffffffff0 < minNoteSize) ||\n                 (temp2 <= (minNoteSize + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (minNoteSize == temp1) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (minNoteSize <= temp1) {\n              currentNote[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (temp1 < maxNoteSize) goto LAB_0010852c;\n          }\n          if ((noteType == 0x101) != (noteSize == 0x101)) goto code_r0x00116852;\n          if (temp1 <= minNoteSize) {\n            temp1 = minNoteSize;\n          }\n          if (temp2 < maxNoteSize) {\n            maxNoteSize = temp2;\n          }\n          note[8] = temp1;\n          note[7] = maxNoteSize;\n          currentNote[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        note = currentNote;\n        currentNote = note + 9;\n        if (noteArray <= currentNote) {\n          qsort(inputArray,inputSize,0x48,sort_gnu_build_notes);\n          tempPtr = (undefined *)xmalloc(outputSize * 2);\n          param7 = 0;\n          tempPtr3 = tempPtr;\n          for (tempArray = inputArray; tempArray < noteArray; tempArray = tempArray + 9) {\n            if (tempArray[2] != 0) {\n              tempPtr2 = tempPtr3 + 4;\n              tempPtr1 = tempPtr3 + 0xc;\n              functionPtr = *(code **)(*(long *)(param13 + 8) + 0x50);\n              if ((tempArray[7] == param9) && (tempArray[8] == param7)) {\n                (*functionPtr)(*tempArray,tempPtr3);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(0,tempPtr2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(tempArray[2],tempPtr3 + 8);\n                temp2 = tempArray[6];\n                temp4 = *tempArray;\n                tempPtr3 = (undefined *)tempArray[3];\n                tempPtr2 = tempPtr1;\n                for (temp1 = temp4; temp1 != 0; temp1 = temp1 - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                }\n                if (temp4 < temp2) {\n                  for (temp3 = temp2 - temp4; temp3 != 0; temp3 = temp3 + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                  }\n                }\n                tempPtr3 = tempPtr1 + temp2;\n              }\n              else {\n                (*functionPtr)();\n                if (*(int *)(*(long *)(param13 + 8) + 8) == 5) {\n                  tempChar = (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  tempChar = '\\b';\n                }\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(tempChar,tempPtr2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(tempArray[2],tempPtr3 + 8);\n                temp4 = *tempArray;\n                tempPtr3 = (undefined *)tempArray[3];\n                tempPtr2 = tempPtr1;\n                for (temp2 = temp4; temp2 != 0; temp2 = temp2 - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                }\n                temp2 = tempArray[6];\n                if (temp4 < temp2) {\n                  for (temp3 = temp2 - temp4; temp3 != 0; temp3 = temp3 + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)tempByte * -2 + 1;\n                  }\n                }\n                temp3 = *(long *)(param13 + 8);\n                tempPtr1 = tempPtr1 + temp2;\n                tempPtr3 = tempPtr1 + 8;\n                if ((*(int *)(temp3 + 8) == 5) &&\n                   (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(temp3 + 0x38))(tempArray[7],tempPtr1);\n                  (**(code **)(*(long *)(param13 + 8) + 0x38))(tempArray[8],tempPtr3);\n                  tempPtr3 = tempPtr1 + 0x10;\n                }\n                else {\n                  (**(code **)(temp3 + 0x50))(tempArray[7],tempPtr1);\n                  (**(code **)(*(long *)(param13 + 8) + 0x50))(tempArray[8],tempPtr1 + 4);\n                }\n                param9 = tempArray[7];\n                param7 = tempArray[8];\n              }\n            }\n          }\n          temp2 = (long)tempPtr3 - (long)tempPtr;\n          temp4 = temp2;\n          tempPtr3 = tempPtr;\n          if (temp2 < outputSize) {\n            for (; outputSize = temp2, temp4 != 0; temp4 = temp4 - 1) {\n              *outputArray = *tempPtr3;\n              tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n              outputArray = outputArray + (ulong)tempByte * -2 + 1;\n            }\n          }\n          free(tempPtr);\n          free(inputArray);\n          return outputSize;\n        }\n        noteType = note[0xb];\n      } while (noteType == 0);\n      maxNoteSize = note[0x10];\n      minNoteSize = note[0x11];\n      counter = 0;\n      if (maxNoteSize != minNoteSize) break;\n      note[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "sort_gnu_build_notes",
                "qsort",
                "xmalloc",
                "free",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_type_00113d3a",
                "param_1": "input",
                "lVar1": "typePointer"
            },
            "code": "\nlong initializeType_00113d3a(long input)\n\n{\n  long typePointer;\n  \n  if (input != 0) {\n    typePointer = *(long *)(input + 8);\n    if (typePointer == 0) {\n      typePointer = debug_make_type_constprop_0(0xc,0);\n      if (typePointer == 0) {\n        typePointer = 0;\n      }\n      else {\n        *(long *)(typePointer + 0x10) = input;\n        *(long *)(input + 8) = typePointer;\n      }\n    }\n    return typePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_type_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "main",
                "parse_stab",
                "display_info.isra.0.cold",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "section_add_load_file",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "input",
                "stab_modify_type": "modifyStabType"
            },
            "code": "\nvoid modifyStabType_0010a0d3(long input)\n\n{\n  modifyStabType_0010a0d3(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_sections_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "sectionPointer",
                "pcVar2": "sectionName",
                "ppcVar3": "renameListPointer",
                "cVar4": "isStripSection",
                "iVar5": "comparisonResult",
                "uVar6": "flag",
                "sVar7": "prefixLen",
                "sVar8": "sectionLen",
                "lVar9": "foundSectionPointer",
                "pcVar10": "tempPointer1",
                "pcVar11": "tempPointer2",
                "pcVar12": "tempPointer3",
                "uVar13": "sectionFlags",
                "bVar14": "isFlagSet",
                "local_50": "errorPointer",
                "local_48": "actualSectionName",
                "local_40": "localArray"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid processSections_00115530(long param1,char **param2,long param3)\n\n{\n  long sectionPointer;\n  char *sectionName;\n  char **renameListPointer;\n  char isStripSection;\n  int comparisonResult;\n  uint flag;\n  size_t prefixLen;\n  size_t sectionLen;\n  long foundSectionPointer;\n  char *tempPointer1;\n  char *tempPointer2;\n  char *tempPointer3;\n  uint sectionFlags;\n  bool isFlagSet;\n  long errorPointer;\n  char *actualSectionName;\n  long localArray [2];\n  \n  isStripSection = is_strip_section_isra_0(param2);\n  if (isStripSection != '\\0') {\n    return;\n  }\n  tempPointer1 = *param2;\n  sectionFlags = *(uint *)((long)param2 + 0x24);\n  actualSectionName = tempPointer1;\n  renameListPointer = section_rename_list;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    sectionFlags = sectionFlags & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; renameListPointer != (char **)0x0; renameListPointer = (char **)renameListPointer[3]) {\n    comparisonResult = strcmp(*renameListPointer,tempPointer1);\n    if (comparisonResult == 0) {\n      if (*(uint *)(renameListPointer + 2) != 0xffffffff) {\n        sectionFlags = *(uint *)(renameListPointer + 2);\n      }\n      if (tempPointer1 != renameListPointer[1]) {\n        actualSectionName = renameListPointer[1];\n        sectionFlags = check_new_section_flags(sectionFlags,param3);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (tempPointer1 = prefix_alloc_sections_string, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (tempPointer1 = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    prefixLen = strlen(tempPointer1);\n    sectionLen = strlen(actualSectionName);\n    tempPointer3 = (char *)xmalloc(prefixLen + 1 + sectionLen);\n    tempPointer1 = strcpy(tempPointer3,tempPointer1);\n    actualSectionName = strcat(tempPointer1,actualSectionName);\n  }\n  foundSectionPointer = find_section_list(*param2,0,0x80);\n  isFlagSet = false;\n  if (foundSectionPointer == 0) {\n    if ((strip_symbols == 4) && ((sectionFlags & 0x2000001) != 0)) {\n      comparisonResult = *(int *)(*(long *)(param1 + 8) + 8);\n      if (comparisonResult == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            isFlagSet = (sectionFlags & 0x2000000) == 0;\n            flag = ~((-(uint)((sectionFlags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & flag;\n          }\n          else {\n            flag = 0xfdfffefd;\n          }\n          sectionFlags = sectionFlags & flag;\n        }\n      }\n      else if ((comparisonResult != 2) || (comparisonResult = strcmp(*param2,\".buildid\"), comparisonResult != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    sectionFlags = check_new_section_flags(sectionFlags & 0x104 | *(uint *)(foundSectionPointer + 0x28),param3,*param2);\n  }\n  isStripSection = bfd_convert_section_setup(param1,param2,param3,&actualSectionName,localArray);\n  if (isStripSection == '\\0') {\n    tempPointer1 = (char *)0x0;\n    errorPointer = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  tempPointer1 = (char *)bfd_make_section_anyway_with_flags(param3,actualSectionName,sectionFlags);\n  if (tempPointer1 == (char *)0x0) {\n    errorPointer = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      localArray[0] = 0;\n      goto LAB_001158e7;\n    }\n    isStripSection = bfd_set_section_size(tempPointer1,localArray[0]);\n    if (isStripSection == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    localArray[0] = ((((long)interleave - 1U) + localArray[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    isStripSection = bfd_set_section_size(tempPointer1);\n    if (isStripSection == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  errorPointer = 0;\n  tempPointer3 = param2[6];\n  foundSectionPointer = find_section_list(*param2,0,0x18);\n  if (foundSectionPointer == 0) {\n    tempPointer1[0x28] = tempPointer1[0x28] | 1;\n    tempPointer2 = *param2;\n    tempPointer3 = tempPointer3 + change_section_address;\n    *(char **)(tempPointer1 + 0x30) = tempPointer3;\n    *(char **)(tempPointer1 + 0x38) = tempPointer3;\n    tempPointer3 = param2[7];\n    foundSectionPointer = find_section_list(tempPointer2,0,0x60);\n    if (foundSectionPointer == 0) goto LAB_00115695;\nLAB_00115860:\n    tempPointer2 = *(char **)(foundSectionPointer + 0x20);\n    if ((*(byte *)(foundSectionPointer + 0x14) & 0x40) != 0) {\n      tempPointer2 = tempPointer2 + (long)tempPointer3;\n    }\n    *(char **)(tempPointer1 + 0x38) = tempPointer2;\n    foundSectionPointer = find_section_list(*param2,0,0x200);\n    if (foundSectionPointer != 0) goto LAB_00115889;\nLAB_001156b8:\n    sectionFlags = *(uint *)((long)param2 + 0x7c);\n    if (sectionFlags < 0x3f) goto LAB_001156c4;\n    errorPointer = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(tempPointer1 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    tempPointer1[0x28] = tempPointer1[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = tempPointer1;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    isStripSection = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,tempPointer1);\n    if (isStripSection == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    tempPointer2 = *(char **)(foundSectionPointer + 0x18);\n    if ((*(byte *)(foundSectionPointer + 0x14) & 8) == 0) {\n      tempPointer2 = tempPointer2 + (long)tempPointer3;\n    }\n    tempPointer1[0x28] = tempPointer1[0x28] | 1;\n    sectionName = *param2;\n    *(char **)(tempPointer1 + 0x30) = tempPointer2;\n    *(char **)(tempPointer1 + 0x38) = tempPointer2;\n    tempPointer3 = param2[7];\n    foundSectionPointer = find_section_list(sectionName,0,0x60);\n    if (foundSectionPointer != 0) goto LAB_00115860;\nLAB_00115695:\n    tempPointer2 = *param2;\n    *(char **)(tempPointer1 + 0x38) = tempPointer3 + change_section_address;\n    foundSectionPointer = find_section_list(tempPointer2,0,0x200);\n    if (foundSectionPointer == 0) goto LAB_001156b8;\nLAB_00115889:\n    sectionFlags = *(uint *)(foundSectionPointer + 0x2c);\n    if (0x3e < sectionFlags) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(tempPointer1 + 0x7c) = sectionFlags;\n    *(undefined4 *)(tempPointer1 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    tempPointer1[0x28] = tempPointer1[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = tempPointer1;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempPointer3 = param2[0x1a];\n    foundSectionPointer = group_signature_isra_0(tempPointer3,param2[0x1c]);\n    if ((foundSectionPointer == 0) ||\n       (sectionPointer = *(long *)(param1 + 8), *(uint *)(foundSectionPointer + 0x18) = *(uint *)(foundSectionPointer + 0x18) | 0x20,\n       *(int *)(sectionPointer + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempPointer3 + 0xb0) = foundSectionPointer;\n    isStripSection = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,tempPointer1);\n    if (isStripSection == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (isFlagSet) {\n    *(undefined4 *)(*(long *)(tempPointer1 + 0xd0) + 4) = 8;\n  }\n  if (errorPointer == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,param3,tempPointer1,errorPointer);\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "setup_section.cold",
                "strlen",
                "strcat",
                "dcgettext",
                "bfd_make_section_anyway_with_flags",
                "strcpy",
                "strcmp",
                "is_strip_section.isra.0",
                "xmalloc",
                "bfd_convert_section_setup",
                "check_new_section_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_sections_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "arg"
            },
            "code": "\nvoid modify_stab_type_0010a0bd(long arg)\n\n{\n  stab_modify_type(arg,0x6b,*(undefined4 *)(*(long *)(arg + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "extract_type_from_string_00113e5e",
                "param_1": "old_string",
                "param_2": "input_ptr",
                "param_3": "string_length",
                "cVar1": "check_result",
                "local_20": "string_ptr"
            },
            "code": "\nundefined8 extract_type_from_string_00113e5e(undefined8 old_string,char **input_ptr,long string_length)\n\n{\n  char check_result;\n  char *string_ptr [2];\n  \n  string_ptr[0] = *input_ptr;\n  *input_ptr = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)string_ptr[0] < 5) ||\n      (check_result = startswith_lto_priv_0_lto_priv_0(string_ptr[0],\"type\"), check_result == '\\0')) ||\n     ((string_ptr[0][4] != '$' && (string_ptr[0][4] != '.')))) {\n    if (*string_ptr[0] != '_') {\n      return 1;\n    }\n    if (string_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (string_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (string_ptr[0][3] != 'p') {\n      return 1;\n    }\n    string_ptr[0] = string_ptr[0] + 4;\n  }\n  else {\n    string_ptr[0] = string_ptr[0] + 5;\n  }\n  check_result = stab_demangle_type_lto_priv_0(old_string,string_ptr,0);\n  if (check_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_type_from_string_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "create_new_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "dataPtr",
                "param_2": "string1",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "dataStruct",
                "pcVar2": "buffer1",
                "bVar3": "byteVal",
                "pcVar4": "buffer2",
                "__s": "buffer3",
                "sVar5": "length1",
                "sVar6": "length2",
                "sVar7": "length3",
                "sVar8": "length4",
                "uVar9": "result",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long dataPtr,char *string1,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long dataStruct;\n  char *buffer1;\n  byte byteVal;\n  char *buffer2;\n  char *buffer3;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte localByte;\n  \n  buffer3 = (char *)0x0;\n  localByte = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  buffer2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byteVal = 1;\n    if (localByte == 0) {\n      byteVal = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n    }\n    localByte = byteVal & 1;\n    buffer3 = (char *)stab_pop_type(dataPtr);\n  }\n  dataStruct = *(long *)(dataPtr + 0x60);\n  if ((dataStruct == 0) || (buffer1 = *(char **)(dataStruct + 0x30), buffer1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    length1 = strlen(buffer1);\n    length2 = strlen(buffer2);\n    length3 = strlen(string1);\n    length4 = 0;\n    if (flag4 != '\\0') {\n      length4 = strlen(buffer3);\n    }\n    result = xrealloc(buffer1,length3 + length1 + 0x28 + length2 + length4);\n    *(undefined8 *)(dataStruct + 0x30) = result;\n    buffer1 = *(char **)(*(long *)(dataPtr + 0x60) + 0x30);\n    length1 = strlen(buffer1);\n    sprintf(buffer1 + length1,\"%s:%s;%c%c%c\",buffer2,string1,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,length1);\n    free(buffer2);\n    if (flag4 != '\\0') {\n      buffer2 = *(char **)(*(long *)(dataPtr + 0x60) + 0x30);\n      length1 = strlen(buffer2);\n      sprintf(buffer2 + length1,\"%ld;%s;\",value,buffer3);\n      free(buffer3);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "inputFlag",
                "param_2": "paramArray",
                "param_3": "paramValue",
                "uVar1": "var1",
                "uVar2": "var2"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint inputFlag,undefined8 *paramArray,undefined8 paramValue)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  \n  if (((inputFlag & 0x8000000) != 0) && (*(int *)(paramArray[1] + 8) != 2)) {\n    var1 = *paramArray;\n    inputFlag = inputFlag & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(var2,var1,paramValue);\n  }\n  return inputFlag;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "setup_section"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_value_from_binary_001129f4",
                "param_1": "input_array",
                "puVar1": "next_element_ptr",
                "piVar2": "current_element_ptr"
            },
            "code": "\nundefined8 get_value_from_binary_001129f4(int *input_array)\n\n{\n  undefined8 *next_element_ptr;\n  int *current_element_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    next_element_ptr = (undefined8 *)(input_array + 4);\n    current_element_ptr = **(int ***)(undefined8 *)*next_element_ptr;\n  } while ((input_array != current_element_ptr) && (input_array = current_element_ptr, current_element_ptr != (int *)0x0));\n  return ((undefined8 *)*next_element_ptr)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_value_from_binary_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_dwo_section_constprop_001082b3",
                "uVar1": "is_section_constprop",
                "is_dwo_section_constprop_0": "is_section_constprop_0"
            },
            "code": "\nuint check_dwo_section_constprop_001082b3(void)\n\n{\n  uint is_section_constprop;\n  \n  is_section_constprop = is_section_constprop_0();\n  return is_section_constprop ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_dwo_section_constprop_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "reverse_and_copy_archive_member_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileDescriptor",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "fileSize",
                "param_7": "parameter7",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "var4",
                "iVar5": "var5",
                "ppcVar6": "stringArrayVar",
                "pvVar7": "pointerVar",
                "lVar8": "var8",
                "puVar9": "pointerVar2",
                "piVar10": "integerPointerVar",
                "uVar11": "unsignedVar1",
                "uVar12": "unsignedVar2",
                "lVar13": "fileSizeVar",
                "puVar14": "bfdFilePointer",
                "pcVar15": "tempdirPath",
                "pcVar17": "pathComponent1",
                "pcVar18": "pathComponent2",
                "__ptr": "pointerArray",
                "ppcVar16": "archiveMember",
                "pcVar20": "functionPtrVar",
                "lVar21": "var21",
                "uVar22": "unsignedVar3",
                "pcVar23": "pathComponent3",
                "psVar24": "statStruct",
                "bVar25": "boolVar",
                "bVar26": "byteVar2",
                "local_1a0": "localVar1",
                "local_198": "localVar2",
                "local_158": "localStatStruct",
                "local_c8": "localVar3",
                "uStack_b0": "uStackBottom",
                "lStack_98": "lStackTop"
            },
            "code": "\nvoid reverseAndCopyArchiveMember_00114690(undefined8 inputFile,undefined8 outputFile,int fileDescriptor,undefined8 parameter4,\n                 undefined8 parameter5,long fileSize,undefined8 parameter7)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int var4;\n  int var5;\n  char **stringArrayVar;\n  void *pointerVar;\n  long var8;\n  undefined8 *pointerVar2;\n  int *integerPointerVar;\n  undefined8 unsignedVar1;\n  undefined8 unsignedVar2;\n  long fileSizeVar;\n  undefined8 *bfdFilePointer;\n  char *tempdirPath;\n  char **archiveMember;\n  char *pathComponent1;\n  char *pathComponent2;\n  undefined8 *pointerArray;\n  char **ppcVar19;\n  code *functionPtrVar;\n  long var21;\n  uint unsignedVar3;\n  char *pathComponent3;\n  stat *statStruct;\n  bool boolVar;\n  byte byteVar2;\n  undefined8 *localVar1;\n  long *localVar2;\n  stat localStatStruct;\n  void *localVar3 [3];\n  uint uStackBottom;\n  long lStackTop;\n  \n  byteVar2 = 0;\n  fileSizeVar = get_file_size();\n  if (fileSizeVar < 1) {\n    if (fileSizeVar == 0) {\n      unsignedVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(unsignedVar2,inputFile);\n    }\n    status = 1;\n    return;\n  }\n  bfdFilePointer = (undefined8 *)bfd_openr(inputFile,parameter5);\n  if ((bfdFilePointer == (undefined8 *)0x0) || (var5 = bfd_stat(bfdFilePointer,parameter4), var5 != 0)) {\n    bfd_nonfatal_message(inputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)bfdFilePointer + 0x44) = *(uint *)((long)bfdFilePointer + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(bfdFilePointer,2);\n  if (charVar1 != '\\0') {\n    if (fileSize == 0) {\n      charVar1 = '\\0';\n      fileSize = *(long *)bfdFilePointer[1];\n    }\n    if (fileDescriptor < 0) {\n      localVar1 = (undefined8 *)bfd_openw(outputFile,fileSize);\n    }\n    else {\n      localVar1 = (undefined8 *)bfd_fdopenw(outputFile,fileSize,fileDescriptor);\n    }\n    if (localVar1 != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        unsignedVar2 = *bfdFilePointer;\n        unsignedVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(unsignedVar1,unsignedVar2);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(localVar1,bfdFilePointer,long_section_names);\n      localVar2 = localVar1 + 0x1f;\n      if ((*(byte *)((long)bfdFilePointer + 0x49) & 0x10) != 0) {\n        status = 1;\n        bfd_set_error(5);\n        unsignedVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,bfdFilePointer,0,unsignedVar2);\n        return;\n      }\n      tempdirPath = (char *)make_tempdir(*localVar1);\n      if (tempdirPath == (char *)0x0) {\n        integerPointerVar = __errno_location();\n        tempdirPath = strerror(*integerPointerVar);\n        unsignedVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(unsignedVar2,tempdirPath);\n      }\n      if (strip_symbols == 7) {\n        byteVar1 = *(byte *)((long)bfdFilePointer + 0x49);\n        unsignedVar3 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)bfdFilePointer + 0x49);\n        unsignedVar3 = byteVar1 >> 3 & 1;\n      }\n      boolVar = deterministic != 0;\n      *(byte *)((long)localVar1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(unsignedVar3 << 3) | *(byte *)((long)localVar1 + 0x49) & 0xe7;\n      if (boolVar) {\n        *(uint *)((long)localVar1 + 0x44) = *(uint *)((long)localVar1 + 0x44) | 0x2000;\n      }\n      pointerArray = (undefined8 *)0x0;\n      archiveMember = (char **)bfd_openr_next_archived_file(bfdFilePointer,0);\n      charVar2 = bfd_set_format(localVar1,*(byte *)(bfdFilePointer + 9) & 7);\n      if (charVar2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(0,localVar1,0,0);\n        remove_and_free_directory_00114b84();\n        return;\n      }\n      while ((status == 0 && (archiveMember != (char **)0x0))) {\n        pathComponent2 = *archiveMember;\n        pathComponent1 = pathComponent2;\n        if (*pathComponent2 == '/') {\nLAB_0010527d:\n          unsignedVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(unsignedVar2,pathComponent2);\nLAB_00104e93:\n          status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pathComponent1 != '\\0') {\n          pathComponent3 = pathComponent1;\n          if ((*pathComponent1 == '.') && (pathComponent3 = pathComponent1 + 1, pathComponent1[1] == '.')) {\n            pathComponent3 = pathComponent1 + 2;\n            if ((pathComponent1[2] == '\\0') || (pathComponent1[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pathComponent3 != '\\0' && (*pathComponent3 != '/')); pathComponent3 = pathComponent3 + 1) {\n          }\n          pathComponent1 = pathComponent3;\n          if (*pathComponent3 == '/') {\n            extract_and_copy_archive_member_001052a2();\n            return;\n          }\n        }\n        pathComponent2 = (char *)concat(tempdirPath,&DAT_0011b47d);\n        var5 = stat(pathComponent2,&localStatStruct);\n        pointerVar2 = pointerArray;\n        if (-1 < var5) {\n          fileSizeVar = make_tempdir(pathComponent2);\n          free(pathComponent2);\n          if (fileSizeVar == 0) {\n            integerPointerVar = __errno_location();\n            pathComponent2 = strerror(*integerPointerVar);\n            unsignedVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(unsignedVar2,pathComponent2);\n            goto LAB_00104e93;\n          }\n          pointerVar2 = (undefined8 *)xmalloc(0x18);\n          pathComponent2 = *archiveMember;\n          *pointerVar2 = pointerArray;\n          pointerVar2[2] = 0;\n          pointerVar2[1] = fileSizeVar;\n          pathComponent2 = (char *)concat(fileSizeVar,&DAT_0011b47d,pathComponent2);\n        }\n        var5 = 0;\n        if (preserve_dates != '\\0') {\n          statStruct = &localStatStruct;\n          for (fileSizeVar = 0x24; fileSizeVar != 0; fileSizeVar = fileSizeVar + -1) {\n            *(undefined4 *)&statStruct->st_dev = 0;\n            statStruct = (stat *)((long)statStruct + (ulong)byteVar2 * -8 + 4);\n          }\n          ppcVar19 = (char **)archiveMember[0x1d];\n          if ((char **)archiveMember[0x1d] == (char **)0x0) {\n            ppcVar19 = archiveMember;\n          }\n          var5 = (**(code **)(ppcVar19[1] + 0x1e8))(archiveMember,&localStatStruct);\n          if (var5 != 0) {\n            pathComponent1 = *archiveMember;\n            unsignedVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(unsignedVar2,pathComponent1);\n          }\n        }\n        pointerArray = (undefined8 *)xmalloc(0x18);\n        pointerArray[1] = pathComponent2;\n        *pointerArray = pointerVar2;\n        pointerArray[2] = 0;\n        charVar2 = bfd_check_format(archiveMember,1);\n        if (charVar2 == '\\0') {\n          unsignedVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,archiveMember,0,unsignedVar2);\n          ppcVar19 = (char **)bfd_openw(pathComponent2,fileSize);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(pathComponent2,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          stringArrayVar = (char **)archiveMember[0x1d];\n          if ((char **)archiveMember[0x1d] == (char **)0x0) {\n            stringArrayVar = archiveMember;\n          }\n          var4 = (**(code **)(stringArrayVar[1] + 0x1e8))(archiveMember);\n          fileSizeVar = lStackTop;\n          if (var4 == 0) {\n            if (lStackTop < 0) {\n              bfd_get_archive_filename(archiveMember);\n              unsignedVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(unsignedVar2);\n            }\n            else {\n              var4 = bfd_seek(archiveMember,0,0);\n              if (var4 == 0) {\n                if (verbose != '\\0') {\n                  pathComponent1 = *ppcVar19;\n                  unsignedVar2 = bfd_get_archive_filename(archiveMember);\n                  pathComponent3 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pathComponent3,unsignedVar2,pathComponent1);\n                }\n                pointerVar = (void *)xmalloc(0x2000);\n                for (; fileSizeVar != 0; fileSizeVar = fileSizeVar - var21) {\n                  var21 = 0x2000;\n                  if (fileSizeVar < 0x2001) {\n                    var21 = fileSizeVar;\n                  }\n                  var8 = bfd_bread(pointerVar,var21,archiveMember);\n                  stringArrayVar = archiveMember;\n                  if ((var21 != var8) ||\n                     (var8 = bfd_bwrite(pointerVar,var21,ppcVar19), stringArrayVar = ppcVar19,\n                     var21 != var8)) {\n                    bfd_nonfatal_message(0,stringArrayVar,0,0);\n                    free(pointerVar);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,uStackBottom | 0x100);\n                free(pointerVar);\n                charVar2 = bfd_close_all_done(ppcVar19);\n                if (charVar2 == '\\0') {\n                  bfd_nonfatal_message(pathComponent2,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              unsignedVar2 = bfd_get_archive_filename(archiveMember);\n              bfd_nonfatal(unsignedVar2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,archiveMember,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(ppcVar19);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(pathComponent2,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pathComponent2);\n          status = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            ppcVar19 = (char **)bfd_openw(pathComponent2,*(undefined8 *)archiveMember[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(pathComponent2,fileSize);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = copy_object(archiveMember,ppcVar19,parameter7);\n          if (charVar2 == '\\0') {\n            var4 = bfd_get_arch(archiveMember);\n            if (var4 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(ppcVar19);\n            if (charVar2 == '\\0') {\n              bfd_nonfatal_message(pathComponent2,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(ppcVar19);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(pathComponent2,0,0,0);\n            status = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (var5 == 0)) {\n            set_times(pathComponent2,&localStatStruct);\n          }\n          fileSizeVar = bfd_openr(pathComponent2,fileSize);\n          pointerArray[2] = fileSizeVar;\n          *localVar2 = fileSizeVar;\n          localVar2 = (long *)(fileSizeVar + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(bfdFilePointer);\n          bfd_close(archiveMember);\n          archiveMember = ppcVar19;\n        }\n      }\n      *localVar2 = 0;\n      pointerVar = (void *)xstrdup(*localVar1);\n      if (status == 0) {\n        functionPtrVar = bfd_close;\n      }\n      else {\n        functionPtrVar = bfd_close_all_done;\n      }\n      charVar1 = (*functionPtrVar)(localVar1);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerVar,0,0,0);\n      }\n      free(pointerVar);\n      pointerVar = (void *)xstrdup(*bfdFilePointer);\n      charVar1 = bfd_close(bfdFilePointer);\n      if (charVar1 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(pointerVar,0,0,0);\n      }\n      free(pointerVar);\nLAB_00114b4b:\n      while (pointerArray != (undefined8 *)0x0) {\n        if (pointerArray[2] == 0) {\n          rmdir((char *)pointerArray[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)pointerArray[1]);\n        }\n        free((void *)pointerArray[1]);\n        bfdFilePointer = (undefined8 *)*pointerArray;\n        free(pointerArray);\n        pointerArray = bfdFilePointer;\n      }\n      rmdir(tempdirPath);\n      free(tempdirPath);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfd_nonfatal_message(outputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(bfdFilePointer,1,localVar3);\n  if (charVar1 == '\\0') {\n    var5 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(bfdFilePointer,3,&localStatStruct);\n    if (charVar1 == '\\0') {\n      var4 = bfd_get_error();\n      if (var5 != var4) {\n        bfd_set_error(var5);\n      }\n      bfd_nonfatal_message(inputFile,0,0,0);\n      if (var5 == 0xd) {\n        list_matching_formats(localVar3[0]);\n      }\n      if (var4 != 0xd) {\n        status = 1;\n        return;\n      }\n      list_matching_formats(localStatStruct.st_dev);\n      status = 1;\n      return;\n    }\n    if (var5 == 0xd) {\n      free(localVar3[0]);\n    }\n  }\n  if (fileSize == 0) {\n    fileSize = *(long *)bfdFilePointer[1];\n  }\n  if (fileDescriptor < 0) {\n    fileSizeVar = bfd_openw(outputFile,fileSize);\n  }\n  else {\n    fileSizeVar = bfd_fdopenw(outputFile,fileSize,fileDescriptor);\n  }\n  if (fileSizeVar == 0) goto LAB_00105231;\n  set_long_section_mode(fileSizeVar,bfdFilePointer,long_section_names);\n  charVar1 = copy_object(bfdFilePointer,fileSizeVar,parameter7);\n  if (charVar1 == '\\0') {\n    status = 1;\n  }\n  else if (status == 0) {\n    charVar1 = bfd_close(fileSizeVar);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(fileSizeVar);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    status = 1;\n    bfd_nonfatal_message(outputFile,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(bfdFilePointer);\n  if (charVar1 == '\\0') {\n    status = 1;\n    bfd_nonfatal_message(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "set_long_section_mode",
                "get_file_size",
                "bfd_openw",
                "bfd_set_error",
                "non_fatal",
                "bfd_close",
                "copy_object",
                "bfd_set_format",
                "list_matching_formats",
                "bfd_openr",
                "free",
                "strerror",
                "make_tempdir",
                "dcgettext",
                "fatal",
                "copy_file.cold",
                "bfd_fdopenw",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_check_format_matches",
                "bfd_get_error",
                "close",
                "bfd_stat",
                "bfd_check_format",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "reverse_and_copy_archive_member_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "push_defined_type_0010b800",
                "param_1": "base_address",
                "param_2": "type_size",
                "param_3": "include_zero",
                "plVar1": "type_ptr",
                "uVar2": "result",
                "sVar3": "string_length",
                "lVar4": "type_value",
                "lVar5": "bit_mask",
                "local_8c": "output_string",
                "auStack_8a": "unused_stack_space"
            },
            "code": "\nundefined8 push_defined_type_0010b800(long base_address,int type_size,char include_zero)\n\n{\n  long *type_ptr;\n  undefined8 result;\n  size_t string_length;\n  long type_value;\n  long bit_mask;\n  undefined2 output_string;\n  undefined4 unused_stack_space [24];\n  \n  if (type_size - 1U < 8) {\n    type_value = base_address + 0xb8;\n    if (include_zero != '\\0') {\n      type_value = base_address + 0x78;\n    }\n    type_ptr = (long *)(type_value + (ulong)(type_size - 1U) * 8);\n    type_value = *type_ptr;\n    if (type_value != 0) {\n      result = stab_push_defined_type_0010b800(base_address,type_value,type_size);\n      return result;\n    }\n    type_value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = type_value + 1;\n    *type_ptr = type_value;\n    sprintf((char *)&output_string,\"%ld=r%ld;\",type_value,type_value);\n    if (include_zero == '\\0') {\n      bit_mask = 1L << ((char)type_size * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&output_string);\n      sprintf((char *)((long)&output_string + string_length),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      string_length = strlen((char *)&output_string);\n      *(undefined2 *)((long)&output_string + string_length) = 0x3b30;\n      *(undefined *)((long)&output_string + string_length + 2) = 0;\n      if (type_size == 8) {\n        *(undefined4 *)((long)&output_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&output_string + string_length + 2),\"%ld;\",\n                (1L << ((char)type_size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(base_address,&output_string,type_value,1,type_size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,type_size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "strlen",
                "stab_push_string",
                "sprintf",
                "dcgettext",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "stab_float_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "data1",
                "param_5": "data2",
                "uVar1": "value1",
                "uVar2": "value2",
                "cVar3": "char1",
                "pcVar4": "string",
                "sVar5": "size",
                "__s": "newString",
                "lVar6": "length",
                "__ptr": "pointer",
                "uVar7": "result",
                "uVar8": "flag",
                "lVar9": "counter",
                "uVar10": "sizeValue",
                "puVar11": "ptr",
                "bVar12": "byteVar"
            },
            "code": "\nundefined8 processData_00109ed3(long arg1,uint arg2,undefined4 arg3,long *data1,ulong *data2)\n\n{\n  ulong value1;\n  ulong value2;\n  char char1;\n  char *string;\n  size_t size;\n  char *newString;\n  long length;\n  void *pointer;\n  undefined8 result;\n  undefined flag;\n  long counter;\n  ulong sizeValue;\n  undefined *ptr;\n  byte byteVar;\n  \n  byteVar = 0;\n  length = *(long *)(arg1 + 0x60);\n  if (length != 0) {\n    value1 = *(ulong *)(length + 0x10);\n    if (((long)value1 < 1) || (data1 == (long *)0x0)) {\n      flag = *(undefined *)(length + 0x1c);\n      string = (char *)stab_pop_type(arg1);\n      size = strlen(string);\n      newString = (char *)xmalloc(size + 2);\n      sprintf(newString,\"%c%s\",(ulong)arg2,string);\n      free(string);\n      length = 0;\n    }\n    else {\n      sizeValue = *data2;\n      if (sizeValue <= value1) {\n        if (sizeValue == 0) {\n          sizeValue = 10;\n        }\n        for (; sizeValue <= value1; sizeValue = sizeValue * 2) {\n        }\n        length = xrealloc(*data1,sizeValue * 8);\n        value2 = *data2;\n        *data1 = length;\n        ptr = (undefined *)(length + value2 * 8);\n        for (counter = (sizeValue - value2) * 8; counter != 0; counter = counter + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)byteVar * -2 + 1;\n        }\n        *data2 = sizeValue;\n      }\n      length = *(long *)(*data1 + value1 * 8);\n      if ((length != 0) && (*(char *)(*(long *)(arg1 + 0x60) + 0x1c) == '\\0')) {\n        pointer = (void *)stab_pop_type(arg1);\n        free(pointer);\n        result = stab_push_defined_type(arg1,length,arg3);\n        return result;\n      }\n      length = *(long *)(arg1 + 0x68);\n      *(long *)(arg1 + 0x68) = length + 1;\n      string = (char *)stab_pop_type(arg1);\n      size = strlen(string);\n      newString = (char *)xmalloc(size + 0x14);\n      sprintf(newString,\"%ld=%c%s\",length,(ulong)arg2,string);\n      free(string);\n      flag = 1;\n      *(long *)(*data1 + value1 * 8) = length;\n    }\n    char1 = stab_push_string(arg1,newString,length,flag,arg3);\n    if (char1 != '\\0') {\n      free(newString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_const_type.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "prevDebugInfo",
                "puVar2": "units1",
                "puVar3": "units2",
                "lVar4": "loopCounter",
                "puVar5": "unitsPtr",
                "pcVar6": "filenamePtr",
                "bVar7": "isFilenameNull",
                "auVar8": "resultArray"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *prevDebugInfo;\n  undefined4 *units1;\n  undefined4 *units2;\n  long loopCounter;\n  undefined4 *unitsPtr;\n  char *filenamePtr;\n  byte isFilenameNull;\n  undefined resultArray [16];\n  \n  isFilenameNull = 0;\n  filenamePtr = \"\";\n  if (filename != (char *)0x0) {\n    filenamePtr = filename;\n  }\n  units1 = (undefined4 *)xmalloc(0x18);\n  unitsPtr = units1;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *unitsPtr = 0;\n    unitsPtr = unitsPtr + (ulong)isFilenameNull * -2 + 1;\n  }\n  *(char **)(units1 + 2) = filenamePtr;\n  units2 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)units1;\n  unitsPtr = units2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *unitsPtr = 0;\n    unitsPtr = unitsPtr + (ulong)isFilenameNull * -2 + 1;\n  }\n  prevDebugInfo = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(units2 + 2) = units1;\n  if (prevDebugInfo == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)units2;\n  }\n  else {\n    *prevDebugInfo = units2;\n  }\n  debugInfo[1] = (long)units2;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  resultArray._8_8_ = param4;\n  resultArray._0_8_ = 1;\n  return resultArray;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_binary_function_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "dcgettext",
                "bfd_set_format",
                "bfd_get_archive_filename",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "param_1": "inputValue",
                "param_2": "binaryData",
                "uVar1": "tempVar1",
                "lVar2": "result"
            },
            "code": "\nlong findMatchingValue_00115d00(long inputValue,long binaryData)\n\n{\n  uint tempVar1;\n  long result;\n  \n  result = isympp;\n  if (isympp != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputValue + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        tempVar1 = *(uint *)(inputValue + 0x2c);\n        if (tempVar1 == 0) {\n          result = 0;\n        }\n        else if ((ulong)tempVar1 <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(isympp + (ulong)(tempVar1 - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "find_matching_value_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "create_debug_type_00113c43",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "lVar1": "debugType",
                "plVar2": "debugTypePtr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateDebugType_00113c43(long input1,long input2,long input3,long input4,undefined input5,\n            undefined8 input6)\n\n{\n  long debugType;\n  long *debugTypePtr;\n  undefined result [16];\n  \n  if ((input1 != 0) && (input2 != 0)) {\n    debugType = debug_make_type_constprop_0(0x10,0);\n    if (debugType != 0) {\n      debugTypePtr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)debugTypePtr + 0x21) = 0;\n      *debugTypePtr = input1;\n      *(undefined4 *)((long)debugTypePtr + 0x24) = 0;\n      debugTypePtr[1] = input2;\n      debugTypePtr[2] = input3;\n      debugTypePtr[3] = input4;\n      *(undefined *)(debugTypePtr + 4) = input5;\n      *(long **)(debugType + 0x10) = debugTypePtr;\n      goto LAB_00113caa;\n    }\n  }\n  debugType = 0;\nLAB_00113caa:\n  result._8_8_ = input6;\n  result._0_8_ = debugType;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "get_file_size.cold",
                "FUN_00107880",
                "smart_rename.cold",
                "main",
                "section_add_load_file.cold",
                "set_times.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "param_1": "functionPointer",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "param_4": "recordType",
                "param_5": "debugInfo",
                "param_6": "variableInfo",
                "param_7": "extraInfo",
                "uVar1": "result",
                "lVar2": "type",
                "plVar3": "slotPointer"
            },
            "code": "\nbool recordDebugInfo_00112a33(undefined8 functionPointer,long parameter2,undefined8 parameter3,byte recordType,undefined8 debugInfo\n                 ,undefined8 variableInfo,uint extraInfo)\n\n{\n  undefined result;\n  long type;\n  long *slotPointer;\n  \n  if (recordType < 0x12) {\n    if (recordType != 0) {\n      switch(recordType) {\n      case 1:\n        result = debug_record_variable\n                          (debugInfo,*(undefined8 *)(parameter2 + 8),variableInfo,4,\n                           *(long *)(parameter2 + 0x10) + *(long *)(*(long *)(parameter2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable\n                          (debugInfo,*(undefined8 *)(parameter2 + 8),variableInfo,(extraInfo & 0xff) + 2,\n                           *(long *)(parameter2 + 0x10) + *(long *)(*(long *)(parameter2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = debug_record_variable\n                          (debugInfo,*(undefined8 *)(parameter2 + 8),variableInfo,5,\n                           *(long *)(parameter2 + 0x10) + *(long *)(*(long *)(parameter2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter\n                          (debugInfo,*(undefined8 *)(parameter2 + 8),variableInfo,1,\n                           *(long *)(parameter2 + 0x10) + *(long *)(*(long *)(parameter2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type = debug_tag_type(debugInfo,*(undefined8 *)(parameter2 + 8));\n        if (type == 0) {\n          return false;\n        }\n        slotPointer = (long *)coff_get_slot_lto_priv_0(functionPointer,parameter3);\n        *slotPointer = type;\n        break;\n      case 0xd:\n        type = debug_name_type(debugInfo,*(undefined8 *)(parameter2 + 8));\n        return type != 0;\n      case 0x11:\n        result = debug_record_parameter\n                          (debugInfo,*(undefined8 *)(parameter2 + 8),variableInfo,2,\n                           *(long *)(parameter2 + 0x10) + *(long *)(*(long *)(parameter2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (recordType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable\n                      (debugInfo,*(undefined8 *)(parameter2 + 8),variableInfo,1,\n                       *(long *)(parameter2 + 0x10) + *(long *)(*(long *)(parameter2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_record_parameter",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "debug_tag_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "dataTypeIndex",
                "pcVar2": "dataTypeString",
                "uVar3": "dataType",
                "lVar4": "dataTypeValue",
                "plVar5": "dataTypePtr",
                "uVar6": "dataTypeLength"
            },
            "code": "\n\n\nlong getDataType_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint dataTypeIndex;\n  char *dataTypeString;\n  undefined8 dataType;\n  long dataTypeValue;\n  long *dataTypePtr;\n  uint dataTypeLength;\n  \n  if ((*param3 == 0) && (dataTypeIndex = param3[1], (int)dataTypeIndex < 0)) {\n    dataTypeLength = ~dataTypeIndex;\n    if (dataTypeLength < 0x22) {\n      dataTypeValue = *(long *)(param2 + 0x90 + (ulong)dataTypeLength * 8);\n      if (dataTypeValue == 0) {\n        switch(dataTypeLength) {\n        case 1:\n          dataType = debug_make_int_type_isra_0(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          dataType = debug_make_int_type_isra_0(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          dataType = debug_make_int_type_isra_0(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          dataType = debug_make_int_type_isra_0(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          dataType = debug_make_int_type_isra_0(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          dataType = debug_make_int_type_isra_0(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          dataType = debug_make_int_type_isra_0(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          dataType = debug_make_int_type_isra_0(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          dataType = debug_make_int_type_isra_0(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          dataType = debug_make_void_type_isra_0();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          dataType = debug_make_float_type_isra_0(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          dataType = debug_make_float_type_isra_0(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          dataType = debug_make_float_type_isra_0(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          dataType = debug_make_int_type_isra_0(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          dataType = debug_make_type_constprop_0(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          dataType = debug_make_float_type_isra_0(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          dataType = debug_make_float_type_isra_0(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          dataType = 0;\n          break;\n        case 0x13:\n          dataType = debug_make_int_type_isra_0(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          dataType = debug_make_type_constprop_0(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          dataType = debug_make_type_constprop_0(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          dataType = debug_make_type_constprop_0(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          dataType = debug_make_type_constprop_0(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          dataType = debug_make_type_constprop_0(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          dataType = debug_make_type_constprop_0(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          dataType = debug_make_int_type_isra_0(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          dataType = debug_make_int_type_isra_0(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          dataType = debug_make_int_type_isra_0(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          dataType = debug_make_int_type_isra_0(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          dataType = debug_make_int_type_isra_0(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          dataType = debug_make_int_type_isra_0(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          dataType = debug_make_type_constprop_0(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          dataType = debug_make_int_type_isra_0(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          dataType = debug_make_int_type_isra_0(4,0);\n          dataTypeString = \"int\";\n        }\n        dataTypeValue = debug_name_type(param1,dataTypeString,dataType);\n        *(long *)(param2 + 0x90 + (ulong)dataTypeLength * 8) = dataTypeValue;\n        return dataTypeValue;\n      }\n      return dataTypeValue;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)dataTypeIndex);\n  }\n  else {\n    dataTypePtr = (long *)stab_find_slot(param2);\n    if (dataTypePtr != (long *)0x0) {\n      if (*dataTypePtr == 0) {\n        dataTypeValue = debug_make_indirect_type_isra_0(dataTypePtr,0);\n        return dataTypeValue;\n      }\n      return *dataTypePtr;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "dcgettext",
                "debug_name_type",
                "stab_find_slot",
                "debug_make_float_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_data_0010e07c",
                "param_2": "coff_data",
                "param_5": "file_header",
                "lVar1": "symbol_table",
                "lVar2": "current_symbol",
                "lVar3": "symbol_index",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "allocation",
                "uVar6": "sym_value",
                "uVar7": "coff_type",
                "puVar8": "coff_entry",
                "pcVar9": "error_message",
                "puVar10": "aux_info",
                "uVar11": "type_index",
                "lVar12": "entry_index",
                "iVar13": "symbol_offset",
                "iVar14": "max_entries",
                "local_a8": "symbol.address",
                "uStack_a4": "symbol_address_high",
                "uStack_a0": "symbol_type",
                "uStack_9c": "symbol_type_high",
                "local_88": "symbol_name",
                "local_6a": "symbol_type_index",
                "local_68": "aux_sym_tag",
                "local_67": "aux_sym_tag_high",
                "local_60": "aux_info_buffer",
                "local_56": "sym_type"
            },
            "code": "\nundefined8\nparse_coff_data_0010e07c(undefined8 param_1,long *coff_data,undefined8 param_3,int param_4,long file_header,\n            undefined8 param_6)\n\n{\n  long symbol_table;\n  long current_symbol;\n  long symbol_index;\n  char result;\n  undefined4 error_code;\n  void *allocation;\n  undefined8 sym_value;\n  undefined8 coff_type;\n  undefined4 *coff_entry;\n  char *error_message;\n  undefined *aux_info;\n  uint type_index;\n  long entry_index;\n  int symbol_offset;\n  int max_entries;\n  undefined4 symbol.address;\n  undefined4 symbol_address_high;\n  undefined4 symbol_type;\n  undefined4 symbol_type_high;\n  undefined symbol_name [30];\n  undefined2 symbol_type_index;\n  byte aux_sym_tag;\n  byte aux_sym_tag_high;\n  undefined aux_info_buffer [10];\n  ushort sym_type;\n  \n  max_entries = 10;\n  entry_index = 0;\n  symbol_table = *(long *)(file_header + 0x18);\n  allocation = (void *)xmalloc(0x50);\n  while ((coff_data[3] < symbol_table && (coff_data[2] < coff_data[1]))) {\n    current_symbol = *(long *)(*coff_data + coff_data[2] * 8);\n    result = bfd_coff_get_syment(param_1,current_symbol,symbol_name);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      sym_value = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      coff_type = dcgettext(0,error_message,5);\n      non_fatal(coff_type,sym_value);\n      free(allocation);\n      return 0;\n    }\n    symbol_index = coff_data[3];\n    aux_info = (undefined *)0x0;\n    coff_data[2] = coff_data[2] + 1;\n    coff_data[3] = symbol_index + 1 + (ulong)aux_sym_tag_high;\n    if (aux_sym_tag_high != 0) {\n      aux_info = aux_info_buffer;\n      result = bfd_coff_get_auxent(param_1,current_symbol,0,aux_info);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        sym_value = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (aux_sym_tag == 0x12) {\n      type_index = (uint)sym_type;\n      symbol_offset = (int)*(undefined8 *)(current_symbol + 0x10) +\n               (int)*(undefined8 *)(*(long *)(current_symbol + 0x20) + 0x30);\n    }\n    else {\n      if (aux_sym_tag < 0x13) {\n        if ((aux_sym_tag == 8) || (aux_sym_tag == 0xb)) {\n          type_index = 0;\n          symbol_offset = ((int)*(undefined8 *)(current_symbol + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(current_symbol + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (aux_sym_tag == 0x66) break;\n      type_index = 0;\n      symbol_offset = 0;\n    }\nLAB_0010e214:\n    coff_type = parse_coff_type_lto_priv_0(param_1,coff_data,param_3,symbol_index,symbol_type_index,aux_info,1);\n    sym_value = *(undefined8 *)(current_symbol + 8);\n    coff_entry = (undefined4 *)xmalloc(0x20);\n    symbol.address = (undefined4)sym_value;\n    symbol_address_high = (undefined4)((ulong)sym_value >> 0x20);\n    symbol_type = (undefined4)coff_type;\n    symbol_type_high = (undefined4)((ulong)coff_type >> 0x20);\n    *(undefined8 *)(coff_entry + 5) = 0;\n    coff_entry[6] = symbol_offset;\n    coff_entry[7] = type_index;\n    coff_entry[4] = 0;\n    *coff_entry = symbol.address;\n    coff_entry[1] = symbol_address_high;\n    coff_entry[2] = symbol_type;\n    coff_entry[3] = symbol_type_high;\n    if (max_entries <= (int)entry_index + 1) {\n      max_entries = max_entries + 10;\n      allocation = (void *)xrealloc(allocation,(long)max_entries << 3,coff_entry,0,param_6);\n    }\n    *(undefined4 **)((long)allocation + entry_index * 8) = coff_entry;\n    entry_index = entry_index + 1;\n  }\n  *(undefined8 *)((long)allocation + (long)(int)entry_index * 8) = 0;\n  sym_value = debug_make_struct_type_isra_0(param_4 == 8,*(undefined2 *)(file_header + 10),allocation);\n  return sym_value;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "non_fatal",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "dcgettext",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_data_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_001082c3"
            },
            "code": "\nundefined8 initialize_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "extract_file_contents_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "fileContents",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "slotPointer",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextByte",
                "pbVar10": "ptr1",
                "pbVar11": "ptr2",
                "pbVar12": "ptr3",
                "iVar1": "counter",
                "piVar2": "errnoPointer",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage"
            },
            "code": "\nvoid extractFileContents_00114460(char *filename,undefined8 hashTable,byte **fileContents)\n\n{\n  int counter;\n  int *errnoPointer;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **slotPointer;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextByte;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errnoPointer = __errno_location();\n      errorMessage = strerror(*errnoPointer);\n      translatedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translatedMessage,filename,errorMessage);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (counter = ferror(fileStream), counter != 0)) {\n      translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translatedMessage,filename);\n    }\n    counter = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    ptr3 = fileBuffer;\n    while (ptr1 = ptr3, currentByte != 0) {\n      for (; currentByte = *ptr1, ptr2 = ptr1, currentByte != 10; ptr1 = ptr1 + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextByte = ptr1 + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *ptr1 = 0;\n            nextByte = ptr1 + 1;\n            if (ptr1[1] == 10) {\n              nextByte = ptr1 + 2;\n              ptr2 = ptr1 + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            parse_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *ptr1 = 0;\n      if (ptr1[1] == 0xd) {\n        ptr2 = ptr1 + 1;\n        nextByte = ptr1 + 2;\n      }\n      else {\n        nextByte = ptr1 + 1;\n      }\nLAB_00114553:\n      currentByte = *ptr3;\n      while ((currentByte == 0x20 || (ptr1 = ptr3, currentByte == 9))) {\n        ptr1 = ptr3 + 1;\n        ptr3 = ptr3 + 1;\n        currentByte = *ptr1;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = ptr1[1];\n        ptr1 = ptr1 + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = ptr1[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = ptr1[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = ptr1[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = ptr1[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = ptr1[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = ptr1[6];\n          currentChar = ptr1 + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translatedMessage,filename,counter);\n        }\n      }\nLAB_00114599:\n      *ptr1 = 0;\n      if (ptr3 < ptr1) {\n        slotPointer = (byte **)htab_find_slot(hashTable,ptr3,1);\n        *slotPointer = ptr3;\n      }\n      counter = counter + 1;\n      ptr3 = nextByte;\n      currentByte = ptr2[1];\n    }\n    *fileContents = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "fread",
                "ferror",
                "dcgettext",
                "fopen",
                "get_file_size",
                "fatal",
                "fclose",
                "xmalloc",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_file_contents_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "construct_formatted_string_0010a94e",
                "param_1": "input",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "cVar1": "character",
                "lVar2": "ptr",
                "__s": "str",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "formattedString",
                "uVar8": "result",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8 constructFormattedString_0010a94e(long input,char *string1,char *string2,int flag)\n\n{\n  char character;\n  long ptr;\n  char *str;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *formattedString;\n  undefined8 result;\n  char *flagString;\n  \n  character = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  str = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(input + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    len1 = strlen(formattedString);\n    len2 = strlen(string1);\n    len3 = strlen(str);\n    len4 = strlen(string2);\n    formattedString = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(input + 0x60) + 0x20),string1,flagString,\n            str,string2,*(long *)(input + 0x60));\n    free(*(void **)(*(long *)(input + 0x60) + 0x20));\n    ptr = *(long *)(input + 0x60);\n    *(char **)(ptr + 0x20) = formattedString;\n    if (character != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "construct_formatted_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "get_real_type_value_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "value_param",
                "param_4": "default_param",
                "piVar2": "type_info",
                "uVar3": "result",
                "auVar1": "output_1",
                "auVar4": "output_2"
            },
            "code": "\nundefined  [16] get_real_type_value_00113b1e(long input_param,undefined8 unused_param,ulong value_param,undefined8 default_param)\n\n{\n  undefined output_1 [16];\n  int *type_info;\n  undefined8 result;\n  undefined output_2 [16];\n  \n  if (input_param != 0) {\n    type_info = (int *)debug_get_real_type_isra_0(input_param,0);\n    if ((type_info == (int *)0x0) || (3 < *type_info - 7U)) {\n      result = 0;\n    }\n    else {\n      result = **(undefined8 **)(type_info + 4);\n    }\n    output_2._8_8_ = default_param;\n    output_2._0_8_ = result;\n    return output_2;\n  }\n  output_1._8_8_ = 0;\n  output_1._0_8_ = value_param;\n  return output_1 << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "get_real_type_value_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "bfd_get_archive_filename",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "generate_stab_string_0010a0e9",
                "param_1": "binaryAddress",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "stabValue",
                "uVar2": "returnValue",
                "__s": "poppedType",
                "sVar3": "stringLength",
                "__s_00": "allocatedString"
            },
            "code": "\nundefined4 generateStabString_0010a0e9(long binaryAddress,undefined8 param2,undefined8 param3)\n\n{\n  undefined stabValue;\n  undefined4 returnValue;\n  char *poppedType;\n  size_t stringLength;\n  char *allocatedString;\n  \n  stabValue = *(undefined *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(binaryAddress + 0x60) + 0x18);\n  poppedType = (char *)stab_pop_type();\n  stringLength = strlen(poppedType);\n  allocatedString = (char *)xmalloc(stringLength + 100);\n  sprintf(allocatedString,\"r%s;%ld;%ld;\",poppedType,param2,param3);\n  free(poppedType);\n  returnValue = stab_push_string(binaryAddress,allocatedString,0,stabValue,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(allocatedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_string_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_unused_sections_00114c20",
                "param_1": "binaryAddress",
                "cVar1": "startsWithSectionList",
                "pcVar2": "sectionPointer"
            },
            "code": "\nvoid removeUnusedSections_00114c20(long binaryAddress)\n\n{\n  char startsWithSectionList;\n  char *sectionPointer;\n  \n  find_section_list(binaryAddress,1,1);\n  startsWithSectionList = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (startsWithSectionList != '\\0') {\n    sectionPointer = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      sectionPointer = (char *)(binaryAddress + 4);\n    }\n    if (*sectionPointer != '\\0') {\n      find_section_list(sectionPointer,1,0x100);\n    }\n  }\n  sections_removed = 1;\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_unused_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_and_update_sections_00115f50",
                "param_1": "fileSize",
                "param_2": "sectionArray",
                "param_3": "isDebug",
                "__s1": "sectionName",
                "uVar1": "strcmpResult",
                "uVar2": "result",
                "extraout_EDX": "extraData",
                "plVar3": "currentSection",
                "auVar4": "tempVariable"
            },
            "code": "\nuint checkAndUpdateSections_00115f50(long fileSize,char **sectionArray,char isDebug)\n\n{\n  char *sectionName;\n  uint strcmpResult;\n  undefined4 result;\n  undefined4 extraData;\n  long *currentSection;\n  undefined tempVariable [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  tempVariable = is_strip_section_isra_0(sectionArray);\n  if (tempVariable[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      sectionName = *sectionArray;\n      currentSection = update_sections;\n      do {\n        strcmpResult = strcmp(sectionName,(char *)currentSection[1]);\n        tempVariable._4_4_ = 0;\n        tempVariable._0_4_ = strcmpResult;\n        tempVariable._8_4_ = extraData;\n        if (strcmpResult == 0) {\n          return 1;\n        }\n        currentSection = (long *)*currentSection;\n      } while (currentSection != (long *)0x0);\n    }\n    result = tempVariable._8_4_;\n    if (((((isDebug == '\\0') || (merge_notes == '\\0')) ||\n         (tempVariable._8_4_ = result, tempVariable._0_8_ = *(long *)(fileSize + 8),\n         *(int *)(*(long *)(fileSize + 8) + 8) != 5)) ||\n        ((tempVariable._0_8_ = (ulong)sectionArray[0x1a], *(int *)(sectionArray[0x1a] + 4) != 7 ||\n         (tempVariable = startswith_lto_priv_0_lto_priv_0(*sectionArray,\".gnu.build.attributes\"),\n         tempVariable[0] == '\\0')))) && ((*(byte *)((long)sectionArray + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(tempVariable._1_7_,sectionArray[8] == (char *)0x0) |\n             CONCAT31(tempVariable._9_3_,sectionArray[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp",
                "is_strip_section.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_section",
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "check_and_update_sections_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "check_section_length_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "errorCode",
                "uVar1": "sectionLength",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid checkSectionLength_001083de(void)\n\n{\n  undefined8 sectionLength;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 errorCode;\n  \n  sectionLength = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionLength,errorCode);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "check_section_length_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "lVar1": "typePointer",
                "cVar2": "isTypeValid",
                "__ptr": "typeString",
                "uVar3": "dataSizeUnsigned",
                "uVar4": "dataSizeMinusOne",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processData_0010b948(long dataPointer,uint dataSize)\n\n{\n  long typePointer;\n  char isTypeValid;\n  void *typeString;\n  ulong dataSizeUnsigned;\n  uint dataSizeMinusOne;\n  char formattedString [50];\n  \n  dataSizeMinusOne = dataSize - 1;\n  dataSizeUnsigned = (ulong)dataSize;\n  if ((dataSizeMinusOne < 0x10) && (typePointer = *(long *)(dataPointer + 0xf8 + (ulong)dataSizeMinusOne * 8), typePointer != 0)) {\n    stab_push_defined_type(dataPointer,typePointer,dataSizeUnsigned);\n    return;\n  }\n  isTypeValid = stab_int_type_lto_priv_0(dataPointer,4,0);\n  if (isTypeValid != '\\0') {\n    typeString = (void *)stab_pop_type(dataPointer);\n    typePointer = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = typePointer + 1;\n    if (dataSizeMinusOne < 0x10) {\n      *(long *)(dataPointer + 0xf8 + (ulong)dataSizeMinusOne * 8) = typePointer;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",typePointer,typeString,dataSizeUnsigned);\n    free(typeString);\n    stab_push_string(dataPointer,formattedString,typePointer,1,dataSizeUnsigned);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "resolve_debug_type_00112b6e",
                "param_1": "inputArray",
                "param_2": "debugInfo",
                "iVar1": "elementValue",
                "uVar2": "typeName",
                "__format": "formatStr",
                "piVar3": "resultArray",
                "plVar4": "debugPtr",
                "bVar5": "isCircular",
                "local_18": "localDebugPtr",
                "local_10": "localArrayPtr"
            },
            "code": "\n\n\nint * resolveDebugType_00112b6e(int *inputArray,long *debugInfo)\n\n{\n  int elementValue;\n  undefined8 typeName;\n  char *formatStr;\n  int *resultArray;\n  long *debugPtr;\n  bool isCircular;\n  long *localDebugPtr;\n  int *localArrayPtr;\n  \n  elementValue = *inputArray;\n  if ((elementValue != 1) && (1 < elementValue - 0x16U)) {\n    return inputArray;\n  }\n  debugPtr = debugInfo;\n  while (debugPtr != (long *)0x0) {\n    if ((inputArray == (int *)debugPtr[1]) ||\n       (isCircular = debugPtr == (long *)*debugPtr, debugPtr = (long *)*debugPtr, isCircular)) {\n      typeName = debug_get_type_name_constprop_0\n                        (inputArray,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatStr = (char *)dcgettext(0);\n      fprintf(_stderr,formatStr,typeName);\n      return (int *)0x0;\n    }\n  }\n  localDebugPtr = debugInfo;\n  localArrayPtr = inputArray;\n  if (elementValue - 0x16U < 2) {\n    resultArray = (int *)resolveDebugType_00112b6e((*(undefined8 **)(inputArray + 4))[1],&localDebugPtr);\n    return resultArray;\n  }\n  resultArray = *(int **)**(undefined8 **)(inputArray + 4);\n  if (inputArray == resultArray) {\n    return inputArray;\n  }\n  if (resultArray == (int *)0x0) {\n    return inputArray;\n  }\n  resultArray = (int *)resolveDebugType_00112b6e(resultArray,&localDebugPtr);\n  return resultArray;\n}\n\n",
            "called": [
                "dcgettext",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_fields.isra.0",
                "debug_write_type.constprop.0",
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "resolve_debug_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_struct_type_0010a83e",
                "param_1": "base_address",
                "param_2": "offset",
                "param_6": "flag_1",
                "param_7": "flag_2",
                "uVar1": "result",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar2": "string_length",
                "cVar3": "char_value"
            },
            "code": "\nundefined4\nprocess_struct_type_0010a83e(long base_address,undefined8 offset,ulong param_3,undefined param_4,ulong param_5,\n            byte flag_1,byte flag_2)\n\n{\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t string_length;\n  char char_value;\n  \n  if (((flag_2 ^ 1) & flag_1) == 0) {\n    string_1 = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(base_address + 0x60) + 0x1c);\n    string_1 = (char *)stab_pop_type();\n    param_5 = param_5 & 0xffffffff;\n    param_3 = param_3 & 0xffffffff;\n  }\n  result = stab_start_struct_type_lto_priv_0(base_address,offset,param_3,param_4,param_5);\n  if ((char)result != '\\0') {\n    if (flag_1 == 0) {\n      return result;\n    }\n    if (flag_2 == 0) {\n      if (string_1 == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string_1);\n      string_2 = (char *)xmalloc(string_length + 3);\n      sprintf(string_2,\"~%%%s\",string_1);\n      free(string_1);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(base_address + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(base_address + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string_2 = (char *)xmalloc(0x14);\n      sprintf(string_2,\"~%%%ld\",*(undefined8 *)(*(long *)(base_address + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(base_address + 0x60) + 0x38) = string_2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "stab_start_struct_type.lto_priv.0",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_struct_type_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_debug_type_00113d6e",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "debug_type_result",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong create_debug_type_00113d6e(undefined8 input_1,undefined8 input_2)\n\n{\n  long debug_type_result;\n  undefined8 *allocated_memory;\n  \n  debug_type_result = debug_make_type_constprop_0(0xb,0);\n  if (debug_type_result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(undefined8 **)(debug_type_result + 0x10) = allocated_memory;\n  }\n  return debug_type_result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "bfd_nonfatal_message",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "value"
            },
            "code": "\nvoid executeFunction_00114d50(long ptr1,long ptr2,uint value)\n\n{\n  if (*(int *)(*(long *)(ptr1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((value == 2) && (*(int *)(*(long *)(ptr2 + 8) + 8) == 2)) {\n    value = (uint)*(byte *)(*(long *)(*(long *)(ptr2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(ptr1 + 8) + 0x380) + 0x78))(ptr1,value != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "display_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "translatedText"
            },
            "code": "\nvoid displayUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *translatedText;\n  \n  programName = program_name;\n  translatedText = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,translatedText,programName);\n  translatedText = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,translatedText);\n  translatedText = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translatedText);\n  translatedText = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,translatedText);\n  translatedText = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,translatedText);\n  translatedText = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,translatedText);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    translatedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,translatedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "archiveFileName",
                "param_10": "archive",
                "param_11": "errorFlag",
                "param_12": "errorMessage",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "isErrorMessagePresent",
                "iVar1": "bfdError",
                "uVar2": "errorMessageText",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "paramPointer",
                "local_f0": "localBuffer",
                "local_e8": "errorBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "errorCode1Copy",
                "local_a8": "errorCode2Copy",
                "local_98": "errorCode3Copy",
                "local_88": "errorCode4Copy",
                "local_78": "errorCode5Copy",
                "local_68": "errorCode6Copy",
                "local_58": "errorCode7Copy",
                "local_48": "errorCode8Copy",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName",
                "stack0x00000008": "stackPointer"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long archiveFileName,long archive,long *errorFlag,char *errorMessage,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char isErrorMessagePresent;\n  int bfdError;\n  undefined8 errorMessageText;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *paramPointer;\n  undefined *localBuffer;\n  undefined errorBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (isErrorMessagePresent != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg();\n  }\n  fflush(standardOutput);\n  fputs(programName,standardError);\n  if (archive != 0) {\n    if (archiveFileName == 0) {\n      archiveFileName = bfd_get_archive_filename(archive);\n    }\n    if ((errorFlag != (long *)0x0) && (*errorFlag != 0)) {\n      fprintf(standardError,\": %s[%s]\",archiveFileName);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(standardError,\": %s\",archiveFileName);\nLAB_001127c1:\n  if (errorMessage != (char *)0x0) {\n    paramPointer = &stackPointer;\n    localBuffer = errorBuffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,standardError);\n    vfprintf(standardError,errorMessage,&bufferSize1);\n  }\n  fprintf(standardError,\": %s\\n\",errorMessageText);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fwrite",
                "bfd_get_error",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_archive_filename",
                "vfprintf",
                "fputs",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00108466",
                "copy_file",
                "FUN_0010808f",
                "main",
                "copy_relocations_in_section",
                "FUN_001086af",
                "copy_file.cold",
                "copy_object.cold",
                "copy_section",
                "FUN_00104ea2",
                "FUN_00107880",
                "copy_object",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "create_const_prop_00113b4a",
                "param_1": "input_value",
                "lVar1": "const_prop_result"
            },
            "code": "\nlong create_const_prop_00113b4a(long input_value)\n\n{\n  long const_prop_result;\n  \n  if (input_value != 0) {\n    const_prop_result = debug_make_type_constprop_0(0x15,0);\n    if (const_prop_result == 0) {\n      const_prop_result = 0;\n    }\n    else {\n      *(long *)(const_prop_result + 0x10) = input_value;\n    }\n    return const_prop_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_const_prop_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_symbol_table_0010edb4",
                "param_1": "symbolTable",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "size",
                "cVar1": "writeSuccess",
                "iVar2": "filenameComparison",
                "uVar3": "writeResult",
                "in_R10": "optionalArg"
            },
            "code": "\nundefined8 updateSymbolTable_0010edb4(long symbolTable,undefined8 filename,undefined4 flag,ulong size)\n\n{\n  char writeSuccess;\n  int filenameComparison;\n  undefined8 writeResult;\n  undefined8 optionalArg;\n  \n  if (*(long *)(symbolTable + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbolTable + 0x1f0) < size) {\n    *(ulong *)(symbolTable + 0x1f0) = size;\n  }\n  filenameComparison = filename_cmp(filename);\n  if (filenameComparison != 0) {\n    writeSuccess = stab_write_symbol_lto_priv_0(symbolTable,0x84,0,size,filename);\n    if (writeSuccess == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbolTable + 0x210) = filename;\n  }\n  writeResult = stab_write_symbol_lto_priv_0\n                    (symbolTable,0x44,flag,size - *(long *)(symbolTable + 0x200),0,optionalArg);\n  return writeResult;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_table_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "param_1": "input_ptr",
                "param_2": "iteration_count",
                "cVar1": "write_success",
                "__ptr": "ptr_to_free",
                "__s": "string_to_free",
                "sVar2": "string_length",
                "__s_00": "modified_string",
                "in_R10": "input_value",
                "iVar3": "iteration_counter"
            },
            "code": "\nundefined  [16] reverse_and_modify_0010e5db(long input_ptr,int iteration_count)\n\n{\n  char write_success;\n  void *ptr_to_free;\n  char *string_to_free;\n  size_t string_length;\n  char *modified_string;\n  ulong input_value;\n  int iteration_counter;\n  undefined auVar4 [16];\n  \n  iteration_counter = 0;\n  do {\n    if (iteration_count <= iteration_counter) {\n      auVar4 = stab_modify_type(input_ptr,0x66,0,input_ptr + 0x188,input_ptr + 400,input_value);\n      return auVar4;\n    }\n    if (*(char *)(*(long *)(input_ptr + 0x60) + 0x1c) == '\\0') {\n      ptr_to_free = (void *)stab_pop_type(input_ptr);\n      free(ptr_to_free);\n    }\n    else {\n      string_to_free = (char *)stab_pop_type(input_ptr);\n      string_length = strlen(string_to_free);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",string_to_free);\n      free(string_to_free);\n      write_success = stab_write_symbol_lto_priv_0(input_ptr,0x80,0,0,modified_string);\n      if (write_success == '\\0') {\n        auVar4._8_8_ = 0;\n        auVar4._0_8_ = input_value;\n        return auVar4 << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_counter = iteration_counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "stab_modify_type",
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_remove_directory_00104d25",
                "param_7": "directoryPath",
                "status": "errorCode"
            },
            "code": "\nvoid cleanupAndRemoveDirectory_00104d25(void)\n\n{\n  undefined8 directoryPath;\n  \n  errorCode = 1;\n  bfd_nonfatal_message(0,directoryPath,0,0);\n  remove_and_free_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_directory_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "decompile_and_improve_0010551d",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "puVar3": "pointerVar3",
                "pcVar4": "functionPointerVar",
                "puVar5": "pointerVar5",
                "uVar6": "ulongVar6",
                "uVar7": "ulongVar7",
                "__s": "messageString",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "uVar10": "uintVar10",
                "iVar11": "intVar11",
                "uVar12": "uintVar12",
                "uVar13": "undefined4Var13",
                "iVar14": "intVar14",
                "plVar15": "pointerVar15",
                "in_stack_00000008": "inputParameter1",
                "in_stack_00000010": "inputParameter2",
                "unaff_RBX": "pointerVarRBX",
                "pcVar28": "pointerVar28",
                "puVar29": "pointerVar29",
                "uVar30": "ulongVar30",
                "iVar31": "intVar31",
                "unaff_RBP": "pointerVarRBP",
                "plVar32": "pointerVar32",
                "unaff_R13": "pointerVarR13",
                "pvVar36": "pointerVar36"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong decompile_and_improve_0010551d(void)\n\n{\n  uint *pointerVar1;\n  byte byteVar2;\n  undefined *pointerVar3;\n  code *functionPointerVar;\n  undefined8 *pointerVar5;\n  ulong ulongVar6;\n  ulong ulongVar7;\n  char *messageString;\n  char charVar8;\n  char charVar9;\n  uint uintVar10;\n  int intVar11;\n  uint uintVar12;\n  undefined4 undefined4Var13;\n  int intVar14;\n  long *pointerVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *messageString_00;\n  size_t sVar26;\n  long lVar27;\n  long *pointerVarRBX;\n  char *pointerVar28;\n  undefined8 *pointerVar29;\n  ulong ulongVar30;\n  int intVar31;\n  long pointerVarRBP;\n  long *pointerVar32;\n  char *pcVar33;\n  undefined4 *pointerVar34;\n  char **ppcVar35;\n  long *pointerVarR13;\n  void *pointerVar36;\n  undefined8 *unaff_R14;\n  undefined **ppointerVar37;\n  bool bVar38;\n  byte bVar39;\n  long inputParameter1;\n  ulong inputParameter2;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(pointerVarRBX);\nLAB_001151a2:\n  pointerVarRBP = *(long *)(pointerVarRBP + 8);\n  pointerVar29 = dump_sections;\n  if (pointerVarRBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(pointerVarRBP + 0xd0) + 4) != 7)) ||\n        (charVar9 = startswith_lto_priv_0_lto_priv_0(), charVar9 == '\\0')) ||\n       ((*(long *)(pointerVarRBP + 0x60) == 0 || (lVar25 = *(long *)(pointerVarRBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    pointerVarRBX = (long *)xmalloc(0x20);\n    pointerVarRBX[1] = 0;\n    charVar9 = bfd_get_full_section_contents();\n    if (charVar9 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      pointerVarRBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar9 = bfd_set_section_size(), charVar9 != '\\0')) {\n        pointerVarRBX[3] = (long)pointerVarR13;\n        *pointerVarRBX = pointerVarRBP;\n        pointerVarR13 = pointerVarRBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,inputParameter1,pointerVarRBP);\n        free((void *)pointerVarRBX[1]);\n        free(pointerVarRBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(pointerVarRBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointerVar29 != (undefined8 *)0x0; pointerVar29 = (undefined8 *)*pointerVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      messageString_00 = fopen((char *)pointerVar29[2],\"w\");\n      if (messageString_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(pointerVar29[2],0,0);\n      }\n      else {\n        charVar9 = bfd_malloc_and_get_section();\n        if (charVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,messageString_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = pointerVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(messageString_00);\n          return 0;\n        }\n        fclose(messageString_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(inputParameter1,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar17);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(inputParameter1);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,inputParameter1,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(inputParameter1 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(inputParameter1 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        ulongVar30 = uVar20;\n        ulongVar6 = uVar24;\n        ulongVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((ulongVar30 = ulongVar6, ulongVar7 != 0 &&\n                 (ulongVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulongVar6 = uVar20;\n            ulongVar7 = uVar22;\n          }\n        }\n        uVar20 = ulongVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  pointerVar32 = isympp;\n  iStack000000000000006c = *(int *)(inputParameter1 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = process_binary_function_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppointerVar37 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointerVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *pointerVar34 = 0;\n      pointerVar34 = pointerVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerVar3 = *ppointerVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVar9 = bfd_get_section_contents();\n        if (charVar9 == '\\0') {\n          undefined4Var13 = bfd_get_error();\n          bfd_errmsg(undefined4Var13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            undefined4Var13 = bfd_get_error();\n            bfd_errmsg(undefined4Var13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pointerVar36 = __ptr; pointerVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pointerVar36 = (void *)((long)pointerVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pointerVar36);\n                byteVar2 = *(byte *)((long)pointerVar36 + 4);\n                undefined4Var13 = (**(code **)(unaff_R14[1] + 0x58))((long)pointerVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pointerVar36 + 8);\n                if (byteVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pointerVar28 = pcVar33 + (sVar18 - 1), *pointerVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pointerVar36 + 0x10U)) goto LAB_001077fb;\n                      *pointerVar28 = '\\0';\n                      pointerVar36 = (void *)((long)pointerVar36 + 0xc);\n                      intVar11 = (**(code **)(unaff_R14[1] + 0x40))(pointerVar36);\n                      uVar20 = (ulong)(uint)(intVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pointerVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pointerVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointerVar28,uVar17,pointerVar3,((long)pointerVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteVar2,undefined4Var13,lVar27,pcVar33);\n                    charVar9 = parse_stab(puStack0000000000000020,pcStack0000000000000038,byteVar2);\n                    if (charVar9 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,pointerVar3,((long)pointerVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar2,((long)pointerVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppointerVar37 = ppointerVar37 + 2;\n    } while (ppointerVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar9 = finish_stab(), charVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (pointerVar15 = pointerVar32; pointerVar15 < pointerVar32 + inputParameter2; pointerVar15 = pointerVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pointerVar28 = in_stack_00000150;\n            while (((*pointerVar28 != '\\0' && (sVar18 = strlen(pointerVar28), pointerVar28[sVar18 - 1] == '\\')) &&\n                   (pointerVar15 + 1 < pointerVar32 + inputParameter2))) {\n              pcVar19 = (char *)xstrdup(pointerVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pointerVar28 = (char *)concat(pcVar19,*(undefined8 *)(pointerVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              pointerVar15 = pointerVar15 + 1;\n              pcVar33 = pointerVar28;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pointerVar28);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (charVar9 = finish_stab(), charVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (inputParameter2 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = pointerVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = inputParameter2;\n      in_stack_000000d8 = 0;\n      pointerVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)pointerVar29 = 0;\n        pointerVar29 = (undefined8 *)((long)pointerVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)inputParameter2 <= in_stack_000000d0) break;\n        lVar25 = pointerVar32[in_stack_000000d0];\n        charVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar8 == '\\0') {\n          undefined4Var13 = bfd_get_error();\n          bfd_errmsg(undefined4Var13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          non_fatal(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar8 = bfd_coff_get_auxent(), charVar8 == '\\0')) {\n          undefined4Var13 = bfd_get_error();\n          bfd_errmsg(undefined4Var13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar8 = debug_set_filename(puStack0000000000000020);\n            if (charVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar8 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar11 = strcmp(pcVar33,\".bb\");\n              if (intVar11 == 0) {\n                charVar8 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar11 = strcmp(pcVar33,\".eb\");\n              if (intVar11 == 0) {\n                charVar8 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar11 = strcmp(pcVar33,\".bf\");\n              if (intVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (charVar9 = debug_record_function(puStack0000000000000020), charVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar31 = _uStack0000000000000048[4];\n                      if (intVar31 == 0) break;\n                      charVar8 = debug_record_line(puStack0000000000000020,intVar11 + intVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar11 = strcmp(pcVar33,\".ef\");\n                if (intVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar9 != '\\0') {\n                  charVar9 = debug_end_function(puStack0000000000000020);\n                  if (charVar9 == '\\0') goto LAB_00105981;\n                  charVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_coff_type_lto_priv_0();\n          if (lVar21 == 0) goto LAB_00105981;\n          charVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(inputParameter1 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(inputParameter1 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(inputParameter1 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (inputParameter2 != 0) {\n        pointerVar32 = isympp + inputParameter2;\n        pointerVar15 = isympp;\n        do {\n          uintVar10 = *(uint *)(*pointerVar15 + 0x18);\n          if ((uintVar10 & 0x1000000) != 0) {\n            *(uint *)(*pointerVar15 + 0x18) = uintVar10 & 0xfeffffff;\n          }\n          pointerVar15 = pointerVar15 + 1;\n        } while (pointerVar32 != pointerVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(inputParameter1 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          pointerVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *pointerVar1 = *pointerVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar11 = bfd_get_error();\n      if (intVar11 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    pointerVar32 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (inputParameter2 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar11 = add_symbols;\n        pointerVar15 = (long *)pointerVar32[_in_stack_00000018];\n        functionPointerVar = (code *)pointerVar15[4];\n        uintVar10 = *(uint *)(pointerVar15 + 3);\n        pcVar33 = (char *)pointerVar15[1];\n        pointerVar28 = pcVar33;\n        if (add_sym_list != (undefined8 *)0x0) {\n          intVar31 = 0;\n          pointerVar29 = add_sym_list;\n          while( true ) {\n            if ((intVar11 <= intVar31) || (pcVar19 = (char *)pointerVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            intVar31 = intVar31 + 1;\n          }\n          intVar14 = strcmp(pcVar19,pcVar33);\n          if (intVar14 != 0) {\n            pointerVar29 = (undefined8 *)*pointerVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          pointerVar29[5] = \"\";\n          uVar16 = create_new_symbol(pointerVar29);\n          uVar17 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar9 = *pcVar33;\n          if (charVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(inputParameter1 + 8) + 0x1c) != '\\0')) {\n            lVar27 = unaff_R14[1];\n            charVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (pointerVar28 = *(char **)(lVar27 + 8), pcVar33 == pointerVar28)) &&\n           (pointerVar28 = pcVar33, ppcVar35 = section_rename_list, (uintVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            intVar11 = strcmp(*ppcVar35,pcVar33);\n            if (intVar11 == 0) {\n              pointerVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        pointerVar15[1] = (long)pointerVar28;\n        charVar9 = *pointerVar28;\n        if (charVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = prefix_symbols_string;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar9) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uintVar10 & 0x82) == 0 && (functionPointerVar != bfd_map_over_sections)) &&\n                ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointerVar28 = pointerVar28 + 1;\n            pointerVar15[1] = (long)pointerVar28;\n            goto joined_r0x00106565;\n          }\n          charVar9 = *(char *)(*(long *)(inputParameter1 + 8) + 0x1c);\n          if (charVar9 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            pointerVar28 = pointerVar28 + 1;\n            pointerVar15[1] = (long)pointerVar28;\n            sVar18 = strlen(pointerVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pointerVar28 = charVar9;\n          pointerVar15[1] = (long)pointerVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(inputParameter1 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pointerVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pointerVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(inputParameter1 + 8) + 0x1c);\n          }\n          messageString = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pcVar33,prefix_symbols_string);\n            sVar18 = strlen(messageString);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pointerVar28);\n          pointerVar15[1] = (long)pcVar19;\n          pointerVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uintVar10 & 0x20) == 0) &&\n           (((uintVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointerVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar10 & 0x82) != 0 || ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar11 = bfd_decode_symclass(pointerVar15), intVar11 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pointerVar28;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar10 & 0x82) == 0) && (functionPointerVar != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointerVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(pointerVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  charVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar9 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (charVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(uVar17);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pointerVar28;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointerVar28;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uintVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointerVar28;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar9 = is_strip_section_isra_0(pointerVar15[4]);\n          if (charVar9 == '\\0') {\n            if (((uintVar10 & 0x800002) == 0) && (functionPointerVar != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar10 & 0x82) != 0) {\n                charVar9 = is_specified_symbol(pointerVar28);\n                if ((charVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (charVar9 = is_specified_symbol(pointerVar28), charVar9 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uintVar12 = *(uint *)(pointerVar15 + 3), (uintVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *pointerVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointerVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar12 = *(uint *)(pointerVar15 + 3);\n                }\n                *(uint *)(pointerVar15 + 3) = uintVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar10 & 1) != 0) && (charVar9 = is_specified_symbol(pointerVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (charVar9 = is_specified_symbol(pointerVar28), charVar9 != '\\0')) {\n                *(uint *)(pointerVar15 + 3) = *(uint *)(pointerVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointerVar != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = pointerVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (inputParameter2 != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      pointerVar29 = add_sym_list;\n      intVar11 = add_symbols;\n      for (lVar27 = 0; lVar27 < intVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)pointerVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = create_new_symbol(pointerVar29,inputParameter1);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          intVar11 = add_symbols;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(uVar17,pcVar33);\n        }\n        pointerVar29 = (undefined8 *)*pointerVar29;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar11 = *(int *)(*(undefined8 **)(inputParameter1 + 8) + 1);\n      if ((intVar11 != 5) && (intVar11 != 2)) {\n        uVar17 = **(undefined8 **)(inputParameter1 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,inputParameter1,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar9 = write_stabs_in_sections_debugging_info_constprop_0\n                        (inputParameter1,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (charVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(inputParameter1,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(inputParameter1,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar9 = bfd_set_section_size(lVar25,in_stack_00000110), charVar9 == '\\0')) ||\n         (charVar9 = bfd_set_section_size(lVar27,in_stack_00000140), charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        bfd_nonfatal_message(0,inputParameter1,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar9 = bfd_set_section_contents\n                        (inputParameter1,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar9 == '\\0') ||\n         (charVar9 = bfd_set_section_contents\n                            (inputParameter1,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    inputParameter2 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(inputParameter1,osympp,inputParameter2 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,inputParameter1);\n  bfd_map_over_sections(unaff_R14,copy_section,inputParameter1);\n  for (pointerVar29 = add_sections; pointerVar5 = update_sections, pointerVar29 != (undefined8 *)0x0;\n      pointerVar29 = (undefined8 *)*pointerVar29) {\n    charVar9 = bfd_set_section_contents(inputParameter1,pointerVar29[5],pointerVar29[4],0,pointerVar29[3]);\n    if (charVar9 == '\\0') {\n      bfd_nonfatal_message(0,inputParameter1,pointerVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pointerVar5 != (undefined8 *)0x0; pointerVar5 = (undefined8 *)*pointerVar5) {\n    uVar17 = *(undefined8 *)(pointerVar5[5] + 0x60);\n    charVar9 = bfd_set_section_contents(inputParameter1,uVar17,pointerVar5[4],0,pointerVar5[3]);\n    if (charVar9 == '\\0') {\n      bfd_nonfatal_message(0,inputParameter1,uVar17,0);\n      return 0;\n    }\n  }\n  if (pointerVarR13 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (charVar9 = bfd_fill_in_gnu_debuglink_section(inputParameter1,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, charVar9 != '\\0')) {\n      uintVar10 = (**(code **)(*(long *)(inputParameter1 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uintVar10;\n      if ((char)uintVar10 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        charVar9 = bfd_alt_mach_code(inputParameter1,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (charVar9 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(uVar17,uVar20);\n        if (*(int *)(*(long *)(inputParameter1 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(uVar17);\n        *(short *)(*(long *)(inputParameter1 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,inputParameter1,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,inputParameter1,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  pointerVar32 = (long *)0x0;\n  pointerVar29 = *(undefined8 **)(inputParameter1 + 0x90);\n  do {\n    if (pointerVar29 == (undefined8 *)0x0) {\n      do {\n        pointerVar32 = (long *)pointerVarR13[3];\n        free((void *)pointerVarR13[1]);\n        free(pointerVarR13);\n        pointerVarR13 = pointerVar32;\n      } while (pointerVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(inputParameter1 + 8) + 8) == 5)) &&\n        (*(int *)(pointerVar29[0x1a] + 4) == 7)) &&\n       (charVar9 = startswith_lto_priv_0_lto_priv_0(*pointerVar29,\".gnu.build.attributes\"), charVar9 != '\\0'))\n    {\n      if (pointerVar32 == (long *)0x0) {\n        pointerVar32 = pointerVarR13;\n      }\n      pointerVar15 = pointerVarR13;\n      if (*(undefined8 **)(*pointerVar32 + 0x60) == pointerVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (pointerVar32[1] != 0) {\n          charVar9 = bfd_set_section_contents(inputParameter1,pointerVar29,pointerVar32[1],0,pointerVar32[2]);\n          if (charVar9 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,inputParameter1,pointerVar29,uVar17);\n            return 0;\n          }\n          pointerVar32 = (long *)pointerVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          pointerVar32 = pointerVar15;\n          if (*(undefined8 **)(*pointerVar15 + 0x60) == pointerVar29) goto LAB_0010625f;\n          pointerVar32 = (long *)pointerVar15[3];\n          pointerVar15 = pointerVar32;\n        } while (pointerVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      bfd_nonfatal_message(0,inputParameter1,pointerVar29,uVar17);\n    }\nLAB_001061be:\n    pointerVar29 = (undefined8 *)pointerVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800"
            },
            "code": "\nvoid hashString_00108800(undefined8 *param_1)\n\n{\n  htab_hash_string(*param_1);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "parse_stab",
                "stab_demangle_template",
                "FUN_0010554f",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_debug_records_0010c1c6",
                "param_1": "data",
                "param_2": "record_ptr",
                "puVar1": "next_ptr",
                "cVar2": "continue_loop",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined process_debug_records_0010c1c6(undefined8 data,long record_ptr,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_ptr;\n  char continue_loop;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(record_ptr + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(record_ptr + 0x78) = 0;\n      return 1;\n    }\n    continue_loop = debug_record_variable\n                      (data,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_6,param_5\n                      );\n    if (continue_loop == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "process_debug_records_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_write_symbol.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "unaff_RBX": "base_address",
                "unaff_R13": "symbol_array",
                "unaff_RBP": "function_address",
                "uVar1": "symbol_count",
                "lVar2": "symbol_value",
                "cVar3": "is_kept_symbol",
                "puVar4": "output_array",
                "puVar5": "output_array_ptr",
                "uVar6": "loop_counter"
            },
            "code": "\nvoid process_symbols_001082df(void)\n\n{\n  uint symbol_count;\n  long symbol_value;\n  char is_kept_symbol;\n  long base_address;\n  undefined8 *output_array;\n  undefined8 *output_array_ptr;\n  long function_address;\n  ulong loop_counter;\n  undefined8 *symbol_array;\n  \n  symbol_count = *(uint *)(base_address + 0x78);\n  if (strip_symbols == 7) {\n    output_array = symbol_array;\n    for (loop_counter = 0; loop_counter != symbol_count; loop_counter = loop_counter + 1) {\n      output_array_ptr = output_array;\n      if (((*(long **)symbol_array[loop_counter] != (long *)0x0) &&\n          (symbol_value = **(long **)symbol_array[loop_counter], symbol_value != 0)) &&\n         (is_kept_symbol = is_specified_symbol(*(undefined8 *)(symbol_value + 8),keep_specific_htab), is_kept_symbol != '\\0')\n         ) {\n        output_array_ptr = output_array + 1;\n        *output_array = symbol_array[loop_counter];\n      }\n      output_array = output_array_ptr;\n    }\n    *output_array = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(function_address + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbols_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "copy_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_00114d60",
                "param_1": "filePath",
                "iVar1": "eofIndicator",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMsg",
                "uVar4": "errorMsgId",
                "__stream": "fileStream",
                "uVar5": "fileContent",
                "sVar6": "bytesRead",
                "lVar7": "currentSize",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readFileAndStore_00114d60(long filePath)\n\n{\n  int eofIndicator;\n  int *errnoLocation;\n  char *errorMsg;\n  undefined8 errorMsgId;\n  FILE *fileStream;\n  undefined8 fileContent;\n  size_t bytesRead;\n  long currentSize;\n  long bufferSize;\n  \n  fileStream = fopen(*(char **)(filePath + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorMsg = strerror(*errnoLocation);\n    fileContent = *(undefined8 *)(filePath + 0x10);\n    errorMsgId = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorMsgId,fileContent,errorMsg);\n  }\n  bufferSize = 0x1000;\n  currentSize = 0;\n  fileContent = xmalloc(0x1000);\n  *(undefined8 *)(filePath + 0x20) = fileContent;\n  while( true ) {\n    eofIndicator = feof(fileStream);\n    if (eofIndicator != 0) {\n      *(long *)(filePath + 0x18) = currentSize;\n      fclose(fileStream);\n      return;\n    }\n    if (currentSize == bufferSize) {\n      bufferSize = currentSize * 2;\n      fileContent = xrealloc(*(undefined8 *)(filePath + 0x20),bufferSize);\n      *(undefined8 *)(filePath + 0x20) = fileContent;\n    }\n    bytesRead = fread((void *)(*(long *)(filePath + 0x20) + currentSize),1,bufferSize - currentSize,fileStream);\n    eofIndicator = ferror(fileStream);\n    if (eofIndicator != 0) break;\n    currentSize = currentSize + bytesRead;\n  }\n  fileContent = *(undefined8 *)(filePath + 0x10);\n  errorMsgId = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorMsgId,fileContent);\n}\n\n",
            "called": [
                "fopen",
                "section_add_load_file.cold",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_and_store_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_missing_section_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findMissingSection_00108808(void)\n\n{\n  undefined8 sectionPointer;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionPointer = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(errorMessage,sectionPointer);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "find_missing_section_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_lines_00104d1c",
                "unaff_EBP": "current_line",
                "unaff_R13": "file_name",
                "unaff_R14": "current_char",
                "unaff_R15": "current_token",
                "in_stack_00000008": "error_message",
                "in_stack_00000010": "return_address",
                "uVar1": "translated_error"
            },
            "code": "\nvoid parse_lines_00104d1c(void)\n\n{\n  undefined8 translated_error;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *pbVar5;\n  int current_line;\n  byte *pbVar6;\n  undefined8 file_name;\n  byte *pbVar7;\n  byte *current_char;\n  byte *current_token;\n  undefined8 error_message;\n  undefined8 *return_address;\n  \n  *current_char = 0;\nLAB_00114520:\n  current_char = current_char + 1;\n  do {\n    bVar4 = *current_char;\n    pbVar7 = current_char;\n    if (bVar4 == 10) {\n      *current_char = 0;\n      if (current_char[1] == 0xd) {\n        pbVar7 = current_char + 1;\n        pbVar5 = current_char + 2;\n      }\n      else {\n        pbVar5 = current_char + 1;\n      }\n    }\n    else if ((char)bVar4 < '\\v') {\n      if (bVar4 != 0) goto LAB_00114520;\n      pbVar5 = current_char + 1;\n    }\n    else {\n      if (bVar4 != 0xd) break;\n      *current_char = 0;\n      pbVar5 = current_char + 1;\n      if (current_char[1] == 10) {\n        pbVar5 = current_char + 2;\n        pbVar7 = current_char + 1;\n      }\n    }\n    bVar4 = *current_token;\n    while ((bVar4 == 0x20 || (pbVar6 = current_token, bVar4 == 9))) {\n      pbVar6 = current_token + 1;\n      current_token = current_token + 1;\n      bVar4 = *pbVar6;\n    }\n    do {\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = pbVar6[1];\n      pbVar6 = pbVar6 + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      bVar4 = pbVar6[1];\n      if ((((((bVar4 == 9) || (bVar4 == 0x20)) &&\n            ((bVar4 = pbVar6[2], bVar4 == 9 || (bVar4 == 0x20)))) &&\n           ((bVar4 = pbVar6[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n          ((bVar4 = pbVar6[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n         ((bVar4 = pbVar6[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n        bVar4 = pbVar6[6];\n        pbVar3 = pbVar6 + 6;\n        if ((bVar4 == 9) || (bVar4 == 0x20)) {\n          do {\n            do {\n              bVar4 = pbVar3[1];\n              pbVar3 = pbVar3 + 1;\n            } while (bVar4 == 0x20);\n          } while (bVar4 == 9);\n        }\n      }\n      if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) {\n        translated_error = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(translated_error,error_message,current_line);\n      }\n    }\nLAB_00114599:\n    *pbVar6 = 0;\n    if (current_token < pbVar6) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = current_token;\n    }\n    current_line = current_line + 1;\n    current_char = pbVar5;\n    current_token = pbVar5;\n    if (pbVar7[1] == 0) {\n      *return_address = file_name;\n      return;\n    }\n  } while( true );\n  if (bVar4 == 0x23) {\n    parse_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_fatal_error_00119940",
                "param_1": "input",
                "param_2": "error_message",
                "uVar1": "translated_error",
                "local_20": "scanned_output"
            },
            "code": "\nvoid validate_and_fatal_error_00119940(undefined8 input,undefined8 error_message)\n\n{\n  undefined8 translated_error;\n  char *scanned_output [2];\n  \n  bfd_scan_vma(input,scanned_output,0);\n  if (*scanned_output[0] == '\\0') {\n    return;\n  }\n  translated_error = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(translated_error,error_message,input);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "parse_vma.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "validate_and_fatal_error_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "register_value"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long register_value;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(register_value + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00114dc7",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "copy_section",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "input4",
                "param_5": "input5",
                "cVar1": "flag",
                "uVar2": "returnValue",
                "puVar3": "pointer",
                "auVar4": "array"
            },
            "code": "\nundefined8\nprocessFunction_00113a4d(undefined8 input1,undefined8 input2,long param3,undefined8 input4,\n            undefined8 input5)\n\n{\n  char flag;\n  undefined8 returnValue;\n  undefined8 *pointer;\n  undefined array [16];\n  \n  flag = debug_write_linenos_constprop_0(input1,input2,*(undefined8 *)(param3 + 0x18));\n  if ((flag != '\\0') &&\n     (((*(long *)(param3 + 0x28) == 0 && (*(long *)(param3 + 8) != 0)) ||\n      (flag = stab_start_block_lto_priv_0(input2,*(undefined8 *)(param3 + 0x18)), flag != '\\0'))\n     )) {\n    if (*(undefined8 **)(param3 + 0x28) != (undefined8 *)0x0) {\n      for (pointer = (undefined8 *)**(undefined8 **)(param3 + 0x28); pointer != (undefined8 *)0x0;\n          pointer = (undefined8 *)*pointer) {\n        flag = debug_write_name_constprop_0(input1,input2,pointer);\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (pointer = *(undefined8 **)(param3 + 0x10); pointer != (undefined8 *)0x0;\n        pointer = (undefined8 *)*pointer) {\n      flag = processFunction_00113a4d(input1,input2,pointer);\n      if (flag == '\\0') {\n        return 0;\n      }\n    }\n    array = debug_write_linenos_constprop_0(input1,input2,*(undefined8 *)(param3 + 0x20));\n    if (array[0] != '\\0') {\n      if ((*(long *)(param3 + 0x28) == 0) && (*(long *)(param3 + 8) != 0)) {\n        return array._0_8_;\n      }\n      returnValue = stab_end_block_lto_priv_0\n                        (input2,*(undefined8 *)(param3 + 0x20),array._8_8_,input5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_start_block.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "debug_write_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_block.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryToRelease",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 releaseMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryToRelease;\n  undefined8 returnValue;\n  \n  returnValue = returnValue;\n  free(memoryToRelease);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "is_specified_symbol_predicate",
                "find_section_list"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "param_1": "inputValue",
                "lVar1": "debugTypePtr"
            },
            "code": "\nlong initializeDebugType_00113b71(long inputValue)\n\n{\n  long debugTypePtr;\n  \n  if (inputValue != 0) {\n    debugTypePtr = debug_make_type_constprop_0(0x14,0);\n    if (debugTypePtr == 0) {\n      debugTypePtr = 0;\n    }\n    else {\n      *(long *)(debugTypePtr + 0x10) = inputValue;\n    }\n    return debugTypePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_stab_00109dfe",
                "param_1": "input",
                "local_40": "stabString"
            },
            "code": "\nvoid processStab_00109dfe(long input)\n\n{\n  long lVar1;\n  char stabString [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  lVar1 = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = lVar1 + 1;\n  *(long *)(input + 0x70) = lVar1;\n  sprintf(stabString,\"%ld=%ld\",lVar1,lVar1);\n  stab_push_string(input,stabString,lVar1,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_end_of_string_00109bbb",
                "param_1": "objectAddress",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonToEndOfString_00109bbb(long objectAddress)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(objectAddress + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(objectAddress + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_semicolon_to_end_of_string_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "reconstruct_function_0010ae0e",
                "param_1": "inputParam",
                "lVar1": "tempVar1",
                "lVar2": "tempVar2",
                "__ptr": "tempPtr",
                "pcVar3": "tempVar3",
                "sVar4": "strLength1",
                "sVar5": "strLength2",
                "pcVar6": "newString",
                "uVar7": "returnValue",
                "lVar8": "totalLength",
                "uVar9": "counter",
                "uVar10": "totalCounter"
            },
            "code": "\nundefined8 reconstructFunction_0010ae0e(long inputParam)\n\n{\n  long tempVar1;\n  long tempVar2;\n  void *tempPtr;\n  char *tempVar3;\n  size_t strLength1;\n  size_t strLength2;\n  char *newString;\n  undefined8 returnValue;\n  long totalLength;\n  uint counter;\n  ulong totalCounter;\n  \n  returnValue = 0;\n  tempVar1 = *(long *)(inputParam + 0x60);\n  if (((tempVar1 != 0) && (*(char **)(tempVar1 + 8) != (char *)0x0)) &&\n     (newString = *(char **)(tempVar1 + 0x20), newString != (char *)0x0)) {\n    strLength1 = strlen(*(char **)(tempVar1 + 8));\n    strLength2 = strlen(newString);\n    tempVar2 = *(long *)(tempVar1 + 0x28);\n    if (tempVar2 == 0) {\n      totalLength = strLength1 + strLength2 + 10;\n      totalCounter = 0;\n    }\n    else {\n      totalLength = strLength1 + strLength2 + 0x1e;\n      totalCounter = 0;\n      while( true ) {\n        newString = *(char **)(tempVar2 + totalCounter * 8);\n        if (newString == (char *)0x0) break;\n        strLength1 = strlen(newString);\n        totalCounter = (ulong)((int)totalCounter + 1);\n        totalLength = totalLength + strLength1;\n      }\n    }\n    if (*(char **)(tempVar1 + 0x30) != (char *)0x0) {\n      strLength1 = strlen(*(char **)(tempVar1 + 0x30));\n      totalLength = totalLength + strLength1;\n    }\n    if (*(char **)(tempVar1 + 0x38) != (char *)0x0) {\n      strLength1 = strlen(*(char **)(tempVar1 + 0x38));\n      totalLength = totalLength + strLength1;\n    }\n    newString = (char *)xmalloc(totalLength);\n    tempVar1 = *(long *)(inputParam + 0x60);\n    strcpy(newString,*(char **)(tempVar1 + 8));\n    if (*(long *)(tempVar1 + 0x28) != 0) {\n      counter = 0;\n      strLength1 = strlen(newString);\n      sprintf(newString + strLength1,\"!%u,\",totalCounter);\n      while( true ) {\n        tempVar1 = *(long *)(inputParam + 0x60);\n        totalCounter = (ulong)counter;\n        tempPtr = *(void **)(tempVar1 + 0x28);\n        tempVar3 = *(char **)((long)tempPtr + totalCounter * 8);\n        if (tempVar3 == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(newString,tempVar3);\n        free(*(void **)(*(long *)(tempVar1 + 0x28) + totalCounter * 8));\n      }\n      free(tempPtr);\n      *(undefined8 *)(*(long *)(inputParam + 0x60) + 0x28) = 0;\n    }\n    tempVar1 = *(long *)(inputParam + 0x60);\n    strcat(newString,*(char **)(tempVar1 + 0x20));\n    free(*(void **)(tempVar1 + 0x20));\n    tempVar1 = *(long *)(inputParam + 0x60);\n    *(undefined8 *)(tempVar1 + 0x20) = 0;\n    if (*(char **)(tempVar1 + 0x30) != (char *)0x0) {\n      strcat(newString,*(char **)(tempVar1 + 0x30));\n      free(*(void **)(tempVar1 + 0x30));\n      *(undefined8 *)(*(long *)(inputParam + 0x60) + 0x30) = 0;\n    }\n    strLength1 = strlen(newString);\n    tempVar1 = *(long *)(inputParam + 0x60);\n    *(undefined2 *)(newString + strLength1) = 0x3b;\n    tempVar3 = *(char **)(tempVar1 + 0x38);\n    if (tempVar3 != (char *)0x0) {\n      strcpy(newString + strLength1 + 1,tempVar3);\n      free(*(void **)(tempVar1 + 0x38));\n      *(undefined8 *)(*(long *)(inputParam + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(inputParam + 0x60) + 8));\n    tempVar1 = *(long *)(inputParam + 0x60);\n    *(char **)(tempVar1 + 8) = newString;\n    returnValue = CONCAT71((int7)((ulong)tempVar1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "strcat",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reconstruct_function_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_debug_info_001135a5",
                "param_1": "outputStream",
                "param_2": "inputStream",
                "param_3": "dataOffset",
                "iVar1": "index",
                "cVar2": "successFlag",
                "uVar3": "result",
                "puVar4": "currentItem",
                "puVar5": "currentBlock"
            },
            "code": "\nundefined8 processDebugInfo_001135a5(undefined8 outputStream,undefined8 inputStream,long dataOffset)\n\n{\n  int index;\n  char successFlag;\n  undefined8 result;\n  undefined8 *currentItem;\n  undefined8 *currentBlock;\n  \n  if (6 < *(uint *)(dataOffset + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(dataOffset + 0x14)) {\n  case 0:\n    successFlag = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(dataOffset + 0x20),dataOffset);\n    if (successFlag != '\\0') {\n      result = stab_typdef_lto_priv_0(inputStream,*(undefined8 *)(dataOffset + 8));\n      return result;\n    }\n    break;\n  case 1:\n    successFlag = debug_write_type_constprop_0(outputStream,inputStream,*(undefined8 *)(dataOffset + 0x20),dataOffset);\n    if (successFlag != '\\0') {\n      result = stab_tag_lto_priv_0(inputStream,*(undefined8 *)(dataOffset + 8));\n      return result;\n    }\n    break;\n  case 2:\n    successFlag = debug_write_type_constprop_0\n                      (outputStream,inputStream,*(undefined8 *)(*(long *)(dataOffset + 0x20) + 8),0);\n    if (successFlag != '\\0') {\n      result = stab_variable_lto_priv_0\n                        (inputStream,*(undefined8 *)(dataOffset + 8),**(undefined4 **)(dataOffset + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(dataOffset + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    currentBlock = *(undefined8 **)(dataOffset + 0x20);\n    index = *(int *)(dataOffset + 0x18);\n    result = *(undefined8 *)(dataOffset + 8);\n    successFlag = debug_write_linenos_constprop_0(outputStream,inputStream,*(undefined8 *)(currentBlock[2] + 0x18));\n    if (((successFlag != '\\0') &&\n        (successFlag = debug_write_type_constprop_0(outputStream,inputStream,*currentBlock,0), successFlag != '\\0')) &&\n       (successFlag = stab_start_function_lto_priv_0(inputStream,result,index == 2), successFlag != '\\0')) {\n      for (currentItem = (undefined8 *)currentBlock[1]; currentItem != (undefined8 *)0x0;\n          currentItem = (undefined8 *)*currentItem) {\n        successFlag = debug_write_type_constprop_0(outputStream,inputStream,currentItem[2],0);\n        if (successFlag == '\\0') {\n          return 0;\n        }\n        successFlag = stab_function_parameter_lto_priv_0(inputStream,currentItem[1],*(undefined4 *)(currentItem + 3));\n        if (successFlag == '\\0') {\n          return 0;\n        }\n      }\n      currentBlock = (undefined8 *)currentBlock[2];\n      while( true ) {\n        if (currentBlock == (undefined8 *)0x0) {\n          result = stab_end_function_lto_priv_0(inputStream);\n          return result;\n        }\n        successFlag = debug_write_block_constprop_0(outputStream,inputStream,currentBlock);\n        if (successFlag == '\\0') break;\n        currentBlock = (undefined8 *)*currentBlock;\n      }\n    }\n    break;\n  case 4:\n    result = stab_int_constant_lto_priv_0\n                      (inputStream,*(undefined8 *)(dataOffset + 8),*(undefined8 *)(dataOffset + 0x20));\n    return result;\n  case 5:\n    result = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(dataOffset + 0x20),inputStream,*(undefined8 *)(dataOffset + 8));\n    return result;\n  case 6:\n    successFlag = debug_write_type_constprop_0(outputStream,inputStream,**(undefined8 **)(dataOffset + 0x20),0);\n    if (successFlag != '\\0') {\n      result = stab_typed_constant_lto_priv_0\n                        (inputStream,*(undefined8 *)(dataOffset + 8),\n                         *(undefined8 *)(*(long *)(dataOffset + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_function.lto_priv.0",
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_variable.lto_priv.0",
                "abort",
                "stab_float_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_typdef.lto_priv.0",
                "stab_end_function.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "process_debug_info_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_binary_function_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001152b6",
                "bfd_get_arch",
                "bfd_set_file_flags",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename",
                "bfd_set_start_address",
                "printf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "get_debug_type_info_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "typeCode",
                "iVar2": "comparisonResult",
                "pcVar3": "debugTypeInfo",
                "plVar4": "fieldsPtr",
                "pcVar5": "result",
                "sVar6": "stringLength",
                "__ptr": "ptr",
                "lVar7": "arglistResult",
                "local_40": "buffer"
            },
            "code": "\n\n\nchar * getDebugTypeInfo_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint typeCode;\n  int comparisonResult;\n  char *debugTypeInfo;\n  long *fieldsPtr;\n  char *result;\n  size_t stringLength;\n  void *ptr;\n  long arglistResult;\n  undefined buffer [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    typeCode = *param3;\n    if (0x29 < typeCode) break;\n    if (0x17 < typeCode) {\n      switch(typeCode) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        debugTypeInfo = (char *)getDebugTypeInfo_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (debugTypeInfo != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            debugTypeInfo = (char *)debug_make_volatile_type_isra_0(debugTypeInfo);\n            return debugTypeInfo;\n          case 0x1b:\n            debugTypeInfo = (char *)debug_make_const_type_isra_0(debugTypeInfo);\n            return debugTypeInfo;\n          default:\n                    \n            abort();\n          case 0x22:\n            debugTypeInfo = (char *)debug_make_pointer_type_isra_0(debugTypeInfo);\n            return debugTypeInfo;\n          case 0x23:\n            debugTypeInfo = (char *)debug_make_reference_type_isra_0(debugTypeInfo);\n            return debugTypeInfo;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        debugTypeInfo = (char *)cplus_demangle_print(3,param3,0x14,buffer);\n        if (debugTypeInfo == (char *)0x0) {\n          result = \"Couldn\\'t get demangled builtin type\\n\";\n          debugTypeInfo = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"signed char\");\n        if (comparisonResult == 0) {\nLAB_0010b406:\n          result = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"bool\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"char\");\n        if (comparisonResult == 0) goto LAB_0010b406;\n        comparisonResult = strcmp(debugTypeInfo,\"double\");\n        if ((comparisonResult == 0) || (comparisonResult = strcmp(debugTypeInfo,\"long double\"), comparisonResult == 0)) {\n          result = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"float\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"__float128\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"unsigned char\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"int\");\n        if (comparisonResult == 0) {\nLAB_0010b504:\n          result = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"unsigned int\");\n        if (comparisonResult == 0) {\nLAB_0010b528:\n          result = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"long\");\n        if (comparisonResult == 0) goto LAB_0010b504;\n        comparisonResult = strcmp(debugTypeInfo,\"unsigned long\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(debugTypeInfo,\"__int128\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"unsigned __int128\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"short\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"unsigned short\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"void\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"wchar_t\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(debugTypeInfo,\"long long\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"unsigned long long\");\n        if (comparisonResult == 0) {\n          result = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(debugTypeInfo,\"...\");\n        if (comparisonResult == 0) {\n          result = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          result = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          result = (char *)dcgettext(0,result,5);\n          fprintf(_stderr,result);\n        }\n        result = (char *)0x0;\nLAB_0010b6c6:\n        free(debugTypeInfo);\n        return result;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          ptr = (void *)getDebugTypeInfo_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          arglistResult = stab_demangle_v3_arglist(param1,param2,*(undefined8 *)(param3 + 6),buffer);\n          if (arglistResult != 0) {\n            debugTypeInfo = (char *)debug_make_function_type_isra_0(ptr,arglistResult,buffer[0]);\n            return debugTypeInfo;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (typeCode != 1) {\n      if (typeCode == 4) {\n        debugTypeInfo = (char *)cplus_demangle_print(3,param3,0x14,buffer);\n        result = \"Failed to print demangled template\\n\";\n        if (debugTypeInfo != (char *)0x0) {\n          stringLength = strlen(debugTypeInfo);\n          result = (char *)stab_find_tagged_type(param1,param2,debugTypeInfo,stringLength & 0xffffffff,9);\n          free(debugTypeInfo);\n          return result;\n        }\nLAB_0010b3d3:\n        result = (char *)dcgettext(0,result,5);\n        fprintf(_stderr,result);\n        return debugTypeInfo;\n      }\n      if (typeCode == 0) {\n        if ((param4 == 0) ||\n           (fieldsPtr = (long *)debug_get_fields_isra_0(param4), fieldsPtr == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = getDebugTypeInfo_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  debugTypeInfo = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,debugTypeInfo,(ulong)typeCode);\nLAB_0010b38c:\n  debugTypeInfo = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return debugTypeInfo;\nLAB_0010b1a5:\n  if (*fieldsPtr == 0) {\nswitchD_0010b158_caseD_18:\n    debugTypeInfo = (char *)stab_find_tagged_type\n                               (param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return debugTypeInfo;\n  }\n  debugTypeInfo = *(char **)(*fieldsPtr + 8);\n  if (debugTypeInfo == (char *)0x0) goto LAB_0010b38c;\n  result = (char *)debug_get_type_name_constprop_0(debugTypeInfo);\n  if (result != (char *)0x0) {\n    stringLength = strlen(result);\n    if ((param3[6] == (uint)stringLength) &&\n       (comparisonResult = strncmp(result,*(char **)(param3 + 4),(long)(int)param3[6]), comparisonResult == 0)) {\n      return debugTypeInfo;\n    }\n  }\n  fieldsPtr = fieldsPtr + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_demangle_v3_arglist",
                "debug_make_reference_type.isra.0",
                "dcgettext",
                "stab_demangle_v3_arg",
                "strcmp",
                "debug_make_type.constprop.0",
                "cplus_demangle_print",
                "debug_make_int_type.isra.0",
                "abort",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_float_type.isra.0",
                "fprintf",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arglist",
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "get_debug_type_info_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "uVar1": "translation",
                "ppbVar2": "slotPointer",
                "pbVar3": "currentChar",
                "in_CL": "currentByte",
                "bVar4": "nextByte",
                "unaff_RBX": "inputBuffer",
                "unaff_EBP": "lineNumber",
                "pbVar5": "currentLine",
                "unaff_R13": "errorFunc",
                "unaff_R14": "lineStart",
                "unaff_R15": "lineEnd",
                "in_stack_00000008": "errorMsg",
                "in_stack_00000010": "returnAddress"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 translation;\n  byte **slotPointer;\n  byte *currentChar;\n  byte currentByte;\n  byte nextByte;\n  byte *inputBuffer;\n  int lineNumber;\n  byte *currentLine;\n  undefined8 errorFunc;\n  byte *lineStart;\n  byte *lineEnd;\n  undefined8 errorMsg;\n  undefined8 *returnAddress;\n  \n  do {\n    currentLine = lineEnd;\n    if (currentByte == 9) goto LAB_00104c3f;\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = currentLine[1];\n      currentLine = currentLine + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextByte = currentLine[1];\n      if ((((((nextByte == 9) || (nextByte == 0x20)) &&\n            ((nextByte = currentLine[2], nextByte == 9 || (nextByte == 0x20)))) &&\n           ((nextByte = currentLine[3], nextByte == 9 || (nextByte == 0x20)))) &&\n          ((nextByte = currentLine[4], nextByte == 9 || (nextByte == 0x20)))) &&\n         ((nextByte = currentLine[5], nextByte == 9 || (nextByte == 0x20)))) {\n        nextByte = currentLine[6];\n        currentChar = currentLine + 6;\n        if ((nextByte == 9) || (nextByte == 0x20)) {\n          do {\n            do {\n              nextByte = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextByte == 0x20);\n          } while (nextByte == 9);\n        }\n      }\n      if ((0xd < nextByte) || ((-0x2402L >> (nextByte & 0x3f) & 1U) != 0)) {\n        translation = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(translation,errorMsg,lineNumber);\n      }\n    }\nLAB_00114599:\n    *currentLine = 0;\n    if (lineEnd < currentLine) {\n      slotPointer = (byte **)htab_find_slot();\n      *slotPointer = lineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    currentLine = inputBuffer;\n    if (lineStart[1] == 0) {\n      *returnAddress = errorFunc;\n      return;\n    }\n    for (; nextByte = *currentLine, lineStart = currentLine, nextByte != 10; currentLine = currentLine + 1) {\n      if ((char)nextByte < '\\v') {\n        if (nextByte == 0) {\n          currentChar = currentLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextByte == 0xd) {\n          *currentLine = 0;\n          currentChar = currentLine + 1;\n          if (currentLine[1] == 10) {\n            currentChar = currentLine + 2;\n            lineStart = currentLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextByte == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentLine = 0;\n    if (currentLine[1] == 0xd) {\n      lineStart = currentLine + 1;\n      currentChar = currentLine + 2;\n    }\n    else {\n      currentChar = currentLine + 1;\n    }\nLAB_00114553:\n    currentByte = *inputBuffer;\n    lineEnd = inputBuffer;\n    while (inputBuffer = currentChar, currentByte == 0x20) {\nLAB_00104c3f:\n      currentLine = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      currentChar = inputBuffer;\n      currentByte = *currentLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "process_binary_function_0010554f",
                "param_7": "binary",
                "param_8": "numSections",
                "param_9": "gap_fill_set",
                "param_12": "gap_fill_size",
                "param_14": "pad_to_set",
                "param_15": "pad_to",
                "unaff_R14": "bfd_object",
                "lVar14": "sectionSize",
                "puVar33": "fillValue",
                "plVar28": "sectionArray",
                "uVar29": "totalSize",
                "puVar26": "symbolArray",
                "iVar10": "numSymbols",
                "in_R10": "noteSections",
                "puVar4": "copySectionList",
                "param_30": "keepSectionList",
                "param_33": "gnu_debuglink_data",
                "param_34": "gnu_debuglink_size",
                "param_36": "stripSymbols",
                "param_37": "discard_locals",
                "param_40": "specificSymbolList",
                "param_43": "symbolType",
                "param_44": "symbolCode",
                "uVar5": "GAP_FILL_VALUE",
                "uVar6": "sectionType",
                "cVar7": "result"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 processBinaryFunction_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *copySectionList;\n  undefined GAP_FILL_VALUE;\n  ushort sectionType;\n  char result;\n  char cVar8;\n  undefined4 uVar9;\n  int numSymbols;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long sectionSize;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *symbolArray;\n  int iVar27;\n  long *sectionArray;\n  ulong totalSize;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *fillValue;\n  long *noteSections;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *bfd_object;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binary;\n  ulong numSections;\n  char gap_fill_set;\n  undefined4 *__ptr_02;\n  ulong gap_fill_size;\n  char *param_13;\n  undefined *pad_to_set;\n  uint pad_to;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *keepSectionList;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *gnu_debuglink_data;\n  long gnu_debuglink_size;\n  undefined8 in_stack_000000f8;\n  byte stripSymbols;\n  byte discard_locals;\n  undefined8 param_38;\n  ushort param_39;\n  long *specificSymbolList;\n  char param_41;\n  char *param_42;\n  undefined symbolType;\n  short symbolCode;\n  \n  bVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    gap_fill_size = 0;\n    pad_to_set = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    totalSize = gap_fill_size;\n  }\n  else {\n    sectionSize = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(sectionSize);\n    specificSymbolList = param_17;\n    bfd_map_over_sections(binary,get_sections,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    pad_to_set = (undefined *)xmalloc(sectionSize);\n    bVar38 = gap_fill_set != '\\0';\n    fillValue = pad_to_set;\n    for (; sectionSize != 0; sectionSize = sectionSize + -1) {\n      *fillValue = 0;\n      fillValue = fillValue + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      totalSize = 0;\n      gap_fill_size = 0;\n      do {\n        puVar30 = (ulong *)(pad_to_set + totalSize * 8);\n        sectionArray = param_17 + totalSize;\n        uVar21 = gap_fill_size;\n        do {\n          gap_fill_size = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)totalSize) goto LAB_00107cd1;\n          totalSize = (ulong)((uint)totalSize + 1);\n          uVar12 = bfd_octets_per_byte(binary,*sectionArray);\n          uVar13 = bfd_octets_per_byte(binary);\n          sectionSize = *sectionArray;\n          if ((*(uint *)(sectionSize + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(sectionArray[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(sectionSize + 0x38) + *(long *)(sectionSize + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          result = bfd_set_section_size();\n          if (result == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,binary,*sectionArray);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          sectionArray = sectionArray + 1;\n          puVar30 = puVar30 + 1;\n        } while (gap_fill_size < uVar21);\n      } while( true );\n    }\n    gap_fill_size = 0;\nLAB_00107cd1:\n    totalSize = gap_fill_size;\n    if (pad_to_set != '\\0') {\n      uVar12 = bfd_octets_per_byte(binary);\n      sectionSize = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = pad_to * (ulong)uVar12;\n      uVar24 = *(long *)(sectionSize + 0x40) + (ulong)uVar12 * *(long *)(sectionSize + 0x38);\n      if (uVar24 < uVar21) {\n        result = bfd_set_section_size();\n        if (result == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,binary,param_17[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          totalSize = uVar21 - uVar24;\n          *(ulong *)(pad_to_set + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = totalSize;\n          if (totalSize <= gap_fill_size) {\n            totalSize = gap_fill_size;\n          }\n        }\n      }\n    }\n  }\n  gap_fill_size = totalSize;\n  sectionArray = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (sectionSize = 0x18; sectionSize != 0; sectionSize = sectionSize + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      fillValue = *ppuVar36;\n      sectionSize = bfd_get_section_by_name(bfd_object,fillValue);\n      lVar37 = bfd_get_section_by_name();\n      if ((sectionSize != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(sectionSize + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        result = bfd_get_section_contents(bfd_object,sectionSize,__ptr_00,0,lVar23);\n        if (result == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_object);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          totalSize = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(totalSize + 1);\n          gap_fill_set = bfd_get_section_contents(bfd_object,lVar37,__ptr_01,0);\n          if (gap_fill_set == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*bfd_object);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + totalSize) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(bfd_object,1,sectionArray),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(bfd_object[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(bfd_object[1] + 0x58))((long)pvVar35 + 6);\n                sectionSize = (**(code **)(bfd_object[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + sectionSize;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < totalSize) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      numSymbols = (**(code **)(bfd_object[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(numSymbols + (int)param_23);\n                      if (totalSize <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *bfd_object;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,fillValue,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar9,sectionSize,pcVar31);\n                    result = parse_stab(__ptr_02,param_13,bVar2);\n                    if (result == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *bfd_object;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,fillValue,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (result = finish_stab(), result == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(bfd_object[1] + 8) == 1) {\n      sectionSize = 0;\n      for (plVar15 = sectionArray; plVar15 < sectionArray + numSections; plVar15 = plVar15 + 1) {\n        (**(code **)(bfd_object[1] + 0x218))(bfd_object,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((sectionSize == 0) && (sectionSize = start_stab_constprop_0(bfd_object,0,sectionArray), sectionSize == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < sectionArray + numSections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(symbolType,(int)symbolCode,specificSymbolList,pcVar22);\n          gap_fill_set = parse_stab(__ptr_02,sectionSize,symbolType);\n          if (gap_fill_set == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((sectionSize != 0) && (result = finish_stab(), result == '\\0')) goto LAB_00105981;\n    }\n    if (gap_fill_set == '\\0') {\n      if ((*(int *)(bfd_object[1] + 8) == 2) && (numSections != 0)) {\n        specificSymbolList = (long *)0x0;\n        keepSectionList = sectionArray;\n        param_32 = 0;\n        param_31 = numSections;\n        in_stack_000000d8 = 0;\n        symbolArray = (undefined8 *)&stack0x00000148;\n        for (sectionSize = 0x22; sectionSize != 0; sectionSize = sectionSize + -1) {\n          *(undefined4 *)symbolArray = 0;\n          symbolArray = (undefined8 *)((long)symbolArray + (ulong)bVar39 * -8 + 4);\n        }\n        result = '\\0';\n        _pad_to = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            sectionSize = sectionArray[param_32];\n            cVar8 = bfd_coff_get_syment(bfd_object,sectionSize,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(sectionSize + 8);\n            symbolArray = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)discard_locals + 1 + in_stack_000000d8;\n            if (discard_locals != 0) {\n              symbolArray = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(bfd_object,sectionSize,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (stripSymbols != 0x67) {\n              cVar8 = debug_set_filename(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)gnu_debuglink_size;\n            cVar8 = debug_set_filename(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          sectionType = in_stack_000000f8._6_2_;\n          if ((char)stripSymbols < '\\0') {\n            if (stripSymbols == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(bfd_object,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,sectionSize,lVar37);\n          }\n          else {\n            if (stripSymbols < 100) {\n              switch(stripSymbols) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(bfd_object[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(bfd_object[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _pad_to = (int *)(**(code **)(bfd_object[1] + 0x238))(bfd_object);\n                uVar12 = (uint)sectionType;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(stripSymbols) {\n            case 100:\n              numSymbols = strcmp(pcVar31,\".bb\");\n              if (numSymbols == 0) {\n                cVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                numSymbols = strcmp(pcVar31,\".eb\");\n                if (numSymbols != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              numSymbols = strcmp(pcVar31,\".bf\");\n              if (numSymbols == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(bfd_object[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (bfd_object,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(bfd_object[0x22] + 0x38)\n                                      ,symbolArray,0,__ptr_02);\n                  if ((lVar37 == 0) || (result = debug_record_function(__ptr_02), result == '\\0'))\n                  goto LAB_00105981;\n                  if (_pad_to != (int *)0x0) {\n                    numSymbols = 0;\n                    if (discard_locals != 0) {\n                      numSymbols = param_39 - 1;\n                    }\n                    sectionSize = *(long *)(*(long *)(sectionSize + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _pad_to[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(__ptr_02,numSymbols + iVar27,\n                                                *(long *)(_pad_to + 6) + sectionSize);\n                      _pad_to = _pad_to + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _pad_to = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                numSymbols = strcmp(pcVar31,\".ef\");\n                if (numSymbols != 0) goto switchD_00106e1a_caseD_68;\n                if (result != '\\0') {\n                  result = debug_end_function(__ptr_02);\n                  if (result == '\\0') goto LAB_00105981;\n                  result = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary + 0x44) & 0x42) != 0) && ((*(uint *)(binary + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (numSections != 0) {\n        sectionArray = isympp + numSections;\n        plVar15 = isympp;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (sectionArray != plVar15);\n      }\n    }\n    else {\n      for (sectionSize = *(long *)(binary + 0x90); sectionSize != 0; sectionSize = *(long *)(sectionSize + 8)) {\n        if (*(long *)(sectionSize + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(sectionSize + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      sectionSize = xmalloc();\n      sectionArray = isympp;\n      pad_to = *(uint *)((long)bfd_object + 0x44) & 0x42;\n      osympp = sectionSize;\n      if (numSections == 0) {\n        totalSize = 0;\n      }\n      else {\n        totalSize = 0;\n        _gap_fill_set = 0;\n        do {\n          numSymbols = add_symbols;\n          plVar15 = (long *)sectionArray[_gap_fill_set];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar27 = 0;\n            symbolArray = add_sym_list;\n            while ((iVar27 < numSymbols && (pcVar31 = (char *)symbolArray[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = totalSize + 1;\n                  symbolArray[5] = \"\";\n                  uVar16 = create_new_symbol(symbolArray);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(sectionSize + totalSize * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                symbolArray = (undefined8 *)*symbolArray;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(redefine_specific_htab);\n          uVar21 = totalSize;\n          if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (numSymbols = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), numSymbols == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            specificSymbolList = plVar20;\n            lVar37 = htab_find(redefine_specific_htab);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = section_rename_list, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                numSymbols = strcmp(*ppcVar34,(char *)plVar20);\n                if (numSymbols == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            result = *(char *)plVar25;\n            if (result != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(binary + 8) + 0x1c) != '\\0'))\n            {\n              lVar37 = bfd_object[1];\n              result = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          result = *(char *)plVar20;\n          if (result == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = prefix_symbols_string;\n          lVar37 = bfd_object[1];\n          if (*(char *)(lVar37 + 0x1c) == result) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            result = *(char *)(*(long *)(binary + 8) + 0x1c);\n            if (result == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = result;\n            plVar15[1] = (long)plVar25;\n            totalSize = uVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(binary + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              totalSize = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = prefix_symbols_string;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (result != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binary + 8) + 0x1c);\n            }\n            pcVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            totalSize = uVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((pad_to == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (numSymbols = bfd_decode_symclass(plVar15), numSymbols == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                specificSymbolList = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(bfd_object[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    result = bfd_is_local_label(bfd_object);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              result = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (result == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            specificSymbolList = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              specificSymbolList = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              specificSymbolList = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            result = is_strip_section_isra_0(plVar15[4]);\n            if (result == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  result = is_specified_symbol(plVar25);\n                  if ((result == '\\0') &&\n                     ((lVar37 = htab_elements(keepglobal_specific_htab), lVar37 == 0 ||\n                      (result = is_specified_symbol(plVar25), result != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (result = is_specified_symbol(plVar25), result != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (result = is_specified_symbol(plVar25), result != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(sectionSize + totalSize * 8) = plVar15;\n              totalSize = totalSize + 1;\n            }\n          }\n          _gap_fill_set = _gap_fill_set + 1;\n        } while (numSections != _gap_fill_set);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        symbolArray = add_sym_list;\n        numSymbols = add_symbols;\n        for (lVar37 = 0; lVar37 < numSymbols; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)symbolArray[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = totalSize * 8;\n            totalSize = totalSize + 1;\n            uVar17 = create_new_symbol(symbolArray,binary);\n            *(undefined8 *)(sectionSize + lVar23) = uVar17;\n            numSymbols = add_symbols;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,pcVar31);\n          }\n          symbolArray = (undefined8 *)*symbolArray;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(sectionSize + totalSize * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = totalSize & 0xffffffff;\n        goto LAB_00105710;\n      }\n      numSymbols = *(int *)(*(undefined8 **)(binary + 8) + 1);\n      if ((numSymbols == 5) || (numSymbols == 2)) {\n        gnu_debuglink_data = (void *)0x0;\n        result = write_stabs_in_sections_debugging_info_constprop_0\n                          (binary,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (result != '\\0') {\n          sectionSize = bfd_make_section_with_flags(binary,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binary,\".stabstr\",0x2108);\n          if ((((sectionSize == 0) || (lVar37 == 0)) ||\n              (result = bfd_set_section_size(sectionSize,param_38), result == '\\0')) ||\n             (result = bfd_set_section_size(lVar37,specificSymbolList), result == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(sectionSize + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            result = bfd_set_section_contents(binary,sectionSize,keepSectionList,0,param_38);\n            if ((result != '\\0') &&\n               (result = bfd_set_section_contents(binary,lVar37,gnu_debuglink_data,0,specificSymbolList), result != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,binary,0,uVar17);\n          free(gnu_debuglink_data);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binary + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,binary,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(bfd_object,mark_symbols_used_in_relocations,isympp);\n      numSymbols = bfd_get_error();\n      if (numSymbols == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    sectionSize = htab_elements(strip_specific_htab);\n    if (((sectionSize != 0) ||\n        ((((sectionSize = htab_elements(keep_specific_htab), sectionSize != 0 ||\n           (sectionSize = htab_elements(localize_specific_htab), sectionSize != 0)) ||\n          (sectionSize = htab_elements(globalize_specific_htab), sectionSize != 0)) ||\n         ((sectionSize = htab_elements(keepglobal_specific_htab), sectionSize != 0 ||\n          (sectionSize = htab_elements(weaken_specific_htab), sectionSize != 0)))))) ||\n       ((((sectionSize = htab_elements(redefine_specific_htab), sectionSize != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary,osympp,numSections & 0xffffffff);\n    bfd_map_over_sections(bfd_object,copy_relocations_in_section,binary);\n    bfd_map_over_sections(bfd_object,copy_section,binary);\n    for (symbolArray = add_sections; copySectionList = update_sections, symbolArray != (undefined8 *)0x0;\n        symbolArray = (undefined8 *)*symbolArray) {\n      result = bfd_set_section_contents(binary,symbolArray[5],symbolArray[4],0,symbolArray[3]);\n      if (result == '\\0') {\n        bfd_nonfatal_message(0,binary,symbolArray[5],0);\n        return 0;\n      }\n    }\n    for (; copySectionList != (undefined8 *)0x0; copySectionList = (undefined8 *)*copySectionList) {\n      uVar17 = *(undefined8 *)(copySectionList[5] + 0x60);\n      result = bfd_set_section_contents(binary,uVar17,copySectionList[4],0,copySectionList[3]);\n      if (result == '\\0') {\n        bfd_nonfatal_message(0,binary,uVar17,0);\n        return 0;\n      }\n    }\n    if (noteSections == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *bfd_object;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      sectionArray = (long *)0x0;\n      for (symbolArray = *(undefined8 **)(binary + 0x90); symbolArray != (undefined8 *)0x0;\n          symbolArray = (undefined8 *)symbolArray[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(binary + 8) + 8) == 5)) &&\n           ((*(int *)(symbolArray[0x1a] + 4) == 7 &&\n            (result = startswith_lto_priv_0_lto_priv_0(*symbolArray,\".gnu.build.attributes\"),\n            result != '\\0')))) {\n          if (sectionArray == (long *)0x0) {\n            sectionArray = noteSections;\n          }\n          plVar15 = noteSections;\n          if (*(undefined8 **)(*sectionArray + 0x60) == symbolArray) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (sectionArray[1] != 0) {\n              result = bfd_set_section_contents(binary,symbolArray,sectionArray[1],0,sectionArray[2]);\n              if (result == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,binary,symbolArray,uVar17);\n                return 0;\n              }\n              sectionArray = (long *)sectionArray[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              sectionArray = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == symbolArray) goto LAB_0010625f;\n              sectionArray = (long *)plVar15[3];\n              plVar15 = sectionArray;\n            } while (sectionArray != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,binary,symbolArray,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        sectionArray = (long *)noteSections[3];\n        free((void *)noteSections[1]);\n        free(noteSections);\n        noteSections = sectionArray;\n      } while (sectionArray != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (result = bfd_fill_in_gnu_debuglink_section(binary,param_21), sectionSize = gnu_debuglink_filename\n       , result != '\\0')) {\n      if (pad_to_set != (undefined *)0x0) {\n        if (0x2000 < gap_fill_size) {\n          gap_fill_size = 0x2000;\n        }\n        sectionSize = 0;\n        __ptr = (undefined *)xmalloc(gap_fill_size);\n        GAP_FILL_VALUE = gap_fill;\n        fillValue = __ptr;\n        for (gap_fill_size = gap_fill_size & 0xffffffff; gap_fill_size != 0; gap_fill_size = gap_fill_size - 1) {\n          *fillValue = GAP_FILL_VALUE;\n          fillValue = fillValue + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)sectionSize < in_stack_00000068._4_4_; sectionSize = sectionSize + 1) {\n          totalSize = *(ulong *)(pad_to_set + sectionSize * 8);\n          if (totalSize != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - totalSize;\n            do {\n              uVar21 = 0x2000;\n              if (totalSize < 0x2001) {\n                uVar21 = totalSize;\n              }\n              result = bfd_set_section_contents(binary,*param_17,__ptr,lVar37,uVar21);\n              if (result == '\\0') {\n                bfd_nonfatal_message(0,binary,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              totalSize = totalSize - uVar21;\n            } while (totalSize != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(pad_to_set);\n      }\n      uVar9 = (**(code **)(*(long *)(binary + 8) + 0x140))(bfd_object);\n      if ((char)uVar9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar9;\n        }\n        result = bfd_alt_mach_code(binary,use_alt_mach_code & 0xffffffff);\n        totalSize = use_alt_mach_code;\n        if (result == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,totalSize);\n          if (*(int *)(*(long *)(binary + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(binary + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,binary,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,binary,0,uVar17,sectionSize);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_set_section_size",
                "start_stab.constprop.0",
                "is_specified_symbol",
                "htab_traverse",
                "bfd_set_error",
                "save_stab",
                "free_saved_stabs",
                "bfd_alt_mach_code",
                "non_fatal",
                "qsort",
                "bfd_is_local_label",
                "debug_end_function",
                "copy_relocations_in_section",
                "strlen",
                "mark_symbols_used_in_relocations",
                "bfd_coff_get_syment",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_octets_per_byte",
                "strcpy",
                "xmalloc",
                "is_strip_section.isra.0",
                "is_specified_symbol_predicate",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_errmsg",
                "bfd_map_over_sections",
                "parse_coff_symbol.constprop.0.isra.0",
                "htab_elements",
                "get_sections",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "bfd_map_over_sections",
                "stab_context",
                "copy_section",
                "bfd_set_symtab",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_fill_in_gnu_debuglink_section",
                "free",
                "fprintf",
                "finish_stab",
                "compare_section_lma",
                "bfd_get_section_contents",
                "debug_end_block",
                "fatal",
                "bfd_decode_symclass",
                "strcmp",
                "debug_start_block",
                "htab_find",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "bfd_set_section_contents",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "create_new_symbol",
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_function_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_find_named_type",
                "find_section_list",
                "main",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "debug_set_class_id.lto_priv.0",
                "debug_tag_type",
                "debug_type_samep",
                "eq_string_redefnode",
                "parse_stab",
                "skip_section",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "FUN_0010554f",
                "convert_efi_target",
                "is_strip_section_1.isra.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_push_string_00109cf4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "additionalValue",
                "local_3c": "convertedNumberString"
            },
            "code": "\nvoid convertAndPushString_00109cf4(undefined8 outputBuffer,undefined8 inputNumber,undefined4 additionalValue)\n\n{\n  char convertedNumberString [28];\n  \n  sprintf(convertedNumberString,\"%ld\",inputNumber);\n  stab_push_string(outputBuffer,convertedNumberString,inputNumber,0,additionalValue);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "convert_and_push_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_input_00109ab1",
                "param_1": "input_ptr",
                "param_2": "output_values",
                "param_3": "value_size",
                "uVar1": "parsed_value",
                "pcVar2": "current_char",
                "uVar3": "return_value",
                "auVar4": "combined_return_value"
            },
            "code": "\nundefined  [16]\nparse_input_00109ab1(char **input_ptr,undefined4 *output_values,undefined8 value_size,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 return_value;\n  undefined combined_return_value [16];\n  \n  current_char = *input_ptr;\n  if (*current_char == '(') {\n    *input_ptr = current_char + 1;\n    parsed_value = parse_number(input_ptr,0);\n    *output_values = parsed_value;\n    if (**input_ptr == ',') {\n      *input_ptr = *input_ptr + 1;\n      parsed_value = parse_number(input_ptr,0,value_size);\n      output_values[1] = parsed_value;\n      if (**input_ptr == ')') {\n        current_char = *input_ptr + 1;\n        *input_ptr = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char);\n    return_value = 0;\n  }\n  else {\n    *output_values = 0;\n    current_char = (char *)parse_number(input_ptr,0);\n    output_values[1] = (int)current_char;\nLAB_00109b25:\n    return_value = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  combined_return_value._8_8_ = param_5;\n  combined_return_value._0_8_ = return_value;\n  return combined_return_value;\n}\n\n",
            "called": [
                "bad_stab",
                "parse_number"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_input_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "section_ptr",
                "uVar3": "result",
                "cVar2": "symbol_result",
                "uVar1": "symbol_address",
                "lVar4": "group_signature",
                "lVar5": "temp_ptr"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long section_ptr)\n\n{\n  undefined8 symbol_address;\n  char symbol_result;\n  undefined4 result;\n  long group_signature;\n  long temp_ptr;\n  \n  result = is_strip_section_1_isra_0();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(section_ptr + 0x27) & 2) == 0) {\n      return result;\n    }\n    group_signature = group_signature_isra_0(*(undefined8 *)(section_ptr + 0xd0),*(undefined8 *)(section_ptr + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol_address = *(undefined8 *)(group_signature + 8), strip_symbols != 7 ||\n         (symbol_result = is_specified_symbol(symbol_address,keep_specific_htab), symbol_result != '\\0')) &&\n        (symbol_result = is_specified_symbol(symbol_address,strip_specific_htab), symbol_result == '\\0')))) {\n      group_signature = *(long *)(*(long *)(section_ptr + 0xd0) + 0xc0);\n      temp_ptr = group_signature;\n      do {\n        if (temp_ptr == 0) {\n          return 1;\n        }\n        symbol_result = is_strip_section_1_isra_0(temp_ptr);\n        if (symbol_result == '\\0') {\n          return result;\n        }\n        temp_ptr = *(long *)(*(long *)(temp_ptr + 0xd0) + 0xc0);\n      } while (group_signature != temp_ptr);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_specified_symbol",
                "group_signature.isra.0",
                "is_strip_section_1.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "skip_section",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "param_1": "input",
                "__s": "string1",
                "lVar2": "struct_ptr",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "combined_string",
                "uVar4": "return_val",
                "uVar1": "undefined_byte",
                "uVar3": "undefined_value"
            },
            "code": "\nundefined4 combineStrings_0010a77a(long input)\n\n{\n  undefined undefined_byte;\n  long struct_ptr;\n  char *string1;\n  undefined8 undefined_value;\n  undefined4 return_val;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  \n  struct_ptr = *(long *)(input + 0x60);\n  if ((struct_ptr != 0) && (string1 = *(char **)(struct_ptr + 0x20), string1 != (char *)0x0)) {\n    return_val = *(undefined4 *)(struct_ptr + 0x18);\n    undefined_byte = *(undefined *)(struct_ptr + 0x1c);\n    undefined_value = *(undefined8 *)(struct_ptr + 0x10);\n    string2 = (char *)stab_pop_type();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combined_string = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combined_string,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    return_val = stab_push_string(input,combined_string,undefined_value,undefined_byte,return_val);\n    if ((char)return_val != '\\0') {\n      free(combined_string);\n      return return_val;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_with_error_handling_0010543c",
                "uVar1": "fileDescriptor",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMsg",
                "uVar4": "errorMsgFormatString",
                "unaff_RBP": "stackBaseAddress"
            },
            "code": "\nvoid openFileWithErrorHandling_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *errnoPtr;\n  char *errorMsg;\n  undefined8 errorMsgFormatString;\n  long stackBaseAddress;\n  \n  errnoPtr = __errno_location();\n  errorMsg = strerror(*errnoPtr);\n  fileDescriptor = *(undefined8 *)(stackBaseAddress + 0x10);\n  errorMsgFormatString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(errorMsgFormatString,fileDescriptor,errorMsg);\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "fatal",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "open_file_with_error_handling_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "construct_string_with_data_0010a424",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "num_elements",
                "param_4": "conditional_flag",
                "cVar1": "result_char",
                "bVar2": "result_byte",
                "iVar3": "result_int",
                "uVar4": "result",
                "pcVar5": "string_ptr",
                "__ptr": "array_ptr",
                "uVar6": "result_long",
                "__s": "string_ptr2",
                "sVar7": "string_length",
                "sVar8": "string2_length",
                "__s_00": "new_string_ptr",
                "lVar9": "loop_counter",
                "bVar10": "result_byte2",
                "lVar11": "loop_counter2",
                "uVar12": "result_undefined"
            },
            "code": "\nundefined4 constructStringWithData_0010a424(long data_ptr,char flag,int num_elements,char conditional_flag)\n\n{\n  char result_char;\n  byte result_byte;\n  int result_int;\n  undefined4 result;\n  char *string_ptr;\n  undefined8 *array_ptr;\n  undefined8 result_long;\n  char *string_ptr2;\n  size_t string_length;\n  size_t string2_length;\n  char *new_string_ptr;\n  long loop_counter;\n  byte result_byte2;\n  long loop_counter2;\n  undefined result_undefined;\n  \n  if ((flag == '\\0') && (result_char = stab_empty_type_lto_priv_0(), result_char == '\\0')) {\n    return 0;\n  }\n  result_byte2 = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string_ptr = (char *)stab_pop_type(data_ptr);\n  if (num_elements < 0) {\n    array_ptr = (undefined8 *)0x0;\n    num_elements = 0;\nLAB_0010a582:\n    result_undefined = 1;\n    if (result_byte2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (num_elements != 0) {\n      result_int = num_elements + 1;\n      array_ptr = (undefined8 *)xmalloc((long)result_int * 8);\n      loop_counter = (long)(num_elements + -1);\n      do {\n        result_byte = 1;\n        if (result_byte2 == 0) {\n          result_byte = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n        }\n        result_long = stab_pop_type(data_ptr);\n        result_byte2 = result_byte & 1;\n        array_ptr[loop_counter] = result_long;\n        loop_counter = loop_counter + -1;\n      } while ((int)loop_counter != -1);\n      if (conditional_flag == '\\0') {\n        result_char = stab_empty_type_lto_priv_0(data_ptr);\n        if (result_char == '\\0') {\n          return 0;\n        }\n        result_byte = 1;\n        if (result_byte2 == 0) {\n          result_byte = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n        }\n        result_byte2 = result_byte & 1;\n        result_long = stab_pop_type(data_ptr);\n        array_ptr[(long)result_int + -1] = result_long;\n        num_elements = result_int;\n      }\n      goto LAB_0010a582;\n    }\n    array_ptr = (undefined8 *)0x0;\n    if (conditional_flag != '\\0') goto LAB_0010a582;\n    array_ptr = (undefined8 *)xmalloc(8);\n    result_char = stab_empty_type_lto_priv_0(data_ptr);\n    if (result_char == '\\0') {\n      return 0;\n    }\n    if ((result_byte2 != 0) || (*(char *)(*(long *)(data_ptr + 0x60) + 0x1c) != '\\0')) {\n      result_long = stab_pop_type(data_ptr);\n      num_elements = 1;\n      result_undefined = 1;\n      *array_ptr = result_long;\n      goto LAB_0010a596;\n    }\n    result_long = stab_pop_type(data_ptr);\n    num_elements = 1;\n    *array_ptr = result_long;\n  }\n  result_undefined = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\nLAB_0010a596:\n  string_ptr2 = (char *)stab_pop_type(data_ptr);\n  string_length = strlen(string_ptr);\n  string2_length = strlen(string_ptr2);\n  loop_counter = string_length + 10 + string2_length;\n  for (loop_counter2 = 0; (int)loop_counter2 < num_elements; loop_counter2 = loop_counter2 + 1) {\n    string_length = strlen((char *)array_ptr[loop_counter2]);\n    loop_counter = loop_counter + string_length;\n  }\n  new_string_ptr = (char *)xmalloc(loop_counter);\n  sprintf(new_string_ptr,\"#%s,%s\",string_ptr,string_ptr2);\n  loop_counter = 0;\n  free(string_ptr);\n  free(string_ptr2);\n  while( true ) {\n    string_length = strlen(new_string_ptr);\n    if (num_elements <= (int)loop_counter) break;\n    *(undefined2 *)(new_string_ptr + string_length) = 0x2c;\n    string_ptr = (char *)array_ptr[loop_counter];\n    loop_counter = loop_counter + 1;\n    strcpy(new_string_ptr + string_length + 1,string_ptr);\n    free(string_ptr);\n  }\n  *(undefined2 *)(new_string_ptr + string_length) = 0x3b;\n  free(array_ptr);\n  result = stab_push_string(data_ptr,new_string_ptr,0,result_undefined,0);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  free(new_string_ptr);\n  return result;\n}\n\n",
            "called": [
                "stab_empty_type.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "construct_string_with_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_gnu_version_info_00119970",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printGNUVersionInfo_00119970(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_gnu_version_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "report",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_pair_00114c80",
                "param_1": "input_string",
                "pcVar1": "equal_symbol",
                "uVar2": "new_string",
                "auVar3": "result_array"
            },
            "code": "\nundefined  [16] extract_key_value_pair_00114c80(char *input_string,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  char *equal_symbol;\n  undefined8 new_string;\n  undefined result_array [16];\n  \n  equal_symbol = strchr(input_string,0x3d);\n  if (equal_symbol != (char *)0x0) {\n    result_array._0_8_ = (undefined8 *)xmalloc(0x30);\n    new_string = xstrndup(input_string,(long)equal_symbol - (long)input_string);\n    result_array._0_8_[2] = equal_symbol + 1;\n    result_array._0_8_[1] = new_string;\n    result_array._0_8_[4] = 0;\n    result_array._0_8_[3] = 0;\n    *result_array._0_8_ = param_2;\n    result_array._8_8_ = param_4;\n    return result_array;\n  }\n  new_string = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(new_string,param_3);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_key_value_pair_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "pointer",
                "param_2": "newValue",
                "param_3": "pointerToPointer",
                "puVar1": "pointerToValue"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 pointer,undefined8 newValue,long *pointerToPointer)\n\n{\n  undefined8 *pointerToValue;\n  \n  pointerToValue = (undefined8 *)*pointerToPointer;\n  *pointerToValue = newValue;\n  *pointerToPointer = (long)(pointerToValue + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_file",
                "param_2": "type_table",
                "param_3": "unit",
                "param_4": "caller_bfd",
                "param_5": "type_code",
                "param_6": "parm_info",
                "param_7": "want_function_ptrs",
                "param_8": "debug_type"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_file,long *type_table,long unit,undefined8 caller_bfd,uint type_code,\n                 long *parm_info,char want_function_ptrs,undefined8 debug_type)\n\n{\n  long lVar1;\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  long lVar5;\n  undefined8 uVar6;\n  long *plVar7;\n  void *__ptr;\n  void *__ptr_00;\n  byte bVar8;\n  int iVar9;\n  char *pcVar10;\n  ulong uVar11;\n  long lVar12;\n  uint uVar13;\n  uint uVar14;\n  undefined8 uVar15;\n  undefined local_68 [32];\n  char local_48;\n  byte local_47;\n  \n  lVar5 = *(long *)(coff_file + 0x110);\n  if ((~*(uint *)(lVar5 + 0x38) & type_code) != 0) {\n    uVar13 = (int)type_code >> ((byte)*(undefined4 *)(lVar5 + 0x44) & 0x1f);\n    uVar11 = (ulong)(type_code & *(uint *)(lVar5 + 0x40));\n    bVar8 = (byte)*(undefined4 *)(lVar5 + 0x3c);\n    uVar13 = (uVar13 ^ type_code) & *(uint *)(lVar5 + 0x38) ^ uVar13;\n    if (uVar11 == 1L << (bVar8 & 0x3f)) {\n      uVar4 = parse_coff_type_0010dac0(coff_file,type_table,unit,caller_bfd,uVar13,parm_info,want_function_ptrs,debug_type);\n      lVar5 = debug_make_pointer_type_isra_0(uVar4);\n      return lVar5;\n    }\n    if (uVar11 != 2L << (bVar8 & 0x3f)) {\n      if (uVar11 != 3L << (bVar8 & 0x3f)) {\n        uVar4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(lVar5 + 0x3c),\n                          uVar13);\n        non_fatal(uVar4,type_code);\n        return 0;\n      }\n      uVar14 = 0;\n      if (parm_info != (long *)0x0) {\n        uVar14 = (uint)*(ushort *)(parm_info + 2);\n        plVar7 = parm_info + 2;\n        for (iVar9 = 0; (*(short *)plVar7 != 0 && (iVar9 != 3)); iVar9 = iVar9 + 1) {\n          *(short *)plVar7 = *(short *)((long)plVar7 + 2);\n          plVar7 = (long *)((long)plVar7 + 2);\n        }\n        *(short *)plVar7 = 0;\n      }\n      uVar15 = 0;\n      uVar4 = debug_type;\n      uVar6 = parse_coff_type_0010dac0(coff_file,type_table,unit,caller_bfd,uVar13,parm_info,0);\n      lVar5 = *(long *)(unit + 0x28);\n      if (lVar5 == 0) {\n        uVar4 = debug_make_int_type_isra_0(4,0,uVar15,uVar4);\n        lVar5 = debug_name_type(debug_type,\"int\",uVar4);\n        *(long *)(unit + 0x28) = lVar5;\n      }\n      lVar5 = debug_make_array_type_isra_0(uVar6,lVar5,0,(long)(int)(uVar14 - 1),0);\n      return lVar5;\n    }\n    uVar4 = parse_coff_type_0010dac0(coff_file,type_table,unit,caller_bfd,uVar13,parm_info,want_function_ptrs,debug_type);\n    lVar5 = debug_make_function_type_isra_0(uVar4,0,0);\n    return lVar5;\n  }\n  if ((parm_info != (long *)0x0) && (0 < *parm_info)) {\n    plVar7 = (long *)coff_get_slot_lto_priv_0(unit);\n    if (*plVar7 != 0) {\n      return *plVar7;\n    }\n    lVar5 = debug_make_indirect_type_isra_0(plVar7,0);\n    return lVar5;\n  }\n  if (want_function_ptrs == '\\0') {\n    parm_info = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    lVar5 = debug_make_void_type_isra_0();\n    return lVar5;\n  }\n  lVar5 = *(long *)(unit + 8 + (long)(int)type_code * 8);\n  if (lVar5 != 0) {\n    return lVar5;\n  }\n  switch(type_code) {\n  default:\n    uVar4 = debug_make_void_type_isra_0();\n    pcVar10 = \"void\";\n    break;\n  case 2:\n    uVar4 = debug_make_int_type_isra_0(1,0);\n    pcVar10 = \"char\";\n    break;\n  case 3:\n    uVar4 = debug_make_int_type_isra_0(2,0);\n    pcVar10 = \"short\";\n    break;\n  case 4:\n    uVar4 = debug_make_int_type_isra_0(4,0);\n    pcVar10 = \"int\";\n    break;\n  case 5:\n    uVar4 = debug_make_int_type_isra_0(4,0);\n    pcVar10 = \"long\";\n    break;\n  case 6:\n    uVar4 = debug_make_float_type_isra_0(4);\n    pcVar10 = \"float\";\n    break;\n  case 7:\n    uVar4 = debug_make_float_type_isra_0(8);\n    pcVar10 = \"double\";\n    break;\n  case 8:\n    if (parm_info == (long *)0x0) {\n      lVar5 = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    uVar4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (parm_info == (long *)0x0) {\n      lVar5 = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    uVar4 = 9;\nLAB_0010de7a:\n    lVar5 = parse_coff_struct_type(coff_file,type_table,unit,uVar4,parm_info,debug_type);\nLAB_0010e046:\n    plVar7 = (long *)coff_get_slot_lto_priv_0(unit,caller_bfd);\n    *plVar7 = lVar5;\n    return lVar5;\n  case 10:\n    if (parm_info == (long *)0x0) {\n      lVar5 = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      lVar5 = parm_info[3];\n      __ptr = (void *)xmalloc(0x50);\n      __ptr_00 = (void *)xmalloc(0x50);\n      lVar12 = 0;\n      do {\n        while( true ) {\n          if ((lVar5 <= type_table[3]) || (type_table[1] <= type_table[2])) goto LAB_0010e032;\n          iVar9 = (int)lVar12;\n          lVar1 = *(long *)(*type_table + type_table[2] * 8);\n          cVar2 = bfd_coff_get_syment(coff_file,lVar1,local_68);\n          lVar12 = (long)iVar9;\n          if (cVar2 == '\\0') {\n            uVar3 = bfd_get_error();\n            uVar4 = bfd_errmsg(uVar3);\n            uVar6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(uVar6,uVar4);\n            free(__ptr);\n            free(__ptr_00);\n            lVar5 = 0;\n            goto LAB_0010e046;\n          }\n          type_table[2] = type_table[2] + 1;\n          type_table[3] = (ulong)local_47 + 1 + type_table[3];\n          if (local_48 != '\\x10') break;\n          if ((int)type_code <= iVar9 + 1) {\n            type_code = type_code + 10;\n            __ptr = (void *)xrealloc(__ptr);\n            __ptr_00 = (void *)xrealloc(__ptr_00,(long)(int)type_code << 3);\n          }\n          lVar12 = *(long *)(lVar1 + 0x20);\n          *(undefined8 *)((long)__ptr + (long)iVar9 * 8) = *(undefined8 *)(lVar1 + 8);\n          *(long *)((long)__ptr_00 + (long)iVar9 * 8) =\n               *(long *)(lVar1 + 0x10) + *(long *)(lVar12 + 0x30);\n          lVar12 = (long)(iVar9 + 1);\n        }\n      } while (local_48 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)__ptr + lVar12 * 8) = 0;\n      lVar5 = debug_make_enum_type_isra_0(__ptr,__ptr_00);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    lVar5 = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    uVar4 = debug_make_int_type_isra_0(1,1);\n    pcVar10 = \"unsigned char\";\n    break;\n  case 0xd:\n    uVar4 = debug_make_int_type_isra_0(2,1);\n    pcVar10 = \"unsigned short\";\n    break;\n  case 0xe:\n    uVar4 = debug_make_int_type_isra_0(4,1);\n    pcVar10 = \"unsigned int\";\n    break;\n  case 0xf:\n    uVar4 = debug_make_int_type_isra_0(4,1);\n    pcVar10 = \"unsigned long\";\n    break;\n  case 0x10:\n    uVar4 = debug_make_float_type_isra_0(0xc);\n    pcVar10 = \"long double\";\n  }\n  lVar5 = debug_name_type(debug_type,pcVar10,uVar4);\nLAB_0010e065:\n  *(long *)(unit + 8 + (long)(int)type_code * 8) = lVar5;\n  return lVar5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "bfd_coff_get_syment",
                "dcgettext",
                "xmalloc",
                "debug_make_enum_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "debug_make_array_type.isra.0",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "result",
                "in_RAX": "returnValue",
                "__n": "length",
                "extraout_var": "extraOutput",
                "auVar2": "comparisonResult"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int result;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 extraOutput;\n  undefined comparisonResult [16];\n  \n  length = strlen(string2);\n  result = strncmp(string1,string2,length);\n  comparisonResult._1_7_ = (undefined7)(CONCAT44(extraOutput,result) >> 8);\n  comparisonResult[0] = result == 0;\n  comparisonResult._8_8_ = returnValue;\n  return comparisonResult;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "handle_remove_section_option",
                "FUN_00107880",
                "main",
                "skip_section",
                "stab_demangle_function_name.constprop.0",
                "FUN_0010554f",
                "convert_efi_target",
                "is_dwo_section.constprop.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "display_time_error_0010882c",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid displayTimeError_0010882c(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  strerror(*errorPtr);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(errorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "display_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_0010ebb0",
                "param_1": "fileHandle",
                "param_2": "symbolName",
                "param_3": "caseValue",
                "param_4": "sectionName",
                "__s": "poppedType",
                "uVar2": "caseIndex",
                "uVar3": "returnValue",
                "__s_00": "concatenatedString",
                "cVar1": "typeChar",
                "sVar4": "symbolNameLength",
                "sVar5": "poppedTypeLength"
            },
            "code": "\nundefined4 writeSymbol_0010ebb0(undefined8 fileHandle,char *symbolName,int caseValue,undefined8 sectionName)\n\n{\n  char typeChar;\n  uint caseIndex;\n  undefined4 returnValue;\n  char *poppedType;\n  size_t symbolNameLength;\n  size_t poppedTypeLength;\n  char *concatenatedString;\n  \n  poppedType = (char *)stab_pop_type();\n  caseIndex = caseValue - 1;\n  if (caseIndex < 4) {\n    returnValue = *(undefined4 *)(CSWTCH_42 + (ulong)caseIndex * 4);\n    typeChar = *(char *)((long)&CSWTCH_43 + (ulong)caseIndex);\n    symbolNameLength = strlen(symbolName);\n    poppedTypeLength = strlen(poppedType);\n    concatenatedString = (char *)xmalloc(symbolNameLength + 3 + poppedTypeLength);\n    sprintf(concatenatedString,\"%s:%c%s\",symbolName,(ulong)(uint)(int)typeChar,poppedType);\n    free(poppedType);\n    returnValue = stab_write_symbol_lto_priv_0(fileHandle,returnValue,0,sectionName,concatenatedString);\n    if ((char)returnValue != '\\0') {\n      free(concatenatedString);\n    }\n    return returnValue;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_debug_type_00113b98",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "debugType",
                "plVar2": "debugData"
            },
            "code": "\nlong createDebugType_00113b98(long input1,long input2,long input3,undefined input4)\n\n{\n  long debugType;\n  long *debugData;\n  \n  if ((input1 != 0) && (debugType = debug_make_type_constprop_0(0x13,0), debugType != 0)) {\n    debugData = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)debugData + 0x19) = 0;\n    *debugData = input1;\n    *(undefined4 *)((long)debugData + 0x1c) = 0;\n    debugData[1] = input2;\n    debugData[2] = input3;\n    *(undefined *)(debugData + 3) = input4;\n    *(long **)(debugType + 0x10) = debugData;\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_symbol_00115d70",
                "param_1": "symbol",
                "param_2": "hash_table",
                "lVar1": "entry",
                "local_18": "symbol_ptr",
                "local_10": "result"
            },
            "code": "\nundefined check_symbol_00115d70(undefined8 symbol,undefined8 hash_table)\n\n{\n  long entry;\n  undefined8 symbol_ptr;\n  undefined result;\n  \n  if (wildcard == '\\0') {\n    entry = htab_find(hash_table,symbol);\n    result = entry != 0;\n  }\n  else {\n    result = 0;\n    symbol_ptr = symbol;\n    htab_traverse(hash_table,is_specified_symbol_predicate,&symbol_ptr);\n  }\n  return result;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "copy_relocations_in_section.cold",
                "FUN_0010554f",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_symbol_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "initialize_monitoring_00104000",
                "ctx": "context",
                "iVar1": "monitoringResult"
            },
            "code": "\nint initializeMonitoring_00104000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringResult;\n  \n  monitoringResult = __gmon_start__();\n  return monitoringResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_monitoring_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "FUN_00114dc7",
                "display_info.isra.0",
                "stab_demangle_v3_arg",
                "set_times.cold",
                "copy_object.cold",
                "debug_get_real_type.isra.0",
                "FUN_001152b6",
                "debug_record_variable",
                "list_supported_targets",
                "debug_name_type",
                "section_add_load_file.cold",
                "list_matching_formats",
                "stab_typdef.lto_priv.0",
                "parse_number",
                "copy_section.cold",
                "setup_section.cold",
                "main",
                "debug_end_function",
                "copy_relocations_in_section",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "warn_stab",
                "FUN_00105828",
                "bfd_nonfatal_message",
                "FUN_00107976",
                "print_version",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "add_redefine_and_check",
                "debug_find_named_type",
                "copy_file",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "FUN_00116490",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "get_file_size",
                "stab_find_type",
                "debug_tag_type",
                "stab_context",
                "FUN_00104cc1",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "is_strip_section_1.isra.0.cold",
                "add_specific_symbols",
                "finish_stab",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "FUN_0010808f",
                "endian_string",
                "check_new_section_flags.cold",
                "copy_usage",
                "get_file_size.cold",
                "debug_end_block",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "merge_gnu_build_notes",
                "bad_stab",
                "parse_flags.cold",
                "do_display_target",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "stab_bad_demangle",
                "debug_start_block",
                "FUN_00108179",
                "FUN_00104ea2",
                "FUN_00107880",
                "strip_usage",
                "init_section_add.cold",
                "debug_record_line",
                "debug_start_source",
                "stab_find_slot",
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_array_00109be3",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "uVar1": "newArray",
                "puVar2": "newElementPtr",
                "uVar3": "sizeVar"
            },
            "code": "\nundefined8 expandArray_00109be3(long array,undefined8 value,undefined4 size)\n\n{\n  undefined8 newArray;\n  undefined8 *newElementPtr;\n  uint sizeVar;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    sizeVar = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = sizeVar;\n    newArray = xrealloc(*(undefined8 *)(array + 0x20),(ulong)sizeVar << 4);\n    *(undefined8 *)(array + 0x20) = newArray;\n  }\n  sizeVar = *(uint *)(array + 0x28);\n  newElementPtr = (undefined8 *)((ulong)sizeVar * 0x10 + *(long *)(array + 0x20));\n  *newElementPtr = value;\n  *(undefined4 *)(newElementPtr + 1) = size;\n  *(uint *)(array + 0x28) = sizeVar + 1;\n  return CONCAT71((int7)((ulong)newElementPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "expand_array_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_to_dynamic_memory_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "strLength",
                "__dest": "destinationString"
            },
            "code": "\nvoid copyStringToDynamicMemory_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t strLength;\n  void *destinationString;\n  \n  strLength = strnlen(sourceString,maxLength);\n  destinationString = (void *)xmalloc(strLength + 1);\n  *(undefined *)((long)destinationString + strLength) = 0;\n  memcpy(destinationString,sourceString,strLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "init_section_add",
                "main"
            ],
            "imported": false,
            "current_name": "copy_string_to_dynamic_memory_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_symbol_with_parameters_0010e918",
                "param_1": "paramX",
                "param_2": "inputString",
                "param_3": "paramY",
                "__s": "poppedType",
                "sVar2": "inputStringLength",
                "sVar3": "poppedTypeStringLength",
                "__s_00": "newString",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeSymbolWithParameters_0010e918(undefined8 paramX,char *inputString,undefined8 paramY)\n\n{\n  undefined4 result;\n  char *poppedType;\n  size_t inputStringLength;\n  size_t poppedTypeStringLength;\n  char *newString;\n  \n  poppedType = (char *)stab_pop_type();\n  inputStringLength = strlen(inputString);\n  poppedTypeStringLength = strlen(poppedType);\n  newString = (char *)xmalloc(inputStringLength + 0x14 + poppedTypeStringLength);\n  sprintf(newString,\"%s:c=e%s,%ld\",inputString,poppedType,paramY);\n  free(poppedType);\n  result = stab_write_symbol_lto_priv_0(paramX,0x80,0,0,newString);\n  if ((char)result != '\\0') {\n    free(newString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_parameters_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_section_00116110",
                "param_1": "inputHandle",
                "param_2": "sectionData",
                "param_3": "outputHandle",
                "uVar1": "tempByte",
                "uVar2": "tempHandle",
                "lVar3": "sectionIndex",
                "iVar4": "copyWidth",
                "iVar5": "copyByte",
                "cVar6": "result",
                "uVar7": "errorMsg",
                "__ptr": "buffer",
                "lVar8": "copyIndex",
                "uVar9": "loopIndex",
                "iVar10": "tempInt",
                "uVar11": "tempIndex",
                "puVar12": "tempPointer",
                "lVar13": "sectionListIndex",
                "puVar14": "bufferPtr",
                "puVar15": "nextBufferPtr",
                "pvVar16": "currentPtr",
                "uVar17": "tempIndex2",
                "uVar18": "byteStep",
                "uVar19": "tempIndex3",
                "bVar20": "loopFlag",
                "local_38": "sectionSize",
                "local_30": "sectionDataBuffer"
            },
            "code": "\nvoid processSection_00116110(undefined8 inputHandle,undefined8 *sectionData,undefined8 outputHandle)\n\n{\n  undefined tempByte;\n  undefined8 tempHandle;\n  long sectionIndex;\n  int copyWidth;\n  int copyByte;\n  char result;\n  undefined8 errorMsg;\n  undefined8 *buffer;\n  long copyIndex;\n  ulong loopIndex;\n  int tempInt;\n  ulong tempIndex;\n  undefined *tempPointer;\n  long sectionListIndex;\n  undefined8 *bufferPtr;\n  undefined8 *nextBufferPtr;\n  void *currentPtr;\n  ulong tempIndex2;\n  ulong byteStep;\n  ulong tempIndex3;\n  byte loopFlag;\n  ulong sectionSize;\n  void *sectionDataBuffer;\n  \n  loopFlag = 0;\n  result = skip_section(inputHandle,sectionData,1);\n  if (result != '\\0') {\n    return;\n  }\n  sectionSize = sectionData[8];\n  sectionIndex = sectionData[0xc];\n  if (((*(byte *)((long)sectionData + 0x25) & 1) == 0) || ((*(byte *)(sectionIndex + 0x25) & 1) == 0)) {\n    sectionListIndex = find_section_list(*sectionData,0,0x80);\n    if (sectionListIndex == 0) {\n      return;\n    }\n    if ((*(byte *)(sectionListIndex + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionSize);\n    nextBufferPtr = buffer;\n    if (7 < sectionSize) {\n      for (byteStep = sectionSize >> 3; byteStep != 0; byteStep = byteStep - 1) {\n        *nextBufferPtr = 0;\n        nextBufferPtr = nextBufferPtr + (ulong)loopFlag * -2 + 1;\n      }\n    }\n    bufferPtr = nextBufferPtr;\n    if ((sectionSize & 4) != 0) {\n      bufferPtr = (undefined8 *)((long)nextBufferPtr + (ulong)loopFlag * -8 + 4);\n      *(undefined4 *)nextBufferPtr = 0;\n    }\n    nextBufferPtr = bufferPtr;\n    if ((sectionSize & 2) != 0) {\n      nextBufferPtr = (undefined8 *)((long)bufferPtr + (ulong)loopFlag * -4 + 2);\n      *(undefined2 *)bufferPtr = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)nextBufferPtr = 0;\n    }\n    result = bfd_set_section_contents(outputHandle,sectionIndex,buffer,0);\n    if (result != '\\0') {\n      free(buffer);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputHandle,sectionIndex,0);\n    free(buffer);\n    return;\n  }\n  sectionDataBuffer = (void *)0x0;\n  result = bfd_get_full_section_contents(inputHandle,sectionData,&sectionDataBuffer);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(inputHandle,sectionData,outputHandle,&sectionDataBuffer,&sectionSize),\n     tempInt = reverse_bytes, result == '\\0')) {\n    bfd_set_section_size(sectionIndex,0);\n    status = 1;\n    bfd_nonfatal_message(0,inputHandle,sectionData,0);\n    free(sectionDataBuffer);\n    return;\n  }\n  copyWidth = copy_width;\n  copyByte = copy_byte;\n  if (reverse_bytes != 0) {\n    byteStep = (ulong)reverse_bytes;\n    if (sectionSize % byteStep != 0) {\n      tempHandle = *sectionData;\n      errorMsg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(errorMsg,tempHandle,tempInt);\n    }\n    tempInt = reverse_bytes / 2;\n    tempIndex = 0;\n    while (tempIndex3 = tempIndex, copyWidth = copy_width, copyByte = copy_byte, tempIndex3 < sectionSize) {\n      tempIndex = byteStep + tempIndex3;\n      tempIndex2 = tempIndex;\n      for (loopIndex = 0; loopIndex < (ulong)(long)tempInt; loopIndex = loopIndex + 1) {\n        tempIndex2 = tempIndex2 - 1;\n        tempPointer = (undefined *)(tempIndex3 + loopIndex + (long)sectionDataBuffer);\n        tempByte = *tempPointer;\n        *tempPointer = *(undefined *)((long)sectionDataBuffer + tempIndex2);\n        *(undefined *)((long)sectionDataBuffer + tempIndex2) = tempByte;\n      }\n    }\n  }\n  copy_width = copyWidth;\n  copy_byte = copyByte;\n  if (-1 < copyByte) {\n    byteStep = (ulong)interleave;\n    tempInt = (int)((ulong)sectionData[7] % byteStep);\n    tempIndex = ((long)copyByte - (long)tempInt) + (long)sectionDataBuffer;\n    if (copyByte < tempInt) {\n      tempIndex = tempIndex + byteStep;\n    }\n    sectionListIndex = (sectionSize + (long)sectionDataBuffer) - tempIndex;\n    currentPtr = sectionDataBuffer;\n    for (; tempIndex < sectionSize + (long)sectionDataBuffer; tempIndex = tempIndex + byteStep) {\n      for (copyIndex = 0; ((int)copyIndex < copyWidth && (copyIndex != sectionListIndex)); copyIndex = copyIndex + 1) {\n        *(undefined *)((long)currentPtr + copyIndex) = *(undefined *)(tempIndex + copyIndex);\n      }\n      currentPtr = (void *)((long)currentPtr + copyIndex);\n      sectionListIndex = sectionListIndex - byteStep;\n    }\n    sectionSize = ((((byteStep - 1) + sectionSize) - (long)copyByte) / byteStep) * (long)copyWidth;\n    byteStep = *(ulong *)(sectionIndex + 0x38) / byteStep;\n    *(ulong *)(sectionIndex + 0x38) = byteStep;\n    if (copyByte < tempInt) {\n      *(ulong *)(sectionIndex + 0x38) = byteStep + 1;\n      result = bfd_set_section_contents(outputHandle,sectionIndex,sectionDataBuffer,0,sectionSize);\n      if (result == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(outputHandle,sectionIndex,sectionDataBuffer,0,sectionSize);\n  if (result == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionDataBuffer);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "copy_section.cold",
                "bfd_nonfatal_message",
                "find_section_list",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "skip_section",
                "xmalloc",
                "free",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "copy_relocations_in_section",
                "do_display_target",
                "bfd_nonfatal_message",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "blockPtr",
                "param_2": "newBlockPtr",
                "param_3": "unusedParam",
                "param_4": "result",
                "lVar1": "currentBlockPtr",
                "uVar2": "localizedString",
                "pcVar3": "errorMessage",
                "auVar4": "resultStruct"
            },
            "code": "\n\n\nundefined  [16] debugEndBlock_0010bf20(long blockPtr,undefined8 newBlockPtr,undefined8 unusedParam,undefined8 result)\n\n{\n  long currentBlockPtr;\n  undefined8 localizedString;\n  char *errorMessage;\n  undefined resultStruct [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlockPtr = *(long *)(blockPtr + 0x20), currentBlockPtr == 0)) {\n    errorMessage = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlockPtr + 8) != 0) {\n      *(undefined8 *)(currentBlockPtr + 0x20) = newBlockPtr;\n      localizedString = CONCAT71((int7)((ulong)currentBlockPtr >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlockPtr + 8);\n      goto LAB_0010bf84;\n    }\n    errorMessage = \"debug_end_block: attempt to close top level block\";\n  }\n  localizedString = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",localizedString);\n  localizedString = 0;\nLAB_0010bf84:\n  resultStruct._8_8_ = result;\n  resultStruct._0_8_ = localizedString;\n  return resultStruct;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "FUNC_0010c95e"
            },
            "code": "\nundefined8 FUNC_0010c95e(undefined8 *param_1,byte **param_2,long *param_3)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  char cVar7;\n  uint uVar8;\n  byte *pbVar9;\n  long lVar10;\n  undefined8 uVar11;\n  char *pcVar12;\n  size_t sVar13;\n  ulong uVar14;\n  void *__ptr;\n  long lVar15;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pcVar19;\n  byte *pbVar20;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    pbVar20 = *param_2;\n    bVar1 = *pbVar20;\n    if ('T' < (char)bVar1) break;\n    if ((char)bVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(bVar1) {\n    case 0x41:\n      lVar15 = 0;\n      pbVar3 = pbVar20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x46:\n      *param_2 = pbVar20 + 1;\n      if (param_3 == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      cVar7 = stab_demangle_args(param_1,param_2,ppcVar18,puVar16);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        lVar15 = debug_make_function_type_isra_0(*param_3,local_40[0],local_48 & 0xff);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *param_2 = pbVar20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *param_2 = pbVar20 + 1;\n      if (((&_sch_istable)[(ulong)pbVar20[1] * 2] & 4) == 0) {\n        if (pbVar20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_qualified(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uVar8 = stab_demangle_count(param_2);\n        pbVar3 = *param_2;\n        sVar13 = strlen((char *)pbVar3);\n        if (sVar13 < uVar8) goto switchD_0010cdf9_caseD_60;\n        *param_2 = pbVar3 + uVar8;\n        if ((param_3 != (long *)0x0) &&\n           (local_40[0] = (char *)stab_find_tagged_type(*param_1,param_1[1],pbVar3,uVar8,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      bVar2 = **param_2;\n      if (bVar1 == 0x4d) {\n        if ((bVar2 == 0x43) || (bVar2 == 0x56)) {\n          *param_2 = *param_2 + 1;\n        }\n        if (**param_2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *param_2 = *param_2 + 1;\n        if (param_3 == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        cVar7 = stab_demangle_args(param_1,param_2,puVar16,puVar17);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n      }\n      if (**param_2 == 0x5f) {\n        *param_2 = *param_2 + 1;\n        cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        if (bVar1 != 0x4d) {\n          lVar15 = debug_make_offset_type_isra_0(local_40[0],*param_3);\n          *param_3 = lVar15;\n          return 1;\n        }\n        lVar15 = debug_make_method_type_isra_0(*param_3,local_40[0],local_48,local_49);\n        *param_3 = lVar15;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uVar11 = stab_demangle_qualified(param_1,param_2,param_3);\n      return uVar11;\n    case 0x52:\n      *param_2 = pbVar20 + 1;\n      cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n      if (cVar7 == '\\0') {\n        return 0;\n      }\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      lVar15 = debug_make_reference_type_isra_0(*param_3);\n      *param_3 = lVar15;\n      return 1;\n    case 0x54:\n      *param_2 = pbVar20 + 1;\n      cVar7 = stab_demangle_get_count(param_2,&local_48);\n      if (cVar7 != '\\0') {\n        if ((uint)local_48 < *(uint *)(param_1 + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + param_1[4]);\n          cVar7 = FUNC_0010c95e(param_1,local_40,param_3);\n          if (cVar7 == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (bVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *param_2 = pbVar20 + 1;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar15 = debug_make_pointer_type_isra_0(*param_3);\n    *param_3 = lVar15;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bVar6 = false;\n  bVar4 = false;\n  cVar7 = '\\0';\n  bVar5 = false;\n  do {\n    pbVar3 = *param_2;\n    bVar1 = *pbVar3;\n    if (bVar1 == 0x55) {\n      cVar7 = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)bVar1) {\n      if (bVar1 == 0x56) {\n        bVar6 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)bVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)bVar1 < '_') goto LAB_0010cdfb;\n      switch(bVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (param_3 == (long *)0x0) {\nLAB_0010d0aa:\n          *param_2 = pbVar3 + 1;\n          return 1;\n        }\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120436);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_type_constprop_0(6,4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned char\";\n        if ((cVar7 == '\\0') && (pcVar19 = \"char\", bVar4)) {\n          pcVar19 = \"signed char\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(1,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"float\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(4);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"unsigned int\";\n        pcVar12 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long unsigned int\";\n        pcVar12 = \"long int\";\nLAB_0010ced2:\n        if (cVar7 == '\\0') {\n          pcVar19 = pcVar12;\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(4,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pcVar19 = \"long double\";\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_float_type_isra_0(8);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"short unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"short int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,cVar7);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (param_3 == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        cVar7 = stab_demangle_template(param_1,param_2,ppcVar18);\n        if (cVar7 == '\\0') {\n          return 0;\n        }\n        if (param_3 == (long *)0x0) {\n          return 1;\n        }\n        sVar13 = strlen(local_40[0]);\n        lVar15 = stab_find_tagged_type(*param_1,param_1[1],local_40[0],sVar13 & 0xffffffff,9);\n        *param_3 = lVar15;\n        free(local_40[0]);\n        lVar15 = *param_3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,&DAT_00120495);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_void_type_isra_0();\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        lVar15 = debug_find_named_type(*param_1,\"__wchar_t\");\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(2,1);\n          *param_3 = lVar15;\n          *param_2 = *param_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (param_3 == (long *)0x0) goto LAB_0010d0aa;\n        pcVar19 = \"long long unsigned int\";\n        if (cVar7 == '\\0') {\n          pcVar19 = \"long long int\";\n        }\n        lVar15 = debug_find_named_type(*param_1,pcVar19);\n        *param_3 = lVar15;\n        if (lVar15 == 0) {\n          lVar15 = debug_make_int_type_isra_0(8,cVar7);\n          *param_3 = lVar15;\n        }\n      }\n      *param_2 = *param_2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (bVar1 == 0x43) {\n      bVar5 = true;\n      goto LAB_0010cd84;\n    }\n    if (bVar1 != 0x53) goto LAB_0010cdc5;\n    bVar4 = true;\nLAB_0010cd84:\n    *param_2 = pbVar3 + 1;\n  } while( true );\nLAB_0010ca26:\n  pbVar9 = pbVar3 + 1;\n  *param_2 = pbVar9;\n  bVar1 = *pbVar9;\n  if (bVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (bVar1 == 0x5f) {\n    *param_2 = pbVar3 + 2;\n    cVar7 = FUNC_0010c95e(param_1,param_2,param_3);\n    if (cVar7 == '\\0') {\n      return 0;\n    }\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    lVar10 = debug_find_named_type(*param_1,\"int\");\n    if (lVar10 == 0) {\n      lVar10 = debug_make_int_type_isra_0(4,0);\n    }\n    lVar15 = debug_make_array_type_isra_0(*param_3,lVar10,0,lVar15,0);\n    *param_3 = lVar15;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)bVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  lVar15 = lVar15 * 10 + (long)((char)bVar1 + -0x30);\n  pbVar3 = pbVar9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)bVar1 < ':') {\n    if ((char)bVar1 < '0') {\n      if (bVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(pbVar20);\n      if (param_3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((bVar1 != 0x47) || (*param_2 = pbVar3 + 1, ((&_sch_istable)[(ulong)pbVar3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pbVar20 = *param_2;\n  uVar8 = stab_demangle_count(param_2);\n  pbVar3 = *param_2;\n  sVar13 = strlen((char *)pbVar3);\n  uVar14 = (ulong)uVar8;\n  if (uVar14 <= sVar13) {\n    *param_2 = pbVar3 + uVar14;\n    if (param_3 == (long *)0x0) {\n      return 1;\n    }\n    __ptr = (void *)savestring(pbVar3,uVar14);\n    lVar15 = debug_find_named_type(*param_1,__ptr);\n    *param_3 = lVar15;\n    free(__ptr);\n    if (*param_3 == 0) {\n      lVar15 = stab_find_tagged_type(*param_1,param_1[1],pbVar3,(int)*param_2 - (int)pbVar3,0);\n      *param_3 = lVar15;\njoined_r0x0010d1d8:\n      if (lVar15 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bVar5) {\n      lVar15 = debug_make_const_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    if (bVar6) {\n      lVar15 = debug_make_volatile_type_isra_0(*param_3);\n      *param_3 = lVar15;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(pbVar20);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "debug_make_void_type.isra.0",
                "stab_demangle_get_count",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "savestring",
                "strlen",
                "stab_demangle_args",
                "debug_make_reference_type.isra.0",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "stab_demangle_count",
                "stab_bad_demangle",
                "debug_make_type.constprop.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_template",
                "stab_demangle_arg"
            ],
            "imported": false,
            "current_name": "FUNC_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_binary_function_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "bfd_get_arch",
                "bfd_get_full_section_contents",
                "copy_object.cold",
                "fwrite",
                "non_fatal",
                "fopen",
                "bfd_set_format",
                "check_new_section_flags",
                "free",
                "setup_section",
                "strerror",
                "merge_gnu_build_notes",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "xmalloc",
                "bfd_create_gnu_debuglink_section",
                "FUN_00105828",
                "__errno_location",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_map_over_sections",
                "fclose",
                "FUN_0010554f",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "localizedErrorMessage",
                "local_38": "timestamp",
                "uStack_34": "stackVar_1",
                "uStack_30": "stackVar_2",
                "uStack_2c": "stackVar_3",
                "local_28": "stackVar_4",
                "uStack_24": "stackVar_5",
                "uStack_20": "stackVar_6",
                "uStack_1c": "stackVar_7"
            },
            "code": "\nvoid setFileModificationTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 localizedErrorMessage;\n  undefined4 timestamp;\n  undefined4 stackVar_1;\n  undefined4 stackVar_2;\n  undefined4 stackVar_3;\n  undefined4 stackVar_4;\n  undefined4 stackVar_5;\n  undefined4 stackVar_6;\n  undefined4 stackVar_7;\n  \n  stackVar_4 = *(undefined4 *)(fileInfo + 0x58);\n  stackVar_5 = *(undefined4 *)(fileInfo + 0x5c);\n  stackVar_6 = *(undefined4 *)(fileInfo + 0x60);\n  stackVar_7 = *(undefined4 *)(fileInfo + 100);\n  timestamp = *(undefined4 *)(fileInfo + 0x48);\n  stackVar_1 = *(undefined4 *)(fileInfo + 0x4c);\n  stackVar_2 = *(undefined4 *)(fileInfo + 0x50);\n  stackVar_3 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timestamp,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorString = strerror(*errnoPtr);\n    localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(localizedErrorMessage,filePath,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_bfd_error_message_0011a110",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorMessageText",
                "in_R10": "unknownArg",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "appName"
            },
            "code": "\n\n\nvoid printBfdErrorMessage_0011a110(long errorMessage)\n\n{\n  int error;\n  undefined8 errorMessageText;\n  undefined8 unknownArg;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorMessage != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",appName,errorMessage,errorMessageText,unknownArg);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",appName,errorMessageText,unknownArg);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00104ea2",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "do_display_target.cold",
                "do_display_target",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "hashTable",
                "param_2": "inputFlag",
                "param_3": "size",
                "param_4": "data",
                "param_5": "string",
                "lVar1": "tempVar1",
                "lVar3": "tempVar2",
                "lVar7": "tempVar3",
                "uVar2": "errorCode",
                "uVar4": "errorMsg",
                "uVar5": "localizedErrorMsg",
                "sVar6": "stringLength",
                "local_44": "localVar1",
                "uStack_40": "uStackTemp1",
                "uStack_3f": "uStackTemp2",
                "uStack_3e": "uStackTemp3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *hashTable,undefined inputFlag,int size,undefined8 data,char *string)\n\n{\n  long tempVar1;\n  undefined4 errorCode;\n  long tempVar2;\n  undefined8 errorMsg;\n  undefined8 localizedErrorMsg;\n  size_t stringLength;\n  long tempVar3;\n  undefined4 localVar1;\n  undefined uStackTemp1;\n  undefined uStackTemp2;\n  undefined2 uStackTemp3;\n  undefined4 localVar2 [3];\n  \n  if (string == (char *)0x0) {\n    tempVar3 = 0;\n  }\n  else {\n    tempVar2 = bfd_hash_lookup(hashTable + 7,string,1,1);\n    if (tempVar2 == 0) {\n      errorCode = bfd_get_error();\n      errorMsg = bfd_errmsg(errorCode);\n      localizedErrorMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(localizedErrorMsg,errorMsg);\n      return 0;\n    }\n    tempVar3 = *(long *)(tempVar2 + 0x20);\n    if (tempVar3 == -1) {\n      tempVar3 = hashTable[6];\n      tempVar1 = hashTable[5];\n      *(long *)(tempVar2 + 0x20) = tempVar3;\n      if (tempVar1 == 0) {\n        hashTable[4] = tempVar2;\n      }\n      else {\n        *(long *)(tempVar1 + 0x18) = tempVar2;\n      }\n      hashTable[5] = tempVar2;\n      stringLength = strlen(string);\n      hashTable[6] = tempVar3 + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(tempVar3,&localVar1);\n  uStackTemp2 = 0;\n  uStackTemp1 = inputFlag;\n  (**(code **)(*(long *)(*hashTable + 8) + 0x68))((long)size,&uStackTemp3);\n  (**(code **)(*(long *)(*hashTable + 8) + 0x50))(data,localVar2);\n  if ((ulong)hashTable[3] < hashTable[2] + 0xcU) {\n    hashTable[3] = hashTable[3] * 2;\n    tempVar3 = xrealloc(hashTable[1]);\n    hashTable[1] = tempVar3;\n  }\n  tempVar3 = hashTable[2];\n  tempVar2 = hashTable[1];\n  *(ulong *)(tempVar2 + tempVar3) = CONCAT26(uStackTemp3,CONCAT15(uStackTemp2,CONCAT14(uStackTemp1,localVar1)));\n  *(undefined4 *)(tempVar2 + 8 + tempVar3) = localVar2[0];\n  hashTable[2] = hashTable[2] + 0xc;\n  return CONCAT71((int7)((ulong)tempVar3 >> 8),1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "bfd_hash_lookup",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "section_flags_to_value_00113fe0",
                "param_1": "inputFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "error",
                "pcVar3": "delimiter",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "flagIndex",
                "uVar7": "sectionValue",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] sectionFlagsToValue_00113fe0(char *inputFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 error;\n  char *delimiter;\n  char *nextFlag;\n  size_t flagLength;\n  int flagIndex;\n  uint sectionValue;\n  undefined returnValue [16];\n  \n  sectionValue = 0;\n  do {\n    delimiter = strchr(inputFlags,0x2c);\n    if (delimiter == (char *)0x0) {\n      flagLength = strlen(inputFlags);\n      flagIndex = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = delimiter + 1;\n      flagIndex = (int)delimiter - (int)inputFlags;\n    }\n    flagLength = (size_t)flagIndex;\n    result = strncasecmp(\"alloc\",inputFlags,flagLength);\n    if (result == 0) {\n      sectionValue = sectionValue | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",inputFlags,flagLength);\n      if (result == 0) {\n        sectionValue = sectionValue | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",inputFlags,flagLength);\n        if (result == 0) {\n          sectionValue = sectionValue | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",inputFlags,flagLength);\n          if (result == 0) {\n            sectionValue = sectionValue | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",inputFlags,flagLength);\n            if (result == 0) {\n              sectionValue = sectionValue | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",inputFlags,flagLength);\n              if (result == 0) {\n                sectionValue = sectionValue | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",inputFlags,flagLength);\n                if (result == 0) {\n                  sectionValue = sectionValue | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",inputFlags,flagLength);\n                  if (result == 0) {\n                    sectionValue = sectionValue | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",inputFlags,flagLength);\n                    if (result == 0) {\n                      sectionValue = sectionValue | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",inputFlags,flagLength);\n                      if (result == 0) {\n                        sectionValue = sectionValue | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",inputFlags,flagLength);\n                        if (result == 0) {\n                          sectionValue = sectionValue | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",inputFlags,flagLength);\n                          if (result == 0) {\n                            sectionValue = sectionValue | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",inputFlags,flagLength);\n                            if (result != 0) {\n                              delimiter = (char *)xmalloc((long)(flagIndex + 1));\n                              strncpy(delimiter,inputFlags,flagLength);\n                              delimiter[flagLength] = '\\0';\n                              error = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(error,delimiter);\n                              error = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(error,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            sectionValue = sectionValue | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    inputFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  returnValue._4_4_ = 0;\n  returnValue._0_4_ = sectionValue;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "section_flags_to_value_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_archive_filename_001125fa",
                "param_1": "arguments",
                "ppcVar2": "archive",
                "sVar3": "archiveNameLength",
                "sVar4": "mainStringLenght",
                "__s": "result",
                "uVar1": "requiredLength",
                "curr_1": "currentLength",
                "buf_0": "buffer"
            },
            "code": "\nchar * getArchiveFilename_001125fa(char **arguments)\n\n{\n  ulong requiredLength;\n  char **archive;\n  size_t archiveNameLength;\n  size_t mainStringLenght;\n  char *result;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archive = (char **)arguments[0x1d];\n  result = *arguments;\n  if ((archive != (char **)0x0) && ((*(byte *)((long)archive + 0x49) & 0x10) == 0)) {\n    archiveNameLength = strlen(*archive);\n    mainStringLenght = strlen(result);\n    requiredLength = archiveNameLength + 3 + mainStringLenght;\n    if (currentLength < requiredLength) {\n      if (currentLength != 0) {\n        free(buffer);\n      }\n      currentLength = (requiredLength >> 1) + requiredLength;\n      buffer = (char *)xmalloc();\n    }\n    sprintf(buffer,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    result = buffer;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "__assert_fail",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "copy_object",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "get_archive_filename_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "stab_demangle_template",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "bfd_nonfatal_message",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_value_00108f05",
                "return": "result"
            },
            "code": "\nundefined get_value_00108f05(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_value_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_saved_stabs_00108863",
                "puVar1": "ptrSavedStabs",
                "puVar2": "ptrNextSavedStabs",
                "saved_stabs": "ptrSavedStabsArray",
                "saved_stabs_index": "savedStabsIndex"
            },
            "code": "\nvoid clearSavedStabs_00108863(void)\n\n{\n  undefined4 *ptrSavedStabs;\n  undefined4 *ptrNextSavedStabs;\n  \n  ptrSavedStabs = (undefined4 *)ptrSavedStabsArray;\n  do {\n    ptrNextSavedStabs = ptrSavedStabs + 6;\n    free(*(void **)(ptrSavedStabs + 4));\n    *(undefined8 *)(ptrSavedStabs + 4) = 0;\n    ptrSavedStabs = ptrNextSavedStabs;\n  } while (ptrNextSavedStabs != &savedStabsIndex);\n  savedStabsIndex = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_saved_stabs_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_function_00104020"
            },
            "code": "\nvoid executeFunction_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_handle",
                "param_2": "filename",
                "iVar1": "cmp_result",
                "uVar2": "status",
                "puVar3": "debug_filenames",
                "puVar4": "current_filename",
                "lVar5": "loop_counter",
                "puVar6": "head",
                "pcVar7": "selected_filename",
                "puVar8": "tail",
                "bVar9": "byte_value"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_handle,char *filename)\n\n{\n  int cmp_result;\n  undefined8 status;\n  undefined8 *debug_filenames;\n  undefined8 *current_filename;\n  long loop_counter;\n  undefined8 *head;\n  char *selected_filename;\n  undefined8 *tail;\n  byte byte_value;\n  \n  byte_value = 0;\n  selected_filename = \"\";\n  if (filename != (char *)0x0) {\n    selected_filename = filename;\n  }\n  if (*(long *)(source_handle + 8) == 0) {\n    status = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",status);\n    status = 0;\n  }\n  else {\n    for (debug_filenames = *(undefined8 **)(*(long *)(source_handle + 8) + 8); debug_filenames != (undefined8 *)0x0;\n        debug_filenames = (undefined8 *)*debug_filenames) {\n      cmp_result = filename_cmp(debug_filenames[1],selected_filename);\n      if (cmp_result == 0) goto LAB_00108fad;\n    }\n    debug_filenames = (undefined8 *)xmalloc(0x18);\n    head = *(undefined8 **)(source_handle + 0x10);\n    tail = debug_filenames;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)tail = 0;\n      tail = (undefined8 *)((long)tail + (ulong)byte_value * -8 + 4);\n    }\n    debug_filenames[1] = selected_filename;\n    tail = (undefined8 *)*head;\n    while (current_filename = tail, current_filename != (undefined8 *)0x0) {\n      head = current_filename;\n      tail = (undefined8 *)*current_filename;\n    }\n    *head = debug_filenames;\nLAB_00108fad:\n    *(undefined8 **)(source_handle + 0x10) = debug_filenames;\n    status = 1;\n  }\n  return status;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "copy_file.cold"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "update_sections_00114190",
                "param_1": "section",
                "param_2": "is_change",
                "param_3": "flags",
                "uVar1": "flag_value",
                "plVar2": "section_pattern",
                "pplVar3": "current_section",
                "iVar4": "result",
                "uVar5": "error_message",
                "pplVar6": "next_section",
                "pplVar7": "previous_section",
                "pplVar8": "temp_section"
            },
            "code": "\nlong ** update_sections_00114190(long *section,char is_change,uint flags)\n\n{\n  uint flag_value;\n  long *section_pattern;\n  long **current_section;\n  int result;\n  undefined8 error_message;\n  long **next_section;\n  long **previous_section;\n  long **temp_section;\n  \n  previous_section = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (is_change == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_change == '\\0') {\n    if ((flags & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      next_section = (long **)*previous_section;\n      if (next_section == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_section = (long **)0x0;\n    }\n    else {\n      section_pattern = change_sections[1];\n      if (*(char *)section_pattern == '!') {\n        result = fnmatch((char *)((long)section_pattern + 1),(char *)section,0);\n        next_section = previous_section;\n        if (result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      result = fnmatch((char *)section_pattern,(char *)section,0);\n      if (result != 0) goto LAB_001141e5;\n      next_section = (long **)*previous_section;\n      if (next_section == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)next_section + 0x14)) != 0) {\n      section_pattern = next_section[1];\n      if (*(char *)section_pattern == '!') {\n        result = fnmatch((char *)((long)section_pattern + 1),(char *)section,0);\n        if (result == 0) {\nLAB_0011438e:\n          *(undefined *)(next_section + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = fnmatch((char *)section_pattern,(char *)section,0);\n        if ((previous_section == (long **)0x0) && (result == 0)) {\n          temp_section = (long **)*next_section;\n          previous_section = next_section;\n          if (temp_section == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    temp_section = (long **)*next_section;\n    next_section = previous_section;\n    if (temp_section != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = strcmp((char *)change_sections[1],(char *)section);\n    if (result == 0) {\nLAB_001143cd:\n      flag_value = *(uint *)((long)previous_section + 0x14);\n      if ((((flag_value & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flag_value & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,section);\n      }\n      if ((((flag_value & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,section);\n      }\n      if ((((flag_value & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_section + 0x14) = flag_value | flags;\n        return previous_section;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,section);\n    }\n    previous_section = (long **)*previous_section;\n    if (previous_section == (long **)0x0) goto LAB_001142a9;\n    result = strcmp((char *)previous_section[1],(char *)section);\n    if (result == 0) goto LAB_001143cd;\n    temp_section = (long **)*previous_section;\n    next_section = (long **)0x0;\n    if (temp_section == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_section = next_section;\n      if (is_change == '\\0') {\n        while (next_section = temp_section, current_section = previous_section, temp_section = next_section,\n              (flags & *(uint *)((long)next_section + 0x14)) != 0) {\n          section_pattern = next_section[1];\n          if (*(char *)section_pattern == '!') {\n            result = fnmatch((char *)((long)section_pattern + 1),(char *)section,0);\n            if (result == 0) goto LAB_0011438e;\n            temp_section = (long **)*next_section;\n            if ((long **)*next_section == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = fnmatch((char *)section_pattern,(char *)section,0);\n            if ((previous_section == (long **)0x0) && (result == 0)) {\n              previous_section = next_section;\n              temp_section = (long **)*next_section;\n              if ((long **)*next_section == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              temp_section = (long **)*next_section;\n              if ((long **)*next_section == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = strcmp((char *)temp_section[1],(char *)section);\n        current_section = next_section;\n        previous_section = temp_section;\n        if (result == 0) goto LAB_001143cd;\n      }\n      next_section = current_section;\n      temp_section = (long **)*temp_section;\n      previous_section = next_section;\n    } while (temp_section != (long **)0x0);\nLAB_001142a1:\n    if (is_change != '\\0') {\nLAB_001142a9:\n      next_section = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(next_section + 3) = (undefined  [16])0x0;\n      *(undefined *)(next_section + 2) = 0;\n      *(uint *)((long)next_section + 0x14) = flags;\n      next_section[5] = (long *)0x0;\n      previous_section = next_section;\n      *next_section = (long *)change_sections;\n      change_sections = previous_section;\n      next_section[1] = section;\n      return next_section;\n    }\n  }\nLAB_00114212:\n  if (previous_section == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_section + 2) = 1;\n  return previous_section;\n}\n\n",
            "called": [
                "find_section_list.cold",
                "dcgettext",
                "fatal",
                "fnmatch",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "copy_section",
                "handle_remove_section_option",
                "setup_section.cold",
                "FUN_00107880",
                "main",
                "copy_relocations_in_section",
                "is_strip_section_1.isra.0",
                "setup_section"
            ],
            "imported": false,
            "current_name": "update_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "reconstruct_gnu_build_attribute_notes_00116490",
                "param_1": "param_unspecified",
                "param_2": "note_size",
                "param_3": "note_name",
                "param_4": "note_content",
                "uVar1": "result",
                "uVar2": "temp_result",
                "uVar3": "note_length",
                "bVar4": "is_match",
                "puVar5": "temp_pointer",
                "iVar6": "loop_variable",
                "lVar7": "local_variable",
                "uVar8": "temp_value",
                "in_RAX": "note_type",
                "uVar9": "temp_value1",
                "uVar10": "temp_value2",
                "uVar11": "temp_value3",
                "uVar12": "temp_value4",
                "__ptr": "allocated_memory",
                "uVar13": "temp_value5",
                "unaff_RBX": "remaining_notes_length",
                "unaff_RBP": "temp_value6",
                "puVar14": "current_note",
                "puVar15": "current_pointer",
                "cVar16": "char_value",
                "puVar17": "pointer1",
                "puVar18": "pointer2",
                "in_R11": "note_description_length",
                "unaff_R12": "note_descriptor",
                "puVar19": "note_descriptor_end",
                "unaff_R13": "temp_value7",
                "__nmemb": "note_count",
                "unaff_R14": "function_arguments",
                "puVar20": "loop_pointer",
                "bVar21": "byte_value",
                "iVar22": "loop_variable2",
                "unaff_retaddr": "return_address",
                "param_7": "temp_value8",
                "param_8": "temp_value9",
                "param_9": "temp_value10",
                "in_stack_00000020": "note_buffer_length",
                "in_stack_00000028": "note_buffer_start",
                "in_stack_00000030": "pointer_to_note_buffer",
                "in_stack_00000038": "additional_flag1",
                "in_stack_00000040": "additional_flag2",
                "in_stack_00000048": "additional_arguments"
            },
            "code": "\nulong reconstruct_gnu_build_attribute_notes_00116490(undefined8 param_unspecified,ulong note_size,ulong note_name,long note_content)\n\n{\n  undefined8 result;\n  undefined8 temp_result;\n  ulong note_length;\n  bool is_match;\n  ulong *temp_pointer;\n  int loop_variable;\n  long local_variable;\n  undefined8 temp_value;\n  ulong note_type;\n  ulong temp_value1;\n  ulong temp_value2;\n  ulong temp_value3;\n  ulong temp_value4;\n  undefined *allocated_memory;\n  ulong temp_value5;\n  ulong remaining_notes_length;\n  ulong temp_value6;\n  ulong *current_note;\n  undefined *current_pointer;\n  char char_value;\n  undefined *pointer1;\n  undefined *pointer2;\n  ulong note_description_length;\n  ulong *note_descriptor;\n  ulong *note_descriptor_end;\n  ulong temp_value7;\n  size_t note_count;\n  undefined8 *function_arguments;\n  ulong *loop_pointer;\n  byte byte_value;\n  int loop_variable2;\n  ulong return_address;\n  ulong temp_value8;\n  uint temp_value9;\n  ulong temp_value10;\n  ulong note_buffer_length;\n  ulong *note_buffer_start;\n  undefined *pointer_to_note_buffer;\n  uint additional_flag1;\n  uint additional_flag2;\n  undefined8 *additional_arguments;\n  \n  byte_value = 0;\ncode_r0x00116490:\n  local_variable = note_content;\n  temp_value2 = temp_value6;\n  temp_value5 = temp_value7;\n  if (note_type == 0) {\n    if (note_size == 0x100) {\n      note_descriptor[7] = return_address;\n      temp_value3 = return_address;\nLAB_001164af:\n      temp_value1 = temp_value7;\n      temp_value5 = temp_value7;\n      return_address = temp_value3;\n    }\n    else {\n      note_descriptor[7] = temp_value10;\nLAB_0011669e:\n      temp_value2 = temp_value6;\n      temp_value1 = temp_value6;\n    }\nLAB_001164bb:\n    note_descriptor[8] = temp_value1;\n    if (*(char *)((note_descriptor[3] - 1) + note_name) != '\\0') {\n      local_variable = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_descriptor_end = note_descriptor + 9;\n    if (0xb < remaining_notes_length) {\n      temp_value1 = (**(code **)(function_arguments[1] + 0x40))(local_variable);\n      *note_descriptor_end = temp_value1;\n      temp_value1 = (**(code **)(function_arguments[1] + 0x40))(local_variable + 4);\n      note_descriptor[10] = temp_value1;\n      note_size = (**(code **)(function_arguments[1] + 0x40))(local_variable + 8);\n      note_name = *note_descriptor_end;\n      note_descriptor[0xb] = note_size;\n      note_type = note_descriptor[10];\n      temp_value1 = note_name + 3 & 0xfffffffffffffffc;\n      note_descriptor[0xf] = temp_value1;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        local_variable = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_size - 0x100) {\n        local_variable = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp_value3 = temp_value1 + note_type + 0xc;\n      if (remaining_notes_length < temp_value3) {\n        local_variable = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_name < 2) {\n        local_variable = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      note_descriptor[0xc] = local_variable + 0xc;\n      note_description_length = local_variable + 0xc + temp_value1;\n      note_descriptor[0xd] = note_description_length;\n      remaining_notes_length = remaining_notes_length + (-0xc - (temp_value1 + note_type));\n      note_content = local_variable + temp_value3;\n      temp_value6 = temp_value2;\n      note_descriptor = note_descriptor_end;\n      temp_value7 = temp_value5;\n      if (note_name != 2) {\n        if (*(char *)(local_variable + 0xc) == '$') {\n          if ((*(char *)(local_variable + 0xd) == '\\x01') && (*(char *)(local_variable + 0xe) == '1')) {\n            temp_value2 = reconstruct_gnu_build_attribute_notes_00116490();\n            return temp_value2;\n          }\n        }\n        else if ((((4 < note_name) && (*(char *)(local_variable + 0xc) == 'G')) &&\n                 (*(char *)(local_variable + 0xd) == 'A')) &&\n                ((*(char *)(local_variable + 0xe) == '$' && (*(char *)(local_variable + 0xf) == '\\x01')))) {\n          if (*(char *)(local_variable + 0x10) == '2') {\n            temp_value2 = reconstruct_gnu_build_attribute_notes_00116490();\n            return temp_value2;\n          }\n          if (*(char *)(local_variable + 0x10) == '3') {\n            temp_value2 = reconstruct_gnu_build_attribute_notes_00116490();\n            return temp_value2;\n          }\n          local_variable = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_notes_length != 0) {\n      local_variable = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((additional_flag1 | additional_flag2 | temp_value9) == 0) {\n      result = *function_arguments;\n      temp_result = *additional_arguments;\n      temp_value = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(temp_value,result,temp_result);\nLAB_0011671b:\n      note_count = ((long)note_descriptor_end - (long)note_buffer_start >> 3) * -0x71c71c71c71c71c7;\n      qsort(note_buffer_start,note_count,0x48,compare_gnu_build_notes);\n      for (current_note = note_buffer_start; current_note < note_descriptor_end; current_note = current_note + 9) {\n        temp_value2 = current_note[2];\n        if (temp_value2 != 0) {\n          temp_value5 = current_note[7];\n          temp_value1 = current_note[8];\n          loop_pointer = current_note;\n          loop_variable2 = 0;\n          if (temp_value5 == temp_value1) {\n            current_note[2] = 0;\n          }\n          else {\n            do {\n              do {\n                temp_pointer = loop_pointer;\n                loop_pointer = temp_pointer + -9;\n                if (loop_pointer < note_buffer_start) goto LAB_001167f5;\n                temp_value3 = temp_pointer[-7];\n              } while (temp_value3 == 0);\n              if ((*loop_pointer != *current_note) ||\n                 (loop_variable = memcmp((void *)temp_pointer[-6],(void *)current_note[3],*current_note), loop_variable != 0))\n              break;\n              note_length = temp_pointer[-2];\n              temp_value4 = temp_pointer[-1];\n              if (temp_value5 == note_length) {\n                if (temp_value1 == temp_value4) {\n                  current_note[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp_value1 <= temp_value4) {\n                  current_note[2] = 0;\n                  break;\n                }\n                if (temp_value4 < temp_value5) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp_value4) ||\n                     (temp_value5 <= (temp_value4 + 0xf & 0xfffffffffffffff0))) goto process_notes_00116852;\n                }\nLAB_001167b8:\n                if ((temp_value2 == 0x101) == (temp_value3 == 0x101)) {\n                  if (temp_value4 <= temp_value1) {\n                    temp_value4 = temp_value1;\n                  }\n                  if (note_length < temp_value5) {\n                    temp_value5 = note_length;\n                  }\n                  temp_pointer[-1] = temp_value4;\n                  temp_pointer[-2] = temp_value5;\n                  current_note[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (note_length <= temp_value5) goto LAB_001167a6;\n                if (temp_value4 < temp_value5) goto LAB_0010852c;\n                if (temp_value1 < temp_value5) {\n                  if ((0xfffffffffffffff0 < temp_value1) || (note_length <= (temp_value1 + 0xf & 0xfffffffffffffff0)))\n                  goto process_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp_value1 != temp_value4) goto LAB_001167b8;\n              }\nprocess_notes_00116852:\n              is_match = loop_variable2 < 0x11;\n              loop_variable2 = loop_variable2 + 1;\n            } while (is_match);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(note_buffer_start,note_count,0x48,sort_gnu_build_notes);\n      allocated_memory = (undefined *)xmalloc(note_buffer_length * 2);\n      temp_value8 = 0;\n      temp_value10 = 0;\n      pointer2 = allocated_memory;\n      for (current_note = note_buffer_start; current_note < note_descriptor_end; current_note = current_note + 9) {\n        if (current_note[2] != 0) {\n          pointer1 = pointer2 + 4;\n          current_pointer = pointer2 + 0xc;\n          if ((current_note[7] == temp_value10) && (current_note[8] == temp_value8)) {\n            (**(code **)(function_arguments[1] + 0x50))(*current_note,pointer2);\n            (**(code **)(function_arguments[1] + 0x50))(0,pointer1);\n            (**(code **)(function_arguments[1] + 0x50))(current_note[2],pointer2 + 8);\n            temp_value5 = current_note[6];\n            temp_value2 = *current_note;\n            pointer2 = (undefined *)current_note[3];\n            pointer1 = current_pointer;\n            for (temp_value1 = temp_value2; temp_value1 != 0; temp_value1 = temp_value1 - 1) {\n              *pointer1 = *pointer2;\n              pointer2 = pointer2 + (ulong)byte_value * -2 + 1;\n              pointer1 = pointer1 + (ulong)byte_value * -2 + 1;\n            }\n            if (temp_value2 < temp_value5) {\n              for (local_variable = temp_value5 - temp_value2; local_variable != 0; local_variable = local_variable + -1) {\n                *pointer1 = 0;\n                pointer1 = pointer1 + (ulong)byte_value * -2 + 1;\n              }\n            }\n            pointer2 = current_pointer + temp_value5;\n          }\n          else {\n            (**(code **)(function_arguments[1] + 0x50))();\n            if (*(int *)(function_arguments[1] + 8) == 5) {\n              char_value = (*(char *)(function_arguments[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_value = '\\b';\n            }\n            (**(code **)(function_arguments[1] + 0x50))(char_value,pointer1);\n            (**(code **)(function_arguments[1] + 0x50))(current_note[2],pointer2 + 8);\n            temp_value2 = *current_note;\n            pointer2 = (undefined *)current_note[3];\n            pointer1 = current_pointer;\n            for (temp_value5 = temp_value2; temp_value5 != 0; temp_value5 = temp_value5 - 1) {\n              *pointer1 = *pointer2;\n              pointer2 = pointer2 + (ulong)byte_value * -2 + 1;\n              pointer1 = pointer1 + (ulong)byte_value * -2 + 1;\n            }\n            temp_value5 = current_note[6];\n            if (temp_value2 < temp_value5) {\n              for (local_variable = temp_value5 - temp_value2; local_variable != 0; local_variable = local_variable + -1) {\n                *pointer1 = 0;\n                pointer1 = pointer1 + (ulong)byte_value * -2 + 1;\n              }\n            }\n            local_variable = function_arguments[1];\n            current_pointer = current_pointer + temp_value5;\n            pointer2 = current_pointer + 8;\n            if ((*(int *)(local_variable + 8) == 5) && (*(char *)(function_arguments[0x22] + 4) == '\\x02')) {\n              (**(code **)(local_variable + 0x38))(current_note[7],current_pointer);\n              (**(code **)(function_arguments[1] + 0x38))(current_note[8],pointer2);\n              pointer2 = current_pointer + 0x10;\n            }\n            else {\n              (**(code **)(local_variable + 0x50))(current_note[7],current_pointer);\n              (**(code **)(function_arguments[1] + 0x50))(current_note[8],current_pointer + 4);\n            }\n            temp_value10 = current_note[7];\n            temp_value8 = current_note[8];\n          }\n        }\n      }\n      temp_value5 = (long)pointer2 - (long)allocated_memory;\n      temp_value2 = temp_value5;\n      pointer2 = allocated_memory;\n      if (temp_value5 < note_buffer_length) {\n        for (; note_buffer_length = temp_value5, temp_value2 != 0; temp_value2 = temp_value2 - 1) {\n          *pointer_to_note_buffer = *pointer2;\n          pointer2 = pointer2 + (ulong)byte_value * -2 + 1;\n          pointer_to_note_buffer = pointer_to_note_buffer + (ulong)byte_value * -2 + 1;\n        }\n      }\n      free(allocated_memory);\nLAB_001166f8:\n      free(note_buffer_start);\n      return note_buffer_length;\n    }\n    if (((additional_flag2 | temp_value9) == 0) || (additional_flag1 == 0)) {\n      if (additional_flag2 == 0) {\n        if (temp_value9 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (temp_value9 == 0) goto LAB_001166f8;\n    }\n    local_variable = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      temp_value3 = (**(code **)(function_arguments[1] + 0x28))(note_description_length);\n      temp_value1 = (**(code **)(function_arguments[1] + 0x28))(note_descriptor[4] + 8);\n      if (temp_value1 < temp_value3) {\n        temp_value3 = temp_value1;\n      }\nLAB_00116631:\n      if (note_descriptor[2] == 0x100) {\n        if (temp_value3 == 0) {\n          temp_value3 = return_address;\n        }\n        note_name = *note_descriptor;\n        note_descriptor[7] = temp_value3;\n        temp_value5 = temp_value1;\n        return_address = temp_value3;\n        if (temp_value1 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_value3 == 0) {\n          temp_value3 = temp_value10;\n        }\n        note_name = *note_descriptor;\n        note_descriptor[7] = temp_value3;\n        temp_value2 = temp_value1;\n        temp_value10 = temp_value3;\n        if (temp_value1 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        temp_value3 = (**(code **)(function_arguments[1] + 0x40))(note_description_length);\n        temp_value1 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        temp_value2 = FUNC_001086af();\n        return temp_value2;\n      }\n    }\n    local_variable = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (local_variable != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,function_arguments,additional_arguments,local_variable);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "reconstruct_gnu_build_attribute_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "output_file",
                "lVar1": "target_entry",
                "pcVar2": "target_message",
                "__ptr": "target_list",
                "plVar3": "target_ptr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *output_file)\n\n{\n  long target_entry;\n  char *target_message;\n  long *target_list;\n  long *target_ptr;\n  \n  if (target == 0) {\n    target_message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(output_file,target_message);\n  }\n  else {\n    target_message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(output_file,target_message,target);\n  }\n  target_list = (long *)bfd_target_list();\n  target_ptr = target_list;\n  while( true ) {\n    target_entry = *target_ptr;\n    target_ptr = target_ptr + 1;\n    if (target_entry == 0) break;\n    fprintf(output_file,\" %s\");\n  }\n  fputc(10,output_file);\n  free(target_list);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "copy_usage",
                "strip_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionData",
                "param_2": "debugMessage",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "blockData",
                "uVar2": "translatedMessage",
                "pcVar3": "errorMessage",
                "auVar4": "returnData"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionData,undefined8 debugMessage,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long blockData;\n  undefined8 translatedMessage;\n  char *errorMessage;\n  undefined returnData [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (blockData = *(long *)(functionData + 0x20), blockData == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockData + 8) == 0) {\n      *(undefined8 *)(blockData + 0x20) = debugMessage;\n      translatedMessage = CONCAT71((int7)((ulong)blockData >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  translatedMessage = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",translatedMessage);\n  translatedMessage = 0;\nLAB_0010be86:\n  returnData._8_8_ = returnValue;\n  returnData._0_8_ = translatedMessage;\n  return returnData;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_modify_type",
                "display_info.isra.0",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_qualified",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "setup_section",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "parse_flags.cold",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "display_info.isra.0.cold",
                "is_dwo_section.constprop.0",
                "stab_typed_constant.lto_priv.0",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "FUN_0010554f",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "start_stab.constprop.0",
                "debug_make_struct_type.isra.0",
                "display_info.isra.0",
                "stab_record_variable",
                "stab_class_start_method.lto_priv.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "section_add_load_file",
                "debug_make_type.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "savestring",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "debug_make_enum_type.isra.0",
                "stab_find_tagged_type",
                "template_in_dir",
                "bfd_get_archive_filename",
                "FUN_0010554f",
                "add_redefine_and_check",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "debug_add_to_namespace.constprop.0",
                "stab_modify_type",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "debug_make_indirect_type.isra.0",
                "stab_push_string",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "debug_tag_type",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "debug_make_array_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_struct_field.lto_priv.0",
                "add_specific_symbols",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "debug_make_method_type.isra.0",
                "init_section_add",
                "merge_gnu_build_notes",
                "stab_start_struct_type.lto_priv.0",
                "parse_flags.cold",
                "debug_make_offset_type.isra.0",
                "debug_set_class_id.lto_priv.0",
                "debug_start_block",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_variable.lto_priv.0",
                "debug_set_filename",
                "stab_float_constant.lto_priv.0",
                "debug_record_line",
                "stab_offset_type.lto_priv.0",
                "xstrndup",
                "debug_make_function_type.isra.0",
                "debug_start_source",
                "convert_efi_target",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_block_00113da9",
                "param_1": "byteSize",
                "param_2": "param2",
                "param_3": "initialValue",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "lVar2": "loopCounter",
                "puVar3": "currentPointer",
                "bVar4": "byteCounter",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeMemoryBlock_00113da9(byte byteSize,undefined8 param2,undefined8 initialValue,undefined8 param4)\n\n{\n  undefined8 *memoryBlock;\n  long loopCounter;\n  undefined8 *currentPointer;\n  byte byteCounter;\n  undefined result [16];\n  \n  byteCounter = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byteSize);\n  if (result._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    currentPointer = memoryBlock + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)byteCounter * -8 + 4);\n    }\n    *memoryBlock = initialValue;\n    *(undefined8 **)(result._0_8_ + 0x10) = memoryBlock;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record_1",
                "param_2": "record_2",
                "uVar1": "record_1_id",
                "param_2[7]": "record_2_size",
                "param_2[8]": "record_2_offset"
            },
            "code": "\nint compare_records_0011a250(ulong *record_1,ulong *record_2)\n\n{\n  ulong record_1_id;\n  \n  record_1_id = record_1[2];\n  if (record_1_id == record_2[2]) {\n    if (record_2_size <= record_1[7]) {\n      if (record_1[7] <= record_2_size) {\n        if (record_2_offset < record_1[8]) {\n          return -1;\n        }\n        if (record_2_offset <= record_1[8]) {\n          if ((4 < *record_1) && (4 < *record_2)) {\n            if (*(char *)(record_1[3] + 3) != *(char *)(record_2[3] + 3)) {\n              return (int)*(char *)(record_1[3] + 3) - (int)*(char *)(record_2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record_1_id == 0) || ((record_1_id != 0x100 && (record_2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "format_and_push_data_0010a69a",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "structFlag",
                "param_4": "charFlag",
                "param_5": "uintValue",
                "uVar1": "result",
                "lVar2": "structIndex",
                "sVar3": "strLength",
                "uVar4": "memAllocation",
                "uVar5": "flag",
                "local_60": "formattedStr"
            },
            "code": "\nundefined4 formatAndPushData_0010a69a(long dataPtr,undefined8 paramPtr,int structFlag,char charFlag,uint uintValue)\n\n{\n  undefined4 result;\n  long structIndex;\n  size_t strLength;\n  undefined8 memAllocation;\n  undefined flag;\n  char formattedStr [48];\n  \n  if (structFlag == 0) {\n    formattedStr[0] = '\\0';\n    flag = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    flag = 1;\n    sprintf(formattedStr,\"%ld=\",structIndex);\n  }\n  strLength = strlen(formattedStr);\n  sprintf(formattedStr + strLength,\"%c%u\",(ulong)((-(uint)(charFlag == '\\0') & 2) + 0x73),(ulong)uintValue);\n  result = stab_push_string(dataPtr,formattedStr,structIndex,flag,uintValue);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(dataPtr + 0x60);\n  memAllocation = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = memAllocation;\n  **(undefined **)(*(long *)(dataPtr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_data_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "stab_end_class_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "find_and_handle_sections_00115b70",
                "param_1": "args",
                "pcVar1": "section_name",
                "iVar2": "comparison",
                "iVar3": "strip_option",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "uVar6": "result",
                "plVar7": "update_sections"
            },
            "code": "\nundefined8 find_and_handle_sections_00115b70(char **args)\n\n{\n  char *section_name;\n  int comparison;\n  int strip_option;\n  long section_list_1;\n  long section_list_2;\n  undefined8 result;\n  long *update_sections;\n  \n  section_list_1 = find_section_list(*args,0,4);\n  if (section_list_1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_1 = find_section_list(*args,0,1);\n      section_list_2 = find_section_list(*args,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          section_name = *args;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,section_name);\n        }\n        if (section_list_1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          section_name = *args;\n          update_sections = update_sections;\n          do {\n            strip_option = strcmp(section_name,(char *)update_sections[1]);\n            if (strip_option == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,section_name);\n            }\n            update_sections = (long *)*update_sections;\n          } while (update_sections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    strip_option = strip_symbols;\n    if ((*(byte *)((long)args + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        section_name = *args;\n        comparison = strcmp(section_name,\".gnu_debugaltlink\");\n        if ((comparison != 0) && (comparison = strcmp(section_name,\".gnu_debuglink\"), comparison != 0)) {\n          strip_option = strcmp(section_name,\".reloc\");\n          if (strip_option != 0) {\n            return 1;\n          }\n          result = handle_dwo_section_0010829e();\n          return result;\n        }\n      }\n      if (strip_option == 5) {\n        result = is_dwo_section_constprop_0(args);\n        return result;\n      }\n      if (strip_option == 4) {\n        return 0;\n      }\n    }\n    if (strip_option == 6) {\n      result = check_dwo_section_constprop_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "find_section_list",
                "dcgettext",
                "FUN_0010829e",
                "fatal",
                "strcmp",
                "is_strip_section_1.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "find_and_handle_sections_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_00116b40",
                "completed_0": "isInitialized"
            },
            "code": "\nvoid initialize_00116b40(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "update_relocation_flags_00116030",
                "param_1": "param_list",
                "param_2": "param_addr",
                "plVar1": "ptr_elem",
                "lVar2": "value",
                "lVar3": "data_1",
                "lVar4": "data_2",
                "iVar5": "error",
                "in_RAX": "result",
                "lVar6": "upper_bound",
                "__ptr": "buffer",
                "lVar7": "result_code",
                "extraout_RAX": "extra_result",
                "lVar8": "counter",
                "uStack_28": "stack_var"
            },
            "code": "\n\n\nundefined8 updateRelocationFlags_00116030(undefined8 *param_list,long param_addr)\n\n{\n  long *ptr_elem;\n  long value;\n  long data_1;\n  long data_2;\n  int error;\n  undefined8 result;\n  long upper_bound;\n  void *buffer;\n  long result_code;\n  undefined8 extra_result;\n  long counter;\n  undefined8 stack_var;\n  \n  if (*(long *)(param_addr + 0x60) == 0) {\n    return result;\n  }\n  upper_bound = bfd_get_reloc_upper_bound();\n  if (upper_bound < 0) {\n    if ((upper_bound != -1) || (error = bfd_get_error(), error != 5)) {\n      bfd_nonfatal(*param_list);\n                    \n      xexit(1);\n    }\n  }\n  else if (upper_bound != 0) {\n    buffer = (void *)xmalloc();\n    result_code = bfd_canonicalize_reloc(param_list,param_addr,buffer);\n    data_2 = _DAT_00128680;\n    data_1 = _DAT_00128568;\n    upper_bound = _fwrite;\n    if (result_code < 0) {\n      bfd_nonfatal(*param_list);\n                    \n      xexit(1);\n    }\n    if (result_code != 0) {\n      counter = 0;\n      do {\n        ptr_elem = **(long ***)((long)buffer + counter * 8);\n        if ((((ptr_elem != (long *)0x0) && (value = *ptr_elem, value != 0)) && (value != upper_bound)) &&\n           ((value != data_2 && (value != data_1)))) {\n          *(uint *)(value + 0x18) = *(uint *)(value + 0x18) | 0x20;\n        }\n        counter = counter + 1;\n      } while (result_code != counter);\n    }\n    free(buffer);\n    return extra_result;\n  }\n  return stack_var;\n}\n\n",
            "called": [
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "mark_symbols_used_in_relocations.cold",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_relocation_flags_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_if_string_ends_with_00113ede",
                "param_1": "string_array",
                "__s": "input_string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_if_string_ends_with_00113ede(char **string_array)\n\n{\n  char *input_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  input_string = *string_array;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(input_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_if_string_ends_with_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_values_0010875d",
                "param_1": "values1",
                "param_2": "values2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareValues_0010875d(long *values1,long *values2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *values1;\n  value2 = *values2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_values_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "display_info.isra.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "copy_object.cold",
                "save_stab",
                "stab_class_baseclass.lto_priv.0",
                "free_saved_stabs",
                "stab_int_constant.lto_priv.0",
                "list_supported_targets",
                "stab_class_method_var",
                "stab_demangle_qualified",
                "list_matching_formats",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_find_tagged_type",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_modify_type",
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_demangle_template",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_struct_field.lto_priv.0",
                "parse_stab_type",
                "FUN_00108466",
                "stab_pop_type",
                "merge_gnu_build_notes",
                "make_tempdir.cold",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_emit_pending_vars",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "init_section_add",
                "main",
                "parse_stab",
                "parse_flags.cold",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_types_0010c892",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "emitPendingVarsResult",
                "lVar2": "typeResult",
                "lVar3": "tagTypeResult",
                "uVar4": "errorMessage",
                "puVar5": "currentElement",
                "iVar6": "kind",
                "_stderr": "errorOutput"
            },
            "code": "\n\n\nundefined8 processDebugTypes_0010c892(undefined8 param1,long param2)\n\n{\n  char emitPendingVarsResult;\n  long typeResult;\n  long tagTypeResult;\n  undefined8 errorMessage;\n  undefined8 *currentElement;\n  int kind;\n  \n  if (*(char *)(param2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (currentElement = *(undefined8 **)(param2 + 0x1a0); currentElement != (undefined8 *)0x0;\n        currentElement = (undefined8 *)*currentElement) {\n      kind = *(int *)(currentElement + 2);\n      tagTypeResult = currentElement[1];\n      if (kind != 0) {\n        if (tagTypeResult != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          errorMessage = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(errorOutput,\"%s\\n\",errorMessage);\n        }\nLAB_0010c910:\n        currentElement[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagTypeResult == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      typeResult = debug_make_type_constprop_0(kind,0);\n      if (typeResult == 0) goto LAB_0010c910;\n      tagTypeResult = debug_tag_type(param1,tagTypeResult,typeResult);\n      currentElement[3] = tagTypeResult;\n      if (tagTypeResult == 0) goto LAB_0010c916;\n    }\n    errorMessage = 1;\n  }\n  else {\n    emitPendingVarsResult = stab_emit_pending_vars();\n    if (emitPendingVarsResult != '\\0') {\n      emitPendingVarsResult = debug_end_function(param1,*(undefined8 *)(param2 + 0x68));\n      if (emitPendingVarsResult != '\\0') {\n        *(undefined *)(param2 + 0x60) = 0;\n        *(undefined8 *)(param2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    errorMessage = 0;\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "stab_emit_pending_vars",
                "debug_end_function",
                "dcgettext",
                "debug_tag_type",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_types_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "allocate_memory_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid allocateMemory_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = input1;\n  allocatedMemory[1] = input2;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "debug_make_struct_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "debug_tag_type",
                "debug_make_enum_type.isra.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "debug_make_float_type.isra.0",
                "finish_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "allocate_memory_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_exit_functions_0011a390",
                "plVar4": "exitFunctionList",
                "uVar5": "index",
                "lVar1": "count",
                "lVar2": "i",
                "lVar3": "j"
            },
            "code": "\nvoid executeExitFunctions_0011a390(void)\n\n{\n  long count;\n  long i;\n  long j;\n  long *exitFunctionList;\n  uint index;\n  \n  exitFunctionList = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      index = *(int *)(exitFunctionList + 1) - 1;\n      if (-1 < (int)index) {\n        count = (long)(int)index;\n        index = index & 7;\n        (*(code *)exitFunctionList[count + 2])();\n        i = count + -1;\n        if (-1 < (int)i) {\n          j = i;\n          if (index != 0) {\n            if (index != 1) {\n              if (index != 2) {\n                if (index != 3) {\n                  if (index != 4) {\n                    if (index != 5) {\n                      if (index != 6) {\n                        (*(code *)exitFunctionList[count + 1])();\n                        i = count + -2;\n                      }\n                      (*(code *)exitFunctionList[i + 2])();\n                      i = i + -1;\n                    }\n                    (*(code *)exitFunctionList[i + 2])();\n                    i = i + -1;\n                  }\n                  (*(code *)exitFunctionList[i + 2])();\n                  i = i + -1;\n                }\n                (*(code *)exitFunctionList[i + 2])();\n                i = i + -1;\n              }\n              (*(code *)exitFunctionList[i + 2])();\n              i = i + -1;\n            }\n            (*(code *)exitFunctionList[i + 2])();\n            j = i + -1;\n            if ((int)(i + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)exitFunctionList[j + 2])();\n            count = j + -1;\n            (*(code *)exitFunctionList[j + 1])();\n            (*(code *)exitFunctionList[j])();\n            (*(code *)exitFunctionList[count])();\n            (*(code *)exitFunctionList[j + -2])();\n            (*(code *)exitFunctionList[j + -3])();\n            (*(code *)exitFunctionList[j + -4])();\n            (*(code *)exitFunctionList[j + -5])();\n            j = j + -8;\n          } while (-1 < (int)count + -7);\n        }\n      }\nLAB_0011a466:\n      exitFunctionList = (long *)*exitFunctionList;\n    } while (exitFunctionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "do_display_target",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "generate_stab_symbol_0010e842",
                "param_1": "param1",
                "param_2": "inputString",
                "param_3": "count",
                "param_4": "data",
                "sVar1": "stringLength",
                "__s": "newString",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] generateStabSymbol_0010e842(undefined8 param1,char *inputString,undefined8 count,undefined8 data)\n\n{\n  size_t stringLength;\n  char *newString;\n  undefined result [16];\n  \n  stringLength = strlen(inputString);\n  newString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(newString,\"%s:c=i%ld\",inputString,count);\n  result._0_4_ = stab_write_symbol_lto_priv_0(param1,0x80,0,0,newString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(newString);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_symbol_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_debug_type_00113cb9",
                "param_1": "inputParam",
                "lVar1": "debugType"
            },
            "code": "\nlong initializeDebugType_00113cb9(long inputParam)\n\n{\n  long debugType;\n  \n  if (inputParam != 0) {\n    debugType = debug_make_type_constprop_0(0xe,0);\n    if (debugType == 0) {\n      debugType = 0;\n    }\n    else {\n      *(long *)(debugType + 0x10) = inputParam;\n    }\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_symbol_0010eafe",
                "param_1": "symbolData",
                "param_2": "filename",
                "param_3": "flag",
                "__s": "type",
                "sVar2": "filenameLength",
                "sVar3": "typeLength",
                "__s_00": "formattedSymbol",
                "uVar1": "result"
            },
            "code": "\nundefined4 processSymbol_0010eafe(long symbolData,char *filename,char flag)\n\n{\n  undefined4 result;\n  char *type;\n  size_t filenameLength;\n  size_t typeLength;\n  char *formattedSymbol;\n  \n  if ((*(int *)(symbolData + 0x1f8) == 0) && (*(long *)(symbolData + 0x1e8) == -1)) {\n    type = (char *)stab_pop_type();\n    filenameLength = strlen(filename);\n    typeLength = strlen(type);\n    formattedSymbol = (char *)xmalloc(filenameLength + 3 + typeLength);\n    sprintf(formattedSymbol,\"%s:%c%s\",filename,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),type);\n    *(undefined8 *)(symbolData + 0x1e8) = *(undefined8 *)(symbolData + 0x10);\n    result = stab_write_symbol_lto_priv_0(symbolData,0x24,0,0,formattedSymbol);\n    if ((char)result != '\\0') {\n      free(formattedSymbol);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_symbol_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "value"
            },
            "code": "\nvoid initializeDebugType_00113df2(undefined4 value)\n\n{\n  debug_make_type_constprop_0(4,value);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "copy_usage",
                "strip_usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "process_stab_pop_string_0010a377",
                "param_1": "inputPtr",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "resultString",
                "uVar5": "useFlag",
                "uVar2": "returnValue"
            },
            "code": "\nundefined4 processStabPopString_0010a377(long inputPtr)\n\n{\n  char flag;\n  undefined4 returnValue;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  undefined useFlag;\n  \n  useFlag = 1;\n  flag = *(char *)(*(long *)(inputPtr + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  if (flag == '\\0') {\n    useFlag = *(undefined *)(*(long *)(inputPtr + 0x60) + 0x1c);\n  }\n  string2 = (char *)stab_pop_type(inputPtr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  resultString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(resultString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  returnValue = stab_push_string(inputPtr,resultString,0,useFlag,0);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_stab_pop_string_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "extract_arguments_0010d882",
                "param_1": "input",
                "param_2": "argPtr",
                "param_3": "outputPtr",
                "param_4": "flagPtr",
                "iVar1": "iterationCount",
                "pcVar2": "currentArg",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentPtr",
                "uVar6": "count",
                "bVar7": "isNotEmpty",
                "local_50": "argIndex",
                "local_4c": "baseCount",
                "local_48": "argCount",
                "local_44": "typeFlag",
                "local_40": "tempMemory"
            },
            "code": "\nundefined8 extractArguments_0010d882(long input,char **argPtr,long *outputPtr,undefined *flagPtr)\n\n{\n  int iterationCount;\n  char *currentArg;\n  char currentChar;\n  long allocatedMemory;\n  char *currentPtr;\n  ulong count;\n  bool isNotEmpty;\n  uint argIndex;\n  undefined4 baseCount;\n  uint argCount;\n  int typeFlag;\n  undefined8 tempMemory [2];\n  \n  currentArg = *argPtr;\n  baseCount = 10;\n  if (outputPtr != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *outputPtr = allocatedMemory;\n    *flagPtr = 0;\n  }\n  argIndex = 0;\n  while( true ) {\n    currentPtr = *argPtr;\n    currentChar = *currentPtr;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *argPtr = currentPtr + 1;\n      if (currentChar == 'T') {\n        typeFlag = 1;\n      }\n      else {\n        currentChar = stab_demangle_get_count(argPtr,&typeFlag);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = stab_demangle_get_count(argPtr,&argCount);\n      if ((currentChar == '\\0') || (*(uint *)(input + 0x28) <= argCount)) {\nLAB_0010d958:\n        stab_bad_demangle(currentArg);\n        return 0;\n      }\n      count = (ulong)argCount;\n      while (iterationCount = typeFlag + -1, isNotEmpty = typeFlag != 0, typeFlag = iterationCount, isNotEmpty) {\n        tempMemory[0] = *(undefined8 *)(*(long *)(input + 0x20) + count * 0x10);\n        currentChar = stab_demangle_arg(input,tempMemory,outputPtr,&argIndex,&baseCount);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = stab_demangle_arg(input,argPtr,outputPtr,&argIndex,&baseCount);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputPtr == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputPtr + (ulong)argIndex * 8) = 0;\n    if (*currentPtr != 'e') goto LAB_0010d9fa;\n    *flagPtr = 1;\n  }\n  currentPtr = currentPtr + 1;\n  *argPtr = currentPtr;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentPtr >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_arg",
                "xmalloc",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_arguments_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_data_structure_00112925",
                "param_1": "dataStructure",
                "param_2": "paramValue1",
                "param_3": "paramValue2",
                "param_4": "paramValue3",
                "puVar1": "dataArray",
                "pauVar2": "existingArray",
                "lVar3": "loopCounter",
                "puVar4": "currentElement",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeDataStructure_00112925(undefined (**dataStructure) [16],undefined8 paramValue1,undefined4 paramValue2,undefined4 paramValue3)\n\n{\n  undefined4 *dataArray;\n  undefined (*existingArray) [16];\n  long loopCounter;\n  undefined4 *currentElement;\n  byte byteValue;\n  \n  byteValue = 0;\n  dataArray = (undefined4 *)xmalloc(0x28);\n  currentElement = dataArray;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentElement = 0;\n    currentElement = currentElement + (ulong)byteValue * -2 + 1;\n  }\n  existingArray = *dataStructure;\n  *(undefined8 *)(dataArray + 2) = paramValue1;\n  dataArray[5] = paramValue2;\n  dataArray[6] = paramValue3;\n  if (existingArray == (undefined (*) [16])0x0) {\n    existingArray = (undefined (*) [16])xmalloc(0x10);\n    *existingArray = ZEXT816(0);\n    *dataStructure = existingArray;\n    *(undefined (**) [16])(*existingArray + 8) = existingArray;\n  }\n  **(undefined8 **)(*existingArray + 8) = dataArray;\n  *(undefined4 **)(*existingArray + 8) = dataArray;\n  return dataArray;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_record_function",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_name_type",
                "debug_tag_type"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_in_debug_0010bf86",
                "param_1": "debugContext",
                "param_2": "lineNumber",
                "param_3": "functionName",
                "uVar1": "errorMessage",
                "puVar2": "currentRecord",
                "uVar3": "recordIndex",
                "puVar4": "newRecord",
                "lVar5": "loopCounter",
                "puVar6": "recordPointer",
                "bVar7": "iterationFlag",
                "_stderr": "stderr"
            },
            "code": "\n\n\nundefined8 recordLineInDebug_0010bf86(long debugContext,undefined8 lineNumber,undefined8 functionName)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentRecord;\n  ulong recordIndex;\n  undefined4 *newRecord;\n  long loopCounter;\n  undefined4 *recordPointer;\n  byte iterationFlag;\n  \n  iterationFlag = 0;\n  if (*(long *)(debugContext + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopCounter = *(long *)(debugContext + 0x28);\n    if ((loopCounter != 0) && (*(long *)(loopCounter + 8) == *(long *)(debugContext + 0x10))) {\n      recordIndex = 0;\n      do {\n        if (*(long *)(loopCounter + 0x10 + recordIndex * 8) == -1) {\n          currentRecord = (undefined8 *)(recordIndex & 0xffffffff);\n          *(undefined8 *)(loopCounter + 0x10 + (long)currentRecord * 8) = lineNumber;\n          *(undefined8 *)(loopCounter + 0x60 + (long)currentRecord * 8) = functionName;\n          goto LAB_0010c056;\n        }\n        recordIndex = recordIndex + 1;\n      } while (recordIndex != 10);\n    }\n    newRecord = (undefined4 *)xmalloc(0xb0);\n    recordPointer = newRecord;\n    for (loopCounter = 0x2c; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *recordPointer = 0;\n      recordPointer = recordPointer + (ulong)iterationFlag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(debugContext + 0x10);\n    *(undefined8 *)(newRecord + 4) = lineNumber;\n    *(undefined8 *)(newRecord + 2) = errorMessage;\n    *(undefined8 *)(newRecord + 0x18) = functionName;\n    recordPointer = newRecord + 6;\n    for (loopCounter = 0x48; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined *)recordPointer = 0xff;\n      recordPointer = (undefined4 *)((long)recordPointer + (ulong)iterationFlag * -2 + 1);\n    }\n    currentRecord = *(undefined8 **)(debugContext + 0x28);\n    if (currentRecord == (undefined8 *)0x0) {\n      currentRecord = *(undefined8 **)(debugContext + 8);\n      currentRecord[2] = newRecord;\n    }\n    else {\n      *currentRecord = newRecord;\n    }\n    *(undefined4 **)(debugContext + 0x28) = newRecord;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentRecord >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_in_debug_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "patternPtr",
                "param_2": "stringPtr",
                "__pattern": "pattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **patternPtr,char **stringPtr)\n\n{\n  char *pattern;\n  int matchResult;\n  \n  pattern = *patternPtr;\n  if (*pattern == '!') {\n    matchResult = fnmatch(pattern + 1,*stringPtr,0);\n    if (matchResult == 0) {\n      *(undefined *)(stringPtr + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(pattern,*stringPtr,0);\n    if (matchResult == 0) {\n      *(undefined *)(stringPtr + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "debug_record_parameter_0010bd62",
                "param_1": "function_info",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "param_5": "param_5_value",
                "puVar1": "current_ptr",
                "uVar2": "error_message",
                "puVar3": "allocated_ptr",
                "puVar4": "temp_ptr",
                "lVar5": "loop_counter",
                "puVar6": "prev_ptr",
                "puVar7": "allocated_ptr_temp",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\ndebug_record_parameter_0010bd62(long function_info,long param_2_value,long param_3_value,undefined4 param_4_value,undefined8 param_5_value)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *allocated_ptr;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  undefined8 *prev_ptr;\n  undefined4 *allocated_ptr_temp;\n  byte flag;\n  \n  flag = 0;\n  if (param_2_value == 0) {\n    return 0;\n  }\n  if (param_3_value != 0) {\n    if ((*(long *)(function_info + 8) != 0) && (*(long *)(function_info + 0x18) != 0)) {\n      allocated_ptr = (undefined4 *)xmalloc(0x28);\n      allocated_ptr_temp = allocated_ptr;\n      for (loop_counter = 10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *allocated_ptr_temp = 0;\n        allocated_ptr_temp = allocated_ptr_temp + (ulong)flag * -2 + 1;\n      }\n      loop_counter = *(long *)(function_info + 0x18);\n      *(long *)(allocated_ptr + 2) = param_2_value;\n      *(long *)(allocated_ptr + 4) = param_3_value;\n      allocated_ptr[6] = param_4_value;\n      current_ptr = *(undefined8 **)(loop_counter + 8);\n      *(undefined8 *)(allocated_ptr + 8) = param_5_value;\n      prev_ptr = (undefined8 *)(loop_counter + 8);\n      while (temp_ptr = current_ptr, temp_ptr != (undefined8 *)0x0) {\n        prev_ptr = temp_ptr;\n        current_ptr = (undefined8 *)*temp_ptr;\n      }\n      *prev_ptr = allocated_ptr;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "debug_record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_member_00104ea2",
                "param_9": "tempDirectoryName",
                "param_10": "archiveFileName",
                "param_11": "openMode",
                "unaff_R12": "archiveMemberPath",
                "unaff_R13": "archiveMemberInfo",
                "unaff_R15": "bfdHandler",
                "unaff_retaddr": "returnAddress",
                "param_7": "tempFileNames",
                "param_8": "bfdReadWrites",
                "param_19": "archiveMemberSize",
                "preserve_dates": "preserveDates",
                "unaff_EBX": "internalStatError",
                "unaff_RBP": "statResult",
                "status": "exitStatus",
                "ppcVar6": "bfdObjectHandler",
                "cVar1": "copyResult",
                "iVar2": "architectureType",
                "pcVar7": "currentChar",
                "pvVar4": "buffer",
                "lVar5": "readWriteSize",
                "lVar12": "remainingSize",
                "pcVar10": "archiveMember",
                "uVar11": "errorMessage",
                "pcVar13": "bfdCloseFunction",
                "lVar14": "tempSize",
                "bVar17": "loopVariable"
            },
            "code": "\nvoid copyArchiveMember_00104ea2(void)\n\n{\n  char copyResult;\n  int architectureType;\n  char **ppcVar3;\n  void *buffer;\n  long readWriteSize;\n  char **bfdObjectHandler;\n  char *currentChar;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *archiveMember;\n  undefined8 errorMessage;\n  long remainingSize;\n  code *bfdCloseFunction;\n  long tempSize;\n  int internalStatError;\n  stat *statResult;\n  char *pcopyResult5;\n  stat *psVar16;\n  char *archiveMemberPath;\n  undefined8 *archiveMemberInfo;\n  char **bfdHandler;\n  byte loopVariable;\n  undefined8 returnAddress;\n  undefined8 *tempFileNames;\n  long *bfdReadWrites;\n  char *tempDirectoryName;\n  undefined8 *archiveFileName;\n  undefined8 openMode;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long archiveMemberSize;\n  \n  loopVariable = 0;\ncode_r0x00104ea2:\n  bfdObjectHandler = (char **)bfd_openw(archiveMemberPath,openMode);\n  if (bfdObjectHandler == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(archiveMemberPath,0,0,0);\nLAB_00104e93:\n    exitStatus = 1;\n  }\n  else {\nLAB_00114a5f:\n    copyResult = copy_object(bfdHandler,bfdObjectHandler,returnAddress);\n    if (copyResult == '\\0') {\n      architectureType = bfd_get_arch(bfdHandler);\n      if (architectureType == 0) goto LAB_00104d75;\n      copyResult = bfd_close_all_done(bfdObjectHandler);\n      if (copyResult != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(archiveMemberPath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    copyResult = bfd_close(bfdObjectHandler);\n    bfdObjectHandler = bfdHandler;\n    if (copyResult == '\\0') {\n      bfd_nonfatal_message(archiveMemberPath,0,0,0);\n      exitStatus = 1;\n    }\nLAB_00114a86:\n    if ((preserveDates != '\\0') && (internalStatError == 0)) {\n      set_times(archiveMemberPath,statResult);\n    }\n    remainingSize = bfd_openr(archiveMemberPath,openMode);\n    archiveMemberInfo[2] = remainingSize;\n    *bfdReadWrites = remainingSize;\n    bfdReadWrites = (long *)(remainingSize + 0xf0);\n    bfdHandler = (char **)bfd_openr_next_archived_file(archiveFileName,bfdObjectHandler);\n    bfd_close(bfdObjectHandler);\n    while ((exitStatus == 0 && (bfdHandler != (char **)0x0))) {\n      archiveMember = *bfdHandler;\n      currentChar = archiveMember;\n      if (*archiveMember == '/') {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorMessage,archiveMember);\n        goto LAB_00104e93;\n      }\n      while (*currentChar != '\\0') {\n        pcopyResult5 = currentChar;\n        if ((*currentChar == '.') && (pcopyResult5 = currentChar + 1, currentChar[1] == '.')) {\n          pcopyResult5 = currentChar + 2;\n          if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcopyResult5 != '\\0' && (*pcopyResult5 != '/')); pcopyResult5 = pcopyResult5 + 1) {\n        }\n        currentChar = pcopyResult5;\n        if (*pcopyResult5 == '/') {\n          extract_and_copy_archive_member_001052a2();\n          return;\n        }\n      }\n      statResult = (stat *)&stack0x00000050;\n      archiveMemberPath = (char *)concat(tempDirectoryName,&DAT_0011b47d);\n      architectureType = stat(archiveMemberPath,statResult);\n      puVar8 = archiveMemberInfo;\n      if (-1 < architectureType) {\n        remainingSize = make_tempdir(archiveMemberPath);\n        free(archiveMemberPath);\n        if (remainingSize == 0) {\n          piVar9 = __errno_location();\n          archiveMember = strerror(*piVar9);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorMessage,archiveMember);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        archiveMember = *bfdHandler;\n        *puVar8 = archiveMemberInfo;\n        puVar8[2] = 0;\n        puVar8[1] = remainingSize;\n        archiveMemberPath = (char *)concat(remainingSize,&DAT_0011b47d,archiveMember);\n      }\n      internalStatError = 0;\n      if (preserveDates != '\\0') {\n        psVar16 = statResult;\n        for (remainingSize = 0x24; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)loopVariable * -8 + 4);\n        }\n        bfdObjectHandler = (char **)bfdHandler[0x1d];\n        if ((char **)bfdHandler[0x1d] == (char **)0x0) {\n          bfdObjectHandler = bfdHandler;\n        }\n        internalStatError = (**(code **)(bfdObjectHandler[1] + 0x1e8))(bfdHandler,statResult);\n        if (internalStatError != 0) {\n          archiveMember = *bfdHandler;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorMessage,archiveMember);\n        }\n      }\n      archiveMemberInfo = (undefined8 *)xmalloc(0x18);\n      archiveMemberInfo[1] = archiveMemberPath;\n      *archiveMemberInfo = puVar8;\n      archiveMemberInfo[2] = 0;\n      copyResult = bfd_check_format(bfdHandler,1);\n      if (copyResult != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        bfdObjectHandler = (char **)bfd_openw(archiveMemberPath,*(undefined8 *)bfdHandler[1]);\n        if (bfdObjectHandler == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,bfdHandler,0,errorMessage);\n      bfdObjectHandler = (char **)bfd_openw(archiveMemberPath,openMode);\n      if (bfdObjectHandler == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)bfdHandler[0x1d];\n      if ((char **)bfdHandler[0x1d] == (char **)0x0) {\n        ppcVar3 = bfdHandler;\n      }\n      architectureType = (**(code **)(ppcVar3[1] + 0x1e8))(bfdHandler);\n      remainingSize = archiveMemberSize;\n      if (architectureType == 0) {\n        if (archiveMemberSize < 0) {\n          bfd_get_archive_filename(bfdHandler);\n          errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(errorMessage);\n        }\n        else {\n          architectureType = bfd_seek(bfdHandler,0,0);\n          if (architectureType == 0) {\n            if (verbose != '\\0') {\n              archiveMember = *bfdObjectHandler;\n              errorMessage = bfd_get_archive_filename(bfdHandler);\n              currentChar = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentChar,errorMessage,archiveMember);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remainingSize == 0) {\n                chmod(*bfdObjectHandler,param_18 | 0x100);\n                free(buffer);\n                copyResult = bfd_close_all_done(bfdObjectHandler);\n                bfdObjectHandler = bfdHandler;\n                if (copyResult == '\\0') {\n                  bfd_nonfatal_message(archiveMemberPath,0,0,0);\n                  exitStatus = 1;\n                }\n                goto LAB_00114a86;\n              }\n              tempSize = 0x2000;\n              if (remainingSize < 0x2001) {\n                tempSize = remainingSize;\n              }\n              readWriteSize = bfd_bread(buffer,tempSize,bfdHandler);\n              ppcVar3 = bfdHandler;\n              if ((tempSize != readWriteSize) ||\n                 (readWriteSize = bfd_bwrite(buffer,tempSize,bfdObjectHandler), ppcVar3 = bfdObjectHandler, tempSize != readWriteSize))\n              break;\n              remainingSize = remainingSize - tempSize;\n            }\n            bfd_nonfatal_message(0,ppcVar3,0,0);\n            free(buffer);\n          }\n          else {\n            errorMessage = bfd_get_archive_filename(bfdHandler);\n            bfd_nonfatal(errorMessage);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,bfdHandler,0,0);\n      }\n      copyResult = bfd_close_all_done(bfdObjectHandler);\n      if (copyResult == '\\0') {\n        bfd_nonfatal_message(archiveMemberPath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archiveMemberPath);\n      exitStatus = 1;\n    }\n    *bfdReadWrites = 0;\n    buffer = (void *)xstrdup(*tempFileNames);\n    if (exitStatus == 0) {\n      bfdCloseFunction = bfd_close;\n    }\n    else {\n      bfdCloseFunction = bfd_close_all_done;\n    }\n    copyResult = (*bfdCloseFunction)(tempFileNames);\n    if (copyResult == '\\0') {\n      exitStatus = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*archiveFileName);\n    copyResult = bfd_close(archiveFileName);\n    if (copyResult == '\\0') {\n      exitStatus = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (archiveMemberInfo != (undefined8 *)0x0) {\n    if (archiveMemberInfo[2] == 0) {\n      rmdir((char *)archiveMemberInfo[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)archiveMemberInfo[1]);\n    }\n    free((void *)archiveMemberInfo[1]);\n    puVar8 = (undefined8 *)*archiveMemberInfo;\n    free(archiveMemberInfo);\n    archiveMemberInfo = puVar8;\n  }\n  rmdir(tempDirectoryName);\n  free(tempDirectoryName);\n  return;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_close_all_done",
                "bfd_get_arch",
                "bfd_bwrite",
                "bfd_openw",
                "non_fatal",
                "bfd_close",
                "FUN_001052a2",
                "copy_object",
                "set_times",
                "bfd_bread",
                "unlink",
                "free",
                "bfd_openr",
                "bfd_close",
                "strerror",
                "chmod",
                "rmdir",
                "make_tempdir",
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_seek",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "concat",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "stat",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_member_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "create_new_object_00113ce0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "lVar1": "type",
                "plVar2": "newObject",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateNewObject_00113ce0(long input1,long input2,undefined input3,undefined8 input4,undefined8 input5)\n\n{\n  long type;\n  long *newObject;\n  undefined returnValue [16];\n  \n  if (input1 != 0) {\n    type = debug_make_type_constprop_0(0xd,0);\n    if (type != 0) {\n      newObject = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)newObject + 0x11) = 0;\n      *newObject = input1;\n      *(undefined4 *)((long)newObject + 0x14) = 0;\n      newObject[1] = input2;\n      *(undefined *)(newObject + 2) = input3;\n      *(long **)(type + 0x10) = newObject;\n      goto LAB_00113d2f;\n    }\n  }\n  type = 0;\nLAB_00113d2f:\n  returnValue._8_8_ = input5;\n  returnValue._0_8_ = type;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_new_object_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_allocate_memory_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "start",
                "unaff_R14": "end",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "errorContext"
            },
            "code": "\nvoid readAndAllocateMemory_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 errorContext;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long start;\n  long end;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + start),1,end - start,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      errorContext = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,errorContext);\n    }\n    start = start + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (start == end) {\n      end = start * 2;\n      errorContext = xrealloc(*(undefined8 *)(buffer + 0x20),end);\n      *(undefined8 *)(buffer + 0x20) = errorContext;\n    }\n  }\n  *(long *)(buffer + 0x18) = start;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00114dc7",
                "ferror",
                "fread",
                "feof",
                "dcgettext",
                "fclose",
                "fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_allocate_memory_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_data_00119f70",
                "param_1": "header_data",
                "param_2": "binary_file",
                "uVar1": "format_version",
                "cVar2": "result",
                "iVar3": "arch_mach_index",
                "uVar4": "endian_string_version",
                "uVar5": "endian_string_data",
                "__format": "format_string",
                "lVar6": "buffer_size",
                "uVar7": "header_data_copy",
                "lVar8": "buffer_memory"
            },
            "code": "\nundefined4 process_binary_data_00119f70(undefined8 *header_data,undefined8 *binary_file)\n\n{\n  undefined4 format_version;\n  char result;\n  int arch_mach_index;\n  undefined8 endian_string_version;\n  undefined8 endian_string_data;\n  char *format_string;\n  long buffer_size;\n  undefined8 header_data_copy;\n  long buffer_memory;\n  \n  arch_mach_index = *(int *)((long)binary_file + 0xc) + 1;\n  *(int *)((long)binary_file + 0xc) = arch_mach_index;\n  if ((ulong)binary_file[2] < (ulong)((long)arch_mach_index * 0x60)) {\n    buffer_size = 0x3000;\n    if (0x3f < arch_mach_index) {\n      buffer_size = (long)arch_mach_index * 0xc0;\n    }\n    buffer_memory = xrealloc(binary_file[3]);\n    binary_file[3] = buffer_memory;\n    memset((void *)(buffer_memory + binary_file[2]),0,buffer_size - binary_file[2]);\n    binary_file[2] = buffer_size;\n  }\n  format_version = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binary_file + 0xc) * 0x60 + binary_file[3] + -0x60) = *header_data;\n  endian_string_version = endian_string(format_version);\n  endian_string_data = endian_string(*(undefined4 *)(header_data + 2));\n  header_data_copy = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,header_data_copy,endian_string_data,endian_string_version);\n  buffer_size = bfd_openw(*binary_file,*header_data);\n  if (buffer_size == 0) {\n    bfd_nonfatal(*binary_file);\n    *(undefined4 *)(binary_file + 1) = 1;\n  }\n  else {\n    arch_mach_index = 2;\n    result = bfd_set_format(buffer_size,1);\n    if (result == '\\0') {\n      arch_mach_index = bfd_get_error();\n      if (arch_mach_index != 5) {\n        bfd_nonfatal(*header_data);\n        *(undefined4 *)(binary_file + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(buffer_size + 8) + 0x2a0))(buffer_size,arch_mach_index,0);\n        if (result != '\\0') {\n          header_data_copy = bfd_printable_arch_mach(arch_mach_index,0);\n          printf(\"  %s\\n\",header_data_copy);\n          *(undefined *)\n           ((long)*(int *)((long)binary_file + 0xc) * 0x60 + binary_file[3] + -0x58 + (ulong)(arch_mach_index - 2)) =\n               1;\n        }\n        arch_mach_index = arch_mach_index + 1;\n      } while (arch_mach_index != 0x57);\n    }\n    bfd_close_all_done(buffer_size);\n  }\n  return *(undefined4 *)(binary_file + 1);\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "endian_string",
                "bfd_close_all_done",
                "bfd_get_error",
                "dcgettext",
                "bfd_set_format",
                "do_display_target.cold",
                "bfd_openw",
                "memset",
                "printf",
                "xrealloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "process_binary_data_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_to_file_00115a90",
                "param_1": "file_descriptor",
                "param_2": "source_file_path",
                "param_3": "destination_file_path",
                "iVar1": "original_errno_value",
                "__fd": "destination_file_descriptor",
                "_Var3": "file_offset",
                "uVar4": "num_bytes_copied",
                "sVar5": "num_bytes_written",
                "piVar6": "errno_ptr",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_to_file_00115a90(int file_descriptor,char *source_file_path,long destination_file_path)\n\n{\n  int original_errno_value;\n  int destination_file_descriptor;\n  int iVar2;\n  __off_t file_offset;\n  ulong num_bytes_copied;\n  size_t num_bytes_written;\n  int *errno_ptr;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (file_offset = lseek(file_descriptor,0,0), file_offset == 0)) {\n    destination_file_descriptor = open(source_file_path,0x201);\n    if (destination_file_descriptor < 0) {\n      num_bytes_copied = simple_copy_cold();\n      return num_bytes_copied;\n    }\n    do {\n      num_bytes_copied = read(file_descriptor,buffer,0x2000);\n      iVar2 = (int)num_bytes_copied;\n      if (iVar2 < 1) {\n        errno_ptr = __errno_location();\n        original_errno_value = *errno_ptr;\n        fchmod(destination_file_descriptor,*(__mode_t *)(destination_file_path + 0x18));\n        close(file_descriptor);\n        close(destination_file_descriptor);\n        if (iVar2 != 0) {\n          *errno_ptr = original_errno_value;\n          return 0xffffffff;\n        }\n        return num_bytes_copied & 0xffffffff;\n      }\n      num_bytes_written = write(destination_file_descriptor,buffer,(long)iVar2);\n    } while (num_bytes_written == (long)iVar2);\n    errno_ptr = __errno_location();\n    iVar2 = *errno_ptr;\n    close(file_descriptor);\n    close(destination_file_descriptor);\n    *errno_ptr = iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close",
                "simple_copy.cold",
                "read",
                "write",
                "fchmod",
                "lseek",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_to_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_and_unlink_file_00108200",
                "unaff_RBP": "sourceFilePath",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "filePermissions",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "uVar2": "errorMessage",
                "auVar3": "returnVal"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorMessage;\n  char *sourceFilePath;\n  char shouldSetTimes;\n  ulong filePermissions;\n  undefined returnVal [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(sourceFilePath);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  returnVal._0_8_ = filePermissions & 0xffffffff;\n  returnVal._8_8_ = returnAddress;\n  return returnVal;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "set_times",
                "dcgettext",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00108200"
        }
    },
    "used_tokens": 246267,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}