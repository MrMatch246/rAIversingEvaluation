{
    "functions": {
        "putc": {
            "renaming": {}, 
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001080f8", 
            "calling": [
                "putc"
            ], 
            "imported": false, 
            "current_name": "putc"
        }, 
        "fflush": {
            "renaming": {}, 
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108138", 
            "calling": [
                "fflush"
            ], 
            "imported": false, 
            "current_name": "fflush"
        }, 
        "bfd_close": {
            "renaming": {}, 
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n", 
            "called": [
                "bfd_close"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001022a0", 
            "calling": [
                "FUN_001023b6"
            ], 
            "imported": false, 
            "current_name": "bfd_close"
        }, 
        "bfd_openr_next_archived_file": {
            "renaming": {}, 
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n", 
            "called": [
                "bfd_openr_next_archived_file"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102320", 
            "calling": [
                "FUN_001023b6"
            ], 
            "imported": false, 
            "current_name": "bfd_openr_next_archived_file"
        }, 
        "_init": {
            "renaming": {}, 
            "code": "\nint _init(EVP_PKEY_CTX *ctx)\n\n{\n  int iVar1;\n  \n  iVar1 = __gmon_start__();\n  return iVar1;\n}\n\n", 
            "called": [
                "__gmon_start__"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102000", 
            "calling": [], 
            "imported": false, 
            "current_name": "_init"
        }, 
        "bfd_nonfatal.cold": {
            "renaming": {}, 
            "code": "\n\n\nvoid bfd_nonfatal_cold(void)\n\n{\n  undefined8 uVar1;\n  long unaff_RBX;\n  undefined8 unaff_retaddr;\n  \n  uVar1 = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (unaff_RBX != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar1,unaff_retaddr);\n  return;\n}\n\n", 
            "called": [
                "fprintf", 
                "fflush", 
                "dcgettext"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x0010274b", 
            "calling": [
                "bfd_nonfatal"
            ], 
            "imported": false, 
            "current_name": "bfd_nonfatal.cold"
        }, 
        "usage": {
            "renaming": {}, 
            "code": "\nvoid usage(FILE *param_1,int param_2)\n\n{\n  long lVar1;\n  char *pcVar2;\n  long *__ptr;\n  long *plVar3;\n  \n  lVar1 = program_name;\n  pcVar2 = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(param_1,pcVar2,lVar1);\n  pcVar2 = (char *)dcgettext(0,\" Displays the sizes of sections inside binary files\\n\",5);\n  fprintf(param_1,pcVar2);\n  pcVar2 = (char *)dcgettext(0,\" If no input file(s) are specified, a.out is assumed\\n\",5);\n  fprintf(param_1,pcVar2);\n  pcVar2 = (char *)dcgettext(0,\n                             \" The options are:\\n  -A|-B|-G  --format={sysv|berkeley|gnu}  Select output style (default is %s)\\n  -o|-d|-x  --radix={8|10|16}         Display numbers in octal, decimal or hex\\n  -t        --totals                  Display the total sizes (Berkeley only)\\n  -f                                  Ignored.\\n            --common                  Display total size for *COM* syms\\n            --target=<bfdname>        Set the binary file format\\n            @<file>                   Read options from <file>\\n  -h|-H|-?  --help                    Display this information\\n  -v|-V     --version                 Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(param_1,pcVar2,\"berkeley\");\n  lVar1 = program_name;\n  if (program_name == 0) {\n    pcVar2 = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(param_1,pcVar2);\n  }\n  else {\n    pcVar2 = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(param_1,pcVar2,lVar1);\n  }\n  __ptr = (long *)bfd_target_list();\n  plVar3 = __ptr;\n  while( true ) {\n    lVar1 = *plVar3;\n    plVar3 = plVar3 + 1;\n    if (lVar1 == 0) break;\n    fprintf(param_1,\" %s\");\n  }\n  fputc(10,param_1);\n  free(__ptr);\n  if (param_2 == 0) {\n    pcVar2 = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(param_1,pcVar2,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(param_2);\n}\n\n", 
            "called": [
                "free", 
                "bfd_target_list", 
                "fputc", 
                "exit", 
                "fprintf", 
                "dcgettext"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x0010281b", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "usage"
        }, 
        "print_sizes": {
            "renaming": {}, 
            "code": "\n\n\nvoid print_sizes(char **param_1)\n\n{\n  long lVar1;\n  undefined8 extraout_RDX;\n  long lVar2;\n  long extraout_RDX_00;\n  undefined8 extraout_RDX_01;\n  undefined8 uVar3;\n  void *__ptr;\n  int iVar4;\n  char cVar5;\n  void *pvVar6;\n  char *pcVar7;\n  int iVar8;\n  long lVar9;\n  bool bVar10;\n  bool bVar11;\n  undefined *puVar12;\n  \n  if ((show_common == 0) || (common_size = 0, (*(uint *)((long)param_1 + 0x44) & 0x52) != 0x10))\n  goto LAB_00102aa8;\n  lVar9 = (**(code **)(param_1[1] + 0x1f8))();\n  if (lVar9 < 0) {\n    bfd_nonfatal(*param_1);\n    xexit(1);\nLAB_001026b4:\n    __ptr = (void *)xmalloc();\n  }\n  else {\n    __ptr = (void *)0x0;\n    if (lVar9 != 0) goto LAB_001026b4;\n  }\n  pvVar6 = __ptr;\n  lVar9 = (**(code **)(param_1[1] + 0x200))(param_1);\n  cVar5 = (char)pvVar6;\n  if (lVar9 < 0) {\n    bfd_nonfatal(*param_1);\n    xexit(1);\n    lVar2 = extraout_RDX_00;\n  }\n  else {\n    cVar5 = '\\0';\n    lVar2 = common_size;\n    while (bVar10 = lVar9 != 0, lVar9 = lVar9 + -1, bVar10) {\n      lVar1 = *(long *)((long)__ptr + lVar9 * 8);\n      if (((*(byte *)(*(long *)(lVar1 + 0x20) + 0x25) & 0x10) != 0) &&\n         ((*(byte *)(lVar1 + 0x19) & 1) == 0)) {\n        lVar2 = lVar2 + *(long *)(lVar1 + 0x10);\n        cVar5 = '\\x01';\n      }\n    }\n  }\n  if (cVar5 != '\\0') {\n    common_size = lVar2;\n  }\n  free(__ptr);\nLAB_00102aa8:\n  if (selected_output_format == 1) {\n    svi_total = 0;\n    svi_maxvma = 0;\n    svi_namelen = 0;\n    bfd_map_over_sections(param_1,sysv_internal_sizer,0);\n    if (show_common != 0) {\n      if ((int)svi_namelen < 5) {\n        svi_namelen = 5;\n      }\n      svi_total = svi_total + common_size;\n    }\n    svi_vmalen = size_number(svi_maxvma);\n    if (svi_vmalen < 4) {\n      svi_vmalen = 4;\n    }\n    svi_sizelen = size_number();\n    if (svi_sizelen < 4) {\n      svi_sizelen = 4;\n    }\n    svi_total = 0;\n    printf(\"%s  \",*param_1);\n    uVar3 = extraout_RDX_01;\n    if ((undefined8 *)param_1[0x1d] != (undefined8 *)0x0) {\n      printf(\" (ex %s)\",*(undefined8 *)param_1[0x1d]);\n      uVar3 = extraout_RDX;\n    }\n    puVar12 = &DAT_001040fc;\n    printf(\":\\n%-*s   %*s   %*s\\n\",(ulong)svi_namelen,\"section\",(ulong)svi_sizelen,&DAT_00104067,\n           (ulong)svi_vmalen,&DAT_001040fc,uVar3);\n    bfd_map_over_sections(param_1,sysv_internal_printer,0);\n    if (show_common != 0) {\n      svi_total = svi_total + common_size;\n      sysv_one_line(\"*COM*\",common_size,0,puVar12);\n    }\n    printf(\"%-*s   \",(ulong)svi_namelen,\"Total\");\n    rprint_number(svi_sizelen,svi_total);\n    puts(\"\\n\");\n    return;\n  }\n  iVar8 = (-(uint)(selected_output_format == 0) & 0xfffffffd) + 10;\n  bVar10 = selected_output_format == 0;\n  bsssize = 0;\n  datasize = 0;\n  textsize = 0;\n  bfd_map_over_sections(param_1,berkeley_or_gnu_sum,0);\n  bsssize = bsssize + common_size;\n  iVar4 = files_seen_0 + 1;\n  bVar11 = files_seen_0 == 0;\n  files_seen_0 = iVar4;\n  if (bVar11) {\n    if (selected_output_format == 0) {\n      pcVar7 = \"   text\\t   data\\t    bss\\t    dec\\t    hex\\tfilename\";\n      if (radix == 1) {\n        pcVar7 = \"   text\\t   data\\t    bss\\t    oct\\t    hex\\tfilename\";\n      }\n      puts(pcVar7);\n    }\n    else {\n      puts(\"      text       data        bss      total filename\");\n    }\n  }\n  lVar9 = textsize + datasize + bsssize;\n  if (show_totals != 0) {\n    total_textsize = total_textsize + textsize;\n    total_datasize = total_datasize + datasize;\n    total_bsssize = total_bsssize + bsssize;\n  }\n  iVar4 = (int)(char)((-bVar10 & 0xe9U) + 0x20);\n  rprint_number(iVar8);\n  putc(iVar4,_stdout);\n  rprint_number(iVar8,datasize);\n  putc(iVar4,_stdout);\n  rprint_number(iVar8,bsssize);\n  putc(iVar4,_stdout);\n  if (selected_output_format == 0) {\n    pcVar7 = \"%7lu\\t%7lx\";\n    if (radix == 1) {\n      pcVar7 = \"%7lo\\t%7lx\";\n    }\n    printf(pcVar7,lVar9,lVar9);\n  }\n  else {\n    rprint_number(iVar8,lVar9);\n  }\n  putc(iVar4,_stdout);\n  fputs(*param_1,_stdout);\n  if ((undefined8 *)param_1[0x1d] == (undefined8 *)0x0) {\n    return;\n  }\n  printf(\" (ex %s)\",*(undefined8 *)param_1[0x1d]);\n  return;\n}\n\n", 
            "called": [
                "free", 
                "size_number", 
                "xmalloc", 
                "rprint_number", 
                "fputs", 
                "xexit", 
                "sysv_internal_sizer", 
                "sysv_one_line", 
                "bfd_nonfatal", 
                "berkeley_or_gnu_sum", 
                "print_sizes.cold", 
                "bfd_map_over_sections", 
                "sysv_internal_printer", 
                "puts", 
                "printf", 
                "putc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102a90", 
            "calling": [
                "display_bfd.cold", 
                "display_bfd"
            ], 
            "imported": false, 
            "current_name": "print_sizes"
        }, 
        "main": {
            "renaming": {}, 
            "code": "\n\n\nundefined4 main(int param_1,long *param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  bool bVar3;\n  bool bVar4;\n  char *pcVar5;\n  byte bVar6;\n  char cVar7;\n  int iVar8;\n  undefined4 uVar9;\n  FILE *__stream;\n  byte *__s;\n  char *pcVar10;\n  size_t sVar11;\n  byte *__ptr;\n  long *__src;\n  long lVar12;\n  long *plVar13;\n  long *plVar14;\n  ulong uVar15;\n  undefined8 uVar16;\n  char *pcVar17;\n  byte *pbVar18;\n  undefined1 *unaff_RBP;\n  long lVar19;\n  byte *pbVar20;\n  int iVar21;\n  int iVar22;\n  bool bVar23;\n  int local_110;\n  int local_10c;\n  size_t local_108;\n  stat local_c8;\n  \n  setlocale(5,\"\");\n  pcVar17 = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  plVar13 = param_2;\n  if (1 < param_1) {\n    local_10c = 2000;\n    local_110 = 0;\n    iVar8 = 1;\n    do {\n      while( true ) {\n        iVar22 = iVar8;\n        unaff_RBP = (undefined1 *)(long)iVar22;\n        if (*(char *)plVar13[(long)unaff_RBP] == '@') break;\nLAB_001035a0:\n        if (param_1 <= iVar22 + 1) goto LAB_00103612;\nLAB_001035aa:\n        iVar8 = iVar22 + 1;\n        local_110 = iVar22;\n      }\n      local_10c = local_10c + -1;\n      if (local_10c == 0) goto LAB_001039c5;\n      pcVar17 = (char *)plVar13[(long)unaff_RBP] + 1;\n      iVar8 = stat(pcVar17,&local_c8);\n      if (iVar8 < 0) goto LAB_001035a0;\n      if ((local_c8.st_mode & 0xf000) == 0x4000) {\n        lVar19 = *plVar13;\n        pcVar17 = \"%s: error: @-file refers to a directory\\n\";\n        do {\n          fprintf(_stderr,pcVar17,lVar19);\n          xexit(1);\nLAB_001039c5:\n          lVar19 = *plVar13;\n          pcVar17 = \"%s: error: too many @-files encountered\\n\";\n        } while( true );\n      }\n      __stream = fopen(pcVar17,\"r\");\n      if (__stream == (FILE *)0x0) goto LAB_001035a0;\n      iVar8 = fseek(__stream,0,2);\n      if (((iVar8 == -1) ||\n          (pcVar17 = (char *)ftell(__stream), pcVar17 == (char *)0xffffffffffffffff)) ||\n         (iVar8 = fseek(__stream,0,0), iVar8 == -1)) {\nLAB_00103600:\n        fclose(__stream);\n        if (iVar22 + 1 < param_1) goto LAB_001035aa;\n        break;\n      }\n      __s = (byte *)xmalloc(pcVar17 + 1);\n      pcVar10 = (char *)fread(__s,1,(size_t)pcVar17,__stream);\n      if ((pcVar17 != pcVar10) && (iVar8 = ferror(__stream), iVar8 != 0)) {\n        free(__s);\n        goto LAB_00103600;\n      }\n      __s[(long)pcVar10] = 0;\n      bVar6 = *__s;\n      pbVar18 = __s;\n      if (bVar6 != 0) {\nLAB_00103300:\n        if (((&_sch_istable)[(ulong)bVar6 * 2] & 0x40) != 0) goto LAB_001032f0;\n        sVar11 = strlen((char *)__s);\n        __ptr = (byte *)xmalloc(sVar11 + 1);\n        iVar8 = 0;\n        bVar23 = false;\n        bVar4 = false;\n        lVar19 = 0;\n        __src = (long *)0x0;\n        bVar3 = false;\n        pbVar18 = __s;\n        do {\n          while (((&_sch_istable)[(ulong)*pbVar18 * 2] & 0x40) != 0) {\n            pbVar18 = pbVar18 + 1;\n          }\n          if ((iVar8 == 0) || (plVar14 = __src + lVar19, iVar8 + -1 <= (int)lVar19)) {\n            if (__src == (long *)0x0) {\n              iVar8 = 8;\n              __src = (long *)xmalloc(0x40);\n              plVar14 = __src + lVar19;\n              *plVar14 = 0;\n            }\n            else {\n              iVar8 = iVar8 * 2;\n              __src = (long *)xrealloc(__src,(long)iVar8 << 3);\n              plVar14 = __src + lVar19;\n              *plVar14 = 0;\n            }\n          }\n          bVar6 = *pbVar18;\n          pbVar20 = __ptr;\n          while (bVar6 != 0) {\n            while( true ) {\n              if ((((&_sch_istable)[(ulong)bVar6 * 2] & 0x40) != 0) &&\n                 (!(bool)(bVar4 | bVar3 | bVar23))) {\n                bVar3 = false;\n                bVar23 = false;\n                bVar4 = false;\n                goto LAB_00103410;\n              }\n              if (!bVar3) break;\n              pbVar18 = pbVar18 + 1;\n              *pbVar20 = bVar6;\n              pbVar20 = pbVar20 + 1;\n              bVar3 = false;\n              bVar6 = *pbVar18;\n              if (bVar6 == 0) goto LAB_00103410;\n            }\n            if (bVar6 == 0x5c) {\n              bVar3 = true;\n            }\n            else if (bVar4) {\n              if (bVar6 == 0x27) {\n                bVar4 = false;\n              }\n              else {\nLAB_00103585:\n                *pbVar20 = bVar6;\n                pbVar20 = pbVar20 + 1;\n              }\n            }\n            else if (bVar23) {\n              if (bVar6 != 0x22) goto LAB_00103585;\n              bVar23 = false;\n            }\n            else if (bVar6 == 0x27) {\n              bVar4 = true;\n            }\n            else {\n              if (bVar6 != 0x22) goto LAB_00103585;\n              bVar23 = true;\n            }\n            pbVar1 = pbVar18 + 1;\n            pbVar18 = pbVar18 + 1;\n            bVar6 = *pbVar1;\n          }\nLAB_00103410:\n          *pbVar20 = 0;\n          lVar12 = xstrdup(__ptr);\n          *plVar14 = lVar12;\n          __src[lVar19 + 1] = 0;\n          bVar6 = *pbVar18;\n          bVar2 = (&_sch_istable)[(ulong)bVar6 * 2];\n          while ((bVar2 & 0x40) != 0) {\n            bVar6 = pbVar18[1];\n            pbVar18 = pbVar18 + 1;\n            bVar2 = (&_sch_istable)[(ulong)bVar6 * 2];\n          }\n          lVar19 = lVar19 + 1;\n        } while (bVar6 != 0);\n        free(__ptr);\n        plVar14 = plVar13;\n        if (param_2 == plVar13) goto LAB_0010372c;\n        goto LAB_001034ad;\n      }\nLAB_0010370f:\n      __src = (long *)xmalloc();\n      *__src = 0;\n      if (param_2 == plVar13) {\nLAB_0010372c:\n        if (*plVar13 == 0) {\n          iVar8 = 0;\n        }\n        else {\n          lVar19 = 1;\n          do {\n            iVar8 = (int)lVar19;\n            plVar14 = plVar13 + lVar19;\n            lVar19 = lVar19 + 1;\n          } while (*plVar14 != 0);\n        }\n        lVar12 = 0;\n        plVar14 = (long *)xmalloc((long)(iVar8 + 1) << 3);\n        lVar19 = *plVar13;\n        while (lVar19 != 0) {\n          uVar16 = xstrdup();\n          *(undefined8 *)((long)plVar14 + lVar12) = uVar16;\n          lVar12 = lVar12 + 8;\n          lVar19 = *(long *)((long)plVar13 + lVar12);\n        }\n        *(undefined8 *)((long)plVar14 + lVar12) = 0;\nLAB_001034ad:\n        plVar13 = plVar14;\n        if (*__src == 0) goto LAB_001038cc;\n        pcVar17 = (char *)0x0;\n        do {\n          pcVar17 = pcVar17 + 1;\n        } while (__src[(long)pcVar17] != 0);\n        local_108 = (long)pcVar17 * 8;\n      }\n      else {\nLAB_001038cc:\n        pcVar17 = (char *)0x0;\n        local_108 = 0;\n      }\n      free((void *)plVar13[(long)unaff_RBP]);\n      plVar13 = (long *)xrealloc(plVar13,(long)(pcVar17 + (long)param_1 + 1) * 8);\n      iVar21 = param_1 + -1 + (int)pcVar17;\n      memmove(plVar13 + (long)(unaff_RBP + (long)pcVar17),plVar13 + (long)(unaff_RBP + 1),\n              (long)(param_1 - iVar22) << 3);\n      memcpy(plVar13 + (long)unaff_RBP,__src,local_108);\n      free(__src);\n      free(__s);\n      fclose(__stream);\n      unaff_RBP = unaff_RBP + (long)pcVar17;\n      iVar8 = local_110 + 1;\n      param_1 = iVar21;\n    } while (local_110 + 1 < iVar21);\n  }\nLAB_00103612:\n  iVar8 = bfd_init();\n  if (iVar8 != 0x118) goto LAB_001039f8;\n  pcVar10 = \"x86_64-pc-linux-gnu\";\n  unaff_RBP = long_options;\n  pcVar17 = \"ABGHhVvdfotx\";\n  cVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n  if (cVar7 == '\\0') {\n    uVar9 = bfd_get_error();\n    pcVar17 = (char *)bfd_errmsg(uVar9);\n    uVar16 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    uVar15 = fatal(uVar16,\"x86_64-pc-linux-gnu\",pcVar17);\n    goto LAB_00103b74;\n  }\n  do {\n    while (iVar8 = getopt_long(param_1,plVar13,pcVar17,unaff_RBP,0), iVar8 != -1) {\n      pcVar5 = pcVar10;\n      if (iVar8 < 0x79) {\n        if (iVar8 < 0x3f) {\nswitchD_001037fd_caseD_40:\n          iVar8 = getopt_long(param_1,plVar13,pcVar17,unaff_RBP,0);\n          if (iVar8 == -1) break;\n          if (0x78 < iVar8) goto LAB_00103937;\n          if (0x3e < iVar8) {\n            switch(iVar8) {\n            case 0x3f:\n            case 0x48:\n            case 0x68:\n              goto switchD_001037fd_caseD_3f;\n            case 0x41:\n              goto switchD_001037fd_caseD_41;\n            case 0x42:\n              goto switchD_001037fd_caseD_42;\n            case 0x47:\n              goto switchD_001037fd_caseD_47;\n            case 0x56:\n            case 0x76:\n              goto switchD_001037fd_caseD_56;\n            case 100:\n              goto switchD_001037fd_caseD_64;\n            case 0x6f:\n              goto switchD_001037fd_caseD_6f;\n            case 0x74:\n              goto switchD_001037fd_caseD_74;\n            case 0x78:\n              goto switchD_001037fd_caseD_78;\n            }\n          }\n          do {\n            do {\n              while( true ) {\n                iVar8 = getopt_long(param_1,plVar13,pcVar17,unaff_RBP,0);\n                if (iVar8 == -1) goto LAB_00103664;\n                if (0x78 < iVar8) break;\n                if (0x3e < iVar8) {\n                  switch(iVar8) {\n                  case 0x3f:\n                  case 0x48:\n                  case 0x68:\n                    goto switchD_001037fd_caseD_3f;\n                  case 0x41:\n                    goto switchD_001037fd_caseD_41;\n                  case 0x42:\n                    goto switchD_001037fd_caseD_42;\n                  case 0x47:\n                    goto switchD_001037fd_caseD_47;\n                  case 0x56:\n                  case 0x76:\n                    goto switchD_001037fd_caseD_56;\n                  case 100:\n                    goto switchD_001037fd_caseD_64;\n                  case 0x6f:\n                    goto switchD_001037fd_caseD_6f;\n                  case 0x74:\n                    goto switchD_001037fd_caseD_74;\n                  case 0x78:\n                    goto switchD_001037fd_caseD_78;\n                  }\n                }\n              }\nLAB_00103937:\n              if (iVar8 == 0xca) goto LAB_001039d1;\n            } while (0xca < iVar8);\n            if (iVar8 == 200) goto LAB_00103869;\n          } while (iVar8 != 0xc9);\n          goto LAB_00103a15;\n        }\n        switch(iVar8) {\n        case 0x3f:\n        case 0x48:\n        case 0x68:\n          goto switchD_001037fd_caseD_3f;\n        default:\n          goto switchD_001037fd_caseD_40;\n        case 0x41:\n          goto switchD_001037fd_caseD_41;\n        case 0x42:\nswitchD_001037fd_caseD_42:\n          selected_output_format = 0;\n          break;\n        case 0x47:\nswitchD_001037fd_caseD_47:\n          selected_output_format = 2;\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_001037fd_caseD_56:\n          show_version = 1;\n          break;\n        case 100:\n          goto switchD_001037fd_caseD_64;\n        case 0x6f:\n          goto switchD_001037fd_caseD_6f;\n        case 0x74:\nswitchD_001037fd_caseD_74:\n          show_totals = 1;\n          break;\n        case 0x78:\n          goto switchD_001037fd_caseD_78;\n        }\n      }\n      else if (iVar8 == 0xca) {\nLAB_001039d1:\n        target = _optarg;\n      }\n      else {\n        if (0xca < iVar8) goto switchD_001037fd_caseD_40;\n        if (iVar8 != 200) {\n          if (iVar8 != 0xc9) goto switchD_001037fd_caseD_40;\n          goto LAB_00103a15;\n        }\nLAB_00103869:\n        pcVar10 = _optarg;\n        if (0x31 < (byte)(*_optarg + 0xbeU)) goto LAB_00103bc8;\n        uVar15 = 1L << (*_optarg + 0xbeU & 0x3f);\n        if ((uVar15 & 0x2000000020) != 0) goto switchD_001037fd_caseD_47;\n        if ((uVar15 & 0x2000000020000) == 0) {\nLAB_00103b74:\n          if ((uVar15 & 0x100000001) == 0) goto LAB_00103bc8;\n          goto switchD_001037fd_caseD_42;\n        }\nswitchD_001037fd_caseD_41:\n        selected_output_format = 1;\n      }\n    }\nLAB_00103664:\n    if (show_version != 0) {\n      printf(\"GNU %s %s\\n\",&DAT_00104067,\"(GNU Binutils for Debian) 2.40\");\n      pcVar17 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(pcVar17);\n      pcVar17 = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(pcVar17);\n                    \n      exit(0);\n    }\n    if (show_help == 0) {\n      iVar8 = _optind - param_1;\n      if (_optind == param_1) {\n        display_file(\"a.out\");\n      }\n      else {\n        while (lVar19 = (long)_optind, SBORROW4(_optind,param_1) != iVar8 < 0) {\n          _optind = _optind + 1;\n          display_file(plVar13[lVar19]);\n          iVar8 = _optind - param_1;\n        }\n      }\n      if ((show_totals != 0) && ((selected_output_format & 0xfffffffd) == 0)) {\n        lVar19 = total_datasize + total_textsize + total_bsssize;\n        iVar8 = (-(uint)(selected_output_format == 0) & 0xfffffffd) + 10;\n        bVar23 = selected_output_format == 0;\n        rprint_number(iVar8);\n        iVar22 = (int)(char)((-bVar23 & 0xe9U) + 0x20);\n        putc(iVar22,_stdout);\n        rprint_number(iVar8,total_datasize);\n        putc(iVar22,_stdout);\n        rprint_number(iVar8,total_bsssize);\n        putc(iVar22,_stdout);\n        if (selected_output_format == 0) {\n          pcVar17 = \"%7lu\\t%7lx\";\n          if (radix == 1) {\n            pcVar17 = \"%7lo\\t%7lx\";\n          }\n          printf(pcVar17,lVar19,lVar19);\n        }\n        else {\n          rprint_number(iVar8,lVar19);\n        }\n        putc(iVar22,_stdout);\n        fwrite(\"(TOTALS)\\n\",1,9,_stdout);\n      }\n      return return_code;\n    }\n    usage(_stdout,0);\nLAB_001039f8:\n    uVar16 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    fatal(uVar16);\nLAB_00103a15:\n    lVar19 = strtol(_optarg,(char **)0x0,10);\n    pcVar10 = _optarg;\n    iVar8 = (int)lVar19;\n    pcVar5 = &optarg;\n    if (iVar8 == 10) {\nswitchD_001037fd_caseD_64:\n      pcVar10 = pcVar5;\n      radix = 0;\n    }\n    else if (iVar8 == 0x10) {\nswitchD_001037fd_caseD_78:\n      pcVar10 = pcVar5;\n      radix = 2;\n    }\n    else {\n      if (iVar8 != 8) {\n        uVar16 = dcgettext(0,\"Invalid radix: %s\\n\",5);\n        pcVar17 = &optarg;\n        do {\n          non_fatal(uVar16,pcVar10);\n          pcVar10 = pcVar17;\nswitchD_001037fd_caseD_3f:\n          usage(_stderr,1);\nLAB_00103bc8:\n          uVar16 = dcgettext(0,\"invalid argument to --format: %s\",5);\n          pcVar17 = pcVar10;\n        } while( true );\n      }\nswitchD_001037fd_caseD_6f:\n      pcVar10 = pcVar5;\n      radix = 1;\n    }\n  } while( true );\nLAB_001032f0:\n  bVar6 = pbVar18[1];\n  pbVar18 = pbVar18 + 1;\n  if (bVar6 == 0) goto LAB_0010370f;\n  goto LAB_00103300;\n}\n\n", 
            "called": [
                "bfd_get_error", 
                "stat", 
                "non_fatal", 
                "xexit", 
                "getopt_long", 
                "dcgettext", 
                "xmalloc_set_program_name", 
                "usage", 
                "bfd_set_default_target", 
                "fread", 
                "strlen", 
                "textdomain", 
                "fseek", 
                "bfd_errmsg", 
                "bfd_set_error_program_name", 
                "fopen", 
                "strtol", 
                "memmove", 
                "printf", 
                "fclose", 
                "xstrdup", 
                "display_file", 
                "free", 
                "xmalloc", 
                "ftell", 
                "rprint_number", 
                "exit", 
                "fwrite", 
                "ferror", 
                "setlocale", 
                "fatal", 
                "memcpy", 
                "xrealloc", 
                "bfd_init", 
                "fprintf", 
                "putc", 
                "bindtextdomain"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103130", 
            "calling": [
                "_start"
            ], 
            "imported": false, 
            "current_name": "main"
        }, 
        "sysv_internal_printer.cold": {
            "renaming": {}, 
            "code": "\nvoid sysv_internal_printer_cold(void)\n\n{\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x0010274a", 
            "calling": [
                "sysv_internal_printer"
            ], 
            "imported": false, 
            "current_name": "sysv_internal_printer.cold"
        }, 
        "fseek": {
            "renaming": {}, 
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108148", 
            "calling": [
                "fseek"
            ], 
            "imported": false, 
            "current_name": "fseek"
        }, 
        "sprintf": {
            "renaming": {}, 
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108198", 
            "calling": [
                "sprintf"
            ], 
            "imported": false, 
            "current_name": "sprintf"
        }, 
        "display_bfd": {
            "renaming": {}, 
            "code": "\n\n\nvoid display_bfd(undefined8 *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 local_20 [2];\n  \n  cVar1 = bfd_check_format(param_1,2);\n  if (cVar1 == '\\0') {\n    cVar1 = bfd_check_format_matches(param_1,1,local_20);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_error();\n      if (iVar2 == 0xd) {\n        bfd_nonfatal(*param_1);\n        list_matching_formats(local_20[0]);\n        return_code = 3;\n      }\n      else {\n        cVar1 = bfd_check_format_matches(param_1,3,local_20);\n        if (cVar1 == '\\0') {\n          bfd_nonfatal(*param_1);\n          iVar2 = bfd_get_error();\n          if (iVar2 == 0xd) {\n            list_matching_formats(local_20[0]);\n          }\n          return_code = 3;\n        }\n        else {\n          print_sizes(param_1);\n          fwrite(\" (core file\",1,0xb,_stdout);\n          lVar3 = bfd_core_file_failing_command(param_1);\n          if (lVar3 != 0) {\n            printf(\" invoked as %s\",lVar3);\n          }\n          puts(\")\\n\");\n        }\n      }\n    }\n    else {\n      print_sizes(param_1);\n      putchar(10);\n    }\n  }\n  return;\n}\n\n", 
            "called": [
                "display_bfd.cold", 
                "bfd_check_format", 
                "bfd_check_format_matches", 
                "putchar", 
                "print_sizes"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102a40", 
            "calling": [
                "FUN_001023b6", 
                "display_file"
            ], 
            "imported": false, 
            "current_name": "display_bfd"
        }, 
        "strlen": {
            "renaming": {}, 
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108088", 
            "calling": [
                "strlen"
            ], 
            "imported": false, 
            "current_name": "strlen"
        }, 
        "FUN_001023b6": {
            "renaming": {}, 
            "code": "\nvoid FUN_001023b6(void)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 *unaff_RBX;\n  long lVar4;\n  \n  lVar3 = 0;\n  do {\n    lVar4 = lVar3;\n    bfd_set_error(0);\n    lVar3 = bfd_openr_next_archived_file();\n    if (lVar3 == 0) {\n      iVar2 = bfd_get_error();\n      if (iVar2 != 9) {\n        bfd_nonfatal(*unaff_RBX);\n        return_code = 2;\n      }\n      if (lVar4 != 0) {\n        bfd_close(lVar4);\n      }\n      break;\n    }\n    display_bfd();\n  } while ((lVar4 == 0) || (bfd_close(), lVar4 != lVar3));\n  cVar1 = bfd_close();\n  if (cVar1 == '\\0') {\n    bfd_nonfatal();\n    return_code = 1;\n  }\n  return;\n}\n\n", 
            "called": [
                "bfd_openr_next_archived_file", 
                "bfd_get_error", 
                "bfd_set_error", 
                "bfd_close", 
                "bfd_nonfatal", 
                "display_bfd"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x001023b6", 
            "calling": [
                "display_file"
            ], 
            "imported": false, 
            "current_name": "FUN_001023b6"
        }, 
        "bfd_map_over_sections": {
            "renaming": {}, 
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n", 
            "called": [
                "bfd_map_over_sections"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102330", 
            "calling": [
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "bfd_map_over_sections"
        }, 
        "xmalloc": {
            "renaming": {}, 
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n", 
            "called": [
                "xmalloc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102170", 
            "calling": [
                "main", 
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "xmalloc"
        }, 
        "vfprintf": {
            "renaming": {}, 
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108180", 
            "calling": [
                "vfprintf"
            ], 
            "imported": false, 
            "current_name": "vfprintf"
        }, 
        "putchar": {
            "renaming": {}, 
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108008", 
            "calling": [
                "putchar"
            ], 
            "imported": false, 
            "current_name": "putchar"
        }, 
        "display_file": {
            "renaming": {}, 
            "code": "\nvoid display_file(char *param_1)\n\n{\n  char cVar1;\n  int iVar2;\n  int *piVar3;\n  undefined8 uVar4;\n  char *pcVar5;\n  long lVar6;\n  stat sStack_b8;\n  \n  if (param_1 != (char *)0x0) {\n    iVar2 = stat(param_1,&sStack_b8);\n    if (iVar2 < 0) {\n      piVar3 = __errno_location();\n      if (*piVar3 == 2) {\n        uVar4 = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(uVar4,param_1);\n      }\n      else {\n        pcVar5 = strerror(*piVar3);\n        uVar4 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(uVar4,param_1,pcVar5);\n      }\n    }\n    else if ((sStack_b8.st_mode & 0xf000) == 0x4000) {\n      uVar4 = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(uVar4,param_1);\n    }\n    else if ((sStack_b8.st_mode & 0xf000) == 0x8000) {\n      if (sStack_b8.st_size < 0) {\n        uVar4 = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(uVar4,param_1);\n      }\n      else if (sStack_b8.st_size != 0) {\n        lVar6 = bfd_openr(param_1,target);\n        if (lVar6 != 0) {\n          cVar1 = bfd_check_format(lVar6,2);\n          if (cVar1 != '\\0') {\n            FUN_001023b6();\n            return;\n          }\n          display_bfd(lVar6);\n          cVar1 = bfd_close(lVar6);\n          if (cVar1 != '\\0') {\n            return;\n          }\n        }\n        bfd_nonfatal(param_1);\n        return_code = 1;\n        return;\n      }\n    }\n    else {\n      uVar4 = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(uVar4,param_1);\n    }\n  }\n  return_code = 1;\n  return;\n}\n\n", 
            "called": [
                "stat", 
                "display_file.cold", 
                "bfd_openr", 
                "bfd_check_format", 
                "non_fatal", 
                "FUN_001023b6", 
                "display_bfd", 
                "dcgettext"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102980", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "display_file"
        }, 
        "__errno_location": {
            "renaming": {}, 
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108018", 
            "calling": [
                "__errno_location"
            ], 
            "imported": false, 
            "current_name": "__errno_location"
        }, 
        "bfd_set_default_target": {
            "renaming": {}, 
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n", 
            "called": [
                "bfd_set_default_target"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102090", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "bfd_set_default_target"
        }, 
        "bfd_get_error": {
            "renaming": {}, 
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n", 
            "called": [
                "bfd_get_error"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102160", 
            "calling": [
                "display_bfd.cold", 
                "FUN_001023b6", 
                "main", 
                "bfd_nonfatal"
            ], 
            "imported": false, 
            "current_name": "bfd_get_error"
        }, 
        "xrealloc": {
            "renaming": {}, 
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n", 
            "called": [
                "xrealloc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102130", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "xrealloc"
        }, 
        "xmalloc_set_program_name": {
            "renaming": {}, 
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n", 
            "called": [
                "xmalloc_set_program_name"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102190", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "xmalloc_set_program_name"
        }, 
        "frame_dummy": {
            "renaming": {}, 
            "code": "\nvoid frame_dummy(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n", 
            "called": [
                "register_tm_clones"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103120", 
            "calling": [], 
            "imported": false, 
            "current_name": "frame_dummy"
        }, 
        "__cxa_finalize": {
            "renaming": {}, 
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001081e0", 
            "calling": [
                "__cxa_finalize"
            ], 
            "imported": false, 
            "current_name": "__cxa_finalize"
        }, 
        "display_bfd.cold": {
            "renaming": {}, 
            "code": "\n\n\nvoid display_bfd_cold(void)\n\n{\n  char cVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 *unaff_RBX;\n  undefined8 param_7;\n  \n  iVar2 = bfd_get_error();\n  if (iVar2 == 0xd) {\n    bfd_nonfatal(*unaff_RBX);\n    list_matching_formats(param_7);\n    return_code = 3;\n  }\n  else {\n    cVar1 = bfd_check_format_matches();\n    if (cVar1 == '\\0') {\n      bfd_nonfatal(*unaff_RBX);\n      iVar2 = bfd_get_error();\n      if (iVar2 == 0xd) {\n        list_matching_formats(param_7);\n      }\n      return_code = 3;\n    }\n    else {\n      print_sizes();\n      fwrite(\" (core file\",1,0xb,_stdout);\n      lVar3 = bfd_core_file_failing_command();\n      if (lVar3 != 0) {\n        printf(\" invoked as %s\",lVar3);\n      }\n      puts(\")\\n\");\n    }\n  }\n  return;\n}\n\n", 
            "called": [
                "bfd_core_file_failing_command", 
                "bfd_get_error", 
                "list_matching_formats", 
                "fwrite", 
                "bfd_check_format_matches", 
                "puts", 
                "printf", 
                "bfd_nonfatal", 
                "print_sizes"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001024d2", 
            "calling": [
                "display_bfd"
            ], 
            "imported": false, 
            "current_name": "display_bfd.cold"
        }, 
        "sysv_internal_sizer.cold": {
            "renaming": {}, 
            "code": "\nundefined8 sysv_internal_sizer_cold(void)\n\n{\n  undefined8 in_RAX;\n  undefined8 unaff_retaddr;\n  \n  svi_maxvma = in_RAX;\n  return unaff_retaddr;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001026ea", 
            "calling": [
                "sysv_internal_sizer"
            ], 
            "imported": false, 
            "current_name": "sysv_internal_sizer.cold"
        }, 
        "list_matching_formats": {
            "renaming": {}, 
            "code": "\n\n\nvoid list_matching_formats(long *param_1)\n\n{\n  undefined8 uVar1;\n  char *__format;\n  long *plVar2;\n  \n  fflush(_stdout);\n  uVar1 = program_name;\n  __format = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,__format,uVar1);\n  for (plVar2 = param_1; *plVar2 != 0; plVar2 = plVar2 + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(param_1);\n  fputc(10,_stderr);\n  return;\n}\n\n", 
            "called": [
                "free", 
                "fputc", 
                "fprintf", 
                "fflush", 
                "dcgettext"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x0010278c", 
            "calling": [
                "display_bfd.cold"
            ], 
            "imported": false, 
            "current_name": "list_matching_formats"
        }, 
        "textdomain": {
            "renaming": {}, 
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108058", 
            "calling": [
                "textdomain"
            ], 
            "imported": false, 
            "current_name": "textdomain"
        }, 
        "fread": {
            "renaming": {}, 
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108050", 
            "calling": [
                "fread"
            ], 
            "imported": false, 
            "current_name": "fread"
        }, 
        "bfd_init": {
            "renaming": {}, 
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n", 
            "called": [
                "bfd_init"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021c0", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "bfd_init"
        }, 
        "strerror": {
            "renaming": {}, 
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001081d0", 
            "calling": [
                "strerror"
            ], 
            "imported": false, 
            "current_name": "strerror"
        }, 
        "ferror": {
            "renaming": {}, 
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108040", 
            "calling": [
                "ferror"
            ], 
            "imported": false, 
            "current_name": "ferror"
        }, 
        "exit": {
            "renaming": {}, 
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001081a0", 
            "calling": [
                "exit"
            ], 
            "imported": false, 
            "current_name": "exit"
        }, 
        "bfd_check_format": {
            "renaming": {}, 
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n", 
            "called": [
                "bfd_check_format"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102310", 
            "calling": [
                "display_file", 
                "display_bfd"
            ], 
            "imported": false, 
            "current_name": "bfd_check_format"
        }, 
        "memmove": {
            "renaming": {}, 
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108160", 
            "calling": [
                "memmove"
            ], 
            "imported": false, 
            "current_name": "memmove"
        }, 
        "rprint_number.cold": {
            "renaming": {}, 
            "code": "\nvoid rprint_number_cold(void)\n\n{\n  int in_EAX;\n  uint unaff_EBX;\n  char *__format;\n  \n  __format = \"0x%lx\";\n  if (in_EAX == 1) {\n    __format = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,__format);\n  printf(\"%*s\",(ulong)unaff_EBX);\n  return;\n}\n\n", 
            "called": [
                "printf", 
                "sprintf"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102710", 
            "calling": [
                "rprint_number"
            ], 
            "imported": false, 
            "current_name": "rprint_number.cold"
        }, 
        "bfd_check_format_matches": {
            "renaming": {}, 
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n", 
            "called": [
                "bfd_check_format_matches"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001022c0", 
            "calling": [
                "display_bfd.cold", 
                "display_bfd"
            ], 
            "imported": false, 
            "current_name": "bfd_check_format_matches"
        }, 
        "size_number.cold": {
            "renaming": {}, 
            "code": "\nvoid size_number_cold(void)\n\n{\n  int in_EAX;\n  char *__format;\n  \n  __format = \"0x%lx\";\n  if (in_EAX == 1) {\n    __format = \"0%lo\";\n  }\n  sprintf(&stack0x00000000,__format);\n  strlen(&stack0x00000000);\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001026f6", 
            "calling": [
                "size_number"
            ], 
            "imported": false, 
            "current_name": "size_number.cold"
        }, 
        "setlocale": {
            "renaming": {}, 
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108150", 
            "calling": [
                "setlocale"
            ], 
            "imported": false, 
            "current_name": "setlocale"
        }, 
        "print_sizes.cold": {
            "renaming": {}, 
            "code": "\nvoid print_sizes_cold(void)\n\n{\n  undefined8 *in_RAX;\n  \n  printf(\" (ex %s)\",*in_RAX);\n  return;\n}\n\n", 
            "called": [
                "printf"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x0010259c", 
            "calling": [
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "print_sizes.cold"
        }, 
        "bfd_set_error": {
            "renaming": {}, 
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n", 
            "called": [
                "bfd_set_error"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102180", 
            "calling": [
                "FUN_001023b6"
            ], 
            "imported": false, 
            "current_name": "bfd_set_error"
        }, 
        "bindtextdomain": {
            "renaming": {}, 
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108078", 
            "calling": [
                "bindtextdomain"
            ], 
            "imported": false, 
            "current_name": "bindtextdomain"
        }, 
        "ftell": {
            "renaming": {}, 
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108110", 
            "calling": [
                "ftell"
            ], 
            "imported": false, 
            "current_name": "ftell"
        }, 
        "_start": {
            "renaming": {}, 
            "code": "\nvoid processEntry _start(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(main,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n", 
            "called": [
                "__libc_start_main", 
                "main"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103040", 
            "calling": [], 
            "imported": false, 
            "current_name": "_start"
        }, 
        "sysv_one_line": {
            "renaming": {}, 
            "code": "\nvoid sysv_one_line(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  printf(\"%-*s   \",(ulong)svi_namelen,param_1);\n  rprint_number(svi_sizelen,param_2);\n  printf(\"   \");\n  rprint_number(svi_vmalen,param_3);\n  putchar(10);\n  return;\n}\n\n", 
            "called": [
                "rprint_number", 
                "printf", 
                "putchar"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102fe0", 
            "calling": [
                "sysv_internal_printer", 
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "sysv_one_line"
        }, 
        "dcgettext": {
            "renaming": {}, 
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108080", 
            "calling": [
                "dcgettext"
            ], 
            "imported": false, 
            "current_name": "dcgettext"
        }, 
        "bfd_set_error_program_name": {
            "renaming": {}, 
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n", 
            "called": [
                "bfd_set_error_program_name"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102260", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "bfd_set_error_program_name"
        }, 
        "fputc": {
            "renaming": {}, 
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001080e8", 
            "calling": [
                "fputc"
            ], 
            "imported": false, 
            "current_name": "fputc"
        }, 
        "rprint_number": {
            "renaming": {}, 
            "code": "\nvoid rprint_number(ulong param_1,undefined8 param_2)\n\n{\n  char *__format;\n  char acStack_48 [56];\n  \n  if (radix == 0) {\n    sprintf(acStack_48,\"%lu\",param_2);\n    printf(\"%*s\",param_1 & 0xffffffff,acStack_48);\n  }\n  else {\n    __format = \"0x%lx\";\n    if (radix == 1) {\n      __format = \"0%lo\";\n    }\n    sprintf(acStack_48,__format,param_2);\n    printf(\"%*s\",param_1 & 0xffffffff,acStack_48);\n  }\n  return;\n}\n\n", 
            "called": [
                "rprint_number.cold", 
                "printf", 
                "sprintf"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102e90", 
            "calling": [
                "main", 
                "sysv_one_line", 
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "rprint_number"
        }, 
        "non_fatal": {
            "renaming": {}, 
            "code": "\nvoid non_fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n              undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n              undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n              undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL != '\\0') {\n    local_88 = param_1;\n    local_78 = param_2;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  local_d0 = &stack0x00000008;\n  local_d8 = 8;\n  local_c8 = local_b8;\n  local_d4 = 0x30;\n  local_b0 = param_10;\n  local_a8 = param_11;\n  local_a0 = param_12;\n  local_98 = param_13;\n  local_90 = param_14;\n  report(param_9,&local_d8);\n  return;\n}\n\n", 
            "called": [
                "report"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102f40", 
            "calling": [
                "display_file.cold", 
                "main", 
                "display_file"
            ], 
            "imported": false, 
            "current_name": "non_fatal"
        }, 
        "printf": {
            "renaming": {}, 
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108098", 
            "calling": [
                "printf"
            ], 
            "imported": false, 
            "current_name": "printf"
        }, 
        "bfd_openr": {
            "renaming": {}, 
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n", 
            "called": [
                "bfd_openr"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001020c0", 
            "calling": [
                "display_file"
            ], 
            "imported": false, 
            "current_name": "bfd_openr"
        }, 
        "fatal": {
            "renaming": {}, 
            "code": "\nvoid fatal(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n          undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n          undefined8 param_13,undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined8 uVar1;\n  char acStack_110 [48];\n  undefined4 local_d8;\n  undefined4 local_d4;\n  undefined *local_d0;\n  undefined *local_c8;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL != '\\0') {\n    local_88 = param_1;\n    local_78 = param_2;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  local_d0 = &stack0x00000008;\n  local_d8 = 8;\n  local_c8 = local_b8;\n  local_d4 = 0x30;\n  local_b0 = param_10;\n  local_a8 = param_11;\n  local_a0 = param_12;\n  local_98 = param_13;\n  local_90 = param_14;\n  report(param_9,&local_d8);\n  uVar1 = 1;\n  xexit(1);\n  if (radix == 0) {\n    __format = \"%lu\";\n  }\n  else {\n    __format = \"0x%lx\";\n    if (radix == 1) {\n      __format = \"0%lo\";\n    }\n  }\n  sprintf(acStack_110,__format,uVar1);\n  strlen(acStack_110);\n  return;\n}\n\n", 
            "called": [
                "report", 
                "xexit"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102db0", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "fatal"
        }, 
        "deregister_tm_clones": {
            "renaming": {}, 
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103083) */\n/* WARNING: Removing unreachable block (ram,0x0010308f) */\n\nvoid deregister_tm_clones(void)\n\n{\n  return;\n}\n\n", 
            "called": [
                "_ITM_deregisterTMCloneTable"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103070", 
            "calling": [
                "__do_global_dtors_aux"
            ], 
            "imported": false, 
            "current_name": "deregister_tm_clones"
        }, 
        "display_file.cold": {
            "renaming": {}, 
            "code": "\nvoid display_file_cold(void)\n\n{\n  int *piVar1;\n  undefined8 uVar2;\n  \n  piVar1 = __errno_location();\n  if (*piVar1 == 2) {\n    uVar2 = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(uVar2);\n  }\n  else {\n    strerror(*piVar1);\n    uVar2 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(uVar2);\n  }\n  return_code = 1;\n  return;\n}\n\n", 
            "called": [
                "non_fatal", 
                "__errno_location", 
                "strerror", 
                "dcgettext"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102360", 
            "calling": [
                "display_file"
            ], 
            "imported": false, 
            "current_name": "display_file.cold"
        }, 
        "__libc_start_main": {
            "renaming": {}, 
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108010", 
            "calling": [
                "_start"
            ], 
            "imported": false, 
            "current_name": "__libc_start_main"
        }, 
        "strtol": {
            "renaming": {}, 
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108128", 
            "calling": [
                "strtol"
            ], 
            "imported": false, 
            "current_name": "strtol"
        }, 
        "bfd_target_list": {
            "renaming": {}, 
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n", 
            "called": [
                "bfd_target_list"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102150", 
            "calling": [
                "usage"
            ], 
            "imported": false, 
            "current_name": "bfd_target_list"
        }, 
        "free": {
            "renaming": {}, 
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108000", 
            "calling": [
                "free"
            ], 
            "imported": false, 
            "current_name": "free"
        }, 
        "xexit": {
            "renaming": {}, 
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n", 
            "called": [
                "xexit"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102290", 
            "calling": [
                "main", 
                "print_sizes", 
                "fatal"
            ], 
            "imported": false, 
            "current_name": "xexit"
        }, 
        "bfd_nonfatal": {
            "renaming": {}, 
            "code": "\n\n\nvoid bfd_nonfatal(long param_1)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  undefined8 in_R10;\n  \n  iVar1 = bfd_get_error();\n  if (iVar1 == 0) {\n    uVar2 = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    uVar2 = bfd_errmsg(iVar1);\n  }\n  fflush(_stdout);\n  if (param_1 != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,param_1,uVar2,in_R10);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,uVar2,in_R10);\n  return;\n}\n\n", 
            "called": [
                "bfd_get_error", 
                "bfd_errmsg", 
                "bfd_nonfatal.cold"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103d20", 
            "calling": [
                "display_bfd.cold", 
                "FUN_001023b6", 
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "bfd_nonfatal"
        }, 
        "size_number": {
            "renaming": {}, 
            "code": "\nvoid size_number(undefined8 param_1)\n\n{\n  char *__format;\n  char acStack_38 [48];\n  \n  if (radix == 0) {\n    __format = \"%lu\";\n  }\n  else {\n    __format = \"0x%lx\";\n    if (radix == 1) {\n      __format = \"0%lo\";\n    }\n  }\n  sprintf(acStack_38,__format,param_1);\n  strlen(acStack_38);\n  return;\n}\n\n", 
            "called": [
                "strlen", 
                "size_number.cold", 
                "sprintf"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102e50", 
            "calling": [
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "size_number"
        }, 
        "fopen": {
            "renaming": {}, 
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108168", 
            "calling": [
                "fopen"
            ], 
            "imported": false, 
            "current_name": "fopen"
        }, 
        "register_tm_clones": {
            "renaming": {}, 
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001030c4) */\n/* WARNING: Removing unreachable block (ram,0x001030d0) */\n\nvoid register_tm_clones(void)\n\n{\n  return;\n}\n\n", 
            "called": [
                "_ITM_registerTMCloneTable"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001030a0", 
            "calling": [
                "frame_dummy"
            ], 
            "imported": false, 
            "current_name": "register_tm_clones"
        }, 
        "sysv_internal_sizer": {
            "renaming": {}, 
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nundefined8\nsysv_internal_sizer(undefined8 param_1,char **param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  char *pcVar1;\n  undefined8 in_RAX;\n  size_t sVar2;\n  \n  if (*(uint *)((long)param_2 + 0x24) != 0) {\n    if (((param_2 != (char **)0x108370) && ((*(uint *)((long)param_2 + 0x24) & 0x1000) == 0)) &&\n       (param_2 != (char **)0x108258)) {\n      pcVar1 = param_2[8];\n      sVar2 = strlen(*param_2);\n      if (svi_namelen < (int)sVar2) {\n        svi_namelen = (int)sVar2;\n      }\n      svi_total = svi_total + (long)pcVar1;\n      if (svi_maxvma < param_2[6]) {\n        svi_maxvma = param_2[6];\n      }\n    }\n    return param_4;\n  }\n  return in_RAX;\n}\n\n", 
            "called": [
                "strlen", 
                "sysv_internal_sizer.cold"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103c50", 
            "calling": [
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "sysv_internal_sizer"
        }, 
        "stat": {
            "renaming": {}, 
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108120", 
            "calling": [
                "stat"
            ], 
            "imported": false, 
            "current_name": "stat"
        }, 
        "berkeley_or_gnu_sum": {
            "renaming": {}, 
            "code": "\nvoid berkeley_or_gnu_sum(undefined8 param_1,long param_2)\n\n{\n  uint uVar1;\n  long lVar2;\n  \n  uVar1 = *(uint *)(param_2 + 0x24);\n  if ((uVar1 & 1) != 0) {\n    lVar2 = *(long *)(param_2 + 0x40);\n    if (((uVar1 & 0x10) != 0) || ((selected_output_format == 0 && ((uVar1 & 8) != 0)))) {\n      textsize = textsize + lVar2;\n      return;\n    }\n    if ((uVar1 & 0x100) != 0) {\n      datasize = datasize + lVar2;\n      return;\n    }\n    bsssize = bsssize + lVar2;\n  }\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102d70", 
            "calling": [
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "berkeley_or_gnu_sum"
        }, 
        "getopt_long": {
            "renaming": {}, 
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108090", 
            "calling": [
                "getopt_long"
            ], 
            "imported": false, 
            "current_name": "getopt_long"
        }, 
        "fclose": {
            "renaming": {}, 
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108068", 
            "calling": [
                "fclose"
            ], 
            "imported": false, 
            "current_name": "fclose"
        }, 
        "xstrdup": {
            "renaming": {}, 
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n", 
            "called": [
                "xstrdup"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001021a0", 
            "calling": [
                "main"
            ], 
            "imported": false, 
            "current_name": "xstrdup"
        }, 
        "bfd_errmsg": {
            "renaming": {}, 
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n", 
            "called": [
                "bfd_errmsg"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001022d0", 
            "calling": [
                "main", 
                "bfd_nonfatal"
            ], 
            "imported": false, 
            "current_name": "bfd_errmsg"
        }, 
        "fwrite": {
            "renaming": {}, 
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001081a8", 
            "calling": [
                "fwrite"
            ], 
            "imported": false, 
            "current_name": "fwrite"
        }, 
        "fprintf": {
            "renaming": {}, 
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108108", 
            "calling": [
                "fprintf"
            ], 
            "imported": false, 
            "current_name": "fprintf"
        }, 
        "puts": {
            "renaming": {}, 
            "code": "\n\n\n\nint puts(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* puts@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108038", 
            "calling": [
                "puts"
            ], 
            "imported": false, 
            "current_name": "puts"
        }, 
        "memcpy": {
            "renaming": {}, 
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00108130", 
            "calling": [
                "memcpy"
            ], 
            "imported": false, 
            "current_name": "memcpy"
        }, 
        "__do_global_dtors_aux": {
            "renaming": {}, 
            "code": "\nvoid __do_global_dtors_aux(void)\n\n{\n  if (completed_0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  completed_0 = 1;\n  return;\n}\n\n", 
            "called": [
                "deregister_tm_clones", 
                "__cxa_finalize"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001030e0", 
            "calling": [], 
            "imported": false, 
            "current_name": "__do_global_dtors_aux"
        }, 
        "_fini": {
            "renaming": {}, 
            "code": "\nvoid _fini(void)\n\n{\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103d80", 
            "calling": [], 
            "imported": false, 
            "current_name": "_fini"
        }, 
        "fputs": {
            "renaming": {}, 
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x001080a8", 
            "calling": [
                "fputs"
            ], 
            "imported": false, 
            "current_name": "fputs"
        }, 
        "report": {
            "renaming": {}, 
            "code": "\n\n\nvoid report(char *param_1,__gnuc_va_list param_2)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",program_name);\n  vfprintf(_stderr,param_1,param_2);\n  putc(10,_stderr);\n  return;\n}\n\n", 
            "called": [
                "vfprintf", 
                "fprintf", 
                "fflush", 
                "putc"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102ee0", 
            "calling": [
                "non_fatal", 
                "fatal"
            ], 
            "imported": false, 
            "current_name": "report"
        }, 
        "bfd_core_file_failing_command": {
            "renaming": {}, 
            "code": "\nvoid bfd_core_file_failing_command(void)\n\n{\n  bfd_core_file_failing_command();\n  return;\n}\n\n", 
            "called": [
                "bfd_core_file_failing_command"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00102060", 
            "calling": [
                "display_bfd.cold"
            ], 
            "imported": false, 
            "current_name": "bfd_core_file_failing_command"
        }, 
        "sysv_internal_printer": {
            "renaming": {}, 
            "code": "\nvoid sysv_internal_printer(undefined8 param_1,undefined8 *param_2)\n\n{\n  if ((((*(uint *)((long)param_2 + 0x24) != 0) && (param_2 != (undefined8 *)0x108370)) &&\n      ((*(uint *)((long)param_2 + 0x24) & 0x1000) == 0)) && (param_2 != (undefined8 *)0x108258)) {\n    svi_total = svi_total + param_2[8];\n    sysv_one_line(*param_2,param_2[8],param_2[6]);\n    return;\n  }\n  return;\n}\n\n", 
            "called": [
                "sysv_internal_printer.cold", 
                "sysv_one_line"
            ], 
            "skipped": false, 
            "tags": [], 
            "improved": true, 
            "entrypoint": "0x00103cc0", 
            "calling": [
                "print_sizes"
            ], 
            "imported": false, 
            "current_name": "sysv_internal_printer"
        }, 
        "FUN_00102020": {
            "renaming": {}, 
            "code": "\nvoid FUN_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n", 
            "called": [], 
            "skipped": false, 
            "tags": [], 
            "improved": false, 
            "entrypoint": "0x00102020", 
            "calling": [], 
            "imported": false, 
            "current_name": "FUN_00102020"
        }
    }, 
    "locked_functions": [], 
    "used_tokens": 0, 
    "layers": []
}