{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "initialize_data_00113dfe",
                "param_1": "size",
                "param_2": "value",
                "lVar1": "dataPtr"
            },
            "code": "\nvoid initializeData_00113dfe(undefined4 size,undefined value)\n\n{\n  long dataPtr;\n  \n  dataPtr = allocate_and_initialize_data_00112904(3,size);\n  if (dataPtr != 0) {\n    *(undefined *)(dataPtr + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_with_separator_0010ab4d",
                "param_1": "input_struct",
                "param_2": "string_param",
                "uVar1": "ptr_struct",
                "lVar2": "ptr_struct_2",
                "auVar3": "output_variable",
                "sVar4": "input_length",
                "pcVar5": "string_ptr",
                "sVar6": "string_length",
                "auVar7": "output_variable_2"
            },
            "code": "\nundefined  [16] appendStringWithSeparator_0010ab4d(long input_struct,char *string_param,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong ptr_struct;\n  long ptr_struct_2;\n  undefined output_variable [16];\n  size_t input_length;\n  char *string_ptr;\n  size_t string_length;\n  undefined output_variable_2 [16];\n  \n  ptr_struct = *(ulong *)(input_struct + 0x60);\n  if ((ptr_struct != 0) && (*(long *)(ptr_struct + 0x20) != 0)) {\n    string_ptr = *(char **)(ptr_struct + 0x30);\n    input_length = strlen(string_param);\n    if (string_ptr == (char *)0x0) {\n      string_ptr = (char *)xmalloc(input_length + 3);\n      *string_ptr = '\\0';\n    }\n    else {\n      string_length = strlen(string_ptr);\n      string_ptr = (char *)xrealloc(string_ptr,input_length + 4 + string_length);\n    }\n    input_length = strlen(string_ptr);\n    sprintf(string_ptr + input_length,\"%s::\",string_param);\n    ptr_struct_2 = *(long *)(input_struct + 0x60);\n    *(char **)(ptr_struct_2 + 0x30) = string_ptr;\n    output_variable_2._1_7_ = (undefined7)((ulong)ptr_struct_2 >> 8);\n    output_variable_2[0] = 1;\n    output_variable_2._8_8_ = param_4;\n    return output_variable_2;\n  }\n  output_variable._8_8_ = 0;\n  output_variable._0_8_ = ptr_struct;\n  return output_variable << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_string_with_separator_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_debug_name_type_0010c218",
                "param_1": "file_pointer",
                "param_2": "length",
                "param_3": "value",
                "uVar1": "error_message",
                "lVar2": "data_pointer",
                "pauVar3": "allocated_array",
                "lVar4": "result"
            },
            "code": "\n\n\nlong initialize_debug_name_type_0010c218(long file_pointer,long length,long value)\n\n{\n  undefined8 error_message;\n  long data_pointer;\n  undefined (*allocated_array) [16];\n  long result;\n  \n  if ((length != 0) && (value != 0)) {\n    if ((*(long *)(file_pointer + 8) == 0) || (*(long *)(file_pointer + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      data_pointer = allocate_and_initialize_data_00112904(0x16,0);\n      if (data_pointer != 0) {\n        allocated_array = (undefined (*) [16])xmalloc(0x10);\n        result = *(long *)(file_pointer + 0x10);\n        *allocated_array = ZEXT816(0);\n        *(long *)(*allocated_array + 8) = value;\n        *(undefined (**) [16])(data_pointer + 0x10) = allocated_array;\n        result = initialize_memory_00112925(result + 0x10,length,0,3);\n        if (result != 0) {\n          *(long *)(result + 0x20) = data_pointer;\n          *(long *)*allocated_array = result;\n          return data_pointer;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "initialize_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_00113fb0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = initialize_hash_table_00113f20();\n  DAT_00127a10 = initialize_hash_table_00113f20();\n  DAT_00127a28 = initialize_hash_table_00113f20();\n  DAT_00127a08 = initialize_hash_table_00113f20();\n  DAT_00127a00 = initialize_hash_table_00113f20();\n  DAT_001279f8 = initialize_hash_table_00113f20();\n  DAT_001279f0 = initialize_hash_table_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,hash_string_00108800,compare_strings_00108898);\n  DAT_001278e8 = initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_callbacks_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_info_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        initialize_data_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        check_function_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        check_function_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_info_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_binary_info_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = compare_strings_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = parse_driver_info_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = compare_strings_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = parse_driver_info_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_archive_files_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_file_with_error_handling_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = check_file_status_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_message_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    copy_archive_files_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_file_with_error_handling_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    initialize_data_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    check_function_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = parse_query_string_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    read_and_print_file_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_and_null_terminate_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_and_null_terminate_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_and_null_terminate_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = check_function_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = parse_query_string_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    load_and_process_file_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    load_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    check_function_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    load_and_process_file_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    load_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    check_function_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)check_function_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = check_function_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    load_and_process_file_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    load_and_process_file_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = parse_query_string_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    read_and_print_file_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    load_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "FUN_00114c20",
                "FUN_00119ed0",
                "FUN_00119970",
                "ftell",
                "FUN_00114690",
                "getc",
                "dcgettext",
                "FUN_001054af",
                "malloc",
                "FUN_00113f50",
                "htab_create_alloc",
                "FUN_00114d60",
                "filename_cmp",
                "FUN_00108d9a",
                "strerror",
                "FUN_00108898",
                "htab_find_slot",
                "FUN_00113fb0",
                "bfd_set_default_target",
                "xrealloc",
                "fread",
                "strchr",
                "FUN_00108800",
                "FUN_00119940",
                "memcpy",
                "free",
                "strcasecmp",
                "FUN_001199d0",
                "FUN_0011a480",
                "htab_elements",
                "xexit",
                "bfd_errmsg",
                "xmalloc",
                "bfd_get_error",
                "FUN_00114460",
                "FUN_00113f20",
                "fclose",
                "FUN_00113fe0",
                "textdomain",
                "bindtextdomain",
                "FUN_00115970",
                "fseek",
                "strlen",
                "strtoul",
                "FUN_00108c86",
                "strcpy",
                "strcmp",
                "bfd_set_error_program_name",
                "FUN_00114cf0",
                "close",
                "unlink_if_ordinary",
                "fprintf",
                "FUN_00114c80",
                "setlocale",
                "strncasecmp",
                "FUN_001126c0",
                "dup",
                "free",
                "memmove",
                "strncpy",
                "FUN_00114190",
                "xstrdup",
                "xmalloc_set_program_name",
                "FUN_0011a390",
                "getopt_long",
                "mkstemp",
                "FUN_00108916",
                "bfd_scan_arch",
                "fopen",
                "bfd_init",
                "FUN_00108a2a",
                "FUN_00119dd0",
                "xcalloc",
                "__errno_location",
                "strtol",
                "stat",
                "ferror"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockPointer",
                "param_2": "startAddress",
                "param_3": "unused1",
                "param_4": "unused2",
                "puVar1": "blockPtr1",
                "uVar2": "result",
                "puVar3": "allocatedMemory",
                "puVar4": "nextBlockPtr",
                "lVar5": "currentBlock",
                "puVar6": "lastBlockPtr",
                "puVar7": "currentMemory",
                "bVar8": "loopCounter",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockPointer,undefined8 startAddress,undefined8 unused1,undefined8 unused2)\n\n{\n  undefined8 *blockPtr1;\n  undefined8 result;\n  undefined4 *allocatedMemory;\n  undefined8 *nextBlockPtr;\n  long currentBlock;\n  undefined8 *lastBlockPtr;\n  undefined4 *currentMemory;\n  byte loopCounter;\n  undefined returnValue [16];\n  \n  loopCounter = 0;\n  if ((*(long *)(blockPointer + 8) == 0) || (*(long *)(blockPointer + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    allocatedMemory = (undefined4 *)xmalloc(0x30);\n    currentMemory = allocatedMemory;\n    for (currentBlock = 0xc; currentBlock != 0; currentBlock = currentBlock + -1) {\n      *currentMemory = 0;\n      currentMemory = currentMemory + (ulong)loopCounter * -2 + 1;\n    }\n    currentBlock = *(long *)(blockPointer + 0x20);\n    *(undefined8 *)(allocatedMemory + 6) = startAddress;\n    *(undefined8 *)(allocatedMemory + 8) = 0xffffffffffffffff;\n    *(long *)(allocatedMemory + 2) = currentBlock;\n    blockPtr1 = *(undefined8 **)(currentBlock + 0x10);\n    lastBlockPtr = (undefined8 *)(currentBlock + 0x10);\n    while (nextBlockPtr = blockPtr1, nextBlockPtr != (undefined8 *)0x0) {\n      lastBlockPtr = nextBlockPtr;\n      blockPtr1 = (undefined8 *)*nextBlockPtr;\n    }\n    *lastBlockPtr = allocatedMemory;\n    result = 1;\n    *(undefined4 **)(blockPointer + 0x20) = allocatedMemory;\n  }\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00115dc0",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_formatted_string_0010ba08",
                "param_1": "args",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "cVar1": "flag",
                "iVar2": "length",
                "lVar3": "offset",
                "__s": "extractedValue",
                "sVar4": "arg1Length",
                "sVar5": "fieldNameLength",
                "sVar6": "extractedValueLength",
                "__s_00": "formattedString",
                "uVar7": "warningMessage",
                "uVar8": "result",
                "pcVar9": "path"
            },
            "code": "\nundefined8\ngenerateFormattedString_0010ba08(undefined8 *args,char *fieldName,undefined8 param3,ulong param4,int param5)\n\n{\n  char flag;\n  int length;\n  long offset;\n  char *extractedValue;\n  size_t arg1Length;\n  size_t fieldNameLength;\n  size_t extractedValueLength;\n  char *formattedString;\n  undefined8 warningMessage;\n  undefined8 result;\n  char *path;\n  \n  flag = *(char *)(args[0xc] + 0x1c);\n  length = *(int *)(args[0xc] + 0x18);\n  extractedValue = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  if (*(char **)(args[0xc] + 0x20) == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    arg1Length = strlen(*(char **)(args[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    extractedValueLength = strlen(extractedValue);\n    formattedString = (char *)xmalloc(arg1Length + 0x32 + fieldNameLength + extractedValueLength);\n    if (param5 == 1) {\n      path = \"/1\";\n    }\n    else {\n      path = \"/0\";\n      if ((param5 != 2) && (path = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((param4 == 0) && (param4 = (ulong)(uint)(length * 8), param4 == 0)) {\n      result = *(undefined8 *)*args;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message_00119ed0(warningMessage,result,fieldName);\n    }\n    sprintf(formattedString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(args[0xc] + 0x20),fieldName,path,extractedValue,\n            param3,param4);\n    free(*(void **)(args[0xc] + 0x20));\n    offset = args[0xc];\n    *(char **)(offset + 0x20) = formattedString;\n    if (flag != '\\0') {\n      *(undefined *)(offset + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)offset >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "abort",
                "xmalloc",
                "strlen",
                "dcgettext",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "format_and_store_data_0010aa53",
                "param_1": "ptr1",
                "param_2": "data",
                "param_3": "flag",
                "param_4": "status",
                "cVar1": "ptr1Flag",
                "__s": "extractedString",
                "sVar5": "stringLength",
                "pcVar6": "formattedString",
                "cVar3": "statusStr",
                "lVar2": "ptr1Copy",
                "uVar8": "result",
                "uVar9": "index",
                "uVar10": "lastIndex",
                "uVar4": "count",
                "lVar7": "reallocResult"
            },
            "code": "\nundefined8 formatAndStoreData_0010aa53(long ptr1,undefined8 data,char flag,int status)\n\n{\n  char ptr1Flag;\n  long ptr1Copy;\n  char statusStr;\n  uint count;\n  char *extractedString;\n  size_t stringLength;\n  char *formattedString;\n  long reallocResult;\n  undefined8 result;\n  ulong index;\n  ulong lastIndex;\n  \n  ptr1Flag = *(char *)(*(long *)(ptr1 + 0x60) + 0x1c);\n  extractedString = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  stringLength = strlen(extractedString);\n  formattedString = (char *)xmalloc(stringLength + 0x19);\n  *formattedString = flag + '0';\n  if (status == 1) {\n    statusStr = '1';\n  }\n  else {\n    statusStr = '0';\n    if ((status != 2) && (statusStr = '2', status != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedString[1] = statusStr;\n  sprintf(formattedString + 2,\"%ld,%s;\",data);\n  free(extractedString);\n  ptr1Copy = *(long *)(ptr1 + 0x60);\n  result = 0;\n  if ((ptr1Copy != 0) && (*(long *)(ptr1Copy + 0x20) != 0)) {\n    ptr1Copy = *(long *)(ptr1Copy + 0x28);\n    lastIndex = 0;\n    if (ptr1Copy != 0) {\n      count = 0;\n      do {\n        index = (ulong)count;\n        lastIndex = (ulong)count;\n        count = count + 1;\n      } while (*(long *)(ptr1Copy + index * 8) != 0);\n    }\n    reallocResult = xrealloc(ptr1Copy,(ulong)((int)lastIndex + 2) << 3);\n    *(char **)(reallocResult + lastIndex * 8) = formattedString;\n    *(undefined8 *)(reallocResult + (ulong)((int)lastIndex + 1) * 8) = 0;\n    ptr1Copy = *(long *)(ptr1 + 0x60);\n    *(long *)(ptr1Copy + 0x28) = reallocResult;\n    if (ptr1Flag != '\\0') {\n      *(undefined *)(ptr1Copy + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_store_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "analyze_debug_record_0011173a",
                "param_1": "debugRecord",
                "param_2": "debugInfo",
                "param_3": "recordType",
                "param_4": "recordIndex",
                "param_5": "recordOffset",
                "param_6": "recordString",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "pointer",
                "cVar3": "charVar2",
                "uVar4": "undefinedVar",
                "iVar5": "intVar1",
                "puVar6": "pointerVar1",
                "plVar7": "longVar1",
                "pcVar8": "pointerCharVar1",
                "uVar9": "undefinedVar2",
                "lVar10": "longVar2",
                "lVar11": "longVar3",
                "lVar12": "longVar4",
                "pplVar13": "pointerPointerVar1",
                "uVar14": "ulongVar1",
                "uVar15": "ulongVar2",
                "pcVar16": "pointerCharVar2",
                "uVar17": "uintVar1",
                "dVar19": "doubleVar1",
                "local_48": "localPointerCharVar1",
                "local_40": "localArrayPointer"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined analyzeDebugRecord_0011173a(undefined8 debugRecord,long *debugInfo,int recordType,int recordIndex,ulong recordOffset,\n                      char *recordString)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *pointer;\n  char charVar2;\n  undefined undefinedVar;\n  int intVar1;\n  undefined8 *pointerVar1;\n  long *longVar1;\n  char *pointerCharVar1;\n  undefined8 undefinedVar2;\n  long longVar2;\n  long longVar3;\n  long longVar4;\n  long **pointerPointerVar1;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *pointerCharVar2;\n  uint uintVar1;\n  long **pplVar18;\n  double doubleVar1;\n  char *localPointerCharVar1;\n  long **localArrayPointer [2];\n  \n  if (debugInfo[4] != 0) {\n    if (((recordType == 100) && (*recordString != '\\0')) && (debugInfo[5] == recordOffset)) goto LAB_00111a06;\n    charVar2 = initialize_debug_info_0010bbd3(debugRecord);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugInfo + 0x44) = 0;\n    *(undefined4 *)(debugInfo + 8) = 0;\n    debugInfo[9] = debugInfo[4];\n    if (*(char *)(debugInfo + 1) == '\\0') {\n      debugInfo[6] = debugInfo[5];\n    }\n    *(undefined4 *)(debugInfo + 0x10) = 1;\n    pointerVar1 = (undefined8 *)xmalloc(8);\n    debugInfo[0x11] = (long)pointerVar1;\n    *pointerVar1 = 0;\n    debugInfo[4] = 0;\n  }\n  strlen(recordString);\n  if (recordType == 0x84) {\nLAB_00111ab7:\n    undefinedVar = debug_start_source_00108f08(debugRecord,recordString);\n    return undefinedVar;\n  }\n  if (recordType < 0x85) {\n    if (recordType == 0x3c) {\n      intVar1 = strcmp(recordString,\"gcc2_compiled.\");\n      if (intVar1 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 2;\n        return 1;\n      }\n      intVar1 = strcmp(recordString,\"gcc_compiled.\");\n      if (intVar1 == 0) {\n        *(undefined4 *)(debugInfo + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugInfo + 0x44) = 1;\n      return 1;\n    }\n    if (recordType < 0x3d) {\n      if (recordType == 0x24) {\n        if (*recordString == '\\0') {\n          if (*(char *)(debugInfo + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugInfo + 1) != '\\0') {\n            recordOffset = recordOffset + debugInfo[7];\n          }\n          charVar2 = update_debug_record_0010c1c6(debugRecord,debugInfo);\n          if (charVar2 != '\\0') {\n            charVar2 = end_function_debugging_0010be1a(debugRecord,recordOffset);\n            if (charVar2 != '\\0') {\n              *(undefined *)(debugInfo + 0xc) = 0;\n              debugInfo[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugInfo + 0xc) != '\\0') &&\n           ((recordOffset < (ulong)debugInfo[0xd] || (debugInfo[0xd] == 0xffffffffffffffff)))) {\n          debugInfo[0xd] = recordOffset;\n        }\n      }\n      else if (recordType < 0x25) {\n        if (recordType == 0xc) {\n          return 1;\n        }\n        if (recordType - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (recordType == 0x2a) {\n          return 1;\n        }\n        if (recordType == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (recordType == 100) {\nLAB_00111a06:\n        if (*(char *)(debugInfo + 0xc) != '\\0') {\n          ulongVar1 = recordOffset;\n          if (((*recordString != '\\0') && (ulongVar2 = debugInfo[0xd], ulongVar2 != 0xffffffffffffffff)) &&\n             (ulongVar1 = ulongVar2, recordOffset < ulongVar2)) {\n            ulongVar1 = recordOffset;\n          }\n          charVar2 = update_debug_record_0010c1c6(debugRecord,debugInfo);\n          if (charVar2 == '\\0') {\n            return 0;\n          }\n          charVar2 = end_function_debugging_0010be1a(debugRecord,ulongVar1);\n          if (charVar2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugInfo + 0xc) = 0;\n          debugInfo[0xd] = -1;\n        }\n        if (*recordString == '\\0') {\n          return 1;\n        }\n        pointer = (void *)debugInfo[4];\n        if (pointer == (void *)0x0) {\n          longVar4 = xstrdup(recordString);\n          debugInfo[4] = longVar4;\n        }\n        else {\n          if (*recordString == '/') {\n            longVar4 = xstrdup(recordString);\n          }\n          else {\n            longVar4 = concat(pointer,recordString,0);\n          }\n          debugInfo[4] = longVar4;\n          free(pointer);\n        }\n        debugInfo[5] = recordOffset;\n        return 1;\n      }\n      if (recordType < 0x65) {\n        if (recordType == 0x44) {\n          longVar4 = 0;\n          if (*(char *)(debugInfo + 0xc) != '\\0') {\n            longVar4 = debugInfo[7];\n          }\n          undefinedVar = record_line_debug_info_0010bf86(debugRecord,(long)recordIndex,longVar4 + recordOffset);\n          return undefinedVar;\n        }\n        if (recordType == 0x62) {\n          return 1;\n        }\n      }\n      else if (recordType == 0x82) {\n        longVar1 = (long *)xmalloc();\n        intVar1 = *(int *)(debugInfo + 0x10);\n        longVar2 = debugInfo[10];\n        longVar3 = debugInfo[0xb];\n        longVar1[5] = 0;\n        longVar4 = debugInfo[0x11];\n        *(int *)(longVar1 + 4) = intVar1;\n        uintVar1 = intVar1 + 1;\n        *(uint *)(debugInfo + 0x10) = uintVar1;\n        *longVar1 = longVar3;\n        longVar1[1] = longVar2;\n        longVar1[2] = (long)recordString;\n        longVar1[3] = recordOffset;\n        debugInfo[10] = (long)longVar1;\n        debugInfo[0xb] = (long)longVar1;\n        longVar4 = xrealloc(longVar4,(ulong)uintVar1 << 3);\n        uintVar1 = *(uint *)(longVar1 + 4);\n        debugInfo[0x11] = longVar4;\n        *(undefined8 *)(longVar4 + (ulong)uintVar1 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pointerCharVar1 = strchr(recordString,0x3a);\n    if ((pointerCharVar1 != (char *)0x0) && ((pointerCharVar1[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugInfo + 0xc) != '\\0') {\n        ulongVar1 = debugInfo[0xd];\n        ulongVar2 = recordOffset;\n        if ((ulongVar1 != 0xffffffffffffffff) && (ulongVar2 = ulongVar1, recordOffset < ulongVar1)) {\n          ulongVar2 = recordOffset;\n        }\n        charVar2 = update_debug_record_0010c1c6(debugRecord,debugInfo);\n        if (charVar2 == '\\0') {\n          return 0;\n        }\n        charVar2 = end_function_debugging_0010be1a(debugRecord,ulongVar2);\n        if (charVar2 == '\\0') {\n          return 0;\n        }\n        debugInfo[0xd] = -1;\n      }\n      if (*(char *)(debugInfo + 1) != '\\0') {\n        debugInfo[7] = recordOffset;\n      }\n      *(undefined *)(debugInfo + 0xc) = 1;\n    }\n    localPointerCharVar1 = strchr(recordString,0x3a);\n    if (localPointerCharVar1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localPointerCharVar1[1] == ':') goto code_r0x00111cc7;\n    if (*recordString == '$') {\n      charVar2 = recordString[1];\n      pointerCharVar2 = \"eh_throw\";\n      if (charVar2 != 'e') {\n        if (charVar2 < 'f') {\n          if ((charVar2 != 'X') && (charVar2 != '_')) {\nLAB_00111d1a:\n            undefinedVar2 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_message_00108fe8(recordString,undefinedVar2);\n          }\n        }\n        else {\n          pointerCharVar2 = \"this\";\n          if (charVar2 == 't') goto LAB_00111d62;\n          if (charVar2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pointerCharVar2 = (char *)0x0;\n      if ((recordString != localPointerCharVar1) && ((*recordString != ' ' || (localPointerCharVar1 != recordString + 1)))) {\n        pointerCharVar2 = (char *)copy_and_null_terminate_string_00109a0b(recordString,(int)localPointerCharVar1 - (int)recordString);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localPointerCharVar1[1];\n    pointerCharVar1 = localPointerCharVar1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    pointerCharVar1 = localPointerCharVar1 + 2;\n    charVar2 = localPointerCharVar1[1];\n    switch(charVar2) {\n    case 'C':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      pointerCharVar1 = \"debug_record_label: not implemented\";\n      if (longVar4 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      charVar2 = record_debug_function_0010bc80(debugRecord,pointerCharVar2,longVar4,charVar2 == 'F',recordOffset);\n      if (charVar2 != '\\0') {\n        do {\n          if (*localPointerCharVar1 != ';') {\n            return 1;\n          }\n          localPointerCharVar1 = localPointerCharVar1 + 1;\n          longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n        } while (longVar4 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (pointerCharVar2 == (char *)0x0) goto LAB_0011208f;\n      longVar2 = debugInfo[3];\n      longVar1 = (long *)debugInfo[2];\n      charVar2 = *(char *)(*(long *)(*debugInfo + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (recordType == 0x24) {\n        localPointerCharVar1 = pointerCharVar1;\n        do {\n          if (*localPointerCharVar1 != ';') {\n            return 1;\n          }\n          localPointerCharVar1 = localPointerCharVar1 + 1;\n          longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n        } while (longVar4 != 0);\n        return 0;\n      }\n    case 'R':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 2;\n      break;\n    case 'S':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar2 = localPointerCharVar1[2];\n      if (charVar2 == 't') {\n        pointerCharVar1 = localPointerCharVar1 + 3;\n      }\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,pointerCharVar2,&localPointerCharVar1,localArrayPointer);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (pointerCharVar2 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(debugInfo + 0x35);\n      longVar1 = (long *)check_debug_tag_type_0010c6be(debugRecord,pointerCharVar2,longVar4);\n      if (longVar1 == (long *)0x0) {\n        return 0;\n      }\n      if (localArrayPointer[0] != (long **)0x0) {\n        *localArrayPointer[0] = longVar1;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      pointerPointerVar1 = (long **)(debugInfo + 0x34);\n      pplVar18 = (long **)debugInfo[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pointerCharVar1 = localPointerCharVar1 + 3;\n      if (((localPointerCharVar1[2] != '\\0') && (pointerCharVar1 = localPointerCharVar1 + 4, localPointerCharVar1[3] == 'n')) &&\n         (pointerCharVar1 = localPointerCharVar1 + 5, pointerCharVar2 = localPointerCharVar1 + 4, localPointerCharVar1 = pointerCharVar1, *pointerCharVar2 == '0')) {\n        for (; pointerCharVar1 = localPointerCharVar1, *localPointerCharVar1 != '\\0'; localPointerCharVar1 = localPointerCharVar1 + 1) {\n          if (*localPointerCharVar1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 4;\n      break;\n    case 'c':\n      if (localPointerCharVar1[2] == '=') {\n        pointerCharVar1 = localPointerCharVar1 + 4;\n        charVar2 = localPointerCharVar1[3];\n        localPointerCharVar1 = pointerCharVar1;\n        if (charVar2 == 'i') {\n          longVar4 = strtol(pointerCharVar1,(char **)0x0,10);\n          if (pointerCharVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar2 = initialize_memory_if_valid_00112996(debugRecord,pointerCharVar2,4);\n          if (longVar2 != 0) {\n            *(long *)(longVar2 + 0x20) = (long)(int)longVar4;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar2 == 'r') {\n          doubleVar1 = strtod(pointerCharVar1,(char **)0x0);\n          if (pointerCharVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar4 = initialize_memory_if_valid_00112996(debugRecord,pointerCharVar2,5);\n          if (longVar4 != 0) {\n            *(double *)(longVar4 + 0x20) = doubleVar1;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar2 == 'e') {\n          longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n          if (longVar4 == 0) {\n            return 0;\n          }\n          pointerCharVar1 = localPointerCharVar1;\n          if (*localPointerCharVar1 == ',') {\n            longVar2 = strtol(localPointerCharVar1,(char **)0x0,10);\n            if (pointerCharVar2 == (char *)0x0) {\n              return 0;\n            }\n            longVar3 = initialize_memory_if_valid_00112996(debugRecord,pointerCharVar2,6);\n            if (longVar3 != 0) {\n              longVar1 = (long *)xmalloc(0x10);\n              *longVar1 = longVar4;\n              longVar1[1] = (long)(int)longVar2;\n              *(long **)(longVar3 + 0x20) = longVar1;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localPointerCharVar1[2] == 'F') {\n        localPointerCharVar1 = localPointerCharVar1 + 3;\n        longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n        if (longVar4 == 0) {\n          return 0;\n        }\n        undefinedVar2 = allocate_and_initialize_00113ce0(longVar4,0,0);\n        longVar4 = allocate_or_return_ptr_00113d3a(undefinedVar2);\n      }\n      else {\n        localPointerCharVar1 = pointerCharVar1;\n        longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      }\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 1;\n      break;\n    case 'r':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 5;\nLAB_001123e8:\n      charVar2 = allocate_or_update_memory_0010c139(debugRecord,debugInfo,pointerCharVar2,longVar4,undefinedVar2,recordOffset);\n      goto joined_r0x001123f8;\n    case 't':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,pointerCharVar2,&localPointerCharVar1,localArrayPointer);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (pointerCharVar2 == (char *)0x0) {\n        return 1;\n      }\n      longVar1 = (long *)initialize_debug_name_type_0010c218(debugRecord,pointerCharVar2,longVar4);\n      if (longVar1 == (long *)0x0) {\n        return 0;\n      }\n      if (localArrayPointer[0] == (long **)0x0) {\n        return 1;\n      }\n      *localArrayPointer[0] = longVar1;\n      return 1;\n    case 'v':\n      localPointerCharVar1 = pointerCharVar1;\n      longVar4 = FUNC_0010ee3f(debugRecord,debugInfo,0,&localPointerCharVar1,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 3;\n    }\n    charVar2 = record_parameter_0010bd62(debugRecord,pointerCharVar2,longVar4,undefinedVar2,recordOffset);\n    goto joined_r0x001123f8;\n  }\n  if (recordType == 0xe0) {\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (recordIndex == 1)) {\n      return 1;\n    }\n    charVar2 = update_debug_record_0010c1c6(debugRecord,debugInfo);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    charVar2 = close_debug_block_0010bf20(debugRecord,debugInfo[7] + debugInfo[6] + recordOffset);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    debugInfo = debugInfo + 0xe;\n    *(int *)debugInfo = *(int *)debugInfo + -1;\n    pointerCharVar1 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugInfo) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < recordType) {\n      if (recordType == 0xe2) {\n        pointerCharVar1 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pointerCharVar1 = \"debug_end_common_block: not implemented\";\n        if (recordType != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar2 = dcgettext(0,pointerCharVar1,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar2);\n      return 0;\n    }\n    if (recordType != 0xc0) {\n      if (recordType == 0xc2) {\n        intVar1 = *(int *)(debugInfo + 0x10);\n        *(uint *)(debugInfo + 0x10) = intVar1 + 1U;\n        longVar4 = xrealloc(debugInfo[0x11],(ulong)(intVar1 + 1U) << 3);\n        pointerVar1 = (undefined8 *)debugInfo[0xb];\n        debugInfo[0x11] = longVar4;\n        while( true ) {\n          if (pointerVar1 == (undefined8 *)0x0) {\n            undefinedVar2 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_message_00108fe8(recordString,undefinedVar2);\n            *(undefined8 *)(debugInfo[0x11] + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((recordOffset == pointerVar1[3]) && (intVar1 = strcmp((char *)pointerVar1[2],recordString), intVar1 == 0))\n          break;\n          pointerVar1 = (undefined8 *)*pointerVar1;\n        }\n        *(undefined8 *)(longVar4 + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = pointerVar1[5];\n        return 1;\n      }\n      if (recordType == 0xa2) {\n        longVar4 = debugInfo[10];\n        if (longVar4 != 0) {\n          longVar2 = *(long *)(longVar4 + 8);\n          uintVar1 = *(uint *)(longVar4 + 0x20);\n          debugInfo[10] = longVar2;\n          if ((uintVar1 < *(uint *)(debugInfo + 0x10)) &&\n             (*(undefined8 *)(longVar4 + 0x28) = *(undefined8 *)(debugInfo[0x11] + (ulong)uintVar1 * 8),\n             longVar2 != 0)) {\n            recordString = *(char **)(longVar2 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        recordString = (char *)debugInfo[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (recordIndex == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugInfo + 0xc) != '\\0') {\n      charVar2 = start_debug_block_0010be88(debugRecord,debugInfo[7] + debugInfo[6] + recordOffset);\n      if (charVar2 == '\\0') {\n        return 0;\n      }\n      charVar2 = update_debug_record_0010c1c6(debugRecord,debugInfo);\n      if (charVar2 != '\\0') {\n        *(int *)(debugInfo + 0xe) = *(int *)(debugInfo + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pointerCharVar1 = \"N_LBRAC not within function\\n\";\n  }\n  pointerCharVar1 = (char *)dcgettext(0,pointerCharVar1,5);\n  fprintf(_stderr,pointerCharVar1);\n  return 0;\ncode_r0x00111cc7:\n  localPointerCharVar1 = localPointerCharVar1 + 2;\n  localPointerCharVar1 = strchr(localPointerCharVar1,0x3a);\n  if (localPointerCharVar1 == (char *)0x0) {\n    pointerCharVar1 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localPointerCharVar1 = pointerCharVar1;\n    print_bad_stab_00108fb9(recordString);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar2 != 't') {\n      return 1;\n    }\n    longVar1 = (long *)initialize_debug_name_type_0010c218(debugRecord,pointerCharVar2,longVar1);\n    if (longVar1 != (long *)0x0) {\n      if (localArrayPointer[0] == (long **)0x0) {\n        return 1;\n      }\n      *localArrayPointer[0] = longVar1;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pointerCharVar2) &&\n     (intVar1 = strcmp((char *)pplVar18[1],pointerCharVar2), intVar1 == 0)) {\n    pplVar18[3] = longVar1;\n    *pointerPointerVar1 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pointerPointerVar1 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar2 < 1) {\nLAB_0011208f:\n    undefinedVar2 = 1;\nLAB_001121c4:\n    charVar2 = debug_record_variable_0010c05d(debugRecord,pointerCharVar2,longVar4,undefinedVar2,recordOffset);\njoined_r0x001123f8:\n    if (charVar2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pointerCharVar1 = *(char **)(*longVar1 + 8);\n  if ((charVar2 != '\\0') && (charVar2 == *pointerCharVar1)) {\n    pointerCharVar1 = pointerCharVar1 + 1;\n  }\n  if ((*pointerCharVar1 == *pointerCharVar2) && (intVar1 = strcmp(pointerCharVar1,pointerCharVar2), intVar1 == 0)) {\n    recordOffset = *(long *)(*longVar1 + 0x10) + *(long *)(*(long *)(*longVar1 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar2 = longVar2 + -1;\n  longVar1 = longVar1 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "strlen",
                "dcgettext",
                "FUN_0010bf86",
                "strtod",
                "FUN_00112996",
                "strcmp",
                "FUN_0010ee3f",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00108f08",
                "xrealloc",
                "strchr",
                "free",
                "FUN_0010c6be",
                "FUN_0010c139",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "xstrdup",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "xmalloc",
                "strtol",
                "FUN_00113d3a",
                "FUN_0010bf20",
                "FUN_0010c218",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_debug_record_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "binaryHandle",
                "param_2": "binaryData",
                "param_3": "binarySize",
                "cVar1": "isSectionValid",
                "iVar2": "errorCode",
                "uVar3": "errorMessage",
                "lVar4": "relocUpperBound",
                "puVar5": "relocTable",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "relocDestination",
                "puVar8": "relocDestinationNext",
                "uVar9": "index",
                "uStack_38": "unusedVariable"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 binaryHandle,undefined8 *binaryData,long binarySize)\n\n{\n  char isSectionValid;\n  int errorCode;\n  undefined8 errorMessage;\n  long relocUpperBound;\n  undefined8 *relocTable;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *relocDestination;\n  undefined8 *relocDestinationNext;\n  ulong index;\n  undefined8 unusedVariable;\n  \n  isSectionValid = check_section_and_compare_00115f50(binaryHandle,binaryData,0);\n  if (isSectionValid != '\\0') {\n    return;\n  }\n  errorMessage = binaryData[0xc];\n  if ((((*(byte *)(binarySize + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (relocUpperBound = check_function_00114190(*binaryData,0,0x100), relocUpperBound == 0)) {\n    relocUpperBound = bfd_get_reloc_upper_bound(binaryHandle,binaryData);\n    if (relocUpperBound < 0) {\n      if ((relocUpperBound != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a40 = 1;\n        errorMessage = 0;\nLAB_00108315:\n        print_error_message_001126c0(0,binaryHandle,binaryData,errorMessage,unusedVariable);\n        return;\n      }\n    }\n    else if (relocUpperBound != 0) {\n      relocTable = (undefined8 *)binaryData[0xe];\n      if (relocTable == (undefined8 *)0x0) {\n        relocTable = (undefined8 *)bfd_alloc(binarySize);\n        if (relocTable == (undefined8 *)0x0) {\n          print_error_message_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(binaryHandle,binaryData,relocTable,DAT_001278d0);\n        if ((long)relocCount < 0) {\n          DAT_00127a40 = 1;\n          errorMessage = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(binaryData + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        relocDestination = relocTable;\n        for (index = 0; index != relocCount; index = index + 1) {\n          relocDestinationNext = relocDestination;\n          if (((*(long **)relocTable[index] != (long *)0x0) &&\n              (relocUpperBound = **(long **)relocTable[index], relocUpperBound != 0)) &&\n             (isSectionValid = check_pattern_match_00115d70(*(undefined8 *)(relocUpperBound + 8),DAT_00127a28), isSectionValid != '\\0')) {\n            relocDestinationNext = relocDestination + 1;\n            *relocDestination = relocTable[index];\n          }\n          relocDestination = relocDestinationNext;\n        }\n        *relocDestination = 0;\n        relocCount = (long)relocDestination - (long)relocTable >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(binarySize + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocTable = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocTable = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(binarySize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(binarySize,errorMessage,relocTable,relocCount);\n  return;\n}\n\n",
            "called": [
                "FUN_001082df",
                "FUN_00115f50",
                "xexit",
                "bfd_alloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00114190",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "FUN_0011a110",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_validate_input_0010d559",
                "param_1": "input_data",
                "param_2": "byte_array",
                "param_3": "output_length",
                "bVar1": "first_byte",
                "pbVar2": "byte_ptr",
                "cVar3": "result",
                "uVar4": "parsed_int",
                "iVar5": "comparison_result",
                "ppcVar6": "additional_data",
                "sVar7": "string_length",
                "lVar8": "search_result",
                "plVar9": "type_ptr",
                "pcVar10": "string_ptr",
                "__s1": "comparison_string",
                "__ptr": "temp_ptr",
                "pbVar11": "updated_byte_ptr",
                "uVar12": "type_flag",
                "local_64": "loop_counter",
                "local_40": "string_array"
            },
            "code": "\nundefined8 parse_and_validate_input_0010d559(undefined8 *input_data,byte **byte_array,long *output_length)\n\n{\n  byte first_byte;\n  byte *byte_ptr;\n  char result;\n  uint parsed_int;\n  int comparison_result;\n  char **additional_data;\n  size_t string_length;\n  long search_result;\n  long *type_ptr;\n  char *string_ptr;\n  char *comparison_string;\n  void *temp_ptr;\n  byte *updated_byte_ptr;\n  undefined8 type_flag;\n  byte *__nptr;\n  int loop_counter;\n  char *string_array [2];\n  \n  byte_ptr = *byte_array;\n  first_byte = byte_ptr[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    loop_counter = (char)first_byte + -0x30;\n    if (byte_ptr[2] == 0x5f) {\n      *byte_array = byte_ptr + 1;\n    }\n    updated_byte_ptr = *byte_array + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)byte_ptr[2] * 2] & 4) == 0)) ||\n       (byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = byte_ptr + 2;\n    search_result = strtol((char *)__nptr,(char **)0x0,10);\n    loop_counter = (int)search_result;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    updated_byte_ptr = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_array = updated_byte_ptr;\n  additional_data = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    additional_data = string_array;\n  }\n  search_result = 0;\n  while( true ) {\n    while( true ) {\n      loop_counter = loop_counter + -1;\n      if (loop_counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = search_result;\n        }\n        return 1;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n      }\n      if (**byte_array != 0x74) break;\n      result = parse_input_0010d21c(input_data,byte_array,additional_data);\n      string_ptr = string_array[0];\n      if (result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(string_array[0]);\n        search_result = find_string_in_data_structures_0010afd5(*input_data,input_data[1],string_ptr,string_length & 0xffffffff,9);\n        free(string_ptr);\n        if (search_result == 0) {\n          return 0;\n        }\n      }\n    }\n    parsed_int = parse_int_from_byte_array_00108e76(byte_array);\n    string_length = strlen((char *)*byte_array);\n    if (string_length < parsed_int) break;\n    if (output_length != (long *)0x0) {\n      if ((search_result != 0) && (type_ptr = (long *)extract_real_type_00113b1e(search_result), type_ptr != (long *)0x0)) {\n        string_ptr = (char *)copy_and_null_terminate_string_00109a0b(*byte_array,parsed_int);\n        for (; search_result = *type_ptr, search_result != 0; type_ptr = type_ptr + 1) {\n          search_result = *(long *)(search_result + 8);\n          if (search_result == 0) {\n            free(string_ptr);\n            return 0;\n          }\n          comparison_string = (char *)extract_value_001129f4(search_result);\n          if ((comparison_string != (char *)0x0) && (comparison_result = strcmp(comparison_string,string_ptr), comparison_result == 0)) break;\n        }\n        free(string_ptr);\n        if (search_result != 0) goto LAB_0010d7ad;\n      }\n      type_flag = 9;\n      if (loop_counter == 0) {\n        temp_ptr = (void *)copy_and_null_terminate_string_00109a0b(*byte_array,parsed_int);\n        search_result = find_named_type_0010914e(*input_data,temp_ptr);\n        free(temp_ptr);\n        if (search_result != 0) goto LAB_0010d7ad;\n        type_flag = 0;\n      }\n      search_result = find_string_in_data_structures_0010afd5(*input_data,input_data[1],*byte_array,parsed_int,type_flag);\n      if (search_result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_array = *byte_array + parsed_int;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(byte_ptr);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010afd5",
                "strlen",
                "FUN_001129f4",
                "strtol",
                "FUN_00109a0b",
                "FUN_00113b1e",
                "FUN_00108e76",
                "strcmp",
                "FUN_0010914e",
                "FUN_0010911f",
                "free",
                "FUN_0010d21c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_validate_input_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_message_00108466",
                "param_7": "ptrToFree"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00108466(void)\n\n{\n  void *ptrToFree;\n  \n  DAT_00127a40 = 1;\n  print_error_message_001126c0(0);\n  free(ptrToFree);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_int_from_byte_array_00108e76",
                "param_1": "byte_array",
                "bVar1": "current_byte",
                "iVar2": "parsed_int"
            },
            "code": "\nint parse_int_from_byte_array_00108e76(byte **byte_array)\n\n{\n  byte current_byte;\n  int parsed_int;\n  \n  parsed_int = 0;\n  while( true ) {\n    current_byte = **byte_array;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *byte_array = *byte_array + 1;\n    parsed_int = parsed_int * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return parsed_int;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_int_from_byte_array_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "initialize_hash_function_0010bb52",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "hashPointer"
            },
            "code": "\nlong initializeHashFunction_0010bb52(long inputValue,undefined8 param2,undefined8 param3)\n\n{\n  long hashPointer;\n  \n  if (((inputValue != 0) || (inputValue = bfd_hash_allocate(param2,0x30), inputValue != 0)) &&\n     (hashPointer = bfd_hash_newfunc(inputValue,param2,param3), hashPointer != 0)) {\n    *(undefined8 *)(hashPointer + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hashPointer + 0x18) = 0;\n    *(undefined4 *)(hashPointer + 0x28) = 0;\n    return hashPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "initialize_hash_function_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "update_data_thunk_0010e439",
                "param_1": "data_address",
                "param_2": "new_value",
                "process_data_0010e2f0": "process_data"
            },
            "code": "\nvoid update_data_thunk_0010e439(long data_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(data_address + 0x210) = new_value;\n  process_data(data_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_data_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permissions_0011283f",
                "param_1": "path_to_check",
                "param_2": "original_path",
                "iVar1": "access_result",
                "sStack_a8": "file_stat"
            },
            "code": "\nchar * check_directory_permissions_0011283f(char *path_to_check,char *original_path)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((original_path == (char *)0x0) && (path_to_check != (char *)0x0)) {\n    access_result = access(path_to_check,7);\n    if (access_result == 0) {\n      access_result = stat(path_to_check,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        original_path = path_to_check;\n      }\n    }\n  }\n  return original_path;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permissions_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_00108237",
                "piVar2": "errnoPtr",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFile_00108237(void)\n\n{\n  int errnoValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  errnoValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "record_debug",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flag",
                "uVar1": "errorMessage",
                "plVar2": "debugData",
                "puVar3": "memoryBuffer",
                "lVar4": "index",
                "puVar5": "tempBuffer",
                "pcVar6": "emptyString",
                "bVar7": "zeroByte",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long record_debug,char *filename,long size,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 errorMessage;\n  long *debugData;\n  undefined4 *memoryBuffer;\n  long index;\n  undefined4 *tempBuffer;\n  char *emptyString;\n  byte zeroByte;\n  undefined result [16];\n  \n  zeroByte = 0;\n  emptyString = \"\";\n  if (filename != (char *)0x0) {\n    emptyString = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(record_debug + 8) == 0) {\n      errorMessage = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      debugData = (long *)xmalloc(0x18);\n      *debugData = size;\n      *(undefined (*) [16])(debugData + 1) = ZEXT816(0);\n      memoryBuffer = (undefined4 *)xmalloc(0x30);\n      *(long **)(record_debug + 0x18) = debugData;\n      debugData[2] = (long)memoryBuffer;\n      tempBuffer = memoryBuffer;\n      for (index = 0xc; index != 0; index = index + -1) {\n        *tempBuffer = 0;\n        tempBuffer = tempBuffer + (ulong)zeroByte * -2 + 1;\n      }\n      *(undefined4 **)(record_debug + 0x20) = memoryBuffer;\n      index = *(long *)(record_debug + 0x10);\n      *(undefined8 *)(memoryBuffer + 6) = param_5;\n      *(undefined8 *)(memoryBuffer + 8) = 0xffffffffffffffff;\n      index = initialize_memory_00112925(index + 0x10,emptyString,3,(flag & 0xff) + 1);\n      if (index != 0) {\n        *(long **)(index + 0x20) = debugData;\n        errorMessage = CONCAT71((int7)((ulong)index >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = errorMessage;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = generate_formatted_string_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = generate_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_compatibility_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = check_function_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = check_function_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = check_function_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_in_array_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = analyze_debug_record_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_in_array_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = analyze_debug_record_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = close_debug_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_function_debugging_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = extract_and_process_binary_data_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_contents_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "dcgettext",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "index",
                "lVar3": "offset",
                "lVar4": "slashOffset",
                "pcVar5": "newFilePath",
                "bVar6": "isSlash"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long index;\n  long offset;\n  long slashOffset;\n  char *newFilePath;\n  byte isSlash;\n  \n  isSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    offset = 0;\n  }\n  else {\n    slashOffset = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(slashOffset + 0xb);\n    offset = slashOffset + 1;\n    newFilePath = lastSlash;\n    for (index = slashOffset; index != 0; index = index + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)isSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)isSlash * -2 + 1;\n    }\n    lastSlash[slashOffset] = '/';\n  }\n  *(undefined8 *)(lastSlash + offset) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + offset) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "extract_and_initialize_data_0010a181",
                "param_1": "address_1",
                "param_2": "start",
                "param_3": "end",
                "param_4": "flag",
                "cVar1": "char_flag",
                "iVar2": "int_value",
                "iVar3": "result",
                "uVar4": "return_value",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "combined_string",
                "lVar7": "count",
                "local_41": "byte_flag"
            },
            "code": "\nundefined4 extract_and_initialize_data_0010a181(long address_1,long start,long end,byte flag)\n\n{\n  char char_flag;\n  int int_value;\n  int result;\n  undefined4 return_value;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combined_string;\n  long count;\n  byte byte_flag;\n  \n  char_flag = *(char *)(*(long *)(address_1 + 0x60) + 0x1c);\n  string1 = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  byte_flag = 1;\n  if (char_flag == '\\0') {\n    byte_flag = *(byte *)(*(long *)(address_1 + 0x60) + 0x1c);\n  }\n  int_value = *(int *)(*(long *)(address_1 + 0x60) + 0x18);\n  string2 = (char *)extract_and_remove_ptr_from_param_00109b2f(address_1);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combined_string = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *combined_string = '\\0';\n    count = 0;\n    byte_flag = byte_flag & 1;\n  }\n  else {\n    count = *(long *)(address_1 + 0x68);\n    *(long *)(address_1 + 0x68) = count + 1;\n    sprintf(combined_string,\"%ld=@S;\",count);\n    byte_flag = flag;\n  }\n  length1 = strlen(combined_string);\n  sprintf(combined_string + length1,\"ar%s;%ld;%ld;%s\",string1,start,end,string2);\n  free(string1);\n  free(string2);\n  result = 0;\n  if (start <= end) {\n    result = int_value * (((int)end - (int)start) + 1);\n  }\n  return_value = initialize_data_structure_00109b52(address_1,combined_string,count,byte_flag,result);\n  if ((char)return_value != '\\0') {\n    free(combined_string);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_binary_info_001199d0",
                "iVar1": "columnWidth",
                "iVar2": "archIndex",
                "iVar3": "comparisonResult",
                "pcVar4": "headerText",
                "pcVar6": "temporaryFilePath",
                "sVar5": "headerLength",
                "uVar7": "archMach",
                "piVar8": "errnoLocation",
                "iVar9": "loopIndex",
                "lVar10": "loopIndex2",
                "lVar11": "loopIndex3",
                "ppcVar12": "archMachList",
                "uVar13": "maxArchMachLength",
                "uVar14": "stringLength",
                "local_70": "exitCondition"
            },
            "code": "\n\n\nvoid printBinaryInfo_001199d0(void)\n\n{\n  int columnWidth;\n  int archIndex;\n  int comparisonResult;\n  char *headerText;\n  size_t headerLength;\n  char *temporaryFilePath;\n  undefined8 archMach;\n  int *errnoLocation;\n  int loopIndex;\n  long loopIndex2;\n  long loopIndex3;\n  char **archMachList;\n  uint maxArchMachLength;\n  ulong stringLength;\n  int exitCondition;\n  \n  headerText = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerText,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    headerText = getenv(\"TMPDIR\");\n    archMach = check_directory_permissions_0011283f(headerText,0);\n    headerText = getenv(\"TMP\");\n    archMach = check_directory_permissions_0011283f(headerText,archMach);\n    headerText = getenv(\"TEMP\");\n    archMach = check_directory_permissions_0011283f(headerText,archMach);\n    archMach = check_directory_permissions_0011283f(&DAT_0011b39a,archMach);\n    archMach = check_directory_permissions_0011283f(\"/var/tmp\",archMach);\n    headerText = (char *)check_directory_permissions_0011283f(&DAT_00120324,archMach);\n    if (headerText == (char *)0x0) {\n      headerText = \".\";\n    }\n    headerLength = strlen(headerText);\n    temporaryFilePath = (char *)xmalloc((int)headerLength + 2);\n    DAT_001278e0 = strcpy(temporaryFilePath,headerText);\n    DAT_001278e0[headerLength & 0xffffffff] = '/';\n    DAT_001278e0[(int)headerLength + 1] = '\\0';\n  }\n  headerText = DAT_001278e0;\n  headerLength = strlen(DAT_001278e0);\n  loopIndex2 = (long)(int)headerLength;\n  temporaryFilePath = (char *)xmalloc(loopIndex2 + 9);\n  strcpy(temporaryFilePath,headerText);\n  *(undefined2 *)(temporaryFilePath + loopIndex2) = 0x6363;\n  *(undefined4 *)(temporaryFilePath + loopIndex2 + 2) = 0x58585858;\n  *(undefined4 *)((long)(temporaryFilePath + loopIndex2 + 2) + 3) = 0x585858;\n  temporaryFilePath[loopIndex2 + 8] = '\\0';\n  archIndex = mkstemps(temporaryFilePath,0);\n  if (archIndex == -1) {\n    errnoLocation = __errno_location();\n    temporaryFilePath = strerror(*errnoLocation);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerText,temporaryFilePath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchMachLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(process_binary_file_00119f70);\n  unlink(temporaryFilePath);\n  free(temporaryFilePath);\n  exitCondition = 0;\n  do {\n    headerText = (char *)bfd_printable_arch_mach(archIndex);\n    headerLength = strlen(headerText);\n    if ((int)maxArchMachLength < (int)(uint)headerLength) {\n      maxArchMachLength = (uint)headerLength;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerText = getenv(\"COLUMNS\");\n  archIndex = exitCondition;\n  if (headerText != (char *)0x0) {\n    loopIndex2 = strtol(headerText,(char **)0x0,10);\n    columnWidth = (int)loopIndex2;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    exitCondition = archIndex;\n    if (-1 < exitCondition) {\n      return;\n    }\n    loopIndex3 = (long)exitCondition;\n    loopIndex = (columnWidth - maxArchMachLength) + -1;\n    loopIndex2 = loopIndex3;\n    do {\n      archIndex = (int)loopIndex2;\n      if (-1 < archIndex) break;\n      headerLength = strlen(*(char **)(loopIndex2 * 0x60));\n      loopIndex2 = loopIndex2 + 1;\n      loopIndex = (loopIndex - (int)headerLength) + -1;\n    } while (-1 < loopIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLength + 1),&DAT_0011b4a1);\n    for (archMachList = (char **)(loopIndex3 * 0x60);\n        ((ulong)(uint)(archIndex - exitCondition) + loopIndex3) * 0x60 - (long)archMachList != 0;\n        archMachList = archMachList + 0xc) {\n      printf(\"%s \",*archMachList);\n    }\n    loopIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerText = (char *)bfd_printable_arch_mach(loopIndex,0);\n      comparisonResult = strcmp(headerText,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        archMach = bfd_printable_arch_mach(loopIndex,0);\n        printf(\"%*s \",(ulong)maxArchMachLength,archMach);\n        archMachList = (char **)(loopIndex3 * 0x60);\n        comparisonResult = exitCondition;\n        while (archIndex != comparisonResult) {\n          if (*(char *)((long)archMachList + (ulong)(loopIndex - 2) + 8) == '\\0') {\n            headerLength = strlen(*archMachList);\n            for (stringLength = headerLength & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachList,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (archIndex != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          archMachList = archMachList + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      loopIndex = loopIndex + 1;\n    } while (loopIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "getenv",
                "abort",
                "bfd_iterate_over_targets",
                "FUN_00119f70",
                "strlen",
                "mkstemps",
                "FUN_00104943",
                "dcgettext",
                "FUN_0011283f",
                "strcpy",
                "unlink",
                "printf",
                "strerror",
                "xmalloc",
                "close",
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binary_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_system_0010847a"
            },
            "code": "\nvoid initializeSystem_0010847a(void)\n\n{\n  build_attribute_function_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_system_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_input_0010d21c",
                "param_1": "param1",
                "param_2": "byteArrayPtr",
                "param_3": "outputStringPtr",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtr",
                "bVar3": "byteVar3",
                "cVar4": "charVar4",
                "bVar5": "byteVar5",
                "uVar6": "result",
                "iVar7": "intVar7",
                "uVar8": "uintVar8",
                "sVar9": "size",
                "pbVar10": "currentBytePtr",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "ptr3",
                "uVar12": "temp",
                "pcVar13": "ptr4",
                "bVar14": "byteVar14",
                "pcVar15": "ptr5",
                "bVar16": "byteVar16",
                "bVar17": "byteVar17",
                "bVar18": "byteVar18",
                "bVar19": "byteVar19",
                "uVar20": "loopCounter",
                "uVar21": "ulongVar21",
                "local_3c": "localArray"
            },
            "code": "\nundefined4 parseInput_0010d21c(undefined8 param1,byte **byteArrayPtr,undefined8 *outputStringPtr)\n\n{\n  byte byteVar1;\n  byte *bytePtr;\n  byte byteVar3;\n  char charVar4;\n  byte byteVar5;\n  undefined4 result;\n  int intVar7;\n  uint uintVar8;\n  size_t size;\n  byte *currentBytePtr;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *ptr3;\n  undefined8 temp;\n  char *ptr4;\n  byte byteVar14;\n  char *ptr5;\n  byte byteVar16;\n  byte byteVar17;\n  byte byteVar18;\n  byte byteVar19;\n  uint loopCounter;\n  ulong ulongVar21;\n  uint localArray [3];\n  \n  bytePtr = *byteArrayPtr;\n  *byteArrayPtr = bytePtr + 1;\n  localArray[0] = parse_int_from_byte_array_00108e76(byteArrayPtr);\n  ulongVar21 = (ulong)localArray[0];\n  if (localArray[0] != 0) {\n    currentBytePtr = *byteArrayPtr;\n    size = strlen((char *)currentBytePtr);\n    if (ulongVar21 <= size) {\n      *byteArrayPtr = currentBytePtr + ulongVar21;\n      loopCounter = 0;\n      result = parse_integer_00108ea1(byteArrayPtr,localArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (localArray[0] <= loopCounter) {\n          if (outputStringPtr == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)copy_and_null_terminate_string_00109a0b(bytePtr,(int)*byteArrayPtr - (int)bytePtr);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (ptr3 = strstr(haystack,\"::NoSuchStrinG\"), ptr4 = haystack,\n             ptr5 = haystack, ptr3 != (char *)0x0)) {\n            for (; ptr4 != ptr3; ptr4 = ptr4 + 1) {\n              if ((*ptr4 != ' ') ||\n                 (((ptr4[1] == '>' && (haystack < ptr4)) && (ptr4[-1] == '>')))) {\n                *ptr5 = *ptr4;\n                ptr5 = ptr5 + 1;\n              }\n            }\n            temp = copy_and_null_terminate_string_00109a0b(haystack,(int)ptr5 - (int)haystack);\n            *outputStringPtr = temp;\n            free(haystack);\n            return result;\n          }\n          print_error_message_0010911f(bytePtr);\n          free(haystack);\n          return 0;\n        }\n        currentBytePtr = *byteArrayPtr;\n        if (*currentBytePtr != 0x5a) {\n          byteVar5 = parse_and_initialize_data_0010c95e(param1,byteArrayPtr,0);\n          if (byteVar5 == 0) {\n            return 0;\n          }\n          byteVar3 = 0;\n          byteVar14 = 0;\n          byteVar18 = 0;\n          byteVar17 = 0;\n          byteVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar16 = byteVar3;\n              byteVar1 = *currentBytePtr;\n              if ((byteVar14 | byteVar1 == 0) != 0) {\n                byteVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar3 = byteVar5;\n              byteVar14 = byteVar5;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar21 = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar21 & 0x11409) == 0) {\n                  if ((ulongVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              currentBytePtr = currentBytePtr + 1;\n              byteVar3 = byteVar16;\n              byteVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar3 = byteVar16;\n              byteVar18 = byteVar5;\n              break;\n            case 99:\n              byteVar3 = byteVar16;\n              byteVar19 = byteVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar3 = byteVar16;\n              byteVar17 = byteVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byteArrayPtr = currentBytePtr + 1;\n        charVar4 = parse_and_initialize_data_0010c95e(param1,byteArrayPtr,0);\n        if (charVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(bytePtr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar16 == 0) {\n    if (byteVar19 == 0) {\n      if (byteVar18 == 0) {\n        if (byteVar17 == 0) {\n          if (byteVar5 != 0) {\n            uintVar8 = parse_int_from_byte_array_00108e76(byteArrayPtr);\n            if (uintVar8 == 0) goto LAB_0010d280;\n            *byteArrayPtr = *byteArrayPtr + uintVar8;\n          }\n        }\n        else {\n          if (**byteArrayPtr == 0x6d) {\n            *byteArrayPtr = *byteArrayPtr + 1;\n          }\n          while( true ) {\n            currentBytePtr = *byteArrayPtr;\n            if (((&_sch_istable)[(ulong)*currentBytePtr * 2] & 4) == 0) break;\n            *byteArrayPtr = currentBytePtr + 1;\n          }\n          if (*currentBytePtr == 0x2e) {\n            do {\n              currentBytePtr = currentBytePtr + 1;\n              *byteArrayPtr = currentBytePtr;\n            } while (((&_sch_istable)[(ulong)*currentBytePtr * 2] & 4) != 0);\n          }\n          currentBytePtr = *byteArrayPtr;\n          if (*currentBytePtr == 0x65) {\n            do {\n              currentBytePtr = currentBytePtr + 1;\n              *byteArrayPtr = currentBytePtr;\n            } while (((&_sch_istable)[(ulong)*currentBytePtr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar8 = parse_int_from_byte_array_00108e76(byteArrayPtr);\n        if (1 < uintVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byteArrayPtr == 0x6d) {\n        *byteArrayPtr = *byteArrayPtr + 1;\n      }\n      intVar7 = parse_int_from_byte_array_00108e76(byteArrayPtr);\n      if (intVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byteArrayPtr == 0x6d) {\n      *byteArrayPtr = *byteArrayPtr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byteArrayPtr * 2] & 4) != 0) {\n      *byteArrayPtr = *byteArrayPtr + 1;\n    }\n  }\nLAB_0010d2b1:\n  loopCounter = loopCounter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "abort",
                "FUN_00108ea1",
                "strstr",
                "strlen",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108e76",
                "concat",
                "FUN_0010911f",
                "cplus_demangle",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_input_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = parse_int_from_byte_array_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_integer_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_string_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_string_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = parse_int_from_byte_array_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = parse_int_from_byte_array_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = parse_int_from_byte_array_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "unnamedParam1",
                "param_2": "unnamedParam2",
                "in_RAX": "tempVar"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 unnamedParam1,undefined8 unnamedParam2)\n\n{\n  undefined8 tempVar;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unnamedParam2,tempVar);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_or_update_memory_0010c139",
                "param_2": "input_param",
                "param_3": "updated_param_1",
                "param_4": "updated_param_2",
                "param_5": "updated_param_3",
                "param_6": "updated_param_4",
                "uVar1": "stored_value",
                "cVar2": "char_value",
                "uVar3": "result",
                "puVar4": "allocated_memory",
                "in_R10": "register_var1",
                "unaff_R15": "register_var2"
            },
            "code": "\nulong allocateOrUpdateMemory_0010c139(undefined8 param_1,long input_param,undefined8 updated_param_1,undefined8 updated_param_2,\n                  undefined4 updated_param_3,undefined8 updated_param_4)\n\n{\n  undefined8 stored_value;\n  char char_value;\n  ulong result;\n  undefined8 *allocated_memory;\n  undefined8 register_var1;\n  undefined8 register_var2;\n  \n  char_value = *(char *)(input_param + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(input_param + 0x40) != 0 || (*(char *)(input_param + 0x44) == '\\0')))) {\n    allocated_memory = (undefined8 *)xmalloc(0x28);\n    stored_value = *(undefined8 *)(input_param + 0x78);\n    *(undefined8 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[2] = updated_param_2;\n    *(undefined4 *)(allocated_memory + 3) = updated_param_3;\n    allocated_memory[4] = updated_param_4;\n    *(undefined8 **)(input_param + 0x78) = allocated_memory;\n    *allocated_memory = stored_value;\n    allocated_memory[1] = updated_param_1;\n    return CONCAT71((int7)((ulong)register_var2 >> 8),char_value) & 0xffffffff;\n  }\n  result = debug_record_variable_0010c05d(param_1,updated_param_1,updated_param_2,updated_param_3,updated_param_4,register_var1);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_or_update_memory_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "store_data_and_process_0010e439",
                "param_1": "dataPointer",
                "param_2": "dataValue",
                "process_data_0010e2f0": "processData"
            },
            "code": "\nvoid storeDataAndProcess_0010e439(long dataPointer,undefined8 dataValue)\n\n{\n  *(undefined8 *)(dataPointer + 0x210) = dataValue;\n  processData(dataPointer,0x84,0,0,dataValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "store_data_and_process_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010e9a0",
                "FUN_0010b800",
                "FUN_00109e76",
                "FUN_0010e918",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010abdd",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010554f",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00113ede",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_00113fb0",
                "FUN_0010b800",
                "FUN_0010e918",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_001199d0",
                "FUN_00104ad6",
                "FUN_00109bbb",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_data_structure_00109d3e",
                "param_1": "param",
                "param_2": "count",
                "uVar1": "value",
                "initialize_data_structure_00109cf4": "initialize_data_structure_helper"
            },
            "code": "\nvoid initialize_data_structure_00109d3e(undefined8 param,int count)\n\n{\n  undefined8 value;\n  \n  value = 0xfffffffffffffff0;\n  if (count - 1U < 8) {\n    value = *(undefined8 *)(&DAT_00121360 + (ulong)(count - 1U) * 8);\n  }\n  initialize_data_structure_00109d3e_helper(param,value,count);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_and_process_data_00112502",
                "param_1": "data_struct_ptr",
                "param_2": "param_ptr",
                "param_3": "threshold",
                "uVar1": "index",
                "puVar2": "array_ptr",
                "uVar3": "temp",
                "cVar4": "result",
                "process_data_0010edb4": "process_data"
            },
            "code": "\nundefined check_and_process_data_00112502(long data_struct_ptr,undefined8 param_ptr,ulong threshold)\n\n{\n  uint index;\n  undefined8 *array_ptr;\n  undefined8 temp;\n  char result;\n  \n  do {\n    array_ptr = *(undefined8 **)(data_struct_ptr + 0x40);\n    if (array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(data_struct_ptr + 0x48), index < 10 && (array_ptr[(ulong)index + 2] != -1))) {\n      if (threshold <= (ulong)array_ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      result = process_data(param_ptr,*(undefined8 *)(array_ptr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(data_struct_ptr + 0x48) = *(int *)(data_struct_ptr + 0x48) + 1;\n    }\n    temp = *array_ptr;\n    *(undefined4 *)(data_struct_ptr + 0x48) = 0;\n    *(undefined8 *)(data_struct_ptr + 0x40) = temp;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "in_R10": "current_line",
                "unaff_RBX": "next_line",
                "pbVar5": "current_char",
                "unaff_EBP": "line_counter",
                "unaff_R15": "last_line",
                "param_7": "error_message",
                "param_8": "output",
                "param_9": "input",
                "uVar1": "error_string",
                "ppbVar2": "slot",
                "pbVar3": "char_ptr",
                "bVar4": "current_byte",
                "unaff_R13": "result",
                "unaff_R14": "previous_char"
            },
            "code": "\nvoid process_lines_00104cc1(void)\n\n{\n  undefined8 error_string;\n  byte **slot;\n  byte *char_ptr;\n  byte current_byte;\n  byte *next_line;\n  byte *current_char;\n  int line_counter;\n  byte *current_line;\n  undefined8 result;\n  byte *previous_char;\n  byte *last_line;\n  undefined8 error_message;\n  undefined8 *output;\n  byte *input;\n  \ncode_r0x00104cc1:\n  input = current_line;\n  error_string = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(error_string,error_message,line_counter);\n  current_char = next_line;\n  current_line = input;\nLAB_00114599:\n  do {\n    *current_line = 0;\n    if (last_line < current_line) {\n      slot = (byte **)htab_find_slot();\n      *slot = last_line;\n    }\n    line_counter = line_counter + 1;\n    char_ptr = current_char;\n    if (previous_char[1] == 0) {\n      *output = result;\n      return;\n    }\n    for (; current_byte = *char_ptr, previous_char = char_ptr, current_byte != 10; char_ptr = char_ptr + 1) {\n      if ((char)current_byte < '\\v') {\n        if (current_byte == 0) {\n          next_line = char_ptr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (current_byte == 0xd) {\n          *char_ptr = 0;\n          next_line = char_ptr + 1;\n          if (char_ptr[1] == 10) {\n            next_line = char_ptr + 2;\n            previous_char = char_ptr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (current_byte == 0x23) {\n          process_lines_00104cc1_00104d1c();\n          return;\n        }\n      }\n    }\n    *char_ptr = 0;\n    if (char_ptr[1] == 0xd) {\n      previous_char = char_ptr + 1;\n      next_line = char_ptr + 2;\n    }\n    else {\n      next_line = char_ptr + 1;\n    }\nLAB_00114553:\n    current_byte = *current_char;\n    last_line = current_char;\n    while ((current_byte == 0x20 || (current_line = last_line, current_byte == 9))) {\n      current_char = last_line + 1;\n      last_line = last_line + 1;\n      current_byte = *current_char;\n    }\n    do {\n      current_char = next_line;\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = current_line[1];\n      current_line = current_line + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    current_byte = current_line[1];\n    if ((((((current_byte == 9) || (current_byte == 0x20)) && ((current_byte = current_line[2], current_byte == 9 || (current_byte == 0x20)))\n          ) && ((current_byte = current_line[3], current_byte == 9 || (current_byte == 0x20)))) &&\n        ((current_byte = current_line[4], current_byte == 9 || (current_byte == 0x20)))) &&\n       ((current_byte = current_line[5], current_byte == 9 || (current_byte == 0x20)))) {\n      current_byte = current_line[6];\n      char_ptr = current_line + 6;\n      if ((current_byte == 9) || (current_byte == 0x20)) {\n        do {\n          do {\n            current_byte = char_ptr[1];\n            char_ptr = char_ptr + 1;\n          } while (current_byte == 0x20);\n        } while (current_byte == 9);\n      }\n    }\n    if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c",
                "dcgettext",
                "FUN_00104cc1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010aa53",
                "FUN_0010ab4d",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_00109ed3",
                "FUN_0010d7d4",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_00109be3",
                "FUN_0010dac0",
                "FUN_0010abdd",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_and_initialize_data_00113bfa",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "lVar1": "allocated_data_ptr",
                "plVar2": "xmalloced_ptr"
            },
            "code": "\nlong create_and_initialize_data_00113bfa(long input_value_1,long input_value_2)\n\n{\n  long allocated_data_ptr;\n  long *xmalloced_ptr;\n  \n  if (((input_value_1 != 0) && (input_value_2 != 0)) && (allocated_data_ptr = allocate_and_initialize_data_00112904(0x12,0), allocated_data_ptr != 0)) {\n    xmalloced_ptr = (long *)xmalloc(0x10);\n    *xmalloced_ptr = input_value_1;\n    xmalloced_ptr[1] = input_value_2;\n    *(long **)(allocated_data_ptr + 0x10) = xmalloced_ptr;\n    return allocated_data_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "create_and_initialize_data_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_share_flag_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "firstParam",
                "uVar2": "errorMessage",
                "unaff_EBX": "EBX"
            },
            "code": "\nuint checkShareFlag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 firstParam;\n  undefined8 errorMessage;\n  uint EBX;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    firstParam = *param2;\n    EBX = EBX & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,firstParam,param3);\n  }\n  return EBX;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_share_flag_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_initialize_data_structure_00109e76",
                "param_1": "pointer",
                "param_2": "value",
                "lVar1": "previousValue",
                "local_5a": "buffer"
            },
            "code": "\nvoid updateAndInitializeDataStructure_00109e76(long pointer,uint value)\n\n{\n  long previousValue;\n  char buffer [58];\n  \n  previousValue = *(long *)(pointer + 0x68);\n  *(long *)(pointer + 0x68) = previousValue + 1;\n  sprintf(buffer,\"%ld=r%ld;%u;0;\",previousValue,previousValue,(ulong)value);\n  initialize_data_structure_00109b52(pointer,buffer,previousValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_initialize_data_structure_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_in_array_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "currentIndex",
                "lVar2": "dataIndex",
                "lVar3": "offset",
                "uVar4": "duplicatedValue"
            },
            "code": "\nulong updateDataInArray_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int currentIndex;\n  long dataIndex;\n  long offset;\n  undefined8 duplicatedValue;\n  \n  dataIndex = (long)DAT_001278c0;\n  offset = dataIndex * 0x18;\n  free((void *)(&DAT_00127750)[dataIndex * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = newValue1;\n  *(undefined4 *)(&DAT_00127744 + offset) = newValue2;\n  *(undefined8 *)(&DAT_00127748 + offset) = newValue3;\n  duplicatedValue = xstrdup(newValue4);\n  (&DAT_00127750)[dataIndex * 3] = duplicatedValue;\n  currentIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = currentIndex % 0x10;\n  return (long)currentIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_in_array_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_data_structures_0010afd5",
                "param_1": "dataStructures",
                "param_2": "inputStruct",
                "param_3": "searchString",
                "param_4": "searchLength",
                "param_5": "dataType",
                "param_6": "result",
                "__s2": "searchStringCopy",
                "puVar2": "currentItem",
                "uVar3": "tempVar",
                "lVar4": "tempVar2",
                "puVar5": "innerItem",
                "puVar6": "tempPtr",
                "bVar7": "loopCounter",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nfindStringInDataStructures_0010afd5(undefined8 *dataStructures,long inputStruct,undefined8 searchString,undefined4 searchLength,\n            undefined4 dataType,undefined8 result)\n\n{\n  int iVar1;\n  char *searchStringCopy;\n  undefined8 *currentItem;\n  undefined8 tempVar;\n  long tempVar2;\n  undefined8 *innerItem;\n  undefined4 *tempPtr;\n  byte loopCounter;\n  undefined returnValue [16];\n  \n  loopCounter = 0;\n  searchStringCopy = (char *)copy_and_null_terminate_string_00109a0b(searchString,searchLength);\n  for (dataStructures = (undefined8 *)*dataStructures; dataStructures != (undefined8 *)0x0;\n      dataStructures = (undefined8 *)*dataStructures) {\n    for (currentItem = (undefined8 *)dataStructures[1]; currentItem != (undefined8 *)0x0;\n        currentItem = (undefined8 *)*currentItem) {\n      if ((undefined8 *)currentItem[2] != (undefined8 *)0x0) {\n        for (innerItem = *(undefined8 **)(undefined8 *)currentItem[2]; innerItem != (undefined8 *)0x0;\n            innerItem = (undefined8 *)*innerItem) {\n          if ((*(int *)((long)innerItem + 0x14) == 1) && (*(char *)innerItem[1] == *searchStringCopy)) {\n            iVar1 = strcmp((char *)innerItem[1],searchStringCopy);\n            if (iVar1 == 0) {\n              tempVar2 = innerItem[4];\n              if (tempVar2 == 0) goto LAB_0010b05b;\n              free(searchStringCopy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentItem = *(undefined8 **)(inputStruct + 0x1a0);\n  do {\n    if (currentItem == (undefined8 *)0x0) {\n      currentItem = (undefined8 *)xmalloc(0x28);\n      tempVar = *(undefined8 *)(inputStruct + 0x1a0);\n      tempPtr = (undefined4 *)((long)currentItem + 0x14);\n      for (tempVar2 = 5; tempVar2 != 0; tempVar2 = tempVar2 + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)loopCounter * -2 + 1;\n      }\n      *(undefined4 *)(currentItem + 2) = dataType;\n      *currentItem = tempVar;\n      currentItem[1] = searchStringCopy;\n      tempVar = allocate_and_initialize_data_00113e23(currentItem + 3,searchStringCopy);\n      *(undefined8 **)(inputStruct + 0x1a0) = currentItem;\n      currentItem[4] = tempVar;\nLAB_0010b0e7:\n      tempVar2 = currentItem[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = result;\n      returnValue._0_8_ = tempVar2;\n      return returnValue;\n    }\n    if (*(char *)currentItem[1] == *searchStringCopy) {\n      iVar1 = strcmp((char *)currentItem[1],searchStringCopy);\n      if (iVar1 == 0) {\n        if (*(int *)(currentItem + 2) == 0) {\n          *(undefined4 *)(currentItem + 2) = dataType;\n        }\n        free(searchStringCopy);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentItem = (undefined8 *)*currentItem;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_00113e23",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_string_in_data_structures_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_input_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)get_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = check_type_file_number_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)create_and_initialize_data_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_input_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_data_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)check_type_file_number_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)check_type_file_number_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)allocate_and_initialize_data_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)get_real_type_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)allocate_and_initialize_data_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)allocate_and_initialize_data_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)allocate_or_return_ptr_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_and_convert_input_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_and_convert_input_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)allocate_and_initialize_data_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_data_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)allocate_and_initialize_data_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)allocate_and_initialize_data_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_input_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = initialize_data_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_and_convert_input_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_and_convert_input_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)allocate_and_initialize_data_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_and_convert_input_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_and_convert_input_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_and_convert_input_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)initialize_data_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_data_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_string_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_and_convert_input_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)initialize_data_and_allocate_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)allocate_and_initialize_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)allocate_and_initialize_data_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_input_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_and_convert_input_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_and_convert_input_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)initialize_data_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)initialize_data_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_data_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = get_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_message_00108fe8(pbVar27,uVar15);\n                lVar38 = initialize_data_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)allocate_and_initialize_data_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)initialize_data_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)allocate_and_initialize_data_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)initialize_data_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)initialize_data_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)initialize_data_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)initialize_data_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)initialize_data_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_message_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = compare_strings_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = compare_strings_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = compare_strings_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)initialize_data_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)initialize_data_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_and_convert_input_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_and_convert_input_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_message_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_message_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_and_convert_input_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)extract_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_and_convert_input_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_string_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_message_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_and_convert_input_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_and_convert_input_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_string_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_string_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_string_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_string_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_message_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = get_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)get_real_type_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = extract_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_validate_input_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = append_to_data_structure_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_input_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = append_to_data_structure_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = parse_int_from_byte_array_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = append_to_data_structure_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = parse_and_append_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = parse_and_append_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = parse_and_append_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = parse_and_append_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)allocate_and_initialize_data_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = check_input_and_compare_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = check_input_and_compare_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = compare_strings_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)allocate_and_initialize_data_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_message_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_and_convert_input_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_input_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_data_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)allocate_and_initialize_data_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_message_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_in_data_structures_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)check_type_file_number_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "dcgettext",
                "malloc",
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0010b6ea",
                "FUN_00113fb0",
                "xrealloc",
                "strchr",
                "FUN_00112904",
                "cplus_demangle_mangled_name",
                "FUN_00113da9",
                "FUN_0010afd5",
                "strcat",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_00112b6e",
                "xmalloc",
                "FUN_00113b98",
                "strspn",
                "strncmp",
                "FUN_00113cb9",
                "sprintf",
                "strlen",
                "FUN_00113bfa",
                "strcpy",
                "strcmp",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00109ab1",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00109be3",
                "FUN_00113d6e",
                "FUN_00108e76",
                "free",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00108fe8",
                "FUN_00113c43",
                "FUN_00113e5e",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010914e",
                "FUN_00113dfe",
                "strstr",
                "FUN_00113d3a",
                "strtol",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "concat",
                "FUN_0010d21c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__format": "format_str",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "stab_entry",
                "iVar5": "iteration_index"
            },
            "code": "\n\n\nundefined8 print_last_stabs_entries_00108b3e(undefined8 param1,undefined8 param2,undefined8 param3)\n\n{\n  char *format_str;\n  long stab_name;\n  long index;\n  long offset;\n  int *stab_entry;\n  int iteration_index;\n  \n  format_str = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_str);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  iteration_index = DAT_001278c0;\n  do {\n    index = (long)iteration_index;\n    offset = index * 0x18;\n    stab_entry = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    iteration_index = (iteration_index + 1) % 0x10;\n  } while (DAT_001278c0 != iteration_index);\n  return param3;\n}\n\n",
            "called": [
                "fwrite",
                "fprintf",
                "bfd_get_stab_name",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_and_reverse_data_0010a083",
                "param_1": "data_ptr",
                "reverse_and_initialize_00109ed3": "reverse_and_initialize_data"
            },
            "code": "\nvoid initialize_and_reverse_data_0010a083(long data_ptr)\n\n{\n  reverse_and_initialize_data(data_ptr,0x2a,4,data_ptr + 0x178,data_ptr + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_reverse_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "ptr",
                "param_6": "result",
                "lVar1": "newArray",
                "plVar2": "element",
                "lVar3": "remaining",
                "puVar4": "ptrToInitialize",
                "uVar5": "currentSize",
                "bVar6": "flag",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long array,long value,ulong size,int flag,undefined4 *ptr,\n            undefined8 result)\n\n{\n  long newArray;\n  long *element;\n  long remaining;\n  undefined *ptrToInitialize;\n  ulong currentSize;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    newArray = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newArray;\n    ptrToInitialize = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newArray);\n    for (remaining = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remaining != 0; remaining = remaining + -1) {\n      *ptrToInitialize = 0;\n      ptrToInitialize = ptrToInitialize + (ulong)flag * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  element = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*element == 0) {\n    newArray = *(long *)(array + 0x68);\n    *element = newArray;\n    *(long *)(array + 0x68) = newArray + 1;\n    element[1] = value;\n    *(int *)(element + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element + 2) = 0;\n    *(undefined4 *)((long)element + 0x14) = *ptr;\n  }\n  else {\n    *ptr = *(undefined4 *)((long)element + 0x14);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = *element;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_001053b5",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid printBadFormatError_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_memory_if_valid_00112996",
                "param_1": "memory_address",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 initialize_memory_if_valid_00112996(long memory_address,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(memory_address + 8) != 0) && (*(long *)(memory_address + 0x10) != 0)) {\n    offset = *(long *)(memory_address + 0x10) + 0x10;\n    if (*(long *)(memory_address + 0x20) != 0) {\n      offset = *(long *)(memory_address + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112925(offset,param2,param3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_memory_if_valid_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class_identifier",
                "param_2": "type_name",
                "param_3": "type",
                "param_4": "param_value",
                "uVar1": "result",
                "uVar2": "current_id",
                "lVar3": "type_info",
                "piVar4": "type_pointer",
                "__s1": "existing_type_name",
                "cVar5": "is_equal",
                "iVar6": "counter",
                "puVar7": "new_type_entry",
                "auVar8": "output"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_identifier,char *type_name,int *type,undefined8 param_value)\n\n{\n  undefined8 result;\n  uint current_id;\n  long type_info;\n  int *type_pointer;\n  char *existing_type_name;\n  char is_equal;\n  int counter;\n  undefined8 *new_type_entry;\n  undefined output [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_info = *(long *)(type + 4);\n  new_type_entry = (undefined8 *)(ulong)*(uint *)(type_info + 0xc);\n  if (*(uint *)(type_info + 0xc) <= *(uint *)(class_identifier + 0x38)) {\n    for (new_type_entry = *(undefined8 **)(class_identifier + 0x50); new_type_entry != (undefined8 *)0x0;\n        new_type_entry = (undefined8 *)*new_type_entry) {\n      type_pointer = (int *)new_type_entry[1];\n      if (*type_pointer == *type) {\n        existing_type_name = (char *)new_type_entry[2];\n        if (type_name == (char *)0x0) {\n          if (existing_type_name == (char *)0x0) {\nLAB_0010c82c:\n            is_equal = check_equality_0010922b(class_identifier,type_pointer,type);\n            if (is_equal != '\\0') {\n              current_id = *(uint *)(*(long *)(new_type_entry[1] + 0x10) + 0xc);\n              new_type_entry = (undefined8 *)(ulong)current_id;\n              *(uint *)(type_info + 0xc) = current_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existing_type_name != (char *)0x0) && (*existing_type_name == *type_name)) &&\n                (counter = strcmp(existing_type_name,type_name), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(class_identifier + 0x34) + 1;\n    *(int *)(class_identifier + 0x34) = counter;\n    *(int *)(type_info + 0xc) = counter;\n    new_type_entry = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_identifier + 0x50);\n    new_type_entry[2] = type_name;\n    *(undefined8 **)(class_identifier + 0x50) = new_type_entry;\n    *new_type_entry = result;\n    new_type_entry[1] = type;\n  }\nLAB_0010c884:\n  output._1_7_ = (undefined7)((ulong)new_type_entry >> 8);\n  output[0] = 1;\n  output._8_8_ = param_value;\n  return output;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strcmp",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param1",
                "param_2": "ptr1",
                "param_3": "ptr2",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "pptr1",
                "ppcVar4": "pptr2",
                "ppcVar5": "pptr3",
                "lVar6": "length1",
                "lVar7": "length2",
                "lVar8": "length3",
                "pcVar9": "charPtr1",
                "pcVar10": "charPtr2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparisonResult",
                "uVar14": "type1",
                "uVar15": "type2",
                "puVar16": "ptr16",
                "puVar17": "ptr17",
                "plVar18": "ptr18",
                "lVar19": "index",
                "plVar20": "ptr20",
                "plVar21": "ptr21",
                "lVar22": "ptrValue",
                "local_70": "localPtr",
                "local_58": "localPtrArr",
                "plStack_50": "stackPtr",
                "local_48": "localPtr2"
            },
            "code": "\nbyte checkEquality_0010922b(long param1,long *ptr1,long *ptr2)\n\n{\n  uint value1;\n  uint value2;\n  long **pptr1;\n  char **pptr2;\n  char **pptr3;\n  long length1;\n  long length2;\n  long length3;\n  char *charPtr1;\n  char *charPtr2;\n  char result;\n  byte isEqual;\n  int comparisonResult;\n  undefined8 type1;\n  undefined8 type2;\n  undefined8 *ptr16;\n  undefined8 *ptr17;\n  long *ptr18;\n  long index;\n  long *ptr20;\n  long *ptr21;\n  long ptrValue;\n  long *localPtr;\n  undefined8 *localPtrArr;\n  long *stackPtr;\n  long *localPtr2;\n  \n  ptr18 = ptr2;\n  if (ptr1 == (long *)0x0) {\nLAB_00109241:\n    return ptr2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr18 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)ptr1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)ptr2, value2 == 1) {\n      ptr2 = **(long ***)ptr2[2];\n      if (ptr2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (ptr1 == ptr2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    ptr1 = *(long **)(ptr1[2] + 8);\n    if (ptr1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    ptr2 = *(long **)(ptr2[2] + 8);\n    ptr18 = ptr2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*ptr1 != *ptr2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(ptr1 + 2) == *(char *)(ptr2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  localPtrArr = *(undefined8 **)(param1 + 0x58);\n  for (ptr17 = localPtrArr; ptr17 != (undefined8 *)0x0; ptr17 = (undefined8 *)*ptr17) {\n    if (((long *)ptr17[1] == ptr1) && ((long *)ptr17[2] == ptr2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &localPtrArr;\n  stackPtr = ptr1;\n  localPtr2 = ptr2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr18 = (long *)ptr1[2];\n    pptr1 = (long **)ptr2[2];\n    if (ptr18 == (long *)0x0) {\n      isEqual = pptr1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (pptr1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptr18 + 0xc)) &&\n       (*(uint *)((long)ptr18 + 0xc) == *(uint *)((long)pptr1 + 0xc))) goto LAB_001097af;\n    ptr17 = (undefined8 *)*ptr18;\n    localPtr = *pptr1;\n    if (((ptr17 == (undefined8 *)0x0) == (localPtr == (long *)0x0)) &&\n       ((((ptr18[2] == 0) == (pptr1[2] == (long *)0x0) &&\n         ((ptr18[3] == 0) == (pptr1[3] == (long *)0x0))) &&\n        ((ptr18[4] == 0) == (pptr1[4] == (long *)0x0))))) {\n      if (ptr17 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr18[4] != 0) &&\n           (result = checkEquality_0010922b(param1,ptr18[4],pptr1[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptr21 = (long *)ptr18[2];\n        if (ptr21 == (long *)0x0) {\nLAB_00109540:\n          ptr17 = (undefined8 *)ptr18[3];\n          if (ptr17 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr18 = pptr1[3];\n          while( true ) {\n            pptr3 = (char **)*ptr17;\n            if (pptr3 == (char **)0x0) {\n              isEqual = *ptr18 == 0;\n              goto LAB_001099c4;\n            }\n            pptr2 = (char **)*ptr18;\n            if (pptr2 == (char **)0x0) break;\n            if ((**pptr3 != **pptr2) || (comparisonResult = strcmp(*pptr3,*pptr2), comparisonResult != 0))\n            break;\n            charPtr1 = pptr3[1];\n            charPtr2 = pptr2[1];\n            if ((charPtr1 == (char *)0x0) != (charPtr2 == (char *)0x0)) break;\n            if (charPtr1 != (char *)0x0) {\n              ptrValue = 0;\n              while( true ) {\n                pptr3 = *(char ***)(charPtr1 + ptrValue);\n                pptr2 = *(char ***)(charPtr2 + ptrValue);\n                if (pptr3 == (char **)0x0) break;\n                if (pptr2 == (char **)0x0) goto LAB_00109382;\n                if ((((**pptr3 != **pptr2) ||\n                     ((((ulong)pptr3[2] ^ (ulong)pptr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((pptr3[3] != pptr2[3] ||\n                     ((((pptr3[4] == (char *)0x0) != (pptr2[4] == (char *)0x0) ||\n                       (comparisonResult = strcmp(*pptr3,*pptr2), comparisonResult != 0)) ||\n                      (result = checkEquality_0010922b(param1,pptr3[1],pptr2[1]), result == '\\0')))))) ||\n                   ((pptr3[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(param1,pptr3[4],pptr2[4]), result == '\\0'))))\n                goto LAB_00109382;\n                ptrValue = ptrValue + 8;\n              }\n              if (pptr2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr17 = ptr17 + 1;\n            ptr18 = ptr18 + 1;\n          }\n        }\n        else {\n          ptr20 = pptr1[2];\n          for (; ptr17 = (undefined8 *)*ptr21, ptr17 != (undefined8 *)0x0;\n              ptr21 = ptr21 + 1) {\n            ptr16 = (undefined8 *)*ptr20;\n            if ((((ptr16 == (undefined8 *)0x0) ||\n                 (((ptr17[1] ^ ptr16[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr17 + 2) != *(int *)(ptr16 + 2))) ||\n               (result = checkEquality_0010922b(param1,*ptr17,*ptr16), result == '\\0'))\n            goto LAB_00109382;\n            ptr20 = ptr20 + 1;\n          }\n          if (*ptr20 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; pptr3 = (char **)*ptr17, pptr3 != (char **)0x0; ptr17 = ptr17 + 1) {\n          pptr2 = (char **)*localPtr;\n          if (pptr2 == (char **)0x0) goto LAB_00109382;\n          charPtr1 = *pptr2;\n          charPtr2 = *pptr3;\n          if ((*charPtr2 != *charPtr1) ||\n             ((((ulong)pptr3[2] ^ (ulong)pptr2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)pptr3 + 0x14) == '\\0') {\n            if (pptr3[3] == pptr2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparisonResult = strcmp(pptr3[3],pptr2[3]);\n          if (comparisonResult != 0) goto LAB_00109382;\nLAB_00109480:\n          comparisonResult = strcmp(charPtr2,charPtr1);\n          if (((comparisonResult != 0) || (pptr3[1] == (char *)0x0)) || (pptr2[1] == (char *)0x0))\n          goto LAB_00109382;\n          type1 = get_real_type_00112b6e(pptr2[1],0);\n          type2 = get_real_type_00112b6e(pptr3[1],0);\n          result = checkEquality_0010922b(param1,type2,type1);\n          if (result == '\\0') goto LAB_00109382;\n          localPtr = localPtr + 1;\n        }\n        if (*localPtr == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr18 = (long *)ptr1[2];\n    ptr21 = (long *)ptr2[2];\n    if (ptr18 == (long *)0x0) {\n      isEqual = ptr21 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr21 == (long *)0x0) goto LAB_00109382;\n    ptrValue = *ptr18;\n    length1 = *ptr21;\n    index = 0;\n    length2 = ptr18[1];\n    length3 = ptr21[1];\n    do {\n      charPtr1 = *(char **)(ptrValue + index);\n      if (charPtr1 == (char *)0x0) {\n        isEqual = *(long *)(length1 + index) == 0;\n        goto LAB_001099c1;\n      }\n      charPtr2 = *(char **)(length1 + index);\n      if (((charPtr2 == (char *)0x0) || (*charPtr1 != *charPtr2)) ||\n         (*(long *)(length2 + index) != *(long *)(length3 + index))) break;\n      comparisonResult = strcmp(charPtr1,charPtr2);\n      index = index + 8;\n    } while (comparisonResult == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = checkEquality_0010922b(param1,ptr1[2],ptr2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)ptr1[2] + 2) == *(char *)((undefined8 *)ptr2[2] + 2)) &&\n       (result = checkEquality_0010922b(param1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n       result != '\\0')) {\n      ptr18 = *(long **)(ptr1[2] + 8);\n      ptr21 = *(long **)(ptr2[2] + 8);\n      if ((ptr18 == (long *)0x0) == (ptr21 == (long *)0x0)) {\n        if (ptr18 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr18 != 0 && (*ptr21 != 0)) &&\n               (result = checkEquality_0010922b(param1), result != '\\0'))) {\n          ptr18 = ptr18 + 1;\n          ptr21 = ptr21 + 1;\n        }\nLAB_0010995d:\n        if (*ptr18 != 0) goto LAB_00109964;\n        isEqual = *ptr21 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr17 = (undefined8 *)ptr2[2];\n    ptr16 = (undefined8 *)ptr1[2];\n    isEqual = 0;\n    if ((ptr16[1] == ptr17[1]) && (ptr16[2] == ptr17[2])) {\nLAB_00109862:\n      isEqual = checkEquality_0010922b(param1,*ptr16,*ptr17);\n    }\n    break;\n  case 0x10:\n    ptr17 = (undefined8 *)ptr2[2];\n    ptr16 = (undefined8 *)ptr1[2];\n    isEqual = 0;\n    if (((ptr16[2] == ptr17[2]) && (ptr16[3] == ptr17[3])) &&\n       (*(char *)(ptr16 + 4) == *(char *)(ptr17 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr17 = (undefined8 *)ptr2[2];\n    ptr16 = (undefined8 *)ptr1[2];\n    isEqual = 0;\n    if (*(char *)(ptr16 + 1) == *(char *)(ptr17 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(param1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = checkEquality_0010922b(param1,*(undefined8 *)(ptr1[2] + 8),*(undefined8 *)(ptr2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)ptr1[2] + 3) == *(char *)((undefined8 *)ptr2[2] + 3)) &&\n        (result = checkEquality_0010922b(param1,*(undefined8 *)ptr1[2],*(undefined8 *)ptr2[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(param1,*(undefined8 *)(ptr1[2] + 8),\n                              *(undefined8 *)(ptr2[2] + 8)), result != '\\0')) {\n      ptr18 = *(long **)(ptr1[2] + 0x10);\n      ptr21 = *(long **)(ptr2[2] + 0x10);\n      if ((ptr18 == (long *)0x0) == (ptr21 == (long *)0x0)) {\n        if (ptr18 != (long *)0x0) {\n          while (((*ptr18 != 0 && (*ptr21 != 0)) &&\n                 (result = checkEquality_0010922b(param1), result != '\\0'))) {\n            ptr18 = ptr18 + 1;\n            ptr21 = ptr21 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr18 = (long *)ptr2[2];\n    ptr21 = (long *)ptr1[2];\n    comparisonResult = strcmp(*(char **)(*ptr21 + 8),*(char **)(*ptr18 + 8));\n    isEqual = 0;\n    if (comparisonResult == 0) {\n      isEqual = checkEquality_0010922b(param1,ptr21[1],ptr18[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = localPtrArr;\n  return isEqual;\ncode_r0x00109263:\n  ptr1 = **(long ***)ptr1[2];\n  ptr18 = ptr1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "strcmp",
                "FUN_00112b6e",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_files_001052a2",
                "cVar1": "formatCheck",
                "iVar2": "archCheck",
                "iVar3": "statResult"
            },
            "code": "\nvoid extractAndCopyFiles_001052a2(undefined8 param_1,undefined8 param_2,char *param_3)\n\n{\n  char formatCheck;\n  int archCheck;\n  int statResult;\n  char **ppcVar4;\n  long lVar5;\n  undefined8 uVar6;\n  char *__format;\n  undefined8 *puVar7;\n  int *piVar8;\n  undefined8 uVar9;\n  long in_RAX;\n  char *pformatCheck0;\n  char **ppformatCheck1;\n  long lVar12;\n  void *pvVar13;\n  code *pformatCheck4;\n  long lVar15;\n  char *pformatCheck6;\n  stat *psVar17;\n  undefined8 *unaff_R14;\n  char **unaff_R15;\n  byte bVar18;\n  undefined8 unaff_retaddr;\n  undefined8 *in_stack_00000008;\n  long *in_stack_00000010;\n  char *in_stack_00000018;\n  undefined8 *in_stack_00000020;\n  undefined8 in_stack_00000028;\n  undefined8 in_stack_00000030;\n  uint in_stack_000000f8;\n  long in_stack_00000110;\n  \n  bVar18 = 0;\n  pformatCheck0 = (char *)(in_RAX + 1);\n  do {\n    if (*pformatCheck0 == '/') {\n      extractAndCopyFiles_001052a2();\n      return;\n    }\n    while (*pformatCheck0 == '\\0') {\n      pformatCheck0 = (char *)concat(in_stack_00000018,&DAT_0011b47d);\n      statResult = stat(pformatCheck0,(stat *)&stack0x00000050);\n      puVar7 = unaff_R14;\n      if (-1 < statResult) {\n        lVar12 = create_temp_directory_0011a0e0(pformatCheck0);\n        free(pformatCheck0);\n        if (lVar12 == 0) {\n          piVar8 = __errno_location();\n          pformatCheck0 = strerror(*piVar8);\n          uVar9 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar9,pformatCheck0);\n          goto LAB_00104e93;\n        }\n        puVar7 = (undefined8 *)xmalloc(0x18);\n        pformatCheck0 = *unaff_R15;\n        *puVar7 = unaff_R14;\n        puVar7[2] = 0;\n        puVar7[1] = lVar12;\n        pformatCheck0 = (char *)concat(lVar12,&DAT_0011b47d,pformatCheck0);\n      }\n      statResult = 0;\n      if (DAT_001279eb != '\\0') {\n        psVar17 = (stat *)&stack0x00000050;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar17->st_dev = 0;\n          psVar17 = (stat *)((long)psVar17 + (ulong)bVar18 * -8 + 4);\n        }\n        ppformatCheck1 = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          ppformatCheck1 = unaff_R15;\n        }\n        statResult = (**(code **)(ppformatCheck1[1] + 0x1e8))(unaff_R15,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          pformatCheck6 = *unaff_R15;\n          uVar9 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar9,pformatCheck6);\n        }\n      }\n      unaff_R14 = (undefined8 *)xmalloc(0x18);\n      unaff_R14[1] = pformatCheck0;\n      *unaff_R14 = puVar7;\n      unaff_R14[2] = 0;\n      formatCheck = bfd_check_format(unaff_R15,1);\n      if (formatCheck == '\\0') {\n        uVar9 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_message_001126c0(0,unaff_R15,0,uVar9);\n        ppformatCheck1 = (char **)bfd_openw(pformatCheck0,in_stack_00000028);\n        if (ppformatCheck1 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        ppcVar4 = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          ppcVar4 = unaff_R15;\n        }\n        archCheck = (**(code **)(ppcVar4[1] + 0x1e8))(unaff_R15,&stack0x000000e0);\n        lVar12 = in_stack_00000110;\n        if (archCheck == 0) {\n          if (in_stack_00000110 < 0) {\n            uVar9 = generate_formatted_string_001125fa(unaff_R15);\n            uVar6 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(uVar6,uVar9);\n          }\n          else {\n            archCheck = bfd_seek(unaff_R15,0,0);\n            if (archCheck == 0) {\n              if (DAT_001279e9 != '\\0') {\n                pformatCheck6 = *ppformatCheck1;\n                uVar9 = generate_formatted_string_001125fa(unaff_R15);\n                __format = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(__format,uVar9,pformatCheck6);\n              }\n              pvVar13 = (void *)xmalloc(0x2000);\n              for (; lVar12 != 0; lVar12 = lVar12 - lVar15) {\n                lVar15 = 0x2000;\n                if (lVar12 < 0x2001) {\n                  lVar15 = lVar12;\n                }\n                lVar5 = bfd_bread(pvVar13,lVar15,unaff_R15);\n                ppcVar4 = unaff_R15;\n                if ((lVar15 != lVar5) ||\n                   (lVar5 = bfd_bwrite(pvVar13,lVar15,ppformatCheck1), ppcVar4 = ppformatCheck1, lVar15 != lVar5\n                   )) {\n                  print_error_message_001126c0(0,ppcVar4,0,0);\n                  free(pvVar13);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*ppformatCheck1,in_stack_000000f8 | 0x100);\n              free(pvVar13);\n              formatCheck = bfd_close_all_done(ppformatCheck1);\n              if (formatCheck == '\\0') {\n                print_error_message_001126c0(pformatCheck0,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            uVar9 = generate_formatted_string_001125fa(unaff_R15);\n            print_error_message_0011a110(uVar9);\n          }\n        }\n        else {\n          print_error_message_001126c0(0,unaff_R15,0,0);\n        }\nLAB_00104f00:\n        formatCheck = bfd_close_all_done(ppformatCheck1);\n        if (formatCheck == '\\0') {\n          print_error_message_001126c0(pformatCheck0,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(pformatCheck0);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (in_stack_00000030._7_1_ == '\\0') {\n          ppformatCheck1 = (char **)bfd_openw(pformatCheck0,*(undefined8 *)unaff_R15[1]);\n        }\n        else {\n          ppformatCheck1 = (char **)bfd_openw(pformatCheck0,in_stack_00000028);\n        }\n        if (ppformatCheck1 == (char **)0x0) {\nLAB_00104e80:\n          print_error_message_001126c0(pformatCheck0,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatCheck = FUNC_00114e50(unaff_R15,ppformatCheck1,unaff_retaddr);\n        if (formatCheck == '\\0') {\n          archCheck = bfd_get_arch(unaff_R15);\n          if (archCheck == 0) goto LAB_00104d75;\n          formatCheck = bfd_close_all_done(ppformatCheck1);\n          if (formatCheck == '\\0') {\n            print_error_message_001126c0(pformatCheck0,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatCheck = bfd_close(ppformatCheck1);\n        if (formatCheck == '\\0') {\n          print_error_message_001126c0(pformatCheck0,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (statResult == 0)) {\n          set_file_timestamps_0011a350(pformatCheck0,(stat *)&stack0x00000050);\n        }\n        lVar12 = bfd_openr(pformatCheck0,in_stack_00000028);\n        unaff_R14[2] = lVar12;\n        *in_stack_00000010 = lVar12;\n        in_stack_00000010 = (long *)(lVar12 + 0xf0);\n        ppformatCheck1 = (char **)bfd_openr_next_archived_file(in_stack_00000020,unaff_R15);\n        bfd_close(unaff_R15);\n        unaff_R15 = ppformatCheck1;\n      }\n      if ((DAT_00127a40 != 0) || (unaff_R15 == (char **)0x0)) {\n        *in_stack_00000010 = 0;\n        pvVar13 = (void *)xstrdup(*in_stack_00000008);\n        if (DAT_00127a40 == 0) {\n          pformatCheck4 = bfd_close;\n        }\n        else {\n          pformatCheck4 = bfd_close_all_done;\n        }\n        formatCheck = (*pformatCheck4)(in_stack_00000008);\n        if (formatCheck == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_message_001126c0(pvVar13,0,0,0);\n        }\n        free(pvVar13);\n        pvVar13 = (void *)xstrdup(*in_stack_00000020);\n        formatCheck = bfd_close(in_stack_00000020);\n        if (formatCheck == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_message_001126c0(pvVar13,0,0,0);\n        }\n        free(pvVar13);\n        goto LAB_00114b4b;\n      }\n      pformatCheck0 = *unaff_R15;\n      param_3 = pformatCheck0;\n      if (*pformatCheck0 == '/') goto LAB_0010527d;\n    }\n    pformatCheck6 = pformatCheck0;\n    if ((*pformatCheck0 == '.') && (pformatCheck6 = pformatCheck0 + 1, pformatCheck0[1] == '.')) {\n      pformatCheck6 = pformatCheck0 + 2;\n      if ((pformatCheck0[2] == '\\0') || (pformatCheck0[2] == '/')) {\nLAB_0010527d:\n        uVar9 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar9,param_3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (unaff_R14 != (undefined8 *)0x0) {\n          if (unaff_R14[2] == 0) {\n            rmdir((char *)unaff_R14[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)unaff_R14[1]);\n          }\n          free((void *)unaff_R14[1]);\n          puVar7 = (undefined8 *)*unaff_R14;\n          free(unaff_R14);\n          unaff_R14 = puVar7;\n        }\n        rmdir(in_stack_00000018);\n        free(in_stack_00000018);\n        return;\n      }\n    }\n    for (; (pformatCheck0 = pformatCheck6, *pformatCheck6 != '\\0' && (*pformatCheck6 != '/')); pformatCheck6 = pformatCheck6 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_files_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_data_structure_0010e453",
                "param_1": "dataStructure",
                "param_2": "inputString",
                "param_3": "inputStrings",
                "lVar1": "length",
                "cVar2": "result",
                "sVar3": "stringLength",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "count",
                "ppcVar6": "inputStringsIterator",
                "lVar7": "iterator"
            },
            "code": "\nundefined8 initializeDataStructure_0010e453(long dataStructure,char *inputString,char **inputStrings)\n\n{\n  long length;\n  char result;\n  size_t stringLength;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long count;\n  char **inputStringsIterator;\n  long iterator;\n  \n  if (inputStrings == (char **)0x0) {\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      formattedString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)formattedString,\"xe%s:\",inputString);\nLAB_0010e578:\n      result = initialize_data_structure_00109b52(dataStructure,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    count = 10;\n    inputStringsIterator = inputStrings;\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      count = stringLength + 10;\n    }\n    for (; *inputStringsIterator != (char *)0x0; inputStringsIterator = inputStringsIterator + 1) {\n      stringLength = strlen(*inputStringsIterator);\n      count = count + 0x14 + stringLength;\n    }\n    formattedString = (undefined2 *)xmalloc(count);\n    if (inputString == (char *)0x0) {\n      *formattedString = 0x65;\n      count = 0;\n    }\n    else {\n      count = *(long *)(dataStructure + 0x68);\n      *(long *)(dataStructure + 0x68) = count + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",inputString,count);\n    }\n    iterator = 0;\n    while( true ) {\n      length = *(long *)((long)inputStrings + iterator);\n      stringLength = strlen((char *)formattedString);\n      if (length == 0) break;\n      iterator = iterator + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + stringLength) = 0x3b;\n    if (inputString == (char *)0x0) goto LAB_0010e578;\n    result = process_data_0010e2f0(dataStructure,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = initialize_data_structure_00109cf4(dataStructure,count,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_data_structure_00109d5c",
                "param_1": "input_data",
                "lVar1": "array_size",
                "uVar2": "result"
            },
            "code": "\nundefined8 initialize_data_structure_00109d5c(undefined8 input_data)\n\n{\n  long array_size;\n  undefined8 result;\n  \n  array_size = resize_and_initialize_array_00109c2e();\n  if (-1 < array_size) {\n    result = initialize_data_structure_00109d5c_00109cf4(input_data,array_size,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_data_0010ed2c",
                "param_1": "data",
                "param_2": "size",
                "param_3": "flag",
                "extraout_RDX": "result",
                "uVar3": "maxSize",
                "in_R10": "context",
                "cVar1": "success",
                "iVar2": "count",
                "auVar4": "output"
            },
            "code": "\nundefined  [16] updateData_0010ed2c(long data,ulong size,undefined8 flag)\n\n{\n  char success;\n  int count;\n  undefined8 result;\n  ulong maxSize;\n  undefined8 context;\n  undefined output [16];\n  \n  if (*(ulong *)(data + 0x1f0) < size) {\n    *(ulong *)(data + 0x1f0) = size;\n  }\n  if (*(long *)(data + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data + 0x1f8) != 0) {\n      count = *(int *)(data + 0x1f8) + -1;\n      maxSize = CONCAT71((int7)((ulong)flag >> 8),1);\n      *(int *)(data + 0x1f8) = count;\n      if (count != 0) {\n        output = process_data_0010e2f0(data,0xe0,0,size - *(long *)(data + 0x200),0,context);\n        return output;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    success = process_data_0010e2f0(data,0xc0,0,*(long *)(data + 0x208),0);\n    if (success != '\\0') {\n      *(undefined8 *)(data + 0x208) = 0xffffffffffffffff;\n      flag = result;\n      goto LAB_0010ed78;\n    }\n  }\n  maxSize = 0;\nLAB_0010edae:\n  output._0_8_ = maxSize & 0xffffffff;\n  output._8_8_ = context;\n  return output;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_data_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_blocks_0011a1b0",
                "param_1": "block1",
                "param_2": "block2",
                "param_3": "unused1",
                "param_4": "unused2",
                "uVar1": "block1Size",
                "uVar2": "block2Size",
                "iVar3": "comparisonResult",
                "extraout_var": "extraOutput",
                "uVar4": "finalResult",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] compareMemoryBlocks_0011a1b0(ulong *block1,ulong *block2,undefined8 unused1,undefined8 unused2)\n\n{\n  ulong block1Size;\n  ulong block2Size;\n  int comparisonResult;\n  undefined4 extraOutput;\n  ulong finalResult;\n  undefined returnValue [16];\n  \n  finalResult = *block1;\n  if (*block2 <= *block1) {\n    finalResult = *block2;\n  }\n  comparisonResult = memcmp((void *)(block1[3] + 3),(void *)(block2[3] + 3),finalResult - 3);\n  finalResult = CONCAT44(extraOutput,comparisonResult);\n  if (comparisonResult == 0) {\n    block1Size = block1[8];\n    if (block1Size < block2[7]) {\n      finalResult = 0xffffffff;\n    }\n    else {\n      block2Size = block2[8];\n      if (block2Size < block1[7]) {\n        finalResult = 1;\n      }\n      else {\n        finalResult = 0xffffffff;\n        if (block2[7] <= block1[7]) {\n          if (block2Size < block1Size) {\n            finalResult = 1;\n          }\n          else {\n            finalResult = 0xffffffff;\n            if (block2Size <= block1Size) {\n              if (block1[2] == 0x100) {\n                finalResult = (ulong)-(uint)(block2[2] != 0x100);\n              }\n              else {\n                finalResult = (ulong)(block2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = finalResult;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_blocks_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_build_attributes_001163d0",
                "param_1": "section_1",
                "param_2": "section_2",
                "param_3": "attribute_note_size",
                "param_4": "output_buffer",
                "uVar1": "result",
                "uVar2": "first_section_entry",
                "uVar3": "second_section_entry",
                "bVar4": "condition",
                "puVar5": "tmp_ptr",
                "iVar6": "tmp_var",
                "uVar7": "error_message",
                "lVar8": "length_var",
                "__ptr": "reloc_buffer",
                "uVar9": "tmp_value",
                "uVar10": "tmp_value_2",
                "uVar11": "note_type_size",
                "uVar12": "description_size",
                "uVar13": "aligned_description_size",
                "uVar14": "tmp_note_size",
                "uVar15": "tmp_offset",
                "uVar16": "remaining_size",
                "puVar17": "current_record",
                "puVar18": "output_ptr",
                "cVar19": "build_var",
                "puVar20": "tmp_ptr_2",
                "iVar21": "loop_var",
                "puVar22": "current_ptr",
                "puVar23": "records_ptr",
                "uVar24": "tmp_var_2",
                "__nmemb": "records_count",
                "puVar25": "tmp_ptr_3",
                "bVar26": "byte_var",
                "local_88": "section_end",
                "uStack_80": "tmp_value_3",
                "local_70": "section_start",
                "local_68": "attribute_note_size_final",
                "local_60": "records_buffer"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_build_attributes_001163d0(undefined8 *section_1,undefined8 *section_2,ulong attribute_note_size,undefined *output_buffer)\n\n{\n  ulong result;\n  undefined8 first_section_entry;\n  undefined8 second_section_entry;\n  bool condition;\n  ulong *tmp_ptr;\n  int tmp_var;\n  undefined8 error_message;\n  long length_var;\n  void *reloc_buffer;\n  ulong tmp_value;\n  ulong tmp_value_2;\n  ulong note_type_size;\n  ulong description_size;\n  undefined *reloc_buffer_00;\n  ulong aligned_description_size;\n  ulong tmp_note_size;\n  ulong tmp_offset;\n  ulong remaining_size;\n  ulong *current_record;\n  undefined *output_ptr;\n  char build_var;\n  undefined *tmp_ptr_2;\n  int loop_var;\n  undefined *current_ptr;\n  ulong *records_ptr;\n  ulong tmp_var_2;\n  size_t records_count;\n  ulong *tmp_ptr_3;\n  byte byte_var;\n  ulong section_end;\n  ulong tmp_value_3;\n  ulong section_start;\n  ulong attribute_note_size_final;\n  ulong *records_buffer;\n  \n  byte_var = 0;\n  length_var = bfd_get_reloc_upper_bound();\n  attribute_note_size_final = attribute_note_size;\n  if (0 < length_var) {\n    reloc_buffer = (void *)xmalloc(length_var);\n    length_var = bfd_canonicalize_reloc(section_1,section_2,reloc_buffer,DAT_001278d0);\n    free(reloc_buffer);\n    if (length_var != 0) {\n      if (_DAT_001264c0 == 0) {\n        first_section_entry = *section_1;\n        second_section_entry = *section_2;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(error_message,first_section_entry,second_section_entry);\n      }\n      records_buffer = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  records_buffer = (ulong *)xcalloc(attribute_note_size / 0xc,0x48,attribute_note_size % 0xc);\n  section_end = 0;\n  section_start = 0;\n  remaining_size = attribute_note_size;\n  tmp_offset = 0;\n  records_ptr = records_buffer;\n  tmp_note_size = 0;\n  current_ptr = output_buffer;\n  while (0xb < remaining_size) {\n    tmp_value_2 = (**(code **)(section_1[1] + 0x40))(current_ptr);\n    *records_ptr = tmp_value_2;\n    tmp_value_2 = (**(code **)(section_1[1] + 0x40))(current_ptr + 4);\n    records_ptr[1] = tmp_value_2;\n    note_type_size = (**(code **)(section_1[1] + 0x40))(current_ptr + 8);\n    tmp_value_2 = *records_ptr;\n    records_ptr[2] = note_type_size;\n    description_size = records_ptr[1];\n    aligned_description_size = tmp_value_2 + 3 & 0xfffffffffffffffc;\n    records_ptr[6] = aligned_description_size;\n    if (description_size != (description_size + 3 & 0xfffffffffffffffc)) {\n      length_var = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type_size - 0x100) {\n      length_var = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = aligned_description_size + description_size + 0xc;\n    if (remaining_size < result) {\n      length_var = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (tmp_value_2 < 2) {\n      length_var = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    records_ptr[3] = (ulong)(current_ptr + 0xc);\n    records_ptr[4] = (ulong)(current_ptr + aligned_description_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (aligned_description_size + description_size));\n    if (tmp_value_2 != 2) {\n      if (current_ptr[0xc] == '$') {\n        if ((current_ptr[0xd] == '\\x01') && (current_ptr[0xe] == '1')) {\n          remaining_size = build_attribute_function_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < tmp_value_2) && (current_ptr[0xc] == 'G')) && (current_ptr[0xd] == 'A')) &&\n              ((current_ptr[0xe] == '$' && (current_ptr[0xf] == '\\x01')))) {\n        if (current_ptr[0x10] == '2') {\n          remaining_size = build_attribute_function_00116490();\n          return remaining_size;\n        }\n        if (current_ptr[0x10] == '3') {\n          remaining_size = build_attribute_function_00116490();\n          return remaining_size;\n        }\n        length_var = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    tmp_value = tmp_offset;\n    tmp_var_2 = tmp_note_size;\n    if (description_size == 0) {\n      if (note_type_size == 0x100) {\n        records_ptr[7] = section_end;\nLAB_001164af:\n        description_size = tmp_note_size;\n        tmp_var_2 = tmp_note_size;\n      }\n      else {\n        records_ptr[7] = section_start;\nLAB_0011669e:\n        tmp_value = tmp_offset;\n        description_size = tmp_offset;\n      }\n    }\n    else {\n      if (description_size != 0x10) {\n        if (description_size < 0x11) {\n          if (description_size == 4) {\n            note_type_size = (**(code **)(section_1[1] + 0x40))();\n            description_size = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (description_size == 8) {\n            remaining_size = process_build_attributes_001086af();\n            return remaining_size;\n          }\n        }\n        length_var = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      note_type_size = (**(code **)(section_1[1] + 0x28))(current_ptr + aligned_description_size + 0xc);\n      description_size = (**(code **)(section_1[1] + 0x28))();\n      if (description_size < note_type_size) {\n        note_type_size = description_size;\n      }\nLAB_00116631:\n      if (records_ptr[2] == 0x100) {\n        if (note_type_size == 0) {\n          note_type_size = section_end;\n        }\n        tmp_value_2 = *records_ptr;\n        records_ptr[7] = note_type_size;\n        tmp_var_2 = description_size;\n        section_end = note_type_size;\n        if (description_size == 0) goto LAB_001164af;\n      }\n      else {\n        if (note_type_size == 0) {\n          note_type_size = section_start;\n        }\n        tmp_value_2 = *records_ptr;\n        records_ptr[7] = note_type_size;\n        tmp_value = description_size;\n        section_start = note_type_size;\n        if (description_size == 0) goto LAB_0011669e;\n      }\n    }\n    records_ptr[8] = description_size;\n    if (*(char *)((records_ptr[3] - 1) + tmp_value_2) != '\\0') {\n      length_var = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    records_ptr = records_ptr + 9;\n    tmp_offset = tmp_value;\n    tmp_note_size = tmp_var_2;\n    current_ptr = current_ptr + result;\n  }\n  if (remaining_size == 0) {\n    first_section_entry = *section_1;\n    second_section_entry = *section_2;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(error_message,first_section_entry,second_section_entry);\n    records_count = ((long)records_ptr - (long)records_buffer >> 3) * -0x71c71c71c71c71c7;\n    qsort(records_buffer,records_count,0x48,compare_memory_blocks_0011a1b0);\n    for (current_record = records_buffer; current_record < records_ptr; current_record = current_record + 9) {\n      remaining_size = current_record[2];\n      if (remaining_size != 0) {\n        tmp_offset = current_record[7];\n        tmp_note_size = current_record[8];\n        tmp_ptr_3 = current_record;\n        loop_var = 0;\n        if (tmp_offset == tmp_note_size) {\n          current_record[2] = 0;\n        }\n        else {\n          do {\n            do {\n              tmp_ptr = tmp_ptr_3;\n              tmp_ptr_3 = tmp_ptr + -9;\n              if (tmp_ptr_3 < records_buffer) goto LAB_001167f5;\n              tmp_value_2 = tmp_ptr[-7];\n            } while (tmp_value_2 == 0);\n            if ((*tmp_ptr_3 != *current_record) ||\n               (tmp_var = memcmp((void *)tmp_ptr[-6],(void *)current_record[3],*current_record), tmp_var != 0)) break;\n            description_size = tmp_ptr[-2];\n            note_type_size = tmp_ptr[-1];\n            if (tmp_offset == description_size) {\n              if (tmp_note_size == note_type_size) {\n                current_record[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (tmp_note_size <= note_type_size) {\n                current_record[2] = 0;\n                break;\n              }\n              if (note_type_size < tmp_offset) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < note_type_size) || (tmp_offset <= (note_type_size + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (tmp_value_2 == 0x101)) {\n                if (note_type_size <= tmp_note_size) {\n                  note_type_size = tmp_note_size;\n                }\n                if (description_size < tmp_offset) {\n                  tmp_offset = description_size;\n                }\n                tmp_ptr[-1] = note_type_size;\n                tmp_ptr[-2] = tmp_offset;\n                current_record[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (description_size <= tmp_offset) goto LAB_001167a6;\n              if (note_type_size < tmp_offset) goto LAB_0010852c;\n              if (tmp_note_size < tmp_offset) {\n                if ((0xfffffffffffffff0 < tmp_note_size) || (description_size <= (tmp_note_size + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (tmp_note_size != note_type_size) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            condition = loop_var < 0x11;\n            loop_var = loop_var + 1;\n          } while (condition);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(records_buffer,records_count,0x48,compare_records_0011a250);\n    reloc_buffer_00 = (undefined *)xmalloc(attribute_note_size * 2);\n    tmp_value_3 = 0;\n    section_start = 0;\n    current_ptr = reloc_buffer_00;\n    for (current_record = records_buffer; current_record < records_ptr; current_record = current_record + 9) {\n      if (current_record[2] != 0) {\n        output_ptr = current_ptr + 0xc;\n        if ((current_record[7] == section_start) && (current_record[8] == tmp_value_3)) {\n          (**(code **)(section_1[1] + 0x50))(*current_record,current_ptr);\n          (**(code **)(section_1[1] + 0x50))(0,current_ptr + 4);\n          (**(code **)(section_1[1] + 0x50))(current_record[2],current_ptr + 8);\n          tmp_offset = current_record[6];\n          remaining_size = *current_record;\n          current_ptr = (undefined *)current_record[3];\n          tmp_ptr_2 = output_ptr;\n          for (tmp_note_size = remaining_size; tmp_note_size != 0; tmp_note_size = tmp_note_size - 1) {\n            *tmp_ptr_2 = *current_ptr;\n            current_ptr = current_ptr + (ulong)byte_var * -2 + 1;\n            tmp_ptr_2 = tmp_ptr_2 + (ulong)byte_var * -2 + 1;\n          }\n          if (remaining_size < tmp_offset) {\n            for (length_var = tmp_offset - remaining_size; length_var != 0; length_var = length_var + -1) {\n              *tmp_ptr_2 = 0;\n              tmp_ptr_2 = tmp_ptr_2 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          current_ptr = output_ptr + tmp_offset;\n        }\n        else {\n          (**(code **)(section_1[1] + 0x50))();\n          if (*(int *)(section_1[1] + 8) == 5) {\n            build_var = (*(char *)(section_1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            build_var = '\\b';\n          }\n          (**(code **)(section_1[1] + 0x50))(build_var,current_ptr + 4);\n          (**(code **)(section_1[1] + 0x50))(current_record[2],current_ptr + 8);\n          remaining_size = *current_record;\n          current_ptr = (undefined *)current_record[3];\n          tmp_ptr_2 = output_ptr;\n          for (tmp_offset = remaining_size; tmp_offset != 0; tmp_offset = tmp_offset - 1) {\n            *tmp_ptr_2 = *current_ptr;\n            current_ptr = current_ptr + (ulong)byte_var * -2 + 1;\n            tmp_ptr_2 = tmp_ptr_2 + (ulong)byte_var * -2 + 1;\n          }\n          tmp_offset = current_record[6];\n          if (remaining_size < tmp_offset) {\n            for (length_var = tmp_offset - remaining_size; length_var != 0; length_var = length_var + -1) {\n              *tmp_ptr_2 = 0;\n              tmp_ptr_2 = tmp_ptr_2 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          length_var = section_1[1];\n          output_ptr = output_ptr + tmp_offset;\n          current_ptr = output_ptr + 8;\n          if ((*(int *)(length_var + 8) == 5) && (*(char *)(section_1[0x22] + 4) == '\\x02')) {\n            (**(code **)(length_var + 0x38))(current_record[7],output_ptr);\n            (**(code **)(section_1[1] + 0x38))(current_record[8],current_ptr);\n            current_ptr = output_ptr + 0x10;\n          }\n          else {\n            (**(code **)(length_var + 0x50))(current_record[7],output_ptr);\n            (**(code **)(section_1[1] + 0x50))(current_record[8],output_ptr + 4);\n          }\n          section_start = current_record[7];\n          tmp_value_3 = current_record[8];\n        }\n      }\n    }\n    tmp_offset = (long)current_ptr - (long)reloc_buffer_00;\n    remaining_size = tmp_offset;\n    current_ptr = reloc_buffer_00;\n    attribute_note_size_final = attribute_note_size;\n    if (tmp_offset < attribute_note_size) {\n      for (; attribute_note_size_final = tmp_offset, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *output_buffer = *current_ptr;\n        current_ptr = current_ptr + (ulong)byte_var * -2 + 1;\n        output_buffer = output_buffer + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free(reloc_buffer_00);\n  }\n  else {\n    length_var = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length_var != 0) {\n      bfd_set_error(0x11);\n      print_error_message_001126c0(0,section_1,section_2,length_var);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(records_buffer);\n  return attribute_note_size_final;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_info_00108a2a",
                "param_1": "file",
                "param_2": "error_code",
                "uVar1": "program_name",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsageInfo_00108a2a(FILE *file,int error_code)\n\n{\n  undefined8 program_name;\n  char *message;\n  \n  program_name = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(file,message,program_name);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(file,message);\n  print_supported_targets_00104a35(DAT_00127600,file);\n  if (error_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(error_code);\n}\n\n",
            "called": [
                "FUN_00104a35",
                "exit",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_info_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_info_00108c86",
                "param_1": "driver_info_ptr",
                "cVar1": "compare_result",
                "iVar2": "string_comparison_result",
                "sVar3": "string_length",
                "puVar4": "parsed_driver",
                "lVar5": "offset",
                "__s": "driver_string",
                "__s1": "architecture_string",
                "puVar6": "parsed_driver_ptr",
                "uVar7": "return_value",
                "bVar8": "zero_flag"
            },
            "code": "\nundefined8 parse_driver_info_00108c86(long *driver_info_ptr)\n\n{\n  char compare_result;\n  int string_comparison_result;\n  size_t string_length;\n  undefined2 *parsed_driver;\n  long offset;\n  char *driver_string;\n  char *architecture_string;\n  undefined2 *parsed_driver_ptr;\n  undefined8 return_value;\n  byte zero_flag;\n  \n  zero_flag = 0;\n  offset = *driver_info_ptr;\n  driver_string = (char *)(offset + 4);\n  compare_result = compare_strings_00113fb0(driver_string,&DAT_0011b73b);\n  if (compare_result == '\\0') {\n    compare_result = compare_strings_00113fb0(driver_string,\"bsdrv-\");\n    if (compare_result == '\\0') {\n      compare_result = compare_strings_00113fb0(driver_string,\"rtdrv-\");\n      if (compare_result == '\\0') {\n        return 0xffffffff;\n      }\n      driver_string = (char *)(offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      driver_string = (char *)(offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(driver_string);\n  parsed_driver = (undefined2 *)xmalloc(string_length + 8);\n  architecture_string = driver_string + 4;\n  parsed_driver_ptr = parsed_driver;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)parsed_driver_ptr = *driver_string;\n    driver_string = driver_string + (ulong)zero_flag * -2 + 1;\n    parsed_driver_ptr = (undefined2 *)((long)parsed_driver_ptr + (ulong)zero_flag * -2 + 1);\n  }\n  *(undefined *)(parsed_driver + 1) = 0x69;\n  *parsed_driver = 0x6570;\n  string_comparison_result = strcmp(architecture_string,\"ia32\");\n  if (string_comparison_result == 0) {\n    *(undefined *)((long)parsed_driver + 7) = 0x36;\n    *(undefined2 *)((long)parsed_driver + 5) = 0x3833;\n  }\n  else {\n    string_comparison_result = strcmp(architecture_string,\"x86_64\");\n    if (string_comparison_result == 0) {\n      *(undefined *)((long)parsed_driver + 7) = 0x2d;\n    }\n    else {\n      string_comparison_result = strcmp(architecture_string,\"aarch64\");\n      if (string_comparison_result == 0) {\n        *(undefined8 *)((long)parsed_driver + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_info_ptr = (long)parsed_driver;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_driver_info_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_error_message_and_close_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "errorMessagePointer"
            },
            "code": "\nundefined4 printErrorMessageAndClose_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *errorMessagePointer;\n  \n  print_error_message_0011a110(*errorMessagePointer);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_error_message_and_close_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "stackFramePointer",
                "unaff_R14": "memoryAddress"
            },
            "code": "\nvoid checkAndSetFlags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint stackFramePointer;\n  long memoryAddress;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((stackFramePointer & 0x10) == 0)) && ((stackFramePointer & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((stackFramePointer & 0x40) == 0)) && ((stackFramePointer & 0x60) != 0x60)) {\n      *(uint *)(memoryAddress + 0x14) = flags | stackFramePointer;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_string_00109a0b",
                "param_1": "sourceString",
                "param_2": "sourceLength",
                "puVar1": "copiedString",
                "lVar2": "copyIndex",
                "puVar3": "copyDestination",
                "bVar4": "isByteZero"
            },
            "code": "\nvoid copyAndNullTerminateString_00109a0b(undefined *sourceString,int sourceLength)\n\n{\n  undefined *copiedString;\n  long copyIndex;\n  undefined *copyDestination;\n  byte isByteZero;\n  \n  isByteZero = 0;\n  copiedString = (undefined *)xmalloc((long)(sourceLength + 1));\n  copyDestination = copiedString;\n  for (copyIndex = (long)sourceLength; copyIndex != 0; copyIndex = copyIndex + -1) {\n    *copyDestination = *sourceString;\n    sourceString = sourceString + (ulong)isByteZero * -2 + 1;\n    copyDestination = copyDestination + (ulong)isByteZero * -2 + 1;\n  }\n  copiedString[sourceLength] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010afd5",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "initialize_slot_0010da0b",
                "param_1": "slotPtr",
                "param_2": "slotIndex",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "errorMessage",
                "plVar2": "tempPtr",
                "lVar3": "offset",
                "lVar4": "tempOffset",
                "uVar5": "tempIndex",
                "bVar6": "flag",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] initializeSlot_0010da0b(long **slotPtr,ulong slotIndex,undefined8 arg1,undefined8 arg2)\n\n{\n  undefined8 errorMessage;\n  long *tempPtr;\n  long offset;\n  long tempOffset;\n  ulong tempIndex;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  tempIndex = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)tempIndex; tempIndex = tempIndex - 0x10) {\n      if (*slotPtr == (long *)0x0) {\n        tempPtr = (long *)xmalloc(0x88);\n        *slotPtr = tempPtr;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)tempPtr = 0;\n          tempPtr = (long *)((long)tempPtr + (ulong)flag * -8 + 4);\n        }\n      }\n      slotPtr = (long **)*slotPtr;\n    }\n    offset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      offset = 0;\n    }\n    if (*slotPtr == (long *)0x0) {\n      tempPtr = (long *)xmalloc(0x88);\n      *slotPtr = tempPtr;\n      for (tempOffset = 0x22; tempOffset != 0; tempOffset = tempOffset + -1) {\n        *(undefined4 *)tempPtr = 0;\n        tempPtr = (long *)((long)tempPtr + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = arg2;\n    result._0_8_ = *slotPtr + slotIndex + offset + 1;\n    return result;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "initialize_slot_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_data_structure_00112894",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "paramA",
                "param_4": "paramB",
                "puVar1": "dataStructure",
                "puVar2": "ptr",
                "lVar3": "counter",
                "bVar4": "byte",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined8 *\ninitializeDataStructure_00112894(undefined8 data,undefined flag,undefined8 paramA,undefined8 paramB)\n\n{\n  undefined8 *dataStructure;\n  undefined8 *ptr;\n  long counter;\n  byte byte;\n  \n  byte = 0;\n  dataStructure = (undefined8 *)xmalloc(0x1b0);\n  ptr = dataStructure;\n  for (counter = 0x6c; counter != 0; counter = counter + -1) {\n    *(undefined4 *)ptr = 0;\n    ptr = (undefined8 *)((long)ptr + (ulong)byte * -8 + 4);\n  }\n  *dataStructure = data;\n  *(undefined *)(dataStructure + 1) = flag;\n  dataStructure[2] = paramA;\n  dataStructure[3] = paramB;\n  *(undefined4 *)(dataStructure + 0x10) = 1;\n  ptr = (undefined8 *)xmalloc(8);\n  dataStructure[0xd] = 0xffffffffffffffff;\n  dataStructure[0x11] = ptr;\n  *ptr = 0;\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_remove_ptr_from_param_00109b2f"
            },
            "code": "\nundefined8 * extract_and_remove_ptr_from_param_00109b2f(long param_1)\n\n{\n  undefined8 *__ptr;\n  undefined8 *puVar1;\n  \n  __ptr = *(undefined8 **)(param_1 + 0x60);\n  if (__ptr != (undefined8 *)0x0) {\n    puVar1 = (undefined8 *)__ptr[1];\n    *(undefined8 *)(param_1 + 0x60) = *__ptr;\n    free(__ptr);\n    return puVar1;\n  }\n  return __ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e5db",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010e9a0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e918"
            ],
            "imported": false,
            "current_name": "extract_and_remove_ptr_from_param_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "filename",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "return_value",
                "ppcVar1": "symbol_entry",
                "pcVar2": "symbol_name_copy",
                "lVar3": "symbol_entry_found",
                "uVar4": "error_message",
                "plVar5": "symbol_entry_slot"
            },
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 filename,char *symbol_name,char *target_symbol,undefined8 return_value)\n\n{\n  char **symbol_entry;\n  char *symbol_name_copy;\n  long symbol_entry_found;\n  undefined8 error_message;\n  long *symbol_entry_slot;\n  \n  symbol_entry = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_entry = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_entry[1] = symbol_name_copy;\n  symbol_entry_found = htab_find(error_message,symbol_entry);\n  if (symbol_entry_found != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,filename,symbol_name);\n  }\n  symbol_entry_found = htab_find(DAT_001278e8,target_symbol);\n  if (symbol_entry_found != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,filename,target_symbol);\n  }\n  symbol_entry_slot = (long *)htab_find_slot(DAT_001278f0,symbol_entry,1);\n  error_message = DAT_001278e8;\n  *symbol_entry_slot = (long)symbol_entry;\n  symbol_name_copy = symbol_entry[1];\n  symbol_entry = (char **)htab_find_slot(error_message,symbol_name_copy,1);\n  *symbol_entry = symbol_name_copy;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "dcgettext",
                "strdup",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "format_and_process_data_0010e9a0",
                "param_1": "data",
                "param_2": "prefix",
                "param_3": "type",
                "param_4": "ptr",
                "__s": "extractedString",
                "__s_00": "newString",
                "__s_01": "formattedString",
                "lVar1": "count",
                "uVar2": "result",
                "pcVar5": "typeString",
                "uVar6": "flag",
                "sVar3": "prefixLen",
                "sVar4": "extractedStringLen"
            },
            "code": "\nundefined4 formatAndProcessData_0010e9a0(long data,char *prefix,undefined4 type,undefined8 ptr)\n\n{\n  long count;\n  undefined4 result;\n  byte *extractedString;\n  byte *newString;\n  size_t prefixLen;\n  size_t extractedStringLen;\n  char *formattedString;\n  char *typeString;\n  undefined8 flag;\n  \n  extractedString = (byte *)extract_and_remove_ptr_from_param_00109b2f();\n  switch(type) {\n  case 1:\n    typeString = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    typeString = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    typeString = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    typeString = \"\";\n    flag = 0x80;\n    if (((&_sch_istable)[(ulong)*extractedString * 2] & 4) == 0) {\n      count = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = count + 1;\n      prefixLen = strlen((char *)extractedString);\n      newString = (byte *)xmalloc(prefixLen + 0x14);\n      sprintf((char *)newString,\"%ld=%s\",count,extractedString);\n      free(extractedString);\n      extractedString = newString;\n    }\n    break;\n  case 5:\n    typeString = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  prefixLen = strlen(prefix);\n  extractedStringLen = strlen((char *)extractedString);\n  formattedString = (char *)xmalloc(prefixLen + 3 + extractedStringLen);\n  sprintf(formattedString,\"%s:%s%s\",prefix,typeString,extractedString);\n  free(extractedString);\n  result = process_data_0010e2f0(data,flag,0,ptr,formattedString);\n  if ((char)result != '\\0') {\n    free(formattedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_process_data_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_error_and_exit_0010827b",
                "unaff_RBX": "section_ptr",
                "uVar1": "section_value",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_and_exit_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  \n  section_value = *section_ptr;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_and_exit_0010827b_00119dd0(error_message,section_value);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "handle_bad_number_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getMessage",
                "print_error_and_exit_00119dd0": "printErrorAndExit"
            },
            "code": "\nvoid handleBadNumber_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  printErrorAndExit(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "handle_bad_number_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareStrings",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStrings,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "xcalloc",
                "free",
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "ptrRBX",
                "unaff_RBP": "ptrRBP",
                "unaff_R12": "ptrR12",
                "unaff_R14B": "charR14B",
                "unaff_R15": "ptrR15",
                "lVar1": "var1",
                "lVar2": "var2",
                "cVar3": "charC",
                "lVar4": "var4",
                "lVar5": "var5",
                "dcgettext": "getLocalizedMessage",
                "retrieve_data_00115d00": "retrieveData",
                "copy_private_data_and_print_error_0010808f": "copyAndPrintError",
                "print_error_message_001126c0": "printErrorMessage"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long var1;\n  long var2;\n  char charC;\n  long var4;\n  long var5;\n  long ptrRBX;\n  long ptrRBP;\n  long ptrR12;\n  char charR14B;\n  long ptrR15;\n  \n  var4 = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(ptrR15 + 0xb4) = *(undefined4 *)(ptrRBX + 0xb4);\n  *(byte *)(ptrR15 + 0x28) =\n       *(byte *)(ptrR15 + 0x28) & 0xcf | *(byte *)(ptrRBX + 0x28) & 0x30;\n  *(long *)(ptrRBX + 0x60) = ptrR15;\n  *(undefined8 *)(ptrRBX + 0x58) = 0;\n  if ((*(byte *)(ptrRBX + 0x27) & 2) != 0) {\n    var1 = *(long *)(ptrRBX + 0xd0);\n    var5 = retrieveData(var1,*(undefined8 *)(ptrRBX + 0xe0));\n    if ((var5 != 0) &&\n       (var2 = *(long *)(ptrR12 + 8), *(uint *)(var5 + 0x18) = *(uint *)(var5 + 0x18) | 0x20,\n       *(int *)(var2 + 8) == 5)) {\n      *(long *)(var1 + 0xb0) = var5;\n      charC = (**(code **)(*(long *)(ptrRBP + 8) + 0x158))();\n      if (charC == '\\0') {\n        copyAndPrintError();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charC = (**(code **)(*(long *)(ptrRBP + 8) + 0x158))();\n  if (charC == '\\0') {\n    copyAndPrintError();\n    return;\n  }\nLAB_0011571e:\n  if (charR14B != '\\0') {\n    *(undefined4 *)(*(long *)(ptrR15 + 0xd0) + 4) = 8;\n  }\n  if (var4 != 0) {\n    DAT_00127a40 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "check_type_file_number_00109022",
                "param_1": "fileNumber",
                "param_2": "typeIndices",
                "param_3": "unknown1",
                "param_4": "unknown2",
                "uVar1": "typeIndex",
                "pcVar2": "errorMessage",
                "plVar3": "allocatedMemory",
                "lVar4": "loopCounter",
                "uVar5": "typeIndicesValue",
                "pplVar6": "nestedAllocatedMemory",
                "bVar7": "byteFlag",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] checkTypeFileNumber_00109022(long fileNumber,uint *typeIndices,undefined8 unknown1,undefined8 unknown2)\n\n{\n  uint typeIndex;\n  char *errorMessage;\n  long *allocatedMemory;\n  long loopCounter;\n  uint typeIndicesValue;\n  long **nestedAllocatedMemory;\n  byte byteFlag;\n  undefined returnValue [16];\n  \n  byteFlag = 0;\n  typeIndicesValue = *typeIndices;\n  typeIndex = typeIndices[1];\n  if (((int)typeIndicesValue < 0) || (*(uint *)(fileNumber + 0x80) <= typeIndicesValue)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)typeIndicesValue);\n  }\n  else {\n    if (-1 < (int)typeIndex) {\n      nestedAllocatedMemory = (long **)(*(long *)(fileNumber + 0x88) + (long)(int)typeIndicesValue * 8);\n      for (typeIndicesValue = typeIndex; 0xf < (int)typeIndicesValue; typeIndicesValue = typeIndicesValue - 0x10) {\n        if (*nestedAllocatedMemory == (long *)0x0) {\n          allocatedMemory = (long *)xmalloc(0x88);\n          *nestedAllocatedMemory = allocatedMemory;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)allocatedMemory = 0;\n            allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteFlag * -8 + 4);\n          }\n        }\n        nestedAllocatedMemory = (long **)*nestedAllocatedMemory;\n      }\n      if (*nestedAllocatedMemory == (long *)0x0) {\n        allocatedMemory = (long *)xmalloc(0x88);\n        *nestedAllocatedMemory = allocatedMemory;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)allocatedMemory = 0;\n          allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteFlag * -8 + 4);\n        }\n      }\n      allocatedMemory = *nestedAllocatedMemory + (long)(int)((typeIndex >> 4) * -0x10 + typeIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)typeIndex);\n  }\n  allocatedMemory = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = unknown2;\n  returnValue._0_8_ = allocatedMemory;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "check_type_file_number_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "param_1": "file_ptr",
                "param_2": "record_value",
                "param_3": "file_size",
                "param_4": "record_type",
                "auVar1": "record_ptr",
                "uVar2": "result",
                "piVar3": "record_ptr_2",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "mem_ptr",
                "piVar7": "ptr_increment"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file_ptr,long record_value,ulong file_size,int record_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined record_ptr [16];\n  undefined8 result;\n  int *record_ptr_2;\n  char flag;\n  long loop_counter;\n  long mem_ptr;\n  int *ptr_increment;\n  byte bVar8;\n  undefined auVar9 [16];\n  \n  bVar8 = 0;\n  if (record_value == 0) {\n    record_ptr._8_8_ = 0;\n    record_ptr._0_8_ = file_size;\n    return record_ptr << 0x40;\n  }\n  if (file_size != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (mem_ptr = *(long *)(file_ptr + 0x10), mem_ptr == 0)) {\n      result = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n    }\n    else {\n      if (record_type - 1U < 2) {\n        mem_ptr = mem_ptr + 0x10;\n        flag = (record_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        mem_ptr = mem_ptr + 0x10;\n        flag = '\\0';\n      }\n      else {\n        mem_ptr = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      mem_ptr = initialize_memory_00112925(mem_ptr,record_value,2,flag);\n      if (mem_ptr != 0) {\n        record_ptr_2 = (int *)xmalloc(0x18);\n        ptr_increment = record_ptr_2 + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *ptr_increment = 0;\n          ptr_increment = ptr_increment + (ulong)bVar8 * -2 + 1;\n        }\n        *record_ptr_2 = record_type;\n        result = 1;\n        *(ulong *)(record_ptr_2 + 2) = file_size;\n        *(undefined8 *)(record_ptr_2 + 4) = param_5;\n        *(int **)(mem_ptr + 0x20) = record_ptr_2;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  result = 0;\nLAB_0010c12e:\n  auVar9._8_8_ = param_6;\n  auVar9._0_8_ = result;\n  return auVar9;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "debug_record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_increment_00109d97",
                "param_1": "function_param",
                "lVar1": "loop_counter",
                "local_40": "output_string"
            },
            "code": "\nvoid initialize_or_increment_00109d97(long function_param)\n\n{\n  long loop_counter;\n  char output_string [40];\n  \n  if (*(long *)(function_param + 0x70) != 0) {\n    initialize_data_structure_00109cf4(function_param,*(long *)(function_param + 0x70),0);\n    return;\n  }\n  loop_counter = *(long *)(function_param + 0x68);\n  *(long *)(function_param + 0x68) = loop_counter + 1;\n  sprintf(output_string,\"%ld=%ld\",loop_counter,loop_counter);\n  initialize_data_structure_00109b52(function_param,output_string,loop_counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "process_build_attributes_001086af",
                "param_7": "in_RCX",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "bVar4": "isConditionTrue",
                "puVar5": "pointerVar1",
                "iVar6": "loopCounter",
                "lVar7": "errorVar",
                "uVar8": "stringVar1",
                "uVar9": "minValue",
                "uVar10": "maxValue",
                "uVar11": "tempVar3",
                "uVar12": "inputParam2",
                "uVar13": "inputParam3",
                "uVar14": "inputParam4",
                "__ptr": "ptrVar",
                "in_RCX": "inputParam1",
                "puVar15": "unaff_R12",
                "iVar23": "loopCounter2",
                "uVar20": "tempVar8",
                "__nmemb": "sizeVar",
                "puVar16": "unaff_R12Ptr",
                "cVar17": "conditionVar",
                "puVar18": "pointerVar2",
                "puVar19": "pointerVar3"
            },
            "code": "\nulong process_build_attributes_001086af(void)\n\n{\n  ulong result;\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  bool isConditionTrue;\n  ulong *pointerVar1;\n  int loopCounter;\n  long errorVar;\n  undefined8 stringVar1;\n  ulong minValue;\n  ulong maxValue;\n  ulong tempVar3;\n  undefined *ptrVar;\n  ulong inputParam1;\n  ulong inputParam2;\n  ulong inputParam3;\n  ulong inputParam4;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *unaff_R12;\n  undefined *unaff_R12Ptr;\n  char conditionVar;\n  undefined *pointerVar2;\n  undefined *pointerVar3;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong tempVar8;\n  size_t sizeVar;\n  undefined8 *unaff_R14;\n  ulong *ptempVar11;\n  byte bVar22;\n  int loopCounter2;\n  ulong unaff_retaddr;\n  ulong in_RCX;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  in_RCX = inputParam1;\n  minValue = (**(code **)(unaff_R14[1] + 0x40))();\n  maxValue = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  inputParam3 = unaff_RBP;\n  tempVar8 = unaff_R13;\n  if (maxValue < minValue) {\n    minValue = maxValue;\n  }\n  do {\n    tempVar3 = in_RCX;\n    inputParam2 = in_RCX;\n    unaff_R12 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (minValue == 0) {\n        minValue = unaff_retaddr;\n      }\n      inputParam4 = *unaff_R12;\n      unaff_R12[7] = minValue;\n      unaff_RBP = inputParam3;\n      unaff_R13 = maxValue;\n      unaff_retaddr = minValue;\n      if (maxValue == 0) goto LAB_001164af;\n    }\n    else {\n      if (minValue == 0) {\n        minValue = param_9;\n      }\n      inputParam4 = *unaff_R12;\n      unaff_R12[7] = minValue;\n      unaff_RBP = maxValue;\n      unaff_R13 = tempVar8;\n      param_9 = minValue;\n      if (maxValue == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    unaff_R12[8] = maxValue;\n    if (*(char *)((unaff_R12[3] - 1) + inputParam4) != '\\0') {\n      errorVar = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = unaff_R12 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        errorVar = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        errorVar = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      tempVar1 = *unaff_R14;\n      tempVar2 = *param_14;\n      stringVar1 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(stringVar1,tempVar1,tempVar2);\nLAB_0011671b:\n      sizeVar = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,sizeVar,0x48,compare_memory_blocks_0011a1b0);\n      unaff_R12 = param_11;\n      goto LAB_001167f9;\n    }\n    maxValue = (**(code **)(unaff_R14[1] + 0x40))(inputParam2);\n    *unaff_R12 = maxValue;\n    maxValue = (**(code **)(unaff_R14[1] + 0x40))(inputParam2 + 4);\n    unaff_R12[10] = maxValue;\n    minValue = (**(code **)(unaff_R14[1] + 0x40))(inputParam2 + 8);\n    inputParam4 = *unaff_R12;\n    unaff_R12[0xb] = minValue;\n    maxValue = unaff_R12[10];\n    inputParam3 = inputParam4 + 3 & 0xfffffffffffffffc;\n    unaff_R12[0xf] = inputParam3;\n    if (maxValue != (maxValue + 3 & 0xfffffffffffffffc)) {\n      errorVar = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < minValue - 0x100) {\n      errorVar = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    tempVar3 = inputParam3 + maxValue + 0xc;\n    if (unaff_RBX < tempVar3) {\n      errorVar = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (inputParam4 < 2) {\n      errorVar = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12[0xc] = inputParam2 + 0xc;\n    result = inputParam2 + 0xc + inputParam3;\n    unaff_R12[0xd] = result;\n    unaff_RBX = unaff_RBX + (-0xc - (inputParam3 + maxValue));\n    tempVar3 = inputParam2 + tempVar3;\n    if (inputParam4 != 2) {\n      if (*(char *)(inputParam2 + 0xc) == '$') {\n        if ((*(char *)(inputParam2 + 0xd) == '\\x01') && (*(char *)(inputParam2 + 0xe) == '1')) {\n          maxValue = build_attribute_function_00116490();\n          return maxValue;\n        }\n      }\n      else if ((((4 < inputParam4) && (*(char *)(inputParam2 + 0xc) == 'G')) &&\n               (*(char *)(inputParam2 + 0xd) == 'A')) &&\n              ((*(char *)(inputParam2 + 0xe) == '$' && (*(char *)(inputParam2 + 0xf) == '\\x01')))) {\n        if (*(char *)(inputParam2 + 0x10) == '2') {\n          maxValue = build_attribute_function_00116490();\n          return maxValue;\n        }\n        if (*(char *)(inputParam2 + 0x10) == '3') {\n          maxValue = build_attribute_function_00116490();\n          return maxValue;\n        }\n        errorVar = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    inputParam3 = unaff_RBP;\n    tempVar8 = unaff_R13;\n    if (maxValue == 0) {\n      if (minValue == 0x100) {\n        unaff_R12[0x10] = unaff_retaddr;\nLAB_001164af:\n        inputParam2 = tempVar3;\n        maxValue = tempVar8;\n        unaff_R12 = unaff_R12;\n        unaff_R13 = tempVar8;\n      }\n      else {\n        unaff_R12[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = inputParam3;\n        inputParam2 = tempVar3;\n        maxValue = inputParam3;\n        unaff_R12 = unaff_R12;\n        unaff_R13 = tempVar8;\n      }\n      goto LAB_001164bb;\n    }\n    if (maxValue == 0x10) break;\n    if (0x10 < maxValue) {\nLAB_00116679:\n      errorVar = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (errorVar != 0) {\n        bfd_set_error(0x11);\n        print_error_message_001126c0(0,unaff_R14,param_14,errorVar);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (maxValue != 4) {\n      if (maxValue == 8) {\n        maxValue = process_build_attributes_001086af();\n        return maxValue;\n      }\n      goto LAB_00116679;\n    }\n    in_RCX = tempVar3;\n    minValue = (**(code **)(unaff_R14[1] + 0x40))();\n    maxValue = 0xffffffffffffffff;\n  } while( true );\n  in_RCX = tempVar3;\n  minValue = (**(code **)(unaff_R14[1] + 0x28))(result);\n  maxValue = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= unaff_R12) {\n    qsort(param_11,sizeVar,0x48,compare_records_0011a250);\n    ptrVar = (undefined *)xmalloc(param_10 * 2);\n    in_RCX = 0;\n    param_9 = 0;\n    pointerVar3 = ptrVar;\n    for (unaff_R12 = param_11; unaff_R12 < unaff_R12; unaff_R12 = unaff_R12 + 9) {\n      if (unaff_R12[2] != 0) {\n        pointerVar2 = pointerVar3 + 4;\n        unaff_R12Ptr = pointerVar3 + 0xc;\n        if ((unaff_R12[7] == param_9) && (unaff_R12[8] == in_RCX)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*unaff_R12,pointerVar3);\n          (**(code **)(unaff_R14[1] + 0x50))(0,pointerVar2);\n          (**(code **)(unaff_R14[1] + 0x50))(unaff_R12[2],pointerVar3 + 8);\n          minValue = unaff_R12[6];\n          maxValue = *unaff_R12;\n          pointerVar3 = (undefined *)unaff_R12[3];\n          pointerVar2 = unaff_R12Ptr;\n          for (inputParam3 = maxValue; inputParam3 != 0; inputParam3 = inputParam3 - 1) {\n            *pointerVar2 = *pointerVar3;\n            pointerVar3 = pointerVar3 + (ulong)bVar22 * -2 + 1;\n            pointerVar2 = pointerVar2 + (ulong)bVar22 * -2 + 1;\n          }\n          if (maxValue < minValue) {\n            for (errorVar = minValue - maxValue; errorVar != 0; errorVar = errorVar + -1) {\n              *pointerVar2 = 0;\n              pointerVar2 = pointerVar2 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          pointerVar3 = unaff_R12Ptr + minValue;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            conditionVar = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            conditionVar = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(conditionVar,pointerVar2);\n          (**(code **)(unaff_R14[1] + 0x50))(unaff_R12[2],pointerVar3 + 8);\n          maxValue = *unaff_R12;\n          pointerVar3 = (undefined *)unaff_R12[3];\n          pointerVar2 = unaff_R12Ptr;\n          for (minValue = maxValue; minValue != 0; minValue = minValue - 1) {\n            *pointerVar2 = *pointerVar3;\n            pointerVar3 = pointerVar3 + (ulong)bVar22 * -2 + 1;\n            pointerVar2 = pointerVar2 + (ulong)bVar22 * -2 + 1;\n          }\n          minValue = unaff_R12[6];\n          if (maxValue < minValue) {\n            for (errorVar = minValue - maxValue; errorVar != 0; errorVar = errorVar + -1) {\n              *pointerVar2 = 0;\n              pointerVar2 = pointerVar2 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          errorVar = unaff_R14[1];\n          unaff_R12Ptr = unaff_R12Ptr + minValue;\n          pointerVar3 = unaff_R12Ptr + 8;\n          if ((*(int *)(errorVar + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(errorVar + 0x38))(unaff_R12[7],unaff_R12Ptr);\n            (**(code **)(unaff_R14[1] + 0x38))(unaff_R12[8],pointerVar3);\n            pointerVar3 = unaff_R12Ptr + 0x10;\n          }\n          else {\n            (**(code **)(errorVar + 0x50))(unaff_R12[7],unaff_R12Ptr);\n            (**(code **)(unaff_R14[1] + 0x50))(unaff_R12[8],unaff_R12Ptr + 4);\n          }\n          param_9 = unaff_R12[7];\n          in_RCX = unaff_R12[8];\n        }\n      }\n    }\n    minValue = (long)pointerVar3 - (long)ptrVar;\n    maxValue = minValue;\n    pointerVar3 = ptrVar;\n    if (minValue < param_10) {\n      for (; param_10 = minValue, maxValue != 0; maxValue = maxValue - 1) {\n        *in_stack_00000030 = *pointerVar3;\n        pointerVar3 = pointerVar3 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(ptrVar);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (unaff_R12[2] != 0) {\n    maxValue = unaff_R12[7];\n    minValue = unaff_R12[8];\n    inputParam3 = unaff_R12[2];\n    ptempVar11 = unaff_R12;\n    loopCounter2 = 0;\n    if (maxValue == minValue) {\n      unaff_R12[2] = 0;\n    }\n    else {\n      do {\n        do {\n          pointerVar1 = ptempVar11;\n          ptempVar11 = pointerVar1 + -9;\n          if (ptempVar11 < param_11) goto LAB_001167f5;\n          tempVar8 = pointerVar1[-7];\n        } while (tempVar8 == 0);\n        in_RCX = inputParam3;\n        if ((*ptempVar11 != *unaff_R12) ||\n           (loopCounter = memcmp((void *)pointerVar1[-6],(void *)unaff_R12[3],*unaff_R12), loopCounter != 0)) break;\n        inputParam3 = pointerVar1[-2];\n        tempVar3 = pointerVar1[-1];\n        if (maxValue == inputParam3) {\n          if (minValue == tempVar3) {\n            unaff_R12[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (minValue <= tempVar3) {\n            unaff_R12[2] = 0;\n            break;\n          }\n          if (tempVar3 < maxValue) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < tempVar3) || (maxValue <= (tempVar3 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n          }\nLAB_001167b8:\n          if ((in_RCX == 0x101) == (tempVar8 == 0x101)) {\n            if (tempVar3 <= minValue) {\n              tempVar3 = minValue;\n            }\n            if (inputParam3 < maxValue) {\n              maxValue = inputParam3;\n            }\n            pointerVar1[-1] = tempVar3;\n            pointerVar1[-2] = maxValue;\n            unaff_R12[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (inputParam3 <= maxValue) goto LAB_001167a6;\n          if (tempVar3 < maxValue) goto LAB_0010852c;\n          if (minValue < maxValue) {\n            if ((0xfffffffffffffff0 < minValue) || (inputParam3 <= (minValue + 0xf & 0xfffffffffffffff0)))\n            goto process_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (minValue != tempVar3) goto LAB_001167b8;\n        }\nprocess_records_00116852:\n        isConditionTrue = loopCounter2 < 0x11;\n        inputParam3 = in_RCX;\n        loopCounter2 = loopCounter2 + 1;\n      } while (isConditionTrue);\n    }\n  }\nLAB_001167f5:\n  unaff_R12 = unaff_R12 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010847a",
                "FUN_00116490",
                "bfd_set_error",
                "FUN_0011a1b0",
                "dcgettext",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "process_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_config_0010add5",
                "update_config_0010abdd": "update_config"
            },
            "code": "\nvoid initialize_config_0010add5(void)\n\n{\n  update_config();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_config_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_data_00113e17",
                "allocate_and_initialize_data_00112904": "allocateAndInitializeData"
            },
            "code": "\nvoid initializeData_00113e17(void)\n\n{\n  allocateAndInitializeData(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "ptrToDataStructure",
                "param_2": "sourceString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "oldValue",
                "puVar2": "newDataStructure",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long ptrToDataStructure,undefined8 sourceString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 oldValue;\n  undefined8 *newDataStructure;\n  undefined8 duplicatedString;\n  \n  newDataStructure = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  newDataStructure[2] = param3;\n  *(undefined (*) [16])(newDataStructure + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newDataStructure + 6) = ZEXT816(0);\n  oldValue = *(undefined8 *)(ptrToDataStructure + 0x60);\n  *(undefined *)((long)newDataStructure + 0x1c) = param4;\n  *(undefined4 *)(newDataStructure + 3) = param5;\n  *(undefined8 **)(ptrToDataStructure + 0x60) = newDataStructure;\n  *newDataStructure = oldValue;\n  newDataStructure[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e453",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109e76"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_and_convert_input_00109a32",
                "param_1": "input_ptr",
                "param_2": "error_flag_ptr",
                "param_3": "end_ptr",
                "param_4": "arg1",
                "param_5": "arg2",
                "__nptr": "current_ptr",
                "piVar1": "errno_ptr",
                "uVar2": "converted_value",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_and_convert_input_00109a32(char **input_ptr,undefined *error_flag_ptr,char *end_ptr,undefined8 arg1,undefined8 arg2)\n\n{\n  char *current_ptr;\n  int *errno_ptr;\n  ulong converted_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (error_flag_ptr != (undefined *)0x0) {\n    *error_flag_ptr = 0;\n  }\n  current_ptr = *input_ptr;\n  if ((current_ptr < end_ptr) && (*current_ptr != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    converted_value = strtoul(current_ptr,input_ptr,0);\n    if ((converted_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag_ptr == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_message_00108fe8(current_ptr,error_message);\n    }\n    else {\n      *error_flag_ptr = 1;\n    }\n  }\n  converted_value = 0;\nLAB_00109aa9:\n  result._8_8_ = arg2;\n  result._0_8_ = converted_value;\n  return result;\n}\n\n",
            "called": [
                "FUN_00108fe8",
                "strtoul",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_convert_input_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "check_debug_tag_type_0010c6be",
                "param_1": "ptr_param1",
                "param_2": "ptr_param2",
                "param_3": "ptr_param3",
                "iVar1": "comparison_result",
                "uVar2": "translated_string",
                "piVar3": "ptr_allocated_data",
                "pauVar4": "ptr_array",
                "lVar5": "initialized_mem",
                "pcVar6": "debug_error_message"
            },
            "code": "\n\n\nint * check_debug_tag_type_0010c6be(long ptr_param1,char *ptr_param2,int *ptr_param3)\n\n{\n  int comparison_result;\n  undefined8 translated_string;\n  int *ptr_allocated_data;\n  undefined (*ptr_array) [16];\n  long initialized_mem;\n  char *debug_error_message;\n  \n  if ((ptr_param2 != (char *)0x0) && (ptr_param3 != (int *)0x0)) {\n    if (*(long *)(ptr_param1 + 0x10) == 0) {\n      debug_error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*ptr_param3 != 0x17) {\n        ptr_allocated_data = (int *)allocate_and_initialize_data_00112904(0x17,0);\n        if (ptr_allocated_data == (int *)0x0) {\n          return (int *)0x0;\n        }\n        ptr_array = (undefined (*) [16])xmalloc(0x10);\n        initialized_mem = *(long *)(ptr_param1 + 0x10);\n        *ptr_array = ZEXT816(0);\n        *(int **)(*ptr_array + 8) = ptr_param3;\n        *(undefined (**) [16])(ptr_allocated_data + 4) = ptr_array;\n        initialized_mem = initialize_memory_00112925(initialized_mem + 0x10,ptr_param2,1,3);\n        if (initialized_mem == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(initialized_mem + 0x20) = ptr_allocated_data;\n        *(long *)*ptr_array = initialized_mem;\n        return ptr_allocated_data;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(ptr_param3 + 4) + 8),ptr_param2);\n      debug_error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return ptr_param3;\n      }\n    }\n    translated_string = dcgettext(0,debug_error_message,5);\n    fprintf(_stderr,\"%s\\n\",translated_string);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "strcmp",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "check_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "extract_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "isError",
                "__ptr": "result",
                "__format": "errorMsg",
                "lVar1": "returnValue",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "index",
                "local_39": "tempBuffer",
                "_stderr": "stderr"
            },
            "code": "\n\n\nvoid * extractArglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *isError)\n\n{\n  void *result;\n  char *errorMsg;\n  long returnValue;\n  ulong count;\n  ulong capacity;\n  uint index;\n  char tempBuffer [9];\n  \n  capacity = 10;\n  count = 0;\n  result = (void *)xmalloc(0x50);\n  *isError = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      errorMsg = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(stderr,errorMsg);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    returnValue = reverse_and_improve_code_0010b0fa(arg1,arg2,*(long *)(arglist + 4),0,tempBuffer);\n    if (returnValue == 0) {\n      if (tempBuffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *isError = 1;\n    }\n    else {\n      index = (int)count + 1;\n      if ((uint)capacity <= index) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + count * 8) = returnValue;\n      count = (ulong)index;\n    }\n  }\n  *(undefined8 *)((long)result + count * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_0010b0fa",
                "xmalloc",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_info_0011a2e0",
                "param_1": "param_section_info",
                "param_2": "param_binary",
                "uVar1": "section_info_ptr",
                "uVar2": "error_message",
                "lVar3": "section_info",
                "lVar4": "section_ptr"
            },
            "code": "\nlong extract_section_info_0011a2e0(long param_section_info,long param_binary)\n\n{\n  undefined8 section_info_ptr;\n  undefined8 error_message;\n  long section_info;\n  long section_ptr;\n  \n  section_info = (**(code **)(*(long *)(param_binary + 8) + 0x208))(param_binary);\n  section_ptr = *(long *)(param_section_info + 0x20);\n  *(undefined8 *)(section_info + 8) = *(undefined8 *)(param_section_info + 8);\n  *(undefined8 *)(section_info + 0x10) = *(undefined8 *)(param_section_info + 0x10);\n  *(undefined4 *)(section_info + 0x18) = *(undefined4 *)(param_section_info + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(param_binary);\n    if (section_ptr == 0) {\n      section_info_ptr = *(undefined8 *)(param_section_info + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit_00119dd0(error_message,section_info_ptr);\n    }\n  }\n  *(long *)(section_info + 0x20) = section_ptr;\n  return section_info;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_info_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_and_free_data_0010e8a9",
                "param_1": "source_data",
                "param_2": "additional_data",
                "param_3": "target_text",
                "uVar1": "result",
                "sVar2": "target_text_length",
                "__s": "formatted_text"
            },
            "code": "\nundefined4 process_and_free_data_0010e8a9(undefined8 source_data,undefined8 additional_data,char *target_text)\n\n{\n  undefined4 result;\n  size_t target_text_length;\n  char *formatted_text;\n  \n  target_text_length = strlen(target_text);\n  formatted_text = (char *)xmalloc(target_text_length + 0x14);\n  sprintf(formatted_text,\"%s:c=f%g\",source_data,target_text);\n  result = process_data_0010e2f0(additional_data,0x80,0,0,formatted_text);\n  if ((char)result != '\\0') {\n    free(formatted_text);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "find_section_flags_00104ad6",
                "unaff_RBP": "currentSection",
                "__s": "sectionName",
                "sVar4": "sectionLength",
                "iVar5": "sectionNameLength",
                "unaff_R15": "flag",
                "unaff_retaddr": "return_address",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] findSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentSection;\n  char *sectionName;\n  size_t sectionLength;\n  int sectionNameLength;\n  uint unaff_R14D;\n  char *flag;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    unaff_R14D = unaff_R14D | 0x2000;\n    sectionName = currentSection;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionName == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = unaff_R14D;\n                result._8_8_ = return_address;\n                return result;\n              }\n              commaPosition = strchr(sectionName,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionLength = strlen(sectionName);\n                sectionNameLength = (int)sectionLength;\n                currentSection = (char *)0x0;\n              }\n              else {\n                currentSection = commaPosition + 1;\n                sectionNameLength = (int)commaPosition - (int)sectionName;\n              }\n              sectionLength = (size_t)sectionNameLength;\n              comparisonResult = strncasecmp(flag,sectionName,sectionLength);\n              if (comparisonResult != 0) break;\n              unaff_R14D = unaff_R14D | 1;\n              sectionName = currentSection;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionName,sectionLength);\n            if (comparisonResult != 0) break;\n            unaff_R14D = unaff_R14D | 2;\n            sectionName = currentSection;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionName,sectionLength);\n          if (comparisonResult != 0) break;\n          unaff_R14D = unaff_R14D | 0x200;\n          sectionName = currentSection;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionName,sectionLength);\n        if (comparisonResult != 0) break;\n        unaff_R14D = unaff_R14D | 8;\n        sectionName = currentSection;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionName,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionName,sectionLength);\n      if (comparisonResult == 0) {\n        unaff_R14D = unaff_R14D | 0x10;\n        sectionName = currentSection;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionName,sectionLength);\n        if (comparisonResult == 0) {\n          unaff_R14D = unaff_R14D | 0x20;\n          sectionName = currentSection;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionName,sectionLength);\n          if (comparisonResult == 0) {\n            unaff_R14D = unaff_R14D | 0x40;\n            sectionName = currentSection;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionName,sectionLength);\n            if (comparisonResult == 0) {\n              unaff_R14D = unaff_R14D | 0x8000;\n              sectionName = currentSection;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionName,sectionLength);\n              if (comparisonResult == 0) {\n                unaff_R14D = unaff_R14D | 0x8000000;\n                sectionName = currentSection;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionName,sectionLength);\n                if (comparisonResult == 0) {\n                  unaff_R14D = unaff_R14D | 0x100;\n                  sectionName = currentSection;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionName,sectionLength);\n                  if (comparisonResult == 0) {\n                    unaff_R14D = unaff_R14D | 0x800000;\n                    sectionName = currentSection;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionName,sectionLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(sectionNameLength + 1));\n                      strncpy(commaPosition,sectionName,sectionLength);\n                      commaPosition[sectionLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    unaff_R14D = unaff_R14D | 0x1000000;\n                    sectionName = currentSection;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00119dd0",
                "xmalloc",
                "strncpy",
                "strlen",
                "dcgettext",
                "strncasecmp",
                "FUN_00104ad6",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "find_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_rax_value_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkRAXValue_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_rax_value_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "unknown1",
                "param_4": "unknown2",
                "lVar1": "currentCompilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "currentListElement",
                "lVar5": "currentUnitElement",
                "puVar6": "currentCompilationUnitElement",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 unknown1,undefined8 unknown2)\n\n{\n  long currentCompilationUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *currentListElement;\n  long currentUnitElement;\n  undefined8 *currentCompilationUnitElement;\n  undefined returnValue [16];\n  \n  currentCompilationUnit = *(long *)(compilationUnit + 8);\n  if (currentCompilationUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (currentUnitElement = *(long *)(compilationUnit + 0x20); currentUnitElement != 0; currentUnitElement = *(long *)(currentUnitElement + 8)) {\n      if (*(undefined8 **)(currentUnitElement + 0x28) != (undefined8 *)0x0) {\n        for (currentListElement = (undefined8 *)**(undefined8 **)(currentUnitElement + 0x28); currentListElement != (undefined8 *)0x0;\n            currentListElement = (undefined8 *)*currentListElement) {\n          if (*(int *)((long)currentListElement + 0x14) == 0) {\n            if (*(char *)currentListElement[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentListElement[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (currentCompilationUnitElement = *(undefined8 **)(currentCompilationUnit + 8); currentCompilationUnitElement != (undefined8 *)0x0;\n        currentCompilationUnitElement = (undefined8 *)*currentCompilationUnitElement) {\n      if ((undefined8 *)currentCompilationUnitElement[2] != (undefined8 *)0x0) {\n        for (currentListElement = *(undefined8 **)(undefined8 *)currentCompilationUnitElement[2]; currentListElement != (undefined8 *)0x0;\n            currentListElement = (undefined8 *)*currentListElement) {\n          if (*(int *)((long)currentListElement + 0x14) == 0) {\n            if (*(char *)currentListElement[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentListElement[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  returnValue._8_8_ = unknown2;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\nLAB_00109216:\n  errorMessage = currentListElement[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_operation_0010829e",
                "unaff_EBP": "errorCode",
                "uVar1": "result"
            },
            "code": "\nundefined8 processOperation_0010829e(void)\n\n{\n  undefined8 result;\n  int errorCode;\n  \n  if (errorCode == 5) {\n    result = check_string_length_00113ede();\n    return result;\n  }\n  if ((errorCode != 4) && (errorCode == 6)) {\n    result = calculate_inverse_check_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "process_operation_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultValue",
                "iVar2": "archIndex",
                "iVar7": "archValue",
                "iVar9": "currentValue",
                "param_7": "maxValue",
                "unaff_R15D": "stackValue",
                "uVar6": "archString",
                "uVar10": "stringLen",
                "uVar11": "archDiff",
                "uStack000000000000000c": "stackVar",
                "param_11": "archMach",
                "param_13": "dataPtr",
                "sVar4": "strLen",
                "pcVar5": "archName"
            },
            "code": "\n\n\nvoid printReverseArchInfo_00104943(void)\n\n{\n  int defaultValue;\n  int archIndex;\n  char *inputString;\n  long convertedValue;\n  size_t strLen;\n  char *archName;\n  undefined8 archString;\n  int archValue;\n  long lVar8;\n  int currentValue;\n  uint stackValue;\n  ulong stringLen;\n  uint archDiff;\n  int maxValue;\n  uint stackVar;\n  undefined8 archMach;\n  long dataPtr;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)convertedValue;\n  currentValue = maxValue;\n  stackVar = stackValue;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    maxValue = currentValue;\n    if (archMach._4_4_ <= maxValue) {\n      return;\n    }\n    lVar8 = (long)maxValue;\n    archValue = (defaultValue - stackVar) + -1;\n    convertedValue = lVar8;\n    do {\n      currentValue = (int)convertedValue;\n      if (archMach._4_4_ <= currentValue) break;\n      strLen = strlen(*(char **)(dataPtr + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      archValue = (archValue - (int)strLen) + -1;\n    } while (-1 < archValue);\n    printf(\"\\n%*s\",(ulong)(stackVar + 1),&DAT_0011b4a1);\n    for (convertedValue = lVar8 * 0x60; ((ulong)(uint)(currentValue - maxValue) + lVar8) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataPtr + convertedValue));\n    }\n    archValue = 2;\n    putc(10,_stdout);\n    do {\n      archName = (char *)bfd_printable_arch_mach(archValue,0);\n      archIndex = strcmp(archName,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        archString = bfd_printable_arch_mach(archValue,0);\n        printf(\"%*s \",(ulong)stackVar,archString);\n        archDiff = archValue - 2;\n        convertedValue = lVar8 * 0x60;\n        archIndex = maxValue;\n        while (currentValue != archIndex) {\n          archName = *(char **)(dataPtr + convertedValue);\n          if (*(char *)((long)(char **)(dataPtr + convertedValue) + (ulong)archDiff + 8) == '\\0') {\n            strLen = strlen(archName);\n            for (stringLen = strLen & 0xffffffff; (int)stringLen != 0; stringLen = (ulong)((int)stringLen - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archName,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (currentValue != archIndex) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archValue = archValue + 1;\n    } while (archValue != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "strtol",
                "strcmp",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "allocate_and_initialize_data_00113e23",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "dataPtr",
                "puVar2": "dynamicMemoryPtr"
            },
            "code": "\nlong allocateAndInitializeData_00113e23(undefined8 data1,undefined8 data2)\n\n{\n  long dataPtr;\n  undefined8 *dynamicMemoryPtr;\n  \n  dataPtr = allocate_and_initialize_data_00112904(1,0);\n  if (dataPtr != 0) {\n    dynamicMemoryPtr = (undefined8 *)xmalloc(0x10);\n    *dynamicMemoryPtr = data1;\n    dynamicMemoryPtr[1] = data2;\n    *(undefined8 **)(dataPtr + 0x10) = dynamicMemoryPtr;\n  }\n  return dataPtr;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "stab",
                "__format": "errorFormat"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 stab)\n\n{\n  char *errorFormat;\n  \n  errorFormat = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,errorFormat,stab);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_integer_00108ea1",
                "iVar1": "current_value",
                "pbVar2": "current_char_ptr",
                "pbVar3": "next_char_ptr",
                "uVar4": "return_value"
            },
            "code": "\nulong parse_integer_00108ea1(byte **param_1,int *param_2)\n\n{\n  int current_value;\n  byte *current_char_ptr;\n  byte *next_char_ptr;\n  ulong return_value;\n  \n  current_char_ptr = *param_1;\n  return_value = 0;\n  if (((&_sch_istable)[(ulong)*current_char_ptr * 2] & 4) != 0) {\n    next_char_ptr = current_char_ptr + 1;\n    current_value = (char)*current_char_ptr + -0x30;\n    *param_2 = current_value;\n    *param_1 = next_char_ptr;\n    if (((&_sch_istable)[(ulong)current_char_ptr[1] * 2] & 4) != 0) {\n      do {\n        current_char_ptr = next_char_ptr;\n        current_value = current_value * 10 + -0x30 + (int)(char)*current_char_ptr;\n        next_char_ptr = current_char_ptr + 1;\n      } while (((&_sch_istable)[(ulong)current_char_ptr[1] * 2] & 4) != 0);\n      if (current_char_ptr[1] == 0x5f) {\n        next_char_ptr = current_char_ptr + 2;\n        *param_1 = next_char_ptr;\n        *param_2 = current_value;\n      }\n    }\n    return_value = CONCAT71((int7)((ulong)next_char_ptr >> 8),1);\n  }\n  return return_value & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_integer_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "initialize_memory_management_00108072",
                "unaff_RBX": "ptrFunction",
                "unaff_RBP": "ptrBasePointer",
                "unaff_R12": "ptrR12",
                "unaff_R14B": "flagR14B",
                "unaff_R15": "ptrR15",
                "bVar1": "byteVar1",
                "uVar2": "ptrUIntVar2",
                "cVar3": "charVar3",
                "uVar4": "uintVar4",
                "lVar5": "errMsgPtr",
                "lVar6": "funcResult1",
                "lVar7": "funcResult2",
                "lVar8": "funcResult3"
            },
            "code": "\n\n\nvoid initializeMemoryManagement_00108072(void)\n\n{\n  byte byteVar1;\n  undefined8 ptrUIntVar2;\n  char charVar3;\n  uint uintVar4;\n  long errMsgPtr;\n  long funcResult1;\n  long funcResult2;\n  undefined8 *ptrFunction;\n  long ptrBasePointer;\n  long ptrR12;\n  long funcResult3;\n  char flagR14B;\n  long ptrR15;\n  \n  errMsgPtr = dcgettext(0,\"failed to set size\",5);\n  funcResult3 = ptrFunction[6];\n  funcResult1 = check_function_00114190(*ptrFunction,0,0x18);\n  if (funcResult1 == 0) {\n    *(byte *)(ptrR15 + 0x28) = *(byte *)(ptrR15 + 0x28) | 1;\n    ptrUIntVar2 = *ptrFunction;\n    funcResult3 = funcResult3 + _DAT_001279b0;\n    *(long *)(ptrR15 + 0x30) = funcResult3;\n    *(long *)(ptrR15 + 0x38) = funcResult3;\n    funcResult3 = ptrFunction[7];\n    funcResult1 = check_function_00114190(ptrUIntVar2,0,0x60);\n    if (funcResult1 == 0) goto LAB_00115695;\nLAB_00115860:\n    funcResult2 = *(long *)(funcResult1 + 0x20);\n    if ((*(byte *)(funcResult1 + 0x14) & 0x40) != 0) {\n      funcResult2 = funcResult2 + funcResult3;\n    }\n    *(long *)(ptrR15 + 0x38) = funcResult2;\n    funcResult3 = check_function_00114190(*ptrFunction,0,0x200);\n    if (funcResult3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar4 = *(uint *)((long)ptrFunction + 0x7c);\n    if (uintVar4 < 0x3f) goto LAB_001156c4;\n    errMsgPtr = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(ptrR15 + 0xb4) = *(undefined4 *)((long)ptrFunction + 0xb4);\n    *(byte *)(ptrR15 + 0x28) =\n         *(byte *)(ptrR15 + 0x28) & 0xcf | *(byte *)(ptrFunction + 5) & 0x30;\n    ptrFunction[0xc] = ptrR15;\n    ptrFunction[0xb] = 0;\n    byteVar1 = *(byte *)((long)ptrFunction + 0x27);\n  }\n  else {\n    funcResult2 = *(long *)(funcResult1 + 0x18);\n    if ((*(byte *)(funcResult1 + 0x14) & 8) == 0) {\n      funcResult2 = funcResult2 + funcResult3;\n    }\n    *(byte *)(ptrR15 + 0x28) = *(byte *)(ptrR15 + 0x28) | 1;\n    ptrUIntVar2 = *ptrFunction;\n    *(long *)(ptrR15 + 0x30) = funcResult2;\n    *(long *)(ptrR15 + 0x38) = funcResult2;\n    funcResult3 = ptrFunction[7];\n    funcResult1 = check_function_00114190(ptrUIntVar2,0,0x60);\n    if (funcResult1 != 0) goto LAB_00115860;\nLAB_00115695:\n    ptrUIntVar2 = *ptrFunction;\n    *(long *)(ptrR15 + 0x38) = funcResult3 + _DAT_001279b0;\n    funcResult3 = check_function_00114190(ptrUIntVar2,0,0x200);\n    if (funcResult3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar4 = *(uint *)(funcResult3 + 0x2c);\n    if (0x3e < uintVar4) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(ptrR15 + 0x7c) = uintVar4;\n    *(undefined4 *)(ptrR15 + 0xb4) = *(undefined4 *)((long)ptrFunction + 0xb4);\n    *(byte *)(ptrR15 + 0x28) =\n         *(byte *)(ptrR15 + 0x28) & 0xcf | *(byte *)(ptrFunction + 5) & 0x30;\n    ptrFunction[0xc] = ptrR15;\n    ptrFunction[0xb] = 0;\n    byteVar1 = *(byte *)((long)ptrFunction + 0x27);\n  }\n  if ((byteVar1 & 2) != 0) {\n    funcResult3 = ptrFunction[0x1a];\n    funcResult1 = retrieve_data_00115d00(funcResult3,ptrFunction[0x1c]);\n    if ((funcResult1 != 0) &&\n       (funcResult2 = *(long *)(ptrR12 + 8), *(uint *)(funcResult1 + 0x18) = *(uint *)(funcResult1 + 0x18) | 0x20,\n       *(int *)(funcResult2 + 8) == 5)) {\n      *(long *)(funcResult3 + 0xb0) = funcResult1;\n      charVar3 = (**(code **)(*(long *)(ptrBasePointer + 8) + 0x158))();\n      if (charVar3 == '\\0') {\n        copy_private_data_and_print_error_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar3 = (**(code **)(*(long *)(ptrBasePointer + 8) + 0x158))();\n  if (charVar3 == '\\0') {\n    copy_private_data_and_print_error_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flagR14B != '\\0') {\n    *(undefined4 *)(*(long *)(ptrR15 + 0xd0) + 4) = 8;\n  }\n  if (errMsgPtr != 0) {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "initialize_memory_management_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "extracted_data_to_string_0010a2b9",
                "param_1": "ptrParam1",
                "param_2": "charParam",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "charVar1",
                "__s": "strPtr",
                "sVar2": "strLength",
                "__s_00": "newStrPtr",
                "lVar3": "longVar",
                "auVar4": "outputStruct"
            },
            "code": "\nundefined  [16] extractedDataToString_0010a2b9(long ptrParam1,char charParam,undefined8 param3,undefined8 param4)\n\n{\n  char charVar1;\n  char *strPtr;\n  size_t strLength;\n  char *newStrPtr;\n  long longVar;\n  undefined outputStruct [16];\n  \n  charVar1 = *(char *)(*(long *)(ptrParam1 + 0x60) + 0x1c);\n  strPtr = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  strLength = strlen(strPtr);\n  newStrPtr = (char *)xmalloc(strLength + 0x1e);\n  if (charParam == '\\0') {\n    *newStrPtr = '\\0';\n    longVar = 0;\n    charParam = charVar1;\n  }\n  else {\n    longVar = *(long *)(ptrParam1 + 0x68);\n    *(long *)(ptrParam1 + 0x68) = longVar + 1;\n    sprintf(newStrPtr,\"%ld=@S;\",longVar);\n  }\n  strLength = strlen(newStrPtr);\n  sprintf(newStrPtr + strLength,\"S%s\",strPtr);\n  free(strPtr);\n  outputStruct._0_4_ = initialize_data_structure_00109b52(ptrParam1,newStrPtr,longVar,charParam,0);\n  outputStruct._4_4_ = 0;\n  if ((char)outputStruct._0_4_ != '\\0') {\n    free(newStrPtr);\n  }\n  outputStruct._8_8_ = param4;\n  return outputStruct;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extracted_data_to_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "FUNC_0010ec73"
            },
            "code": "\nundefined FUNC_0010ec73(long *param_1,long param_2,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  int iVar1;\n  char cVar2;\n  \n  if (param_1[0x3c] != -1) {\n    (**(code **)(*(long *)(*param_1 + 8) + 0x50))(param_2,param_1[1] + 8 + param_1[0x3c]);\n    param_1[0x3c] = -1;\n  }\n  if (param_1[0x3d] != -1) {\n    (**(code **)(*(long *)(*param_1 + 8) + 0x50))(param_2,param_1[1] + 8 + param_1[0x3d]);\n    param_1[0x3d] = -1;\n  }\n  iVar1 = *(int *)(param_1 + 0x3f);\n  *(int *)(param_1 + 0x3f) = iVar1 + 1;\n  if (iVar1 == 0) {\n    param_1[0x40] = param_2;\n  }\n  else {\n    if ((param_1[0x41] != -1) &&\n       (cVar2 = process_data_0010e2f0(param_1,0xc0,0,param_1[0x41],0,param_6,param_4), cVar2 == '\\0')) {\n      return 0;\n    }\n    param_1[0x41] = param_2 - param_1[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "FUNC_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "print_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid printEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_file_with_error_handling_00115970",
                "param_1": "original_file_path",
                "param_2": "target_file_path",
                "param_3": "file_permissions",
                "param_4": "file_size",
                "param_5": "preserve_timestamps",
                "param_6": "user_data",
                "uVar1": "result",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "uVar4": "localized_error_message",
                "uVar5": "read_write_result",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16]\ncopy_file_with_error_handling_00115970(char *original_file_path,char *target_file_path,undefined4 file_permissions,undefined8 file_size,char preserve_timestamps,\n            undefined8 user_data)\n\n{\n  uint result;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 localized_error_message;\n  ulong read_write_result;\n  undefined return_value [16];\n  \n  if (target_file_path == original_file_path) {\n    read_write_result = 0;\n  }\n  else {\n    result = read_and_write_file_00115a90(file_permissions,target_file_path,file_size);\n    read_write_result = (ulong)result;\n    if (result != 0) {\n      errno_ptr = __errno_location();\n      error_message = strerror(*errno_ptr);\n      localized_error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(localized_error_message,target_file_path,error_message);\n    }\n    unlink(original_file_path);\n  }\n  if (preserve_timestamps != '\\0') {\n    set_file_timestamps_0011a350(target_file_path,file_size);\n  }\n  return_value._8_8_ = user_data;\n  return_value._0_8_ = read_write_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_file_with_error_handling_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "update_config_0010adf2",
                "update_config_0010abdd": "update_config_helper"
            },
            "code": "\nvoid update_config_0010adf2(void)\n\n{\n  update_config_0010adf2_helper();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_config_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "append_data_to_structure_0010d7d4",
                "param_1": "data_1",
                "param_2": "data_2",
                "param_3": "data_3",
                "param_4": "data_4",
                "param_5": "data_5",
                "uVar1": "param_2_value",
                "cVar2": "result",
                "uVar3": "append_result",
                "lVar4": "realloc_result",
                "plVar5": "local_data",
                "local_40": "local_array"
            },
            "code": "\nundefined4\nappend_data_to_structure_0010d7d4(undefined8 data_1,undefined8 *data_2,long *data_3,uint *data_4,uint *data_5)\n\n{\n  undefined8 param_2_value;\n  char result;\n  undefined4 append_result;\n  long realloc_result;\n  long *local_data;\n  uint uVar6;\n  long local_array [2];\n  \n  param_2_value = *data_2;\n  local_data = local_array;\n  if (data_3 == (long *)0x0) {\n    local_data = (long *)0x0;\n  }\n  result = parse_and_initialize_data_0010c95e(data_1,data_2,local_data);\n  if ((result != '\\0') &&\n     (append_result = append_to_data_structure_00109be3(data_1,param_2_value,(int)*data_2 - (int)param_2_value), (char)append_result != '\\0')) {\n    if (data_3 == (long *)0x0) {\n      return append_result;\n    }\n    if (local_array[0] != 0) {\n      if (*data_5 <= *data_4 + 1) {\n        uVar6 = *data_5 + 10;\n        realloc_result = *data_3;\n        *data_5 = uVar6;\n        realloc_result = xrealloc(realloc_result,(ulong)uVar6 << 3);\n        *data_3 = realloc_result;\n      }\n      uVar6 = *data_4;\n      *(long *)(*data_3 + (ulong)uVar6 * 8) = local_array[0];\n      *data_4 = uVar6 + 1;\n      return append_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "append_data_to_structure_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = append_to_data_structure_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_status_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat"
            },
            "code": "\nlong check_file_status_00113f50(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "FUN_00119ed0",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_status_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd"
            },
            "code": "\nundefined8 initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatsArray",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "defaultValue"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatsArray)\n\n{\n  undefined8 defaultValue;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  defaultValue = DAT_00127600;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,defaultValue);\n  for (currentFormat = formatsArray; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatsArray);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fputc",
                "fflush",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "extract_and_process_binary_data_0011378f",
                "param_1": "outputBuffer",
                "param_2": "stats",
                "param_3": "dataPointer",
                "param_4": "result1",
                "param_5": "result2",
                "param_6": "result3",
                "auVar1": "temporaryBuffer",
                "cVar2": "charFlag",
                "uVar3": "error",
                "uVar4": "errorMessage",
                "puVar5": "pointerVariable1",
                "sVar6": "stringLength",
                "lVar7": "loopCounter",
                "puVar8": "pointerVariable2",
                "puVar9": "pointerVariable3",
                "__dest": "destination",
                "puVar10": "pointerVariable4",
                "plVar11": "pointerToData",
                "bVar12": "byteVariable",
                "local_258": "inputBuffer",
                "local_250": "allocatedMemory",
                "local_248": "value1",
                "uStack_244": "value2",
                "uStack_240": "value3",
                "uStack_23c": "value4",
                "local_238": "temporaryBuffer2",
                "local_228": "value5",
                "local_220": "hashTable1",
                "local_1f8": "value6",
                "local_1f0": "value7",
                "local_1e8": "array",
                "local_a0": "hashTable2",
                "local_78": "value8",
                "uStack_70": "value9",
                "local_68": "value10",
                "local_60": "value11",
                "local_58": "value12",
                "uStack_54": "value13",
                "uStack_50": "value14",
                "uStack_4c": "value15"
            },
            "code": "\nundefined4\nextractAndProcessBinaryData_0011378f(undefined8 *outputBuffer,undefined8 *stats,long *dataPointer,undefined8 *result1,\n            undefined8 *result2,undefined8 *result3)\n\n{\n  undefined temporaryBuffer [16];\n  char charFlag;\n  undefined4 error;\n  undefined8 errorMessage;\n  undefined *pointerVariable1;\n  size_t stringLength;\n  long loopCounter;\n  undefined8 *pointerVariable2;\n  undefined4 *pointerVariable3;\n  char *destination;\n  undefined8 *pointerVariable4;\n  long *pointerToData;\n  byte byteVariable;\n  undefined8 *inputBuffer;\n  long allocatedMemory;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined temporaryBuffer2 [16];\n  undefined8 value5;\n  undefined hashTable1 [40];\n  undefined8 value6;\n  undefined8 value7;\n  undefined4 array [82];\n  undefined hashTable2 [40];\n  undefined value8 [8];\n  undefined8 value9;\n  undefined8 value10;\n  undefined4 value11;\n  undefined4 value12;\n  undefined4 value13;\n  undefined4 value14;\n  undefined4 value15;\n  \n  byteVariable = 0;\n  value1 = 0;\n  value2 = 0;\n  value3 = 500;\n  value4 = 0;\n  inputBuffer = outputBuffer;\n  allocatedMemory = xmalloc(500);\n  value5 = 1;\n  temporaryBuffer2 = ZEXT816(0);\n  charFlag = bfd_hash_table_init(hashTable1,initialize_hash_function_0010bb52,0x30);\n  if ((charFlag == '\\0') || (charFlag = bfd_hash_table_init(hashTable2,initialize_hash_function_0010bb52,0x30), charFlag == '\\0')) {\n    error = bfd_get_error();\n    errorMessage = bfd_errmsg(error);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",errorMessage);\n  }\n  else {\n    value6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    value8 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    pointerVariable3 = array;\n    for (loopCounter = 0x52; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *pointerVariable3 = 0;\n      pointerVariable3 = pointerVariable3 + (ulong)byteVariable * -2 + 1;\n    }\n    value10 = 0;\n    value11 = 0;\n    value7 = 1;\n    value12 = 0;\n    value13 = 0;\n    value14 = 0xffffffff;\n    value15 = 0xffffffff;\n    charFlag = process_data_0010e2f0(&inputBuffer,0,0,0,0);\n    temporaryBuffer = _value8;\n    if (charFlag != '\\0') {\n      value8._4_4_ = value2;\n      value8._0_4_ = value1;\n      value9 = temporaryBuffer._8_8_;\n      charFlag = process_data_0010e2f0(&inputBuffer,100,0,0,*outputBuffer);\n      if (charFlag != '\\0') {\n        *(int *)(stats + 6) = *(int *)(stats + 6) + 1;\n        stats[10] = 0;\n        pointerVariable4 = (undefined8 *)*stats;\n        *(undefined4 *)(stats + 7) = *(undefined4 *)((long)stats + 0x34);\n        for (; pointerVariable4 != (undefined8 *)0x0; pointerVariable4 = (undefined8 *)*pointerVariable4) {\n          stats[8] = pointerVariable4[2];\n          *(undefined4 *)(stats + 9) = 0;\n          charFlag = update_data_thunk_0010e439(&inputBuffer,*(undefined8 *)(pointerVariable4[1] + 8));\n          if (charFlag == '\\0') {\n            return 0;\n          }\n          pointerToData = (long *)pointerVariable4[1];\n          if (pointerToData != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)pointerToData[2] != (undefined8 *)0x0) {\n                for (pointerVariable2 = *(undefined8 **)(undefined8 *)pointerToData[2]; pointerVariable2 != (undefined8 *)0x0;\n                    pointerVariable2 = (undefined8 *)*pointerVariable2) {\n                  charFlag = process_data_001135a5(stats,&inputBuffer);\n                  if (charFlag == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              pointerToData = (long *)*pointerToData;\n              if (pointerToData == (long *)0x0) break;\n              charFlag = store_data_and_process_0010e439(&inputBuffer,pointerToData[1]);\n              if (charFlag == '\\0') {\n                return 0;\n              }\n            }\n          }\n          charFlag = check_and_process_data_00112502(stats,&inputBuffer,0xffffffffffffffff);\n          if (charFlag == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(value15,value14) == -1) &&\n           (error = process_data_0010e2f0(&inputBuffer,100,0,value10,0), (char)error != '\\0')) {\n          (**(code **)(outputBuffer[1] + 0x50))(value5,allocatedMemory + 8);\n          *dataPointer = allocatedMemory;\n          *result1 = CONCAT44(value2,value1);\n          *result3 = value5;\n          pointerVariable1 = (undefined *)xmalloc();\n          *pointerVariable1 = 0;\n          destination = pointerVariable1 + 1;\n          *result2 = pointerVariable1;\n          for (loopCounter = temporaryBuffer2._0_8_; loopCounter != 0; loopCounter = *(long *)(loopCounter + 0x18)) {\n            strcpy(destination,*(char **)(loopCounter + 8));\n            stringLength = strlen(destination);\n            destination = destination + stringLength + 1;\n          }\n          return error;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "strcpy",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010bb52",
                "FUN_001135a5",
                "xmalloc",
                "thunk_FUN_0010e439",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_and_process_binary_data_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,initialize_hash_function_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,initialize_hash_function_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_data_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_data_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = update_data_thunk_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = store_data_and_process_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = check_and_process_data_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_data_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage",
                "dcgettext": "translateErrorMessage",
                "print_error_message_00119ed0": "printErrorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  if (*errorPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    printErrorMessage(errorMessage);\n  }\n  else {\n    strerror(*errorPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    printErrorMessage(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_and_reverse_0010a0a0",
                "param_1": "data",
                "reverse_and_initialize_00109ed3": "initialize_and_reverse_subroutine"
            },
            "code": "\nvoid initialize_and_reverse_0010a0a0(long data)\n\n{\n  initialize_and_reverse_0010a0a0_subroutine(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_reverse_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "output_buffer",
                "param_10": "input_param1",
                "param_11": "input_param2",
                "param_12": "input_param3",
                "param_13": "input_param4",
                "param_14": "input_param5",
                "in_AL": "condition_flag",
                "local_d8": "local_variable1",
                "local_d4": "local_variable2",
                "local_d0": "local_array1",
                "local_c8": "local_array2",
                "local_b8": "local_buffer",
                "local_b0": "local_param1",
                "local_a8": "local_param2",
                "local_a0": "local_param3",
                "local_98": "local_param4",
                "local_90": "local_param5",
                "local_88": "local_var1",
                "local_78": "local_var2",
                "local_68": "local_var3",
                "local_58": "local_var4",
                "local_48": "local_var5",
                "local_38": "local_var6",
                "local_28": "local_var7",
                "local_18": "local_var8"
            },
            "code": "\nvoid print_error_message_00119ed0(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 output_buffer,undefined8 input_param1,undefined8 input_param2,undefined8 input_param3,\n                 undefined8 input_param4,undefined8 input_param5)\n\n{\n  char condition_flag;\n  undefined4 local_variable1;\n  undefined4 local_variable2;\n  undefined *local_array1;\n  undefined *local_array2;\n  undefined local_buffer [8];\n  undefined8 local_param1;\n  undefined8 local_param2;\n  undefined8 local_param3;\n  undefined8 local_param4;\n  undefined8 local_param5;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  \n  if (condition_flag != '\\0') {\n    local_var1 = error_code;\n    local_var2 = param2;\n    local_var3 = param3;\n    local_var4 = param4;\n    local_var5 = param5;\n    local_var6 = param6;\n    local_var7 = param7;\n    local_var8 = param8;\n  }\n  local_array1 = &stack0x00000008;\n  local_variable1 = 8;\n  local_array2 = local_buffer;\n  local_variable2 = 0x30;\n  local_param1 = input_param1;\n  local_param2 = input_param2;\n  local_param3 = input_param3;\n  local_param4 = input_param4;\n  local_param5 = input_param5;\n  print_error_message_00119ed0_00119e70(output_buffer,&local_variable1);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00108375",
                "FUN_00104ad6",
                "FUN_00108200",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_0011378f",
                "FUN_0010ba08",
                "FUN_001152b6",
                "FUN_0010b800",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "reverse_and_improve_00112c1f",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "plVar1": "ptrVar1",
                "lVar2": "localVar2",
                "puVar3": "ptrVar3",
                "puVar4": "ptrVar4",
                "cVar5": "charVar5",
                "piVar6": "ptrVar6",
                "uVar7": "updatedVar7",
                "uVar8": "updatedVar8",
                "iVar9": "intVar9",
                "uVar10": "updatedVar10",
                "uVar11": "updatedVar11",
                "uVar12": "updatedVar12",
                "uVar13": "updatedVar13",
                "bVar14": "boolVar14",
                "local_3c": "localVar3c"
            },
            "code": "\n\n\nundefined8 reverseAndImprove_00112c1f(ulong param1,undefined8 param2,int *param3,long param4)\n\n{\n  long *ptrVar1;\n  long localVar2;\n  undefined8 *ptrVar3;\n  undefined8 *ptrVar4;\n  char charVar5;\n  int *ptrVar6;\n  undefined8 updatedVar7;\n  undefined8 updatedVar8;\n  int intVar9;\n  undefined4 updatedVar10;\n  undefined8 updatedVar11;\n  ulong updatedVar12;\n  uint updatedVar13;\n  bool boolVar14;\n  uint localVar3c;\n  \n  updatedVar12 = param1;\nLAB_00112c39:\n  if (param3 != (int *)0x0) {\n    intVar9 = *param3;\n    if (intVar9 - 0x16U < 2) {\n      do {\n        ptrVar1 = *(long **)(param3 + 4);\n        updatedVar13 = *(uint *)(param1 + 0x30);\n        updatedVar12 = (ulong)updatedVar13;\n        localVar2 = *ptrVar1;\n        if (*(uint *)(localVar2 + 0x10) == updatedVar13) {\n          if (intVar9 == 0x16) {\n            updatedVar7 = lookup_and_initialize_data_structure_0010bba1(param2,*(undefined8 *)(localVar2 + 8));\n            return updatedVar7;\n          }\nLAB_00112c94:\n          ptrVar6 = (int *)get_real_type_00112b6e(param3,0);\n          if (ptrVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptrVar6 - 7U < 4) && (*(long *)(ptrVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptrVar6 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n               (charVar5 = debug_set_class_id_0010c7a0(param1,*(undefined8 *)(**(long **)(param3 + 4) + 8),ptrVar6),\n               charVar5 == '\\0')) {\n              return 0;\n            }\n            updatedVar13 = *(uint *)(*(long *)(ptrVar6 + 4) + 0xc);\n          }\n          else {\n            updatedVar13 = 0;\n          }\n          intVar9 = *ptrVar6;\n          updatedVar7 = *(undefined8 *)(**(long **)(param3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (intVar9 == 0x17) {\n          if (localVar2 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = updatedVar13;\n          param4 = *ptrVar1;\n          param3 = (int *)ptrVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = updatedVar13;\n        }\n        param3 = (int *)ptrVar1[1];\n        if (param3 == (int *)0x0) goto LAB_00112dd6;\n        intVar9 = *param3;\n        param4 = 0;\n      } while (intVar9 - 0x16U < 2);\nLAB_00112d74:\n      updatedVar7 = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param1 + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      updatedVar7 = *(undefined8 *)(param4 + 8);\n    }\n    switch(intVar9) {\n    case 0:\n      updatedVar7 = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",updatedVar7);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      updatedVar7 = initialize_or_increment_00109dfe(param2);\n      return updatedVar7;\n    case 3:\n      updatedVar7 = initialize_data_structure_0010b800(param2,param3[1],*(undefined *)(param3 + 4));\n      return updatedVar7;\n    case 4:\n      updatedVar7 = initialize_data_structure_0010b948(param2,param3[1]);\n      return updatedVar7;\n    case 5:\n      updatedVar7 = update_and_initialize_data_structure_00109e76(param2,param3[1]);\n      return updatedVar7;\n    case 6:\n      updatedVar7 = initialize_data_structure_00109d3e(param2,param3[1]);\n      return updatedVar7;\n    case 7:\n    case 8:\n      if (*(long *)(param3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (charVar5 = debug_set_class_id_0010c7a0(param1,updatedVar7,param3), charVar5 == '\\0')) {\n          return 0;\n        }\n        localVar2 = *(long *)(param3 + 4);\n        if (*(int *)(param1 + 0x30) == *(int *)(localVar2 + 8)) {\n          updatedVar13 = *(uint *)(localVar2 + 0xc);\n          if (updatedVar13 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          intVar9 = *param3;\nLAB_00112ed2:\n          updatedVar7 = initialize_data_structure_00109d5c(param2,updatedVar7,updatedVar13,intVar9);\n          return updatedVar7;\n        }\n        *(int *)(localVar2 + 8) = *(int *)(param1 + 0x30);\n      }\n      updatedVar10 = 0;\n      if (*(long *)(param3 + 4) != 0) {\n        updatedVar10 = *(undefined4 *)(*(long *)(param3 + 4) + 0xc);\n      }\n      charVar5 = initialize_data_0010a69a(param2,updatedVar7,updatedVar10,*param3 == 7,param3[1]);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param3 + 4) != (long *)0x0) && (updatedVar12 = 0, **(long **)(param3 + 4) != 0)) {\n        while( true ) {\n          ptrVar4 = *(undefined8 **)(**(long **)(param3 + 4) + updatedVar12 * 8);\n          if (ptrVar4 == (undefined8 *)0x0) break;\n          charVar5 = reverseAndImprove_00112c1f(param1,param2,ptrVar4[1],0);\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n          charVar5 = generate_formatted_string_0010ba08(param2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3),\n                               *(undefined4 *)((long)ptrVar4 + 0x1c),*(undefined4 *)(ptrVar4 + 2));\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n          updatedVar12 = (ulong)((int)updatedVar12 + 1);\n        }\n      }\n      updatedVar7 = extract_and_initialize_data_0010a77a(param2);\n      return updatedVar7;\n    case 9:\n    case 10:\n      if (*(long *)(param3 + 4) == 0) {\n        updatedVar13 = 0;\n        ptrVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param3 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (updatedVar12 = param1, charVar5 = debug_set_class_id_0010c7a0(param1,updatedVar7,param3), charVar5 == '\\0')) {\n          return 0;\n        }\n        localVar2 = *(long *)(param3 + 4);\n        updatedVar13 = *(uint *)(localVar2 + 0xc);\n        if (*(int *)(param1 + 0x30) == *(int *)(localVar2 + 8)) {\n          if (updatedVar13 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          intVar9 = *param3;\n          goto LAB_00112ed2;\n        }\n        ptrVar6 = *(int **)(localVar2 + 0x20);\n        *(int *)(localVar2 + 8) = *(int *)(param1 + 0x30);\n        if (((ptrVar6 != (int *)0x0) && (param3 != ptrVar6)) &&\n           (updatedVar12 = param1, charVar5 = reverseAndImprove_00112c1f(param1,param2,ptrVar6,0), charVar5 == '\\0')) {\n          return 0;\n        }\n      }\n      charVar5 = extract_data_0010a83e(param2,updatedVar7,updatedVar13,*param3 == 9,param3[1],ptrVar6 != (int *)0x0,\n                           param3 == ptrVar6,updatedVar12);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param3 + 4) != (long *)0x0) {\n        updatedVar13 = 0;\n        if (**(long **)(param3 + 4) != 0) {\n          while (ptrVar4 = *(undefined8 **)(**(long **)(param3 + 4) + (ulong)updatedVar13 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar5 = reverseAndImprove_00112c1f(param1,param2,ptrVar4[1],0);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptrVar4 + 0x14) == '\\0') {\n              charVar5 = generate_formatted_string_0010ba08(param2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3));\n            }\n            else {\n              charVar5 = build_request_0010a94e(param2,*ptrVar4,ptrVar4[3]);\n            }\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            updatedVar13 = updatedVar13 + 1;\n          }\n        }\n        updatedVar13 = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x10) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x10) + (ulong)updatedVar13 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar5 = reverseAndImprove_00112c1f(param1,param2,*ptrVar4,0);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            charVar5 = format_and_store_data_0010aa53(param2,*(undefined4 *)(ptrVar4 + 1),\n                                 *(undefined *)((long)ptrVar4 + 0xc));\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            updatedVar13 = updatedVar13 + 1;\n          }\n        }\n        localVar3c = 0;\n        if (*(long *)(*(long *)(param3 + 4) + 0x18) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param3 + 4) + 0x18) + (ulong)localVar3c * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            charVar5 = append_string_with_separator_0010ab4d(param2,*ptrVar4);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            updatedVar13 = 0;\n            while (ptrVar3 = *(undefined8 **)(ptrVar4[1] + (ulong)updatedVar13 * 8),\n                  ptrVar3 != (undefined8 *)0x0) {\n              if ((ptrVar3[4] != 0) &&\n                 (charVar5 = reverseAndImprove_00112c1f(param1,param2,ptrVar3[4],0), charVar5 == '\\0')) {\n                return 0;\n              }\n              charVar5 = reverseAndImprove_00112c1f(param1,param2,ptrVar3[1],0);\n              if (charVar5 == '\\0') {\n                return 0;\n              }\n              if (ptrVar3[3] == -1) {\n                charVar5 = update_config_0010adf2(param2,*ptrVar3,*(undefined4 *)(ptrVar3 + 2),\n                                     *(undefined *)((long)ptrVar3 + 0x14),\n                                     *(undefined *)((long)ptrVar3 + 0x15));\n              }\n              else {\n                charVar5 = initialize_config_0010add5(param2);\n              }\n              if (charVar5 == '\\0') {\n                return 0;\n              }\n              updatedVar13 = updatedVar13 + 1;\n            }\n            charVar5 = append_semicolon_if_valid_00109bbb(param2);\n            if (charVar5 == '\\0') {\n              return 0;\n            }\n            localVar3c = localVar3c + 1;\n          }\n        }\n      }\n      updatedVar7 = concatenate_strings_0010ae0e(param2);\n      return updatedVar7;\n    case 0xb:\n      ptrVar4 = *(undefined8 **)(param3 + 4);\n      if (ptrVar4 == (undefined8 *)0x0) {\n        updatedVar8 = 0;\n        updatedVar11 = 0;\n      }\n      else {\n        updatedVar8 = ptrVar4[1];\n        updatedVar11 = *ptrVar4;\n      }\n      updatedVar7 = initialize_data_structure_0010e453(param2,updatedVar7,updatedVar11,updatedVar8);\n      return updatedVar7;\n    case 0xc:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = initialize_and_reverse_data_0010a083(param2);\n      return updatedVar7;\n    case 0xd:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 8) == 0) {\n        updatedVar12 = 0xffffffff;\n      }\n      else {\n        while (localVar2 = *(long *)(*(long *)(*(long *)(param3 + 4) + 8) + updatedVar12 * 8), localVar2 != 0) {\n          updatedVar12 = updatedVar12 + 1;\n          charVar5 = reverseAndImprove_00112c1f(param1,param2,localVar2,0);\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n        }\n        updatedVar12 = updatedVar12 & 0xffffffff;\n      }\n      updatedVar7 = process_and_return_data_0010e5db(param2,updatedVar12,*(undefined *)(*(long *)(param3 + 4) + 0x10));\n      return updatedVar7;\n    case 0xe:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = initialize_and_reverse_0010a0a0(param2);\n      return updatedVar7;\n    case 0xf:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = initialize_data_structure_0010a0e9(param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),\n                           *(undefined8 *)(*(long *)(param3 + 4) + 0x10));\n      return updatedVar7;\n    case 0x10:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      localVar2 = *(long *)(param3 + 4);\n      updatedVar7 = extract_and_initialize_data_0010a181(param2,*(undefined8 *)(localVar2 + 0x10),*(undefined8 *)(localVar2 + 0x18),\n                           *(undefined *)(localVar2 + 0x20));\n      return updatedVar7;\n    case 0x11:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = extracted_data_to_string_0010a2b9(param2,*(undefined *)(*(long *)(param3 + 4) + 8));\n      return updatedVar7;\n    case 0x12:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,*(undefined8 *)(*(long *)(param3 + 4) + 8),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = generate_formatted_string_0010a377(param2);\n      return updatedVar7;\n    case 0x13:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,**(undefined8 **)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar12 = 0;\n      if (*(long *)(*(long *)(param3 + 4) + 0x10) == 0) {\n        updatedVar12 = 0xffffffff;\n      }\n      else {\n        while (localVar2 = *(long *)(*(long *)(*(long *)(param3 + 4) + 0x10) + updatedVar12 * 8), localVar2 != 0)\n        {\n          updatedVar12 = updatedVar12 + 1;\n          charVar5 = reverseAndImprove_00112c1f(param1,param2,localVar2,0);\n          if (charVar5 == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param3 + 4) + 8) != 0) &&\n         (charVar5 = reverseAndImprove_00112c1f(param1,param2,*(long *)(*(long *)(param3 + 4) + 8),0),\n         charVar5 == '\\0')) {\n        return 0;\n      }\n      updatedVar7 = process_data_0010a424(param2,*(long *)(*(long *)(param3 + 4) + 8) != 0,updatedVar12 & 0xffffffff,\n                           *(undefined *)(*(long *)(param3 + 4) + 0x18));\n      return updatedVar7;\n    case 0x14:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = initialize_and_reverse_0010a0bd(param2);\n      return updatedVar7;\n    case 0x15:\n      charVar5 = reverseAndImprove_00112c1f(param1,param2,*(undefined8 *)(param3 + 4),0);\n      if (charVar5 == '\\0') {\n        return 0;\n      }\n      updatedVar7 = initialize_function_0010a0d3(param2);\n      return updatedVar7;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar14 = *(int **)**(undefined8 **)(param3 + 4) == param3;\n  param3 = *(int **)**(undefined8 **)(param3 + 4);\n  if (boolVar14) {\nLAB_00112dd6:\n    updatedVar7 = initialize_or_increment_00109d97(param2);\n    return updatedVar7;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "dcgettext",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010c7a0",
                "FUN_0010adf2",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_0010a083",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "__assert_fail",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00109d5c",
                "FUN_00109bbb",
                "FUN_0010a83e",
                "FUN_0010e453",
                "FUN_0010add5",
                "FUN_0010bba1",
                "FUN_0010ba08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_and_print_error_0010808f",
                "unaff_R14B": "isCopySuccess",
                "unaff_R15": "sourceAddress",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateDataAndPrintError_0010808f(void)\n\n{\n  long errorMessage;\n  char isCopySuccess;\n  long sourceAddress;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (isCopySuccess != '\\0') {\n    *(undefined4 *)(*(long *)(sourceAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_and_print_error_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "errorMessage",
                "param_2": "warningMessage",
                "in_RAX": "temporaryValue",
                "__format": "messageFormat"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 errorMessage,undefined8 warningMessage)\n\n{\n  undefined8 temporaryValue;\n  char *messageFormat;\n  \n  messageFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,messageFormat,warningMessage,errorMessage,temporaryValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_00109a32",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_architecture_compatibility_00105828",
                "iVar1": "architecture",
                "uVar2": "machine",
                "uVar3": "formattedString",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkArchitectureCompatibility_00105828(void)\n\n{\n  int architecture;\n  undefined4 machine;\n  undefined8 formattedString;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    formattedString = generate_formatted_string_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,formattedString);\n  }\n  else {\n    formattedString = bfd_get_mach();\n    machine = bfd_get_arch();\n    formattedString = bfd_printable_arch_mach(machine,formattedString);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,formattedString);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_architecture_compatibility_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "temp_path",
                "pcVar1": "result"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *temp_path;\n  char *result;\n  \n  temp_path = (char *)allocate_file_path_00114cf0();\n  result = mkdtemp(temp_path);\n  if (result == (char *)0x0) {\n    free(temp_path);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_initialize_data_structure_0010bba1",
                "param_1": "param",
                "param_2": "param2",
                "lVar1": "result",
                "uVar2": "initialized_data_structure"
            },
            "code": "\nundefined8 lookup_and_initialize_data_structure_0010bba1(long param,undefined8 param2)\n\n{\n  long result;\n  undefined8 initialized_data_structure;\n  \n  result = bfd_hash_lookup(param + 0x1b8,param2,0,0);\n  if ((result != 0) && (0 < *(long *)(result + 0x20))) {\n    initialized_data_structure = initialize_data_structure_00109cf4(param,*(long *)(result + 0x20),*(undefined4 *)(result + 0x28));\n    return initialized_data_structure;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_initialize_data_structure_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_and_store_data_0010e6a8",
                "param_1": "dataContainer",
                "param_2": "input",
                "__s": "extractedData",
                "sVar3": "inputLength",
                "sVar4": "extractedDataLength",
                "__s_00": "formattedData",
                "lVar8": "counter",
                "uVar2": "value",
                "uVar1": "result",
                "uVar6": "errorString",
                "uVar7": "errorMessage",
                "lVar5": "lookupResult",
                "uVar9": "returnValue",
                "auVar10": "returnObj"
            },
            "code": "\nundefined  [16] processAndStoreData_0010e6a8(long dataContainer,char *input,undefined8 param_3,undefined8 param_4)\n\n{\n  uint result;\n  undefined4 value;\n  char *extractedData;\n  size_t inputLength;\n  size_t extractedDataLength;\n  char *formattedData;\n  long lookupResult;\n  undefined8 errorString;\n  undefined8 errorMessage;\n  long counter;\n  ulong returnValue;\n  undefined returnObj [16];\n  \n  counter = *(long *)(*(long *)(dataContainer + 0x60) + 0x10);\n  value = *(undefined4 *)(*(long *)(dataContainer + 0x60) + 0x18);\n  extractedData = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  inputLength = strlen(input);\n  extractedDataLength = strlen(extractedData);\n  formattedData = (char *)xmalloc(inputLength + 0x14 + extractedDataLength);\n  if (counter < 1) {\n    counter = *(long *)(dataContainer + 0x68);\n    *(long *)(dataContainer + 0x68) = counter + 1;\n    sprintf(formattedData,\"%s:t%ld=%s\",input,counter,extractedData);\n  }\n  else {\n    sprintf(formattedData,\"%s:t%s\",input,extractedData);\n  }\n  free(extractedData);\n  result = process_data_0010e2f0(dataContainer,0x80,0,0,formattedData);\n  returnValue = (ulong)result;\n  if ((char)result != '\\0') {\n    free(formattedData);\n    lookupResult = bfd_hash_lookup(dataContainer + 0x1b8,input,1,0);\n    if (lookupResult != 0) {\n      *(long *)(lookupResult + 0x20) = counter;\n      *(undefined4 *)(lookupResult + 0x28) = value;\n      goto LAB_0010e7b3;\n    }\n    value = bfd_get_error();\n    errorString = bfd_errmsg(value);\n    errorMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(errorMessage,errorString);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  returnObj._8_8_ = param_4;\n  returnObj._0_8_ = returnValue;\n  return returnObj;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xmalloc",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_store_data_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_and_process_data_0010e7c2",
                "param_1": "param",
                "param_2": "input_string",
                "param_4": "result",
                "__s": "extracted_string",
                "sVar1": "input_string_length",
                "sVar2": "extracted_string_length",
                "__s_00": "formatted_string",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16] format_and_process_data_0010e7c2(undefined8 param,char *input_string,undefined8 param_3,undefined8 result)\n\n{\n  char *extracted_string;\n  size_t input_string_length;\n  size_t extracted_string_length;\n  char *formatted_string;\n  undefined return_value [16];\n  \n  extracted_string = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_string_length = strlen(extracted_string);\n  formatted_string = (char *)xmalloc(input_string_length + 3 + extracted_string_length);\n  sprintf(formatted_string,\"%s:T%s\",input_string,extracted_string);\n  free(extracted_string);\n  return_value._0_4_ = process_data_0010e2f0(param,0x80,0,0,formatted_string);\n  return_value._4_4_ = 0;\n  if ((char)return_value._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  return_value._8_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_process_data_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "flag",
                "local_d8": "buffer_size",
                "local_d4": "string_length",
                "local_d0": "buffer_ptr",
                "local_c8": "local_buffer_ptr",
                "local_b8": "local_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "error_code_copy",
                "local_78": "param_2_copy",
                "local_68": "param_3_copy",
                "local_58": "param_4_copy",
                "local_48": "param_5_copy",
                "local_38": "param_6_copy",
                "local_28": "param_7_copy",
                "local_18": "param_8_copy"
            },
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 string_length;\n  undefined *buffer_ptr;\n  undefined *local_buffer_ptr;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 error_code_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (flag != '\\0') {\n    error_code_copy = error_code;\n    param_2_copy = param_2;\n    param_3_copy = param_3;\n    param_4_copy = param_4;\n    param_5_copy = param_5;\n    param_6_copy = param_6;\n    param_7_copy = param_7;\n    param_8_copy = param_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer_ptr = local_buffer;\n  string_length = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_00119e70(error_message,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_001083de",
                "FUN_00115b70",
                "FUN_00108808",
                "FUN_0010543c",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00114dc7",
                "FUN_001053b5"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "errorHandler",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *errorHandler;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return returnAddress;\n    }\n  }\n  print_error_message_0011a110(*errorHandler);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_error",
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "in_RCX": "recordArray",
                "in_R10": "recordCount",
                "in_R11": "currentRecordIndex",
                "unaff_R13": "startRecord",
                "unaff_R14": "currentRecord",
                "unaff_R15": "endRecord",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "param4",
                "param_12": "param5",
                "param_13": "param6",
                "param_14": "param7",
                "__ptr": "temporaryBuffer",
                "sVar1": "recordSize",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "lVar7": "temp4",
                "uVar8": "temp5",
                "iVar3": "comparisonResult",
                "pcVar2": "comparisonFunction",
                "puVar9": "ptr1",
                "cVar10": "character",
                "puVar11": "ptr2",
                "puVar12": "ptr3",
                "psVar13": "currentRecordPointer",
                "bVar14": "byteVariable"
            },
            "code": "\nulong processRecords_00116852(void)\n\n{\n  size_t recordSize;\n  code *comparisonFunction;\n  int comparisonResult;\n  uint temp1;\n  undefined *temporaryBuffer;\n  size_t *recordArray;\n  ulong temp2;\n  ulong temp3;\n  long temp4;\n  ulong temp5;\n  size_t unaff_RBX;\n  size_t *unaff_RBP;\n  undefined *ptr1;\n  char character;\n  undefined *ptr2;\n  ulong recordCount;\n  undefined *ptr3;\n  size_t currentRecordIndex;\n  size_t *startRecord;\n  size_t *currentRecord;\n  size_t endRecord;\n  size_t *currentRecordPointer;\n  byte byteVariable;\n  size_t param1;\n  size_t param2;\n  ulong param3;\n  size_t *param4;\n  undefined *param5;\n  long param6;\n  size_t param7;\n  \n  byteVariable = 0;\ncode_r0x00116852:\n  temp1 = (int)recordCount + 1;\n  if (0x10 < (int)recordCount) goto LAB_001167f5;\nLAB_00116863:\n  currentRecord = currentRecord + -9;\n  do {\n    if (startRecord <= currentRecord) {\n      recordSize = currentRecord[2];\n      if (recordSize == 0) goto LAB_00116863;\n      temp5 = (ulong)temp1;\n      if ((*currentRecord == *unaff_RBP) &&\n         (comparisonResult = memcmp((void *)currentRecord[3],(void *)unaff_RBP[3],*unaff_RBP), comparisonResult == 0)) {\n        temp3 = currentRecord[7];\n        temp2 = currentRecord[8];\n        recordCount = temp5 & 0xffffffff;\n        if (endRecord == temp3) {\n          if (unaff_RBX != temp2) goto LAB_001167a6;\n          unaff_RBP[2] = 0;\n        }\n        else {\n          if (endRecord < temp3) {\n            if (temp2 < endRecord) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < temp2) || (endRecord <= (temp2 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_RBX < endRecord) {\n              if ((0xfffffffffffffff0 < unaff_RBX) ||\n                 (temp3 <= (unaff_RBX + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_RBX == temp2) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_RBX <= temp2) {\n              unaff_RBP[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (temp2 < endRecord) goto LAB_0010852c;\n          }\n          if ((currentRecordIndex == 0x101) != (recordSize == 0x101)) goto code_r0x00116852;\n          if (temp2 <= unaff_RBX) {\n            temp2 = unaff_RBX;\n          }\n          if (temp3 < endRecord) {\n            endRecord = temp3;\n          }\n          currentRecord[8] = temp2;\n          currentRecord[7] = endRecord;\n          unaff_RBP[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentRecord = unaff_RBP;\n        unaff_RBP = currentRecord + 9;\n        if (recordArray <= unaff_RBP) {\n          qsort(param4,param7,0x48,compare_records_0011a250);\n          temporaryBuffer = (undefined *)xmalloc(param3 * 2);\n          param1 = 0;\n          ptr3 = temporaryBuffer;\n          for (currentRecordPointer = param4; currentRecordPointer < recordArray; currentRecordPointer = currentRecordPointer + 9) {\n            if (currentRecordPointer[2] != 0) {\n              ptr2 = ptr3 + 4;\n              ptr1 = ptr3 + 0xc;\n              comparisonFunction = *(code **)(*(long *)(param6 + 8) + 0x50);\n              if ((currentRecordPointer[7] == param2) && (currentRecordPointer[8] == param1)) {\n                (*comparisonFunction)(*currentRecordPointer,ptr3);\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(0,ptr2);\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(currentRecordPointer[2],ptr3 + 8);\n                temp3 = currentRecordPointer[6];\n                temp5 = *currentRecordPointer;\n                ptr3 = (undefined *)currentRecordPointer[3];\n                ptr2 = ptr1;\n                for (temp2 = temp5; temp2 != 0; temp2 = temp2 - 1) {\n                  *ptr2 = *ptr3;\n                  ptr3 = ptr3 + (ulong)byteVariable * -2 + 1;\n                  ptr2 = ptr2 + (ulong)byteVariable * -2 + 1;\n                }\n                if (temp5 < temp3) {\n                  for (temp4 = temp3 - temp5; temp4 != 0; temp4 = temp4 + -1) {\n                    *ptr2 = 0;\n                    ptr2 = ptr2 + (ulong)byteVariable * -2 + 1;\n                  }\n                }\n                ptr3 = ptr1 + temp3;\n              }\n              else {\n                (*comparisonFunction)();\n                if (*(int *)(*(long *)(param6 + 8) + 8) == 5) {\n                  character = (*(char *)(*(long *)(param6 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  character = '\\b';\n                }\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(character,ptr2);\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(currentRecordPointer[2],ptr3 + 8);\n                temp5 = *currentRecordPointer;\n                ptr3 = (undefined *)currentRecordPointer[3];\n                ptr2 = ptr1;\n                for (temp3 = temp5; temp3 != 0; temp3 = temp3 - 1) {\n                  *ptr2 = *ptr3;\n                  ptr3 = ptr3 + (ulong)byteVariable * -2 + 1;\n                  ptr2 = ptr2 + (ulong)byteVariable * -2 + 1;\n                }\n                temp3 = currentRecordPointer[6];\n                if (temp5 < temp3) {\n                  for (temp4 = temp3 - temp5; temp4 != 0; temp4 = temp4 + -1) {\n                    *ptr2 = 0;\n                    ptr2 = ptr2 + (ulong)byteVariable * -2 + 1;\n                  }\n                }\n                temp4 = *(long *)(param6 + 8);\n                ptr1 = ptr1 + temp3;\n                ptr3 = ptr1 + 8;\n                if ((*(int *)(temp4 + 8) == 5) &&\n                   (*(char *)(*(long *)(param6 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(temp4 + 0x38))(currentRecordPointer[7],ptr1);\n                  (**(code **)(*(long *)(param6 + 8) + 0x38))(currentRecordPointer[8],ptr3);\n                  ptr3 = ptr1 + 0x10;\n                }\n                else {\n                  (**(code **)(temp4 + 0x50))(currentRecordPointer[7],ptr1);\n                  (**(code **)(*(long *)(param6 + 8) + 0x50))(currentRecordPointer[8],ptr1 + 4);\n                }\n                param2 = currentRecordPointer[7];\n                param1 = currentRecordPointer[8];\n              }\n            }\n          }\n          temp3 = (long)ptr3 - (long)temporaryBuffer;\n          temp5 = temp3;\n          ptr3 = temporaryBuffer;\n          if (temp3 < param3) {\n            for (; param3 = temp3, temp5 != 0; temp5 = temp5 - 1) {\n              *param5 = *ptr3;\n              ptr3 = ptr3 + (ulong)byteVariable * -2 + 1;\n              param5 = param5 + (ulong)byteVariable * -2 + 1;\n            }\n          }\n          free(temporaryBuffer);\n          free(param4);\n          return param3;\n        }\n        currentRecordIndex = currentRecord[0xb];\n      } while (currentRecordIndex == 0);\n      endRecord = currentRecord[0x10];\n      unaff_RBX = currentRecord[0x11];\n      temp1 = 0;\n      if (endRecord != unaff_RBX) break;\n      currentRecord[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "FUN_00116852",
                "qsort",
                "memcmp",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "allocate_or_return_ptr_00113d3a",
                "param_1": "inputPtr",
                "lVar1": "resultPtr"
            },
            "code": "\nlong allocateOrReturnPtr_00113d3a(long inputPtr)\n\n{\n  long resultPtr;\n  \n  if (inputPtr != 0) {\n    resultPtr = *(long *)(inputPtr + 8);\n    if (resultPtr == 0) {\n      resultPtr = allocate_and_initialize_data_00112904(0xc,0);\n      if (resultPtr == 0) {\n        resultPtr = 0;\n      }\n      else {\n        *(long *)(resultPtr + 0x10) = inputPtr;\n        *(long *)(inputPtr + 8) = resultPtr;\n      }\n    }\n    return resultPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_or_return_ptr_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010bba1",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "initialize_function_0010a0d3",
                "param_1": "input_parameter",
                "reverse_and_initialize_00109ed3": "reverse_and_initialize_buffer"
            },
            "code": "\nvoid initialize_function_0010a0d3(long input_parameter)\n\n{\n  reverse_and_initialize_buffer(input_parameter,0x42,*(undefined4 *)(*(long *)(input_parameter + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_function_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_section_00115530",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "lVar1": "offset",
                "pcVar2": "ptrVar2",
                "ppcVar3": "ptrPtrVar3",
                "cVar4": "flag",
                "iVar5": "index",
                "uVar6": "mask",
                "sVar7": "length1",
                "sVar8": "length2",
                "lVar9": "section",
                "pcVar10": "sectionName",
                "pcVar11": "tempPtr",
                "pcVar12": "tempPtr2",
                "uVar13": "flags",
                "bVar14": "hasFlag",
                "local_50": "errorMessage",
                "local_48": "newSectionName",
                "local_40": "sectionSize"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processSection_00115530(long arg1,char **arg2,long arg3)\n\n{\n  long offset;\n  char *ptrVar2;\n  char **ptrPtrVar3;\n  char flag;\n  int index;\n  uint mask;\n  size_t length1;\n  size_t length2;\n  long section;\n  char *sectionName;\n  char *tempPtr;\n  char *tempPtr2;\n  uint flags;\n  bool hasFlag;\n  long errorMessage;\n  char *newSectionName;\n  long sectionSize [2];\n  \n  flag = process_section_001159d0(arg2);\n  if (flag != '\\0') {\n    return;\n  }\n  sectionName = *arg2;\n  flags = *(uint *)((long)arg2 + 0x24);\n  newSectionName = sectionName;\n  ptrPtrVar3 = DAT_001278f8;\n  if (*(int *)(*(long *)(arg1 + 8) + 8) != *(int *)(*(long *)(arg3 + 8) + 8)) {\n    flags = flags & *(uint *)(*(long *)(arg1 + 8) + 0x18) &\n             *(uint *)(*(long *)(arg3 + 8) + 0x18);\n  }\n  for (; ptrPtrVar3 != (char **)0x0; ptrPtrVar3 = (char **)ptrPtrVar3[3]) {\n    index = strcmp(*ptrPtrVar3,sectionName);\n    if (index == 0) {\n      if (*(uint *)(ptrPtrVar3 + 2) != 0xffffffff) {\n        flags = *(uint *)(ptrPtrVar3 + 2);\n      }\n      if (sectionName != ptrPtrVar3[1]) {\n        newSectionName = ptrPtrVar3[1];\n        flags = drop_share_flag_if_not_coff_00115f30(flags,arg3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (sectionName = DAT_00127918, (*(byte *)((long)arg2 + 0x24) & 1) != 0)) ||\n     (sectionName = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    length1 = strlen(sectionName);\n    length2 = strlen(newSectionName);\n    tempPtr2 = (char *)xmalloc(length1 + 1 + length2);\n    sectionName = strcpy(tempPtr2,sectionName);\n    newSectionName = strcat(sectionName,newSectionName);\n  }\n  section = check_function_00114190(*arg2,0,0x80);\n  hasFlag = false;\n  if (section == 0) {\n    if ((DAT_00127a48 == 4) && ((flags & 0x2000001) != 0)) {\n      index = *(int *)(*(long *)(arg1 + 8) + 8);\n      if (index == 5) {\n        if (*(int *)(arg2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(arg3 + 8) + 8) == 5) {\n            hasFlag = (flags & 0x2000000) == 0;\n            mask = ~((-(uint)((flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)arg2 + 0x24) = *(uint *)((long)arg2 + 0x24) & mask;\n          }\n          else {\n            mask = 0xfdfffefd;\n          }\n          flags = flags & mask;\n        }\n      }\n      else if ((index != 2) || (index = strcmp(*arg2,\".buildid\"), index != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    flags = drop_share_flag_if_not_coff_00115f30(flags & 0x104 | *(uint *)(section + 0x28),arg3,*arg2);\n  }\n  flag = bfd_convert_section_setup(arg1,arg2,arg3,&newSectionName,sectionSize);\n  if (flag == '\\0') {\n    sectionName = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  sectionName = (char *)bfd_make_section_anyway_with_flags(arg3,newSectionName,flags);\n  if (sectionName == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      sectionSize[0] = 0;\n      goto LAB_001158e7;\n    }\n    flag = bfd_set_section_size(sectionName,sectionSize[0]);\n    if (flag == '\\0') {\n      initialize_memory_management_00108072();\n      return;\n    }\n  }\n  else {\n    sectionSize[0] = ((((long)DAT_00127a3c - 1U) + sectionSize[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    flag = bfd_set_section_size(sectionName);\n    if (flag == '\\0') {\n      initialize_memory_management_00108072();\n      return;\n    }\n  }\n  errorMessage = 0;\n  tempPtr2 = arg2[6];\n  section = check_function_00114190(*arg2,0,0x18);\n  if (section == 0) {\n    sectionName[0x28] = sectionName[0x28] | 1;\n    tempPtr = *arg2;\n    tempPtr2 = tempPtr2 + _DAT_001279b0;\n    *(char **)(sectionName + 0x30) = tempPtr2;\n    *(char **)(sectionName + 0x38) = tempPtr2;\n    tempPtr2 = arg2[7];\n    section = check_function_00114190(tempPtr,0,0x60);\n    if (section == 0) goto LAB_00115695;\nLAB_00115860:\n    tempPtr = *(char **)(section + 0x20);\n    if ((*(byte *)(section + 0x14) & 0x40) != 0) {\n      tempPtr = tempPtr + (long)tempPtr2;\n    }\n    *(char **)(sectionName + 0x38) = tempPtr;\n    section = check_function_00114190(*arg2,0,0x200);\n    if (section != 0) goto LAB_00115889;\nLAB_001156b8:\n    flags = *(uint *)((long)arg2 + 0x7c);\n    if (flags < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(sectionName + 0xb4) = *(undefined4 *)((long)arg2 + 0xb4);\n    sectionName[0x28] = sectionName[0x28] & 0xcfU | *(byte *)(arg2 + 5) & 0x30;\n    arg2[0xc] = sectionName;\n    arg2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)arg2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    flag = (**(code **)(*(long *)(arg3 + 8) + 0x158))(arg1,arg2,arg3,sectionName);\n    if (flag == '\\0') {\n      copy_private_data_and_print_error_0010808f();\n      return;\n    }\n  }\n  else {\n    tempPtr = *(char **)(section + 0x18);\n    if ((*(byte *)(section + 0x14) & 8) == 0) {\n      tempPtr = tempPtr + (long)tempPtr2;\n    }\n    sectionName[0x28] = sectionName[0x28] | 1;\n    ptrVar2 = *arg2;\n    *(char **)(sectionName + 0x30) = tempPtr;\n    *(char **)(sectionName + 0x38) = tempPtr;\n    tempPtr2 = arg2[7];\n    section = check_function_00114190(ptrVar2,0,0x60);\n    if (section != 0) goto LAB_00115860;\nLAB_00115695:\n    tempPtr = *arg2;\n    *(char **)(sectionName + 0x38) = tempPtr2 + _DAT_001279b0;\n    section = check_function_00114190(tempPtr,0,0x200);\n    if (section == 0) goto LAB_001156b8;\nLAB_00115889:\n    flags = *(uint *)(section + 0x2c);\n    if (0x3e < flags) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(sectionName + 0x7c) = flags;\n    *(undefined4 *)(sectionName + 0xb4) = *(undefined4 *)((long)arg2 + 0xb4);\n    sectionName[0x28] = sectionName[0x28] & 0xcfU | *(byte *)(arg2 + 5) & 0x30;\n    arg2[0xc] = sectionName;\n    arg2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)arg2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempPtr2 = arg2[0x1a];\n    section = retrieve_data_00115d00(tempPtr2,arg2[0x1c]);\n    if ((section == 0) ||\n       (offset = *(long *)(arg1 + 8), *(uint *)(section + 0x18) = *(uint *)(section + 0x18) | 0x20,\n       *(int *)(offset + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempPtr2 + 0xb0) = section;\n    flag = (**(code **)(*(long *)(arg3 + 8) + 0x158))(arg1,arg2,arg3,sectionName);\n    if (flag == '\\0') {\n      copy_private_data_and_print_error_0010808f();\n      return;\n    }\n  }\n  if (hasFlag) {\n    *(undefined4 *)(*(long *)(sectionName + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  print_error_message_001126c0(0,arg3,sectionName,errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00108072",
                "FUN_00115f30",
                "FUN_00114190",
                "strlen",
                "strcat",
                "dcgettext",
                "strcpy",
                "strcmp",
                "FUN_001159d0",
                "xmalloc",
                "bfd_set_section_size",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "initialize_and_reverse_0010a0bd",
                "param_1": "input",
                "reverse_and_initialize_00109ed3": "reverseAndInitialize"
            },
            "code": "\nvoid initializeAndReverse_0010a0bd(long input)\n\n{\n  reverseAndInitialize(input,0x6b,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_and_reverse_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_input_and_compare_00113e5e",
                "param_1": "input",
                "param_2": "string_ptr",
                "param_3": "string_length",
                "cVar1": "comparison_result",
                "local_20": "string_container"
            },
            "code": "\nundefined8 check_input_and_compare_00113e5e(undefined8 input,char **string_ptr,long string_length)\n\n{\n  char comparison_result;\n  char *string_container [2];\n  \n  string_container[0] = *string_ptr;\n  *string_ptr = (char *)(string_length + 2);\n  if ((((long)(char *)(string_length + 2) - (long)string_container[0] < 5) ||\n      (comparison_result = compare_strings_00113fb0(string_container[0],\"type\"), comparison_result == '\\0')) ||\n     ((string_container[0][4] != '$' && (string_container[0][4] != '.')))) {\n    if (*string_container[0] != '_') {\n      return 1;\n    }\n    if (string_container[0][1] != '_') {\n      return 1;\n    }\n    if (string_container[0][2] != 'o') {\n      return 1;\n    }\n    if (string_container[0][3] != 'p') {\n      return 1;\n    }\n    string_container[0] = string_container[0] + 4;\n  }\n  else {\n    string_container[0] = string_container[0] + 5;\n  }\n  comparison_result = parse_and_initialize_data_0010c95e(input,string_container,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "check_input_and_compare_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "update_config_0010abdd",
                "param_1": "configPtr",
                "param_2": "newParam",
                "param_3": "size",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "param7",
                "param_8": "flag4",
                "lVar1": "configBuffer",
                "pcVar2": "bufPtr",
                "bVar3": "flag",
                "pcVar4": "otherPtr",
                "__s": "strPtr",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "char1",
                "cVar11": "char2",
                "local_52": "localFlag"
            },
            "code": "\nundefined8\nupdateConfig_0010abdd(long configPtr,char *newParam,uint size,char flag1,char flag2,char flag3,\n            undefined8 param7,char flag4)\n\n{\n  long configBuffer;\n  char *bufPtr;\n  byte flag;\n  char *otherPtr;\n  char *strPtr;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char1;\n  char char2;\n  byte localFlag;\n  \n  strPtr = (char *)0x0;\n  localFlag = *(byte *)(*(long *)(configPtr + 0x60) + 0x1c);\n  otherPtr = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  if (flag4 != '\\0') {\n    flag = 1;\n    if (localFlag == 0) {\n      flag = *(byte *)(*(long *)(configPtr + 0x60) + 0x1c);\n    }\n    localFlag = flag & 1;\n    strPtr = (char *)extract_and_remove_ptr_from_param_00109b2f(configPtr);\n  }\n  configBuffer = *(long *)(configPtr + 0x60);\n  if ((configBuffer == 0) || (bufPtr = *(char **)(configBuffer + 0x30), bufPtr == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < size) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char1 = '?';\n    if (flag1 == '\\0') {\n      char1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(bufPtr);\n    len2 = strlen(otherPtr);\n    len3 = strlen(newParam);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(strPtr);\n    }\n    result = xrealloc(bufPtr,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(configBuffer + 0x30) = result;\n    bufPtr = *(char **)(*(long *)(configPtr + 0x60) + 0x30);\n    len1 = strlen(bufPtr);\n    sprintf(bufPtr + len1,\"%s:%s;%c%c%c\",otherPtr,newParam,(ulong)(byte)(0x32 - (char)size),\n            (ulong)(uint)(int)char2,(ulong)(uint)(int)char1,len1);\n    free(otherPtr);\n    if (flag4 != '\\0') {\n      otherPtr = *(char **)(*(long *)(configPtr + 0x60) + 0x30);\n      len1 = strlen(otherPtr);\n      sprintf(otherPtr + len1,\"%ld;%s;\",param7,strPtr);\n      free(strPtr);\n    }\n    if (localFlag != 0) {\n      *(undefined *)(*(long *)(configPtr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "update_config_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "args",
                "param_3": "outputFormat",
                "uVar1": "firstArg",
                "uVar2": "errorStr"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *args,undefined8 outputFormat)\n\n{\n  undefined8 firstArg;\n  undefined8 errorStr;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(args[1] + 8) != 2)) {\n    firstArg = *args;\n    flags = flags & 0xf7ffffff;\n    errorStr = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorStr,firstArg,outputFormat);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_value_001129f4",
                "param_1": "input_array",
                "puVar1": "temp_ptr",
                "piVar2": "temp_array_ptr"
            },
            "code": "\nundefined8 extract_value_001129f4(int *input_array)\n\n{\n  undefined8 *temp_ptr;\n  int *temp_array_ptr;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    temp_ptr = (undefined8 *)(input_array + 4);\n    temp_array_ptr = **(int ***)(undefined8 *)*temp_ptr;\n  } while ((input_array != temp_array_ptr) && (input_array = temp_array_ptr, temp_array_ptr != (int *)0x0));\n  return ((undefined8 *)*temp_ptr)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "calculate_inverse_check_001082b3",
                "uVar1": "string_length",
                "check_string_length_00113ede": "get_string_length"
            },
            "code": "\nuint calculate_inverse_check_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "calculate_inverse_check_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_archive_files_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "fileStatus",
                "param_5": "archType",
                "param_6": "fileSize",
                "param_7": "unused",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerToPointerChar1",
                "pvVar7": "pointerVoid1",
                "lVar8": "longVar1",
                "puVar9": "pointerToUnd8_1",
                "piVar10": "pointerInt1",
                "uVar11": "und8Var1",
                "uVar12": "und8Var2",
                "lVar13": "longVar2",
                "puVar14": "pointerToUnd8_2",
                "pcVar15": "pointerChar1",
                "ppcVar16": "pointerToPointerChar2",
                "pcVar17": "pointerChar2",
                "pcVar18": "pointerChar3",
                "__ptr": "pointerUnd8_1",
                "ppcVar19": "pointerToPointerChar3",
                "pcVar20": "pointerToCode",
                "lVar21": "longVar3",
                "uVar22": "uintVar1",
                "pcVar23": "pointerChar4",
                "psVar24": "pointerStat",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "local_array_1",
                "local_198": "local_array_2",
                "local_158": "local_stat",
                "local_c8": "local_array_3",
                "uStack_b0": "uintStack_b0",
                "lStack_98": "longStack_98"
            },
            "code": "\n\n\nvoid copyArchiveFiles_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 fileStatus,\n                 undefined8 archType,long fileSize,undefined8 unused)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **pointerToPointerChar1;\n  void *pointerVoid1;\n  long longVar1;\n  undefined8 *pointerToUnd8_1;\n  int *pointerInt1;\n  undefined8 und8Var1;\n  undefined8 und8Var2;\n  long longVar2;\n  undefined8 *pointerToUnd8_2;\n  char *pointerChar1;\n  char **pointerToPointerChar2;\n  char *pointerChar2;\n  char *pointerChar3;\n  undefined8 *pointerUnd8_1;\n  char **pointerToPointerChar3;\n  code *pointerToCode;\n  long longVar3;\n  uint uintVar1;\n  char *pointerChar4;\n  stat *pointerStat;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *local_array_1;\n  long *local_array_2;\n  stat local_stat;\n  void *local_array_3 [3];\n  uint uintStack_b0;\n  long longStack_98;\n  \n  byteVar2 = 0;\n  longVar2 = check_file_status_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      und8Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(und8Var2,inputFilePath);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  pointerToUnd8_2 = (undefined8 *)bfd_openr(inputFilePath,archType);\n  if ((pointerToUnd8_2 == (undefined8 *)0x0) || (intVar2 = bfd_stat(pointerToUnd8_2,fileStatus), intVar2 != 0)) {\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerToUnd8_2 + 0x44) = *(uint *)((long)pointerToUnd8_2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerToUnd8_2 + 0x44) = *(uint *)((long)pointerToUnd8_2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerToUnd8_2 + 0x44) = *(uint *)((long)pointerToUnd8_2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerToUnd8_2 + 0x44) = *(uint *)((long)pointerToUnd8_2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)pointerToUnd8_2 + 0x44) = *(uint *)((long)pointerToUnd8_2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)pointerToUnd8_2 + 0x44) = *(uint *)((long)pointerToUnd8_2 + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(pointerToUnd8_2,2);\n  if (charVar1 != '\\0') {\n    if (fileSize == 0) {\n      charVar1 = '\\0';\n      fileSize = *(long *)pointerToUnd8_2[1];\n    }\n    if (fileDescriptor < 0) {\n      local_array_1 = (undefined8 *)bfd_openw(outputFilePath,fileSize);\n    }\n    else {\n      local_array_1 = (undefined8 *)bfd_fdopenw(outputFilePath,fileSize,fileDescriptor);\n    }\n    if (local_array_1 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        und8Var2 = *pointerToUnd8_2;\n        und8Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(und8Var1,und8Var2);\n        DAT_00127a30 = 0;\n      }\n      execute_function_with_condition_00114d50(local_array_1,pointerToUnd8_2,DAT_001264b4);\n      local_array_2 = local_array_1 + 0x1f;\n      if ((*(byte *)((long)pointerToUnd8_2 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        und8Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_message_001126c0(0,pointerToUnd8_2,0,und8Var2);\n        return;\n      }\n      pointerChar1 = (char *)create_temp_directory_0011a0e0(*local_array_1);\n      if (pointerChar1 == (char *)0x0) {\n        pointerInt1 = __errno_location();\n        pointerChar1 = strerror(*pointerInt1);\n        und8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(und8Var2,pointerChar1);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)pointerToUnd8_2 + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerToUnd8_2 + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)local_array_1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)local_array_1 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)local_array_1 + 0x44) = *(uint *)((long)local_array_1 + 0x44) | 0x2000;\n      }\n      pointerUnd8_1 = (undefined8 *)0x0;\n      pointerToPointerChar2 = (char **)bfd_openr_next_archived_file(pointerToUnd8_2,0);\n      charVar2 = bfd_set_format(local_array_1,*(byte *)(pointerToUnd8_2 + 9) & 7);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(0,local_array_1,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (pointerToPointerChar2 != (char **)0x0))) {\n        pointerChar3 = *pointerToPointerChar2;\n        pointerChar2 = pointerChar3;\n        if (*pointerChar3 == '/') {\nLAB_0010527d:\n          und8Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(und8Var2,pointerChar3);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointerChar2 != '\\0') {\n          pointerChar4 = pointerChar2;\n          if ((*pointerChar2 == '.') && (pointerChar4 = pointerChar2 + 1, pointerChar2[1] == '.')) {\n            pointerChar4 = pointerChar2 + 2;\n            if ((pointerChar2[2] == '\\0') || (pointerChar2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerChar4 != '\\0' && (*pointerChar4 != '/')); pointerChar4 = pointerChar4 + 1) {\n          }\n          pointerChar2 = pointerChar4;\n          if (*pointerChar4 == '/') {\n            extract_and_copy_files_001052a2();\n            return;\n          }\n        }\n        pointerChar3 = (char *)concat(pointerChar1,&DAT_0011b47d);\n        intVar2 = stat(pointerChar3,&local_stat);\n        pointerToUnd8_1 = pointerUnd8_1;\n        if (-1 < intVar2) {\n          longVar2 = create_temp_directory_0011a0e0(pointerChar3);\n          free(pointerChar3);\n          if (longVar2 == 0) {\n            pointerInt1 = __errno_location();\n            pointerChar3 = strerror(*pointerInt1);\n            und8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(und8Var2,pointerChar3);\n            goto LAB_00104e93;\n          }\n          pointerToUnd8_1 = (undefined8 *)xmalloc(0x18);\n          pointerChar3 = *pointerToPointerChar2;\n          *pointerToUnd8_1 = pointerUnd8_1;\n          pointerToUnd8_1[2] = 0;\n          pointerToUnd8_1[1] = longVar2;\n          pointerChar3 = (char *)concat(longVar2,&DAT_0011b47d,pointerChar3);\n        }\n        intVar2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointerStat = &local_stat;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&pointerStat->st_dev = 0;\n            pointerStat = (stat *)((long)pointerStat + (ulong)byteVar2 * -8 + 4);\n          }\n          pointerToPointerChar3 = (char **)pointerToPointerChar2[0x1d];\n          if ((char **)pointerToPointerChar2[0x1d] == (char **)0x0) {\n            pointerToPointerChar3 = pointerToPointerChar2;\n          }\n          intVar2 = (**(code **)(pointerToPointerChar3[1] + 0x1e8))(pointerToPointerChar2,&local_stat);\n          if (intVar2 != 0) {\n            pointerChar2 = *pointerToPointerChar2;\n            und8Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(und8Var2,pointerChar2);\n          }\n        }\n        pointerUnd8_1 = (undefined8 *)xmalloc(0x18);\n        pointerUnd8_1[1] = pointerChar3;\n        *pointerUnd8_1 = pointerToUnd8_1;\n        pointerUnd8_1[2] = 0;\n        charVar2 = bfd_check_format(pointerToPointerChar2,1);\n        if (charVar2 == '\\0') {\n          und8Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_message_001126c0(0,pointerToPointerChar2,0,und8Var2);\n          pointerToPointerChar3 = (char **)bfd_openw(pointerChar3,fileSize);\n          if (pointerToPointerChar3 == (char **)0x0) {\nLAB_00104e80:\n            print_error_message_001126c0(pointerChar3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToPointerChar1 = (char **)pointerToPointerChar2[0x1d];\n          if ((char **)pointerToPointerChar2[0x1d] == (char **)0x0) {\n            pointerToPointerChar1 = pointerToPointerChar2;\n          }\n          intVar1 = (**(code **)(pointerToPointerChar1[1] + 0x1e8))(pointerToPointerChar2);\n          longVar2 = longStack_98;\n          if (intVar1 == 0) {\n            if (longStack_98 < 0) {\n              generate_formatted_string_001125fa(pointerToPointerChar2);\n              und8Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(und8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(pointerToPointerChar2,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointerChar2 = *pointerToPointerChar3;\n                  und8Var2 = generate_formatted_string_001125fa(pointerToPointerChar2);\n                  pointerChar4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerChar4,und8Var2,pointerChar2);\n                }\n                pointerVoid1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(pointerVoid1,longVar3,pointerToPointerChar2);\n                  pointerToPointerChar1 = pointerToPointerChar2;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(pointerVoid1,longVar3,pointerToPointerChar3), pointerToPointerChar1 = pointerToPointerChar3,\n                     longVar3 != longVar1)) {\n                    print_error_message_001126c0(0,pointerToPointerChar1,0,0);\n                    free(pointerVoid1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointerToPointerChar3,uintStack_b0 | 0x100);\n                free(pointerVoid1);\n                charVar2 = bfd_close_all_done(pointerToPointerChar3);\n                if (charVar2 == '\\0') {\n                  print_error_message_001126c0(pointerChar3,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              und8Var2 = generate_formatted_string_001125fa(pointerToPointerChar2);\n              print_error_message_0011a110(und8Var2);\n            }\n          }\n          else {\n            print_error_message_001126c0(0,pointerToPointerChar2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(pointerToPointerChar3);\n          if (charVar2 == '\\0') {\n            print_error_message_001126c0(pointerChar3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointerChar3);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pointerToPointerChar3 = (char **)bfd_openw(pointerChar3,*(undefined8 *)pointerToPointerChar2[1]);\n          }\n          else {\n            pointerToPointerChar3 = (char **)bfd_openw(pointerChar3,fileSize);\n          }\n          if (pointerToPointerChar3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = FUNC_00114e50(pointerToPointerChar2,pointerToPointerChar3,unused);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(pointerToPointerChar2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(pointerToPointerChar3);\n            if (charVar2 == '\\0') {\n              print_error_message_001126c0(pointerChar3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pointerToPointerChar3);\n          if (charVar2 == '\\0') {\n            print_error_message_001126c0(pointerChar3,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n            set_file_timestamps_0011a350(pointerChar3,&local_stat);\n          }\n          longVar2 = bfd_openr(pointerChar3,fileSize);\n          pointerUnd8_1[2] = longVar2;\n          *local_array_2 = longVar2;\n          local_array_2 = (long *)(longVar2 + 0xf0);\n          pointerToPointerChar3 = (char **)bfd_openr_next_archived_file(pointerToUnd8_2);\n          bfd_close(pointerToPointerChar2);\n          pointerToPointerChar2 = pointerToPointerChar3;\n        }\n      }\n      *local_array_2 = 0;\n      pointerVoid1 = (void *)xstrdup(*local_array_1);\n      if (DAT_00127a40 == 0) {\n        pointerToCode = bfd_close;\n      }\n      else {\n        pointerToCode = bfd_close_all_done;\n      }\n      charVar1 = (*pointerToCode)(local_array_1);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(pointerVoid1,0,0,0);\n      }\n      free(pointerVoid1);\n      pointerVoid1 = (void *)xstrdup(*pointerToUnd8_2);\n      charVar1 = bfd_close(pointerToUnd8_2);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_message_001126c0(pointerVoid1,0,0,0);\n      }\n      free(pointerVoid1);\nLAB_00114b4b:\n      while (pointerUnd8_1 != (undefined8 *)0x0) {\n        if (pointerUnd8_1[2] == 0) {\n          rmdir((char *)pointerUnd8_1[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)pointerUnd8_1[1]);\n        }\n        free((void *)pointerUnd8_1[1]);\n        pointerToUnd8_2 = (undefined8 *)*pointerUnd8_1;\n        free(pointerUnd8_1);\n        pointerUnd8_1 = pointerToUnd8_2;\n      }\n      rmdir(pointerChar1);\n      free(pointerChar1);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(pointerToUnd8_2,1,local_array_3);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(pointerToUnd8_2,3,&local_stat);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      print_error_message_001126c0(inputFilePath,0,0,0);\n      if (intVar2 == 0xd) {\n        print_matching_formats_0011256b(local_array_3[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(local_stat.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(local_array_3[0]);\n    }\n  }\n  if (fileSize == 0) {\n    fileSize = *(long *)pointerToUnd8_2[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilePath,fileSize);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilePath,fileSize,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  execute_function_with_condition_00114d50(longVar2,pointerToUnd8_2,DAT_001264b4);\n  charVar1 = FUNC_00114e50(pointerToUnd8_2,longVar2,unused);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(pointerToUnd8_2);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close",
                "dcgettext",
                "FUN_00113f50",
                "close",
                "strerror",
                "FUN_00104d25",
                "bfd_check_format",
                "bfd_close_all_done",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "free",
                "bfd_stat",
                "bfd_openr_next_archived_file",
                "FUN_00114d50",
                "bfd_check_format_matches",
                "FUN_00119dd0",
                "bfd_openw",
                "bfd_get_error",
                "__errno_location",
                "bfd_set_error",
                "bfd_fdopenw",
                "bfd_set_format",
                "bfd_openr",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_archive_files_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_data_structure_0010b800",
                "param_1": "dataStructure",
                "param_2": "size",
                "param_3": "isChar",
                "plVar1": "ptr",
                "uVar2": "result",
                "sVar3": "length",
                "lVar4": "value",
                "lVar5": "bitMask",
                "local_8c": "formattedString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 initializeDataStructure_0010b800(long dataStructure,int size,char isChar)\n\n{\n  long *ptr;\n  undefined8 result;\n  size_t length;\n  long value;\n  long bitMask;\n  undefined2 formattedString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    value = dataStructure + 0xb8;\n    if (isChar != '\\0') {\n      value = dataStructure + 0x78;\n    }\n    ptr = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr;\n    if (value != 0) {\n      result = initialize_data_structure_00109cf4(dataStructure,value,size);\n      return result;\n    }\n    value = *(long *)(dataStructure + 0x68);\n    *(long *)(dataStructure + 0x68) = value + 1;\n    *ptr = value;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",value,value);\n    if (isChar == '\\0') {\n      bitMask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + length),\"%ld;%ld;\",-bitMask,bitMask + -1);\n    }\n    else {\n      length = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + length) = 0x3b30;\n      *(undefined *)((long)&formattedString + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_structure_00109b52(dataStructure,&formattedString,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00109b52",
                "strlen",
                "dcgettext",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "reverse_and_initialize_00109ed3",
                "param_1": "input_param",
                "param_2": "id",
                "param_3": "flags",
                "param_4": "data_array",
                "param_5": "array_length",
                "uVar1": "index",
                "uVar2": "new_length",
                "cVar3": "is_initialized",
                "pcVar4": "input_string",
                "sVar5": "string_length",
                "__s": "formatted_string",
                "lVar6": "temp_var",
                "__ptr": "extracted_ptr",
                "uVar7": "result",
                "uVar8": "initialize_flag",
                "lVar9": "loop_var",
                "uVar10": "updated_length",
                "puVar11": "ptr_to_array_element",
                "bVar12": "flag"
            },
            "code": "\nundefined8 reverse_and_initialize_00109ed3(long input_param,uint id,undefined4 flags,long *data_array,ulong *array_length)\n\n{\n  ulong index;\n  ulong new_length;\n  char is_initialized;\n  char *input_string;\n  size_t string_length;\n  char *formatted_string;\n  long temp_var;\n  void *extracted_ptr;\n  undefined8 result;\n  undefined initialize_flag;\n  long loop_var;\n  ulong updated_length;\n  undefined *ptr_to_array_element;\n  byte flag;\n  \n  flag = 0;\n  temp_var = *(long *)(input_param + 0x60);\n  if (temp_var != 0) {\n    index = *(ulong *)(temp_var + 0x10);\n    if (((long)index < 1) || (data_array == (long *)0x0)) {\n      initialize_flag = *(undefined *)(temp_var + 0x1c);\n      input_string = (char *)extract_and_remove_ptr_from_param_00109b2f(input_param);\n      string_length = strlen(input_string);\n      formatted_string = (char *)xmalloc(string_length + 2);\n      sprintf(formatted_string,\"%c%s\",(ulong)id,input_string);\n      free(input_string);\n      temp_var = 0;\n    }\n    else {\n      updated_length = *array_length;\n      if (updated_length <= index) {\n        if (updated_length == 0) {\n          updated_length = 10;\n        }\n        for (; updated_length <= index; updated_length = updated_length * 2) {\n        }\n        temp_var = xrealloc(*data_array,updated_length * 8);\n        new_length = *array_length;\n        *data_array = temp_var;\n        ptr_to_array_element = (undefined *)(temp_var + new_length * 8);\n        for (loop_var = (updated_length - new_length) * 8; loop_var != 0; loop_var = loop_var + -1) {\n          *ptr_to_array_element = 0;\n          ptr_to_array_element = ptr_to_array_element + (ulong)flag * -2 + 1;\n        }\n        *array_length = updated_length;\n      }\n      temp_var = *(long *)(*data_array + index * 8);\n      if ((temp_var != 0) && (*(char *)(*(long *)(input_param + 0x60) + 0x1c) == '\\0')) {\n        extracted_ptr = (void *)extract_and_remove_ptr_from_param_00109b2f(input_param);\n        free(extracted_ptr);\n        result = initialize_data_structure_00109cf4(input_param,temp_var,flags);\n        return result;\n      }\n      temp_var = *(long *)(input_param + 0x68);\n      *(long *)(input_param + 0x68) = temp_var + 1;\n      input_string = (char *)extract_and_remove_ptr_from_param_00109b2f(input_param);\n      string_length = strlen(input_string);\n      formatted_string = (char *)xmalloc(string_length + 0x14);\n      sprintf(formatted_string,\"%ld=%c%s\",temp_var,(ulong)id,input_string);\n      free(input_string);\n      initialize_flag = 1;\n      *(long *)(*data_array + index * 8) = temp_var;\n    }\n    is_initialized = initialize_data_structure_00109b52(input_param,formatted_string,temp_var,initialize_flag,flags);\n    if (is_initialized != '\\0') {\n      free(formatted_string);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "xrealloc",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "reverse_and_initialize_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_0010bf86",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_00114d60",
                "FUN_0010a77a",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011378f",
                "FUN_00116852",
                "FUN_00112904",
                "FUN_0010c139",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00113da9",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_001199d0",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_00113b98",
                "FUN_00114460",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_00107880",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_00114cf0",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010a69a",
                "FUN_00112925",
                "FUN_00113d6e",
                "FUN_00114c80",
                "FUN_0010c7a0",
                "FUN_0010e9a0",
                "FUN_0010da0b",
                "FUN_0010e918",
                "FUN_0010c6be",
                "FUN_00113c43",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bd62",
                "FUN_00114190",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "prevDebugInfo",
                "puVar2": "units1",
                "puVar3": "units2",
                "lVar4": "count",
                "puVar5": "currentUnit",
                "pcVar6": "currentFilename",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *prevDebugInfo;\n  undefined4 *units1;\n  undefined4 *units2;\n  long count;\n  undefined4 *currentUnit;\n  char *currentFilename;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  units1 = (undefined4 *)xmalloc(0x18);\n  currentUnit = units1;\n  for (count = 6; count != 0; count = count + -1) {\n    *currentUnit = 0;\n    currentUnit = currentUnit + (ulong)flag * -2 + 1;\n  }\n  *(char **)(units1 + 2) = currentFilename;\n  units2 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)units1;\n  currentUnit = units2;\n  for (count = 6; count != 0; count = count + -1) {\n    *currentUnit = 0;\n    currentUnit = currentUnit + (ulong)flag * -2 + 1;\n  }\n  prevDebugInfo = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(units2 + 2) = units1;\n  if (prevDebugInfo == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)units2;\n  }\n  else {\n    *prevDebugInfo = units2;\n  }\n  debugInfo[1] = (long)units2;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  result._8_8_ = param4;\n  result._0_8_ = 1;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = generate_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = generate_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_message_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = generate_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = generate_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = generate_formatted_string_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = generate_formatted_string_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = generate_formatted_string_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_architecture_compatibility_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = compare_strings_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = compare_strings_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_section_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = check_function_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = check_function_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = check_function_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_message_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_debug_info_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_data_structure_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_in_array_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = analyze_debug_record_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_data_structure_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_in_array_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = analyze_debug_record_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_data_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_debug_record_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_debug_block_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = close_debug_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = record_debug_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_line_debug_info_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = end_function_debugging_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = extract_section_info_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_section_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_pattern_match_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = check_pattern_match_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = extract_and_process_binary_data_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_reloc_table_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_binary_00115dc0,param_2);\n    bfd_map_over_sections(param_1,reverse_section_contents_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_message_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = compare_strings_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_message_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = compare_strings_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_build_attributes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107976",
                "dcgettext",
                "bfd_set_format",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "retrieve_data_00115d00",
                "param_1": "inputData",
                "param_2": "binaryData",
                "uVar1": "result",
                "lVar2": "output"
            },
            "code": "\nlong retrieveData_00115d00(long inputData,long binaryData)\n\n{\n  uint result;\n  long output;\n  \n  output = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputData + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        result = *(uint *)(inputData + 0x2c);\n        if (result == 0) {\n          output = 0;\n        }\n        else if ((ulong)result <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          output = *(long *)(DAT_001278d0 + (ulong)(result - 1) * 8);\n        }\n        else {\n          output = 0;\n        }\n      }\n      else {\n        output = 0;\n      }\n    }\n    else {\n      output = 0;\n    }\n  }\n  return output;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "retrieve_data_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_and_initialize_data_00113c43",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "lVar1": "allocated_data_ptr",
                "plVar2": "dynamic_array_ptr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_data_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long allocated_data_ptr;\n  long *dynamic_array_ptr;\n  undefined result [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    allocated_data_ptr = allocate_and_initialize_data_00113c43_00112904(0x10,0);\n    if (allocated_data_ptr != 0) {\n      dynamic_array_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)dynamic_array_ptr + 0x21) = 0;\n      *dynamic_array_ptr = input_1;\n      *(undefined4 *)((long)dynamic_array_ptr + 0x24) = 0;\n      dynamic_array_ptr[1] = input_2;\n      dynamic_array_ptr[2] = input_3;\n      dynamic_array_ptr[3] = input_4;\n      *(undefined *)(dynamic_array_ptr + 4) = input_5;\n      *(long **)(allocated_data_ptr + 0x10) = dynamic_array_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  allocated_data_ptr = 0;\nLAB_00113caa:\n  result._8_8_ = input_6;\n  result._0_8_ = allocated_data_ptr;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_debug_record_00112a33",
                "param_1": "context",
                "param_2": "inputParam",
                "param_3": "outputParam",
                "param_4": "recordType",
                "param_5": "debugInfo",
                "param_6": "tempVar",
                "param_7": "flag",
                "uVar1": "result",
                "lVar2": "tempValue",
                "plVar3": "slotPtr"
            },
            "code": "\nbool processDebugRecord_00112a33(undefined8 context,long inputParam,undefined8 outputParam,byte recordType,undefined8 debugInfo\n                 ,undefined8 tempVar,uint flag)\n\n{\n  undefined result;\n  long tempValue;\n  long *slotPtr;\n  \n  if (recordType < 0x12) {\n    if (recordType != 0) {\n      switch(recordType) {\n      case 1:\n        result = debug_record_variable_0010c05d(debugInfo,*(undefined8 *)(inputParam + 8),tempVar,4,\n                             *(long *)(inputParam + 0x10) + *(long *)(*(long *)(inputParam + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable_0010c05d(debugInfo,*(undefined8 *)(inputParam + 8),tempVar,(flag & 0xff) + 2,\n                             *(long *)(inputParam + 0x10) + *(long *)(*(long *)(inputParam + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = debug_record_variable_0010c05d(debugInfo,*(undefined8 *)(inputParam + 8),tempVar,5,\n                             *(long *)(inputParam + 0x10) + *(long *)(*(long *)(inputParam + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_0010bd62(debugInfo,*(undefined8 *)(inputParam + 8),tempVar,1,\n                             *(long *)(inputParam + 0x10) + *(long *)(*(long *)(inputParam + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tempValue = check_debug_tag_type_0010c6be(debugInfo,*(undefined8 *)(inputParam + 8));\n        if (tempValue == 0) {\n          return false;\n        }\n        slotPtr = (long *)initialize_slot_0010da0b(context,outputParam);\n        *slotPtr = tempValue;\n        break;\n      case 0xd:\n        tempValue = initialize_debug_name_type_0010c218(debugInfo,*(undefined8 *)(inputParam + 8));\n        return tempValue != 0;\n      case 0x11:\n        result = record_parameter_0010bd62(debugInfo,*(undefined8 *)(inputParam + 8),tempVar,2,\n                             *(long *)(inputParam + 0x10) + *(long *)(*(long *)(inputParam + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (recordType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable_0010c05d(debugInfo,*(undefined8 *)(inputParam + 8),tempVar,1,\n                         *(long *)(inputParam + 0x10) + *(long *)(*(long *)(inputParam + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_record_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "dataType",
                "pcVar2": "dataTypeString",
                "uVar3": "initializedData",
                "lVar4": "dataTypeAddress",
                "plVar5": "typeFileNumber",
                "uVar6": "dataTypeIndex"
            },
            "code": "\n\n\nlong getDataType_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint dataType;\n  char *dataTypeString;\n  undefined8 initializedData;\n  long dataTypeAddress;\n  long *typeFileNumber;\n  uint dataTypeIndex;\n  \n  if ((*param3 == 0) && (dataType = param3[1], (int)dataType < 0)) {\n    dataTypeIndex = ~dataType;\n    if (dataTypeIndex < 0x22) {\n      dataTypeAddress = *(long *)(param2 + 0x90 + (ulong)dataTypeIndex * 8);\n      if (dataTypeAddress == 0) {\n        switch(dataTypeIndex) {\n        case 1:\n          initializedData = initialize_data_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          initializedData = initialize_data_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          initializedData = initialize_data_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          initializedData = initialize_data_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          initializedData = initialize_data_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          initializedData = initialize_data_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          initializedData = initialize_data_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          initializedData = initialize_data_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          initializedData = initialize_data_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          initializedData = initialize_data_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          initializedData = initialize_data_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          initializedData = initialize_data_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          initializedData = initialize_data_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          initializedData = initialize_data_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          initializedData = allocate_and_initialize_data_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          initializedData = initialize_data_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          initializedData = initialize_data_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          initializedData = 0;\n          break;\n        case 0x13:\n          initializedData = initialize_data_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          initializedData = allocate_and_initialize_data_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          initializedData = allocate_and_initialize_data_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          initializedData = allocate_and_initialize_data_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          initializedData = allocate_and_initialize_data_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          initializedData = allocate_and_initialize_data_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          initializedData = allocate_and_initialize_data_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          initializedData = initialize_data_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          initializedData = initialize_data_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          initializedData = initialize_data_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          initializedData = initialize_data_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          initializedData = initialize_data_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          initializedData = initialize_data_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          initializedData = allocate_and_initialize_data_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          initializedData = initialize_data_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          initializedData = initialize_data_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        dataTypeAddress = initialize_debug_name_type_0010c218(param1,dataTypeString,initializedData);\n        *(long *)(param2 + 0x90 + (ulong)dataTypeIndex * 8) = dataTypeAddress;\n        return dataTypeAddress;\n      }\n      return dataTypeAddress;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)dataType);\n  }\n  else {\n    typeFileNumber = (long *)check_type_file_number_00109022(param2);\n    if (typeFileNumber != (long *)0x0) {\n      if (*typeFileNumber == 0) {\n        dataTypeAddress = allocate_and_initialize_data_00113e23(typeFileNumber,0);\n        return dataTypeAddress;\n      }\n      return *typeFileNumber;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00109022"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_data_0010e07c",
                "param_1": "param_ptr1",
                "param_2": "param_ptr2",
                "param_3": "param_ptr3",
                "param_4": "param_val1",
                "param_5": "param_val2",
                "param_6": "param_ptr4",
                "lVar1": "symbol_offset",
                "lVar2": "symbol_address",
                "lVar3": "count",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "data_ptr",
                "uVar6": "returned_value1",
                "uVar7": "returned_value2",
                "puVar8": "new_data_ptr",
                "pcVar9": "error_message",
                "puVar10": "aux_data_ptr",
                "uVar11": "some_value",
                "lVar12": "index",
                "iVar13": "computed_value",
                "iVar14": "buffer_size",
                "local_a8": "some_value1",
                "uStack_a4": "some_value2",
                "uStack_a0": "some_value3",
                "uStack_9c": "some_value4",
                "local_88": "buffer",
                "local_6a": "some_value5",
                "local_68": "byte1",
                "local_67": "byte2",
                "local_60": "aux_data_buffer",
                "local_56": "some_value6"
            },
            "code": "\nundefined8\nprocess_binary_data_0010e07c(undefined8 param_ptr1,long *param_ptr2,undefined8 param_ptr3,int param_val1,long param_val2,\n            undefined8 param_ptr4)\n\n{\n  long symbol_offset;\n  long symbol_address;\n  long count;\n  char result;\n  undefined4 error_code;\n  void *data_ptr;\n  undefined8 returned_value1;\n  undefined8 returned_value2;\n  undefined4 *new_data_ptr;\n  char *error_message;\n  undefined *aux_data_ptr;\n  uint some_value;\n  long index;\n  int computed_value;\n  int buffer_size;\n  undefined4 some_value1;\n  undefined4 some_value2;\n  undefined4 some_value3;\n  undefined4 some_value4;\n  undefined buffer [30];\n  undefined2 some_value5;\n  byte byte1;\n  byte byte2;\n  undefined aux_data_buffer [10];\n  ushort some_value6;\n  \n  buffer_size = 10;\n  index = 0;\n  symbol_offset = *(long *)(param_val2 + 0x18);\n  data_ptr = (void *)xmalloc(0x50);\n  while ((param_ptr2[3] < symbol_offset && (param_ptr2[2] < param_ptr2[1]))) {\n    symbol_address = *(long *)(*param_ptr2 + param_ptr2[2] * 8);\n    result = bfd_coff_get_syment(param_ptr1,symbol_address,buffer);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      returned_value1 = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      returned_value2 = dcgettext(0,error_message,5);\n      print_error_message_00119ed0(returned_value2,returned_value1);\n      free(data_ptr);\n      return 0;\n    }\n    count = param_ptr2[3];\n    aux_data_ptr = (undefined *)0x0;\n    param_ptr2[2] = param_ptr2[2] + 1;\n    param_ptr2[3] = count + 1 + (ulong)byte2;\n    if (byte2 != 0) {\n      aux_data_ptr = aux_data_buffer;\n      result = bfd_coff_get_auxent(param_ptr1,symbol_address,0,aux_data_ptr);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        returned_value1 = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (byte1 == 0x12) {\n      some_value = (uint)some_value6;\n      computed_value = (int)*(undefined8 *)(symbol_address + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (byte1 < 0x13) {\n        if ((byte1 == 8) || (byte1 == 0xb)) {\n          some_value = 0;\n          computed_value = ((int)*(undefined8 *)(symbol_address + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (byte1 == 0x66) break;\n      some_value = 0;\n      computed_value = 0;\n    }\nLAB_0010e214:\n    returned_value2 = parse_coff_type_0010dac0(param_ptr1,param_ptr2,param_ptr3,count,some_value5,aux_data_ptr,1);\n    returned_value1 = *(undefined8 *)(symbol_address + 8);\n    new_data_ptr = (undefined4 *)xmalloc(0x20);\n    some_value1 = (undefined4)returned_value1;\n    some_value2 = (undefined4)((ulong)returned_value1 >> 0x20);\n    some_value3 = (undefined4)returned_value2;\n    some_value4 = (undefined4)((ulong)returned_value2 >> 0x20);\n    *(undefined8 *)(new_data_ptr + 5) = 0;\n    new_data_ptr[6] = computed_value;\n    new_data_ptr[7] = some_value;\n    new_data_ptr[4] = 0;\n    *new_data_ptr = some_value1;\n    new_data_ptr[1] = some_value2;\n    new_data_ptr[2] = some_value3;\n    new_data_ptr[3] = some_value4;\n    if (buffer_size <= (int)index + 1) {\n      buffer_size = buffer_size + 10;\n      data_ptr = (void *)xrealloc(data_ptr,(long)buffer_size << 3,new_data_ptr,0,param_ptr4);\n    }\n    *(undefined4 **)((long)data_ptr + index * 8) = new_data_ptr;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)data_ptr + (long)(int)index * 8) = 0;\n  returned_value1 = initialize_data_00113da9(param_val1 == 8,*(undefined2 *)(param_val2 + 10),data_ptr);\n  return returned_value1;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113da9",
                "dcgettext",
                "FUN_0010dac0",
                "bfd_coff_get_auxent",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_data_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_data_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3"
            },
            "code": "\nundefined8 getDefaultValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_default_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "load_and_process_file_00114460",
                "param_1": "fileName",
                "param_2": "hashTable",
                "param_3": "fileContents",
                "iVar1": "lineNumber",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedString",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "filePointer",
                "sVar5": "readSize",
                "ppbVar6": "hashTableEntryPtr",
                "pbVar7": "spacePtr",
                "bVar8": "currentByte",
                "pbVar9": "nextBytePtr",
                "pbVar10": "currentBytePtr",
                "pbVar11": "lineStartPtr",
                "pbVar12": "linePtr"
            },
            "code": "\nvoid loadAndProcessFile_00114460(char *fileName,undefined8 hashTable,byte **fileContents)\n\n{\n  int lineNumber;\n  int *errorNumberPtr;\n  char *errorMessage;\n  undefined8 translatedString;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *filePointer;\n  size_t readSize;\n  byte **hashTableEntryPtr;\n  byte *spacePtr;\n  byte currentByte;\n  byte *nextBytePtr;\n  byte *currentBytePtr;\n  byte *lineStartPtr;\n  byte *linePtr;\n  \n  fileSize = check_file_status_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    filePointer = fopen(fileName,\"r\");\n    if (filePointer == (FILE *)0x0) {\n      errorNumberPtr = __errno_location();\n      errorMessage = strerror(*errorNumberPtr);\n      translatedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(translatedString,fileName,errorMessage);\n    }\n    readSize = fread(fileBuffer,1,fileSize,filePointer);\n    if ((readSize == 0) || (lineNumber = ferror(filePointer), lineNumber != 0)) {\n      translatedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(translatedString,fileName);\n    }\n    lineNumber = 1;\n    fclose(filePointer);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    linePtr = fileBuffer;\n    while (currentBytePtr = linePtr, currentByte != 0) {\n      for (; currentByte = *currentBytePtr, lineStartPtr = currentBytePtr, currentByte != 10; currentBytePtr = currentBytePtr + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextBytePtr = currentBytePtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentBytePtr = 0;\n            nextBytePtr = currentBytePtr + 1;\n            if (currentBytePtr[1] == 10) {\n              nextBytePtr = currentBytePtr + 2;\n              lineStartPtr = currentBytePtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentBytePtr = 0;\n      if (currentBytePtr[1] == 0xd) {\n        lineStartPtr = currentBytePtr + 1;\n        nextBytePtr = currentBytePtr + 2;\n      }\n      else {\n        nextBytePtr = currentBytePtr + 1;\n      }\nLAB_00114553:\n      currentByte = *linePtr;\n      while ((currentByte == 0x20 || (currentBytePtr = linePtr, currentByte == 9))) {\n        currentBytePtr = linePtr + 1;\n        linePtr = linePtr + 1;\n        currentByte = *currentBytePtr;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentBytePtr[1];\n        currentBytePtr = currentBytePtr + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentBytePtr[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentBytePtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentBytePtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentBytePtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentBytePtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentBytePtr[6];\n          spacePtr = currentBytePtr + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = spacePtr[1];\n                spacePtr = spacePtr + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(translatedString,fileName,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentBytePtr = 0;\n      if (linePtr < currentBytePtr) {\n        hashTableEntryPtr = (byte **)htab_find_slot(hashTable,linePtr,1);\n        *hashTableEntryPtr = linePtr;\n      }\n      lineNumber = lineNumber + 1;\n      linePtr = nextBytePtr;\n      currentByte = lineStartPtr[1];\n    }\n    *fileContents = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "xmalloc",
                "fclose",
                "__errno_location",
                "dcgettext",
                "ferror",
                "fopen",
                "fread",
                "FUN_00113f50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "load_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "build_request_0010a94e",
                "param_1": "request_info",
                "cVar1": "flag",
                "lVar2": "info_ptr",
                "__s": "extracted_ptr",
                "sVar3": "ptr_len_1",
                "sVar4": "ptr_len_2",
                "sVar5": "extracted_ptr_len",
                "sVar6": "param_3_len",
                "pcVar7": "request_ptr",
                "uVar8": "result",
                "pcVar9": "status_ptr"
            },
            "code": "\nundefined8 build_request_0010a94e(long request_info,char *param_2,char *param_3,int param_4)\n\n{\n  char flag;\n  long info_ptr;\n  char *extracted_ptr;\n  size_t ptr_len_1;\n  size_t ptr_len_2;\n  size_t extracted_ptr_len;\n  size_t param_3_len;\n  char *request_ptr;\n  undefined8 result;\n  char *status_ptr;\n  \n  flag = *(char *)(*(long *)(request_info + 0x60) + 0x1c);\n  extracted_ptr = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  request_ptr = *(char **)(*(long *)(request_info + 0x60) + 0x20);\n  if (request_ptr == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    ptr_len_1 = strlen(request_ptr);\n    ptr_len_2 = strlen(param_2);\n    extracted_ptr_len = strlen(extracted_ptr);\n    param_3_len = strlen(param_3);\n    request_ptr = (char *)xmalloc(ptr_len_1 + 10 + ptr_len_2 + extracted_ptr_len + param_3_len);\n    if (param_4 == 1) {\n      status_ptr = \"/1\";\n    }\n    else {\n      status_ptr = \"/0\";\n      if ((param_4 != 2) && (status_ptr = \"\", param_4 != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(request_ptr,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(request_info + 0x60) + 0x20),param_2,status_ptr,\n            extracted_ptr,param_3,*(long *)(request_info + 0x60));\n    free(*(void **)(*(long *)(request_info + 0x60) + 0x20));\n    info_ptr = *(long *)(request_info + 0x60);\n    *(char **)(info_ptr + 0x20) = request_ptr;\n    if (flag != '\\0') {\n      *(undefined *)(info_ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)info_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "build_request_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_type_00113b1e",
                "param_1": "input_param",
                "param_2": "unused_param_1",
                "param_3": "output_param",
                "param_4": "unused_param_2",
                "auVar1": "result_1",
                "piVar2": "real_type_ptr",
                "uVar3": "value",
                "auVar4": "result_2"
            },
            "code": "\nundefined  [16] extract_real_type_00113b1e(long input_param,undefined8 unused_param_1,ulong output_param,undefined8 unused_param_2)\n\n{\n  undefined result_1 [16];\n  int *real_type_ptr;\n  undefined8 value;\n  undefined result_2 [16];\n  \n  if (input_param != 0) {\n    real_type_ptr = (int *)get_real_type_00112b6e(input_param,0);\n    if ((real_type_ptr == (int *)0x0) || (3 < *real_type_ptr - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(real_type_ptr + 4);\n    }\n    result_2._8_8_ = unused_param_2;\n    result_2._0_8_ = value;\n    return result_2;\n  }\n  result_1._8_8_ = 0;\n  result_1._0_8_ = output_param;\n  return result_1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_real_type_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "initialize_data_structure_0010a0e9",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "ptrValue",
                "uVar2": "returnValue",
                "__s": "str1",
                "sVar3": "strLength",
                "__s_00": "str2"
            },
            "code": "\nundefined4 initializeDataStructure_0010a0e9(long param1,undefined8 param2,undefined8 param3)\n\n{\n  undefined ptrValue;\n  undefined4 returnValue;\n  char *str1;\n  size_t strLength;\n  char *str2;\n  \n  ptrValue = *(undefined *)(*(long *)(param1 + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(param1 + 0x60) + 0x18);\n  str1 = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  strLength = strlen(str1);\n  str2 = (char *)xmalloc(strLength + 100);\n  sprintf(str2,\"r%s;%ld;%ld;\",str1,param2,param3);\n  free(str1);\n  returnValue = initialize_data_structure_00109b52(param1,str2,0,ptrValue,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(str2);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_data_00114c20",
                "param_1": "dataAddress",
                "cVar1": "comparisonResult",
                "pcVar2": "characterPointer",
                "check_function_00114190": "performCheck",
                "compare_strings_00113fb0": "compareStrings"
            },
            "code": "\nvoid initializeData_00114c20(long dataAddress)\n\n{\n  char comparisonResult;\n  char *characterPointer;\n  \n  performCheck(dataAddress,1,1);\n  comparisonResult = compareStrings(dataAddress,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    characterPointer = (char *)(dataAddress + 5);\n    if (*(char *)(dataAddress + 4) != 'a') {\n      characterPointer = (char *)(dataAddress + 4);\n    }\n    if (*characterPointer != '\\0') {\n      performCheck(characterPointer,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_section_and_compare_00115f50",
                "param_1": "sectionAddress",
                "param_2": "sectionData",
                "param_3": "isExecutable",
                "__s1": "currentSection",
                "uVar1": "strcmpResult",
                "uVar2": "result",
                "extraout_EDX": "comparisonResult",
                "plVar3": "sectionList",
                "auVar4": "processingResult"
            },
            "code": "\nuint checkSectionAndCompare_00115f50(long sectionAddress,char **sectionData,char isExecutable)\n\n{\n  char *currentSection;\n  uint strcmpResult;\n  undefined4 result;\n  undefined4 comparisonResult;\n  long *sectionList;\n  undefined processingResult [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  processingResult = process_section_001159d0(sectionData);\n  if (processingResult[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      currentSection = *sectionData;\n      sectionList = DAT_001279d8;\n      do {\n        strcmpResult = strcmp(currentSection,(char *)sectionList[1]);\n        processingResult._4_4_ = 0;\n        processingResult._0_4_ = strcmpResult;\n        processingResult._8_4_ = comparisonResult;\n        if (strcmpResult == 0) {\n          return 1;\n        }\n        sectionList = (long *)*sectionList;\n      } while (sectionList != (long *)0x0);\n    }\n    result = processingResult._8_4_;\n    if (((((isExecutable == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (processingResult._8_4_ = result, processingResult._0_8_ = *(long *)(sectionAddress + 8),\n         *(int *)(*(long *)(sectionAddress + 8) + 8) != 5)) ||\n        ((processingResult._0_8_ = (ulong)sectionData[0x1a], *(int *)(sectionData[0x1a] + 4) != 7 ||\n         (processingResult = compare_strings_00113fb0(*sectionData,\".gnu.build.attributes\"), processingResult[0] == '\\0')))) &&\n       ((*(byte *)((long)sectionData + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(processingResult._1_7_,sectionData[8] == (char *)0x0) |\n             CONCAT31(processingResult._9_3_,sectionData[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_001159d0",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_section_and_compare_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "uVar1": "section_length",
                "uVar2": "error_message",
                "unaff_RBX": "section_ptr",
                "unaff_EBP": "error_code"
            },
            "code": "\nvoid print_error_and_exit_001083de(void)\n\n{\n  undefined8 section_length;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  undefined4 error_code;\n  \n  section_length = *section_ptr;\n  error_message = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_001083de_00119dd0(error_message,section_length,error_code);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_0011a2e0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_data_structure_0010b948",
                "param_1": "ptr1",
                "param_2": "val1",
                "lVar1": "var1",
                "cVar2": "char1",
                "__ptr": "ptr2",
                "uVar3": "val2",
                "uVar4": "val3",
                "local_5a": "strArray"
            },
            "code": "\nvoid initializeDataStructure_0010b948(long ptr1,uint val1)\n\n{\n  long var1;\n  char char1;\n  void *ptr2;\n  ulong val2;\n  uint val3;\n  char strArray [50];\n  \n  val3 = val1 - 1;\n  val2 = (ulong)val1;\n  if ((val3 < 0x10) && (var1 = *(long *)(ptr1 + 0xf8 + (ulong)val3 * 8), var1 != 0)) {\n    initialize_data_structure_00109cf4(ptr1,var1,val2);\n    return;\n  }\n  char1 = initialize_data_structure_0010b800(ptr1,4,0);\n  if (char1 != '\\0') {\n    ptr2 = (void *)extract_and_remove_ptr_from_param_00109b2f(ptr1);\n    var1 = *(long *)(ptr1 + 0x68);\n    *(long *)(ptr1 + 0x68) = var1 + 1;\n    if (val3 < 0x10) {\n      *(long *)(ptr1 + 0xf8 + (ulong)val3 * 8) = var1;\n    }\n    sprintf(strArray,\"%ld=r%s;%u;0;\",var1,ptr2,val2);\n    free(ptr2);\n    initialize_data_structure_00109b52(ptr1,strArray,var1,1,val2);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010b800",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010e07c",
                "FUN_00119970",
                "FUN_00114690",
                "FUN_00116490",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00108200",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00115b70",
                "FUN_00113f50",
                "FUN_0010be1a",
                "FUN_00108d9a",
                "FUN_00109a32",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0010808f",
                "FUN_0011256b",
                "FUN_00104966",
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00119f70",
                "FUN_00108375",
                "FUN_00104920",
                "FUN_0010bc80",
                "FUN_00112b6e",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010543c",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_00114460",
                "FUN_00107976",
                "FUN_0010551d",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0010882c",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00112996",
                "FUN_0010871c",
                "FUN_001083de",
                "FUN_00108808",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_0010da0b",
                "FUN_0010c892",
                "FUN_0010b800",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00108072",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00108916",
                "FUN_0010914e",
                "FUN_00112c1f",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_00108a2a",
                "FUN_00114e00",
                "FUN_0010c218",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "inputValue",
                "param_2": "debugInfo",
                "iVar1": "firstValue",
                "__format": "formatString",
                "piVar3": "result",
                "plVar4": "currentDebugInfo",
                "bVar5": "isCircular",
                "local_18": "visitedDebugInfo",
                "local_10": "currentValue"
            },
            "code": "\n\n\nint * getRealType_00112b6e(int *inputValue,long *debugInfo)\n\n{\n  int firstValue;\n  undefined8 uVar2;\n  char *formatString;\n  int *result;\n  long *currentDebugInfo;\n  bool isCircular;\n  long *visitedDebugInfo;\n  int *currentValue;\n  \n  firstValue = *inputValue;\n  if ((firstValue != 1) && (1 < firstValue - 0x16U)) {\n    return inputValue;\n  }\n  currentDebugInfo = debugInfo;\n  while (currentDebugInfo != (long *)0x0) {\n    if ((inputValue == (int *)currentDebugInfo[1]) ||\n       (isCircular = currentDebugInfo == (long *)*currentDebugInfo, currentDebugInfo = (long *)*currentDebugInfo, isCircular)) {\n      uVar2 = extract_value_001129f4(inputValue,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(_stderr,formatString,uVar2);\n      return (int *)0x0;\n    }\n  }\n  visitedDebugInfo = debugInfo;\n  currentValue = inputValue;\n  if (firstValue - 0x16U < 2) {\n    result = (int *)getRealType_00112b6e((*(undefined8 **)(inputValue + 4))[1],&visitedDebugInfo);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(inputValue + 4);\n  if (inputValue == result) {\n    return inputValue;\n  }\n  if (result == (int *)0x0) {\n    return inputValue;\n  }\n  result = (int *)getRealType_00112b6e(result,&visitedDebugInfo);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "extract_data_0010a83e",
                "param_1": "ptr",
                "param_2": "arg2",
                "param_3": "size1",
                "param_4": "var1",
                "param_5": "size2",
                "param_6": "byte1",
                "param_7": "byte2",
                "uVar1": "result",
                "__s": "str1",
                "__s_00": "str2",
                "sVar2": "length",
                "cVar3": "ch"
            },
            "code": "\nundefined4\nextractData_0010a83e(long ptr,undefined8 arg2,ulong size1,undefined var1,ulong size2,\n            byte byte1,byte byte2)\n\n{\n  undefined4 result;\n  char *str1;\n  char *str2;\n  size_t length;\n  char ch;\n  \n  if (((byte2 ^ 1) & byte1) == 0) {\n    str1 = (char *)0x0;\n    ch = '\\0';\n  }\n  else {\n    ch = *(char *)(*(long *)(ptr + 0x60) + 0x1c);\n    str1 = (char *)extract_and_remove_ptr_from_param_00109b2f();\n    size2 = size2 & 0xffffffff;\n    size1 = size1 & 0xffffffff;\n  }\n  result = initialize_data_0010a69a(ptr,arg2,size1,var1,size2);\n  if ((char)result != '\\0') {\n    if (byte1 == 0) {\n      return result;\n    }\n    if (byte2 == 0) {\n      if (str1 == (char *)0x0) {\n        return 0;\n      }\n      length = strlen(str1);\n      str2 = (char *)xmalloc(length + 3);\n      sprintf(str2,\"~%%%s\",str1);\n      free(str1);\n      if (ch != '\\0') {\n        *(undefined *)(*(long *)(ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      str2 = (char *)xmalloc(0x14);\n      sprintf(str2,\"~%%%ld\",*(undefined8 *)(*(long *)(ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(ptr + 0x60) + 0x38) = str2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010a69a",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "initialize_data_and_allocate_00113d6e",
                "param_1": "data",
                "param_2": "value",
                "lVar1": "dataPointer",
                "puVar2": "pointerData"
            },
            "code": "\nlong initializeDataAndAllocate_00113d6e(undefined8 data,undefined8 value)\n\n{\n  long dataPointer;\n  undefined8 *pointerData;\n  \n  dataPointer = allocate_and_initialize_data_00112904(0xb,0);\n  if (dataPointer != 0) {\n    pointerData = (undefined8 *)xmalloc(0x10);\n    *pointerData = data;\n    pointerData[1] = value;\n    *(undefined8 **)(dataPointer + 0x10) = pointerData;\n  }\n  return dataPointer;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_and_allocate_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_00114690",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_0010c1c6",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00116852",
                "FUN_00109b2f",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00108466",
                "FUN_001199d0",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e453",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010dac0",
                "FUN_00108863",
                "FUN_00107880",
                "FUN_0011173a",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010e9a0",
                "FUN_001081e9",
                "FUN_0010e918",
                "FUN_001088ae",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00114b84",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_with_condition_00114d50",
                "param_1": "functionParam1",
                "param_2": "functionParam2",
                "param_3": "conditionParam"
            },
            "code": "\nvoid executeFunctionWithCondition_00114d50(long functionParam1,long functionParam2,uint conditionParam)\n\n{\n  if (*(int *)(*(long *)(functionParam1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((conditionParam == 2) && (*(int *)(*(long *)(functionParam2 + 8) + 8) == 2)) {\n    conditionParam = (uint)*(byte *)(*(long *)(*(long *)(functionParam2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(functionParam1 + 8) + 0x380) + 0x78))(functionParam1,conditionParam != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_with_condition_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "file",
                "param_2": "errorCode",
                "uVar1": "data",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108916(FILE *file,int errorCode)\n\n{\n  undefined8 data;\n  char *message;\n  \n  data = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(file,message,data);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(file,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(file,message);\n  print_supported_targets_00104a35(DAT_00127600,file);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "exit",
                "FUN_00104a35",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMsgPtr",
                "param_10": "errorMsgLen",
                "param_11": "moduleNamePtr",
                "param_12": "moduleNameFormat",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "printModuleName",
                "iVar1": "errorNumber",
                "uVar2": "errorMessage",
                "local_100": "hexValue1",
                "local_fc": "hexValue2",
                "local_f8": "strPointer1",
                "local_f0": "localBuffer",
                "local_e8": "messageBuffer",
                "local_c8": "param13_copy",
                "local_c0": "param14_copy",
                "local_b8": "errorCode_copy",
                "local_a8": "param2_copy",
                "local_98": "param3_copy",
                "local_88": "param4_copy",
                "local_78": "param5_copy",
                "local_68": "param6_copy",
                "local_58": "param7_copy",
                "local_48": "param8_copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 long errorMsgPtr,long errorMsgLen,long *moduleNamePtr,char *moduleNameFormat,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char printModuleName;\n  int errorNumber;\n  undefined8 errorMessage;\n  undefined4 hexValue1;\n  undefined4 hexValue2;\n  undefined *strPointer1;\n  undefined *localBuffer;\n  undefined messageBuffer [32];\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 errorCode_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (printModuleName != '\\0') {\n    errorCode_copy = errorCode;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  param13_copy = param13;\n  param14_copy = param14;\n  errorNumber = bfd_get_error();\n  if (errorNumber == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (errorMsgLen != 0) {\n    if (errorMsgPtr == 0) {\n      errorMsgPtr = generate_formatted_string_001125fa(errorMsgLen);\n    }\n    if ((moduleNamePtr != (long *)0x0) && (*moduleNamePtr != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMsgPtr);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMsgPtr);\nLAB_001127c1:\n  if (moduleNameFormat != (char *)0x0) {\n    strPointer1 = &stack0x00000008;\n    localBuffer = messageBuffer;\n    hexValue1 = 0x20;\n    hexValue2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,moduleNameFormat,&hexValue1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "fwrite",
                "bfd_errmsg",
                "bfd_get_error",
                "fprintf",
                "dcgettext",
                "vfprintf",
                "fflush",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001088ae",
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "allocate_and_initialize_data_00113b4a",
                "param_1": "input_value",
                "lVar1": "allocated_data"
            },
            "code": "\nlong allocate_and_initialize_data_00113b4a(long input_value)\n\n{\n  long allocated_data;\n  \n  if (input_value != 0) {\n    allocated_data = allocate_and_initialize_data_00113b4a_00112904(0x15,0);\n    if (allocated_data == 0) {\n      allocated_data = 0;\n    }\n    else {\n      *(long *)(allocated_data + 0x10) = input_value;\n    }\n    return allocated_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "process_data_0010edb4",
                "param_1": "data",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "size",
                "cVar1": "result",
                "iVar2": "comparison",
                "uVar3": "returnValue"
            },
            "code": "\nundefined8 processData_0010edb4(long data,undefined8 filename,undefined4 flag,ulong size)\n\n{\n  char result;\n  int comparison;\n  undefined8 returnValue;\n  undefined8 in_R10;\n  \n  if (*(long *)(data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(data + 0x1f0) < size) {\n    *(ulong *)(data + 0x1f0) = size;\n  }\n  comparison = filename_cmp(filename);\n  if (comparison != 0) {\n    result = process_data_0010e2f0(data,0x84,0,size,filename);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(data + 0x210) = filename;\n  }\n  returnValue = process_data_0010e2f0(data,0x44,flag,size - *(long *)(data + 0x200),0,in_R10);\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "process_data_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_0010be1a",
                "FUN_0010554f",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_0010c892",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_0010bc80",
                "FUN_0010914e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_00108a2a",
                "FUN_0010b0fa",
                "FUN_00104a35",
                "FUN_0010bf20",
                "FUN_0010c218"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_and_return_data_0010e5db",
                "param_1": "input_pointer",
                "param_2": "num_iterations",
                "cVar1": "char_result",
                "__ptr": "ptr_extracted_from_input",
                "__s": "string_extracted_from_input",
                "sVar2": "string_length",
                "__s_00": "modified_string",
                "in_R10": "input_parameter_R10",
                "iVar3": "iteration_counter",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] process_and_return_data_0010e5db(long input_pointer,int num_iterations)\n\n{\n  char char_result;\n  void *ptr_extracted_from_input;\n  char *string_extracted_from_input;\n  size_t string_length;\n  char *modified_string;\n  ulong input_parameter_R10;\n  int iteration_counter;\n  undefined return_value [16];\n  \n  iteration_counter = 0;\n  do {\n    if (num_iterations <= iteration_counter) {\n      return_value = reverse_and_initialize_00109ed3(input_pointer,0x66,0,input_pointer + 0x188,input_pointer + 400,input_parameter_R10);\n      return return_value;\n    }\n    if (*(char *)(*(long *)(input_pointer + 0x60) + 0x1c) == '\\0') {\n      ptr_extracted_from_input = (void *)extract_and_remove_ptr_from_param_00109b2f(input_pointer);\n      free(ptr_extracted_from_input);\n    }\n    else {\n      string_extracted_from_input = (char *)extract_and_remove_ptr_from_param_00109b2f(input_pointer);\n      string_length = strlen(string_extracted_from_input);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",string_extracted_from_input);\n      free(string_extracted_from_input);\n      char_result = process_data_0010e2f0(input_pointer,0x80,0,0,modified_string);\n      if (char_result == '\\0') {\n        return_value._8_8_ = 0;\n        return_value._0_8_ = input_parameter_R10;\n        return return_value << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_counter = iteration_counter + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_return_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_print_error_message_00104d25",
                "param_7": "errorFilePath",
                "print_error_message_001126c0": "printErrorMessage",
                "remove_directory_00114b84": "removeDirectory"
            },
            "code": "\nvoid cleanupAndPrintErrorMessage_00104d25(void)\n\n{\n  undefined8 errorFilePath;\n  \n  DAT_00127a40 = 1;\n  printErrorMessage(0,errorFilePath,0,0);\n  removeDirectory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_message_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "parse_binary_file_0010551d",
                "puVar1": "pointer",
                "bVar2": "byteVar",
                "puVar3": "pointerVar",
                "pcVar4": "functionPointer",
                "puVar5": "pointerVar2",
                "uVar6": "ulongVar1",
                "uVar7": "ulongVar2",
                "__s": "stringVar",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "uintVar1",
                "iVar11": "intVar1",
                "uVar12": "uintVar2",
                "uVar13": "uintVar3",
                "iVar14": "intVar2",
                "plVar15": "longVar1",
                "uVar16": "ulongVar3",
                "uVar17": "ulongVar9",
                "sVar18": "sizeVar1",
                "pcVar19": "stringVar2",
                "pcVar28": "stringVar3",
                "__ptr": "pointerVar3",
                "__ptr_00": "pointerVar4",
                "uVar20": "ulongVar5",
                "lVar21": "longVar2",
                "uVar22": "ulongVar6",
                "piVar23": "intPointer",
                "uVar24": "ulongVar7",
                "lVar25": "lvalue1",
                "uVar30": "ulongVar8",
                "lVar27": "lvalue2",
                "iVar31": "intVar4",
                "plVar32": "longPointerVar",
                "puVar34": "unaffiliatedPointerVar",
                "ppcVar35": "pointerPointerToCharVar",
                "ppuVar37": "pointerPointerVar",
                "bVar38": "boolVar",
                "sVar26": "sizeVar2",
                "puVar29": "pointerVar5",
                "unaff_R13": "unaffiliatedPointerVar2",
                "in_stack_00000140": "inStackCharVar",
                "in_stack_00000150": "inStackCharVar2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong parse_binary_file_0010551d(void)\n\n{\n  uint *pointer;\n  byte byteVar;\n  undefined *pointerVar;\n  code *functionPointer;\n  undefined8 *pointerVar2;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *stringVar;\n  char charVar;\n  char charVar2;\n  uint uintVar1;\n  int intVar1;\n  uint uintVar2;\n  undefined4 uintVar3;\n  int intVar2;\n  long *longVar1;\n  undefined8 ulongVar3;\n  undefined8 ulongVar9;\n  size_t sizeVar1;\n  char *stringVar2;\n  void *pointerVar3;\n  void *pointerVar4;\n  ulong ulongVar5;\n  long longVar2;\n  ulong ulongVar6;\n  int *intPointer;\n  ulong ulongVar7;\n  long lvalue1;\n  FILE *stringVar_00;\n  size_t sizeVar2;\n  long lvalue2;\n  long *unaff_RBX;\n  char *stringVar3;\n  undefined8 *pointerVar5;\n  ulong ulongVar8;\n  int intVar4;\n  long unaff_RBP;\n  long *longPointerVar;\n  char *pcVar33;\n  undefined4 *unaffiliatedPointerVar;\n  char **pointerPointerToCharVar;\n  long *unaffiliatedPointerVar2;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **pointerPointerVar;\n  bool boolVar;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *inStackCharVar;\n  char cStack0000000000000148;\n  char *inStackCharVar2;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_message_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  pointerVar5 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar2 = compare_strings_00113fb0(), charVar2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lvalue1 = *(long *)(unaff_RBP + 0x40), lvalue1 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      lvalue2 = merge_build_attributes_001163d0();\n      unaff_RBX[2] = lvalue2;\n      if ((lvalue2 == lvalue1) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        unaff_RBX[3] = (long)unaffiliatedPointerVar2;\n        *unaff_RBX = unaff_RBP;\n        unaffiliatedPointerVar2 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lvalue1 = *(long *)(unaff_RBP + 8); lvalue1 != 0; lvalue1 = *(long *)(lvalue1 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; pointerVar5 != (undefined8 *)0x0; pointerVar5 = (undefined8 *)*pointerVar5) {\n    lvalue1 = bfd_get_section_by_name();\n    if (lvalue1 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lvalue1 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sizeVar1 = *(size_t *)(lvalue1 + 0x40);\n      stringVar_00 = fopen((char *)pointerVar5[2],\"w\");\n      if (stringVar_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(pointerVar5[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sizeVar1 != 0) &&\n                (sizeVar2 = fwrite(inStackCharVar,1,sizeVar1,stringVar_00), sizeVar2 != sizeVar1)) {\n          intPointer = __errno_location();\n          pcVar33 = strerror(*intPointer);\n          ulongVar9 = pointerVar5[2];\n          ulongVar3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(ulongVar3,ulongVar9,pcVar33);\n          free(inStackCharVar);\n          fclose(stringVar_00);\n          return 0;\n        }\n        fclose(stringVar_00);\n        free(inStackCharVar);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lvalue1 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lvalue1 != 0) {\n      ulongVar9 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(ulongVar9);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lvalue1 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      ulongVar9 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar9,lvalue1);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      ulongVar5 = 0;\n      for (ulongVar7 = *(ulong *)(in_stack_00000008 + 0x90); ulongVar7 != 0;\n          ulongVar7 = *(ulong *)(ulongVar7 + 8)) {\n        ulongVar6 = *(ulong *)(ulongVar7 + 0x30);\n        ulongVar8 = ulongVar5;\n        ulongVar1 = ulongVar7;\n        ulongVar2 = ulongVar5;\n        if (ulongVar6 != 0) {\n          while ((ulongVar8 = ulongVar1, ulongVar2 != 0 &&\n                 (ulongVar8 = ulongVar7, ulongVar6 <= *(ulong *)(ulongVar5 + 0x30)))) {\n            ulongVar7 = *(ulong *)(ulongVar7 + 8);\n            if (ulongVar7 == 0) goto LAB_00107db8;\n            ulongVar6 = *(ulong *)(ulongVar7 + 0x30);\n            ulongVar1 = ulongVar5;\n            ulongVar2 = ulongVar6;\n          }\n        }\n        ulongVar5 = ulongVar8;\n      }\nLAB_00107db8:\n      if (ulongVar5 == 0) {\n        ulongVar7 = 0x1000;\n      }\n      else {\n        ulongVar5 = *(long *)(ulongVar5 + 0x40) + *(long *)(ulongVar5 + 0x30);\n        ulongVar7 = 0xffffffffffffffff;\n        if (ulongVar5 < 0xfffffffffffff001) {\n          ulongVar7 = ulongVar5 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = ulongVar7;\n      *(ulong *)(lStack0000000000000078 + 0x38) = ulongVar7;\n    }\n  }\n  longPointerVar = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    ulongVar7 = process_debug_info_0010554f();\n    return ulongVar7;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pointerPointerVar = &PTR_sstringVartab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    unaffiliatedPointerVar = puStack0000000000000020;\n    for (lvalue1 = 0x18; lvalue1 != 0; lvalue1 = lvalue1 + -1) {\n      *unaffiliatedPointerVar = 0;\n      unaffiliatedPointerVar = unaffiliatedPointerVar + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointerVar = *pointerPointerVar;\n      lvalue1 = bfd_get_section_by_name();\n      lvalue2 = bfd_get_section_by_name();\n      if ((lvalue1 != 0) && (lvalue2 != 0)) {\n        lvalue1 = *(long *)(lvalue1 + 0x40);\n        pointerVar3 = (void *)xmalloc(lvalue1);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(pointerVar3);\n        }\n        else {\n          ulongVar7 = *(ulong *)(lvalue2 + 0x40);\n          pointerVar4 = (void *)xmalloc(ulongVar7 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uintVar3 = bfd_get_error();\n            bfd_errmsg(uintVar3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)pointerVar4 + ulongVar7) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = pointerVar3; pvVar36 <= (void *)((long)pointerVar3 + lvalue1 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                ulongVar5 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                uintVar3 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lvalue2 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lvalue2;\n                }\n                else {\n                  ulongVar6 = (ulongVar5 & 0xffffffff) + lStack0000000000000088;\n                  if (ulongVar6 < ulongVar7) {\n                    pcVar33 = (char *)((long)pointerVar4 + ulongVar6);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar1 = strlen(pcVar33);\n                      if (((sizeVar1 == 0) || (stringVar3 = pcVar33 + (sizeVar1 - 1), *stringVar3 != '\\')) ||\n                         ((ulong)((long)pointerVar3 + lvalue1) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *stringVar3 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      intVar1 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      ulongVar5 = (ulong)(uint)(intVar1 + (int)lStack0000000000000088);\n                      if (ulongVar7 <= ulongVar5) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)pointerVar4 + ulongVar5,0);\n                      *stringVar3 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    ulongVar9 = *unaff_R14;\n                    stringVar3 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,stringVar3,ulongVar9,pointerVar,((long)pvVar36 - (long)pointerVar3) / 0xc);\nLAB_001077fb:\n                    update_data_in_array_001088ae((ulong)byteVar,uintVar3,lvalue2,pcVar33);\n                    charVar2 = analyze_debug_record_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(pointerVar3);\n                      free(pointerVar4);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar9 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,ulongVar9,pointerVar,((long)pvVar36 - (long)pointerVar3) / 0xc,\n                            ulongVar5 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)pointerVar3) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(pointerVar3);\n              goto LAB_001058eb;\n            }\n          }\n          free(pointerVar4);\n          free(pointerVar3);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pointerPointerVar = pointerPointerVar + 2;\n    } while (pointerPointerVar != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = process_debug_data_0010c892(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lvalue1 = 0;\n      for (longVar1 = longPointerVar; longVar1 < longPointerVar + in_stack_00000010; longVar1 = longVar1 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lvalue1 != 0) || (lvalue1 = initialize_data_structure_00112894(), lvalue1 != 0)) &&\n             ((inStackCharVar2 != (char *)0x0 && (*inStackCharVar2 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            stringVar3 = inStackCharVar2;\n            while (((*stringVar3 != '\\0' && (sizeVar1 = strlen(stringVar3), stringVar3[sizeVar1 - 1] == '\\')) &&\n                   (longVar1 + 1 < longPointerVar + in_stack_00000010))) {\n              stringVar2 = (char *)xstrdup(stringVar3);\n              sizeVar1 = strlen(stringVar2);\n              stringVar2[sizeVar1 - 1] = '\\0';\n              stringVar3 = (char *)concat(stringVar2,*(undefined8 *)(longVar1[1] + 8),0);\n              free(stringVar2);\n              free(pcVar33);\n              longVar1 = longVar1 + 1;\n              pcVar33 = stringVar3;\n            }\n            update_data_in_array_001088ae(uStack0000000000000158,(int)sStack000000000000015a,inStackCharVar,\n                         stringVar3);\n            in_stack_00000018 = analyze_debug_record_0011173a(puStack0000000000000020,lvalue1,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      cleanup_memory_00108863();\n      if ((lvalue1 != 0) && (charVar2 = process_debug_data_0010c892(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      inStackCharVar = (char *)0x0;\n      in_stack_000000c0 = longPointerVar;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      pointerVar5 = (undefined8 *)&stack0x00000148;\n      for (lvalue1 = 0x22; lvalue1 != 0; lvalue1 = lvalue1 + -1) {\n        *(undefined4 *)pointerVar5 = 0;\n        pointerVar5 = (undefined8 *)((long)pointerVar5 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lvalue1 = longPointerVar[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        lvalue2 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar9 = dcgettext(0,pcVar33,5);\n          print_error_message_00119ed0(ulongVar9);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lvalue1 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lvalue2) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar1 = strcmp(pcVar33,\".bb\");\n              if (intVar1 == 0) {\n                charVar = start_debug_block_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar1 = strcmp(pcVar33,\".eb\");\n              if (intVar1 == 0) {\n                charVar = close_debug_block_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar1 = strcmp(pcVar33,\".bf\");\n              if (intVar1 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lvalue2 = parse_coff_type_0010dac0();\n                  if ((lvalue2 == 0) ||\n                     (charVar2 = record_debug_function_0010bc80(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar1 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar1 = in_stack_00000118 - 1;\n                    }\n                    lvalue1 = *(long *)(*(long *)(lvalue1 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar4 = _uStack0000000000000048[4];\n                      if (intVar4 == 0) break;\n                      charVar = record_line_debug_info_0010bf86(puStack0000000000000020,intVar1 + intVar4,\n                                           *(long *)(_uStack0000000000000048 + 6) + lvalue1);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar1 = strcmp(pcVar33,\".ef\");\n                if (intVar1 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = end_function_debugging_0010be1a(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar9 = dcgettext(0,pcVar33,5);\n              print_error_message_00119ed0(ulongVar9);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar2 = parse_coff_type_0010dac0();\n          if (longVar2 == 0) goto LAB_00105981;\n          charVar = process_debug_record_00112a33(&stack0x00000140,lvalue1,lvalue2);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        longPointerVar = DAT_001278d0 + in_stack_00000010;\n        longVar1 = DAT_001278d0;\n        do {\n          uintVar1 = *(uint *)(*longVar1 + 0x18);\n          if ((uintVar1 & 0x1000000) != 0) {\n            *(uint *)(*longVar1 + 0x18) = uintVar1 & 0xfeffffff;\n          }\n          longVar1 = longVar1 + 1;\n        } while (longPointerVar != longVar1);\n      }\n    }\n    else {\n      for (lvalue1 = *(long *)(in_stack_00000008 + 0x90); lvalue1 != 0; lvalue1 = *(long *)(lvalue1 + 8)\n          ) {\n        if (*(long *)(lvalue1 + 0xe8) != 0) {\n          pointer = (uint *)(*(long *)(lvalue1 + 0xe8) + 0x18);\n          *pointer = *pointer | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar1 = bfd_get_error();\n      if (intVar1 != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    lvalue1 = xmalloc();\n    longPointerVar = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278c8 = lvalue1;\n    if (in_stack_00000010 == 0) {\n      ulongVar7 = 0;\n    }\n    else {\n      ulongVar7 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        intVar1 = DAT_001279c0;\n        longVar1 = (long *)longPointerVar[_in_stack_00000018];\n        functionPointer = (code *)longVar1[4];\n        uintVar1 = *(uint *)(longVar1 + 3);\n        pcVar33 = (char *)longVar1[1];\n        stringVar3 = pcVar33;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          intVar4 = 0;\n          pointerVar5 = DAT_001279c8;\n          while( true ) {\n            if ((intVar1 <= intVar4) || (stringVar2 = (char *)pointerVar5[5], stringVar2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (stringVar2 != \"\") break;\nLAB_0010750b:\n            intVar4 = intVar4 + 1;\n          }\n          intVar2 = strcmp(stringVar2,pcVar33);\n          if (intVar2 != 0) {\n            pointerVar5 = (undefined8 *)*pointerVar5;\n            goto LAB_0010750b;\n          }\n          free(stringVar2);\n          ulongVar5 = ulongVar7 + 1;\n          pointerVar5[5] = \"\";\n          ulongVar3 = extract_section_info_0011a2e0(pointerVar5);\n          ulongVar9 = DAT_001278f0;\n          *(undefined8 *)(lvalue1 + ulongVar7 * 8) = ulongVar3;\n          lvalue2 = htab_elements(ulongVar9);\n          if ((lvalue2 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *pcVar33;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lvalue2 = unaff_R14[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lvalue2 = htab_elements(DAT_001278f0);\n        ulongVar5 = ulongVar7;\n        if ((lvalue2 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (intVar1 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), intVar1 == 0)) {\n            ulongVar9 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(ulongVar9);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        inStackCharVar = pcVar33;\n        lvalue2 = htab_find(DAT_001278f0);\n        if (((lvalue2 == 0) || (stringVar3 = *(char **)(lvalue2 + 8), pcVar33 == stringVar3)) &&\n           (stringVar3 = pcVar33, pointerPointerToCharVar = DAT_001278f8, (uintVar1 & 0x100) != 0)) {\n          for (; pointerPointerToCharVar != (char **)0x0; pointerPointerToCharVar = (char **)pointerPointerToCharVar[3]) {\n            intVar1 = strcmp(*pointerPointerToCharVar,pcVar33);\n            if (intVar1 == 0) {\n              stringVar3 = pointerPointerToCharVar[1];\n              break;\n            }\n          }\n        }\n        longVar1[1] = (long)stringVar3;\n        charVar2 = *stringVar3;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127928;\n        lvalue2 = unaff_R14[1];\n        if (*(char *)(lvalue2 + 0x1c) == charVar2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uintVar1 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                ((*(byte *)(longVar1[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            stringVar3 = stringVar3 + 1;\n            longVar1[1] = (long)stringVar3;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            stringVar3 = stringVar3 + 1;\n            longVar1[1] = (long)stringVar3;\n            sizeVar1 = strlen(stringVar3);\n            lvalue2 = sizeVar1 + 2;\n            goto LAB_001066bc;\n          }\n          *stringVar3 = charVar2;\n          longVar1[1] = (long)stringVar3;\n          ulongVar7 = ulongVar5;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            ulongVar7 = ulongVar5;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sizeVar1 = strlen(stringVar3);\n            sizeVar2 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sizeVar2 + sizeVar1 + 1);\n            stringVar2 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127928;\n            if ((*(char *)(lvalue2 + 0x1c) != '\\0') && (charVar2 != *(char *)(lvalue2 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar1 = strlen(stringVar3);\n            lvalue2 = sizeVar1 + 2;\n            if (pcVar33 == (char *)0x0) {\n              stringVar2 = (char *)xmalloc(lvalue2);\n            }\n            else {\nLAB_001066bc:\n              sizeVar1 = strlen(pcVar33);\n              stringVar2 = (char *)xmalloc(sizeVar1 + lvalue2);\n            }\n            pcVar33 = stringVar2 + 1;\n            *stringVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          stringVar = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127928);\n            sizeVar1 = strlen(stringVar);\n            pcVar33 = pcVar33 + sizeVar1;\n          }\n          strcpy(pcVar33,stringVar3);\n          longVar1[1] = (long)stringVar2;\n          stringVar3 = stringVar2;\n          ulongVar7 = ulongVar5;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uintVar1 & 0x20) == 0) &&\n           (((uintVar1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(longVar1[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar1 & 0x82) != 0 || ((*(byte *)(longVar1[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar1 = bfd_decode_symclass(longVar1), intVar1 == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              lvalue2 = htab_find();\n              if (lvalue2 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              inStackCharVar = stringVar3;\n              htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar1 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(longVar1[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar1 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lvalue2 = *(long *)(longVar1[4] + 0xd0), lvalue2 == 0)) ||\n                 (*(long *)(lvalue2 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVar2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          lvalue2 = htab_find();\n          if (lvalue2 != 0) {\nLAB_0010687f:\n            ulongVar9 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(ulongVar9);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          inStackCharVar = stringVar3;\n          htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            inStackCharVar = stringVar3;\n            htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lvalue2 = htab_find();\n          if (lvalue2 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uintVar1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            lvalue2 = htab_find();\n            if (lvalue2 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            inStackCharVar = stringVar3;\n            htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = process_section_001159d0(longVar1[4]);\n          if (charVar2 == '\\0') {\n            if (((uintVar1 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar1 & 0x82) != 0) {\n                charVar2 = check_pattern_match_00115d70(stringVar3);\n                if ((charVar2 == '\\0') &&\n                   ((lvalue2 = htab_elements(DAT_001279f8), lvalue2 == 0 ||\n                    (charVar2 = check_pattern_match_00115d70(stringVar3), charVar2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uintVar2 = *(uint *)(longVar1 + 3), (uintVar2 & 0x200000) != 0)) ||\n                       (lvalue2 = *longVar1, lvalue2 == 0)) ||\n                      ((*(int *)(*(long *)(lvalue2 + 8) + 8) != 5 || (*(long *)(lvalue2 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)longVar1 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar2 = *(uint *)(longVar1 + 3);\n                }\n                *(uint *)(longVar1 + 3) = uintVar2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar1 & 1) != 0) && (charVar2 = check_pattern_match_00115d70(stringVar3), charVar2 != '\\0')) {\n                *(uint *)(longVar1 + 3) = *(uint *)(longVar1 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVar2 = check_pattern_match_00115d70(stringVar3), charVar2 != '\\0')) {\n                *(uint *)(longVar1 + 3) = *(uint *)(longVar1 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lvalue1 + ulongVar7 * 8) = longVar1;\n            ulongVar7 = ulongVar7 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      pointerVar5 = DAT_001279c8;\n      intVar1 = DAT_001279c0;\n      for (lvalue2 = 0; lvalue2 < intVar1; lvalue2 = lvalue2 + 1) {\n        pcVar33 = (char *)pointerVar5[5];\n        if (pcVar33 == (char *)0x0) {\n          longVar2 = ulongVar7 * 8;\n          ulongVar7 = ulongVar7 + 1;\n          ulongVar9 = extract_section_info_0011a2e0(pointerVar5,in_stack_00000008);\n          *(undefined8 *)(lvalue1 + longVar2) = ulongVar9;\n          intVar1 = DAT_001279c0;\n        }\n        else if (pcVar33 != \"\") {\n          ulongVar9 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(ulongVar9,pcVar33);\n        }\n        pointerVar5 = (undefined8 *)*pointerVar5;\n      }\n    }\n    boolVar = DAT_001279a0 != '\\0';\n    *(undefined8 *)(lvalue1 + ulongVar7 * 8) = 0;\n    if ((boolVar) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar1 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar1 != 5) && (intVar1 != 2)) {\n        ulongVar9 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,in_stack_00000008,0,ulongVar3,ulongVar9);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = extract_and_process_binary_data_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      lvalue1 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lvalue2 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lvalue1 == 0) || (lvalue2 == 0)) ||\n          (charVar2 = bfd_set_section_size(lvalue1,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(lvalue2,inStackCharVar), charVar2 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar9 = dcgettext(0,pcVar33,5);\n        print_error_message_001126c0(0,in_stack_00000008,0,ulongVar9);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lvalue1 + 0x7c) = 2;\n      *(undefined4 *)(lvalue2 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (in_stack_00000008,lvalue1,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (in_stack_00000008,lvalue2,in_stack_000000e0,0,inStackCharVar),\n         charVar2 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = ulongVar7 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lvalue1 = htab_elements(DAT_00127a18);\n    if (((lvalue1 != 0) ||\n        (((((((lvalue1 = htab_elements(DAT_00127a28), lvalue1 != 0 ||\n              (lvalue1 = htab_elements(DAT_00127a08), lvalue1 != 0)) ||\n             (lvalue1 = htab_elements(DAT_00127a00), lvalue1 != 0)) ||\n            ((lvalue1 = htab_elements(DAT_001279f8), lvalue1 != 0 ||\n             (lvalue1 = htab_elements(DAT_001279f0), lvalue1 != 0)))) ||\n           (lvalue1 = htab_elements(DAT_001278f0), lvalue1 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,process_binary_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,reverse_section_contents_00116110,in_stack_00000008);\n  for (pointerVar5 = DAT_001279e0; pointerVar2 = DAT_001279d8, pointerVar5 != (undefined8 *)0x0;\n      pointerVar5 = (undefined8 *)*pointerVar5) {\n    charVar2 = bfd_set_section_contents(in_stack_00000008,pointerVar5[5],pointerVar5[4],0,pointerVar5[3]);\n    if (charVar2 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,pointerVar5[5],0);\n      return 0;\n    }\n  }\n  for (; pointerVar2 != (undefined8 *)0x0; pointerVar2 = (undefined8 *)*pointerVar2) {\n    ulongVar9 = *(undefined8 *)(pointerVar2[5] + 0x60);\n    charVar2 = bfd_set_section_contents(in_stack_00000008,ulongVar9,pointerVar2[4],0,pointerVar2[3]);\n    if (charVar2 == '\\0') {\n      print_error_message_001126c0(0,in_stack_00000008,ulongVar9,0);\n      return 0;\n    }\n  }\n  if (unaffiliatedPointerVar2 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      ulongVar9 = *unaff_R14;\n      ulongVar3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(ulongVar3,ulongVar9);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lvalue1 = DAT_00127a30, charVar2 != '\\0')) {\n      uintVar1 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      ulongVar7 = (ulong)uintVar1;\n      if ((char)uintVar1 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return ulongVar7;\n        }\n        charVar2 = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        ulongVar5 = DAT_00127930;\n        if (charVar2 != '\\0') {\n          return ulongVar7;\n        }\n        ulongVar9 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(ulongVar9,ulongVar5);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar9 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(ulongVar9);\n          return ulongVar7;\n        }\n        ulongVar9 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(ulongVar9);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return ulongVar7;\n      }\n      ulongVar9 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar9);\n    }\n    else {\n      ulongVar9 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,in_stack_00000008,0,ulongVar9,lvalue1);\n    }\n    return 0;\n  }\n  longPointerVar = (long *)0x0;\n  pointerVar5 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (pointerVar5 == (undefined8 *)0x0) {\n      do {\n        longPointerVar = (long *)unaffiliatedPointerVar2[3];\n        free((void *)unaffiliatedPointerVar2[1]);\n        free(unaffiliatedPointerVar2);\n        unaffiliatedPointerVar2 = longPointerVar;\n      } while (longPointerVar != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(pointerVar5[0x1a] + 4) == 7)) &&\n       (charVar2 = compare_strings_00113fb0(*pointerVar5,\".gnu.build.attributes\"), charVar2 != '\\0')) {\n      if (longPointerVar == (long *)0x0) {\n        longPointerVar = unaffiliatedPointerVar2;\n      }\n      longVar1 = unaffiliatedPointerVar2;\n      if (*(undefined8 **)(*longPointerVar + 0x60) == pointerVar5) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (longPointerVar[1] != 0) {\n          charVar2 = bfd_set_section_contents(in_stack_00000008,pointerVar5,longPointerVar[1],0,longPointerVar[2]);\n          if (charVar2 == '\\0') {\n            ulongVar9 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_message_001126c0(0,in_stack_00000008,pointerVar5,ulongVar9);\n            return 0;\n          }\n          longPointerVar = (long *)longPointerVar[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          longPointerVar = longVar1;\n          if (*(undefined8 **)(*longVar1 + 0x60) == pointerVar5) goto LAB_0010625f;\n          longPointerVar = (long *)longVar1[3];\n          longVar1 = longPointerVar;\n        } while (longPointerVar != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      ulongVar9 = dcgettext(0,pcVar33,5);\n      print_error_message_001126c0(0,in_stack_00000008,pointerVar5,ulongVar9);\n    }\nLAB_001061be:\n    pointerVar5 = (undefined8 *)pointerVar5[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "parse_binary_file_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input"
            },
            "code": "\nvoid hashString_00108800(undefined8 *input)\n\n{\n  htab_hash_string(*input);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "update_debug_record_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextPtr",
                "cVar2": "result",
                "__ptr": "currentPtr"
            },
            "code": "\nundefined updateDebugRecord_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextPtr;\n  char result;\n  undefined8 *currentPtr;\n  \n  currentPtr = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (currentPtr == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    result = debug_record_variable_0010c05d(param1,currentPtr[1],currentPtr[2],*(undefined4 *)(currentPtr + 3),currentPtr[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    nextPtr = (undefined8 *)*currentPtr;\n    free(currentPtr);\n    currentPtr = nextPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "update_debug_record_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_pattern_matches_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "stackBase",
                "puVar4": "result",
                "puVar5": "currentResult",
                "unaff_R13": "patternArray",
                "uVar1": "arraySize",
                "lVar2": "currentValue",
                "cVar3": "patternMatched",
                "uVar6": "currentIndex"
            },
            "code": "\nvoid processPatternMatches_001082df(void)\n\n{\n  uint arraySize;\n  long currentValue;\n  char patternMatched;\n  long baseAddress;\n  undefined8 *result;\n  undefined8 *currentResult;\n  long stackBase;\n  ulong currentIndex;\n  undefined8 *patternArray;\n  \n  arraySize = *(uint *)(baseAddress + 0x78);\n  if (DAT_00127a48 == 7) {\n    result = patternArray;\n    for (currentIndex = 0; currentIndex != arraySize; currentIndex = currentIndex + 1) {\n      currentResult = result;\n      if (((*(long **)patternArray[currentIndex] != (long *)0x0) &&\n          (currentValue = **(long **)patternArray[currentIndex], currentValue != 0)) &&\n         (patternMatched = check_pattern_match_00115d70(*(undefined8 *)(currentValue + 8),DAT_00127a28), patternMatched != '\\0')) {\n        currentResult = result + 1;\n        *result = patternArray[currentIndex];\n      }\n      result = currentResult;\n    }\n    *result = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(stackBase + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_pattern_matches_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_print_file_00114d60",
                "param_1": "file_path",
                "iVar1": "end_of_file_flag",
                "piVar2": "error_location",
                "pcVar3": "error_message",
                "uVar4": "translated_error",
                "__stream": "file_pointer",
                "uVar5": "allocated_memory",
                "sVar6": "bytes_read",
                "lVar7": "total_bytes_read",
                "lVar8": "allocated_memory_size"
            },
            "code": "\nvoid read_and_print_file_00114d60(long file_path)\n\n{\n  int end_of_file_flag;\n  int *error_location;\n  char *error_message;\n  undefined8 translated_error;\n  FILE *file_pointer;\n  undefined8 allocated_memory;\n  size_t bytes_read;\n  long total_bytes_read;\n  long allocated_memory_size;\n  \n  file_pointer = fopen(*(char **)(file_path + 0x10),\"r\");\n  if (file_pointer == (FILE *)0x0) {\n    error_location = __errno_location();\n    error_message = strerror(*error_location);\n    allocated_memory = *(undefined8 *)(file_path + 0x10);\n    translated_error = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit_00119dd0(translated_error,allocated_memory,error_message);\n  }\n  allocated_memory_size = 0x1000;\n  total_bytes_read = 0;\n  allocated_memory = xmalloc(0x1000);\n  *(undefined8 *)(file_path + 0x20) = allocated_memory;\n  while( true ) {\n    end_of_file_flag = feof(file_pointer);\n    if (end_of_file_flag != 0) {\n      *(long *)(file_path + 0x18) = total_bytes_read;\n      fclose(file_pointer);\n      return;\n    }\n    if (total_bytes_read == allocated_memory_size) {\n      allocated_memory_size = total_bytes_read * 2;\n      allocated_memory = xrealloc(*(undefined8 *)(file_path + 0x20),allocated_memory_size);\n      *(undefined8 *)(file_path + 0x20) = allocated_memory;\n    }\n    bytes_read = fread((void *)(*(long *)(file_path + 0x20) + total_bytes_read),1,allocated_memory_size - total_bytes_read,file_pointer);\n    end_of_file_flag = ferror(file_pointer);\n    if (end_of_file_flag != 0) break;\n    total_bytes_read = total_bytes_read + bytes_read;\n  }\n  allocated_memory = *(undefined8 *)(file_path + 0x10);\n  translated_error = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit_00119dd0(translated_error,allocated_memory);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_print_file_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "find_section_and_print_error_00108808",
                "unaff_RBP": "stackFramePointer",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid findSectionAndPrintError_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  long stackFramePointer;\n  \n  sectionAddress = *(undefined8 *)(stackFramePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,sectionAddress);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "find_section_and_print_error_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "lineNum",
                "unaff_R13": "msg",
                "unaff_R14": "linePtr",
                "unaff_R15": "charPtr",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "result"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *pbVar5;\n  int lineNum;\n  byte *pbVar6;\n  undefined8 msg;\n  byte *pbVar7;\n  byte *linePtr;\n  byte *charPtr;\n  undefined8 filename;\n  undefined8 *result;\n  \n  *linePtr = 0;\nLAB_00114520:\n  linePtr = linePtr + 1;\n  do {\n    bVar4 = *linePtr;\n    pbVar7 = linePtr;\n    if (bVar4 == 10) {\n      *linePtr = 0;\n      if (linePtr[1] == 0xd) {\n        pbVar7 = linePtr + 1;\n        pbVar5 = linePtr + 2;\n      }\n      else {\n        pbVar5 = linePtr + 1;\n      }\n    }\n    else if ((char)bVar4 < '\\v') {\n      if (bVar4 != 0) goto LAB_00114520;\n      pbVar5 = linePtr + 1;\n    }\n    else {\n      if (bVar4 != 0xd) break;\n      *linePtr = 0;\n      pbVar5 = linePtr + 1;\n      if (linePtr[1] == 10) {\n        pbVar5 = linePtr + 2;\n        pbVar7 = linePtr + 1;\n      }\n    }\n    bVar4 = *charPtr;\n    while ((bVar4 == 0x20 || (pbVar6 = charPtr, bVar4 == 9))) {\n      pbVar6 = charPtr + 1;\n      charPtr = charPtr + 1;\n      bVar4 = *pbVar6;\n    }\n    do {\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = pbVar6[1];\n      pbVar6 = pbVar6 + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      bVar4 = pbVar6[1];\n      if ((((((bVar4 == 9) || (bVar4 == 0x20)) &&\n            ((bVar4 = pbVar6[2], bVar4 == 9 || (bVar4 == 0x20)))) &&\n           ((bVar4 = pbVar6[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n          ((bVar4 = pbVar6[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n         ((bVar4 = pbVar6[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n        bVar4 = pbVar6[6];\n        pbVar3 = pbVar6 + 6;\n        if ((bVar4 == 9) || (bVar4 == 0x20)) {\n          do {\n            do {\n              bVar4 = pbVar3[1];\n              pbVar3 = pbVar3 + 1;\n            } while (bVar4 == 0x20);\n          } while (bVar4 == 9);\n        }\n      }\n      if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(uVar1,filename,lineNum);\n      }\n    }\nLAB_00114599:\n    *pbVar6 = 0;\n    if (charPtr < pbVar6) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = charPtr;\n    }\n    lineNum = lineNum + 1;\n    linePtr = pbVar5;\n    charPtr = pbVar5;\n    if (pbVar7[1] == 0) {\n      *result = msg;\n      return;\n    }\n  } while( true );\n  if (bVar4 == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "errorMessage",
                "local_20": "scanResults"
            },
            "code": "\nvoid checkAndPrintError_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 errorMessage;\n  char *scanResults [2];\n  \n  bfd_scan_vma(address,scanResults,0);\n  if (*scanResults[0] == '\\0') {\n    return;\n  }\n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "flag",
                "in_RAX": "funcAddress"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 data,long ptr,uint flag)\n\n{\n  long funcAddress;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(ptr + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(ptr + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(funcAddress + 0x380) + 0x78))(data,flag != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_data_recursive_00113a4d",
                "param_1": "input_data_1",
                "param_2": "input_data_2",
                "param_3": "data_structure",
                "cVar1": "check_result",
                "uVar2": "update_data_result",
                "puVar3": "data_pointer",
                "auVar4": "check_result_array"
            },
            "code": "\nundefined8\nprocess_data_recursive_00113a4d(undefined8 input_data_1,undefined8 input_data_2,long data_structure,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  char check_result;\n  undefined8 update_data_result;\n  undefined8 *data_pointer;\n  undefined check_result_array [16];\n  \n  check_result = check_and_process_data_00112502(input_data_1,input_data_2,*(undefined8 *)(data_structure + 0x18));\n  if ((check_result != '\\0') &&\n     (((*(long *)(data_structure + 0x28) == 0 && (*(long *)(data_structure + 8) != 0)) ||\n      (check_result = FUNC_0010ec73(input_data_2,*(undefined8 *)(data_structure + 0x18)), check_result != '\\0')))) {\n    if (*(undefined8 **)(data_structure + 0x28) != (undefined8 *)0x0) {\n      for (data_pointer = (undefined8 *)**(undefined8 **)(data_structure + 0x28); data_pointer != (undefined8 *)0x0;\n          data_pointer = (undefined8 *)*data_pointer) {\n        check_result = process_data_001135a5(input_data_1,input_data_2,data_pointer);\n        if (check_result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (data_pointer = *(undefined8 **)(data_structure + 0x10); data_pointer != (undefined8 *)0x0;\n        data_pointer = (undefined8 *)*data_pointer) {\n      check_result = process_data_recursive_00113a4d(input_data_1,input_data_2,data_pointer);\n      if (check_result == '\\0') {\n        return 0;\n      }\n    }\n    check_result_array = check_and_process_data_00112502(input_data_1,input_data_2,*(undefined8 *)(data_structure + 0x20));\n    if (check_result_array[0] != '\\0') {\n      if ((*(long *)(data_structure + 0x28) == 0) && (*(long *)(data_structure + 8) != 0)) {\n        return check_result_array._0_8_;\n      }\n      update_data_result = update_data_0010ed2c(input_data_2,*(undefined8 *)(data_structure + 0x20),check_result_array._8_8_,param_5);\n      return update_data_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_00112502",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_recursive_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "return_value",
                "unaff_RBX": "memory_address",
                "param_7": "return_value"
            },
            "code": "\nundefined8 release_memory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_address;\n  undefined8 return_value;\n  \n  return_value = return_value;\n  free(memory_address);\n  return return_value;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010e9a0",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_0010922b",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "allocate_and_initialize_data_00113b71",
                "param_1": "data_value",
                "lVar1": "allocated_data"
            },
            "code": "\nlong allocate_and_initialize_data_00113b71(long data_value)\n\n{\n  long allocated_data;\n  \n  if (data_value != 0) {\n    allocated_data = allocate_and_initialize_data_00113b71_00112904(0x14,0);\n    if (allocated_data == 0) {\n      allocated_data = 0;\n    }\n    else {\n      *(long *)(allocated_data + 0x10) = data_value;\n    }\n    return allocated_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_00109dfe",
                "param_1": "parameter",
                "lVar1": "current_value",
                "local_40": "formatted_string"
            },
            "code": "\nvoid initialize_or_increment_00109dfe(long parameter)\n\n{\n  long current_value;\n  char formatted_string [40];\n  \n  if (*(long *)(parameter + 0x70) != 0) {\n    initialize_data_structure_00109cf4(parameter,*(long *)(parameter + 0x70),0);\n    return;\n  }\n  current_value = *(long *)(parameter + 0x68);\n  *(long *)(parameter + 0x68) = current_value + 1;\n  *(long *)(parameter + 0x70) = current_value;\n  sprintf(formatted_string,\"%ld=%ld\",current_value,current_value);\n  initialize_data_structure_00109b52(parameter,formatted_string,current_value,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_if_valid_00109bbb",
                "param_1": "structAddress",
                "__s": "stringPointer"
            },
            "code": "\nbool appendSemicolonIfValid_00109bbb(long structAddress)\n\n{\n  char *stringPointer;\n  size_t sVar1;\n  \n  if (*(long *)(structAddress + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(structAddress + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      sVar1 = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + sVar1) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_if_valid_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "concatenate_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "ptrStruct",
                "lVar2": "ptrArray",
                "__ptr": "ptrElement",
                "pcVar3": "strElement",
                "sVar4": "length1",
                "sVar5": "length2",
                "pcVar6": "resultString",
                "uVar7": "returnValue",
                "lVar8": "resultSize",
                "uVar9": "count",
                "uVar10": "elementIndex"
            },
            "code": "\nundefined8 concatenateStrings_0010ae0e(long input)\n\n{\n  long ptrStruct;\n  long ptrArray;\n  void *ptrElement;\n  char *strElement;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  undefined8 returnValue;\n  long resultSize;\n  uint count;\n  ulong elementIndex;\n  \n  returnValue = 0;\n  ptrStruct = *(long *)(input + 0x60);\n  if (((ptrStruct != 0) && (*(char **)(ptrStruct + 8) != (char *)0x0)) &&\n     (resultString = *(char **)(ptrStruct + 0x20), resultString != (char *)0x0)) {\n    length1 = strlen(*(char **)(ptrStruct + 8));\n    length2 = strlen(resultString);\n    ptrArray = *(long *)(ptrStruct + 0x28);\n    if (ptrArray == 0) {\n      resultSize = length1 + length2 + 10;\n      elementIndex = 0;\n    }\n    else {\n      resultSize = length1 + length2 + 0x1e;\n      elementIndex = 0;\n      while( true ) {\n        resultString = *(char **)(ptrArray + elementIndex * 8);\n        if (resultString == (char *)0x0) break;\n        length1 = strlen(resultString);\n        elementIndex = (ulong)((int)elementIndex + 1);\n        resultSize = resultSize + length1;\n      }\n    }\n    if (*(char **)(ptrStruct + 0x30) != (char *)0x0) {\n      length1 = strlen(*(char **)(ptrStruct + 0x30));\n      resultSize = resultSize + length1;\n    }\n    if (*(char **)(ptrStruct + 0x38) != (char *)0x0) {\n      length1 = strlen(*(char **)(ptrStruct + 0x38));\n      resultSize = resultSize + length1;\n    }\n    resultString = (char *)xmalloc(resultSize);\n    ptrStruct = *(long *)(input + 0x60);\n    strcpy(resultString,*(char **)(ptrStruct + 8));\n    if (*(long *)(ptrStruct + 0x28) != 0) {\n      count = 0;\n      length1 = strlen(resultString);\n      sprintf(resultString + length1,\"!%u,\",elementIndex);\n      while( true ) {\n        ptrStruct = *(long *)(input + 0x60);\n        elementIndex = (ulong)count;\n        ptrElement = *(void **)(ptrStruct + 0x28);\n        strElement = *(char **)((long)ptrElement + elementIndex * 8);\n        if (strElement == (char *)0x0) break;\n        count = count + 1;\n        strcat(resultString,strElement);\n        free(*(void **)(*(long *)(ptrStruct + 0x28) + elementIndex * 8));\n      }\n      free(ptrElement);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    ptrStruct = *(long *)(input + 0x60);\n    strcat(resultString,*(char **)(ptrStruct + 0x20));\n    free(*(void **)(ptrStruct + 0x20));\n    ptrStruct = *(long *)(input + 0x60);\n    *(undefined8 *)(ptrStruct + 0x20) = 0;\n    if (*(char **)(ptrStruct + 0x30) != (char *)0x0) {\n      strcat(resultString,*(char **)(ptrStruct + 0x30));\n      free(*(void **)(ptrStruct + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    length1 = strlen(resultString);\n    ptrStruct = *(long *)(input + 0x60);\n    *(undefined2 *)(resultString + length1) = 0x3b;\n    strElement = *(char **)(ptrStruct + 0x38);\n    if (strElement != (char *)0x0) {\n      strcpy(resultString + length1 + 1,strElement);\n      free(*(void **)(ptrStruct + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    ptrStruct = *(long *)(input + 0x60);\n    *(char **)(ptrStruct + 8) = resultString;\n    returnValue = CONCAT71((int7)((ulong)ptrStruct >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "strcat",
                "strcpy",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_data_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "output",
                "puVar4": "ptr1",
                "puVar5": "ptr2"
            },
            "code": "\nundefined8 processData_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int index;\n  char result;\n  undefined8 output;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    result = reverse_and_improve_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = process_and_store_data_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    result = reverse_and_improve_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (result != '\\0') {\n      output = format_and_process_data_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    result = reverse_and_improve_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (result != '\\0') {\n      output = format_and_process_data_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(data + 0x20);\n    index = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    result = check_and_process_data_00112502(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((result != '\\0') && (result = reverse_and_improve_00112c1f(input1,input2,*ptr2,0), result != '\\0')) &&\n       (result = process_data_0010eafe(input2,output,index == 2), result != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        result = reverse_and_improve_00112c1f(input1,input2,ptr1[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = process_and_send_data_0010ebb0(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          output = get_status_00108f05(input2);\n          return output;\n        }\n        result = process_data_recursive_00113a4d(input1,input2,ptr2);\n        if (result == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    output = format_and_process_data_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = process_and_free_data_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    result = reverse_and_improve_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (result != '\\0') {\n      output = create_edited_data_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010e842",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112502",
                "FUN_0010e918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_data_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = reverse_and_improve_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_store_data_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = reverse_and_improve_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = format_and_process_data_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = reverse_and_improve_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = format_and_process_data_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = check_and_process_data_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = reverse_and_improve_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_data_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = reverse_and_improve_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_send_data_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_status_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = format_and_process_data_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_data_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = reverse_and_improve_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = create_edited_data_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = generate_formatted_string_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = generate_formatted_string_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = generate_formatted_string_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_architecture_compatibility_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = check_function_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = check_function_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = check_function_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_debug_info_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_in_array_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = analyze_debug_record_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_data_structure_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_in_array_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = analyze_debug_record_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_debug_block_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = close_debug_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_function_debugging_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = extract_section_info_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = extract_section_info_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = extract_and_process_binary_data_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_contents_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_message_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_build_attributes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "printf",
                "bfd_set_file_flags",
                "bfd_get_arch",
                "bfd_set_start_address",
                "dcgettext",
                "bfd_get_mach",
                "FUN_001152b6"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ae0e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "reverse_and_improve_code_0010b0fa",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "variable1",
                "iVar2": "variable2",
                "pcVar3": "pointerChar",
                "plVar4": "pointerLong",
                "pcVar5": "pointerChar2",
                "sVar6": "size",
                "__ptr": "pointer",
                "lVar7": "longVar",
                "local_40": "localArray"
            },
            "code": "\n\n\nchar * reverseAndImproveCode_0010b0fa(undefined8 param1,undefined8 param2,uint *param3,long param4,\n                   undefined *param5)\n\n{\n  uint variable1;\n  int variable2;\n  char *pointerChar;\n  long *pointerLong;\n  char *pointerChar2;\n  size_t size;\n  void *pointer;\n  long longVar;\n  undefined localArray [16];\n  \n  if (param5 != (undefined *)0x0) {\n    *param5 = 0;\n  }\n  while( true ) {\n    variable1 = *param3;\n    if (0x29 < variable1) break;\n    if (0x17 < variable1) {\n      switch(variable1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pointerChar = (char *)reverseAndImproveCode_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),0,0);\n        if (pointerChar != (char *)0x0) {\n          switch(*param3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pointerChar = (char *)allocate_and_initialize_data_00113b4a(pointerChar);\n            return pointerChar;\n          case 0x1b:\n            pointerChar = (char *)allocate_and_initialize_data_00113b71(pointerChar);\n            return pointerChar;\n          default:\n                    \n            abort();\n          case 0x22:\n            pointerChar = (char *)allocate_or_return_ptr_00113d3a(pointerChar);\n            return pointerChar;\n          case 0x23:\n            pointerChar = (char *)allocate_and_initialize_data_00113cb9(pointerChar);\n            return pointerChar;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pointerChar = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        if (pointerChar == (char *)0x0) {\n          pointerChar2 = \"Couldn\\'t get demangled builtin type\\n\";\n          pointerChar = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        variable2 = strcmp(pointerChar,\"signed char\");\n        if (variable2 == 0) {\nLAB_0010b406:\n          pointerChar2 = (char *)initialize_data_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"bool\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)allocate_and_initialize_data_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"char\");\n        if (variable2 == 0) goto LAB_0010b406;\n        variable2 = strcmp(pointerChar,\"double\");\n        if ((variable2 == 0) || (variable2 = strcmp(pointerChar,\"long double\"), variable2 == 0)) {\n          pointerChar2 = (char *)initialize_data_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"float\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"__float128\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"unsigned char\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"int\");\n        if (variable2 == 0) {\nLAB_0010b504:\n          pointerChar2 = (char *)initialize_data_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"unsigned int\");\n        if (variable2 == 0) {\nLAB_0010b528:\n          pointerChar2 = (char *)initialize_data_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"long\");\n        if (variable2 == 0) goto LAB_0010b504;\n        variable2 = strcmp(pointerChar,\"unsigned long\");\n        if (variable2 == 0) goto LAB_0010b528;\n        variable2 = strcmp(pointerChar,\"__int128\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"unsigned __int128\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"short\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"unsigned short\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"void\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113e17();\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"wchar_t\");\n        if (variable2 == 0) goto LAB_0010b528;\n        variable2 = strcmp(pointerChar,\"long long\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"unsigned long long\");\n        if (variable2 == 0) {\n          pointerChar2 = (char *)initialize_data_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        variable2 = strcmp(pointerChar,\"...\");\n        if (variable2 == 0) {\n          pointerChar2 = \"Unexpected demangled varargs\\n\";\n          if (param5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param5 = 1;\n        }\n        else {\n          pointerChar2 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pointerChar2 = (char *)dcgettext(0,pointerChar2,5);\n          fprintf(_stderr,pointerChar2);\n        }\n        pointerChar2 = (char *)0x0;\nLAB_0010b6c6:\n        free(pointerChar);\n        return pointerChar2;\n      case 0x29:\n        if (*(long *)(param3 + 4) == 0) {\n          pointer = (void *)initialize_data_00113e17();\n        }\n        else {\n          pointer = (void *)reverseAndImproveCode_0010b0fa(param1,param2,*(long *)(param3 + 4),0,0);\n        }\n        if (pointer != (void *)0x0) {\n          longVar = extract_arglist_0010b6ea(param1,param2,*(undefined8 *)(param3 + 6),localArray);\n          if (longVar != 0) {\n            pointerChar = (char *)allocate_and_initialize_00113ce0(pointer,longVar,localArray[0]);\n            return pointerChar;\n          }\n          free(pointer);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (variable1 != 1) {\n      if (variable1 == 4) {\n        pointerChar = (char *)cplus_demangle_print(3,param3,0x14,localArray);\n        pointerChar2 = \"Failed to print demangled template\\n\";\n        if (pointerChar != (char *)0x0) {\n          size = strlen(pointerChar);\n          pointerChar2 = (char *)find_string_in_data_structures_0010afd5(param1,param2,pointerChar,size & 0xffffffff,9);\n          free(pointerChar);\n          return pointerChar2;\n        }\nLAB_0010b3d3:\n        pointerChar2 = (char *)dcgettext(0,pointerChar2,5);\n        fprintf(_stderr,pointerChar2);\n        return pointerChar;\n      }\n      if (variable1 == 0) {\n        if ((param4 == 0) || (pointerLong = (long *)extract_real_type_00113b1e(param4), pointerLong == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param4 = reverseAndImproveCode_0010b0fa(param1,param2,*(undefined8 *)(param3 + 4),param4,0);\n    if (param4 == 0) goto LAB_0010b38c;\n    param3 = *(uint **)(param3 + 6);\n    param5 = (undefined *)0x0;\n  }\n  pointerChar = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pointerChar,(ulong)variable1);\nLAB_0010b38c:\n  pointerChar = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pointerChar;\nLAB_0010b1a5:\n  if (*pointerLong == 0) {\nswitchD_0010b158_caseD_18:\n    pointerChar = (char *)find_string_in_data_structures_0010afd5(param1,param2,*(undefined8 *)(param3 + 4),param3[6],0);\n    return pointerChar;\n  }\n  pointerChar = *(char **)(*pointerLong + 8);\n  if (pointerChar == (char *)0x0) goto LAB_0010b38c;\n  pointerChar2 = (char *)extract_value_001129f4(pointerChar);\n  if (pointerChar2 != (char *)0x0) {\n    size = strlen(pointerChar2);\n    if ((param3[6] == (uint)size) &&\n       (variable2 = strncmp(pointerChar2,*(char **)(param3 + 4),(long)(int)param3[6]), variable2 == 0)) {\n      return pointerChar;\n    }\n  }\n  pointerLong = pointerLong + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "abort",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113dfe",
                "FUN_0010b0fa",
                "fprintf",
                "FUN_0010b6ea",
                "FUN_00113d3a",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "strncmp",
                "FUN_00113cb9",
                "FUN_00112904",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_code_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_line_00104c36",
                "uVar1": "translation",
                "ppbVar2": "slotPointer",
                "pbVar3": "currentByte",
                "in_CL": "currentCharacter",
                "bVar4": "nextCharacter",
                "unaff_RBX": "bufferPointer",
                "unaff_EBP": "lineCounter",
                "pbVar5": "linePointer",
                "unaff_R13": "returnAddress",
                "unaff_R14": "lineEnd",
                "unaff_R15": "lineStart",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "returnAddressPointer"
            },
            "code": "\nvoid processLine_00104c36(void)\n\n{\n  undefined8 translation;\n  byte **slotPointer;\n  byte *currentByte;\n  byte currentCharacter;\n  byte nextCharacter;\n  byte *bufferPointer;\n  int lineCounter;\n  byte *linePointer;\n  undefined8 returnAddress;\n  byte *lineEnd;\n  byte *lineStart;\n  undefined8 formatString;\n  undefined8 *returnAddressPointer;\n  \n  do {\n    linePointer = lineStart;\n    if (currentCharacter == 9) goto LAB_00104c3f;\n    do {\n      if ((currentCharacter == 10) || (currentCharacter == 0xd)) goto LAB_00114676;\n      if (currentCharacter == 0) goto LAB_00114599;\n      currentCharacter = linePointer[1];\n      linePointer = linePointer + 1;\n    } while ((currentCharacter != 0x20) && (currentCharacter != 9));\n    if ((char)currentCharacter < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharacter & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextCharacter = linePointer[1];\n      if ((((((nextCharacter == 9) || (nextCharacter == 0x20)) &&\n            ((nextCharacter = linePointer[2], nextCharacter == 9 || (nextCharacter == 0x20)))) &&\n           ((nextCharacter = linePointer[3], nextCharacter == 9 || (nextCharacter == 0x20)))) &&\n          ((nextCharacter = linePointer[4], nextCharacter == 9 || (nextCharacter == 0x20)))) &&\n         ((nextCharacter = linePointer[5], nextCharacter == 9 || (nextCharacter == 0x20)))) {\n        nextCharacter = linePointer[6];\n        currentByte = linePointer + 6;\n        if ((nextCharacter == 9) || (nextCharacter == 0x20)) {\n          do {\n            do {\n              nextCharacter = currentByte[1];\n              currentByte = currentByte + 1;\n            } while (nextCharacter == 0x20);\n          } while (nextCharacter == 9);\n        }\n      }\n      if ((0xd < nextCharacter) || ((-0x2402L >> (nextCharacter & 0x3f) & 1U) != 0)) {\n        translation = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(translation,formatString,lineCounter);\n      }\n    }\nLAB_00114599:\n    *linePointer = 0;\n    if (lineStart < linePointer) {\n      slotPointer = (byte **)htab_find_slot();\n      *slotPointer = lineStart;\n    }\n    lineCounter = lineCounter + 1;\n    linePointer = bufferPointer;\n    if (lineEnd[1] == 0) {\n      *returnAddressPointer = returnAddress;\n      return;\n    }\n    for (; nextCharacter = *linePointer, lineEnd = linePointer, nextCharacter != 10; linePointer = linePointer + 1) {\n      if ((char)nextCharacter < '\\v') {\n        if (nextCharacter == 0) {\n          currentByte = linePointer + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextCharacter == 0xd) {\n          *linePointer = 0;\n          currentByte = linePointer + 1;\n          if (linePointer[1] == 10) {\n            currentByte = linePointer + 2;\n            lineEnd = linePointer + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextCharacter == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *linePointer = 0;\n    if (linePointer[1] == 0xd) {\n      lineEnd = linePointer + 1;\n      currentByte = linePointer + 2;\n    }\n    else {\n      currentByte = linePointer + 1;\n    }\nLAB_00114553:\n    currentCharacter = *bufferPointer;\n    lineStart = bufferPointer;\n    while (bufferPointer = currentByte, currentCharacter == 0x20) {\nLAB_00104c3f:\n      linePointer = lineStart + 1;\n      lineStart = lineStart + 1;\n      currentByte = bufferPointer;\n      currentCharacter = *linePointer;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_line_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "process_debug_info_0010554f",
                "param_8": "numSections",
                "param_9": "isSlimLTO",
                "param_12": "alignment",
                "param_13": "fileData",
                "param_14": "dataDuplicate",
                "param_15": "bfdFlags",
                "in_stack_00000068": "flags",
                "in_stack_000000d8": "totalSize",
                "in_stack_000000f8": "alignmentVariable",
                "param_21": "debugLinkPath",
                "param_23": "sectionSize",
                "param_24": "sectionLinkPath",
                "param_30": "sectionData",
                "param_33": "debugData",
                "param_34": "debugSize",
                "param_36": "symbolType",
                "param_37": "symbolClass",
                "param_38": "debugLinkSize",
                "param_39": "debugLinkChecksum",
                "param_40": "sectionAlignment",
                "param_41": "hasPrecedingFunction",
                "param_42": "precedingFunction",
                "param_43": "sectionFlag",
                "param_44": "symbolName"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 processDebugInfo_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong numSections;\n  char isSlimLTO;\n  undefined4 *__ptr_02;\n  ulong alignment;\n  char *fileData;\n  undefined *dataDuplicate;\n  uint bfdFlags;\n  long *param_17;\n  undefined8 flags;\n  undefined8 debugLinkPath;\n  long sectionSize;\n  char *sectionLinkPath;\n  long param_26;\n  long *sectionData;\n  ulong param_31;\n  long param_32;\n  long totalSize;\n  void *debugData;\n  long debugSize;\n  undefined8 alignmentVariable;\n  byte symbolType;\n  byte symbolClass;\n  undefined8 debugLinkSize;\n  ushort debugLinkChecksum;\n  long *sectionAlignment;\n  char hasPrecedingFunction;\n  char *precedingFunction;\n  undefined sectionFlag;\n  short symbolName;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    alignment = 0;\n    dataDuplicate = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = alignment;\n  }\n  else {\n    lVar14 = (ulong)flags._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    sectionAlignment = param_17;\n    bfd_map_over_sections(param_7,update_pointer_and_value_0010870e,&stack0x00000140);\n    qsort(param_17,(ulong)flags._4_4_,8,compare_records_0010875d);\n    dataDuplicate = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = dataDuplicate;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      alignment = 0;\n      do {\n        puVar30 = (ulong *)(dataDuplicate + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = alignment;\n        do {\n          alignment = uVar21;\n          if (flags._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_message_001126c0(0,param_7,*plVar28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (alignment < uVar21);\n      } while( true );\n    }\n    alignment = 0;\nLAB_00107cd1:\n    uVar29 = alignment;\n    if (DAT_00127989 != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[flags._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_message_001126c0(0,param_7,param_17[flags._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(dataDuplicate + (ulong)(flags._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= alignment) {\n            uVar29 = alignment;\n          }\n        }\n      }\n    }\n  }\n  alignment = uVar29;\n  plVar28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    fileData = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(fileData);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          isSlimLTO = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (isSlimLTO == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(fileData);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((fileData != (char *)0x0) ||\n               (fileData = (char *)initialize_data_structure_00112894(unaff_R14,1,plVar28), fileData != (char *)0x0)) {\n              param_26 = 0;\n              sectionSize = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  sectionSize = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + sectionSize;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    sectionLinkPath = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)sectionSize);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(sectionLinkPath);\n                      sectionLinkPath = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_in_array_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = analyze_debug_record_0011173a(__ptr_02,fileData,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(sectionLinkPath);\n                      free(fileData);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((fileData != (char *)0x0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + numSections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (hasPrecedingFunction == '-') {\n          if (((lVar14 == 0) && (lVar14 = initialize_data_structure_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((precedingFunction == (char *)0x0 || (*precedingFunction == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = precedingFunction;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + numSections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          update_data_in_array_001088ae(sectionFlag,(int)symbolName,sectionAlignment,pcVar22);\n          isSlimLTO = analyze_debug_record_0011173a(__ptr_02,lVar14,sectionFlag);\n          if (isSlimLTO == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar14 != 0) && (cVar7 = process_debug_data_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (isSlimLTO == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (numSections != 0)) {\n        sectionAlignment = (long *)0x0;\n        sectionData = plVar28;\n        param_32 = 0;\n        param_31 = numSections;\n        totalSize = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _bfdFlags = (int *)0x0;\n        uVar12 = 0;\n        fileData = (char *)0x0;\n        sectionLinkPath = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = totalSize;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            totalSize = (ulong)symbolClass + 1 + totalSize;\n            if (symbolClass != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (sectionLinkPath != (char *)lVar37) break;\n            if (symbolType != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            sectionLinkPath = (char *)debugSize;\n            cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = alignmentVariable._6_2_;\n          if ((char)symbolType < '\\0') {\n            if (symbolType == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = process_debug_record_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (symbolType < 100) {\n              switch(symbolType) {\n              case 3:\n                if (alignmentVariable._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)alignmentVariable._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _bfdFlags = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                fileData = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(symbolType) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = start_debug_block_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = close_debug_block_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (fileData != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = record_debug_function_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_bfdFlags != (int *)0x0) {\n                    iVar10 = 0;\n                    if (symbolClass != 0) {\n                      iVar10 = debugLinkChecksum - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _bfdFlags[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_line_debug_info_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_bfdFlags + 6) + lVar14);\n                      _bfdFlags = _bfdFlags + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _bfdFlags = (int *)0x0;\n                  fileData = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = end_function_debugging_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (numSections != 0) {\n        plVar28 = DAT_001278d0 + numSections;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278d0;\n      bfdFlags = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (numSections == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _isSlimLTO = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          plVar15 = (long *)plVar28[_isSlimLTO];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = extract_section_info_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar17);\n              }\n            }\n            _hasPrecedingFunction = 0;\n            sectionAlignment = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278f8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((bfdFlags == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _hasPrecedingFunction = _hasPrecedingFunction & 0xffffffffffffff00;\n                sectionAlignment = plVar25;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (hasPrecedingFunction == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _hasPrecedingFunction = _hasPrecedingFunction & 0xffffffffffffff00;\n            sectionAlignment = plVar25;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (hasPrecedingFunction != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _hasPrecedingFunction = _hasPrecedingFunction & 0xffffffffffffff00;\n              sectionAlignment = plVar25;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (hasPrecedingFunction != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _hasPrecedingFunction = _hasPrecedingFunction & 0xffffffffffffff00;\n              sectionAlignment = plVar25;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (hasPrecedingFunction != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = process_section_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = check_pattern_match_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = check_pattern_match_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = check_pattern_match_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = check_pattern_match_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _isSlimLTO = _isSlimLTO + 1;\n        } while (numSections != _isSlimLTO);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = extract_section_info_0011a2e0(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        debugData = (void *)0x0;\n        cVar7 = extract_and_process_binary_data_0011378f(param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,debugLinkSize), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,sectionAlignment), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,sectionData,0,debugLinkSize);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,debugData,0,sectionAlignment), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_message_001126c0(0,param_7,0,uVar17);\n          free(debugData);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,process_reloc_table_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,numSections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_contents_00116110,param_7);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = compare_strings_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_message_001126c0(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,debugLinkPath), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (dataDuplicate != (undefined *)0x0) {\n        if (0x2000 < alignment) {\n          alignment = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(alignment);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (alignment = alignment & 0xffffffff; alignment != 0; alignment = alignment - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < flags._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(dataDuplicate + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                print_error_message_001126c0(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(dataDuplicate);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "bfd_get_section_by_name",
                "bfd_coff_get_auxent",
                "FUN_0010be1a",
                "bfd_coff_get_syment",
                "bfd_get_section_contents",
                "FUN_00113fb0",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010870e",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_0011a2e0",
                "htab_elements",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "FUN_001159d0",
                "xmalloc",
                "bfd_get_error",
                "bfd_map_over_sections",
                "bfd_set_error",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_00115d70",
                "FUN_00108863",
                "FUN_0011a170",
                "bfd_make_section_with_flags",
                "qsort",
                "bfd_set_symtab",
                "FUN_00112894",
                "FUN_0011173a",
                "bfd_map_over_sections",
                "strlen",
                "FUN_00116110",
                "bfd_is_local_label",
                "strcpy",
                "bfd_set_section_contents",
                "strcmp",
                "bfd_octets_per_byte",
                "htab_find",
                "FUN_00116030",
                "bfd_set_section_size",
                "fprintf",
                "FUN_00115dc0",
                "FUN_0010c892",
                "FUN_001126c0",
                "free",
                "bfd_decode_symclass",
                "FUN_001088ae",
                "FUN_0010875d",
                "FUN_0010be88",
                "xstrdup",
                "FUN_00119dd0",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_data_structure_00109cf4",
                "param_1": "input_param",
                "param_2": "numeric_param",
                "param_3": "flag_param",
                "local_3c": "numeric_string"
            },
            "code": "\nvoid initialize_data_structure_00109cf4(undefined8 input_param,undefined8 numeric_param,undefined4 flag_param)\n\n{\n  char numeric_string [28];\n  \n  sprintf(numeric_string,\"%ld\",numeric_param);\n  initialize_data_structure_00109cf4_00109b52(input_param,numeric_string,numeric_param,0,flag_param);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d97",
                "FUN_0010bba1",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_input_00109ab1",
                "param_1": "input_ptr",
                "param_2": "result",
                "uVar1": "parsed_val",
                "pcVar2": "curr_char",
                "uVar3": "return_val",
                "auVar4": "final_result"
            },
            "code": "\nundefined  [16]\nparse_input_00109ab1(char **input_ptr,undefined4 *result,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_val;\n  char *curr_char;\n  undefined8 return_val;\n  undefined final_result [16];\n  \n  curr_char = *input_ptr;\n  if (*curr_char == '(') {\n    *input_ptr = curr_char + 1;\n    parsed_val = parse_and_convert_input_00109a32(input_ptr,0);\n    *result = parsed_val;\n    if (**input_ptr == ',') {\n      *input_ptr = *input_ptr + 1;\n      parsed_val = parse_and_convert_input_00109a32(input_ptr,0,param_3);\n      result[1] = parsed_val;\n      if (**input_ptr == ')') {\n        curr_char = *input_ptr + 1;\n        *input_ptr = curr_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_00108fb9(curr_char);\n    return_val = 0;\n  }\n  else {\n    *result = 0;\n    curr_char = (char *)parse_and_convert_input_00109a32(input_ptr,0);\n    result[1] = (int)curr_char;\nLAB_00109b25:\n    return_val = CONCAT71((int7)((ulong)curr_char >> 8),1);\n  }\n  final_result._8_8_ = param_5;\n  final_result._0_8_ = return_val;\n  return final_result;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_input_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "process_section_001159d0",
                "param_1": "parameter",
                "uVar1": "result",
                "cVar2": "checkResult",
                "uVar3": "status",
                "lVar4": "dataPtr",
                "lVar5": "currentDataPtr"
            },
            "code": "\nundefined4 processSection_001159d0(long parameter)\n\n{\n  undefined8 result;\n  char checkResult;\n  undefined4 status;\n  long dataPtr;\n  long currentDataPtr;\n  \n  status = process_section_00115b70();\n  if ((char)status == '\\0') {\n    if ((*(byte *)(parameter + 0x27) & 2) == 0) {\n      return status;\n    }\n    dataPtr = retrieve_data_00115d00(*(undefined8 *)(parameter + 0xd0),*(undefined8 *)(parameter + 0xe0));\n    if ((dataPtr != 0) &&\n       (((result = *(undefined8 *)(dataPtr + 8), DAT_00127a48 != 7 ||\n         (checkResult = check_pattern_match_00115d70(result,DAT_00127a28), checkResult != '\\0')) &&\n        (checkResult = check_pattern_match_00115d70(result,DAT_00127a18), checkResult == '\\0')))) {\n      dataPtr = *(long *)(*(long *)(parameter + 0xd0) + 0xc0);\n      currentDataPtr = dataPtr;\n      do {\n        if (currentDataPtr == 0) {\n          return 1;\n        }\n        checkResult = process_section_00115b70(currentDataPtr);\n        if (checkResult == '\\0') {\n          return status;\n        }\n        currentDataPtr = *(long *)(*(long *)(currentDataPtr + 0xd0) + 0xc0);\n      } while (dataPtr != currentDataPtr);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "extract_and_initialize_data_0010a77a",
                "param_1": "data",
                "uVar1": "flag",
                "lVar2": "ptr",
                "__s": "str1",
                "uVar3": "val",
                "uVar4": "result",
                "__s_00": "str2",
                "sVar5": "len1",
                "sVar6": "len2",
                "__s_01": "combinedStr"
            },
            "code": "\nundefined4 extractAndInitializeData_0010a77a(long data)\n\n{\n  undefined flag;\n  long ptr;\n  char *str1;\n  undefined8 val;\n  undefined4 result;\n  char *str2;\n  size_t len1;\n  size_t len2;\n  char *combinedStr;\n  \n  ptr = *(long *)(data + 0x60);\n  if ((ptr != 0) && (str1 = *(char **)(ptr + 0x20), str1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptr + 0x18);\n    flag = *(undefined *)(ptr + 0x1c);\n    val = *(undefined8 *)(ptr + 0x10);\n    str2 = (char *)extract_and_remove_ptr_from_param_00109b2f();\n    len1 = strlen(str2);\n    len2 = strlen(str1);\n    combinedStr = (char *)xmalloc(len1 + 2 + len2);\n    sprintf(combinedStr,\"%s%s;\",str2,str1);\n    free(str2);\n    free(str1);\n    result = initialize_data_structure_00109b52(data,combinedStr,val,flag,result);\n    if ((char)result != '\\0') {\n      free(combinedStr);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "piVar2": "errno_ptr",
                "pcVar3": "error_str",
                "uVar1": "file_descriptor",
                "uVar4": "error_message",
                "unaff_RBP": "stack_base"
            },
            "code": "\nvoid print_error_and_exit_0010543c(void)\n\n{\n  undefined8 file_descriptor;\n  int *errno_ptr;\n  char *error_str;\n  undefined8 error_message;\n  long stack_base;\n  \n  errno_ptr = __errno_location();\n  error_str = strerror(*errno_ptr);\n  file_descriptor = *(undefined8 *)(stack_base + 0x10);\n  error_message = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_0010543c_00119dd0(error_message,file_descriptor,error_str);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "incrementFlag",
                "cVar1": "result",
                "bVar2": "tempByte",
                "iVar3": "index",
                "uVar4": "returnValue",
                "pcVar5": "string1",
                "__ptr": "ptrArray",
                "uVar6": "tempValue",
                "__s": "string2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "resultString",
                "lVar9": "totalLength",
                "bVar10": "flag2",
                "lVar11": "loopIndex",
                "uVar12": "condition"
            },
            "code": "\nundefined4 processData_0010a424(long data,char flag,int count,char incrementFlag)\n\n{\n  char result;\n  byte tempByte;\n  int index;\n  undefined4 returnValue;\n  char *string1;\n  undefined8 *ptrArray;\n  undefined8 tempValue;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long totalLength;\n  byte flag2;\n  long loopIndex;\n  undefined condition;\n  \n  if ((flag == '\\0') && (result = initialize_or_increment_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  flag2 = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  string1 = (char *)extract_and_remove_ptr_from_param_00109b2f(data);\n  if (count < 0) {\n    ptrArray = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    condition = 1;\n    if (flag2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      ptrArray = (undefined8 *)xmalloc((long)index * 8);\n      totalLength = (long)(count + -1);\n      do {\n        tempByte = 1;\n        if (flag2 == 0) {\n          tempByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        tempValue = extract_and_remove_ptr_from_param_00109b2f(data);\n        flag2 = tempByte & 1;\n        ptrArray[totalLength] = tempValue;\n        totalLength = totalLength + -1;\n      } while ((int)totalLength != -1);\n      if (incrementFlag == '\\0') {\n        result = initialize_or_increment_00109d97(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        tempByte = 1;\n        if (flag2 == 0) {\n          tempByte = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        flag2 = tempByte & 1;\n        tempValue = extract_and_remove_ptr_from_param_00109b2f(data);\n        ptrArray[(long)index + -1] = tempValue;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (incrementFlag != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = initialize_or_increment_00109d97(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((flag2 != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      tempValue = extract_and_remove_ptr_from_param_00109b2f(data);\n      count = 1;\n      condition = 1;\n      *ptrArray = tempValue;\n      goto LAB_0010a596;\n    }\n    tempValue = extract_and_remove_ptr_from_param_00109b2f(data);\n    count = 1;\n    *ptrArray = tempValue;\n  }\n  condition = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  string2 = (char *)extract_and_remove_ptr_from_param_00109b2f(data);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  totalLength = length1 + 10 + length2;\n  for (loopIndex = 0; (int)loopIndex < count; loopIndex = loopIndex + 1) {\n    length1 = strlen((char *)ptrArray[loopIndex]);\n    totalLength = totalLength + length1;\n  }\n  resultString = (char *)xmalloc(totalLength);\n  sprintf(resultString,\"#%s,%s\",string1,string2);\n  totalLength = 0;\n  free(string1);\n  free(string2);\n  while( true ) {\n    length1 = strlen(resultString);\n    if (count <= (int)totalLength) break;\n    *(undefined2 *)(resultString + length1) = 0x2c;\n    string1 = (char *)ptrArray[totalLength];\n    totalLength = totalLength + 1;\n    strcpy(resultString + length1 + 1,string1);\n    free(string1);\n  }\n  *(undefined2 *)(resultString + length1) = 0x3b;\n  free(ptrArray);\n  returnValue = initialize_data_structure_00109b52(data,resultString,0,condition,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(resultString);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "FUN_00109d97",
                "strcpy",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "versionString",
                "pcVar1": "copyrightNotice"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 versionString)\n\n{\n  char *copyrightNotice;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyrightNotice = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightNotice);\n  copyrightNotice = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightNotice);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "exit",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_query_string_00114c80",
                "param_1": "queryString",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "pcVar1": "equalSignIndex",
                "uVar2": "errorMessage",
                "auVar3": "parsedData"
            },
            "code": "\nundefined  [16] parseQueryString_00114c80(char *queryString,undefined8 value1,undefined8 value2,undefined8 value3)\n\n{\n  char *equalSignIndex;\n  undefined8 errorMessage;\n  undefined parsedData [16];\n  \n  equalSignIndex = strchr(queryString,0x3d);\n  if (equalSignIndex != (char *)0x0) {\n    parsedData._0_8_ = (undefined8 *)xmalloc(0x30);\n    errorMessage = copy_and_null_terminate_string_0011a480(queryString,(long)equalSignIndex - (long)queryString);\n    parsedData._0_8_[2] = equalSignIndex + 1;\n    parsedData._0_8_[1] = errorMessage;\n    parsedData._0_8_[4] = 0;\n    parsedData._0_8_[3] = 0;\n    *parsedData._0_8_ = value1;\n    parsedData._8_8_ = value3;\n    return parsedData;\n  }\n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage,value2);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_001053b5",
                "FUN_0011a480",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_query_string_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "pointer",
                "param_2": "value",
                "param_3": "pointerToLong",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 pointer,undefined8 value,long *pointerToLong)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointerToLong;\n  *currentPointer = value;\n  *pointerToLong = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "func_param1",
                "param_2": "func_param2",
                "param_3": "func_param3",
                "param_4": "func_param4",
                "param_5": "func_param5",
                "param_6": "func_param6",
                "param_7": "func_param7",
                "param_8": "func_param8",
                "lVar1": "ptr1",
                "cVar2": "charVar",
                "uVar3": "undefinedVar3",
                "uVar4": "undefinedVar4",
                "lVar5": "ptr2",
                "uVar6": "undefinedVar6",
                "plVar7": "ptr3",
                "__ptr": "dataPtr1",
                "__ptr_00": "dataPtr2",
                "bVar8": "byteVar",
                "iVar9": "intVar1",
                "pcVar10": "charPtr",
                "uVar11": "ulongVar1",
                "lVar12": "ptr4",
                "uVar13": "uintVar1",
                "uVar14": "uintVar2",
                "uVar15": "undefinedVar15",
                "local_68": "localArray",
                "local_48": "localChar",
                "local_47": "localByte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long func_param1,long *func_param2,long func_param3,undefined8 func_param4,uint func_param5,\n                 long *func_param6,char func_param7,undefined8 func_param8)\n\n{\n  long ptr1;\n  char charVar;\n  undefined4 undefinedVar3;\n  undefined8 undefinedVar4;\n  long ptr2;\n  undefined8 undefinedVar6;\n  long *ptr3;\n  void *dataPtr1;\n  void *dataPtr2;\n  byte byteVar;\n  int intVar1;\n  char *charPtr;\n  ulong ulongVar1;\n  long ptr4;\n  uint uintVar1;\n  uint uintVar2;\n  undefined8 undefinedVar15;\n  undefined localArray [32];\n  char localChar;\n  byte localByte;\n  \n  ptr2 = *(long *)(func_param1 + 0x110);\n  if ((~*(uint *)(ptr2 + 0x38) & func_param5) != 0) {\n    uintVar1 = (int)func_param5 >> ((byte)*(undefined4 *)(ptr2 + 0x44) & 0x1f);\n    ulongVar1 = (ulong)(func_param5 & *(uint *)(ptr2 + 0x40));\n    byteVar = (byte)*(undefined4 *)(ptr2 + 0x3c);\n    uintVar1 = (uintVar1 ^ func_param5) & *(uint *)(ptr2 + 0x38) ^ uintVar1;\n    if (ulongVar1 == 1L << (byteVar & 0x3f)) {\n      undefinedVar4 = parse_coff_type_0010dac0(func_param1,func_param2,func_param3,func_param4,uintVar1,func_param6,func_param7,func_param8);\n      ptr2 = allocate_or_return_ptr_00113d3a(undefinedVar4);\n      return ptr2;\n    }\n    if (ulongVar1 != 2L << (byteVar & 0x3f)) {\n      if (ulongVar1 != 3L << (byteVar & 0x3f)) {\n        undefinedVar4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(ptr2 + 0x3c),\n                          uintVar1);\n        print_error_message_00119ed0(undefinedVar4,func_param5);\n        return 0;\n      }\n      uintVar2 = 0;\n      if (func_param6 != (long *)0x0) {\n        uintVar2 = (uint)*(ushort *)(func_param6 + 2);\n        ptr3 = func_param6 + 2;\n        for (intVar1 = 0; (*(short *)ptr3 != 0 && (intVar1 != 3)); intVar1 = intVar1 + 1) {\n          *(short *)ptr3 = *(short *)((long)ptr3 + 2);\n          ptr3 = (long *)((long)ptr3 + 2);\n        }\n        *(short *)ptr3 = 0;\n      }\n      undefinedVar15 = 0;\n      undefinedVar4 = func_param8;\n      undefinedVar6 = parse_coff_type_0010dac0(func_param1,func_param2,func_param3,func_param4,uintVar1,func_param6,0);\n      ptr2 = *(long *)(func_param3 + 0x28);\n      if (ptr2 == 0) {\n        undefinedVar4 = initialize_data_00113dfe(4,0,undefinedVar15,undefinedVar4);\n        ptr2 = initialize_debug_name_type_0010c218(func_param8,\"int\",undefinedVar4);\n        *(long *)(func_param3 + 0x28) = ptr2;\n      }\n      ptr2 = allocate_and_initialize_data_00113c43(undefinedVar6,ptr2,0,(long)(int)(uintVar2 - 1),0);\n      return ptr2;\n    }\n    undefinedVar4 = parse_coff_type_0010dac0(func_param1,func_param2,func_param3,func_param4,uintVar1,func_param6,func_param7,func_param8);\n    ptr2 = allocate_and_initialize_00113ce0(undefinedVar4,0,0);\n    return ptr2;\n  }\n  if ((func_param6 != (long *)0x0) && (0 < *func_param6)) {\n    ptr3 = (long *)initialize_slot_0010da0b(func_param3);\n    if (*ptr3 != 0) {\n      return *ptr3;\n    }\n    ptr2 = allocate_and_initialize_data_00113e23(ptr3,0);\n    return ptr2;\n  }\n  if (func_param7 == '\\0') {\n    func_param6 = (long *)0x0;\n  }\n  if (0x10 < func_param5) {\n    ptr2 = initialize_data_00113e17();\n    return ptr2;\n  }\n  ptr2 = *(long *)(func_param3 + 8 + (long)(int)func_param5 * 8);\n  if (ptr2 != 0) {\n    return ptr2;\n  }\n  switch(func_param5) {\n  default:\n    undefinedVar4 = initialize_data_00113e17();\n    charPtr = \"void\";\n    break;\n  case 2:\n    undefinedVar4 = initialize_data_00113dfe(1,0);\n    charPtr = \"char\";\n    break;\n  case 3:\n    undefinedVar4 = initialize_data_00113dfe(2,0);\n    charPtr = \"short\";\n    break;\n  case 4:\n    undefinedVar4 = initialize_data_00113dfe(4,0);\n    charPtr = \"int\";\n    break;\n  case 5:\n    undefinedVar4 = initialize_data_00113dfe(4,0);\n    charPtr = \"long\";\n    break;\n  case 6:\n    undefinedVar4 = initialize_data_00113df2(4);\n    charPtr = \"float\";\n    break;\n  case 7:\n    undefinedVar4 = initialize_data_00113df2(8);\n    charPtr = \"double\";\n    break;\n  case 8:\n    if (func_param6 == (long *)0x0) {\n      ptr2 = initialize_data_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    undefinedVar4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (func_param6 == (long *)0x0) {\n      ptr2 = initialize_data_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    undefinedVar4 = 9;\nLAB_0010de7a:\n    ptr2 = process_binary_data_0010e07c(func_param1,func_param2,func_param3,undefinedVar4,func_param6,func_param8);\nLAB_0010e046:\n    ptr3 = (long *)initialize_slot_0010da0b(func_param3,func_param4);\n    *ptr3 = ptr2;\n    return ptr2;\n  case 10:\n    if (func_param6 == (long *)0x0) {\n      ptr2 = initialize_data_and_allocate_00113d6e(0,0);\n    }\n    else {\n      ptr2 = func_param6[3];\n      dataPtr1 = (void *)xmalloc(0x50);\n      dataPtr2 = (void *)xmalloc(0x50);\n      ptr4 = 0;\n      do {\n        while( true ) {\n          if ((ptr2 <= func_param2[3]) || (func_param2[1] <= func_param2[2])) goto LAB_0010e032;\n          intVar1 = (int)ptr4;\n          ptr1 = *(long *)(*func_param2 + func_param2[2] * 8);\n          charVar = bfd_coff_get_syment(func_param1,ptr1,localArray);\n          ptr4 = (long)intVar1;\n          if (charVar == '\\0') {\n            undefinedVar3 = bfd_get_error();\n            undefinedVar4 = bfd_errmsg(undefinedVar3);\n            undefinedVar6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(undefinedVar6,undefinedVar4);\n            free(dataPtr1);\n            free(dataPtr2);\n            ptr2 = 0;\n            goto LAB_0010e046;\n          }\n          func_param2[2] = func_param2[2] + 1;\n          func_param2[3] = (ulong)localByte + 1 + func_param2[3];\n          if (localChar != '\\x10') break;\n          if ((int)func_param5 <= intVar1 + 1) {\n            func_param5 = func_param5 + 10;\n            dataPtr1 = (void *)xrealloc(dataPtr1);\n            dataPtr2 = (void *)xrealloc(dataPtr2,(long)(int)func_param5 << 3);\n          }\n          ptr4 = *(long *)(ptr1 + 0x20);\n          *(undefined8 *)((long)dataPtr1 + (long)intVar1 * 8) = *(undefined8 *)(ptr1 + 8);\n          *(long *)((long)dataPtr2 + (long)intVar1 * 8) =\n               *(long *)(ptr1 + 0x10) + *(long *)(ptr4 + 0x30);\n          ptr4 = (long)(intVar1 + 1);\n        }\n      } while (localChar != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)dataPtr1 + ptr4 * 8) = 0;\n      ptr2 = initialize_data_and_allocate_00113d6e(dataPtr1,dataPtr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    ptr2 = initialize_data_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    undefinedVar4 = initialize_data_00113dfe(1,1);\n    charPtr = \"unsigned char\";\n    break;\n  case 0xd:\n    undefinedVar4 = initialize_data_00113dfe(2,1);\n    charPtr = \"unsigned short\";\n    break;\n  case 0xe:\n    undefinedVar4 = initialize_data_00113dfe(4,1);\n    charPtr = \"unsigned int\";\n    break;\n  case 0xf:\n    undefinedVar4 = initialize_data_00113dfe(4,1);\n    charPtr = \"unsigned long\";\n    break;\n  case 0x10:\n    undefinedVar4 = initialize_data_00113df2(0xc);\n    charPtr = \"long double\";\n  }\n  ptr2 = initialize_debug_name_type_0010c218(func_param8,charPtr,undefinedVar4);\nLAB_0010e065:\n  *(long *)(func_param3 + 8 + (long)(int)func_param5 * 8) = ptr2;\n  return ptr2;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010e07c",
                "FUN_00113da9",
                "FUN_00113c43",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_00113e23",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string_1",
                "param_2": "string_2",
                "iVar1": "comparison_result",
                "in_RAX": "return_value",
                "__n": "string_length",
                "extraout_var": "extra_output",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compare_strings_00113fb0(char *string_1,char *string_2)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  size_t string_length;\n  undefined4 extra_output;\n  undefined result [16];\n  \n  string_length = strlen(string_2);\n  comparison_result = strncmp(string_1,string_2,string_length);\n  result._1_7_ = (undefined7)(CONCAT44(extra_output,comparison_result) >> 8);\n  result[0] = comparison_result == 0;\n  result._8_8_ = return_value;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00108c86",
                "FUN_00113ede",
                "FUN_00107880",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_cannot_set_time_error_0010882c",
                "piVar1": "errnoPointer",
                "uVar2": "errorMessage",
                "dcgettext": "getTranslatedErrorMessage",
                "print_error_message_00119ed0": "printErrorMessage"
            },
            "code": "\nvoid printCannotSetTimeError_0010882c(void)\n\n{\n  int *errnoPointer;\n  undefined8 errorMessage;\n  \n  errnoPointer = __errno_location();\n  strerror(*errnoPointer);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  printErrorMessage(errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_cannot_set_time_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_and_send_data_0010ebb0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "__s": "extractedString",
                "cVar1": "characterVar",
                "uVar2": "param3MinusOne",
                "uVar3": "returnValue",
                "sVar4": "param2Length",
                "sVar5": "extractedStringLength",
                "__s_00": "newString"
            },
            "code": "\nundefined4 processAndSendData_0010ebb0(undefined8 inputParam1,char *inputParam2,int inputParam3,undefined8 inputParam4)\n\n{\n  char characterVar;\n  uint param3MinusOne;\n  undefined4 returnValue;\n  char *extractedString;\n  size_t param2Length;\n  size_t extractedStringLength;\n  char *newString;\n  \n  extractedString = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  param3MinusOne = inputParam3 - 1;\n  if (param3MinusOne < 4) {\n    returnValue = *(undefined4 *)(&DAT_00121340 + (ulong)param3MinusOne * 4);\n    characterVar = (&DAT_00121334)[param3MinusOne];\n    param2Length = strlen(inputParam2);\n    extractedStringLength = strlen(extractedString);\n    newString = (char *)xmalloc(param2Length + 3 + extractedStringLength);\n    sprintf(newString,\"%s:%c%s\",inputParam2,(ulong)(uint)(int)characterVar,extractedString);\n    free(extractedString);\n    returnValue = process_data_0010e2f0(inputParam1,returnValue,0,inputParam4,newString);\n    if ((char)returnValue != '\\0') {\n      free(newString);\n    }\n    return returnValue;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "allocate_and_initialize_data_00113b98",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "lVar1": "data_ptr",
                "plVar2": "allocated_ptr"
            },
            "code": "\nlong allocate_and_initialize_data_00113b98(long input_param_1,long input_param_2,long input_param_3,undefined input_param_4)\n\n{\n  long data_ptr;\n  long *allocated_ptr;\n  \n  if ((input_param_1 != 0) && (data_ptr = allocate_and_initialize_data_00113b98_00112904(0x13,0), data_ptr != 0)) {\n    allocated_ptr = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_ptr + 0x19) = 0;\n    *allocated_ptr = input_param_1;\n    *(undefined4 *)((long)allocated_ptr + 0x1c) = 0;\n    allocated_ptr[1] = input_param_2;\n    allocated_ptr[2] = input_param_3;\n    *(undefined *)(allocated_ptr + 3) = input_param_4;\n    *(long **)(data_ptr + 0x10) = allocated_ptr;\n    return data_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_pattern_match_00115d70",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "result",
                "local_18": "check_value",
                "local_10": "is_match"
            },
            "code": "\nundefined check_pattern_match_00115d70(undefined8 input_1,undefined8 input_2)\n\n{\n  long result;\n  undefined8 check_value;\n  undefined is_match;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(input_2,input_1);\n    is_match = result != 0;\n  }\n  else {\n    is_match = 0;\n    check_value = input_1;\n    htab_traverse(input_2,pattern_match_0011a170,&check_value);\n  }\n  return is_match;\n}\n\n",
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_pattern_match_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "append_to_data_structure_00109be3",
                "param_1": "dataStructure",
                "param_2": "element",
                "param_3": "value",
                "uVar1": "reallocResult",
                "puVar2": "elementPtr",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 appendToDataStructure_00109be3(long dataStructure,undefined8 element,undefined4 value)\n\n{\n  undefined8 reallocResult;\n  undefined8 *elementPtr;\n  uint currentSize;\n  \n  if (*(uint *)(dataStructure + 0x2c) <= *(uint *)(dataStructure + 0x28)) {\n    currentSize = *(uint *)(dataStructure + 0x2c) + 10;\n    *(uint *)(dataStructure + 0x2c) = currentSize;\n    reallocResult = xrealloc(*(undefined8 *)(dataStructure + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataStructure + 0x20) = reallocResult;\n  }\n  currentSize = *(uint *)(dataStructure + 0x28);\n  elementPtr = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataStructure + 0x20));\n  *elementPtr = element;\n  *(undefined4 *)(elementPtr + 1) = value;\n  *(uint *)(dataStructure + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)elementPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "append_to_data_structure_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00104943",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_and_null_terminate_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxSize",
                "__n": "stringLength",
                "__dest": "destinationString"
            },
            "code": "\nvoid copyAndNullTerminateString_0011a480(char *sourceString,size_t maxSize)\n\n{\n  size_t stringLength;\n  void *destinationString;\n  \n  stringLength = strnlen(sourceString,maxSize);\n  destinationString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)destinationString + stringLength) = 0;\n  memcpy(destinationString,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "memcpy",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "create_edited_data_0010e918",
                "param_1": "input1",
                "param_2": "inputString",
                "param_3": "input2",
                "__s": "extractedString",
                "sVar2": "inputStrLen",
                "sVar3": "extractedStrLen",
                "__s_00": "modifiedDataString",
                "uVar1": "result"
            },
            "code": "\nundefined4 createEditedData_0010e918(undefined8 input1,char *inputString,undefined8 input2)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t inputStrLen;\n  size_t extractedStrLen;\n  char *modifiedDataString;\n  \n  extractedString = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  inputStrLen = strlen(inputString);\n  extractedStrLen = strlen(extractedString);\n  modifiedDataString = (char *)xmalloc(inputStrLen + 0x14 + extractedStrLen);\n  sprintf(modifiedDataString,\"%s:c=e%s,%ld\",inputString,extractedString,input2);\n  free(extractedString);\n  result = process_data_0010e2f0(input1,0x80,0,0,modifiedDataString);\n  if ((char)result != '\\0') {\n    free(modifiedDataString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "create_edited_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_contents_00116110",
                "param_1": "inputBinary",
                "param_2": "sectionInfo",
                "param_3": "outputBinary",
                "uVar1": "temp",
                "uVar2": "temp2",
                "lVar3": "sectionAddress",
                "iVar4": "loopVar1",
                "iVar5": "loopVar2",
                "cVar6": "checkResult",
                "uVar7": "errorMessage",
                "__ptr": "sectionCopy",
                "lVar8": "innerLoopVar",
                "uVar9": "innerLoopVar2",
                "iVar10": "divisionFactor",
                "puVar12": "innerLoopPtr",
                "lVar13": "remainder",
                "puVar14": "sectionCopyPtr",
                "puVar15": "sectionCopyPtr2",
                "pvVar16": "tempPtr",
                "uVar17": "temp3",
                "uVar18": "divisionFactor2",
                "bVar20": "flag",
                "local_38": "sectionSize",
                "local_30": "sectionContent"
            },
            "code": "\nvoid reverseSectionContents_00116110(undefined8 inputBinary,undefined8 *sectionInfo,undefined8 outputBinary)\n\n{\n  undefined temp;\n  undefined8 temp2;\n  long sectionAddress;\n  int loopVar1;\n  int loopVar2;\n  char checkResult;\n  undefined8 errorMessage;\n  undefined8 *sectionCopy;\n  long innerLoopVar;\n  ulong innerLoopVar2;\n  int divisionFactor;\n  ulong temp1;\n  undefined *innerLoopPtr;\n  long remainder;\n  undefined8 *sectionCopyPtr;\n  undefined8 *sectionCopyPtr2;\n  void *tempPtr;\n  ulong temp3;\n  ulong divisionFactor2;\n  ulong temp9;\n  byte flag;\n  ulong sectionSize;\n  void *sectionContent;\n  \n  flag = 0;\n  checkResult = check_section_and_compare_00115f50(inputBinary,sectionInfo,1);\n  if (checkResult != '\\0') {\n    return;\n  }\n  sectionSize = sectionInfo[8];\n  sectionAddress = sectionInfo[0xc];\n  if (((*(byte *)((long)sectionInfo + 0x25) & 1) == 0) || ((*(byte *)(sectionAddress + 0x25) & 1) == 0)) {\n    remainder = check_function_00114190(*sectionInfo,0,0x80);\n    if (remainder == 0) {\n      return;\n    }\n    if ((*(byte *)(remainder + 0x29) & 1) == 0) {\n      return;\n    }\n    sectionCopy = (undefined8 *)xmalloc(sectionSize);\n    sectionCopyPtr2 = sectionCopy;\n    if (7 < sectionSize) {\n      for (divisionFactor2 = sectionSize >> 3; divisionFactor2 != 0; divisionFactor2 = divisionFactor2 - 1) {\n        *sectionCopyPtr2 = 0;\n        sectionCopyPtr2 = sectionCopyPtr2 + (ulong)flag * -2 + 1;\n      }\n    }\n    sectionCopyPtr = sectionCopyPtr2;\n    if ((sectionSize & 4) != 0) {\n      sectionCopyPtr = (undefined8 *)((long)sectionCopyPtr2 + (ulong)flag * -8 + 4);\n      *(undefined4 *)sectionCopyPtr2 = 0;\n    }\n    sectionCopyPtr2 = sectionCopyPtr;\n    if ((sectionSize & 2) != 0) {\n      sectionCopyPtr2 = (undefined8 *)((long)sectionCopyPtr + (ulong)flag * -4 + 2);\n      *(undefined2 *)sectionCopyPtr = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)sectionCopyPtr2 = 0;\n    }\n    checkResult = bfd_set_section_contents(outputBinary,sectionAddress,sectionCopy,0);\n    if (checkResult != '\\0') {\n      free(sectionCopy);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0,outputBinary,sectionAddress,0);\n    free(sectionCopy);\n    return;\n  }\n  sectionContent = (void *)0x0;\n  checkResult = bfd_get_full_section_contents(inputBinary,sectionInfo,&sectionContent);\n  if ((checkResult == '\\0') ||\n     (checkResult = bfd_convert_section_contents(inputBinary,sectionInfo,outputBinary,&sectionContent,&sectionSize),\n     divisionFactor = DAT_00127908, checkResult == '\\0')) {\n    bfd_set_section_size(sectionAddress,0);\n    DAT_00127a40 = 1;\n    print_error_message_001126c0(0,inputBinary,sectionInfo,0);\n    free(sectionContent);\n    return;\n  }\n  loopVar1 = DAT_001264b8;\n  loopVar2 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    divisionFactor2 = (ulong)DAT_00127908;\n    if (sectionSize % divisionFactor2 != 0) {\n      temp2 = *sectionInfo;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,temp2,divisionFactor);\n    }\n    divisionFactor = DAT_00127908 / 2;\n    temp1 = 0;\n    while (temp9 = temp1, loopVar1 = DAT_001264b8, loopVar2 = DAT_001264bc, temp9 < sectionSize) {\n      temp1 = divisionFactor2 + temp9;\n      temp3 = temp1;\n      for (innerLoopVar2 = 0; innerLoopVar2 < (ulong)(long)divisionFactor; innerLoopVar2 = innerLoopVar2 + 1) {\n        temp3 = temp3 - 1;\n        innerLoopPtr = (undefined *)(temp9 + innerLoopVar2 + (long)sectionContent);\n        temp = *innerLoopPtr;\n        *innerLoopPtr = *(undefined *)((long)sectionContent + temp3);\n        *(undefined *)((long)sectionContent + temp3) = temp;\n      }\n    }\n  }\n  DAT_001264b8 = loopVar1;\n  DAT_001264bc = loopVar2;\n  if (-1 < loopVar2) {\n    divisionFactor2 = (ulong)DAT_00127a3c;\n    divisionFactor = (int)((ulong)sectionInfo[7] % divisionFactor2);\n    temp1 = ((long)loopVar2 - (long)divisionFactor) + (long)sectionContent;\n    if (loopVar2 < divisionFactor) {\n      temp1 = temp1 + divisionFactor2;\n    }\n    remainder = (sectionSize + (long)sectionContent) - temp1;\n    tempPtr = sectionContent;\n    for (; temp1 < sectionSize + (long)sectionContent; temp1 = temp1 + divisionFactor2) {\n      for (innerLoopVar = 0; ((int)innerLoopVar < loopVar1 && (innerLoopVar != remainder)); innerLoopVar = innerLoopVar + 1) {\n        *(undefined *)((long)tempPtr + innerLoopVar) = *(undefined *)(temp1 + innerLoopVar);\n      }\n      tempPtr = (void *)((long)tempPtr + innerLoopVar);\n      remainder = remainder - divisionFactor2;\n    }\n    sectionSize = ((((divisionFactor2 - 1) + sectionSize) - (long)loopVar2) / divisionFactor2) * (long)loopVar1;\n    divisionFactor2 = *(ulong *)(sectionAddress + 0x38) / divisionFactor2;\n    *(ulong *)(sectionAddress + 0x38) = divisionFactor2;\n    if (loopVar2 < divisionFactor) {\n      *(ulong *)(sectionAddress + 0x38) = divisionFactor2 + 1;\n      checkResult = bfd_set_section_contents(outputBinary,sectionAddress,sectionContent,0,sectionSize);\n      if (checkResult == '\\0') {\n        cleanup_and_print_error_message_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  checkResult = bfd_set_section_contents(outputBinary,sectionAddress,sectionContent,0,sectionSize);\n  if (checkResult == '\\0') {\n    cleanup_and_print_error_message_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContent);\n  return;\n}\n\n",
            "called": [
                "FUN_00115f50",
                "xmalloc",
                "bfd_set_section_size",
                "FUN_00114190",
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_001083de",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_contents_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "close_debug_block_0010bf20",
                "param_1": "debugData",
                "param_2": "blockEnd",
                "param_3": "unknownParam",
                "param_4": "returnValue",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValueData"
            },
            "code": "\n\n\nundefined  [16] closeDebugBlock_0010bf20(long debugData,undefined8 blockEnd,undefined8 unknownParam,undefined8 returnValue)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValueData [16];\n  \n  if ((*(long *)(debugData + 8) == 0) || (currentBlock = *(long *)(debugData + 0x20), currentBlock == 0)) {\n    errorString = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = blockEnd;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(debugData + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorString = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnValueData._8_8_ = returnValue;\n  returnValueData._0_8_ = errorMessage;\n  return returnValueData;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "close_debug_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_and_initialize_data_0010c95e",
                "param_1": "dataStructures",
                "param_2": "byteArrayPointer",
                "param_3": "dataPointer",
                "bVar1": "currentByte",
                "bVar2": "nextByte",
                "pbVar3": "bytePointer",
                "bVar4": "isChar",
                "bVar5": "isSigned",
                "bVar6": "isVoid",
                "cVar7": "result",
                "uVar8": "parsedInt",
                "pbVar9": "nextBytePointer",
                "lVar10": "dataType",
                "uVar11": "returnValue",
                "pcVar12": "typeName",
                "sVar13": "stringLength",
                "uVar14": "parsedLength",
                "__ptr": "stringPointer",
                "lVar15": "dataResult",
                "puVar16": "unsignedLongPointer",
                "puVar17": "undefinedPointer",
                "ppcVar18": "stringPointerPointer",
                "pcVar19": "charType",
                "local_49": "undefinedValue",
                "local_48": "unsignedLongValue",
                "local_40": "stringArray"
            },
            "code": "\nundefined8 parseAndInitializeData_0010c95e(undefined8 *dataStructures,byte **byteArrayPointer,long *dataPointer)\n\n{\n  byte currentByte;\n  byte nextByte;\n  byte *bytePointer;\n  bool isChar;\n  bool isSigned;\n  bool isVoid;\n  char result;\n  uint parsedInt;\n  byte *nextBytePointer;\n  long dataType;\n  undefined8 returnValue;\n  char *typeName;\n  size_t stringLength;\n  ulong parsedLength;\n  void *stringPointer;\n  long dataResult;\n  ulong *unsignedLongPointer;\n  undefined *undefinedPointer;\n  char **stringPointerPointer;\n  char *charType;\n  byte *pnextByte0;\n  undefined undefinedValue;\n  ulong unsignedLongValue;\n  char *stringArray [2];\n  \n  while( true ) {\n    pnextByte0 = *byteArrayPointer;\n    currentByte = *pnextByte0;\n    if ('T' < (char)currentByte) break;\n    if ((char)currentByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(currentByte) {\n    case 0x41:\n      dataResult = 0;\n      bytePointer = pnextByte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byteArrayPointer = pnextByte0 + 1;\n      result = parseAndInitializeData_0010c95e(dataStructures,byteArrayPointer,dataPointer);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (dataPointer == (long *)0x0) {\n        return 1;\n      }\n      dataResult = allocate_and_initialize_data_00113b71(*dataPointer);\n      *dataPointer = dataResult;\n      return 1;\n    case 0x46:\n      *byteArrayPointer = pnextByte0 + 1;\n      if (dataPointer == (long *)0x0) {\n        unsignedLongPointer = (ulong *)0x0;\n        stringPointerPointer = (char **)0x0;\n      }\n      else {\n        unsignedLongPointer = &unsignedLongValue;\n        stringPointerPointer = stringArray;\n      }\n      result = parse_and_append_data_0010d882(dataStructures,byteArrayPointer,stringPointerPointer,unsignedLongPointer);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**byteArrayPointer == 0x5f) {\n        *byteArrayPointer = *byteArrayPointer + 1;\n        result = parseAndInitializeData_0010c95e(dataStructures,byteArrayPointer,dataPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (dataPointer == (long *)0x0) {\n          return 1;\n        }\n        dataResult = allocate_and_initialize_00113ce0(*dataPointer,stringArray[0],unsignedLongValue & 0xff);\n        *dataPointer = dataResult;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byteArrayPointer = pnextByte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefinedValue = 0;\n      stringArray[0] = (char *)0x0;\n      unsignedLongValue = 0;\n      *byteArrayPointer = pnextByte0 + 1;\n      if (((&_sch_istable)[(ulong)pnextByte0[1] * 2] & 4) == 0) {\n        if (pnextByte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        stringPointerPointer = stringArray;\n        if (dataPointer == (long *)0x0) {\n          stringPointerPointer = (char **)0x0;\n        }\n        result = parse_and_validate_input_0010d559(dataStructures,byteArrayPointer,stringPointerPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        parsedInt = parse_int_from_byte_array_00108e76(byteArrayPointer);\n        bytePointer = *byteArrayPointer;\n        stringLength = strlen((char *)bytePointer);\n        if (stringLength < parsedInt) goto switchD_0010cdf9_caseD_60;\n        *byteArrayPointer = bytePointer + parsedInt;\n        if ((dataPointer != (long *)0x0) &&\n           (stringArray[0] = (char *)find_string_in_data_structures_0010afd5(*dataStructures,dataStructures[1],bytePointer,parsedInt,9),\n           stringArray[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextByte = **byteArrayPointer;\n      if (currentByte == 0x4d) {\n        if ((nextByte == 0x43) || (nextByte == 0x56)) {\n          *byteArrayPointer = *byteArrayPointer + 1;\n        }\n        if (**byteArrayPointer != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byteArrayPointer = *byteArrayPointer + 1;\n        if (dataPointer == (long *)0x0) {\n          undefinedPointer = (undefined *)0x0;\n          unsignedLongPointer = (ulong *)0x0;\n        }\n        else {\n          undefinedPointer = &undefinedValue;\n          unsignedLongPointer = &unsignedLongValue;\n        }\n        result = parse_and_append_data_0010d882(dataStructures,byteArrayPointer,unsignedLongPointer,undefinedPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**byteArrayPointer == 0x5f) {\n        *byteArrayPointer = *byteArrayPointer + 1;\n        result = parseAndInitializeData_0010c95e(dataStructures,byteArrayPointer,dataPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (dataPointer == (long *)0x0) {\n          return 1;\n        }\n        if (currentByte != 0x4d) {\n          dataResult = create_and_initialize_data_00113bfa(stringArray[0],*dataPointer);\n          *dataPointer = dataResult;\n          return 1;\n        }\n        dataResult = allocate_and_initialize_data_00113b98(*dataPointer,stringArray[0],unsignedLongValue,undefinedValue);\n        *dataPointer = dataResult;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnValue = parse_and_validate_input_0010d559(dataStructures,byteArrayPointer,dataPointer);\n      return returnValue;\n    case 0x52:\n      *byteArrayPointer = pnextByte0 + 1;\n      result = parseAndInitializeData_0010c95e(dataStructures,byteArrayPointer,dataPointer);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (dataPointer == (long *)0x0) {\n        return 1;\n      }\n      dataResult = allocate_and_initialize_data_00113cb9(*dataPointer);\n      *dataPointer = dataResult;\n      return 1;\n    case 0x54:\n      *byteArrayPointer = pnextByte0 + 1;\n      result = parse_integer_00108ea1(byteArrayPointer,&unsignedLongValue);\n      if (result != '\\0') {\n        if ((uint)unsignedLongValue < *(uint *)(dataStructures + 5)) {\n          stringArray[0] = *(char **)((unsignedLongValue & 0xffffffff) * 0x10 + dataStructures[4]);\n          result = parseAndInitializeData_0010c95e(dataStructures,stringArray,dataPointer);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (currentByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byteArrayPointer = pnextByte0 + 1;\n    result = parseAndInitializeData_0010c95e(dataStructures,byteArrayPointer,dataPointer);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (dataPointer == (long *)0x0) {\n      return 1;\n    }\n    dataResult = allocate_or_return_ptr_00113d3a(*dataPointer);\n    *dataPointer = dataResult;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isVoid = false;\n  isChar = false;\n  result = '\\0';\n  isSigned = false;\n  do {\n    bytePointer = *byteArrayPointer;\n    currentByte = *bytePointer;\n    if (currentByte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)currentByte) {\n      if (currentByte == 0x56) {\n        isVoid = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)currentByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)currentByte < '_') goto LAB_0010cdfb;\n      switch(currentByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (dataPointer == (long *)0x0) {\nLAB_0010d0aa:\n          *byteArrayPointer = bytePointer + 1;\n          return 1;\n        }\n        dataResult = find_named_type_0010914e(*dataStructures,&DAT_00120436);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = allocate_and_initialize_data_00112904(6,4);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        charType = \"unsigned char\";\n        if ((result == '\\0') && (charType = \"char\", isChar)) {\n          charType = \"signed char\";\n        }\n        dataResult = find_named_type_0010914e(*dataStructures,charType);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113dfe(1,result);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        charType = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        dataResult = find_named_type_0010914e(*dataStructures,\"float\");\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113df2(4);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        charType = \"unsigned int\";\n        typeName = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        charType = \"long unsigned int\";\n        typeName = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          charType = typeName;\n        }\n        dataResult = find_named_type_0010914e(*dataStructures,charType);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113dfe(4,result);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        charType = \"long double\";\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        dataResult = find_named_type_0010914e(*dataStructures,charType);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113df2(8);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        charType = \"short unsigned int\";\n        if (result == '\\0') {\n          charType = \"short int\";\n        }\n        dataResult = find_named_type_0010914e(*dataStructures,charType);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113dfe(2,result);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        stringPointerPointer = stringArray;\n        if (dataPointer == (long *)0x0) {\n          stringPointerPointer = (char **)0x0;\n        }\n        result = parse_input_0010d21c(dataStructures,byteArrayPointer,stringPointerPointer);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (dataPointer == (long *)0x0) {\n          return 1;\n        }\n        stringLength = strlen(stringArray[0]);\n        dataResult = find_string_in_data_structures_0010afd5(*dataStructures,dataStructures[1],stringArray[0],stringLength & 0xffffffff,9);\n        *dataPointer = dataResult;\n        free(stringArray[0]);\n        dataResult = *dataPointer;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        dataResult = find_named_type_0010914e(*dataStructures,&DAT_00120495);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113e17();\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        dataResult = find_named_type_0010914e(*dataStructures,\"__wchar_t\");\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113dfe(2,1);\n          *dataPointer = dataResult;\n          *byteArrayPointer = *byteArrayPointer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (dataPointer == (long *)0x0) goto LAB_0010d0aa;\n        charType = \"long long unsigned int\";\n        if (result == '\\0') {\n          charType = \"long long int\";\n        }\n        dataResult = find_named_type_0010914e(*dataStructures,charType);\n        *dataPointer = dataResult;\n        if (dataResult == 0) {\n          dataResult = initialize_data_00113dfe(8,result);\n          *dataPointer = dataResult;\n        }\n      }\n      *byteArrayPointer = *byteArrayPointer + 1;\n      goto LAB_0010d1de;\n    }\n    if (currentByte == 0x43) {\n      isSigned = true;\n      goto LAB_0010cd84;\n    }\n    if (currentByte != 0x53) goto LAB_0010cdc5;\n    isChar = true;\nLAB_0010cd84:\n    *byteArrayPointer = bytePointer + 1;\n  } while( true );\nLAB_0010ca26:\n  nextBytePointer = bytePointer + 1;\n  *byteArrayPointer = nextBytePointer;\n  currentByte = *nextBytePointer;\n  if (currentByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (currentByte == 0x5f) {\n    *byteArrayPointer = bytePointer + 2;\n    result = parseAndInitializeData_0010c95e(dataStructures,byteArrayPointer,dataPointer);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (dataPointer == (long *)0x0) {\n      return 1;\n    }\n    dataType = find_named_type_0010914e(*dataStructures,\"int\");\n    if (dataType == 0) {\n      dataType = initialize_data_00113dfe(4,0);\n    }\n    dataResult = allocate_and_initialize_data_00113c43(*dataPointer,dataType,0,dataResult,0);\n    *dataPointer = dataResult;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  dataResult = dataResult * 10 + (long)((char)currentByte + -0x30);\n  bytePointer = nextBytePointer;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '0') {\n      if (currentByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(pnextByte0);\n      if (dataPointer == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((currentByte != 0x47) || (*byteArrayPointer = bytePointer + 1, ((&_sch_istable)[(ulong)bytePointer[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextByte0 = *byteArrayPointer;\n  parsedInt = parse_int_from_byte_array_00108e76(byteArrayPointer);\n  bytePointer = *byteArrayPointer;\n  stringLength = strlen((char *)bytePointer);\n  parsedLength = (ulong)parsedInt;\n  if (parsedLength <= stringLength) {\n    *byteArrayPointer = bytePointer + parsedLength;\n    if (dataPointer == (long *)0x0) {\n      return 1;\n    }\n    stringPointer = (void *)copy_and_null_terminate_string_00109a0b(bytePointer,parsedLength);\n    dataResult = find_named_type_0010914e(*dataStructures,stringPointer);\n    *dataPointer = dataResult;\n    free(stringPointer);\n    if (*dataPointer == 0) {\n      dataResult = find_string_in_data_structures_0010afd5(*dataStructures,dataStructures[1],bytePointer,(int)*byteArrayPointer - (int)bytePointer,0);\n      *dataPointer = dataResult;\njoined_r0x0010d1d8:\n      if (dataResult == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isSigned) {\n      dataResult = allocate_and_initialize_data_00113b71(*dataPointer);\n      *dataPointer = dataResult;\n    }\n    if (isVoid) {\n      dataResult = allocate_and_initialize_data_00113b4a(*dataPointer);\n      *dataPointer = dataResult;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(pnextByte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "FUN_00108ea1",
                "FUN_00113c43",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113bfa",
                "FUN_0010d559",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113dfe",
                "FUN_0010911f",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_00108e76",
                "FUN_00113cb9",
                "free",
                "FUN_0010d21c",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_and_initialize_data_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = generate_formatted_string_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_compatibility_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_message_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_message_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = check_function_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = drop_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = check_function_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = check_function_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_message_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_message_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_message_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_message_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_message_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_message_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_debug_info_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_data_structure_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_in_array_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = analyze_debug_record_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_data_structure_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_in_array_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = analyze_debug_record_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_data_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_debug_block_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = close_debug_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = record_debug_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_function_debugging_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = extract_section_info_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_pattern_match_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_pattern_match_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = extract_section_info_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = extract_and_process_binary_data_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_message_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,reverse_section_contents_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_message_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_message_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_message_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_message_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_message_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_message_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_malloc_and_get_section",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_get_full_section_contents",
                "dcgettext",
                "bfd_get_section_by_name",
                "strerror",
                "bfd_set_section_size",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_00113fb0",
                "bfd_create_gnu_debuglink_section",
                "FUN_001126c0",
                "free",
                "FUN_00115530",
                "bfd_get_arch",
                "FUN_00114190",
                "fopen",
                "fwrite",
                "xmalloc",
                "FUN_00105828",
                "fclose",
                "__errno_location",
                "FUN_0010551d",
                "bfd_set_format",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_timestamps_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorStr",
                "uVar4": "errorMsg",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime",
                "local_28": "backupAccessTime",
                "uStack_24": "backupModificationTime",
                "uStack_20": "backupChangeTime",
                "uStack_1c": "backupCreationTime"
            },
            "code": "\nvoid setFileTimestamps_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 errorMsg;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 backupAccessTime;\n  undefined4 backupModificationTime;\n  undefined4 backupChangeTime;\n  undefined4 backupCreationTime;\n  \n  backupAccessTime = *(undefined4 *)(fileInfo + 0x58);\n  backupModificationTime = *(undefined4 *)(fileInfo + 0x5c);\n  backupChangeTime = *(undefined4 *)(fileInfo + 0x60);\n  backupCreationTime = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorStr = strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(errorMsg,filePath,errorStr);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_timestamps_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "message",
                "iVar1": "errorType",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long message)\n\n{\n  int errorType;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorType);\n  }\n  fflush(_stdout);\n  if (message != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,message,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010871c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_001053d5",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_data_0010e2f0",
                "param_1": "paramArray",
                "param_2": "paramFlag",
                "param_3": "paramSize",
                "param_4": "paramValue",
                "param_5": "paramString",
                "lVar1": "tempVar1",
                "uVar2": "errorCode",
                "lVar3": "tempVar2",
                "uVar4": "errorMsg",
                "uVar5": "localizedMsg",
                "sVar6": "strLength",
                "lVar7": "index",
                "local_44": "localVar1",
                "uStack_40": "uStackVar1",
                "uStack_3f": "uStackVar2",
                "uStack_3e": "uStackVar3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessData_0010e2f0(long *paramArray,undefined paramFlag,int paramSize,undefined8 paramValue,char *paramString)\n\n{\n  long tempVar1;\n  undefined4 errorCode;\n  long tempVar2;\n  undefined8 errorMsg;\n  undefined8 localizedMsg;\n  size_t strLength;\n  long index;\n  undefined4 localVar1;\n  undefined uStackVar1;\n  undefined uStackVar2;\n  undefined2 uStackVar3;\n  undefined4 localVar2 [3];\n  \n  if (paramString == (char *)0x0) {\n    index = 0;\n  }\n  else {\n    tempVar2 = bfd_hash_lookup(paramArray + 7,paramString,1,1);\n    if (tempVar2 == 0) {\n      errorCode = bfd_get_error();\n      errorMsg = bfd_errmsg(errorCode);\n      localizedMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(localizedMsg,errorMsg);\n      return 0;\n    }\n    index = *(long *)(tempVar2 + 0x20);\n    if (index == -1) {\n      index = paramArray[6];\n      tempVar1 = paramArray[5];\n      *(long *)(tempVar2 + 0x20) = index;\n      if (tempVar1 == 0) {\n        paramArray[4] = tempVar2;\n      }\n      else {\n        *(long *)(tempVar1 + 0x18) = tempVar2;\n      }\n      paramArray[5] = tempVar2;\n      strLength = strlen(paramString);\n      paramArray[6] = index + 1 + strLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(index,&localVar1);\n  uStackVar2 = 0;\n  uStackVar1 = paramFlag;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)paramSize,&uStackVar3);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(paramValue,localVar2);\n  if ((ulong)paramArray[3] < paramArray[2] + 0xcU) {\n    paramArray[3] = paramArray[3] * 2;\n    index = xrealloc(paramArray[1]);\n    paramArray[1] = index;\n  }\n  index = paramArray[2];\n  tempVar2 = paramArray[1];\n  *(ulong *)(tempVar2 + index) = CONCAT26(uStackVar3,CONCAT15(uStackVar2,CONCAT14(uStackVar1,localVar1)));\n  *(undefined4 *)(tempVar2 + 8 + index) = localVar2[0];\n  paramArray[2] = paramArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)index >> 8),1);\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010e439",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010ed2c"
            ],
            "imported": false,
            "current_name": "process_data_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "comparisonResult",
                "uVar2": "result",
                "pcVar3": "comma",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "sectionLength",
                "uVar7": "updatedFlags",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int comparisonResult;\n  undefined8 result;\n  char *comma;\n  char *nextFlag;\n  size_t flagLength;\n  int sectionLength;\n  uint updatedFlags;\n  undefined returnValue [16];\n  \n  updatedFlags = 0;\n  do {\n    comma = strchr(sectionFlags,0x2c);\n    if (comma == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      sectionLength = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = comma + 1;\n      sectionLength = (int)comma - (int)sectionFlags;\n    }\n    flagLength = (size_t)sectionLength;\n    comparisonResult = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (comparisonResult == 0) {\n      updatedFlags = updatedFlags | 1;\n    }\n    else {\n      comparisonResult = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (comparisonResult == 0) {\n        updatedFlags = updatedFlags | 2;\n      }\n      else {\n        comparisonResult = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (comparisonResult == 0) {\n          updatedFlags = updatedFlags | 0x200;\n        }\n        else {\n          comparisonResult = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (comparisonResult == 0) {\n            updatedFlags = updatedFlags | 8;\n          }\n          else {\n            comparisonResult = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (comparisonResult == 0) {\n              updatedFlags = updatedFlags | 0x2000;\n            }\n            else {\n              comparisonResult = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (comparisonResult == 0) {\n                updatedFlags = updatedFlags | 0x10;\n              }\n              else {\n                comparisonResult = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (comparisonResult == 0) {\n                  updatedFlags = updatedFlags | 0x20;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (comparisonResult == 0) {\n                    updatedFlags = updatedFlags | 0x40;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (comparisonResult == 0) {\n                      updatedFlags = updatedFlags | 0x8000;\n                    }\n                    else {\n                      comparisonResult = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (comparisonResult == 0) {\n                        updatedFlags = updatedFlags | 0x8000000;\n                      }\n                      else {\n                        comparisonResult = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (comparisonResult == 0) {\n                          updatedFlags = updatedFlags | 0x100;\n                        }\n                        else {\n                          comparisonResult = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (comparisonResult == 0) {\n                            updatedFlags = updatedFlags | 0x800000;\n                          }\n                          else {\n                            comparisonResult = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (comparisonResult != 0) {\n                              comma = (char *)xmalloc((long)(sectionLength + 1));\n                              strncpy(comma,sectionFlags,flagLength);\n                              comma[flagLength] = '\\0';\n                              result = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(result,comma);\n                              result = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(result,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            updatedFlags = updatedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  returnValue._4_4_ = 0;\n  returnValue._0_4_ = updatedFlags;\n  returnValue._8_8_ = param4;\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_formatted_string_001125fa",
                "param_1": "arguments",
                "uVar1": "totalLength",
                "ppcVar2": "fileInfo",
                "sVar3": "fileInfoLength",
                "sVar4": "inputLength",
                "__s": "inputString"
            },
            "code": "\nchar * generateFormattedString_001125fa(char **arguments)\n\n{\n  ulong totalLength;\n  char **fileInfo;\n  size_t fileInfoLength;\n  size_t inputLength;\n  char *inputString;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  fileInfo = (char **)arguments[0x1d];\n  inputString = *arguments;\n  if ((fileInfo != (char **)0x0) && ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0)) {\n    fileInfoLength = strlen(*fileInfo);\n    inputLength = strlen(inputString);\n    totalLength = fileInfoLength + 3 + inputLength;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    inputString = DAT_00127a50;\n  }\n  return inputString;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strlen",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_status_00108f05"
            },
            "code": "\nundefined getStatus_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_status_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_memory_00108863",
                "puVar1": "dataPointer",
                "puVar2": "nextPointer"
            },
            "code": "\nvoid cleanupMemory_00108863(void)\n\n{\n  undefined4 *dataPointer;\n  undefined4 *nextPointer;\n  \n  dataPointer = (undefined4 *)&DAT_00127740;\n  do {\n    nextPointer = dataPointer + 6;\n    free(*(void **)(dataPointer + 4));\n    *(undefined8 *)(dataPointer + 4) = 0;\n    dataPointer = nextPointer;\n  } while (nextPointer != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_info",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "result",
                "puVar3": "debug_file_list",
                "puVar4": "temp",
                "lVar5": "counter",
                "puVar6": "head",
                "pcVar7": "current_filename",
                "puVar8": "tail",
                "bVar9": "flag"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_info,char *filename)\n\n{\n  int comparison_result;\n  undefined8 result;\n  undefined8 *debug_file_list;\n  undefined8 *temp;\n  long counter;\n  undefined8 *head;\n  char *current_filename;\n  undefined8 *tail;\n  byte flag;\n  \n  flag = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_info + 8) == 0) {\n    result = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    for (debug_file_list = *(undefined8 **)(*(long *)(source_info + 8) + 8); debug_file_list != (undefined8 *)0x0;\n        debug_file_list = (undefined8 *)*debug_file_list) {\n      comparison_result = filename_cmp(debug_file_list[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    debug_file_list = (undefined8 *)xmalloc(0x18);\n    head = *(undefined8 **)(source_info + 0x10);\n    tail = debug_file_list;\n    for (counter = 6; counter != 0; counter = counter + -1) {\n      *(undefined4 *)tail = 0;\n      tail = (undefined8 *)((long)tail + (ulong)flag * -8 + 4);\n    }\n    debug_file_list[1] = current_filename;\n    tail = (undefined8 *)*head;\n    while (temp = tail, temp != (undefined8 *)0x0) {\n      head = temp;\n      tail = (undefined8 *)*temp;\n    }\n    *head = debug_file_list;\nLAB_00108fad:\n    *(undefined8 **)(source_info + 0x10) = debug_file_list;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "check_function_00114190",
                "param_1": "input_strs",
                "param_2": "is_case_sensitive",
                "param_3": "flag",
                "uVar1": "temp",
                "plVar2": "current_str",
                "pplVar3": "temp_ptr",
                "iVar4": "result",
                "uVar5": "error_msg",
                "pplVar6": "prev_strs",
                "pplVar7": "current_match",
                "pplVar8": "next_match"
            },
            "code": "\nlong ** check_Function_00114190(long *input_strs,char is_case_sensitive,uint flag)\n\n{\n  uint temp;\n  long *current_str;\n  long **temp_ptr;\n  int result;\n  undefined8 error_msg;\n  long **prev_strs;\n  long **current_match;\n  long **next_match;\n  \n  current_match = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (is_case_sensitive == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_case_sensitive == '\\0') {\n    if ((flag & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      prev_strs = (long **)*current_match;\n      if (prev_strs == (long **)0x0) {\n        return (long **)0x0;\n      }\n      current_match = (long **)0x0;\n    }\n    else {\n      current_str = DAT_00127900[1];\n      if (*(char *)current_str == '!') {\n        result = fnmatch((char *)((long)current_str + 1),(char *)input_strs,0);\n        prev_strs = current_match;\n        if (result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      result = fnmatch((char *)current_str,(char *)input_strs,0);\n      if (result != 0) goto LAB_001141e5;\n      prev_strs = (long **)*current_match;\n      if (prev_strs == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flag & *(uint *)((long)prev_strs + 0x14)) != 0) {\n      current_str = prev_strs[1];\n      if (*(char *)current_str == '!') {\n        result = fnmatch((char *)((long)current_str + 1),(char *)input_strs,0);\n        if (result == 0) {\nLAB_0011438e:\n          *(undefined *)(prev_strs + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = fnmatch((char *)current_str,(char *)input_strs,0);\n        if ((current_match == (long **)0x0) && (result == 0)) {\n          next_match = (long **)*prev_strs;\n          current_match = prev_strs;\n          if (next_match == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_match = (long **)*prev_strs;\n    prev_strs = current_match;\n    if (next_match != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = strcmp((char *)DAT_00127900[1],(char *)input_strs);\n    if (result == 0) {\nLAB_001143cd:\n      temp = *(uint *)((long)current_match + 0x14);\n      if ((((temp & 1) != 0) && ((flag & 2) != 0)) ||\n         (((flag & 1) != 0 && ((temp & 2) != 0)))) {\n        error_msg = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(error_msg,input_strs);\n      }\n      if ((((temp & 8) != 0) && ((flag & 0x10) != 0)) || ((flag & 0x18) == 0x18)) {\n        error_msg = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(error_msg,input_strs);\n      }\n      if ((((temp & 0x20) == 0) || ((flag & 0x40) == 0)) && ((flag & 0x60) != 0x60)) {\n        *(uint *)((long)current_match + 0x14) = temp | flag;\n        return current_match;\n      }\n      error_msg = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(error_msg,input_strs);\n    }\n    current_match = (long **)*current_match;\n    if (current_match == (long **)0x0) goto LAB_001142a9;\n    result = strcmp((char *)current_match[1],(char *)input_strs);\n    if (result == 0) goto LAB_001143cd;\n    next_match = (long **)*current_match;\n    prev_strs = (long **)0x0;\n    if (next_match == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      current_match = prev_strs;\n      if (is_case_sensitive == '\\0') {\n        while (prev_strs = next_match, temp_ptr = current_match, next_match = prev_strs,\n              (flag & *(uint *)((long)prev_strs + 0x14)) != 0) {\n          current_str = prev_strs[1];\n          if (*(char *)current_str == '!') {\n            result = fnmatch((char *)((long)current_str + 1),(char *)input_strs,0);\n            if (result == 0) goto LAB_0011438e;\n            next_match = (long **)*prev_strs;\n            if ((long **)*prev_strs == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = fnmatch((char *)current_str,(char *)input_strs,0);\n            if ((current_match == (long **)0x0) && (result == 0)) {\n              current_match = prev_strs;\n              next_match = (long **)*prev_strs;\n              if ((long **)*prev_strs == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_match = (long **)*prev_strs;\n              if ((long **)*prev_strs == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = strcmp((char *)next_match[1],(char *)input_strs);\n        temp_ptr = prev_strs;\n        current_match = next_match;\n        if (result == 0) goto LAB_001143cd;\n      }\n      prev_strs = temp_ptr;\n      next_match = (long **)*next_match;\n      current_match = prev_strs;\n    } while (next_match != (long **)0x0);\nLAB_001142a1:\n    if (is_case_sensitive != '\\0') {\nLAB_001142a9:\n      prev_strs = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(prev_strs + 3) = (undefined  [16])0x0;\n      *(undefined *)(prev_strs + 2) = 0;\n      *(uint *)((long)prev_strs + 0x14) = flag;\n      prev_strs[5] = (long *)0x0;\n      current_match = prev_strs;\n      *prev_strs = (long *)DAT_00127900;\n      DAT_00127900 = current_match;\n      prev_strs[1] = input_strs;\n      return prev_strs;\n    }\n  }\nLAB_00114212:\n  if (current_match == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(current_match + 2) = 1;\n  return current_match;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba",
                "dcgettext",
                "fnmatch",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_function_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "build_attribute_function_00116490",
                "param_2": "num_attributes",
                "param_3": "attribute_name",
                "param_4": "attribute_data",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "bool_var",
                "puVar5": "ptr_var",
                "iVar6": "int_var",
                "lVar7": "loop_counter",
                "uVar8": "var8",
                "in_RAX": "attribute_type",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "ptr_var",
                "uVar13": "var13",
                "unaff_RBX": "ptr_var1",
                "unaff_RBP": "ptr_var2",
                "puVar14": "ptr_var3",
                "puVar15": "ptr_var4",
                "cVar16": "char_var",
                "puVar17": "ptr_var5",
                "puVar18": "ptr_var6",
                "in_R11": "loop_var",
                "unaff_R12": "ptr_var7",
                "puVar19": "ptr_var8",
                "unaff_R13": "ptr_var9",
                "__nmemb": "num_elements",
                "unaff_R14": "ptr_var10",
                "puVar20": "ptr_var11",
                "bVar21": "byte_var",
                "iVar22": "int_var2",
                "unaff_retaddr": "var14",
                "in_stack_00000020": "stack_var",
                "in_stack_00000028": "stack_ptr_var",
                "in_stack_00000030": "stack_ptr_var2",
                "in_stack_00000038": "stack_param",
                "in_stack_00000040": "stack_param2",
                "in_stack_00000048": "stack_ptr_var3"
            },
            "code": "\nulong build_attribute_function_00116490(undefined8 param_1,ulong num_attributes,ulong attribute_name,long attribute_data)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool bool_var;\n  ulong *ptr_var;\n  int int_var;\n  long loop_counter;\n  undefined8 var8;\n  ulong attribute_type;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr_var;\n  ulong var13;\n  ulong ptr_var1;\n  ulong ptr_var2;\n  ulong *ptr_var3;\n  undefined *ptr_var4;\n  char char_var;\n  undefined *ptr_var5;\n  undefined *ptr_var6;\n  ulong loop_var;\n  ulong *ptr_var7;\n  ulong *ptr_var8;\n  ulong ptr_var9;\n  size_t num_elements;\n  undefined8 *ptr_var10;\n  ulong *ptr_var11;\n  byte byte_var;\n  int int_var2;\n  ulong var14;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong stack_var;\n  ulong *stack_ptr_var;\n  undefined *stack_ptr_var2;\n  uint stack_param;\n  uint stack_param2;\n  undefined8 *stack_ptr_var3;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  loop_counter = attribute_data;\n  var10 = ptr_var2;\n  var13 = ptr_var9;\n  if (attribute_type == 0) {\n    if (num_attributes == 0x100) {\n      ptr_var7[7] = var14;\n      var11 = var14;\nLAB_001164af:\n      var9 = ptr_var9;\n      var13 = ptr_var9;\n      var14 = var11;\n    }\n    else {\n      ptr_var7[7] = param_9;\nLAB_0011669e:\n      var10 = ptr_var2;\n      var9 = ptr_var2;\n    }\nLAB_001164bb:\n    ptr_var7[8] = var9;\n    if (*(char *)((ptr_var7[3] - 1) + attribute_name) != '\\0') {\n      loop_counter = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_var8 = ptr_var7 + 9;\n    if (0xb < ptr_var1) {\n      var9 = (**(code **)(ptr_var10[1] + 0x40))(loop_counter);\n      *ptr_var8 = var9;\n      var9 = (**(code **)(ptr_var10[1] + 0x40))(loop_counter + 4);\n      ptr_var7[10] = var9;\n      num_attributes = (**(code **)(ptr_var10[1] + 0x40))(loop_counter + 8);\n      attribute_name = *ptr_var8;\n      ptr_var7[0xb] = num_attributes;\n      attribute_type = ptr_var7[10];\n      var9 = attribute_name + 3 & 0xfffffffffffffffc;\n      ptr_var7[0xf] = var9;\n      if (attribute_type != (attribute_type + 3 & 0xfffffffffffffffc)) {\n        loop_counter = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < num_attributes - 0x100) {\n        loop_counter = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + attribute_type + 0xc;\n      if (ptr_var1 < var11) {\n        loop_counter = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attribute_name < 2) {\n        loop_counter = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      ptr_var7[0xc] = loop_counter + 0xc;\n      loop_var = loop_counter + 0xc + var9;\n      ptr_var7[0xd] = loop_var;\n      ptr_var1 = ptr_var1 + (-0xc - (var9 + attribute_type));\n      attribute_data = loop_counter + var11;\n      ptr_var2 = var10;\n      ptr_var7 = ptr_var8;\n      ptr_var9 = var13;\n      if (attribute_name != 2) {\n        if (*(char *)(loop_counter + 0xc) == '$') {\n          if ((*(char *)(loop_counter + 0xd) == '\\x01') && (*(char *)(loop_counter + 0xe) == '1')) {\n            var10 = build_attribute_function_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < attribute_name) && (*(char *)(loop_counter + 0xc) == 'G')) &&\n                 (*(char *)(loop_counter + 0xd) == 'A')) &&\n                ((*(char *)(loop_counter + 0xe) == '$' && (*(char *)(loop_counter + 0xf) == '\\x01')))) {\n          if (*(char *)(loop_counter + 0x10) == '2') {\n            var10 = build_attribute_function_00116490();\n            return var10;\n          }\n          if (*(char *)(loop_counter + 0x10) == '3') {\n            var10 = build_attribute_function_00116490();\n            return var10;\n          }\n          loop_counter = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (ptr_var1 != 0) {\n      loop_counter = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stack_param | stack_param2 | param_8) == 0) {\n      var1 = *ptr_var10;\n      var2 = *stack_ptr_var3;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      num_elements = ((long)ptr_var8 - (long)stack_ptr_var >> 3) * -0x71c71c71c71c71c7;\n      qsort(stack_ptr_var,num_elements,0x48,compare_memory_blocks_0011a1b0);\n      for (ptr_var3 = stack_ptr_var; ptr_var3 < ptr_var8; ptr_var3 = ptr_var3 + 9) {\n        var10 = ptr_var3[2];\n        if (var10 != 0) {\n          var13 = ptr_var3[7];\n          var9 = ptr_var3[8];\n          ptr_var11 = ptr_var3;\n          int_var2 = 0;\n          if (var13 == var9) {\n            ptr_var3[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr_var = ptr_var11;\n                ptr_var11 = ptr_var + -9;\n                if (ptr_var11 < stack_ptr_var) goto LAB_001167f5;\n                var11 = ptr_var[-7];\n              } while (var11 == 0);\n              if ((*ptr_var11 != *ptr_var3) ||\n                 (int_var = memcmp((void *)ptr_var[-6],(void *)ptr_var3[3],*ptr_var3), int_var != 0))\n              break;\n              var3 = ptr_var[-2];\n              var12 = ptr_var[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  ptr_var3[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  ptr_var3[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  ptr_var[-1] = var12;\n                  ptr_var[-2] = var13;\n                  ptr_var3[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bool_var = int_var2 < 0x11;\n              int_var2 = int_var2 + 1;\n            } while (bool_var);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stack_ptr_var,num_elements,0x48,compare_records_0011a250);\n      ptr_var = (undefined *)xmalloc(stack_var * 2);\n      param_7 = 0;\n      param_9 = 0;\n      ptr_var6 = ptr_var;\n      for (ptr_var3 = stack_ptr_var; ptr_var3 < ptr_var8; ptr_var3 = ptr_var3 + 9) {\n        if (ptr_var3[2] != 0) {\n          ptr_var5 = ptr_var6 + 4;\n          ptr_var4 = ptr_var6 + 0xc;\n          if ((ptr_var3[7] == param_9) && (ptr_var3[8] == param_7)) {\n            (**(code **)(ptr_var10[1] + 0x50))(*ptr_var3,ptr_var6);\n            (**(code **)(ptr_var10[1] + 0x50))(0,ptr_var5);\n            (**(code **)(ptr_var10[1] + 0x50))(ptr_var3[2],ptr_var6 + 8);\n            var13 = ptr_var3[6];\n            var10 = *ptr_var3;\n            ptr_var6 = (undefined *)ptr_var3[3];\n            ptr_var5 = ptr_var4;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *ptr_var5 = *ptr_var6;\n              ptr_var6 = ptr_var6 + (ulong)byte_var * -2 + 1;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (loop_counter = var13 - var10; loop_counter != 0; loop_counter = loop_counter + -1) {\n                *ptr_var5 = 0;\n                ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr_var6 = ptr_var4 + var13;\n          }\n          else {\n            (**(code **)(ptr_var10[1] + 0x50))();\n            if (*(int *)(ptr_var10[1] + 8) == 5) {\n              char_var = (*(char *)(ptr_var10[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(ptr_var10[1] + 0x50))(char_var,ptr_var5);\n            (**(code **)(ptr_var10[1] + 0x50))(ptr_var3[2],ptr_var6 + 8);\n            var10 = *ptr_var3;\n            ptr_var6 = (undefined *)ptr_var3[3];\n            ptr_var5 = ptr_var4;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *ptr_var5 = *ptr_var6;\n              ptr_var6 = ptr_var6 + (ulong)byte_var * -2 + 1;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n            }\n            var13 = ptr_var3[6];\n            if (var10 < var13) {\n              for (loop_counter = var13 - var10; loop_counter != 0; loop_counter = loop_counter + -1) {\n                *ptr_var5 = 0;\n                ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            loop_counter = ptr_var10[1];\n            ptr_var4 = ptr_var4 + var13;\n            ptr_var6 = ptr_var4 + 8;\n            if ((*(int *)(loop_counter + 8) == 5) && (*(char *)(ptr_var10[0x22] + 4) == '\\x02')) {\n              (**(code **)(loop_counter + 0x38))(ptr_var3[7],ptr_var4);\n              (**(code **)(ptr_var10[1] + 0x38))(ptr_var3[8],ptr_var6);\n              ptr_var6 = ptr_var4 + 0x10;\n            }\n            else {\n              (**(code **)(loop_counter + 0x50))(ptr_var3[7],ptr_var4);\n              (**(code **)(ptr_var10[1] + 0x50))(ptr_var3[8],ptr_var4 + 4);\n            }\n            param_9 = ptr_var3[7];\n            param_7 = ptr_var3[8];\n          }\n        }\n      }\n      var13 = (long)ptr_var6 - (long)ptr_var;\n      var10 = var13;\n      ptr_var6 = ptr_var;\n      if (var13 < stack_var) {\n        for (; stack_var = var13, var10 != 0; var10 = var10 - 1) {\n          *stack_ptr_var2 = *ptr_var6;\n          ptr_var6 = ptr_var6 + (ulong)byte_var * -2 + 1;\n          stack_ptr_var2 = stack_ptr_var2 + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(ptr_var);\nLAB_001166f8:\n      free(stack_ptr_var);\n      return stack_var;\n    }\n    if (((stack_param2 | param_8) == 0) || (stack_param == 0)) {\n      if (stack_param2 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    loop_counter = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (attribute_type == 0x10) {\n      var11 = (**(code **)(ptr_var10[1] + 0x28))(loop_var);\n      var9 = (**(code **)(ptr_var10[1] + 0x28))(ptr_var7[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (ptr_var7[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = var14;\n        }\n        attribute_name = *ptr_var7;\n        ptr_var7[7] = var11;\n        var13 = var9;\n        var14 = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param_9;\n        }\n        attribute_name = *ptr_var7;\n        ptr_var7[7] = var11;\n        var10 = var9;\n        param_9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (attribute_type < 0x11) {\n      if (attribute_type == 4) {\n        var11 = (**(code **)(ptr_var10[1] + 0x40))(loop_var);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (attribute_type == 8) {\n        var10 = process_build_attributes_001086af();\n        return var10;\n      }\n    }\n    loop_counter = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (loop_counter != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,ptr_var10,stack_ptr_var3,loop_counter);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "build_attribute_function_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_blocks_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_message_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTargetPtr = targetList;\n  while( true ) {\n    currentTarget = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fprintf",
                "dcgettext",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionContext",
                "param_2": "newFunctionAddress",
                "param_3": "unusedParam",
                "param_4": "result",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionContext,undefined8 newFunctionAddress,undefined8 unusedParam,undefined8 result)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionContext + 8) == 0) || (currentBlock = *(long *)(functionContext + 0x20), currentBlock == 0)) ||\n     (*(long *)(functionContext + 0x18) == 0)) {\n    errorString = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) == 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newFunctionAddress;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(undefined (*) [16])(functionContext + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorString = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010be86:\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_001083b7",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_00113da9",
                "param_1": "byteParam",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "dataPtr",
                "lVar2": "loopCounter",
                "puVar3": "ptr",
                "bVar4": "byteVar",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeData_00113da9(byte byteParam,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *dataPtr;\n  long loopCounter;\n  undefined8 *ptr;\n  byte byteVar;\n  undefined result [16];\n  \n  byteVar = 0;\n  result._0_8_ = allocate_and_initialize_data_00112904(8 - (uint)byteParam);\n  if (result._0_8_ != 0) {\n    dataPtr = (undefined8 *)xmalloc(0x28);\n    ptr = dataPtr + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)ptr = 0;\n      ptr = (undefined8 *)((long)ptr + (ulong)byteVar * -8 + 4);\n    }\n    *dataPtr = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = dataPtr;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_field2"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1[2];\n  if (record1_field2 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "initialize_data_0010a69a",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "arraySize",
                "sVar3": "stringLength",
                "uVar4": "allocation",
                "uVar5": "hasData",
                "local_60": "buffer"
            },
            "code": "\nundefined4 initializeData_0010a69a(long dataPtr,undefined8 paramPtr,int size,char flag,uint value)\n\n{\n  undefined4 result;\n  long arraySize;\n  size_t stringLength;\n  undefined8 allocation;\n  undefined hasData;\n  char buffer [48];\n  \n  if (size == 0) {\n    buffer[0] = '\\0';\n    hasData = 0;\n    arraySize = 0;\n  }\n  else {\n    arraySize = resize_and_initialize_array_00109c2e();\n    if (arraySize < 0) {\n      return 0;\n    }\n    hasData = 1;\n    sprintf(buffer,\"%ld=\",arraySize);\n  }\n  stringLength = strlen(buffer);\n  sprintf(buffer + stringLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_structure_00109b52(dataPtr,buffer,arraySize,hasData,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  arraySize = *(long *)(dataPtr + 0x60);\n  allocation = xmalloc(1);\n  *(undefined8 *)(arraySize + 0x20) = allocation;\n  **(undefined **)(*(long *)(dataPtr + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_section_00115b70",
                "param_1": "sectionName",
                "pcVar1": "currentSection",
                "iVar2": "sectionComparisonResult",
                "iVar3": "sectionType",
                "lVar4": "numMatchesRemove",
                "lVar5": "numMatchesCopy",
                "uVar6": "result",
                "plVar7": "updateAndRemoveSections"
            },
            "code": "\nundefined8 processSection_00115b70(char **sectionName)\n\n{\n  char *currentSection;\n  int sectionComparisonResult;\n  int sectionType;\n  long numMatchesRemove;\n  long numMatchesCopy;\n  undefined8 result;\n  long *updateAndRemoveSections;\n  \n  numMatchesRemove = check_function_00114190(*sectionName,0,4);\n  if (numMatchesRemove == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      numMatchesRemove = check_function_00114190(*sectionName,0,1);\n      numMatchesCopy = check_function_00114190(*sectionName,0,2);\n      if (numMatchesRemove != 0) {\n        if (numMatchesCopy != 0) {\n          currentSection = *sectionName;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(result,currentSection);\n        }\n        if (numMatchesRemove != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *sectionName;\n          updateAndRemoveSections = DAT_001279d8;\n          do {\n            sectionType = strcmp(currentSection,(char *)updateAndRemoveSections[1]);\n            if (sectionType == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(result,currentSection);\n            }\n            updateAndRemoveSections = (long *)*updateAndRemoveSections;\n          } while (updateAndRemoveSections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (numMatchesCopy == 0)) {\n        return 1;\n      }\n    }\n    sectionType = DAT_00127a48;\n    if ((*(byte *)((long)sectionName + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        currentSection = *sectionName;\n        sectionComparisonResult = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((sectionComparisonResult != 0) && (sectionComparisonResult = strcmp(currentSection,\".gnu_debuglink\"), sectionComparisonResult != 0)) {\n          sectionType = strcmp(currentSection,\".reloc\");\n          if (sectionType != 0) {\n            return 1;\n          }\n          result = process_operation_0010829e();\n          return result;\n        }\n      }\n      if (sectionType == 5) {\n        result = check_string_length_00113ede(sectionName);\n        return result;\n      }\n      if (sectionType == 4) {\n        return 0;\n      }\n    }\n    if (sectionType == 6) {\n      result = calculate_inverse_check_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_00114190",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "process_section_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_reloc_table_00116030",
                "param_1": "argv",
                "param_2": "argc",
                "plVar1": "ptr",
                "lVar2": "offset",
                "lVar3": "data_start",
                "lVar4": "data_end",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "reloc_upper_bound",
                "__ptr": "reloc_table",
                "lVar7": "reloc_count",
                "extraout_RAX": "exit_status",
                "lVar8": "index",
                "uStack_28": "default_result"
            },
            "code": "\n\n\nundefined8 process_reloc_table_00116030(undefined8 *argv,long argc)\n\n{\n  long *ptr;\n  long offset;\n  long data_start;\n  long data_end;\n  int error_code;\n  undefined8 result;\n  long reloc_upper_bound;\n  void *reloc_table;\n  long reloc_count;\n  undefined8 exit_status;\n  long index;\n  undefined8 default_result;\n  \n  if (*(long *)(argc + 0x60) == 0) {\n    return result;\n  }\n  reloc_upper_bound = bfd_get_reloc_upper_bound();\n  if (reloc_upper_bound < 0) {\n    if ((reloc_upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      print_error_message_0011a110(*argv);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_upper_bound != 0) {\n    reloc_table = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(argv,argc,reloc_table);\n    data_end = _DAT_00128680;\n    data_start = _DAT_00128568;\n    reloc_upper_bound = _fwrite;\n    if (reloc_count < 0) {\n      print_error_message_0011a110(*argv);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      index = 0;\n      do {\n        ptr = **(long ***)((long)reloc_table + index * 8);\n        if ((((ptr != (long *)0x0) && (offset = *ptr, offset != 0)) && (offset != reloc_upper_bound)) &&\n           ((offset != data_end && (offset != data_start)))) {\n          *(uint *)(offset + 0x18) = *(uint *)(offset + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (reloc_count != index);\n    }\n    free(reloc_table);\n    return exit_status;\n  }\n  return default_result;\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_001083b7",
                "fwrite",
                "FUN_0011a110",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_reloc_table_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "string_array",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **string_array)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (string_array == (char **)0x0) {\n    return 0;\n  }\n  string = *string_array;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = compare_strings_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1_value",
                "lVar2": "record2_value",
                "iVar3": "result",
                "uVar4": "mask"
            },
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long record1_value;\n  long record2_value;\n  int result;\n  uint mask;\n  \n  record1_value = *record1;\n  record2_value = *record2;\n  mask = *(uint *)(record2_value + 0x24) & 0x102;\n  if ((*(uint *)(record1_value + 0x24) & 0x102) == 0x102) {\n    if (mask != 0x102) {\n      return 1;\n    }\n  }\n  else if (mask == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1_value + 0x38) <= *(ulong *)(record2_value + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2_value + 0x38) <= *(ulong *)(record1_value + 0x38)) {\n      if (*(ulong *)(record2_value + 0x40) < *(ulong *)(record1_value + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2_value + 0x40) <= *(ulong *)(record1_value + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1_value + 0x18) <= *(uint *)(record2_value + 0x18)) {\n            return -(uint)(*(uint *)(record1_value + 0x18) < *(uint *)(record2_value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_data_0010c892",
                "param_1": "dataPointer",
                "param_2": "structPointer",
                "cVar1": "result",
                "lVar2": "allocatedData",
                "lVar3": "debugTagType",
                "uVar4": "returnVal",
                "puVar5": "currentPointer",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugData_0010c892(undefined8 dataPointer,long structPointer)\n\n{\n  char result;\n  long allocatedData;\n  long debugTagType;\n  undefined8 returnVal;\n  undefined8 *currentPointer;\n  int kind;\n  \n  if (*(char *)(structPointer + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (currentPointer = *(undefined8 **)(structPointer + 0x1a0); currentPointer != (undefined8 *)0x0;\n        currentPointer = (undefined8 *)*currentPointer) {\n      kind = *(int *)(currentPointer + 2);\n      debugTagType = currentPointer[1];\n      if (kind != 0) {\n        if (debugTagType != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnVal = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnVal);\n        }\nLAB_0010c910:\n        currentPointer[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (debugTagType == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      allocatedData = allocate_and_initialize_data_00112904(kind,0);\n      if (allocatedData == 0) goto LAB_0010c910;\n      debugTagType = check_debug_tag_type_0010c6be(dataPointer,debugTagType,allocatedData);\n      currentPointer[3] = debugTagType;\n      if (debugTagType == 0) goto LAB_0010c916;\n    }\n    returnVal = 1;\n  }\n  else {\n    result = update_debug_record_0010c1c6();\n    if (result != '\\0') {\n      result = end_function_debugging_0010be1a(dataPointer,*(undefined8 *)(structPointer + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(structPointer + 0x60) = 0;\n        *(undefined8 *)(structPointer + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnVal = 0;\n  }\n  return returnVal;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "fprintf",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "allocate_and_initialize_data_00112904",
                "param_1": "sourceValue",
                "param_2": "destinationValue",
                "puVar1": "allocatedData"
            },
            "code": "\nvoid allocateAndInitializeData_00112904(undefined4 sourceValue,undefined4 destinationValue)\n\n{\n  undefined4 *allocatedData;\n  \n  allocatedData = (undefined4 *)xmalloc(0x18);\n  *allocatedData = sourceValue;\n  allocatedData[1] = destinationValue;\n  *(undefined (*) [16])(allocatedData + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c6be",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113da9",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113d6e",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_0010c218",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "unusedValue",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 unusedValue;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = unusedValue;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00114460",
                "FUN_00115a90",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0011173a",
                "FUN_00114190",
                "FUN_0010afd5",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_0010ee3f",
                "FUN_00115f50",
                "FUN_0010b0fa",
                "FUN_0010554f",
                "FUN_00108898",
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_callbacks_0011a390",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "loopIndex",
                "plVar4": "ptrList",
                "uVar5": "count"
            },
            "code": "\nvoid executeCallbacks_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long loopIndex;\n  long *ptrList;\n  uint count;\n  \n  ptrList = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(ptrList + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)ptrList[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          loopIndex = prevIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)ptrList[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)ptrList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)ptrList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)ptrList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)ptrList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)ptrList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)ptrList[prevIndex + 2])();\n            loopIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)ptrList[loopIndex + 2])();\n            index = loopIndex + -1;\n            (*(code *)ptrList[loopIndex + 1])();\n            (*(code *)ptrList[loopIndex])();\n            (*(code *)ptrList[index])();\n            (*(code *)ptrList[loopIndex + -2])();\n            (*(code *)ptrList[loopIndex + -3])();\n            (*(code *)ptrList[loopIndex + -4])();\n            (*(code *)ptrList[loopIndex + -5])();\n            loopIndex = loopIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      ptrList = (long *)*ptrList;\n    } while (ptrList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_callbacks_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_process_data_0010e842",
                "param_1": "input",
                "param_2": "string",
                "param_3": "integer",
                "param_4": "output",
                "__s": "formatted_string",
                "sVar1": "string_length",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] format_and_process_data_0010e842(undefined8 input,char *string,undefined8 integer,undefined8 output)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",string,integer);\n  result._0_4_ = process_data_0010e2f0(input,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = output;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_process_data_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "allocate_and_initialize_data_00113cb9",
                "param_1": "input_data",
                "lVar1": "allocated_data"
            },
            "code": "\nlong allocate_and_initialize_data_00113cb9(long input_data)\n\n{\n  long allocated_data;\n  \n  if (input_data != 0) {\n    allocated_data = allocate_and_initialize_data_00113cb9_00112904(0xe,0);\n    if (allocated_data == 0) {\n      allocated_data = 0;\n    }\n    else {\n      *(long *)(allocated_data + 0x10) = input_data;\n    }\n    return allocated_data;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_data_0010eafe",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "char1",
                "__s": "extractedString",
                "sVar2": "length1",
                "sVar3": "length2",
                "__s_00": "combinedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processData_0010eafe(long data,char *string1,char char1)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  \n  if ((*(int *)(data + 0x1f8) == 0) && (*(long *)(data + 0x1e8) == -1)) {\n    extractedString = (char *)extract_and_remove_ptr_from_param_00109b2f();\n    length1 = strlen(string1);\n    length2 = strlen(extractedString);\n    combinedString = (char *)xmalloc(length1 + 3 + length2);\n    sprintf(combinedString,\"%s:%c%s\",string1,(ulong)((-(uint)(char1 == '\\0') & 0x20) + 0x46),extractedString);\n    *(undefined8 *)(data + 0x1e8) = *(undefined8 *)(data + 0x10);\n    result = process_data_0010e2f0(data,0x24,0,0,combinedString);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_data_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_data_00113df2",
                "param_1": "dataSize",
                "allocate_and_initialize_data_00112904": "allocateAndInitializeData"
            },
            "code": "\nvoid initializeData_00113df2(undefined4 dataSize)\n\n{\n  allocateAndInitializeData(4,dataSize);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "generate_formatted_string_0010a377",
                "param_1": "inputParameter",
                "__s": "firstString",
                "__s_00": "secondString",
                "sVar3": "firstStringLength",
                "sVar4": "secondStringLength",
                "__s_01": "resultString",
                "uVar2": "returnValue",
                "cVar1": "charValue",
                "uVar5": "useCharValue"
            },
            "code": "\nundefined4 generateFormattedString_0010a377(long inputParameter)\n\n{\n  char charValue;\n  undefined4 returnValue;\n  char *firstString;\n  char *secondString;\n  size_t firstStringLength;\n  size_t secondStringLength;\n  char *resultString;\n  undefined useCharValue;\n  \n  useCharValue = 1;\n  charValue = *(char *)(*(long *)(inputParameter + 0x60) + 0x1c);\n  firstString = (char *)extract_and_remove_ptr_from_param_00109b2f();\n  if (charValue == '\\0') {\n    useCharValue = *(undefined *)(*(long *)(inputParameter + 0x60) + 0x1c);\n  }\n  secondString = (char *)extract_and_remove_ptr_from_param_00109b2f(inputParameter);\n  firstStringLength = strlen(firstString);\n  secondStringLength = strlen(secondString);\n  resultString = (char *)xmalloc(firstStringLength + 3 + secondStringLength);\n  sprintf(resultString,\"@%s,%s\",secondString,firstString);\n  free(secondString);\n  free(firstString);\n  returnValue = initialize_data_structure_00109b52(inputParameter,resultString,0,useCharValue,0);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_and_append_data_0010d882",
                "param_1": "data_structure",
                "param_2": "input_string",
                "param_3": "output_data",
                "param_4": "error_flag",
                "iVar1": "iterations",
                "pcVar2": "current_char",
                "cVar3": "current_char_value",
                "lVar4": "allocated_memory",
                "pcVar5": "current_position",
                "uVar6": "index",
                "bVar7": "is_not_zero",
                "local_50": "total_data_entries",
                "local_4c": "parse_integer_result",
                "local_48": "integer_value",
                "local_44": "inner_iterations",
                "local_40": "data_structure_entry"
            },
            "code": "\nundefined8 parse_and_append_data_0010d882(long data_structure,char **input_string,long *output_data,undefined *error_flag)\n\n{\n  int iterations;\n  char *current_char;\n  char current_char_value;\n  long allocated_memory;\n  char *current_position;\n  ulong index;\n  bool is_not_zero;\n  uint total_data_entries;\n  undefined4 parse_integer_result;\n  uint integer_value;\n  int inner_iterations;\n  undefined8 data_structure_entry [2];\n  \n  current_char = *input_string;\n  parse_integer_result = 10;\n  if (output_data != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_data = allocated_memory;\n    *error_flag = 0;\n  }\n  total_data_entries = 0;\n  while( true ) {\n    current_position = *input_string;\n    current_char_value = *current_position;\n    if ((current_char_value == '_' || current_char_value == '\\0') || (current_char_value == 'e')) break;\n    if ((current_char_value == 'N') || (current_char_value == 'T')) {\n      *input_string = current_position + 1;\n      if (current_char_value == 'T') {\n        inner_iterations = 1;\n      }\n      else {\n        current_char_value = parse_integer_00108ea1(input_string,&inner_iterations);\n        if (current_char_value == '\\0') goto LAB_0010d958;\n      }\n      current_char_value = parse_integer_00108ea1(input_string,&integer_value);\n      if ((current_char_value == '\\0') || (*(uint *)(data_structure + 0x28) <= integer_value)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_char);\n        return 0;\n      }\n      index = (ulong)integer_value;\n      while (iterations = inner_iterations + -1, is_not_zero = inner_iterations != 0, inner_iterations = iterations, is_not_zero) {\n        data_structure_entry[0] = *(undefined8 *)(*(long *)(data_structure + 0x20) + index * 0x10);\n        current_char_value = append_data_to_structure_0010d7d4(data_structure,data_structure_entry,output_data,&total_data_entries,&parse_integer_result);\n        if (current_char_value == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char_value = append_data_to_structure_0010d7d4(data_structure,input_string,output_data,&total_data_entries,&parse_integer_result);\n      if (current_char_value == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_data == (long *)0x0) {\n    if (current_char_value != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_data + (ulong)total_data_entries * 8) = 0;\n    if (*current_position != 'e') goto LAB_0010d9fa;\n    *error_flag = 1;\n  }\n  current_position = current_position + 1;\n  *input_string = current_position;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_position >> 8),1);\n}\n\n",
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "xmalloc",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_append_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "arrayPtr",
                "param_2": "value",
                "param_3": "size",
                "param_4": "length",
                "puVar1": "newArray",
                "pauVar2": "existingArray",
                "lVar3": "count",
                "puVar4": "currentPtr",
                "bVar5": "flag"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**arrayPtr) [16],undefined8 value,undefined4 size,undefined4 length)\n\n{\n  undefined4 *newArray;\n  undefined (*existingArray) [16];\n  long count;\n  undefined4 *currentPtr;\n  byte flag;\n  \n  flag = 0;\n  newArray = (undefined4 *)xmalloc(0x28);\n  currentPtr = newArray;\n  for (count = 10; count != 0; count = count + -1) {\n    *currentPtr = 0;\n    currentPtr = currentPtr + (ulong)flag * -2 + 1;\n  }\n  existingArray = *arrayPtr;\n  *(undefined8 *)(newArray + 2) = value;\n  newArray[5] = size;\n  newArray[6] = length;\n  if (existingArray == (undefined (*) [16])0x0) {\n    existingArray = (undefined (*) [16])xmalloc(0x10);\n    *existingArray = ZEXT816(0);\n    *arrayPtr = existingArray;\n    *(undefined (**) [16])(*existingArray + 8) = existingArray;\n  }\n  **(undefined8 **)(*existingArray + 8) = newArray;\n  *(undefined4 **)(*existingArray + 8) = newArray;\n  return newArray;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "param_1": "record_ptr",
                "param_2": "debug_ptr",
                "param_3": "unit_ptr",
                "uVar1": "debug_msg",
                "puVar2": "current_ptr",
                "uVar3": "count",
                "puVar4": "new_record_ptr",
                "lVar5": "index",
                "puVar6": "temp_ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordLineDebugInfo_0010bf86(long record_ptr,undefined8 debug_ptr,undefined8 unit_ptr)\n\n{\n  undefined8 debug_msg;\n  undefined8 *current_ptr;\n  ulong count;\n  undefined4 *new_record_ptr;\n  long index;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    debug_msg = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",debug_msg);\n    debug_msg = 0;\n  }\n  else {\n    index = *(long *)(record_ptr + 0x28);\n    if ((index != 0) && (*(long *)(index + 8) == *(long *)(record_ptr + 0x10))) {\n      count = 0;\n      do {\n        if (*(long *)(index + 0x10 + count * 8) == -1) {\n          current_ptr = (undefined8 *)(count & 0xffffffff);\n          *(undefined8 *)(index + 0x10 + (long)current_ptr * 8) = debug_ptr;\n          *(undefined8 *)(index + 0x60 + (long)current_ptr * 8) = unit_ptr;\n          goto LAB_0010c056;\n        }\n        count = count + 1;\n      } while (count != 10);\n    }\n    new_record_ptr = (undefined4 *)xmalloc(0xb0);\n    temp_ptr = new_record_ptr;\n    for (index = 0x2c; index != 0; index = index + -1) {\n      *temp_ptr = 0;\n      temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n    }\n    debug_msg = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_record_ptr + 4) = debug_ptr;\n    *(undefined8 *)(new_record_ptr + 2) = debug_msg;\n    *(undefined8 *)(new_record_ptr + 0x18) = unit_ptr;\n    temp_ptr = new_record_ptr + 6;\n    for (index = 0x48; index != 0; index = index + -1) {\n      *(undefined *)temp_ptr = 0xff;\n      temp_ptr = (undefined4 *)((long)temp_ptr + (ulong)flag * -2 + 1);\n    }\n    current_ptr = *(undefined8 **)(record_ptr + 0x28);\n    if (current_ptr == (undefined8 *)0x0) {\n      current_ptr = *(undefined8 **)(record_ptr + 8);\n      current_ptr[2] = new_record_ptr;\n    }\n    else {\n      *current_ptr = new_record_ptr;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_record_ptr;\nLAB_0010c056:\n    debug_msg = CONCAT71((int7)((ulong)current_ptr >> 8),1);\n  }\n  return debug_msg;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_info_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "patternPtr",
                "param_2": "stringPtr",
                "__pattern": "pattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **patternPtr,char **stringPtr)\n\n{\n  char *pattern;\n  int matchResult;\n  \n  pattern = *patternPtr;\n  if (*pattern == '!') {\n    matchResult = fnmatch(pattern + 1,*stringPtr,0);\n    if (matchResult == 0) {\n      *(undefined *)(stringPtr + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(pattern,*stringPtr,0);\n    if (matchResult == 0) {\n      *(undefined *)(stringPtr + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "functionPtr",
                "param_2": "paramLen",
                "param_3": "paramData",
                "param_4": "paramType",
                "param_5": "debugRecord",
                "puVar1": "currentNodePtr",
                "uVar2": "errorMessage",
                "puVar3": "recordPtr",
                "puVar4": "tempNodePtr",
                "lVar5": "loopCounter",
                "puVar6": "lastNodePtr",
                "puVar7": "tempRecordPtr",
                "bVar8": "byteVar"
            },
            "code": "\n\n\nundefined8\nrecordParameter_0010bd62(long functionPtr,long paramLen,long paramData,undefined4 paramType,undefined8 debugRecord)\n\n{\n  undefined8 *currentNodePtr;\n  undefined8 errorMessage;\n  undefined4 *recordPtr;\n  undefined8 *tempNodePtr;\n  long loopCounter;\n  undefined8 *lastNodePtr;\n  undefined4 *tempRecordPtr;\n  byte byteVar;\n  \n  byteVar = 0;\n  if (paramLen == 0) {\n    return 0;\n  }\n  if (paramData != 0) {\n    if ((*(long *)(functionPtr + 8) != 0) && (*(long *)(functionPtr + 0x18) != 0)) {\n      recordPtr = (undefined4 *)xmalloc(0x28);\n      tempRecordPtr = recordPtr;\n      for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *tempRecordPtr = 0;\n        tempRecordPtr = tempRecordPtr + (ulong)byteVar * -2 + 1;\n      }\n      loopCounter = *(long *)(functionPtr + 0x18);\n      *(long *)(recordPtr + 2) = paramLen;\n      *(long *)(recordPtr + 4) = paramData;\n      recordPtr[6] = paramType;\n      currentNodePtr = *(undefined8 **)(loopCounter + 8);\n      *(undefined8 *)(recordPtr + 8) = debugRecord;\n      lastNodePtr = (undefined8 *)(loopCounter + 8);\n      while (tempNodePtr = currentNodePtr, tempNodePtr != (undefined8 *)0x0) {\n        lastNodePtr = tempNodePtr;\n        currentNodePtr = (undefined8 *)*tempNodePtr;\n      }\n      *lastNodePtr = recordPtr;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_files_00104ea2",
                "unaff_R12": "archiveFilePath",
                "param_11": "writeMode",
                "ppcVar6": "archiveFile",
                "print_error_message_001126c0": "printErrorMessage",
                "unaff_R15": "archiveIterator",
                "bVar17": "isWindows",
                "unaff_retaddr": "returnAddress",
                "param_7": "archiveFileName",
                "param_8": "fileSize",
                "param_9": "tempDirPath",
                "param_10": "tempArchivePath",
                "stat": "FileStats",
                "unaff_EBX": "isStatSuccess",
                "unaff_RBP": "archiveFileStats",
                "pcVar15": "currentPath",
                "unaff_R13": "tempDirInfo",
                "param_19": "archiveFileSize"
            },
            "code": "\nvoid extractAndCopyFiles_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **archiveFile;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int isStatSuccess;\n  stat *archivestat;\n  char *currentPath;\n  stat *psVar16;\n  char *archiveFilePath;\n  undefined8 *tempDirInfo;\n  char **archiveIterator;\n  byte isWindows;\n  undefined8 returnAddress;\n  undefined8 *archiveFileName;\n  long *fileSize;\n  char *tempDirPath;\n  undefined8 *tempArchivePath;\n  undefined8 writeMode;\n  undefined8 in_stack_00000030;\n  uint param_18;\n  long archiveFileSize;\n  \n  isWindows = 0;\ncode_r0x00104ea2:\n  archiveFile = (char **)bfd_openw(archiveFilePath,writeMode);\n  if (archiveFile == (char **)0x0) {\nLAB_00104e80:\n    printErrorMessage(archiveFilePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(archiveIterator,archiveFile,returnAddress);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(archiveIterator);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(archiveFile);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      printErrorMessage(archiveFilePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(archiveFile);\n    archiveFile = archiveIterator;\n    if (cVar1 == '\\0') {\n      printErrorMessage(archiveFilePath,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (isStatSuccess == 0)) {\n      set_file_timestamps_0011a350(archiveFilePath,archivestat);\n    }\n    lVar12 = bfd_openr(archiveFilePath,writeMode);\n    tempDirInfo[2] = lVar12;\n    *fileSize = lVar12;\n    fileSize = (long *)(lVar12 + 0xf0);\n    archiveIterator = (char **)bfd_openr_next_archived_file(tempArchivePath,archiveFile);\n    bfd_close(archiveFile);\n    while ((DAT_00127a40 == 0 && (archiveIterator != (char **)0x0))) {\n      pcVar10 = *archiveIterator;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        currentPath = pcVar7;\n        if ((*pcVar7 == '.') && (currentPath = pcVar7 + 1, pcVar7[1] == '.')) {\n          currentPath = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n        }\n        pcVar7 = currentPath;\n        if (*currentPath == '/') {\n          extract_and_copy_files_001052a2();\n          return;\n        }\n      }\n      archivestat = (stat *)&stack0x00000050;\n      archiveFilePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      iVar2 = stat(archiveFilePath,archivestat);\n      puVar8 = tempDirInfo;\n      if (-1 < iVar2) {\n        lVar12 = create_temp_directory_0011a0e0(archiveFilePath);\n        free(archiveFilePath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *archiveIterator;\n        *puVar8 = tempDirInfo;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        archiveFilePath = (char *)concat(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      isStatSuccess = 0;\n      if (DAT_001279eb != '\\0') {\n        psVar16 = archivestat;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)isWindows * -8 + 4);\n        }\n        archiveFile = (char **)archiveIterator[0x1d];\n        if ((char **)archiveIterator[0x1d] == (char **)0x0) {\n          archiveFile = archiveIterator;\n        }\n        isStatSuccess = (**(code **)(archiveFile[1] + 0x1e8))(archiveIterator,archivestat);\n        if (isStatSuccess != 0) {\n          pcVar10 = *archiveIterator;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n        }\n      }\n      tempDirInfo = (undefined8 *)xmalloc(0x18);\n      tempDirInfo[1] = archiveFilePath;\n      *tempDirInfo = puVar8;\n      tempDirInfo[2] = 0;\n      cVar1 = bfd_check_format(archiveIterator,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        archiveFile = (char **)bfd_openw(archiveFilePath,*(undefined8 *)archiveIterator[1]);\n        if (archiveFile == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      printErrorMessage(0,archiveIterator,0,uVar11);\n      archiveFile = (char **)bfd_openw(archiveFilePath,writeMode);\n      if (archiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)archiveIterator[0x1d];\n      if ((char **)archiveIterator[0x1d] == (char **)0x0) {\n        ppcVar3 = archiveIterator;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(archiveIterator);\n      lVar12 = archiveFileSize;\n      if (iVar2 == 0) {\n        if (archiveFileSize < 0) {\n          generate_formatted_string_001125fa(archiveIterator);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(archiveIterator,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279e9 != '\\0') {\n              pcVar10 = *archiveFile;\n              uVar11 = generate_formatted_string_001125fa(archiveIterator);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*archiveFile,param_18 | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(archiveFile);\n                archiveFile = archiveIterator;\n                if (cVar1 == '\\0') {\n                  printErrorMessage(archiveFilePath,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,archiveIterator);\n              ppcVar3 = archiveIterator;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,archiveFile), ppcVar3 = archiveFile, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            printErrorMessage(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = generate_formatted_string_001125fa(archiveIterator);\n            print_error_message_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        printErrorMessage(0,archiveIterator,0,0);\n      }\n      cVar1 = bfd_close_all_done(archiveFile);\n      if (cVar1 == '\\0') {\n        printErrorMessage(archiveFilePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archiveFilePath);\n      DAT_00127a40 = 1;\n    }\n    *fileSize = 0;\n    pvVar4 = (void *)xstrdup(*archiveFileName);\n    if (DAT_00127a40 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(archiveFileName);\n    if (cVar1 == '\\0') {\n      DAT_00127a40 = 1;\n      printErrorMessage(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*tempArchivePath);\n    cVar1 = bfd_close(tempArchivePath);\n    if (cVar1 == '\\0') {\n      DAT_00127a40 = 1;\n      printErrorMessage(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (tempDirInfo != (undefined8 *)0x0) {\n    if (tempDirInfo[2] == 0) {\n      rmdir((char *)tempDirInfo[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirInfo[1]);\n    }\n    free((void *)tempDirInfo[1]);\n    puVar8 = (undefined8 *)*tempDirInfo;\n    free(tempDirInfo);\n    tempDirInfo = puVar8;\n  }\n  rmdir(tempDirPath);\n  free(tempDirPath);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close_all_done",
                "FUN_001125fa",
                "bfd_close",
                "dcgettext",
                "FUN_00104ea2",
                "printf",
                "strerror",
                "rmdir",
                "FUN_001052a2",
                "bfd_check_format",
                "chmod",
                "bfd_bwrite",
                "bfd_close_all_done",
                "FUN_001126c0",
                "bfd_close",
                "FUN_0011a0e0",
                "free",
                "bfd_get_arch",
                "bfd_seek",
                "xstrdup",
                "bfd_openr_next_archived_file",
                "unlink",
                "FUN_0011a110",
                "bfd_openw",
                "xmalloc",
                "bfd_bread",
                "FUN_00114b84",
                "__errno_location",
                "bfd_openr",
                "FUN_0011a350",
                "stat",
                "concat",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_files_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_00113ce0",
                "param_1": "data_ptr",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "param_5": "param_5_value",
                "lVar1": "allocation_result",
                "plVar2": "data_array_ptr"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_00113ce0(long data_ptr,long param_2_value,undefined param_3_value,undefined8 param_4_value,undefined8 param_5_value)\n\n{\n  long allocation_result;\n  long *data_array_ptr;\n  undefined auVar3 [16];\n  \n  if (data_ptr != 0) {\n    allocation_result = allocate_and_initialize_00113ce0_data_00112904(0xd,0);\n    if (allocation_result != 0) {\n      data_array_ptr = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)data_array_ptr + 0x11) = 0;\n      *data_array_ptr = data_ptr;\n      *(undefined4 *)((long)data_array_ptr + 0x14) = 0;\n      data_array_ptr[1] = param_2_value;\n      *(undefined *)(data_array_ptr + 2) = param_3_value;\n      *(long **)(allocation_result + 0x10) = data_array_ptr;\n      goto LAB_00113d2f;\n    }\n  }\n  allocation_result = 0;\nLAB_00113d2f:\n  auVar3._8_8_ = param_5_value;\n  auVar3._0_8_ = allocation_result;\n  return auVar3;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_file_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "fileBuffer",
                "unaff_R12": "startPos",
                "unaff_R14": "endPos",
                "iVar1": "errorCheck",
                "uVar2": "errorMessage",
                "uVar3": "errorContext",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndResizeFile_00114dc7(void)\n\n{\n  int errorCheck;\n  undefined8 errorMessage;\n  undefined8 errorContext;\n  size_t bytesRead;\n  FILE *file;\n  long fileBuffer;\n  long startPos;\n  long endPos;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(fileBuffer + 0x20) + startPos),1,endPos - startPos,\n                  file);\n    errorCheck = ferror(file);\n    if (errorCheck != 0) {\n      errorContext = *(undefined8 *)(fileBuffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,errorContext);\n    }\n    startPos = startPos + bytesRead;\n    errorCheck = feof(file);\n    if (errorCheck != 0) break;\n    if (startPos == endPos) {\n      endPos = startPos * 2;\n      errorContext = xrealloc(*(undefined8 *)(fileBuffer + 0x20),endPos);\n      *(undefined8 *)(fileBuffer + 0x20) = errorContext;\n    }\n  }\n  *(long *)(fileBuffer + 0x18) = startPos;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "fclose",
                "dcgettext",
                "FUN_00114dc7",
                "ferror",
                "xrealloc",
                "feof",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_file_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_file_00119f70",
                "param_1": "header",
                "param_2": "fileInfo",
                "uVar1": "returnValue",
                "cVar2": "status",
                "iVar3": "dataIndex",
                "uVar4": "headerEndianness",
                "uVar5": "dataEndianness",
                "__format": "formatString",
                "lVar6": "dataSize",
                "uVar7": "headerAddress",
                "lVar8": "allocatedMemory"
            },
            "code": "\nundefined4 processBinaryFile_00119f70(undefined8 *header,undefined8 *fileInfo)\n\n{\n  undefined4 returnValue;\n  char status;\n  int dataIndex;\n  undefined8 headerEndianness;\n  undefined8 dataEndianness;\n  char *formatString;\n  long dataSize;\n  undefined8 headerAddress;\n  long allocatedMemory;\n  \n  dataIndex = *(int *)((long)fileInfo + 0xc) + 1;\n  *(int *)((long)fileInfo + 0xc) = dataIndex;\n  if ((ulong)fileInfo[2] < (ulong)((long)dataIndex * 0x60)) {\n    dataSize = 0x3000;\n    if (0x3f < dataIndex) {\n      dataSize = (long)dataIndex * 0xc0;\n    }\n    allocatedMemory = xrealloc(fileInfo[3]);\n    fileInfo[3] = allocatedMemory;\n    memset((void *)(allocatedMemory + fileInfo[2]),0,dataSize - fileInfo[2]);\n    fileInfo[2] = dataSize;\n  }\n  returnValue = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)fileInfo + 0xc) * 0x60 + fileInfo[3] + -0x60) = *header;\n  headerEndianness = print_endianness_00114e00(returnValue);\n  dataEndianness = print_endianness_00114e00(*(undefined4 *)(header + 2));\n  headerAddress = *header;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerAddress,dataEndianness,headerEndianness);\n  dataSize = bfd_openw(*fileInfo,*header);\n  if (dataSize == 0) {\n    print_error_message_0011a110(*fileInfo);\n    *(undefined4 *)(fileInfo + 1) = 1;\n  }\n  else {\n    dataIndex = 2;\n    status = bfd_set_format(dataSize,1);\n    if (status == '\\0') {\n      dataIndex = bfd_get_error();\n      if (dataIndex != 5) {\n        print_error_message_0011a110(*header);\n        *(undefined4 *)(fileInfo + 1) = 1;\n      }\n    }\n    else {\n      do {\n        status = (**(code **)(*(long *)(dataSize + 8) + 0x2a0))(dataSize,dataIndex,0);\n        if (status != '\\0') {\n          headerAddress = bfd_printable_arch_mach(dataIndex,0);\n          printf(\"  %s\\n\",headerAddress);\n          *(undefined *)\n           ((long)*(int *)((long)fileInfo + 0xc) * 0x60 + fileInfo[3] + -0x58 + (ulong)(dataIndex - 2)) =\n               1;\n        }\n        dataIndex = dataIndex + 1;\n      } while (dataIndex != 0x57);\n    }\n    bfd_close_all_done(dataSize);\n  }\n  return *(undefined4 *)(fileInfo + 1);\n}\n\n",
            "called": [
                "printf",
                "bfd_openw",
                "bfd_get_error",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_set_format",
                "bfd_close_all_done",
                "FUN_0011a110",
                "FUN_001053d5",
                "xrealloc",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_file_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "read_and_write_file_00115a90",
                "param_1": "fileDescriptor",
                "param_2": "filePath",
                "param_3": "fileInfo",
                "iVar1": "originalErrno",
                "__fd": "outputFileDescriptor",
                "__off_t": "FilePosition",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "piVar6": "pointerToErrno",
                "local_2038": "buffer"
            },
            "code": "\nulong readAndWriteFile_00115a90(int fileDescriptor,char *filePath,long fileInfo)\n\n{\n  int originalErrno;\n  int outputFileDescriptor;\n  int iVar2;\n  FilePosition _Var3;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *pointerToErrno;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (_Var3 = lseek(fileDescriptor,0,0), _Var3 == 0)) {\n    outputFileDescriptor = open(filePath,0x201);\n    if (outputFileDescriptor < 0) {\n      bytesRead = close_file_00108237();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(fileDescriptor,buffer,0x2000);\n      iVar2 = (int)bytesRead;\n      if (iVar2 < 1) {\n        pointerToErrno = __errno_location();\n        originalErrno = *pointerToErrno;\n        fchmod(outputFileDescriptor,*(__mode_t *)(fileInfo + 0x18));\n        close(fileDescriptor);\n        close(outputFileDescriptor);\n        if (iVar2 != 0) {\n          *pointerToErrno = originalErrno;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(outputFileDescriptor,buffer,(long)iVar2);\n    } while (bytesWritten == (long)iVar2);\n    pointerToErrno = __errno_location();\n    iVar2 = *pointerToErrno;\n    close(fileDescriptor);\n    close(outputFileDescriptor);\n    *pointerToErrno = iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "__errno_location",
                "FUN_00108237",
                "fchmod",
                "write",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "read_and_write_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_and_remove_file_00108200",
                "unaff_RBP": "fileToRemove",
                "unaff_R12B": "shouldSetTimestamps",
                "unaff_R13": "errorCode",
                "auVar3": "result",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation"
            },
            "code": "\nundefined  [16] copyAndRemoveFile_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 uVar2;\n  char *fileToRemove;\n  char shouldSetTimestamps;\n  ulong errorCode;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(uVar2);\n  unlink(fileToRemove);\n  if (shouldSetTimestamps != '\\0') {\n    set_file_timestamps_0011a350();\n  }\n  result._0_8_ = errorCode & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext",
                "FUN_0011a350",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 276351,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}