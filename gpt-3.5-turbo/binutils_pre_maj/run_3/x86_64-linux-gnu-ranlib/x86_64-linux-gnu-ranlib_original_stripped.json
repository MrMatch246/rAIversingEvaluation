{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "fileType",
                "iVar1": "comparisonResult",
                "unaff_RBX": "filePtr",
                "param_7": "targetFileName"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int fileType;\n  int comparisonResult;\n  long *filePtr;\n  undefined8 targetFileName;\n  \n  targetFileName = posname;\n  if (fileType == 3) {\n    for (; *filePtr != 0; filePtr = (long *)(*filePtr + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*filePtr != (undefined8 *)0x0; filePtr = (long *)(*filePtr + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*filePtr,targetFileName);\n      if (comparisonResult == 0) {\n        if (fileType != 2) {\n          return filePtr;\n        }\n        return (long *)(*filePtr + 0xf0);\n      }\n    }\n  }\n  return filePtr;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "printHeader",
                "param_4": "printAddress",
                "iVar1": "result",
                "ppcVar2": "fileInfoPtr",
                "pcVar3": "formattedTime",
                "uVar4": "fileType",
                "local_100": "currentTimestamp",
                "uStack_f3": "filePermission",
                "cStack_f2": "isUserExecute",
                "cStack_f1": "isUserWrite",
                "cStack_f0": "isUserRead",
                "cStack_ef": "isGroupExecute",
                "cStack_ee": "isGroupWrite",
                "cStack_ed": "isGroupRead",
                "cStack_ec": "isOtherExecute",
                "cStack_eb": "isOtherWrite",
                "cStack_ea": "isOtherRead",
                "local_e8": "formattedFileInfo",
                "uStack_a0": "fileSize",
                "uStack_9c": "majorDeviceNum",
                "uStack_98": "minorDeviceNum",
                "uStack_88": "inodeNum",
                "local_60": "fileTimestamp"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char printHeader,char printAddress)\n\n{\n  int result;\n  char **fileInfoPtr;\n  char *formattedTime;\n  uint fileType;\n  time_t currentTimestamp;\n  undefined filePermission;\n  char isUserExecute;\n  char isUserWrite;\n  char isUserRead;\n  char isGroupExecute;\n  char isGroupWrite;\n  char isGroupRead;\n  char isOtherExecute;\n  char isOtherWrite;\n  char isOtherRead;\n  undefined uStack_e9;\n  char formattedFileInfo [48];\n  undefined local_b8 [24];\n  uint fileSize;\n  uint majorDeviceNum;\n  uint minorDeviceNum;\n  undefined8 inodeNum;\n  time_t fileTimestamp;\n  \n  if (printHeader != '\\0') {\n    fileInfoPtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      fileInfoPtr = fileInfo;\n    }\n    result = (**(code **)(fileInfoPtr[1] + 0x1e8))(fileInfo,local_b8);\n    if (result == 0) {\n      currentTimestamp = fileTimestamp;\n      formattedTime = ctime(&currentTimestamp);\n      if (formattedTime == (char *)0x0) {\n        formattedTime = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedFileInfo,formattedTime);\n      }\n      else {\n        sprintf(formattedFileInfo,\"%.12s %.4s\",formattedTime + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      isUserExecute = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      isUserWrite = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      isUserRead = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      isGroupExecute = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      isGroupWrite = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      isGroupRead = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      isOtherExecute = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      isOtherWrite = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      isOtherRead = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (isUserRead == 'x') {\n          isUserRead = 's';\n        }\n        else {\n          isUserRead = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (isGroupRead == 'x') {\n          isGroupRead = 's';\n        }\n        else {\n          isGroupRead = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (isOtherRead == 'x') {\n          isOtherRead = 't';\n        }\n        else {\n          isOtherRead = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&isUserExecute,(ulong)majorDeviceNum,(ulong)minorDeviceNum,inodeNum,\n              formattedFileInfo,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "print_arelt_descr.cold",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "initialize_output_file_00105a68",
                "pcVar1": "outputDirectory",
                "pFVar2": "outputFile",
                "sVar3": "outputDirLength"
            },
            "code": "\nvoid initializeOutputFile_00105a68(void)\n\n{\n  char *outputDirectory;\n  FILE *outputFile;\n  size_t outputDirLength;\n  \n  outputDirectory = output_dir;\n  if (output_dir != (char *)0x0) {\n    outputDirLength = strlen(output_dir);\n    if (outputDirLength != 0) {\n      if (outputDirectory[outputDirLength - 1] == '/') {\n        output_filename = (char *)concat(outputDirectory,output_filename,0);\n      }\n      else {\n        output_filename = (char *)concat(outputDirectory,&DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  outputFile = fopen(output_filename,\"w\");\n  if (outputFile != (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "strlen",
                "xexit",
                "concat",
                "fopen",
                "printf",
                "open_output_file.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_entries_from_archive_001032a8",
                "param_1": "archiveParams",
                "param_2": "callbackFn",
                "param_3": "entryList",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "currentEntry",
                "bVar3": "foundEntry",
                "plVar4": "currentNode",
                "iVar5": "comparisonResult",
                "__format": "errorMsgFormat",
                "plVar6": "nextNode",
                "lVar7": "currentArchiveEntry",
                "plVar8": "prevNode"
            },
            "code": "\n\n\nundefined8 extractEntriesFromArchive_001032a8(long *archiveParams,code *callbackFn,undefined8 *entryList,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 currentEntry;\n  bool foundEntry;\n  long *currentNode;\n  int comparisonResult;\n  char *errorMsgFormat;\n  long *nextNode;\n  long currentArchiveEntry;\n  long *prevNode;\n  \n  currentArchiveEntry = archiveParams[0x1e];\n  if (entryList == (undefined8 *)0x0) {\n    while (currentArchiveEntry != 0) {\n      nextEntry = *(long *)(currentArchiveEntry + 0xf0);\n      (*callbackFn)(currentArchiveEntry,0);\n      currentArchiveEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentNode = (long *)archiveParams[0x1e];\n      prevNode = archiveParams;\n      while (nextNode = currentNode, nextNode != (long *)0x0) {\n        if (*nextNode != 0) {\n          comparisonResult = filename_cmp(*entryList);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*callbackFn)(nextNode,prevNode);\n          }\n        }\n        prevNode = nextNode;\n        currentNode = (long *)nextNode[0x1e];\n      }\n      if (!foundEntry) {\n        currentEntry = *entryList;\n        errorMsgFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMsgFormat,currentEntry);\n      }\n      entryList = (undefined8 *)entryList[1];\n    } while (entryList != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_entries_from_archive_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "errorText",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorText;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorText = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorText,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_archive_options_0010342d",
                "param_1": "outputStatus",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveOptions_0010342d(uint outputStatus)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputStatus != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,program_name);\n  programName = program_name;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (outputStatus != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputStatus ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "ar_emul_default_usage",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_archive_options_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_and_save_data_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "data",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "constant",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "input1Copy",
                "local_78": "input2Copy",
                "local_68": "input3Copy",
                "local_58": "input4Copy",
                "local_48": "input5Copy",
                "local_38": "input6Copy",
                "local_28": "input7Copy",
                "local_18": "input8Copy"
            },
            "code": "\nvoid reportAndSaveData_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 data,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 input5Copy;\n  undefined4 input6Copy;\n  undefined4 input7Copy;\n  undefined4 input8Copy;\n  \n  if (flag != '\\0') {\n    input1Copy = input1;\n    input2Copy = input2;\n    input3Copy = input3;\n    input4Copy = input4;\n    input5Copy = input5;\n    input6Copy = input6;\n    input7Copy = input7;\n    input8Copy = input8;\n  }\n  bufferPtr = &stack0x00000008;\n  size = 8;\n  localBuffer = temporaryBuffer;\n  constant = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  report(data,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "main",
                "set_times.cold",
                "get_file_size",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_and_save_data_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main",
                "normalize.cold",
                "replace_members.cold",
                "print_contents",
                "make_tempname",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "initialize_output_file_00102e6f",
                "pcVar1": "output_dir_ptr",
                "in_RAX": "input_path",
                "uVar2": "basename_result",
                "uVar3": "error_message",
                "pFVar4": "output_file_ptr",
                "sVar5": "output_dir_length",
                "pcVar6": "current_char_ptr"
            },
            "code": "\nvoid initialize_output_file_00102e6f(void)\n\n{\n  char *output_dir_ptr;\n  char *input_path;\n  undefined8 basename_result;\n  undefined8 error_message;\n  FILE *output_file_ptr;\n  size_t output_dir_length;\n  char *current_char_ptr;\n  \n  output_dir_ptr = output_dir;\n  do {\n    input_path = input_path + 1;\n    while (*input_path != '/') {\n      if (*input_path == '\\0') {\n        if ((output_dir != (char *)0x0) && (output_dir_length = strlen(output_dir), output_dir_length != 0)) {\n          if (output_dir_ptr[output_dir_length - 1] == '/') {\n            output_filename = (char *)concat(output_dir_ptr,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(output_dir_ptr,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        output_file_ptr = fopen(output_filename,\"w\");\n        if (output_file_ptr == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_char_ptr = input_path;\n      if ((*input_path == '.') && (current_char_ptr = input_path + 1, input_path[1] == '.')) {\n        current_char_ptr = input_path + 2;\n        if ((input_path[2] == '/') || (input_path[2] == '\\0')) {\n          basename_result = lbasename();\n          output_dir_ptr = output_filename;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(error_message,output_dir_ptr,basename_result);\n          output_filename = (char *)basename_result;\n          initialize_output_file_00102e6f_00105a68();\n          return;\n        }\n      }\n      for (; (input_path = current_char_ptr, *current_char_ptr != '\\0' && (*current_char_ptr != '/')); current_char_ptr = current_char_ptr + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "non_fatal",
                "dcgettext",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "data",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 inputData,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *data;\n  undefined returnValue [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    data = malloc(0x4002);\n    *(void **)((long)buffer + 8) = data;\n  } while (data == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  yy_init_buffer(buffer,inputData);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = buffer;\n  return returnValue;\n}\n\n",
            "called": [
                "malloc",
                "yy_init_buffer",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_performance_monitoring_00102000",
                "ctx": "context",
                "iVar1": "monitoringReturnValue"
            },
            "code": "\nint initializePerformanceMonitoring_00102000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringReturnValue;\n  \n  monitoringReturnValue = __gmon_start__();\n  return monitoringReturnValue;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_performance_monitoring_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "FUN_00105a68",
                "ranlib_only",
                "main",
                "maybequit",
                "fatal",
                "ranlib_usage",
                "write_archive.cold",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_next_matching_file_00105870",
                "param_1": "fileList",
                "param_2": "searchType",
                "param_3": "searchFile",
                "uVar2": "currentSearchFile",
                "iVar3": "currentSearchType",
                "iVar1": "comparisonResult"
            },
            "code": "\nlong * findNextMatchingFile_00105870(long *fileList,int searchType,undefined8 searchFile)\n\n{\n  int comparisonResult;\n  undefined8 currentSearchFile;\n  int currentSearchType;\n  \n  currentSearchFile = posname;\n  currentSearchType = postype;\n  if (postype == 0) {\n    currentSearchFile = searchFile;\n    currentSearchType = searchType;\n  }\n  if (currentSearchType == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileList,currentSearchFile);\n      if (comparisonResult == 0) {\n        if (currentSearchType != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "find_next_matching_file_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "display_prompt_00103ba8",
                "interactive": "is_interactive",
                "printf": "print_message",
                "fflush": "flush_stdout"
            },
            "code": "\n\n\nvoid display_prompt_00103ba8(void)\n\n{\n  if (is_interactive != 0) {\n    print_message(\"AR >\");\n    flush_stdout(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "display_prompt_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_description_00103ddc",
                "param_1": "data",
                "outfile": "output_file",
                "verbose": "is_verbose"
            },
            "code": "\nvoid print_arelt_description_00103ddc(undefined8 data)\n\n{\n  print_arelt_descr(output_file,data,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "executableName"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",executableName);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "fflush",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "formatString",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *formatString;\n  \n  lineNumber = linenumber + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "main",
                "open_inarch.cold",
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input",
                "__size": "size",
                "lVar1": "loop_counter",
                "lVar2": "new_stack_size",
                "puVar3": "buffer_pointer",
                "bVar4": "zero",
                "yy_buffer_stack": "buffer_stack",
                "yy_buffer_stack_max": "max_buffer_stack",
                "yy_buffer_stack_top": "top_buffer_stack"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t size;\n  undefined8 input;\n  long loop_counter;\n  long new_stack_size;\n  undefined4 *buffer_pointer;\n  byte zero;\n  \n  zero = 0;\n  if (buffer_stack == (void *)0x0) {\n    buffer_stack = calloc(8,1);\n    if (buffer_stack != (void *)0x0) {\n      max_buffer_stack = 1;\n      top_buffer_stack = 0;\n      return input;\n    }\n  }\n  else {\n    if (top_buffer_stack < max_buffer_stack - 1U) {\n      return input;\n    }\n    new_stack_size = max_buffer_stack + 8;\n    size = new_stack_size * 8;\n    buffer_stack = realloc(buffer_stack,size);\n    if (buffer_stack != (void *)0x0) {\n      buffer_pointer = (undefined4 *)((long)buffer_stack + (size - 0x40));\n      max_buffer_stack = new_stack_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_pointer = 0;\n        buffer_pointer = buffer_pointer + (ulong)zero * -2 + 1;\n      }\n      return input;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  top_buffer_stack = 0;\n  max_buffer_stack = 1;\n  return input;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_output_00102bf5",
                "output_file": "file",
                "output_filename": "filename"
            },
            "code": "\nvoid cleanup_output_00102bf5(void)\n\n{\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  unlink_if_ordinary(filename);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "cleanup_output_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main",
                "remove_output.cold",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_00102943",
                "output_filename": "outputFileName"
            },
            "code": "\nvoid initializeOutput_00102943(void)\n\n{\n  outputFileName = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "initialize_output_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "lastAccessTime",
                "uStack_34": "lastAccessTimeNs",
                "uStack_30": "lastModificationTime",
                "uStack_2c": "lastModificationTimeNs",
                "local_28": "currentTimestamp",
                "uStack_24": "fileMode",
                "uStack_20": "ownership",
                "uStack_1c": "timingFlag"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorNumberPtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 lastAccessTime;\n  undefined4 lastAccessTimeNs;\n  undefined4 lastModificationTime;\n  undefined4 lastModificationTimeNs;\n  undefined4 currentTimestamp;\n  undefined4 fileMode;\n  undefined4 ownership;\n  undefined4 timingFlag;\n  \n  currentTimestamp = *(undefined4 *)(fileInfo + 0x58);\n  fileMode = *(undefined4 *)(fileInfo + 0x5c);\n  ownership = *(undefined4 *)(fileInfo + 0x60);\n  timingFlag = *(undefined4 *)(fileInfo + 100);\n  lastAccessTime = *(undefined4 *)(fileInfo + 0x48);\n  lastAccessTimeNs = *(undefined4 *)(fileInfo + 0x4c);\n  lastModificationTime = *(undefined4 *)(fileInfo + 0x50);\n  lastModificationTimeNs = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&lastAccessTime,0);\n  if (result != 0) {\n    errorNumberPtr = __errno_location();\n    errorMessage = strerror(*errorNumberPtr);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "__format": "errorMessage",
                "uVar1": "fileType",
                "unaff_RBX": "fileLines",
                "unaff_RBP": "fileStream",
                "unaff_R12B": "includeHex",
                "uStack0000000000000015": "defaultChar",
                "cStack0000000000000016": "flag1Char",
                "cStack0000000000000017": "flag2Char",
                "param_9": "flag3Char",
                "cStack0000000000000019": "flag4Char",
                "cStack000000000000001a": "flag5Char",
                "cStack000000000000001b": "flag6Char",
                "cStack000000000000001c": "flag7Char",
                "cStack000000000000001d": "flag8Char",
                "cStack000000000000001e": "flag9Char",
                "uStack000000000000001f": "flag10Char",
                "param_19": "fileMode",
                "uStack000000000000006c": "param1",
                "param_20": "param2",
                "param_22": "param3"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *errorMessage;\n  uint fileType;\n  char **fileLines;\n  FILE *fileStream;\n  char includeHex;\n  undefined defaultChar;\n  char flag1Char;\n  char flag2Char;\n  char flag3Char;\n  char flag4Char;\n  char flag5Char;\n  char flag6Char;\n  char flag7Char;\n  char flag8Char;\n  char flag9Char;\n  undefined flag10Char;\n  uint fileMode;\n  uint param1;\n  uint param2;\n  undefined8 param3;\n  \n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorMessage);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    defaultChar = 100;\n  }\n  else if (fileType == 0xa000) {\n    defaultChar = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    defaultChar = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    defaultChar = 99;\n  }\n  else if (fileType == 0xc000) {\n    defaultChar = 0x73;\n  }\n  else {\n    defaultChar = 0x70;\n    if (fileType != 0x1000) {\n      defaultChar = 0x2d;\n    }\n  }\n  flag1Char = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  flag2Char = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  flag3Char = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  flag4Char = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  flag5Char = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  flag6Char = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  flag7Char = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  flag8Char = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  flag9Char = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (flag3Char == 'x') {\n      flag3Char = 's';\n    }\n    else {\n      flag3Char = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (flag6Char == 'x') {\n      flag6Char = 's';\n    }\n    else {\n      flag6Char = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (flag9Char == 'x') {\n      flag9Char = 't';\n    }\n    else {\n      flag9Char = 'T';\n    }\n  }\n  flag10Char = 0;\n  fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)param1,\n          (ulong)param2,param3,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileLines,fileStream);\n  if (includeHex != '\\0') {\n    if ((*(byte *)((long)fileLines + 0x49) & 0x10) == 0) {\n      if (fileLines[0xb] != (char *)0x0) {\n        fprintf(fileStream,\" 0x%lx\");\n      }\n    }\n    else if (fileLines[0xc] != (char *)0x0) {\n      fprintf(fileStream,\" 0x%lx\");\n    }\n  }\n  fputc(10,fileStream);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "dcgettext",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "create_archive_00105300",
                "param_1": "inputPath",
                "param_2": "outputFormats",
                "plVar1": "archivedFileList",
                "pcVar2": "outputPath",
                "bVar3": "isThinFormat",
                "cVar4": "conversionCheck",
                "iVar5": "statResult",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "piVar8": "errorLocation",
                "lVar9": "fileDescriptor",
                "puVar10": "inputFileDescriptor",
                "local_b0": "matchingFormats",
                "local_a8": "fileStatus",
                "target": "defaultTarget",
                "_stderr": "standardErrorStream",
                "program_name": "programName",
                "silent_create": "isSilentCreation",
                "make_thin_archive": "isThinArchiveCreation",
                "operation_alters_arch": "alterOperationArch"
            },
            "code": "\n\n\nundefined8 * createArchive_00105300(char *inputPath,undefined8 *outputFormats)\n\n{\n  long *archivedFileList;\n  char *outputPath;\n  byte isThinFormat;\n  char conversionCheck;\n  int statResult;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  int *errorLocation;\n  long fileDescriptor;\n  undefined8 *inputFileDescriptor;\n  undefined8 matchingFormats;\n  stat fileStatus;\n  \n  bfd_set_error(0);\n  if (defaultTarget == (char *)0x0) {\n    defaultTarget = \"plugin\";\n  }\n  statResult = stat(inputPath,&fileStatus);\n  outputPath = output_filename;\n  if (statResult == 0) goto LAB_001053be;\n  errorLocation = __errno_location();\n  if (*errorLocation == 2) {\n    if (alterOperationArch == '\\0') {\n      fprintf(standardErrorStream,\"%s: \",programName);\n      perror(inputPath);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((defaultTarget == (char *)0x0) && (outputFormats != (undefined8 *)0x0)) {\n      inputFileDescriptor = (undefined8 *)open_inarch_cold();\n      return inputFileDescriptor;\n    }\n    outputFormats = (undefined8 *)bfd_openw(inputPath,defaultTarget);\n    if (((outputFormats != (undefined8 *)0x0) && (conversionCheck = bfd_set_format(outputFormats,2), conversionCheck != '\\0')) &&\n       (conversionCheck = bfd_close(outputFormats), conversionCheck != '\\0')) {\n      outputPath = inputPath;\n      if (isSilentCreation == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(inputPath);\n  do {\n    isThinFormat = *(byte *)((long)outputFormats + 0x49) >> 4 & 1;\n    if (isThinArchiveCreation == '\\0') {\n      if (isThinFormat != 0) {\n        libraryName = *outputFormats;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinFormat == 0) {\n      libraryName = *outputFormats;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(errorMessage,libraryName);\nLAB_001027cb:\n      bfd_nonfatal(inputPath);\n      statResult = bfd_get_error();\n      if (statResult == 0xd) {\nLAB_00102812:\n        list_matching_formats(matchingFormats);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFileList = outputFormats + 0x1e;\n      for (fileDescriptor = bfd_openr_next_archived_file(outputFormats,0); fileDescriptor != 0;\n          fileDescriptor = bfd_openr_next_archived_file(outputFormats,fileDescriptor)) {\n        *archivedFileList = fileDescriptor;\n        archivedFileList = (long *)(fileDescriptor + 0xf0);\n      }\n      *archivedFileList = 0;\n      statResult = bfd_get_error();\n      if (statResult == 9) {\n        return outputFormats;\n      }\n      do {\n        bfd_fatal(inputPath);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        non_fatal(libraryName,inputPath);\n        outputPath = inputPath;\nLAB_001053be:\n        output_filename = outputPath;\n        outputFormats = (undefined8 *)bfd_openr(inputPath,defaultTarget);\n      } while (outputFormats == (undefined8 *)0x0);\n      conversionCheck = bfd_check_format_matches(outputFormats,2,&matchingFormats);\n      if (conversionCheck == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (fileDescriptor = bfd_openr_next_archived_file(outputFormats,0), fileDescriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_fatal",
                "perror",
                "fprintf",
                "stat",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "non_fatal",
                "list_matching_formats",
                "bfd_openw",
                "open_inarch.cold",
                "bfd_close",
                "maybequit",
                "fatal",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "xexit",
                "bfd_get_error",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_archive_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "parse_and_execute_command_00105db0",
                "param_1": "argc",
                "param_2": "argv"
            },
            "code": "\n\n\nvoid parse_and_execute_command_00105db0(uint argc,FILE *argv)\n\n{\n  byte *pbVar1;\n  uint *puVar2;\n  byte bVar3;\n  long *plVar4;\n  undefined8 *puVar5;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  bool bVar8;\n  bool bVar9;\n  char **ppcVar10;\n  int *piVar11;\n  undefined *puVar12;\n  byte bVar13;\n  char cVar14;\n  int iVar15;\n  uint uVar16;\n  undefined4 uVar17;\n  FILE *pFVar18;\n  size_t sVar19;\n  size_t sVar20;\n  byte *__ptr;\n  long *plVar21;\n  FILE *pFVar22;\n  char *pcVar23;\n  long lVar24;\n  ulong uVar25;\n  undefined8 *puVar26;\n  undefined8 uVar27;\n  FILE *pFVar28;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbVar33;\n  long lVar34;\n  long lVar35;\n  undefined1 *puVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbVar38;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 = (char *)argv;\n  pFVar18 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  pFVar22 = argv;\n  do {\n    uVar16 = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uVar16;\n    local_130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)pFVar22;\n    if (**(char **)(&pFVar22->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        plVar21 = *(long **)pFVar22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,plVar21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&pFVar22->_flags + (long)unaff_RBP * 2) + 1;\n      iVar15 = stat(pcVar39,(stat *)local_c8);\n      if (-1 < iVar15) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          plVar21 = *(long **)pFVar22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        pFVar18 = fopen(pcVar39,\"r\");\n        if (pFVar18 != (FILE *)0x0) {\n          iVar15 = fseek(pFVar18,0,2);\n          if (((iVar15 != -1) && (sVar19 = ftell(pFVar18), sVar19 != 0xffffffffffffffff)) &&\n             (iVar15 = fseek(pFVar18,0,0), iVar15 != -1)) {\n            local_118 = (byte *)xmalloc(sVar19 + 1);\n            sVar20 = fread(local_118,1,sVar19,pFVar18);\n            if ((sVar19 == sVar20) || (iVar15 = ferror(pFVar18), iVar15 == 0)) {\n              local_118[sVar20] = 0;\n              bVar13 = *local_118;\n              pbVar33 = local_118;\n              while( true ) {\n                if (bVar13 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)bVar13 * 2] & 0x40) == 0) break;\n                bVar13 = pbVar33[1];\n                pbVar33 = pbVar33 + 1;\n              }\n              sVar19 = strlen((char *)local_118);\n              __ptr = (byte *)xmalloc(sVar19 + 1);\n              pFVar28 = (FILE *)0x0;\n              iVar15 = 0;\n              bVar9 = false;\n              bVar47 = false;\n              bVar8 = false;\n              local_100 = 0;\n              pbVar33 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbVar33 * 2] & 0x40) != 0) {\n                  pbVar33 = pbVar33 + 1;\n                }\n                if ((iVar15 == 0) || (iVar15 + -1 <= (int)local_100)) {\n                  if (pFVar28 == (FILE *)0x0) {\n                    iVar15 = 8;\n                    pFVar28 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&pFVar28->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    iVar15 = iVar15 * 2;\n                    pFVar28 = (FILE *)xrealloc(pFVar28,(long)iVar15 << 3);\n                    ppcVar31 = (char **)((long)&pFVar28->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&pFVar28->_flags + local_100 * 8);\n                }\n                bVar13 = *pbVar33;\n                pbVar38 = __ptr;\n                while (bVar13 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)bVar13 * 2] & 0x40) != 0) &&\n                       (!(bool)(bVar9 | bVar8 | bVar47))) {\n                      bVar8 = false;\n                      bVar9 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bVar8) break;\n                    pbVar33 = pbVar33 + 1;\n                    *pbVar38 = bVar13;\n                    pbVar38 = pbVar38 + 1;\n                    bVar8 = false;\n                    bVar13 = *pbVar33;\n                    if (bVar13 == 0) goto LAB_0010606f;\n                  }\n                  if (bVar13 == 0x5c) {\n                    bVar8 = true;\n                  }\n                  else if (bVar47) {\n                    if (bVar13 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbVar38 = bVar13;\n                      pbVar38 = pbVar38 + 1;\n                    }\n                  }\n                  else if (bVar9) {\n                    if (bVar13 != 0x22) goto LAB_001061f1;\n                    bVar9 = false;\n                  }\n                  else if (bVar13 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (bVar13 != 0x22) goto LAB_001061f1;\n                    bVar9 = true;\n                  }\n                  pbVar1 = pbVar33 + 1;\n                  pbVar33 = pbVar33 + 1;\n                  bVar13 = *pbVar1;\n                }\nLAB_0010606f:\n                *pbVar38 = 0;\n                plVar21 = (long *)xstrdup(__ptr);\n                *ppcVar31 = (char *)plVar21;\n                *(undefined8 *)(pFVar28->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                bVar13 = *pbVar33;\n                bVar3 = (&_sch_istable)[(ulong)bVar13 * 2];\n                while ((bVar3 & 0x40) != 0) {\n                  bVar13 = pbVar33[1];\n                  pbVar33 = pbVar33 + 1;\n                  bVar3 = (&_sch_istable)[(ulong)bVar13 * 2];\n                }\n                local_100 = local_100 + 1;\n                if (bVar13 == 0) {\n                  free(__ptr);\n                  if (pFVar22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(pFVar18);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uVar16 + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uVar16 = (uint)unaff_R12;\n        iVar15 = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (iVar15 != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uVar16 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        puVar12 = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)uVar16;\n        if ((char)uVar16 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            puVar12 = xatexit_head;\n            iVar15 = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = iVar15 + 1;\n            *(code **)(puVar12 + (long)iVar15 * 8 + 0x10) = remove_output;\n          }\n          else {\n            puVar26 = (undefined8 *)malloc(0x110);\n            if (puVar26 != (undefined8 *)0x0) {\n              *puVar26 = puVar12;\n              *(undefined4 *)(puVar26 + 1) = 0;\n              xatexit_head = (undefined *)puVar26;\n              goto LAB_0010632b;\n            }\n          }\n          lVar24 = 1;\n          do {\n            lVar35 = lVar24;\n            iVar15 = (int)pcVar46;\n            if (iVar15 <= (int)lVar35) break;\n            cVar14 = ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            lVar24 = lVar35 + 1;\n          } while (cVar14 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = iVar15 - ((int)lVar35 + -1);\n          pFVar18 = (FILE *)(ulong)uVar44;\n          if (is_ranlib != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (iVar15 = getopt_long(pFVar18,pcVar46,\"DhHUvVt\",long_options), iVar15 != -1) {\n              if (iVar15 < 0x77) {\n                if (0x43 < iVar15) {\n                  switch(iVar15) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uVar16;\n                  }\n                }\n              }\n              else if (iVar15 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uVar16 = ranlib_only();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uVar16);\n              }\n            }\n            while (lVar24 = get_file_size(pcVar39), lVar24 < 1) {\n              uVar16 = 1;\nLAB_001071c4:\n              piVar11 = (int *)pcVar43;\n              pcVar43 = (char *)((long)piVar11 + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uVar16);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)piVar11 * 8 + -0x7b);\n            }\n            iVar15 = open(pcVar39,2,0);\n            if (iVar15 < 0) {\n              bfd_set_error(1);\n              bfd_fatal(pcVar39);\nLAB_0010737f:\n              bfd_fatal(pcVar39);\nLAB_00107387:\n              bfd_nonfatal(pcVar39);\n              iVar15 = bfd_get_error();\n              if (iVar15 == 0xd) {\n                list_matching_formats\n                          (CONCAT53(uStack_c5,CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            cVar14 = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (cVar14 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                puVar2 = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *puVar2 = *puVar2 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              cVar14 = bfd_close(unaff_RBP);\n              if (cVar14 != '\\0') {\n                uVar16 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            uVar27 = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(uVar27,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(program_name);\n            sVar19 = strlen(pcVar39);\n            if ((sVar19 < 6) ||\n               (iVar15 = filename_cmp(pcVar39 + (sVar19 - 6),\"ranlib\"), iVar15 != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          puVar36 = long_options;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          pFVar22 = (FILE *)unaff_RBP;\n          pFVar28 = pFVar18;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)uVar16);\nLAB_001063a3:\n          pFVar22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            sVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            iVar15 = (int)sVar19 + (int)pFVar18;\n            unaff_R12 = (FILE *)xmalloc((long)iVar15 * 8);\n            uVar17 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = uVar17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            local_128 = (FILE *)((long)pcVar46 + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(local_118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(local_118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(local_118);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    cVar14 = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (cVar14 != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = cVar14;\n                        pcVar23 = (char *)xstrdup(local_118);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = pcVar23;\n                        cVar14 = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (cVar14 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            lVar24 = (long)(int)pFVar18;\n            piVar11 = (int *)pcVar46 + lVar24 * 2;\n            if (local_128 < piVar11) {\n              uVar25 = lVar24 * 8 - 0x11;\n              if ((uVar25 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < piVar11) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < piVar11 &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < piVar11)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < piVar11)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < piVar11)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  ppcVar10 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < piVar11;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *ppcVar10 = *ppcVar31;\n                    ppcVar10 = ppcVar10 + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uVar6 = *(undefined4 *)((long)pcVar46 + 0x18);\n                uVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (uVar25 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uVar17;\n                *(undefined4 *)(ppcVar32 + 1) = uVar6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uVar7;\n                uVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uVar6 = *(undefined4 *)((long)pcVar46 + 0x28);\n                uVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                uVar25 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uVar17;\n                *(undefined4 *)(ppcVar32 + 3) = uVar6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uVar7;\n                if (uVar25 != 2) {\n                  uVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uVar6 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uVar17;\n                  *(undefined4 *)(ppcVar32 + 5) = uVar6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uVar7;\n                  if (uVar25 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      uVar17 = *(undefined4 *)(pcVar39 + 4);\n                      uVar6 = *(undefined4 *)(pcVar39 + 8);\n                      uVar7 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uVar17;\n                      *(undefined4 *)(ppcVar31 + 1) = uVar6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uVar7;\n                      uVar41 = uVar42;\n                    } while (uVar42 != uVar25);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + lVar24 + -2;\n            }\n            pFVar18 = (FILE *)(ulong)(iVar15 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uVar16 = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,puVar36,0);\n            unaff_RBP = (char *)pFVar22;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            pFVar28 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            pcVar46 = (char *)pFVar28;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          uVar44 = operation;\n          pFVar22 = (FILE *)unaff_RBP;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)pFVar18 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uVar16 = (int)pFVar18 - (_optind + -1);\n            pFVar18 = (FILE *)(ulong)uVar16;\n            _optind = 0;\n            if (1 < (int)uVar16) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)local_130 & 0xff);\n          uVar16 = (uint)unaff_R12;\n          puVar36 = (undefined1 *)((int *)pcVar46 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              pFVar28 = (FILE *)pcVar46;\n              if (*(long *)puVar36 == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (write_armap == 1) {\n                  uVar17 = ranlib_only();\n                    \n                  xexit(uVar17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)puVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  iVar15 = (int)unaff_RBP;\n                  if (*(char **)((long)puVar36 + (long)iVar15 * 2 * 4) == (char *)0x0) {\n                    uVar27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(uVar27);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(iVar15 + 1);\n                  lVar24 = strtol(*(char **)((long)puVar36 + (long)iVar15 * 2 * 4),(char **)0x0,10);\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)lVar24;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              lVar24 = (long)(int)unaff_RBP;\n              pFVar22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)puVar36 + lVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              pFVar22 = (FILE *)((long)puVar36 + (lVar24 + 1) * 2 * 4);\n              if (*(FILE **)pFVar22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                pFVar22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)puVar36 + (lVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                pFVar18 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)pFVar18;\n                  pFVar18 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)puVar36 + lVar24 * 2 * 4) + (long)pFVar18 * 2) != 0\n                        );\n              }\n              puVar26 = (undefined8 *)open_inarch();\n              pFVar18 = pFVar22;\n              if (operation == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)puVar26 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)pFVar22;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(puVar26,extract_file,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                sVar19 = strlen(libdeps);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sVar19 + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",puVar26);\n                if (libdeps_bfd == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  lVar24 = bfd_find_target(\"binary\",libdeps_bfd);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (lVar24 != 0) {\n                    cVar14 = bfd_set_format(libdeps_bfd,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (cVar14 == '\\0') goto LAB_00106803;\n                    cVar14 = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (cVar14 == '\\0') goto LAB_00106803;\n                    pFVar28 = (FILE *)bfd_bwrite(libdeps,unaff_RBP,libdeps_bfd);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (pFVar28 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    cVar14 = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (cVar14 == '\\0') goto LAB_00106803;\n                    lVar24 = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (lVar24 == 0) goto LAB_00106803;\n                    iVar15 = (int)pcVar43;\n                    local_130 = (FILE *)((long)(iVar15 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (iVar15 == 0) {\n                      lVar24 = 0;\n                    }\n                    else {\n                      uVar17 = *(undefined4 *)&pFVar22->field_0x4;\n                      *(int *)unaff_RBP = pFVar22->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = uVar17;\n                      lVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&pFVar22->_flags;\n                        pFVar22 = (FILE *)((long)pFVar22 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + lVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(iVar15 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      pFVar22 = (FILE *)unaff_RBP;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                unaff_RBP = (char *)pFVar22;\n                if (pFVar22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                pFVar18 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)pFVar22;\n                if ((pFVar22 != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(puVar26,unaff_RBP,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_3:\n                map_over_members(puVar26,print_descr,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)pFVar22;\nswitchD_00106ed8_caseD_4:\n                map_over_members(puVar26,print_contents,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (pFVar22 == (FILE *)0x0) break;\nLAB_00106afb:\n                pFVar18 = (FILE *)(puVar26 + 0x1e);\n                do {\n                  unaff_R12 = pFVar18;\n                  if (*(FILE **)pFVar22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(puVar26);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    plVar21 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)pFVar22;\n                    if (plVar21 == (long *)0x0) {\n                      uVar27 = *puVar26;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(uVar30,pcVar46,uVar27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    lVar24 = *plVar21;\n                    uVar27 = normalize(pcVar46,puVar26);\n                    iVar15 = filename_cmp(uVar27,lVar24);\n                    if (iVar15 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)plVar21[0x1e];\n                  pplVar29 = (long **)get_pos_bfd(pFVar18,3,0);\n                  bVar47 = verbose != 0;\n                  plVar4 = *pplVar29;\n                  *pplVar29 = plVar21;\n                  plVar21[0x1e] = (long)plVar4;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)pFVar22);\n                  }\n                  pFVar22 = (FILE *)&pFVar22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          iVar15 = fileno(_stdin);\n          interactive = isatty(iVar15);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uVar17 = bfd_get_error();\n        pFVar22 = (FILE *)bfd_errmsg(uVar17);\n        uVar27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        iVar15 = fatal(uVar27,\"x86_64-pc-linux-gnu\",pFVar22);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          puVar36 = pcVar39;\n          pFVar28 = (FILE *)pcVar46;\n          switch(iVar15) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uVar16 = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)pFVar22;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)pFVar22;\nLAB_00106803:\n        uVar27 = dcgettext(0,pcVar39,5);\n        fatal(uVar27);\nLAB_00106814:\n        iVar15 = (int)pcVar46;\n        pFVar28 = (FILE *)xmalloc(8);\n        *(long **)pFVar28 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            iVar15 = 0;\n          }\n          else {\n            lVar24 = 1;\n            do {\n              iVar15 = (int)lVar24;\n              lVar35 = lVar24 * 2;\n              lVar24 = lVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          pFVar22 = (FILE *)xmalloc((long)(iVar15 + 1) << 3);\n          plVar21 = *(long **)pcVar43;\n          lVar24 = 0;\n          while (plVar21 != (long *)0x0) {\n            uVar27 = xstrdup();\n            *(undefined8 *)((long)&pFVar22->_flags + lVar24) = uVar27;\n            plVar21 = *(long **)((char *)((long)pcVar43 + 0x83) + lVar24 + -0x7b);\n            lVar24 = lVar24 + 8;\n          }\n          *(undefined8 *)((long)&pFVar22->_flags + lVar24) = 0;\nLAB_0010610a:\n          iVar15 = (int)pcVar46;\n          pcVar43 = (char *)pFVar22;\n          if (*(long **)pFVar28 == (long *)0x0) goto LAB_00106a80;\n          lVar24 = 0;\n          do {\n            lVar34 = lVar24 + 1;\n            lVar35 = lVar24 * 8;\n            lVar24 = lVar34;\n          } while (*(long *)(pFVar28->_shortbuf + lVar35 + -0x7b) != 0);\n          local_108 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          local_108 = 0;\n        }\n        lVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + lVar24));\n        pFVar22 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)iVar15) * 8);\n        uVar44 = iVar15 + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&pFVar22->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&pFVar22->_IO_read_ptr + (long)local_130),\n                (long)(int)(iVar15 - uVar16) << 3);\n        memcpy((void *)((long)&local_130->_flags + (long)&pFVar22->_flags),pFVar28,local_108);\n        free(pFVar28);\n        free(local_118);\n        fclose(pFVar18);\n        uVar16 = (int)local_128 + 1;\n        unaff_R12 = local_130;\n        pcVar43 = (char *)pFVar22;\n        local_130 = pFVar28;\n        if ((int)uVar16 < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uVar16 = uVar16 + 1;\n    local_128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uVar16;\n  } while( true );\nswitchD_00107462_caseD_0:\n  iVar15 = getopt_long((ulong)pFVar18 & 0xffffffff,pcVar46,pFVar22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)pFVar22;\n  if (iVar15 == -1) goto LAB_00106680;\n  if ((0x14 < iVar15 - 100U) || ((0x117201UL >> ((byte)(iVar15 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  uVar27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(uVar27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)pFVar18 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  iVar15 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  puVar5 = puVar26;\n  if (iVar15 == 0) {\n    *(byte *)((long)puVar26 + 0x49) = *(byte *)((long)puVar26 + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      plVar21 = puVar5 + 0x1e;\n      if ((undefined8 *)*plVar21 == (undefined8 *)0x0) break;\n      uVar27 = *(undefined8 *)*plVar21;\n      uVar30 = normalize(*(FILE **)unaff_RBP,puVar26);\n      iVar15 = filename_cmp(uVar30,uVar27);\n      if ((iVar15 == 0) &&\n         ((counted_name_mode == '\\0' || (iVar45 = iVar45 + 1, iVar45 == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *plVar21 = *(long *)(*plVar21 + 0xf0);\n        pFVar18 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      puVar5 = (undefined8 *)*plVar21;\n    }\n    if (verbose != 0) {\n      pFVar22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,pFVar22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "fprintf",
                "memmove",
                "bfd_create",
                "fclose",
                "ranlib_usage",
                "strcmp",
                "xstrdup",
                "textdomain",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "usage",
                "free",
                "replace_members",
                "write_archive",
                "fileno",
                "strtol",
                "bfd_bwrite",
                "open_inarch",
                "fseek",
                "map_over_members",
                "xatexit_cleanup",
                "normalize",
                "bfd_make_writable",
                "bfd_fdopenr",
                "get_pos_bfd",
                "bindtextdomain",
                "bfd_errmsg",
                "open",
                "strlen",
                "stat",
                "xmalloc_set_program_name",
                "bfd_nonfatal",
                "yyparse.isra.0",
                "print_descr",
                "ar_emul_default_parse_arg",
                "bfd_init",
                "remove_output",
                "ranlib_only",
                "bfd_close",
                "bfd_plugin_set_program_name",
                "extract_file",
                "getopt_long",
                "bfd_set_default_target",
                "fopen",
                "memcpy",
                "ftell",
                "bfd_find_target",
                "bfd_fatal",
                "bfd_check_format_matches",
                "bfd_set_format",
                "non_fatal",
                "print_contents",
                "bfd_plugin_set_plugin",
                "malloc",
                "list_matching_formats",
                "fread",
                "ferror",
                "setlocale",
                "bfd_make_readable",
                "fatal",
                "get_file_size",
                "dcgettext",
                "isatty",
                "xexit",
                "xrealloc",
                "filename_cmp",
                "printf",
                "xmalloc",
                "bfd_set_error",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "parse_and_execute_command_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "free",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main",
                "make_tempname.cold",
                "list_supported_targets",
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold",
                "list_matching_formats",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "open_and_check_format_00102710",
                "plVar1": "pointer_to_long",
                "cVar2": "format_check_result",
                "bVar3": "flag_result",
                "iVar4": "error_code",
                "lVar5": "file_descriptor",
                "uVar6": "message_string",
                "uVar7": "gettext_string",
                "puVar8": "write_file_descriptor",
                "unaff_RBP": "parameter_RBP",
                "in_stack_00000008": "parameter_stack_00000008"
            },
            "code": "\nundefined8 * open_and_check_format_00102710(void)\n\n{\n  long *pointer_to_long;\n  char format_check_result;\n  byte flag_result;\n  int error_code;\n  long file_descriptor;\n  undefined8 message_string;\n  undefined8 gettext_string;\n  undefined8 *write_file_descriptor;\n  undefined8 parameter_RBP;\n  undefined8 parameter_stack_00000008;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_check_result = bfd_check_format(file_descriptor,1);\n    if (format_check_result != '\\0') {\n      target = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  write_file_descriptor = (undefined8 *)bfd_openw();\n  if (((write_file_descriptor != (undefined8 *)0x0) && (format_check_result = bfd_set_format(write_file_descriptor,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(write_file_descriptor), format_check_result != '\\0')) {\n    if (silent_create == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    flag_result = *(byte *)((long)write_file_descriptor + 0x49) >> 4 & 1;\n    if (make_thin_archive == '\\0') {\n      if (flag_result != 0) {\n        gettext_string = *write_file_descriptor;\n        message_string = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(message_string,gettext_string);\n        goto LAB_00102812;\n      }\n    }\n    else if (flag_result == 0) {\n      gettext_string = *write_file_descriptor;\n      message_string = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(message_string,gettext_string);\nLAB_001027cb:\n      bfd_nonfatal();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(parameter_stack_00000008);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      pointer_to_long = write_file_descriptor + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(write_file_descriptor,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(write_file_descriptor,file_descriptor)) {\n        *pointer_to_long = file_descriptor;\n        pointer_to_long = (long *)(file_descriptor + 0xf0);\n      }\n      *pointer_to_long = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return write_file_descriptor;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        gettext_string = dcgettext(0,\"creating %s\",5);\n        non_fatal(gettext_string);\nLAB_001053b7:\n        output_filename = parameter_RBP;\n        write_file_descriptor = (undefined8 *)bfd_openr();\n      } while (write_file_descriptor == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(write_file_descriptor,2,&stack0x00000008);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(write_file_descriptor,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "open_and_check_format_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "parse_file_00103e95",
                "pplVar1": "doublePointer",
                "cVar2": "character",
                "ppFVar3": "doublePointerPointer",
                "pFVar4": "filePointer",
                "plVar5": "longPointer",
                "uVar6": "undefined",
                "pbVar7": "bytePointer",
                "iVar8": "integer",
                "pcVar10": "charPointer",
                "uVar11": "undefined",
                "lVar17": "long",
                "lVar18": "long",
                "uVar19": "unsignedLong",
                "uVar20": "unsignedInt",
                "lVar21": "long",
                "puVar22": "undefined8Pointer",
                "puVar23": "undefined8Pointer",
                "uVar24": "unsignedInt",
                "iVar25": "integer",
                "uVar26": "unsignedLong",
                "ppcVar27": "charPointerPointer",
                "bVar28": "boolean",
                "bVar30": "byte",
                "lVar31": "long",
                "pbVar32": "bytePointer",
                "pbVar33": "bytePointer",
                "piVar34": "intPointer",
                "pbVar35": "bytePointer",
                "ppcVar38": "charPointerPointer",
                "auVar40": "undefinedArray",
                "auVar41": "undefinedArray",
                "local_828": "localPointer1",
                "local_820": "localPointer2",
                "local_818": "localLong1",
                "local_810": "localPointer3",
                "local_800": "localInt1",
                "local_7fc": "localUInt1",
                "local_7f8": "localBytePointer",
                "local_7d0": "bitStruct",
                "local_740": "localArray"
            },
            "code": "\n\n\nvoid parseFile_00103e95(void)\n\n{\n  long **doublePointer;\n  char character;\n  FILE **doublePointerPointer;\n  FILE *filePointer;\n  long *longPointer;\n  undefined8 undefined;\n  byte *bytePointer;\n  int integer;\n  char *charPointer;\n  undefined8 undefined;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pcVar15;\n  char *pcVar16;\n  long long;\n  long long;\n  ulong unsignedLong;\n  uint unsignedInt;\n  long long;\n  undefined8 *undefined8Pointer;\n  undefined8 *undefined8Pointer;\n  uint unsignedInt;\n  int integer;\n  ulong unsignedLong;\n  char **charPointerPointer;\n  bool boolean;\n  char **ppcharacter9;\n  byte byte;\n  long long;\n  byte *bytePointer;\n  byte *bytePointer;\n  int *intPointer;\n  byte *bytePointer;\n  uint uVar36;\n  int iVar37;\n  char **charPointerPointer;\n  byte bVar39;\n  undefined undefinedArray [16];\n  undefined undefinedArray [16];\n  char *localPointer1;\n  char *localPointer2;\n  long localLong1;\n  char **localPointer3;\n  int localInt1;\n  uint localUInt1;\n  byte *localBytePointer;\n  stat bitStruct;\n  char localArray [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  long = 0;\n  yychar = -2;\n  ppcharacter9 = local_678;\n  localInt1 = 0;\n  localPointer1 = localArray;\n  localLong1 = 200;\n  localPointer2 = localPointer1;\n  localPointer3 = ppcharacter9;\nLAB_00103ee9:\n  *localPointer1 = (char)long;\n  if (localPointer2 + localLong1 + -1 <= localPointer1) {\n    long = (long)localPointer1 - (long)localPointer2;\n    long = long + 1;\n    if (localLong1 < 10000) {\n      long = localLong1 * 2;\n      localLong1 = 10000;\n      if (long < 0x2711) {\n        localLong1 = long;\n      }\n      charPointer = (char *)malloc(localLong1 * 9 + 7);\n      if (charPointer != (char *)0x0) {\n        long = long * 8;\n        pcVar15 = localPointer2;\n        pcVar16 = charPointer;\n        for (; long != 0; long = long + -1) {\n          *pcVar16 = *pcVar15;\n          pcVar15 = pcVar15 + (ulong)bVar39 * -2 + 1;\n          pcVar16 = pcVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        charPointerPointer = (char **)(charPointer + localLong1);\n        ppcharacter9 = charPointerPointer;\n        for (; long != 0; long = long + -1) {\n          *(undefined *)ppcharacter9 = *(undefined *)localPointer3;\n          localPointer3 = (char **)((long)localPointer3 + (ulong)bVar39 * -2 + 1);\n          ppcharacter9 = (char **)((long)ppcharacter9 + (ulong)bVar39 * -2 + 1);\n        }\n        if (localPointer2 != localArray) {\n          free(localPointer2);\n        }\n        localPointer1 = charPointer + long;\n        ppcharacter9 = charPointerPointer + long;\n        localPointer2 = charPointer;\n        localPointer3 = charPointerPointer;\n        if (charPointer + localLong1 + -1 <= localPointer1) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    charPointer = localPointer2;\n    if (localPointer2 == localArray) {\n      return;\n    }\nLAB_00105265:\n    free(charPointer);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)long;\n  if (iVar37 == 3) goto LAB_0010524c;\n  character = (&yypact)[iVar37];\n  if (character != -0xe) {\n    if (yychar == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = _stdin;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = _stdout;\n        }\n        if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0)) {\n          yyensure_buffer_stack();\n          undefined8Pointer = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          undefined = yy_create_buffer_constprop_0(yyin);\n          *undefined8Pointer = undefined;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p = yy_hold_char;\n      bytePointer = yy_c_buf_p;\n      bytePointer = yy_c_buf_p;\n      unsignedInt = yy_start;\nLAB_001040d4:\n      unsignedLong = (ulong)unsignedInt;\n      unsignedLong = (ulong)localUInt1;\n      boolean = false;\n      do {\n        byte = yy_ec[*bytePointer];\n        if (*(short *)(yy_accept + (long)(int)unsignedLong * 2) != 0) {\n          boolean = true;\n          unsignedLong = unsignedLong & 0xffffffff;\n          localBytePointer = bytePointer;\n        }\n        while( true ) {\n          integer = (int)unsignedLong;\n          long = (long)(int)((int)*(short *)(yy_base + (long)integer * 2) + (uint)byte);\n          if (integer == *(short *)(yy_chk + long * 2)) break;\n          unsignedLong = (ulong)(uint)(int)*(short *)(yy_def + (long)integer * 2);\n          if (0xb0 < *(short *)(yy_def + (long)integer * 2)) {\n            byte = yy_meta[(int)(uint)byte];\n          }\n        }\n        bytePointer = bytePointer + 1;\n        unsignedLong = (ulong)*(short *)(yy_nxt + long * 2);\n      } while (*(short *)(yy_base + unsignedLong * 2) != 0xc2);\n      localUInt1 = (uint)unsignedLong;\n      bytePointer = bytePointer;\n      if (boolean) {\n        yy_last_accepting_cpos = localBytePointer;\n        yy_last_accepting_state = localUInt1;\n      }\nLAB_0010419f:\n      integer = (int)*(short *)(yy_accept + (long)(int)unsignedLong * 2);\n      if (integer == 0) {\n        integer = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        bytePointer = yy_last_accepting_cpos;\n      }\n      yyleng = (int)bytePointer - (int)bytePointer;\n      yy_hold_char = *bytePointer;\n      yy_c_buf_p = bytePointer;\n      yytext = bytePointer;\n      *bytePointer = 0;\nLAB_001041f0:\n      bytePointer = yytext;\n      long = yy_buffer_stack_top;\n      switch(integer) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar = 0x28;\n        break;\n      case 0x21:\n        yychar = 0x29;\n        break;\n      case 0x22:\n        yychar = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yytext);\n        yychar = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        yychar = 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar = 0x112;\n      }\n      long = (long)iVar37;\n    }\n    if (0 < yychar) {\n      if (yychar != 0x100) {\n        iVar37 = 2;\n        if (yychar < 0x114) {\n          iVar37 = (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    yychar = 0;\nLAB_0010497d:\n    unsignedInt = character + iVar37;\n    if ((0x22 < unsignedInt) || (iVar37 != (char)yycheck[(int)unsignedInt])) goto LAB_001049db;\n    character = yytable[(int)unsignedInt];\n    long = (long)character;\n    if (character < '\\x01') {\n      iVar37 = -(int)character;\n      goto LAB_00104a0a;\n    }\n    yychar = -2;\n    localInt1 = localInt1 + -1 + (uint)(localInt1 == 0);\n    ppcharacter9 = ppcharacter9 + 1;\n    *ppcharacter9 = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&yydefact)[(int)long];\n  if ((&yydefact)[(int)long] == '\\0') {\n    if (localInt1 == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[long] != -0xe) &&\n             (unsignedInt = (int)(char)(&yypact)[long] + 1, unsignedInt < 0x23)) &&\n            (yycheck[(int)unsignedInt] == '\\x01')) &&\n           (long = (long)(char)yytable[(int)unsignedInt], '\\0' < (char)yytable[(int)unsignedInt]))\n        goto LAB_00105227;\n        if (localPointer2 == localPointer1) goto LAB_0010524c;\n        localPointer1 = localPointer1 + -1;\n        ppcharacter9 = ppcharacter9 + -1;\n        long = (long)*localPointer1;\n      } while( true );\n    }\n    if (localInt1 != 3) goto LAB_001051f0;\n    if (0 < yychar) {\n      yychar = -2;\n      goto LAB_001051f0;\n    }\n    if (yychar != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined = program_name;\n  charPointerPointer = obfd;\n  character = yyr2[iVar37];\n  charPointerPointer = (char **)ppcharacter9[1 - character];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    undefined8Pointer = (undefined8 *)*ppcharacter9;\n    if (obfd == (char **)0x0) {\n      charPointer = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charPointer = (char *)dcgettext(0,charPointer,5);\n      fprintf(_stderr,charPointer,undefined);\n      maybequit();\n    }\n    else {\n      for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n        for (undefined8Pointer = (undefined8 *)obfd[0x1f]; undefined8Pointer != (undefined8 *)0x0;\n            undefined8Pointer = (undefined8 *)undefined8Pointer[0x1e]) {\n          integer = filename_cmp(*undefined8Pointer);\n          if (integer == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*undefined8Pointer,0);\n        undefined = program_name;\n        undefined = *undefined8Pointer;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer,undefined,undefined);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    undefined8Pointer = (undefined8 *)*ppcharacter9;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      charPointer = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n      boolean = false;\n      charPointerPointer = obfd + 0x1f;\n      for (charPointer = obfd[0x1f]; charPointer != (char *)0x0; charPointer = *(char **)(charPointer + 0xf0)) {\n        integer = filename_cmp();\n        if (integer == 0) {\n          pcVar15 = (char *)bfd_openr(*undefined8Pointer,0);\n          undefined = program_name;\n          if (pcVar15 == (char *)0x0) {\n            undefined = *undefined8Pointer;\n            pcVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,undefined,undefined);\n            maybequit();\n          }\n          else {\n            *charPointerPointer = pcVar15;\n            boolean = true;\n            *(undefined8 *)(pcVar15 + 0xf0) = *(undefined8 *)(charPointer + 0xf0);\n          }\n        }\n        else {\n          charPointerPointer = (char **)(charPointer + 0xf0);\n        }\n      }\n      if (!boolean) {\n        charPointer = (char *)bfd_openr(*undefined8Pointer,0);\n        undefined = program_name;\n        undefined = *undefined8Pointer;\n        pcVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,undefined,undefined);\n        undefined = program_name;\n        if (charPointer == (char *)0x0) {\n          undefined = *undefined8Pointer;\n          charPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charPointer,undefined,undefined);\n          maybequit();\n        }\n        else {\n          *charPointerPointer = charPointer;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    undefined8Pointer = (undefined8 *)*ppcharacter9;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n      boolean = false;\n      charPointerPointer = obfd + 0x1f;\n      for (undefined8Pointer = (undefined8 *)obfd[0x1f]; undefined = program_name, undefined8Pointer != (undefined8 *)0x0;\n          undefined8Pointer = (undefined8 *)undefined8Pointer[0x1e]) {\n        integer = filename_cmp(*undefined8Pointer,*undefined8Pointer);\n        if (integer == 0) {\n          boolean = true;\n          *charPointerPointer = (char *)undefined8Pointer[0x1e];\n        }\n        else {\n          charPointerPointer = (char **)(undefined8Pointer + 0x1e);\n        }\n      }\n      if (!boolean) {\n        undefined = *undefined8Pointer;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charPointer,undefined,undefined);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    undefined8Pointer = (undefined8 *)*ppcharacter9;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n      charPointer = (char *)bfd_openr(*undefined8Pointer,\"plugin\");\n      undefined = program_name;\n      charPointerPointer = obfd;\n      if (charPointer == (char *)0x0) {\n        undefined = *undefined8Pointer;\n        charPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charPointer,undefined,undefined);\n        maybequit();\n      }\n      else {\n        *(char **)(charPointer + 0xf0) = obfd[0x1f];\n        charPointerPointer[0x1f] = charPointer;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    charPointer = *obfd;\n    verbose = 1;\n    outfile = _stdout;\n    pcVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,charPointer);\n    for (charPointer = obfd[0x1f]; charPointer != (char *)0x0; charPointer = *(char **)(charPointer + 0xf0)) {\n      ar_directory_doer(charPointer,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(charPointerPointer);\n    charPointer = real_name;\n    integer = stat(real_name,&bitStruct);\n    if ((integer != 0) && (obfd = (char **)bfd_openw(charPointer,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*ppcharacter9,0);\n    break;\n  case 0x1f:\n    ar_open(*ppcharacter9,1);\n    break;\n  case 0x20:\n    charPointer = *ppcharacter9;\n    if (obfd == (char **)0x0) {\n      charPointer = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long = open_inarch(ppcharacter9[-1],0);\n    if (long != 0) {\n      map_over_list(long,ar_addlib_doer,charPointer);\n    }\n    break;\n  case 0x21:\n    charPointer = *ppcharacter9;\n    pcVar15 = ppcharacter9[-1];\n    undefined = open_inarch(ppcharacter9[-2],0);\n    if (charPointer == (char *)0x0) {\n      outfile = _stdout;\n    }\n    else {\n      outfile = fopen(charPointer,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(undefined,ar_directory_doer,pcVar15);\n        bfd_close(undefined);\n        fclose(outfile);\n        break;\n      }\n      outfile = _stdout;\n      pcVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,charPointer);\n    }\n    map_over_list(undefined,ar_directory_doer,pcVar15);\n    bfd_close(undefined);\n    break;\n  case 0x22:\n    charPointerPointer = (char **)*ppcharacter9;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    charPointerPointer = (char **)0x0;\n    break;\n  case 0x24:\n    charPointerPointer = (char **)ppcharacter9[-1];\n    break;\n  case 0x26:\n    charPointerPointer = (char **)malloc(0x10);\n    charPointer = ppcharacter9[-2];\n    *charPointerPointer = *ppcharacter9;\n    charPointerPointer[1] = charPointer;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  long = (long)character;\n  localPointer1 = localPointer1 + -long;\n  ppcharacter9[1 - long] = (char *)charPointerPointer;\n  ppcharacter9 = ppcharacter9 + (1 - long);\n  unsignedInt = (int)(char)yypgoto[(char)yyr1[iVar37] + -0x18] + (int)*localPointer1;\n  if ((unsignedInt < 0x23) && (*localPointer1 == yycheck[(int)unsignedInt])) {\n    long = (long)(char)yytable[(int)unsignedInt];\n  }\n  else {\n    long = (long)(char)yydefgoto[(char)yyr1[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer = ((int)bytePointer - (int)yytext) + -1;\n  *bytePointer = yy_hold_char;\n  doublePointer = (long **)(yy_buffer_stack + long * 8);\n  doublePointerPointer = (FILE **)*doublePointer;\n  if (*(int *)(doublePointerPointer + 7) == 0) {\n    yy_n_chars = *(uint *)((long)doublePointerPointer + 0x1c);\n    *(undefined4 *)(doublePointerPointer + 7) = 1;\n    *doublePointerPointer = yyin;\n  }\n  bytePointer = yy_c_buf_p;\n  filePointer = doublePointerPointer[1];\n  undefinedArray._8_8_ = filePointer;\n  undefinedArray._0_8_ = doublePointerPointer;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)yy_n_chars) < yy_c_buf_p) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)yy_n_chars + 1) < yy_c_buf_p) {\n      undefinedArray = yy_fatal_error();\n    }\n    if (*(int *)(undefinedArray._0_8_ + 0x34) != 0) {\n      unsignedInt = (int)((long)bytePointer - (long)bytePointer) - 1;\n      for (long = 0; (int)long < (int)unsignedInt; long = long + 1) {\n        *(byte *)(undefinedArray._8_8_ + long) = bytePointer[long];\n      }\n      plVar12 = *doublePointer;\n      if (*(int *)(plVar12 + 7) == 2) {\n        yy_n_chars = 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = yyin;\n        if (unsignedInt == 0) {\n          if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0))\n          {\n            yyensure_buffer_stack();\n            undefined8Pointer = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            undefined = yy_create_buffer_constprop_0(filePointer);\n            *undefined8Pointer = undefined;\n          }\n          long = yy_buffer_stack;\n          if (yy_buffer_stack != 0) {\n            long = *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          iVar9 = 1;\n          yy_init_buffer(long);\n          yy_load_buffer_state();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longPointer = *doublePointer;\n          unsignedInt = ~unsignedInt + *(int *)(plVar12 + 3);\n          if (0 < (int)unsignedInt) break;\n          unsignedInt = (int)yy_c_buf_p - (int)(void *)longPointer[1];\n          if (*(int *)(longPointer + 4) == 0) {\n            longPointer[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          iVar9 = *(int *)(longPointer + 3);\n          integer = iVar9;\n          if (iVar9 < 1) {\n            integer = iVar9 / 8;\n          }\n          *(int *)(longPointer + 3) = integer + iVar9;\n          pvVar14 = realloc((void *)longPointer[1],(long)(integer + iVar9 + 2));\n          longPointer[1] = (long)pvVar14;\n          if (pvVar14 == (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p = (byte *)((long)pvVar14 + (long)(int)unsignedInt);\n          plVar12 = *doublePointer;\n        }\n        if (0x2000 < (int)unsignedInt) {\n          unsignedInt = 0x2000;\n        }\n        unsignedLong = (ulong)unsignedInt;\n        if (*(int *)((long)longPointer + 0x24) == 0) {\n          intPointer = __errno_location();\n          unsignedLong = (ulong)(int)unsignedInt;\n          unsignedLong = (ulong)(int)unsignedInt;\n          *intPointer = 0;\n          goto LAB_001046c7;\n        }\n        unsignedLong = 0;\n        intPointer = (int *)(long)(int)unsignedInt;\n        do {\n          iVar9 = getc(yyin);\n          uVar36 = (uint)unsignedLong;\n          if (iVar9 == -1) {\n            iVar9 = ferror(yyin);\n            unsignedInt = uVar36;\n            if (iVar9 != 0) {\n              do {\n                charPointer = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *intPointer = 0;\n                  clearerr((FILE *)charPointer);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + unsignedLong)\n                                 ,1,unsignedLong,yyin);\n                  charPointer = (char *)yyin;\n                  yy_n_chars = (uint)sVar13;\n                  unsignedInt = yy_n_chars;\n                  if ((yy_n_chars != 0) || (iVar9 = ferror(yyin), unsignedInt = yy_n_chars, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*intPointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedInt +\n             (long)(int)uVar36 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) = 10;\n            unsignedInt = uVar36 + 1;\n            break;\n          }\n          unsignedLong = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)intPointer) = (char)iVar9;\n          intPointer = (int *)((long)intPointer + 1);\n        } while (unsignedInt != uVar36 + 1);\nLAB_00104738:\n        yy_n_chars = unsignedInt;\n        unsignedInt = yy_n_chars;\n        iVar9 = 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) = yy_n_chars;\n        if (unsignedInt == 0) goto LAB_0010475e;\n      }\n      plVar12 = (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      long = *plVar12;\n      unsignedInt = unsignedInt + yy_n_chars;\n      if (*(int *)(long + 0x18) < (int)unsignedInt) {\n        integer = ((int)yy_n_chars >> 1) + unsignedInt;\n        pvVar14 = realloc(*(void **)(long + 8),(long)integer);\n        *(void **)(long + 8) = pvVar14;\n        undefinedArray._8_8_ = plVar12;\n        undefinedArray._0_8_ = *plVar12;\n        if (*(long *)(*plVar12 + 8) == 0) {\n          undefinedArray = yy_fatal_error();\n        }\n        plVar12 = undefinedArray._8_8_;\n        *(int *)(undefinedArray._0_8_ + 0x18) = integer + -2;\n      }\n      yy_n_chars = unsignedInt;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)unsignedInt) = 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)unsignedInt) = 0;\n      bytePointer = *(byte **)(*plVar12 + 8);\n      yytext = bytePointer;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      bytePointer = bytePointer + integer;\n      yy_c_buf_p = bytePointer;\n      unsignedInt = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)bytePointer == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointer = (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p = bytePointer;\n    unsignedLong = yy_get_previous_state();\n    bytePointer = yytext;\n    goto LAB_0010419f;\n  }\n  bytePointer = bytePointer + integer;\n  yy_c_buf_p = bytePointer;\n  unsignedLong = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)unsignedLong * 2) != 0) {\n    yy_last_accepting_cpos = bytePointer;\n    yy_last_accepting_state = (uint)unsignedLong;\n  }\n  unsignedLong = unsignedLong & 0xffffffff;\n  while( true ) {\n    integer = (int)unsignedLong;\n    if (integer == *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)integer * 2) + 1) * 2)) break;\n    unsignedLong = (ulong)(uint)(int)*(short *)(yy_def + (long)integer * 2);\n  }\n  unsignedInt = (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)integer * 2) + 1) * 2);\n  bytePointer = bytePointer;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)integer * 2) + 1) * 2) == 0) ||\n     (unsignedInt == 0xb0)) goto LAB_0010419f;\n  bytePointer = bytePointer + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p = yytext;\n  integer = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointer = yy_hold_char;\n  unsignedLong = (ulong)yy_last_accepting_state;\n  bytePointer = yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcharacter9 = ppcharacter9 + 1;\n  localInt1 = 3;\n  *ppcharacter9 = yylval;\nLAB_001049d1:\n  localPointer1 = localPointer1 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "fprintf",
                "ar_addlib_doer",
                "stat",
                "fclose",
                "yyerror.constprop.0",
                "fwrite",
                "bfd_openw",
                "xstrdup",
                "ar_directory_doer",
                "bfd_cache_close",
                "map_over_list",
                "prompt",
                "ar_open",
                "maybequit",
                "bfd_close",
                "yy_create_buffer.constprop.0",
                "bfd_openr",
                "extract_file",
                "clearerr",
                "yyensure_buffer_stack",
                "__errno_location",
                "fopen",
                "getc",
                "yy_fatal_error",
                "free",
                "bfd_set_format",
                "malloc",
                "open_inarch",
                "dup",
                "yy_load_buffer_state",
                "ferror",
                "fread",
                "yy_get_previous_state",
                "unlink",
                "dcgettext",
                "smart_rename.constprop.0",
                "filename_cmp",
                "printf",
                "yy_init_buffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_file_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_output_00107730",
                "output_filename": "outputFilename",
                "output_bfd": "outputBfd",
                "output_file": "outputFile"
            },
            "code": "\nvoid cleanupOutput_00107730(void)\n\n{\n  if (outputFilename == 0) {\n    return;\n  }\n  if (outputBfd != 0) {\n    bfd_cache_close();\n  }\n  if (outputFile != (FILE *)0x0) {\n    fclose(outputFile);\n  }\n  unlink_if_ordinary(outputFilename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_output_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_buffer_001031cf",
                "param_1": "fileBufferPtr",
                "param_2": "inputFile",
                "iVar1": "errorValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errorBufferPtr",
                "lVar5": "bufferStack",
                "yy_buffer_stack": "yyBufferStack",
                "yy_buffer_stack_top": "yyBufferStackTop",
                "yy_load_buffer_state": "loadBufferState",
                "fileno": "getFileDescriptor",
                "isatty": "checkIfTerminal"
            },
            "code": "\n\n\nundefined8\ninitializeFileBuffer_001031cf(FILE **fileBufferPtr,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errorValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errorBufferPtr;\n  long bufferStack;\n  \n  errorBufferPtr = __errno_location();\n  bufferStack = yyBufferStack;\n  errorValue = *errorBufferPtr;\n  if (fileBufferPtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (yyBufferStack != 0) {\nLAB_00103263:\n      if (fileBufferPtr == *(FILE ***)(bufferStack + yyBufferStackTop * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)fileBufferPtr + 0x1c) = 0;\n    *(undefined *)&fileBufferPtr[1]->_flags = 0;\n    *(undefined *)((long)&fileBufferPtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(fileBufferPtr + 5) = 1;\n    fileBufferPtr[2] = fileBufferPtr[1];\n    *(undefined4 *)(fileBufferPtr + 7) = 0;\n    if (bufferStack != 0) {\n      if (fileBufferPtr == *(FILE ***)(bufferStack + yyBufferStackTop * 8)) {\n        loadBufferState();\n      }\n      *fileBufferPtr = inputFile;\n      *(undefined4 *)((long)fileBufferPtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *fileBufferPtr = inputFile;\n    *(undefined4 *)((long)fileBufferPtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)fileBufferPtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = getFileDescriptor(inputFile);\n    fileDescriptor = checkIfTerminal(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)fileBufferPtr + 0x24) = isTerminal;\n  *errorBufferPtr = errorValue;\n  return param_5;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "isatty",
                "__errno_location",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_file_buffer_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "temp",
                "obfd": "buffer"
            },
            "code": "\nvoid copyData_0010312d(long destination,long source)\n\n{\n  long temp;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  temp = buffer;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(buffer + 0xf8);\n  *(long *)(temp + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_data_to_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFileName",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "dataRead",
                "_Var3": "currentFilePosition",
                "uVar4": "totalBytesCopied",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer"
            },
            "code": "\nulong copyDataToFile_00105c00(int sourceFileDescriptor,char *destinationFileName)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int dataRead;\n  __off_t currentFilePosition;\n  ulong totalBytesCopied;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined auStack_2038 [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (currentFilePosition = lseek(sourceFileDescriptor,0,0), currentFilePosition == 0)) {\n    destinationFileDescriptor = open(destinationFileName,0x201);\n    if (destinationFileDescriptor < 0) {\n      totalBytesCopied = simple_copy_constprop_0_cold();\n      return totalBytesCopied;\n    }\n    do {\n      totalBytesCopied = read(sourceFileDescriptor,auStack_2038,0x2000);\n      dataRead = (int)totalBytesCopied;\n      if (dataRead < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (dataRead != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return totalBytesCopied & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,auStack_2038,(long)dataRead);\n    } while (bytesWritten == (long)dataRead);\n    errnoPointer = __errno_location();\n    dataRead = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = dataRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "lseek",
                "open",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_data_to_file_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_status_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_status"
            },
            "code": "\nlong check_file_status_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_status;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_status);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_status.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,file_path);\n    }\n    else if ((file_status.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_status.st_size) {\n        return file_status.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "get_file_size.cold",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_status_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOptionString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOptionString;\n  \n  emulationOptionString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOptionString);\n  emulationOptionString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOptionString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_archives_00103c60",
                "param_1": "input_archive",
                "param_2": "is_output_archive",
                "cVar1": "check_result",
                "piVar2": "error_location",
                "pcVar3": "error_message",
                "lVar4": "input_bfd",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "archived_files_ptr",
                "real_name": "input_archive_copy",
                "temp_name": "temp_filename",
                "obfd": "output_bfd",
                "temp_fd": "temp_file_descriptor"
            },
            "code": "\n\n\nvoid processArchives_00103c60(char *input_archive,int is_output_archive)\n\n{\n  char check_result;\n  int *error_location;\n  char *error_message;\n  long input_bfd;\n  long archived_file;\n  undefined8 program_name;\n  long *archived_files_ptr;\n  \n  input_archive_copy = xstrdup();\n  temp_filename = (char *)make_tempname(input_archive_copy,&temp_file_descriptor);\n  if (temp_filename == (char *)0x0) {\n    error_location = __errno_location();\n    input_archive = strerror(*error_location);\n    program_name = program_name;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    output_bfd = bfd_fdopenw(temp_filename,0,temp_file_descriptor);\n    if (output_bfd == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = temp_filename;\n    }\n    else {\n      if (is_output_archive != 0) {\nLAB_00103d02:\n        bfd_set_format(output_bfd,2);\n        *(byte *)(output_bfd + 0x49) = *(byte *)(output_bfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_bfd = bfd_openr(input_archive,\"plugin\");\n      if (input_bfd == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        check_result = bfd_check_format(input_bfd,2);\n        if (check_result != '\\0') {\n          archived_files_ptr = (long *)(output_bfd + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_bfd,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_bfd,archived_file)) {\n            *archived_files_ptr = archived_file;\n            archived_files_ptr = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = program_name;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_archive);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "strerror",
                "xstrdup",
                "bfd_fdopenw",
                "fprintf",
                "bfd_set_format",
                "maybequit",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "make_tempname",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_archives_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "ar_emul_default_usage",
                "list_supported_targets",
                "replace_members.cold",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "print_contents",
                "write_archive",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "FUN_00102e6f",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "get_file_size",
                "map_over_members.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_pattern_0010300e",
                "yy_start": "start_state",
                "yytext": "current_char",
                "yy_c_buf_p": "buffer_end",
                "yy_ec": "char_ec",
                "yy_accept": "accept_states",
                "yy_base": "state_base",
                "yy_chk": "state_check",
                "yy_def": "state_default",
                "yy_meta": "meta_data",
                "yy_nxt": "next_state",
                "yy_last_accepting_cpos": "last_accepting_char",
                "yy_last_accepting_state": "last_accepting_state"
            },
            "code": "\nvoid find_matching_pattern_0010300e(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *in_R9;\n  int in_R10D;\n  \n  bVar1 = false;\n  iVar2 = start_state;\n  for (pbVar5 = current_char; pbVar5 < buffer_end; pbVar5 = pbVar5 + 1) {\n    bVar4 = 1;\n    if (*pbVar5 != 0) {\n      bVar4 = char_ec[*pbVar5];\n    }\n    if (*(short *)(accept_states + (long)iVar2 * 2) != 0) {\n      bVar1 = true;\n      in_R9 = pbVar5;\n      in_R10D = iVar2;\n    }\n    while( true ) {\n      lVar3 = (long)(int)((int)*(short *)(state_base + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(state_check + lVar3 * 2) == iVar2) break;\n      iVar2 = (int)*(short *)(state_default + (long)iVar2 * 2);\n      if (0xb0 < iVar2) {\n        bVar4 = meta_data[(int)(uint)bVar4];\n      }\n    }\n    iVar2 = (int)*(short *)(next_state + lVar3 * 2);\n  }\n  if (bVar1) {\n    last_accepting_char = in_R9;\n    last_accepting_state = in_R10D;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "find_matching_pattern_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_valid_archive_00107740",
                "param_1": "filePtr",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errorNumber",
                "pcVar4": "errorMessage",
                "uVar5": "translatedMessage",
                "pplVar6": "archivePtr",
                "__ptr": "bufferPtr",
                "__n": "bytesRead",
                "lVar7": "index",
                "plVar8": "currentPtr",
                "puVar9": "preserveDates",
                "uVar10": "bytesWritten",
                "sVar11": "chunkSize",
                "local_c8": "timestamps",
                "_Stack_b0": "filePermissions",
                "uStack_98": "archiveSize",
                "uStack_80": "originalTime",
                "uStack_70": "newTime",
                "output_file": "outputFile",
                "output_filename": "outputFileName"
            },
            "code": "\nlong * extractValidArchive_00107740(long **filePtr)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  long **archivePtr;\n  void *bufferPtr;\n  size_t bytesRead;\n  long index;\n  long *currentPtr;\n  undefined4 *preserveDates;\n  ulong bytesWritten;\n  size_t chunkSize;\n  undefined4 timestamps [6];\n  __mode_t filePermissions;\n  ulong archiveSize;\n  undefined8 originalTime;\n  undefined8 newTime;\n  \n  if (preserve_dates != 0) {\n    preserveDates = timestamps;\n    for (index = 0x24; index != 0; index = index + -1) {\n      *preserveDates = 0;\n      preserveDates = preserveDates + 1;\n    }\n  }\n  archivePtr = (long **)filePtr[0x1d];\n  if ((long **)filePtr[0x1d] == (long **)0x0) {\n    archivePtr = filePtr;\n  }\n  errorCode = (*(code *)archivePtr[1][0x3d])(filePtr,timestamps);\n  if (errorCode != 0) {\n    currentPtr = *filePtr;\n    translatedMessage = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = fatal(translatedMessage,currentPtr);\n    translatedMessage = posname;\n    if (errorCode == 3) {\n      for (; *currentPtr != 0; currentPtr = (long *)(*currentPtr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentPtr != (undefined8 *)0x0; currentPtr = (long *)(*currentPtr + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentPtr,translatedMessage);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return currentPtr;\n          }\n          return (long *)(*currentPtr + 0xf0);\n        }\n      }\n    }\n    return currentPtr;\n  }\n  bfd_seek(filePtr,0,0);\n  outputFile = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*filePtr);\n  }\n  else {\n    bytesWritten = 0;\n    bufferPtr = (void *)xmalloc(0x2000);\n    do {\n      chunkSize = archiveSize - bytesWritten;\n      if (0x2000 < chunkSize) {\n        chunkSize = 0x2000;\n      }\n      bytesRead = bfd_bread(bufferPtr,chunkSize,filePtr);\n      if (chunkSize != bytesRead) {\nLAB_00102c78:\n        filePtr = (long **)*filePtr[0x1d];\n        translatedMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(translatedMessage,filePtr);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*filePtr);\n      }\n      chunkSize = fwrite(bufferPtr,1,bytesRead,outputFile);\n      if (chunkSize != bytesRead) {\n        errorNumber = __errno_location();\n        errorMessage = strerror(*errorNumber);\n        fatal(\"%s: %s\",outputFileName,errorMessage);\n        goto LAB_00102c78;\n      }\n      bytesWritten = bytesWritten + bytesRead;\n    } while (bytesWritten < archiveSize);\n    free(bufferPtr);\n  }\n  fclose(outputFile);\n  errorMessage = outputFileName;\n  outputFile = (FILE *)0x0;\n  chmod(outputFileName,filePermissions);\n  if (preserve_dates != 0) {\n    originalTime = newTime;\n    set_times(errorMessage,timestamps);\n  }\n  outputFileName = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_valid_archive_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_archive_files_001028ed",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "temp1",
                "bVar2": "temp2",
                "iVar3": "temp3",
                "sVar4": "temp4",
                "piVar5": "temp5",
                "pcVar6": "temp6",
                "pcVar7": "temp7",
                "ppcVar8": "temp8",
                "uVar9": "temp9",
                "lVar10": "temp10",
                "__s": "temp11",
                "__s_00": "temp12",
                "lVar11": "temp13",
                "uVar12": "temp14",
                "uVar13": "temp15",
                "unaff_RBX": "temp16",
                "ppcVar14": "temp17",
                "unaff_RBP": "temp18",
                "unaff_R12": "temp19",
                "unaff_R13D": "temp20",
                "ppcVar15": "temp21",
                "unaff_R14": "temp22",
                "bVar16": "temp23",
                "bVar17": "temp24",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "temp25",
                "in_stack_00000108": "temp26"
            },
            "code": "\nundefined8 processArchiveFiles_001028ed(undefined8 param1,long param2)\n\n{\n  undefined temp1;\n  byte temp2;\n  int temp3;\n  size_t temp4;\n  int *temp5;\n  char *temp6;\n  char *temp7;\n  char **temp8;\n  undefined8 temp9;\n  long temp10;\n  char *temp11;\n  char *temp12;\n  long temp13;\n  undefined8 temp14;\n  ulong temp15;\n  char *temp16;\n  char **temp17;\n  char **temp18;\n  char **temp19;\n  uint temp20;\n  char **temp21;\n  long temp22;\n  bool temp23;\n  byte temp24;\n  char **param7;\n  undefined8 param9;\n  long temp25;\n  long temp26;\n  \n  temp24 = 0;\ncode_r0x001028ed:\n  bfd_fatal(temp16,param2);\nLAB_001028f5:\n  temp14 = posname;\n  if (temp20 != 3) {\n    while( true ) {\n      if ((undefined8 *)*temp19 == (undefined8 *)0x0) goto LAB_0010571f;\n      temp3 = filename_cmp(*(undefined8 *)*temp19,temp14);\n      if (temp3 == 0) break;\n      temp19 = (char **)(*temp19 + 0xf0);\n    }\n    if (temp20 != 2) goto LAB_0010571f;\n    temp19 = (char **)(*temp19 + 0xf0);\n    goto LAB_0010571f;\n  }\n  temp10 = *(long *)(temp22 + 0xf0);\n  if (*(long *)(temp22 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    temp13 = temp10;\n    temp10 = *(long *)(temp13 + 0xf0);\n  } while (temp10 != 0);\n  temp19 = (char **)(temp13 + 0xf0);\n  temp16 = *temp18;\n  if (libdeps_bfd != 0) goto LAB_00105731;\nLAB_00105698:\n  temp1 = make_thin_archive;\n  temp20 = (uint)(verbose != 0);\n  param2 = bfd_openr(temp16,target);\n  if (param2 != 0) {\n    temp18 = temp18 + 1;\n    temp2 = do_ar_emul_append_constprop_0(temp19,param2,temp20,temp1);\n    param9._6_1_ = param9._6_1_ | temp2;\n    temp6 = *temp18;\n    do {\n      if (temp6 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          output_filename = 0;\n          return 0;\n        }\n        temp14 = write_archive();\n        return temp14;\n      }\n      temp17 = *(char ***)(temp22 + 0xf0);\n      temp19 = param7;\n      if (param9._7_1_ == '\\0') {\n        temp21 = param7;\n        if (temp17 != (char **)0x0) {\n          do {\n            if (full_pathname == '\\0') {\n              temp11 = (char *)lbasename(*temp17);\n              temp7 = temp11;\n              if (ar_truncate != '\\0') {\n                temp4 = strlen(temp11);\n                temp15 = (ulong)*(byte *)(*(long *)(temp22 + 8) + 0x1e);\n                if (temp15 < temp4) {\n                  temp7 = (char *)xmalloc(temp15 + 1);\n                  temp10 = *(long *)(temp22 + 8);\n                  temp6 = temp7;\n                  for (temp15 = (ulong)*(byte *)(temp10 + 0x1e); temp15 != 0; temp15 = temp15 - 1) {\n                    *temp6 = *temp11;\n                    temp11 = temp11 + (ulong)temp24 * -2 + 1;\n                    temp6 = temp6 + (ulong)temp24 * -2 + 1;\n                  }\n                  temp7[*(byte *)(temp10 + 0x1e)] = '\\0';\n                }\n                temp6 = *temp18;\n                temp11 = temp7;\n                if (full_pathname == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              temp6 = *temp18;\n              if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n              temp12 = (char *)lbasename(temp6);\n              if (ar_truncate != '\\0') {\n                temp4 = strlen(temp12);\n                temp15 = (ulong)*(byte *)(*(long *)(temp22 + 8) + 0x1e);\n                temp6 = temp12;\n                temp11 = temp7;\n                if (temp15 < temp4) {\n                  temp6 = (char *)xmalloc(temp15 + 1);\n                  temp10 = *(long *)(temp22 + 8);\n                  temp7 = temp6;\n                  for (temp15 = (ulong)*(byte *)(temp10 + 0x1e); temp15 != 0; temp15 = temp15 - 1) {\n                    *temp7 = *temp12;\n                    temp12 = temp12 + (ulong)temp24 * -2 + 1;\n                    temp7 = temp7 + (ulong)temp24 * -2 + 1;\n                  }\n                  temp6[*(byte *)(temp10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              temp3 = filename_cmp(temp12,temp7);\n            }\n            else {\n              temp6 = *temp18;\n              temp11 = *temp17;\nLAB_00102980:\n              temp3 = filename_cmp(temp6,temp11);\n            }\n            if ((temp3 == 0) && (temp17[0x1c] != (char *)0x0)) {\n              if (newer_only != 0) {\n                temp3 = stat(*temp18,(stat *)&stack0x000000b0);\n                if (temp3 != 0) {\n                  temp5 = __errno_location();\n                  if (*temp5 != 2) {\n                    bfd_fatal(*temp18);\nLAB_00102b7e:\n                    temp6 = *temp17;\n                    temp14 = dcgettext(0,\"internal stat error on %s\",5);\n                    fatal(temp14,temp6);\n                    free(temp18);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                temp8 = (char **)temp17[0x1d];\n                if ((char **)temp17[0x1d] == (char **)0x0) {\n                  temp8 = temp17;\n                }\n                temp3 = (**(code **)(temp8[1] + 0x1e8))(temp17,&stack0x00000020);\n                if (temp3 != 0) goto LAB_00102b7e;\n                if (temp26 <= temp25) goto LAB_0010577e;\n              }\n              temp14 = get_pos_bfd(param7,2,*temp17);\n              if (libdeps_bfd == 0) {\nLAB_00102ae2:\n                temp6 = *temp18;\n                temp23 = verbose != 0;\n                temp10 = bfd_openr(temp6,target);\n                if (temp10 == 0) {\n                  bfd_fatal(temp6,0);\n                  goto LAB_00102b3e;\n                }\n                temp2 = ar_emul_default_replace(temp14,temp10,temp23);\n              }\n              else {\n                temp9 = normalize(*temp18);\n                temp3 = filename_cmp(temp9,\"__.LIBDEP\");\n                if (temp3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                temp2 = ar_emul_default_replace(temp14,libdeps_bfd,verbose != 0);\n              }\n              if (temp2 != 0) {\n                *temp21 = *(char **)(*temp21 + 0xf0);\n                param9._6_1_ = temp2;\n              }\n              goto LAB_0010577e;\n            }\n            temp21 = temp17 + 0x1e;\n            temp17 = (char **)temp17[0x1e];\n          } while (temp17 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        temp20 = postype;\n        if (postype != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        temp20 = postype;\n        if (postype != 0) goto LAB_001028f5;\n        temp10 = *(long *)(temp22 + 0xf0);\n        if (*(long *)(temp22 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      temp16 = *temp18;\n      if (libdeps_bfd == 0) goto LAB_00105698;\nLAB_00105731:\n      temp14 = normalize(temp16);\n      temp3 = filename_cmp(temp14,\"__.LIBDEP\");\n      if (temp3 != 0) goto code_r0x0010574f;\n      temp2 = ar_emul_default_append(temp19,libdeps_bfd,verbose != 0,make_thin_archive);\n      param9._6_1_ = temp2 | param9._6_1_;\nLAB_0010577e:\n      temp18 = temp18 + 1;\n      temp6 = *temp18;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  temp16 = *temp18;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_fatal",
                "strlen",
                "stat",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "write_archive",
                "ar_emul_default_append",
                "normalize",
                "ar_emul_default_replace",
                "fatal",
                "bfd_openr",
                "dcgettext",
                "FUN_00102943",
                "get_pos_bfd",
                "__errno_location",
                "filename_cmp",
                "lbasename",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_archive_files_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "open_inarch",
                "ar_open",
                "replace_members.cold",
                "simple_copy.constprop.0.cold",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yy_init_buffer",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "main",
                "normalize.cold",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "file_not_found_error_001025a0",
                "piVar1": "errnoPtr",
                "uVar2": "errorMsg"
            },
            "code": "\nundefined8 fileNotFoundError_001025a0(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMsg;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMsg = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMsg);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMsg);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "file_not_found_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "check_return_value_0010284b",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t check_return_value_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "check_return_value_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "start_main_loop_00105cc0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackBuffer"
            },
            "code": "\nvoid processEntry startMainLoop_00105cc0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackBuffer [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stackBuffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_modify_data_00102f08",
                "unaff_RBX": "dataPointer",
                "unaff_R12": "newValuePointer"
            },
            "code": "\nundefined8 printAndModifyData_00102f08(void)\n\n{\n  undefined8 *dataPointer;\n  undefined8 *newValuePointer;\n  \n  printf(\"a - %s\\n\",*dataPointer);\n  dataPointer[0x1e] = *newValuePointer;\n  *newValuePointer = dataPointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_and_modify_data_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "inputStruct",
                "param_2": "filePaths",
                "param_3": "isArchive",
                "ppcVar1": "currentFile",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "intVar",
                "sVar5": "sizeVar",
                "piVar6": "errorPtr",
                "pcVar7": "file",
                "pcVar8": "fileName",
                "uVar9": "outputFilePath",
                "pcVar10": "currentPath",
                "__s": "baseName",
                "lVar11": "currentNode",
                "lVar12": "nextNode",
                "uVar13": "returnVal",
                "uVar14": "ulongVar",
                "ppcVar15": "currentNode",
                "ppcVar16": "nextNode",
                "uVar17": "postype",
                "ppcVar18": "previousNode",
                "bVar19": "boolVar",
                "bVar20": "byteVar",
                "local_15a": "localFlag",
                "auStack_158": "stackVar",
                "lStack_100": "timeVar",
                "sStack_c8": "statStruct"
            },
            "code": "\nundefined8 processFiles_00105570(long inputStruct,char **filePaths,char isArchive)\n\n{\n  char **currentFile;\n  undefined undefinedVar;\n  byte byteVar;\n  int intVar;\n  size_t sizeVar;\n  int *errorPtr;\n  char *file;\n  char *fileName;\n  undefined8 outputFilePath;\n  char *currentPath;\n  char *baseName;\n  long currentNode;\n  long nextNode;\n  undefined8 returnVal;\n  ulong ulongVar;\n  char **currentNode;\n  char **nextNode;\n  uint postype;\n  char **previousNode;\n  bool boolVar;\n  byte byteVar;\n  byte localFlag;\n  undefined stackVar [88];\n  long timeVar;\n  stat statStruct;\n  \n  byteVar = 0;\n  currentFile = (char **)(inputStruct + 0xf0);\n  localFlag = 0;\n  if (filePaths == (char **)0x0) {\n    returnVal = initialize_output_00102943();\n    return returnVal;\n  }\n  do {\n    currentPath = *filePaths;\njoined_r0x001055aa:\n    if (currentPath == (char *)0x0) {\n      if (localFlag != 0) {\n        returnVal = write_archive(inputStruct);\n        return returnVal;\n      }\n      output_filename = 0;\n      return 0;\n    }\n    currentNode = *(char ***)(inputStruct + 0xf0);\n    nextNode = currentFile;\n    if (isArchive != '\\0') {\nLAB_0010564c:\n      postype = postype;\n      if (postype != 0) goto LAB_001028f5;\n      nextNode = *(long *)(inputStruct + 0xf0);\n      if (*(long *)(inputStruct + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentNode = nextNode;\n        nextNode = *(long *)(currentNode + 0xf0);\n      } while (nextNode != 0);\n      nextNode = (char **)(currentNode + 0xf0);\n      currentPath = *filePaths;\n      do {\n        if (libdeps_bfd != 0) {\n          returnVal = normalize(currentPath,inputStruct);\n          intVar = filename_cmp(returnVal,\"__.LIBDEP\");\n          if (intVar == 0) {\n            byteVar = ar_emul_default_append(nextNode,libdeps_bfd,verbose != 0,make_thin_archive);\n            localFlag = byteVar | localFlag;\n            goto LAB_0010577e;\n          }\n          currentPath = *filePaths;\n        }\n        undefinedVar = make_thin_archive;\n        boolVar = verbose != 0;\n        nextNode = bfd_openr(currentPath,target);\n        if (nextNode != 0) {\n          filePaths = filePaths + 1;\n          byteVar = do_ar_emul_append_constprop_0(nextNode,nextNode,(uint)boolVar,undefinedVar);\n          localFlag = localFlag | byteVar;\n          currentPath = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(currentPath,0);\n        postype = (uint)boolVar;\nLAB_001028f5:\n        returnVal = posname;\n        if (postype == 3) {\n          nextNode = *(long *)(inputStruct + 0xf0);\n          if (*(long *)(inputStruct + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*nextNode != (undefined8 *)0x0;\n              nextNode = (char **)(*nextNode + 0xf0)) {\n            intVar = filename_cmp(*(undefined8 *)*nextNode,returnVal);\n            if (intVar == 0) {\n              if (postype == 2) {\n                nextNode = (char **)(*nextNode + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentPath = *filePaths;\n      } while( true );\n    }\n    previousNode = currentFile;\n    if (currentNode == (char **)0x0) {\n      postype = postype;\n      if (postype == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname == '\\0') {\n      currentPath = (char *)lbasename(*currentNode);\n      fileName = currentPath;\n      if (ar_truncate != '\\0') {\n        sizeVar = strlen(currentPath);\n        ulongVar = (ulong)*(byte *)(*(long *)(inputStruct + 8) + 0x1e);\n        if (ulongVar < sizeVar) {\n          fileName = (char *)xmalloc(ulongVar + 1);\n          nextNode = *(long *)(inputStruct + 8);\n          file = fileName;\n          for (ulongVar = (ulong)*(byte *)(nextNode + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *file = *currentPath;\n            currentPath = currentPath + (ulong)byteVar * -2 + 1;\n            file = file + (ulong)byteVar * -2 + 1;\n          }\n          fileName[*(byte *)(nextNode + 0x1e)] = '\\0';\n        }\n        file = *filePaths;\n        currentPath = fileName;\n        if (full_pathname == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file = *filePaths;\n      if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName = (char *)lbasename(file);\n      if (ar_truncate != '\\0') {\n        sizeVar = strlen(baseName);\n        ulongVar = (ulong)*(byte *)(*(long *)(inputStruct + 8) + 0x1e);\n        file = baseName;\n        currentPath = fileName;\n        if (ulongVar < sizeVar) {\n          file = (char *)xmalloc(ulongVar + 1);\n          nextNode = *(long *)(inputStruct + 8);\n          fileName = file;\n          for (ulongVar = (ulong)*(byte *)(nextNode + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *fileName = *baseName;\n            baseName = baseName + (ulong)byteVar * -2 + 1;\n            fileName = fileName + (ulong)byteVar * -2 + 1;\n          }\n          file[*(byte *)(nextNode + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      intVar = filename_cmp(baseName,fileName);\n      if (intVar == 0) goto LAB_00102993;\nLAB_00105639:\n      previousNode = currentNode + 0x1e;\n      currentNode = (char **)currentNode[0x1e];\n      if (currentNode == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file = *filePaths;\n    currentPath = *currentNode;\nLAB_00102980:\n    intVar = filename_cmp(file,currentPath);\n    if (intVar != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentNode[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (newer_only != 0) {\n      intVar = stat(*filePaths,&statStruct);\n      if (intVar != 0) {\n        errorPtr = __errno_location();\n        if (*errorPtr != 2) {\n          bfd_fatal(*filePaths);\nLAB_00102b7e:\n          currentPath = *currentNode;\n          returnVal = dcgettext(0,\"internal stat error on %s\",5);\n          fatal(returnVal,currentPath);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      nextNode = (char **)currentNode[0x1d];\n      if ((char **)currentNode[0x1d] == (char **)0x0) {\n        nextNode = currentNode;\n      }\n      intVar = (**(code **)(nextNode[1] + 0x1e8))(currentNode,stackVar);\n      if (intVar != 0) goto LAB_00102b7e;\n      if (statStruct.st_mtim.tv_sec <= timeVar) goto LAB_0010577e;\n    }\n    returnVal = get_pos_bfd(currentFile,2,*currentNode);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      currentPath = *filePaths;\n      boolVar = verbose != 0;\n      nextNode = bfd_openr(currentPath,target);\n      if (nextNode == 0) {\n        bfd_fatal(currentPath,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = ar_emul_default_replace(returnVal,nextNode,boolVar);\n    }\n    else {\n      outputFilePath = normalize(*filePaths,inputStruct);\n      intVar = filename_cmp(outputFilePath,\"__.LIBDEP\");\n      if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = ar_emul_default_replace(returnVal,libdeps_bfd,verbose != 0);\n    }\n    if (byteVar != 0) {\n      *previousNode = *(char **)(*previousNode + 0xf0);\n      localFlag = byteVar;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_entry_not_found_error_message_0010285f",
                "__format": "errorMessageFormat",
                "lVar2": "normalizedFilename",
                "plVar3": "archiveEntry",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "callbackFunction",
                "unaff_R12": "archiveStructure",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "counter"
            },
            "code": "\n\n\nvoid printEntryNotFoundErrorMessage_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessageFormat;\n  long normalizedFilename;\n  long *archiveEntry;\n  undefined8 entryName;\n  long *currentEntry;\n  code *callbackFunction;\n  long archiveStructure;\n  int remainingEntries;\n  undefined8 *entryNames;\n  int counter;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessageFormat,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archiveStructure + 0xf0);\n  counter = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      normalizedFilename = *currentEntry;\n      if (normalizedFilename == 0) {\n        archiveEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          archiveEntry = currentEntry;\n        }\n        (**(code **)(archiveEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archiveStructure + 0x49) & 0x10) == 0) || (normalizedFilename = normalize(), normalizedFilename != 0)) {\n        entryName = normalize(*entryNames);\n        iVar1 = filename_cmp(entryName,normalizedFilename);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (counter = counter + 1,\n            counter == counted_name_counter)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callbackFunction)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_entry_not_found_error_message_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_usage_0010394a",
                "param_1": "isVerboseMode",
                "uVar1": "programName",
                "pcVar2": "localizedMessage",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveUsage_0010394a(uint isVerboseMode)\n\n{\n  undefined8 programName;\n  char *localizedMessage;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (isVerboseMode != 0) {\n    outputStream = _stdout;\n  }\n  localizedMessage = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,localizedMessage,programName);\n  localizedMessage = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  localizedMessage = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,localizedMessage);\n  list_supported_targets(program_name,outputStream);\n  if (isVerboseMode != 0) {\n    localizedMessage = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedMessage,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerboseMode ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_archive_usage_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "initialize_00105bb0",
                "undefined8": "void",
                "return": "result"
            },
            "code": "\nvoid initialize_00105bb0(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "get_default_value_00107640",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getDefaultValue_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "get_default_value_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "exit_on_error_0010315d",
                "interactive": "isInteractive",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitOnError_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    exitCode(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "exit_on_error_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_description_00107890",
                "param_1": "description",
                "_stdout": "output_stream",
                "verbose": "is_verbose",
                "display_offsets": "show_offsets"
            },
            "code": "\n\n\nvoid print_arelt_description_00107890(undefined8 description)\n\n{\n  print_arelt_descr(output_stream,description,is_verbose != 0,show_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "print_and_update_data_00103172",
                "param_1": "data_ptr",
                "param_2": "string_ptr",
                "param_3": "flag",
                "param_4": "data_value",
                "uVar1": "data",
                "auVar2": "modified_data"
            },
            "code": "\nundefined  [16]\nprint_and_update_data_00103172(undefined8 *data_ptr,undefined8 *string_ptr,char flag,undefined8 data_value)\n\n{\n  undefined8 data;\n  undefined modified_data [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*string_ptr);\n  }\n  data = *data_ptr;\n  string_ptr[0x1e] = data;\n  modified_data._1_7_ = (undefined7)((ulong)data >> 8);\n  modified_data[0] = 1;\n  *data_ptr = string_ptr;\n  modified_data._8_8_ = data_value;\n  return modified_data;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "print_and_update_data_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "yy_buffer_stack": "bufferStack",
                "yy_buffer_stack_top": "stackTop",
                "puVar1": "bufferPtr",
                "yy_n_chars": "numChars",
                "yy_c_buf_p": "charBufferPtr",
                "yytext": "textBuffer",
                "yyin": "input",
                "yy_hold_char": "holdChar"
            },
            "code": "\nvoid initializeBuffer_001030ed(void)\n\n{\n  undefined8 *bufferPtr;\n  \n  bufferPtr = *(undefined8 **)(bufferStack + stackTop * 8);\n  numChars = *(undefined4 *)((long)bufferPtr + 0x1c);\n  charBufferPtr = (undefined *)bufferPtr[2];\n  textBuffer = charBufferPtr;\n  input = *bufferPtr;\n  holdChar = *charBufferPtr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yyparse.isra.0",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_remove_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "fileSize",
                "uVar1": "result",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "uVar5": "copyResult",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16] copyAndRemoveFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 fileSize)\n\n{\n  uint result;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorString;\n  ulong copyResult;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copyResult = 0;\n  }\n  else {\n    result = simple_copy_constprop_0(filePermissions);\n    copyResult = (ulong)result;\n    if (result != 0) {\n      errorLocation = __errno_location();\n      errorMessage = strerror(*errorLocation);\n      errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorString,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  returnValue._8_8_ = fileSize;\n  returnValue._0_8_ = copyResult;\n  return returnValue;\n}\n\n",
            "called": [
                "smart_rename.constprop.0.cold",
                "simple_copy.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_file_size_00107650",
                "param_1": "filePath",
                "uVar1": "returnValue",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 checkFileSize_00107650(undefined8 filePath)\n\n{\n  undefined8 returnValue;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    returnValue = 1;\n  }\n  else {\n    write_armap = 1;\n    fileSize = open_inarch(filePath,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "open_inarch",
                "ranlib_only.cold",
                "get_file_size",
                "write_archive",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_size_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_delete_00102f1e",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorPointer",
                "uVar2": "errorMsg"
            },
            "code": "\nundefined  [16] copyFileAndDelete_00102f1e(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMsg;\n  ulong fileSize;\n  char *filePath;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMsg = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMsg);\n  unlink(filePath);\n  auVar3._0_8_ = fileSize & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_and_delete_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_error_00102fd7",
                "piVar1": "errnoLocation",
                "uVar2": "translatedErrorMessage"
            },
            "code": "\nvoid printTimeError_00102fd7(void)\n\n{\n  int *errnoLocation;\n  undefined8 translatedErrorMessage;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(translatedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "print_time_error_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "initialize_00105d60",
                "completed_0": "is_initialized"
            },
            "code": "\nvoid initialize_00105d60(void)\n\n{\n  if (is_initialize_00105d60d != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  is_initialize_00105d60d = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_binutils_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printBinutilsInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_binutils_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archivePtr",
                "param_2": "entryProcessor",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "errorMessageFormat",
                "lVar2": "currentEntryPtr",
                "plVar3": "fallbackEntryPtr",
                "uVar4": "normalizedEntryName",
                "plVar5": "entryPtrs",
                "local_cc": "counter",
                "local_c8": "temporaryBuffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archivePtr,code *entryProcessor,undefined8 *entryNames,int numEntries)\n\n{\n  int comparisonResult;\n  char *errorMessageFormat;\n  long currentEntryPtr;\n  long *fallbackEntryPtr;\n  undefined8 normalizedEntryName;\n  long *entryPtrs;\n  int counter;\n  undefined temporaryBuffer [152];\n  \n  currentEntryPtr = *(long *)(archivePtr + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntryPtr != 0; currentEntryPtr = *(long *)(currentEntryPtr + 0xf0)) {\n      (*entryProcessor)(currentEntryPtr);\n    }\n  }\n  else {\n    for (; currentEntryPtr != 0; currentEntryPtr = *(long *)(currentEntryPtr + 0xf0)) {\n      *(undefined4 *)(currentEntryPtr + 0xac) = 0;\n    }\n    do {\n      entryPtrs = *(long **)(archivePtr + 0xf0);\n      counter = 0;\n      for (; entryPtrs != (long *)0x0; entryPtrs = (long *)entryPtrs[0x1e]) {\n        if (*(int *)((long)entryPtrs + 0xac) == 0) {\n          currentEntryPtr = *entryPtrs;\n          if (currentEntryPtr == 0) {\n            fallbackEntryPtr = (long *)entryPtrs[0x1d];\n            if ((long *)entryPtrs[0x1d] == (long *)0x0) {\n              fallbackEntryPtr = entryPtrs;\n            }\n            (**(code **)(fallbackEntryPtr[1] + 0x1e8))(entryPtrs,temporaryBuffer);\n          }\n          else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) ||\n                  (currentEntryPtr = normalize(currentEntryPtr,archivePtr), currentEntryPtr != 0)) {\n            normalizedEntryName = normalize(*entryNames,archivePtr);\n            comparisonResult = filename_cmp(normalizedEntryName,currentEntryPtr);\n            if ((comparisonResult == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (counter = counter + 1, counter == counted_name_counter)))) {\n              (*entryProcessor)();\n              *(undefined4 *)((long)entryPtrs + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedEntryName = *entryNames;\n      errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMessageFormat,normalizedEntryName);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "normalize",
                "map_over_members.cold",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "input_archive",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "backup_input_archive",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "sVar5": "bytes_written",
                "piVar6": "errno_location",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "error_string",
                "unaff_R13": "total_bytes_written",
                "unaff_R14": "archive_size",
                "auStack_b8": "stack_buffer",
                "local_88": "total_archive_size"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *input_archive)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *backup_input_archive;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_location;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong total_bytes_written;\n  ulong archive_size;\n  undefined stack_buffer [48];\n  ulong total_archive_size;\n  \n  buffer = (void *)xmalloc(0x2000);\n  backup_input_archive = (undefined8 *)input_archive[0x1d];\n  if ((undefined8 *)input_archive[0x1d] == (undefined8 *)0x0) {\n    backup_input_archive = input_archive;\n  }\n  result = (**(code **)(backup_input_archive[1] + 0x1e8))(input_archive,stack_buffer);\n  if (result == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*input_archive);\n    }\n    total_bytes_written = 0;\n    bfd_seek(input_archive,0,0);\n    goto LAB_00103afd;\n  }\n  input_archive = (undefined8 *)*input_archive;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    fatal(error_message,input_archive);\n    total_archive_size = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        errno_location = __errno_location();\n        error_string = strerror(*errno_location);\n        fatal(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_bytes_written = total_bytes_written + bytes_written;\nLAB_00103afd:\n      if (total_archive_size <= total_bytes_written) goto LAB_00103b91;\n      remaining_bytes = total_archive_size - total_bytes_written;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,input_archive);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    input_archive = *(undefined8 **)input_archive[0x1d];\n    archive_size = total_archive_size;\n  } while( true );\n}\n\n",
            "called": [
                "strerror",
                "bfd_bread",
                "free",
                "fatal",
                "dcgettext",
                "fwrite",
                "bfd_seek",
                "__errno_location",
                "printf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_to_file_001058b0",
                "param_1": "parameters",
                "cVar1": "returnValue",
                "uVar2": "flags",
                "iVar3": "archiveFileDescriptor",
                "uVar4": "tempFilename",
                "__format": "formatString",
                "__ptr": "tempFilePath",
                "__stream": "outputFile",
                "ppcVar5": "outputBfd",
                "uStack0000000000000020": "fileMode",
                "in_stack_00000028": "groupID",
                "in_stack_00000038": "timestamp",
                "local_3c": "errorCode",
                "uStack_33": "fileType",
                "cStack_32": "filePermissions1",
                "cStack_31": "filePermissions2"
            },
            "code": "\nvoid write_archive_to_file_001058b0(undefined8 *parameters)\n\n{\n  char returnValue;\n  uint flags;\n  int archiveFileDescriptor;\n  undefined8 tempFilename;\n  char *formatString;\n  void *tempFilePath;\n  FILE *outputFile;\n  char **outputBfd;\n  uint fileMode;\n  uint groupID;\n  undefined8 timestamp;\n  int errorCode [2];\n  undefined fileType;\n  char filePermissions1;\n  char filePermissions2;\n  \n  tempFilename = parameters[0x1e];\n  errorCode[0] = -1;\n  tempFilePath = (void *)xstrdup(*parameters);\n  outputFile = (FILE *)make_tempname(tempFilePath,errorCode);\n  archiveFileDescriptor = errorCode[0];\n  if (outputFile != (FILE *)0x0) {\n    output_filename = outputFile;\n    outputBfd = (char **)bfd_fdopenw(outputFile,*(undefined8 *)parameters[1],errorCode[0]);\n    if (outputBfd != (char **)0x0) {\n      output_bfd = outputBfd;\n      bfd_set_format(outputBfd,2);\n      flags = (~write_armap >> 0x1f) << 3 | *(byte *)((long)outputBfd + 0x49) & 0xfffffff7;\n      *(char *)((long)outputBfd + 0x49) = (char)flags;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)outputBfd + 0x44) = *(uint *)((long)outputBfd + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)outputBfd + 0x44) = *(uint *)((long)outputBfd + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)outputBfd + 0x49) = (byte)flags | 0x10;\n        }\n        returnValue = bfd_set_archive_head(outputBfd,tempFilename);\n        if (returnValue != '\\0') break;\n        flags = bfd_fatal(tempFilePath);\nLAB_00102d37:\n        *(uint *)((long)outputBfd + 0x44) = *(uint *)((long)outputBfd + 0x44) | 0x100000;\n      }\n      archiveFileDescriptor = dup(archiveFileDescriptor);\n      returnValue = bfd_close(outputBfd);\n      if (returnValue == '\\0') {\n        bfd_fatal(tempFilePath);\n        formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,formatString);\n        flags = fileMode & 0xf000;\n        if (flags == 0x4000) {\n          fileType = 100;\n        }\n        else if (flags == 0xa000) {\n          fileType = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          fileType = 0x62;\n        }\n        else if (flags == 0x2000) {\n          fileType = 99;\n        }\n        else if (flags == 0xc000) {\n          fileType = 0x73;\n        }\n        else {\n          fileType = 0x70;\n          if (flags != 0x1000) {\n            fileType = 0x2d;\n          }\n        }\n        filePermissions1 = (-((_fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n        filePermissions2 = (-((_fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&filePermissions1,_fileMode >> 0x20,\n                (ulong)groupID,timestamp,&stack0xffffffffffffffd8,\n                _fileMode & 0xffffffff);\n        fputs(*outputBfd,outputFile);\n        if ((char)parameters != '\\0') {\n          if ((*(byte *)((long)outputBfd + 0x49) & 0x10) == 0) {\n            if (outputBfd[0xb] != (char *)0x0) {\n              fprintf(outputFile,\" 0x%lx\");\n            }\n          }\n          else if (outputBfd[0xc] != (char *)0x0) {\n            fprintf(outputFile,\" 0x%lx\");\n          }\n        }\n        fputc(10,outputFile);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(parameters);\n      archiveFileDescriptor = smart_rename_constprop_0(outputFile,tempFilePath,archiveFileDescriptor);\n      if (archiveFileDescriptor == 0) {\n        free(tempFilePath);\n        free(outputFile);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(archiveFileDescriptor);\n    bfd_fatal(tempFilePath);\n  }\n  tempFilename = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(tempFilename);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_fdopenw",
                "bfd_fatal",
                "close",
                "bfd_set_format",
                "dcgettext",
                "make_tempname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "write_archive_to_file_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "main",
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "path",
                "pcVar1": "outputDir",
                "pcVar2": "currentPath",
                "uVar3": "baseName",
                "uVar4": "errorMessage",
                "pFVar5": "filePointer",
                "sVar6": "outputDirLength"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *path)\n\n{\n  char *outputDir;\n  char *currentPath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t outputDirLength;\n  \n  outputDir = output_dir;\n  output_filename = path;\n  if (*path == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    outputDir = output_filename;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(errorMessage,outputDir,baseName);\n    output_filename = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*path == '\\0') {\n      if ((output_dir != (char *)0x0) && (outputDirLength = strlen(output_dir), outputDirLength != 0)) {\n        if (outputDir[outputDirLength - 1] == '/') {\n          output_filename = (char *)concat(outputDir,output_filename,0);\n        }\n        else {\n          output_filename = (char *)concat(outputDir,&DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      filePointer = fopen(output_filename,\"w\");\n      if (filePointer == (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPath = path;\n    if ((*path == '.') && (currentPath = path + 1, path[1] == '.')) {\n      currentPath = path + 2;\n      if ((path[2] == '/') || (path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n    }\n    for (; path = currentPath, *currentPath == '/'; currentPath = currentPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_error_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer",
                "iVar1": "savedError"
            },
            "code": "\nundefined8 closeFileAndSetError_00102f55(void)\n\n{\n  int savedError;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  savedError = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = savedError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_basename_and_create_temp_file_001057a0",
                "param_1": "filepath",
                "param_2": "file_descriptor",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2",
                "pcVar2": "last_slash",
                "lVar3": "basename_length",
                "lVar4": "loop_counter",
                "lVar5": "last_slash_offset",
                "pcVar6": "basename",
                "bVar7": "null_byte_count",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_basename_and_create_temp_file_001057a0(char *filepath,int *file_descriptor,undefined8 unknown_param_1,undefined8 unknown_param_2)\n\n{\n  int iVar1;\n  char *last_slash;\n  long basename_length;\n  long loop_counter;\n  long last_slash_offset;\n  char *basename;\n  byte null_byte_count;\n  undefined return_value [16];\n  \n  null_byte_count = 0;\n  last_slash = strrchr(filepath,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    basename_length = 0;\n  }\n  else {\n    last_slash_offset = (long)last_slash - (long)filepath;\n    last_slash = (char *)xmalloc(last_slash_offset + 0xb);\n    basename_length = last_slash_offset + 1;\n    basename = last_slash;\n    for (loop_counter = last_slash_offset; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *basename = *filepath;\n      filepath = filepath + (ulong)null_byte_count * -2 + 1;\n      basename = basename + (ulong)null_byte_count * -2 + 1;\n    }\n    last_slash[last_slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + basename_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + basename_length) + 8) = 0;\n  iVar1 = mkstemp(last_slash);\n  if (iVar1 == -1) {\n    basename = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = iVar1;\n    basename = last_slash;\n  }\n  return_value._8_8_ = unknown_param_2;\n  return_value._0_8_ = basename;\n  return return_value;\n}\n\n",
            "called": [
                "make_tempname.cold",
                "mkstemp",
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "extract_basename_and_create_temp_file_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "main",
                "ar_emul_default_usage",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "map_over_members.cold",
                "usage",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "handle_fatal_error_00107c10",
                "bfd_nonfatal": "handleNonFatal",
                "xexit": "exitCode"
            },
            "code": "\nvoid handleFatalError_00107c10(void)\n\n{\n  handleNonFatal();\n                    \n  exitCode(1);\n}\n\n",
            "called": [
                "bfd_nonfatal",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "write_archive",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "handle_fatal_error_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "prompt",
                "bfd_nonfatal.cold",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_exit_functions_00107cc0",
                "plVar4": "exitFunctionPtr",
                "uVar5": "counter",
                "lVar1": "index",
                "lVar2": "tempIndex1",
                "lVar3": "tempIndex2"
            },
            "code": "\nvoid executeExitFunctions_00107cc0(void)\n\n{\n  long index;\n  long tempIndex1;\n  long tempIndex2;\n  long *exitFunctionPtr;\n  uint counter;\n  \n  exitFunctionPtr = (long *)xatexit_head;\n  if (xatexit_head != (undefined *)0x0) {\n    do {\n      counter = *(int *)(exitFunctionPtr + 1) - 1;\n      if (-1 < (int)counter) {\n        index = (long)(int)counter;\n        counter = counter & 7;\n        (*(code *)exitFunctionPtr[index + 2])();\n        tempIndex1 = index + -1;\n        if (-1 < (int)tempIndex1) {\n          tempIndex2 = tempIndex1;\n          if (counter != 0) {\n            if (counter != 1) {\n              if (counter != 2) {\n                if (counter != 3) {\n                  if (counter != 4) {\n                    if (counter != 5) {\n                      if (counter != 6) {\n                        (*(code *)exitFunctionPtr[index + 1])();\n                        tempIndex1 = index + -2;\n                      }\n                      (*(code *)exitFunctionPtr[tempIndex1 + 2])();\n                      tempIndex1 = tempIndex1 + -1;\n                    }\n                    (*(code *)exitFunctionPtr[tempIndex1 + 2])();\n                    tempIndex1 = tempIndex1 + -1;\n                  }\n                  (*(code *)exitFunctionPtr[tempIndex1 + 2])();\n                  tempIndex1 = tempIndex1 + -1;\n                }\n                (*(code *)exitFunctionPtr[tempIndex1 + 2])();\n                tempIndex1 = tempIndex1 + -1;\n              }\n              (*(code *)exitFunctionPtr[tempIndex1 + 2])();\n              tempIndex1 = tempIndex1 + -1;\n            }\n            (*(code *)exitFunctionPtr[tempIndex1 + 2])();\n            tempIndex2 = tempIndex1 + -1;\n            if ((int)(tempIndex1 + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)exitFunctionPtr[tempIndex2 + 2])();\n            index = tempIndex2 + -1;\n            (*(code *)exitFunctionPtr[tempIndex2 + 1])();\n            (*(code *)exitFunctionPtr[tempIndex2])();\n            (*(code *)exitFunctionPtr[index])();\n            (*(code *)exitFunctionPtr[tempIndex2 + -2])();\n            (*(code *)exitFunctionPtr[tempIndex2 + -3])();\n            (*(code *)exitFunctionPtr[tempIndex2 + -4])();\n            (*(code *)exitFunctionPtr[tempIndex2 + -5])();\n            tempIndex2 = tempIndex2 + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      exitFunctionPtr = (long *)*exitFunctionPtr;\n    } while (exitFunctionPtr != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_constprop_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "code": "\nvoid appendConstprop_00105ae0(undefined8 input1,undefined8 input2,undefined input3,undefined input4)\n\n{\n  do_ar_emul_append_constprop_0(input1,input2,input3,input4);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_constprop_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "param_7": "inputParam7",
                "param_8": "inputParam8",
                "param_9": "outputParam1",
                "param_10": "outputParam2",
                "param_11": "outputParam3",
                "param_12": "outputParam4",
                "param_13": "outputParam5",
                "param_14": "outputParam6",
                "in_AL": "isFlagSet",
                "local_d8": "size",
                "local_d4": "localVar1",
                "local_d0": "localArrayPtr",
                "local_c8": "localArray",
                "local_b8": "localBuffer",
                "local_b0": "outputParam2",
                "local_a8": "outputParam3",
                "local_a0": "outputParam4",
                "local_98": "outputParam5",
                "local_90": "outputParam6",
                "local_88": "inputParam1",
                "local_78": "inputParam2",
                "local_68": "inputParam3",
                "local_58": "inputParam4",
                "local_48": "inputParam5",
                "local_38": "inputParam6",
                "local_28": "inputParam7",
                "local_18": "inputParam8"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4,\n                 undefined4 inputParam5,undefined4 inputParam6,undefined4 inputParam7,undefined4 inputParam8,\n                 undefined8 outputParam1,undefined8 outputParam2,undefined8 outputParam3,undefined8 outputParam4,\n                 undefined8 outputParam5,undefined8 outputParam6)\n\n{\n  char isFlagSet;\n  undefined4 size;\n  undefined4 localVar1;\n  undefined *localArrayPtr;\n  undefined *localArray;\n  undefined localBuffer [8];\n  undefined8 outputParam2;\n  undefined8 outputParam3;\n  undefined8 outputParam4;\n  undefined8 outputParam5;\n  undefined8 outputParam6;\n  undefined4 inputParam1;\n  undefined4 inputParam2;\n  undefined4 inputParam3;\n  undefined4 inputParam4;\n  undefined4 inputParam5;\n  undefined4 inputParam6;\n  undefined4 inputParam7;\n  undefined4 inputParam8;\n  \n  if (isFlagSet != '\\0') {\n    inputParam1 = inputParam1;\n    inputParam2 = inputParam2;\n    inputParam3 = inputParam3;\n    inputParam4 = inputParam4;\n    inputParam5 = inputParam5;\n    inputParam6 = inputParam6;\n    inputParam7 = inputParam7;\n    inputParam8 = inputParam8;\n  }\n  localArrayPtr = &stack0x00000008;\n  size = 8;\n  localArray = localBuffer;\n  localVar1 = 0x30;\n  outputParam2 = outputParam2;\n  outputParam3 = outputParam3;\n  outputParam4 = outputParam4;\n  outputParam5 = outputParam5;\n  outputParam6 = outputParam6;\n  report(outputParam1,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "output",
                "lVar1": "targetItem",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr",
                "fprintf": "printFormatted",
                "dcgettext": "getLocalizedMessage",
                "fputc": "putCharacter",
                "free": "releaseMemory"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *output)\n\n{\n  long targetItem;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)getLocalizedMessage(0,\"Supported targets:\",5);\n    printFormatted(output,message);\n  }\n  else {\n    message = (char *)getLocalizedMessage(0,\"%s: supported targets:\",5);\n    printFormatted(output,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    targetItem = *ptr;\n    ptr = ptr + 1;\n    if (targetItem == 0) break;\n    printFormatted(output,\" %s\");\n  }\n  putCharacter(10,output);\n  releaseMemory(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "reverse_pathname_00105830",
                "param_1": "pathname",
                "param_2": "buffer",
                "param_3": "var3",
                "param_4": "var4",
                "lVar1": "var1",
                "__s": "baseName",
                "sVar2": "baseNameLength",
                "uVar3": "desiredLength",
                "pcVar4": "destination",
                "bVar5": "isNegative",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] reversePathname_00105830(char *pathname,long buffer,undefined8 var3,undefined8 var4)\n\n{\n  long var1;\n  size_t baseNameLength;\n  char *baseName;\n  ulong desiredLength;\n  char *destination;\n  byte isNegative;\n  undefined result [16];\n  \n  isNegative = 0;\n  if (full_pathname == '\\0') {\n    baseName = (char *)lbasename();\n    pathname = baseName;\n    if ((ar_truncate != '\\0') && (buffer != 0)) {\n      baseNameLength = strlen(baseName);\n      desiredLength = (ulong)*(byte *)(*(long *)(buffer + 8) + 0x1e);\n      if (desiredLength < baseNameLength) {\n        pathname = (char *)xmalloc(desiredLength + 1);\n        var1 = *(long *)(buffer + 8);\n        destination = pathname;\n        for (desiredLength = (ulong)*(byte *)(var1 + 0x1e); desiredLength != 0; desiredLength = desiredLength - 1) {\n          *destination = *baseName;\n          baseName = baseName + (ulong)isNegative * -2 + 1;\n          destination = destination + (ulong)isNegative * -2 + 1;\n        }\n        pathname[*(byte *)(var1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = var4;\n  result._0_8_ = pathname;\n  return result;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "map_over_members",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "reverse_pathname_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorDescription",
                "iVar1": "errorNumber",
                "uVar2": "errorMessage",
                "in_R10": "additionalData"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorDescription)\n\n{\n  int errorNumber;\n  undefined8 errorMessage;\n  undefined8 additionalData;\n  \n  errorNumber = bfd_get_error();\n  if (errorNumber == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorNumber);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorDescription,errorMessage,additionalData);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,additionalData);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "create_output_file_00102e57",
                "pFVar1": "filePointer",
                "output_filename": "concatenatedFileName"
            },
            "code": "\nvoid createOutputFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  concatenatedFileName = (char *)concat();\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",concatenatedFileName);\n  }\n  filePointer = fopen(concatenatedFileName,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(concatenatedFileName);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "output_buffer",
                "param_2": "archive_file",
                "param_3": "perform_additional_checks",
                "param_4": "check_file_format",
                "cVar1": "is_valid_format",
                "uVar2": "num_extracted_files",
                "lVar3": "archived_file",
                "uVar4": "result",
                "do_ar_emul_append_constprop_0_cold": "append_constprop_file"
            },
            "code": "\nulong extract_archived_files_00105af0(long *output_buffer,long archive_file,char perform_additional_checks,char check_file_format)\n\n{\n  char is_valid_format;\n  uint num_extracted_files;\n  long archived_file;\n  ulong result;\n  \n  if (check_file_format == '\\0') {\n    if (perform_additional_checks != '\\0') {\n      result = append_constprop_file();\n      return result;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_file,2);\n    if (is_valid_format != '\\0') {\n      result = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        num_extracted_files = extract_archived_files_00105af0(output_buffer,archived_file,perform_additional_checks,1);\n        if ((char)num_extracted_files != '\\0') {\n          result = (ulong)num_extracted_files;\n          output_buffer = (long *)(*output_buffer + 0xf0);\n        }\n      }\n      return result;\n    }\n    if (perform_additional_checks != '\\0') {\n      result = append_constprop_file();\n      return result;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *output_buffer;\n  *output_buffer = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "do_ar_emul_append.constprop.0",
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "ar_emul_default_append"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "get_file_size",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "cleanup_and_return_00102ba1",
                "unaff_retaddr": "return_address",
                "auVar1": "return_value",
                "unaff_RBP": "memory_ptr"
            },
            "code": "\nundefined  [16] cleanup_and_return_00102ba1(void)\n\n{\n  undefined return_value [16];\n  void *memory_ptr;\n  ulong return_address;\n  \n  free(memory_ptr);\n  return_value._8_8_ = 0;\n  return_value._0_8_ = return_address;\n  return return_value << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "cleanup_and_return_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "fileLines",
                "unaff_RBP": "outputFile",
                "unaff_R12": "fileFlags",
                "unaff_R13": "memoryBlock",
                "unaff_R14D": "dupFileDescriptor",
                "uStack000000000000001f": "undefinedFlag",
                "uStack0000000000000068": "filePermissions",
                "uStack000000000000006c": "fileUserID",
                "in_stack_00000070": "fileGroupID",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **fileLines;\n  FILE *outputFile;\n  long fileFlags;\n  void *memoryBlock;\n  int dupFileDescriptor;\n  undefined uStack0000000000000015;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char in_stack_00000018;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined undefinedFlag;\n  uint filePermissions;\n  uint fileUserID;\n  uint fileGroupID;\n  undefined8 fileSize;\n  \n  do {\n    bVar1 = bfd_fatal();\n    *(uint *)((long)fileLines + 0x44) = *(uint *)((long)fileLines + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(fileFlags + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileLines + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(dupFileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    output_bfd = 0;\n    output_filename = 0;\n    bfd_close();\n    iVar3 = smart_rename_constprop_0();\n    if (iVar3 == 0) {\n      free(memoryBlock);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = filePermissions & 0xf000;\n  if (uVar4 == 0x4000) {\n    uStack0000000000000015 = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    uStack0000000000000015 = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    uStack0000000000000015 = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    uStack0000000000000015 = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    uStack0000000000000015 = 0x73;\n  }\n  else {\n    uStack0000000000000015 = 0x70;\n    if (uVar4 != 0x1000) {\n      uStack0000000000000015 = 0x2d;\n    }\n  }\n  cStack0000000000000016 = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  cStack0000000000000017 = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  in_stack_00000018 = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  cStack0000000000000019 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001a = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001b = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  cStack000000000000001c = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001d = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001e = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (in_stack_00000018 == 'x') {\n      in_stack_00000018 = 's';\n    }\n    else {\n      in_stack_00000018 = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (cStack000000000000001b == 'x') {\n      cStack000000000000001b = 's';\n    }\n    else {\n      cStack000000000000001b = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (cStack000000000000001e == 'x') {\n      cStack000000000000001e = 't';\n    }\n    else {\n      cStack000000000000001e = 'T';\n    }\n  }\n  undefinedFlag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileUserID,\n          (ulong)fileGroupID,fileSize,&stack0x00000020,(ulong)filePermissions)\n  ;\n  fputs(*fileLines,outputFile);\n  if ((char)fileFlags != '\\0') {\n    if ((*(byte *)((long)fileLines + 0x49) & 0x10) == 0) {\n      if (fileLines[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileLines[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dup",
                "bfd_fatal",
                "free",
                "bfd_close",
                "smart_rename.constprop.0",
                "bfd_set_archive_head",
                "xexit",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "prompt",
                "main",
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "yyerror.constprop.0",
                "print_contents",
                "yyparse.isra.0",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main",
                "normalize",
                "replace_members.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_00102c25",
                "param_7": "param_flags",
                "param_11": "file_permissions",
                "param_12": "archive_size",
                "iVar1": "cmp_result",
                "iVar2": "stat_error",
                "piVar3": "error_number",
                "pcVar4": "output_filename",
                "uVar5": "gettext_result",
                "pplVar6": "archive_ptr",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "unaff_RBX": "archive_data",
                "plVar8": "file_ptr",
                "puVar9": "param_ptr",
                "uVar10": "bytes_written",
                "sVar11": "write_length"
            },
            "code": "\nlong * extractAndWriteArchive_00102c25(void)\n\n{\n  int cmp_result;\n  int stat_error;\n  int *error_number;\n  char *output_filename;\n  undefined8 gettext_result;\n  long **archive_ptr;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long **archive_data;\n  long *file_ptr;\n  undefined4 *param_ptr;\n  ulong bytes_written;\n  size_t write_length;\n  undefined4 *param_flags;\n  __mode_t file_permissions;\n  ulong archive_size;\n  \n  param_ptr = param_flags;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *param_ptr = 0;\n    param_ptr = param_ptr + 1;\n  }\n  archive_ptr = (long **)archive_data[0x1d];\n  if ((long **)archive_data[0x1d] == (long **)0x0) {\n    archive_ptr = archive_data;\n  }\n  stat_error = (*(code *)archive_ptr[1][0x3d])();\n  if (stat_error != 0) {\n    file_ptr = *archive_data;\n    gettext_result = dcgettext(0,\"internal stat error on %s\",5);\n    stat_error = fatal(gettext_result,file_ptr);\n    gettext_result = posname;\n    if (stat_error == 3) {\n      for (; *file_ptr != 0; file_ptr = (long *)(*file_ptr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*file_ptr != (undefined8 *)0x0; file_ptr = (long *)(*file_ptr + 0xf0)) {\n        cmp_result = filename_cmp(*(undefined8 *)*file_ptr,gettext_result);\n        if (cmp_result == 0) {\n          if (stat_error != 2) {\n            return file_ptr;\n          }\n          return (long *)(*file_ptr + 0xf0);\n        }\n      }\n    }\n    return file_ptr;\n  }\n  bfd_seek();\n  output_file = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    output_file = (FILE *)open_output_file_isra_0(*archive_data);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      write_length = archive_size - bytes_written;\n      if (0x2000 < write_length) {\n        write_length = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,write_length);\n      if (write_length != bytes_read) {\nLAB_00102c78:\n        archive_data = (long **)*archive_data[0x1d];\n        gettext_result = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(gettext_result,archive_data);\n        goto LAB_00102ca2;\n      }\n      if (output_file == (FILE *)0x0) {\n        output_file = (FILE *)open_output_file_isra_0(*archive_data);\n      }\n      write_length = fwrite(buffer,1,bytes_read,output_file);\n      if (write_length != bytes_read) {\n        error_number = __errno_location();\n        output_filename = strerror(*error_number);\n        fatal(\"%s: %s\",output_filename,output_filename);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(output_file);\n  output_filename = output_filename;\n  output_file = (FILE *)0x0;\n  chmod(output_filename,file_permissions);\n  if (preserve_dates != 0) {\n    set_times(output_filename,param_flags);\n  }\n  output_filename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_bread",
                "chmod",
                "open_output_file.isra.0",
                "free",
                "fclose",
                "fwrite",
                "set_times",
                "strerror",
                "fatal",
                "dcgettext",
                "bfd_seek",
                "__errno_location",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_with_limit_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "outputString",
                "uVar4": "limit",
                "unaff_RBX": "inputPointer",
                "unaff_RBP": "basePointer",
                "puVar5": "outputPointer",
                "bVar6": "isIncrementPositive",
                "auVar7": "returnVar",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyStringWithLimit_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *outputString;\n  ulong limit;\n  undefined *inputPointer;\n  long basePointer;\n  undefined *outputPointer;\n  byte isIncrementPositive;\n  undefined returnVar [16];\n  undefined8 returnAddress;\n  \n  isIncrementPositive = 0;\n  inputLength = strlen(inputString);\n  limit = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  outputString = inputPointer;\n  if (limit < inputLength) {\n    outputString = (undefined *)xmalloc(limit + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    outputPointer = outputString;\n    for (limit = (ulong)*(byte *)(lVar1 + 0x1e); limit != 0; limit = limit - 1) {\n      *outputPointer = *inputPointer;\n      inputPointer = inputPointer + (ulong)isIncrementPositive * -2 + 1;\n      outputPointer = outputPointer + (ulong)isIncrementPositive * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnVar._8_8_ = returnAddress;\n  returnVar._0_8_ = outputString;\n  return returnVar;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "copy_string_with_limit_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_members",
                "map_over_list",
                "main",
                "get_pos_bfd.cold",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "main",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 99401,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}