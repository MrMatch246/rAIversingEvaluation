{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "inputCode",
                "iVar1": "comparisonResult",
                "unaff_RBX": "filePointer",
                "param_7": "filenameToFind"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int inputCode;\n  int comparisonResult;\n  long *filePointer;\n  undefined8 filenameToFind;\n  \n  filenameToFind = posname;\n  if (inputCode == 3) {\n    for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*filePointer,filenameToFind);\n      if (comparisonResult == 0) {\n        if (inputCode != 2) {\n          return filePointer;\n        }\n        return (long *)(*filePointer + 0xf0);\n      }\n    }\n  }\n  return filePointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "isVerbose",
                "param_4": "printAddress",
                "iVar1": "result",
                "ppcVar2": "indirectFileInfo",
                "pcVar3": "timeString",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePerm",
                "cStack_f2": "isSetuid",
                "cStack_f1": "isSetgid",
                "cStack_f0": "isSticky",
                "cStack_ef": "isOwnerRead",
                "cStack_ee": "isOwnerWrite",
                "cStack_ed": "isOwnerExec",
                "cStack_ec": "isGroupRead",
                "cStack_eb": "isGroupWrite",
                "cStack_ea": "isGroupExec",
                "local_e8": "formattedTime",
                "local_b8": "buffer",
                "uStack_a0": "fileMode",
                "uStack_9c": "userID",
                "uStack_98": "groupID",
                "uStack_88": "fileSize",
                "local_60": "modificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char isVerbose,char printAddress)\n\n{\n  int result;\n  char **indirectFileInfo;\n  char *timeString;\n  uint fileType;\n  time_t currentTime;\n  undefined filePerm;\n  char isSetuid;\n  char isSetgid;\n  char isSticky;\n  char isOwnerRead;\n  char isOwnerWrite;\n  char isOwnerExec;\n  char isGroupRead;\n  char isGroupWrite;\n  char isGroupExec;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined buffer [24];\n  uint fileMode;\n  uint userID;\n  uint groupID;\n  undefined8 fileSize;\n  time_t modificationTime;\n  \n  if (isVerbose != '\\0') {\n    indirectFileInfo = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      indirectFileInfo = fileInfo;\n    }\n    result = (**(code **)(indirectFileInfo[1] + 0x1e8))(fileInfo,buffer);\n    if (result == 0) {\n      currentTime = modificationTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      fileType = fileMode & 0xf000;\n      if (fileType == 0x4000) {\n        filePerm = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePerm = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePerm = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePerm = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePerm = 0x73;\n      }\n      else {\n        filePerm = 0x70;\n        if (fileType != 0x1000) {\n          filePerm = 0x2d;\n        }\n      }\n      isSetuid = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n      isSetgid = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n      isSticky = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n      isOwnerRead = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n      isOwnerWrite = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n      isOwnerExec = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n      isGroupRead = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n      isGroupWrite = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n      isGroupExec = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileMode & 0x800) != 0) {\n        if (isSticky == 'x') {\n          isSticky = 's';\n        }\n        else {\n          isSticky = 'S';\n        }\n      }\n      if ((fileMode & 0x400) != 0) {\n        if (isOwnerExec == 'x') {\n          isOwnerExec = 's';\n        }\n        else {\n          isOwnerExec = 'S';\n        }\n      }\n      if ((fileMode & 0x200) != 0) {\n        if (isGroupExec == 'x') {\n          isGroupExec = 't';\n        }\n        else {\n          isGroupExec = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&isSetuid,(ulong)userID,(ulong)groupID,fileSize,\n              formattedTime,(ulong)fileMode);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr.cold",
                "ctime",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "open_and_write_output_file_00105a68",
                "pcVar1": "directory_path",
                "pFVar2": "output_file",
                "sVar3": "directory_length"
            },
            "code": "\nvoid open_and_write_output_file_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *output_file;\n  size_t directory_length;\n  \n  directory_path = output_dir;\n  if (output_dir != (char *)0x0) {\n    directory_length = strlen(output_dir);\n    if (directory_length != 0) {\n      if (directory_path[directory_length - 1] == '/') {\n        output_filename = (char *)concat(directory_path,output_filename,0);\n      }\n      else {\n        output_filename = (char *)concat(directory_path,&DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  output_file = fopen(output_filename,\"w\");\n  if (output_file != (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "strlen",
                "open_output_file.isra.0.cold",
                "perror",
                "printf",
                "fopen",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "open_and_write_output_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "result",
                "lVar1": "nextEntry",
                "uVar2": "currentEntry",
                "bVar3": "foundEntry",
                "plVar4": "currentEntryPtr",
                "iVar5": "comparison",
                "__format": "errorMessage",
                "plVar6": "nextEntryPtr",
                "lVar7": "currentEntryInArchive",
                "plVar8": "previousEntryPtr"
            },
            "code": "\n\n\nundefined8 processArchive_001032a8(long *archive,code *callback,undefined8 *entryNames,undefined8 result)\n\n{\n  long nextEntry;\n  undefined8 currentEntry;\n  bool foundEntry;\n  long *currentEntryPtr;\n  int comparison;\n  char *errorMessage;\n  long *nextEntryPtr;\n  long currentEntryInArchive;\n  long *previousEntryPtr;\n  \n  currentEntryInArchive = archive[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntryInArchive != 0) {\n      nextEntry = *(long *)(currentEntryInArchive + 0xf0);\n      (*callback)(currentEntryInArchive,0);\n      currentEntryInArchive = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentEntryPtr = (long *)archive[0x1e];\n      previousEntryPtr = archive;\n      while (nextEntryPtr = currentEntryPtr, nextEntryPtr != (long *)0x0) {\n        if (*nextEntryPtr != 0) {\n          comparison = filename_cmp(*entryNames);\n          if (comparison == 0) {\n            foundEntry = true;\n            (*callback)(nextEntryPtr,previousEntryPtr);\n          }\n        }\n        previousEntryPtr = nextEntryPtr;\n        currentEntryPtr = (long *)nextEntryPtr[0x1e];\n      }\n      if (!foundEntry) {\n        currentEntry = *entryNames;\n        errorMessage = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessage,currentEntry);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_details_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getMessage",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorDetails_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = getMessage(0,\"cause of error unknown\",5);\n  fflush(stdoutStream);\n  if (errorCode != 0) {\n    fprintf(stderrStream,\"%s: %s: %s\\n\",programName);\n    return;\n  }\n  fprintf(stderrStream,\"%s: %s\\n\",programName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_details_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "display_usage_0010342d",
                "param_1": "showBugReport",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid displayUsage_0010342d(uint showBugReport)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (showBugReport != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,program_name);\n  programName = program_name;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (showBugReport != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(showBugReport ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "list_supported_targets",
                "ar_emul_default_usage",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_usage_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_with_params_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "reportFunc",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "tempBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "input1Copy",
                "local_78": "input2Copy",
                "local_68": "input3Copy",
                "local_58": "input4Copy",
                "local_48": "input5Copy",
                "local_38": "input6Copy",
                "local_28": "input7Copy",
                "local_18": "input8Copy"
            },
            "code": "\nvoid reportWithParams_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 reportFunc,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 offset;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined tempBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 input5Copy;\n  undefined4 input6Copy;\n  undefined4 input7Copy;\n  undefined4 input8Copy;\n  \n  if (flag != '\\0') {\n    input1Copy = input1;\n    input2Copy = input2;\n    input3Copy = input3;\n    input4Copy = input4;\n    input5Copy = input5;\n    input6Copy = input6;\n    input7Copy = input7;\n    input8Copy = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = tempBuffer;\n  offset = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  report(reportFunc,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "set_times.cold",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "get_file_size",
                "main",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_with_params_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "normalize.cold",
                "make_tempname",
                "print_contents",
                "replace_members.cold",
                "extract_file.cold",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_and_write_output_file_00102e6f",
                "pcVar1": "output_dir",
                "in_RAX": "input_file_path",
                "uVar2": "basename_result",
                "uVar3": "error_message",
                "pFVar4": "output_file_ptr",
                "sVar5": "output_dir_length",
                "pcVar6": "current_char"
            },
            "code": "\nvoid extract_and_write_output_file_00102e6f(void)\n\n{\n  char *output_dir;\n  char *input_file_path;\n  undefined8 basename_result;\n  undefined8 error_message;\n  FILE *output_file_ptr;\n  size_t output_dir_length;\n  char *current_char;\n  \n  output_dir = output_dir;\n  do {\n    input_file_path = input_file_path + 1;\n    while (*input_file_path != '/') {\n      if (*input_file_path == '\\0') {\n        if ((output_dir != (char *)0x0) && (output_dir_length = strlen(output_dir), output_dir_length != 0)) {\n          if (output_dir[output_dir_length - 1] == '/') {\n            output_filename = (char *)concat(output_dir,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(output_dir,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        output_file_ptr = fopen(output_filename,\"w\");\n        if (output_file_ptr == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_char = input_file_path;\n      if ((*input_file_path == '.') && (current_char = input_file_path + 1, input_file_path[1] == '.')) {\n        current_char = input_file_path + 2;\n        if ((input_file_path[2] == '/') || (input_file_path[2] == '\\0')) {\n          basename_result = lbasename();\n          output_dir = output_filename;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(error_message,output_dir,basename_result);\n          output_filename = (char *)basename_result;\n          open_and_write_output_file_00105a68();\n          return;\n        }\n      }\n      for (; (input_file_path = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "dcgettext",
                "non_fatal",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_and_write_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "yy_create_buffer_001033d6",
                "param_1": "input_param",
                "param_2": "output_param1",
                "param_3": "output_param2",
                "param_4": "config_param",
                "pvVar1": "buffer",
                "pvVar2": "dynamic_memory",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\nyy_create_buffer_001033d6(undefined8 input_param,undefined8 output_param1,undefined8 output_param2,undefined8 config_param)\n\n{\n  void *buffer;\n  void *dynamic_memory;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)yy_fatal_error(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dynamic_memory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dynamic_memory;\n  } while (dynamic_memory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  yy_init_buffer(buffer,input_param);\n  result._8_8_ = config_param;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "yy_init_buffer",
                "yy_fatal_error",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "yy_create_buffer_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_performance_monitoring_00102000",
                "ctx": "context",
                "iVar1": "startAddress"
            },
            "code": "\nint initializePerformanceMonitoring_00102000(EVP_PKEY_CTX *context)\n\n{\n  int startAddress;\n  \n  startAddress = __gmon_start__();\n  return startAddress;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_performance_monitoring_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "fatal",
                "bfd_fatal",
                "ranlib_only",
                "FUN_00105a68",
                "maybequit",
                "ranlib_usage",
                "write_archive.cold",
                "usage",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_pointer_00105870",
                "param_1": "filePointer",
                "param_2": "postype",
                "param_3": "filename",
                "iVar1": "comparisonResult",
                "iVar3": "fileType",
                "uVar2": "searchName"
            },
            "code": "\nlong * findFilePointer_00105870(long *filePointer,int postype,undefined8 filename)\n\n{\n  int comparisonResult;\n  undefined8 searchName;\n  int fileType;\n  \n  searchName = posname;\n  fileType = postype;\n  if (postype == 0) {\n    searchName = filename;\n    fileType = postype;\n  }\n  if (fileType == 3) {\n    for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*filePointer,searchName);\n      if (comparisonResult == 0) {\n        if (fileType != 2) {\n          return filePointer;\n        }\n        return (long *)(*filePointer + 0xf0);\n      }\n    }\n  }\n  return filePointer;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "replace_members.cold",
                "main"
            ],
            "imported": false,
            "current_name": "find_file_pointer_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "prompt_user_input_00103ba8",
                "interactive": "isInteractive",
                "printf": "printMessage",
                "fflush": "flushStdout"
            },
            "code": "\n\n\nvoid promptUserInput_00103ba8(void)\n\n{\n  if (isInteractive != 0) {\n    printMessage(\"AR >\");\n    flushStdout(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "prompt_user_input_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_descr_verbose_00103ddc",
                "param_1": "output",
                "outfile": "file",
                "verbose": "is_verbose"
            },
            "code": "\nvoid print_arelt_descr_verbose_00103ddc(undefined8 output)\n\n{\n  print_arelt_descr(file,output,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_descr_verbose_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message_format",
                "param_2": "args",
                "_stdout": "standard_output_stream",
                "_stderr": "standard_error_stream",
                "program_name": "name_of_program"
            },
            "code": "\n\n\nvoid print_error_message_001078c0(char *message_format,__gnuc_va_list args)\n\n{\n  fflush(standard_output_stream);\n  fprintf(standard_error_stream,\"%s: \",name_of_program);\n  vfprintf(standard_error_stream,message_format,args);\n  putc(10,standard_error_stream);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "putc",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "write_archive.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_line_001031a5",
                "uVar1": "nextLineNumber",
                "__format": "formatString"
            },
            "code": "\nvoid printSyntaxErrorLine_001031a5(void)\n\n{\n  uint nextLineNumber;\n  char *formatString;\n  \n  nextLineNumber = linenumber + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)nextLineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_line_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "write_archive.cold",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input",
                "__size": "bufferSize",
                "lVar1": "loopCount",
                "lVar2": "newBufferSize",
                "puVar3": "bufferPtr",
                "bVar4": "byteVar"
            },
            "code": "\nundefined8 ensureBufferStack_00103df9(void)\n\n{\n  size_t bufferSize;\n  undefined8 input;\n  long loopCount;\n  long newBufferSize;\n  undefined4 *bufferPtr;\n  byte byteVar;\n  \n  byteVar = 0;\n  if (yy_buffer_stack == (void *)0x0) {\n    yy_buffer_stack = calloc(8,1);\n    if (yy_buffer_stack != (void *)0x0) {\n      yy_buffer_stack_max = 1;\n      yy_buffer_stack_top = 0;\n      return input;\n    }\n  }\n  else {\n    if (yy_buffer_stack_top < yy_buffer_stack_max - 1U) {\n      return input;\n    }\n    newBufferSize = yy_buffer_stack_max + 8;\n    bufferSize = newBufferSize * 8;\n    yy_buffer_stack = realloc(yy_buffer_stack,bufferSize);\n    if (yy_buffer_stack != (void *)0x0) {\n      bufferPtr = (undefined4 *)((long)yy_buffer_stack + (bufferSize - 0x40));\n      yy_buffer_stack_max = newBufferSize;\n      for (loopCount = 0x10; loopCount != 0; loopCount = loopCount + -1) {\n        *bufferPtr = 0;\n        bufferPtr = bufferPtr + (ulong)byteVar * -2 + 1;\n      }\n      return input;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack()\");\n  yy_buffer_stack_top = 0;\n  yy_buffer_stack_max = 1;\n  return input;\n}\n\n",
            "called": [
                "calloc",
                "yy_fatal_error",
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "yy_init_buffer",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "clean_up_output_00102bf5",
                "output_bfd": "bfdHandle",
                "output_file": "fileHandle",
                "output_filename": "filename"
            },
            "code": "\nvoid cleanUpOutput_00102bf5(void)\n\n{\n  if (bfdHandle != 0) {\n    bfd_cache_close();\n  }\n  if (fileHandle != (FILE *)0x0) {\n    fclose(fileHandle);\n  }\n  unlink_if_ordinary(filename);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "fclose",
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "clean_up_output_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "extract_file.cold",
                "remove_output.cold",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_file_00102943",
                "output_filename": "outputFile"
            },
            "code": "\nvoid initializeOutputFile_00102943(void)\n\n{\n  outputFile = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members.cold",
                "replace_members"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorStr",
                "uVar4": "errorMsg",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "creationTime",
                "uStack_2c": "changeTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 errorMsg;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 creationTime;\n  undefined4 changeTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  creationTime = *(undefined4 *)(fileInfo + 0x50);\n  changeTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorStr = strerror(*errnoPtr);\n    errorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(errorMsg,filePath,errorStr);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "yy_init_buffer",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_information_00102d8c",
                "param_9": "permissions",
                "param_19": "fileMode",
                "param_20": "fileSize",
                "param_22": "lastModified",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "outputFormat",
                "__format": "corruptTimeFormat",
                "uVar1": "fileType",
                "uStack0000000000000015": "fileTypeCharacter",
                "cStack0000000000000016": "readPermission",
                "cStack0000000000000017": "writePermission",
                "cStack0000000000000019": "executePermission",
                "cStack000000000000001a": "setgidPermission",
                "cStack000000000000001b": "setuidPermission",
                "cStack000000000000001c": "stickyPermission",
                "cStack000000000000001d": "otherReadPermission",
                "cStack000000000000001e": "otherWritePermission",
                "uStack000000000000006c": "inodeNumber"
            },
            "code": "\nvoid printFileInformation_00102d8c(void)\n\n{\n  char *corruptTimeFormat;\n  uint fileType;\n  char **fileInfo;\n  FILE *outputFile;\n  char outputFormat;\n  undefined fileTypeCharacter;\n  char readPermission;\n  char writePermission;\n  char permissions;\n  char executePermission;\n  char setgidPermission;\n  char setuidPermission;\n  char stickyPermission;\n  char otherReadPermission;\n  char otherWritePermission;\n  undefined uStack000000000000001f;\n  uint fileMode;\n  uint inodeNumber;\n  uint fileSize;\n  undefined8 lastModified;\n  \n  corruptTimeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,corruptTimeFormat);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    fileTypeCharacter = 100;\n  }\n  else if (fileType == 0xa000) {\n    fileTypeCharacter = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    fileTypeCharacter = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    fileTypeCharacter = 99;\n  }\n  else if (fileType == 0xc000) {\n    fileTypeCharacter = 0x73;\n  }\n  else {\n    fileTypeCharacter = 0x70;\n    if (fileType != 0x1000) {\n      fileTypeCharacter = 0x2d;\n    }\n  }\n  readPermission = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermission = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permissions = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  executePermission = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  setgidPermission = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  setuidPermission = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  stickyPermission = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  otherReadPermission = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  otherWritePermission = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permissions == 'x') {\n      permissions = 's';\n    }\n    else {\n      permissions = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (setuidPermission == 'x') {\n      setuidPermission = 's';\n    }\n    else {\n      setuidPermission = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (otherWritePermission == 'x') {\n      otherWritePermission = 't';\n    }\n    else {\n      otherWritePermission = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)fileSize,lastModified,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileInfo,outputFile);\n  if (outputFormat != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "fputc",
                "dcgettext",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "print_file_information_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_archive_files_00105300",
                "param_1": "archiveFileName",
                "param_2": "archivedFiles",
                "plVar1": "fileListPtr",
                "pcVar2": "outputFileNamePtr",
                "bVar3": "thinLibraryFlag",
                "cVar4": "conversionResult",
                "iVar5": "statResult",
                "uVar6": "errorString",
                "uVar7": "libraryName",
                "piVar8": "errnoLocation",
                "lVar9": "fileDescriptor",
                "puVar10": "newArchiveFiles",
                "local_b0": "formatNameBuffer",
                "local_a8": "fileStat"
            },
            "code": "\n\n\nundefined8 * extractArchiveFiles_00105300(char *archiveFileName,undefined8 *archivedFiles)\n\n{\n  long *fileListPtr;\n  char *outputFileNamePtr;\n  byte thinLibraryFlag;\n  char conversionResult;\n  int statResult;\n  undefined8 errorString;\n  undefined8 libraryName;\n  int *errnoLocation;\n  long fileDescriptor;\n  undefined8 *newArchiveFiles;\n  undefined8 formatNameBuffer;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (target == (char *)0x0) {\n    target = \"plugin\";\n  }\n  statResult = stat(archiveFileName,&fileStat);\n  outputFileNamePtr = output_filename;\n  if (statResult == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (operation_alters_arch == '\\0') {\n      fprintf(_stderr,\"%s: \",program_name);\n      perror(archiveFileName);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((target == (char *)0x0) && (archivedFiles != (undefined8 *)0x0)) {\n      newArchiveFiles = (undefined8 *)open_inarch_cold();\n      return newArchiveFiles;\n    }\n    archivedFiles = (undefined8 *)bfd_openw(archiveFileName,target);\n    if (((archivedFiles != (undefined8 *)0x0) && (conversionResult = bfd_set_format(archivedFiles,2), conversionResult != '\\0')) &&\n       (conversionResult = bfd_close(archivedFiles), conversionResult != '\\0')) {\n      outputFileNamePtr = archiveFileName;\n      if (silent_create == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(archiveFileName);\n  do {\n    thinLibraryFlag = *(byte *)((long)archivedFiles + 0x49) >> 4 & 1;\n    if (make_thin_archive == '\\0') {\n      if (thinLibraryFlag != 0) {\n        libraryName = *archivedFiles;\n        errorString = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(errorString,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (thinLibraryFlag == 0) {\n      libraryName = *archivedFiles;\n      errorString = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(errorString,libraryName);\nLAB_001027cb:\n      bfd_nonfatal(archiveFileName);\n      statResult = bfd_get_error();\n      if (statResult == 0xd) {\nLAB_00102812:\n        list_matching_formats(formatNameBuffer);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      fileListPtr = archivedFiles + 0x1e;\n      for (fileDescriptor = bfd_openr_next_archived_file(archivedFiles,0); fileDescriptor != 0;\n          fileDescriptor = bfd_openr_next_archived_file(archivedFiles,fileDescriptor)) {\n        *fileListPtr = fileDescriptor;\n        fileListPtr = (long *)(fileDescriptor + 0xf0);\n      }\n      *fileListPtr = 0;\n      statResult = bfd_get_error();\n      if (statResult == 9) {\n        return archivedFiles;\n      }\n      do {\n        bfd_fatal(archiveFileName);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        non_fatal(libraryName,archiveFileName);\n        outputFileNamePtr = archiveFileName;\nLAB_001053be:\n        output_filename = outputFileNamePtr;\n        archivedFiles = (undefined8 *)bfd_openr(archiveFileName,target);\n      } while (archivedFiles == (undefined8 *)0x0);\n      conversionResult = bfd_check_format_matches(archivedFiles,2,&formatNameBuffer);\n      if (conversionResult == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (fileDescriptor = bfd_openr_next_archived_file(archivedFiles,0), fileDescriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "xexit",
                "bfd_openr_next_archived_file",
                "bfd_fatal",
                "fprintf",
                "maybequit",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "bfd_openr",
                "dcgettext",
                "non_fatal",
                "fatal",
                "stat",
                "open_inarch.cold",
                "list_matching_formats",
                "__errno_location",
                "bfd_openw",
                "bfd_get_error",
                "perror",
                "bfd_close",
                "bfd_set_error",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_archive_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "parse_input_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byte_array_1",
                "puVar2": "uint_array",
                "bVar3": "byte_var",
                "plVar4": "long_pointer",
                "puVar5": "undefined8_pointer",
                "uVar6": "undefined4_var_1",
                "uVar7": "undefined4_var_2",
                "bVar8": "bool_var_1",
                "bVar9": "bool_var_2",
                "ppcVar10": "char_double_pointer",
                "piVar11": "int_pointer",
                "puVar12": "undefined_pointer",
                "bVar13": "byte_var_2",
                "cVar14": "char_var",
                "iVar15": "int_var_1",
                "uVar16": "uint_var",
                "uVar17": "undefined4_var_3",
                "pFVar18": "file_pointer_1",
                "sVar19": "size_var_1",
                "sVar20": "size_var_2",
                "__ptr": "byte_2_pointer",
                "plVar21": "long_pointer_2",
                "pFVar22": "file_pointer_2",
                "pcVar23": "char_var_2",
                "lVar24": "long_var_1",
                "uVar25": "ulong_var_1",
                "puVar26": "undefined8_pointer_2",
                "uVar27": "undefined8_var_1",
                "pFVar28": "file_pointer_3",
                "lVar34": "long_var_2",
                "lVar35": "long_var_3",
                "uVar40": "ulong_var_2",
                "uVar41": "ulong_var_3",
                "uVar42": "ulong_var_4",
                "uVar44": "uint_var_2",
                "iVar45": "int_var_2",
                "bVar47": "bool_var_3",
                "bVar48": "byte_var_3",
                "local_130": "file_pointer_4",
                "local_128": "file_pointer_5",
                "local_118": "byte_pointer_3",
                "local_110": "char_double_pointer_2",
                "local_108": "size_var_3",
                "local_100": "long_var_4",
                "local_c8": "undefined_byte_array",
                "uStack_c6": "undefined_var_4",
                "uStack_c5": "undefined5_var",
                "local_b0": "uint_var_3"
            },
            "code": "\n\n\nvoid parse_input_files_00105db0(uint argc,FILE *argv)\n\n{\n  byte *byte_array_1;\n  uint *uint_array;\n  byte byte_var;\n  long *long_pointer;\n  undefined8 *undefined8_pointer;\n  undefined4 undefined4_var_1;\n  undefined4 undefined4_var_2;\n  bool bool_var_1;\n  bool bool_var_2;\n  char **char_double_pointer;\n  int *int_pointer;\n  undefined *undefined_pointer;\n  byte byte_var_2;\n  char char_var;\n  int int_var_1;\n  uint uint_var;\n  undefined4 undefined4_var_3;\n  FILE *file_pointer_1;\n  size_t size_var_1;\n  size_t size_var_2;\n  byte *byte_2_pointer;\n  long *long_pointer_2;\n  FILE *file_pointer_2;\n  char *char_var_2;\n  long long_var_1;\n  ulong ulong_var_1;\n  undefined8 *undefined8_pointer_2;\n  undefined8 undefined8_var_1;\n  FILE *file_pointer_3;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyte_var3;\n  long long_var_2;\n  long long_var_3;\n  undefined1 *puVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyte_var8;\n  char *pcVar39;\n  ulong ulong_var_2;\n  ulong ulong_var_3;\n  ulong ulong_var_4;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uint_var_2;\n  int int_var_2;\n  char *pcVar46;\n  bool bool_var_3;\n  byte byte_var_3;\n  undefined8 file_pointer_4;\n  FILE *file_pointer_5;\n  byte *byte_pointer_3;\n  char **char_double_pointer_2;\n  size_t size_var_3;\n  long long_var_4;\n  undefined undefined_byte_array [2];\n  undefined undefined_var_4;\n  undefined5 undefined5_var;\n  uint uint_var_3;\n  \n  byte_var_3 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  pcVar43 = (char *)argv;\n  file_pointer_1 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  char_double_pointer_2 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  file_pointer_5 = (FILE *)0x0;\n  file_pointer_2 = argv;\n  do {\n    uint_var = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uint_var;\n    file_pointer_4 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)file_pointer_2;\n    if (**(char **)(&file_pointer_2->_flags + (long)unaff_RBP * 2) == '@') {\n      uint_var_2 = (int)char_double_pointer_2 - 1;\n      char_double_pointer_2 = (char **)(ulong)uint_var_2;\n      if (uint_var_2 == 0) {\n        long_pointer_2 = *(long **)file_pointer_2;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,long_pointer_2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&file_pointer_2->_flags + (long)unaff_RBP * 2) + 1;\n      int_var_1 = stat(pcVar39,(stat *)undefined_byte_array);\n      if (-1 < int_var_1) {\n        if ((uint_var_3 & 0xf000) == 0x4000) {\n          long_pointer_2 = *(long **)file_pointer_2;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        file_pointer_1 = fopen(pcVar39,\"r\");\n        if (file_pointer_1 != (FILE *)0x0) {\n          int_var_1 = fseek(file_pointer_1,0,2);\n          if (((int_var_1 != -1) && (size_var_1 = ftell(file_pointer_1), size_var_1 != 0xffffffffffffffff)) &&\n             (int_var_1 = fseek(file_pointer_1,0,0), int_var_1 != -1)) {\n            byte_pointer_3 = (byte *)xmalloc(size_var_1 + 1);\n            size_var_2 = fread(byte_pointer_3,1,size_var_1,file_pointer_1);\n            if ((size_var_1 == size_var_2) || (int_var_1 = ferror(file_pointer_1), int_var_1 == 0)) {\n              byte_pointer_3[size_var_2] = 0;\n              byte_var_2 = *byte_pointer_3;\n              pbyte_var3 = byte_pointer_3;\n              while( true ) {\n                if (byte_var_2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byte_var_2 * 2] & 0x40) == 0) break;\n                byte_var_2 = pbyte_var3[1];\n                pbyte_var3 = pbyte_var3 + 1;\n              }\n              size_var_1 = strlen((char *)byte_pointer_3);\n              byte_2_pointer = (byte *)xmalloc(size_var_1 + 1);\n              file_pointer_3 = (FILE *)0x0;\n              int_var_1 = 0;\n              bool_var_2 = false;\n              bool_var_3 = false;\n              bool_var_1 = false;\n              long_var_4 = 0;\n              pbyte_var3 = byte_pointer_3;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyte_var3 * 2] & 0x40) != 0) {\n                  pbyte_var3 = pbyte_var3 + 1;\n                }\n                if ((int_var_1 == 0) || (int_var_1 + -1 <= (int)long_var_4)) {\n                  if (file_pointer_3 == (FILE *)0x0) {\n                    int_var_1 = 8;\n                    file_pointer_3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&file_pointer_3->_flags + long_var_4 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    int_var_1 = int_var_1 * 2;\n                    file_pointer_3 = (FILE *)xrealloc(file_pointer_3,(long)int_var_1 << 3);\n                    ppcVar31 = (char **)((long)&file_pointer_3->_flags + long_var_4 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&file_pointer_3->_flags + long_var_4 * 8);\n                }\n                byte_var_2 = *pbyte_var3;\n                pbyte_var8 = byte_2_pointer;\n                while (byte_var_2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byte_var_2 * 2] & 0x40) != 0) &&\n                       (!(bool)(bool_var_2 | bool_var_1 | bool_var_3))) {\n                      bool_var_1 = false;\n                      bool_var_2 = false;\n                      bool_var_3 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!bool_var_1) break;\n                    pbyte_var3 = pbyte_var3 + 1;\n                    *pbyte_var8 = byte_var_2;\n                    pbyte_var8 = pbyte_var8 + 1;\n                    bool_var_1 = false;\n                    byte_var_2 = *pbyte_var3;\n                    if (byte_var_2 == 0) goto LAB_0010606f;\n                  }\n                  if (byte_var_2 == 0x5c) {\n                    bool_var_1 = true;\n                  }\n                  else if (bool_var_3) {\n                    if (byte_var_2 == 0x27) {\n                      bool_var_3 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyte_var8 = byte_var_2;\n                      pbyte_var8 = pbyte_var8 + 1;\n                    }\n                  }\n                  else if (bool_var_2) {\n                    if (byte_var_2 != 0x22) goto LAB_001061f1;\n                    bool_var_2 = false;\n                  }\n                  else if (byte_var_2 == 0x27) {\n                    bool_var_3 = true;\n                  }\n                  else {\n                    if (byte_var_2 != 0x22) goto LAB_001061f1;\n                    bool_var_2 = true;\n                  }\n                  byte_array_1 = pbyte_var3 + 1;\n                  pbyte_var3 = pbyte_var3 + 1;\n                  byte_var_2 = *byte_array_1;\n                }\nLAB_0010606f:\n                *pbyte_var8 = 0;\n                long_pointer_2 = (long *)xstrdup(byte_2_pointer);\n                *ppcVar31 = (char *)long_pointer_2;\n                *(undefined8 *)(file_pointer_3->_shortbuf + long_var_4 * 8 + -0x7b) = 0;\n                byte_var_2 = *pbyte_var3;\n                byte_var = (&_sch_istable)[(ulong)byte_var_2 * 2];\n                while ((byte_var & 0x40) != 0) {\n                  byte_var_2 = pbyte_var3[1];\n                  pbyte_var3 = pbyte_var3 + 1;\n                  byte_var = (&_sch_istable)[(ulong)byte_var_2 * 2];\n                }\n                long_var_4 = long_var_4 + 1;\n                if (byte_var_2 == 0) {\n                  free(byte_2_pointer);\n                  if (file_pointer_2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byte_pointer_3);\n          }\n          fclose(file_pointer_1);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uint_var + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uint_var = (uint)unaff_R12;\n        int_var_1 = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (int_var_1 != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uint_var = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefined_pointer = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)uint_var;\n        if ((char)uint_var != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            undefined_pointer = xatexit_head;\n            int_var_1 = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = int_var_1 + 1;\n            *(code **)(undefined_pointer + (long)int_var_1 * 8 + 0x10) = remove_output;\n          }\n          else {\n            undefined8_pointer_2 = (undefined8 *)malloc(0x110);\n            if (undefined8_pointer_2 != (undefined8 *)0x0) {\n              *undefined8_pointer_2 = undefined_pointer;\n              *(undefined4 *)(undefined8_pointer_2 + 1) = 0;\n              xatexit_head = (undefined *)undefined8_pointer_2;\n              goto LAB_0010632b;\n            }\n          }\n          long_var_1 = 1;\n          do {\n            long_var_3 = long_var_1;\n            int_var_1 = (int)pcVar46;\n            if (int_var_1 <= (int)long_var_3) break;\n            char_var = ar_emul_default_parse_arg(*(undefined8 *)((int *)pcVar43 + long_var_3 * 2));\n            long_var_1 = long_var_3 + 1;\n          } while (char_var != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + long_var_3 * 8 + -8);\n          uint_var_2 = int_var_1 - ((int)long_var_3 + -1);\n          file_pointer_1 = (FILE *)(ulong)uint_var_2;\n          if (is_ranlib != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (int_var_1 = getopt_long(file_pointer_1,pcVar46,\"DhHUvVt\",long_options), int_var_1 != -1) {\n              if (int_var_1 < 0x77) {\n                if (0x43 < int_var_1) {\n                  switch(int_var_1) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uint_var;\n                  }\n                }\n              }\n              else if (int_var_1 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uint_var_2 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uint_var_2 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uint_var = ranlib_only();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uint_var);\n              }\n            }\n            while (long_var_1 = get_file_size(pcVar39), long_var_1 < 1) {\n              uint_var = 1;\nLAB_001071c4:\n              int_pointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)int_pointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uint_var);\n              if ((int)uint_var_2 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)int_pointer * 8 + -0x7b);\n            }\n            int_var_1 = open(pcVar39,2,0);\n            if (int_var_1 < 0) {\n              bfd_set_error(1);\n              bfd_fatal(pcVar39);\nLAB_0010737f:\n              bfd_fatal(pcVar39);\nLAB_00107387:\n              bfd_nonfatal(pcVar39);\n              int_var_1 = bfd_get_error();\n              if (int_var_1 == 0xd) {\n                list_matching_formats\n                          (CONCAT53(undefined5_var,CONCAT12(undefined_var_4,CONCAT11(undefined_byte_array[1],undefined_byte_array[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            char_var = bfd_check_format_matches(unaff_RBP,2,undefined_byte_array);\n            if (char_var == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                uint_array = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uint_array = *uint_array | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              char_var = bfd_close(unaff_RBP);\n              if (char_var != '\\0') {\n                uint_var = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8_var_1 = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(undefined8_var_1,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(program_name);\n            size_var_1 = strlen(pcVar39);\n            if ((size_var_1 < 6) ||\n               (int_var_1 = filename_cmp(pcVar39 + (size_var_1 - 6),\"ranlib\"), int_var_1 != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          puVar36 = long_options;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          file_pointer_2 = (FILE *)unaff_RBP;\n          file_pointer_3 = file_pointer_1;\n          if ((int)uint_var_2 < 2) goto switchD_00107462_caseD_1;\n          file_pointer_4 = (FILE *)CONCAT71(file_pointer_4._1_7_,(char)uint_var);\nLAB_001063a3:\n          file_pointer_2 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            undefined_byte_array[0] = 0x2d;\n            undefined_var_4 = 0;\n            size_var_1 = strlen(*(char **)((long)pcVar46 + 8));\n            int_var_1 = (int)size_var_1 + (int)file_pointer_1;\n            unaff_R12 = (FILE *)xmalloc((long)int_var_1 * 8);\n            undefined4_var_3 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4_var_3;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            file_pointer_5 = (FILE *)((long)pcVar46 + 0x10);\n            char_double_pointer_2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              byte_pointer_3 = undefined_byte_array;\n              undefined_byte_array[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                undefined_byte_array[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(byte_pointer_3);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  undefined_byte_array[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(byte_pointer_3);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    undefined_byte_array[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(byte_pointer_3);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    char_var = *(char *)((long)ppcVar31 + 4);\n                    char_double_pointer_2 = ppcVar32;\n                    if (char_var != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        undefined_byte_array[1] = char_var;\n                        char_var_2 = (char *)xstrdup(byte_pointer_3);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = char_var_2;\n                        char_var = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        char_double_pointer_2 = ppcVar32;\n                      } while (char_var != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            long_var_1 = (long)(int)file_pointer_1;\n            int_pointer = (int *)pcVar46 + long_var_1 * 2;\n            if (file_pointer_5 < int_pointer) {\n              ulong_var_1 = long_var_1 * 8 - 0x11;\n              if ((ulong_var_1 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < int_pointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < int_pointer &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < int_pointer)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < int_pointer)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < int_pointer)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  char_double_pointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < int_pointer;\n                      ppcVar31 = ppcVar31 + (ulong)byte_var_3 * -2 + 1) {\n                    *char_double_pointer = *ppcVar31;\n                    char_double_pointer = char_double_pointer + (ulong)byte_var_3 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4_var_3 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefined4_var_1 = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefined4_var_2 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                ulong_var_2 = (ulong_var_1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4_var_3;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4_var_1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4_var_2;\n                undefined4_var_3 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefined4_var_1 = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefined4_var_2 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulong_var_1 = ulong_var_2 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4_var_3;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4_var_1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4_var_2;\n                if (ulong_var_1 != 2) {\n                  undefined4_var_3 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefined4_var_1 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefined4_var_2 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4_var_3;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4_var_1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4_var_2;\n                  if (ulong_var_1 != 3) {\n                    ulong_var_3 = 3;\n                    do {\n                      ulong_var_4 = ulong_var_3 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + ulong_var_3 * 0x10 + -0x73;\n                      undefined4_var_3 = *(undefined4 *)(pcVar39 + 4);\n                      undefined4_var_1 = *(undefined4 *)(pcVar39 + 8);\n                      undefined4_var_2 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + ulong_var_3 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4_var_3;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4_var_1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4_var_2;\n                      ulong_var_3 = ulong_var_4;\n                    } while (ulong_var_4 != ulong_var_1);\n                  }\n                }\n                if ((ulong_var_2 & 1) != 0) {\n                  ppcVar32[ulong_var_2 & 0xfffffffffffffffe] =\n                       *(char **)((long)file_pointer_5 + (ulong_var_2 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + long_var_1 + -2;\n            }\n            file_pointer_1 = (FILE *)(ulong)(int_var_1 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uint_var = (uint)unaff_R12;\n            uint_var_2 = getopt_long((ulong)file_pointer_1 & 0xffffffff,pcVar46,file_pointer_2,puVar36,0);\n            unaff_RBP = (char *)file_pointer_2;\n            if (uint_var_2 == 0xffffffff) break;\n            if (((uint_var_2 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uint_var_2 - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            file_pointer_3 = (FILE *)pcVar46;\n            if (uint_var_2 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uint_var_2]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            pcVar46 = (char *)file_pointer_3;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          uint_var_2 = operation;\n          file_pointer_2 = (FILE *)unaff_RBP;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)file_pointer_1 <= _optind || (_optind < 1)))) {\n              uint_var_2 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uint_var = (int)file_pointer_1 - (_optind + -1);\n            file_pointer_1 = (FILE *)(ulong)uint_var;\n            _optind = 0;\n            if (1 < (int)uint_var) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)file_pointer_4 & 0xff);\n          uint_var = (uint)unaff_R12;\n          puVar36 = (undefined1 *)((int *)pcVar46 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              file_pointer_3 = (FILE *)pcVar46;\n              if (*(long *)puVar36 == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (uint_var_2 == 3) goto LAB_00106abc;\n                  if (uint_var_2 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((uint_var_2 == 3) || (uint_var_2 == 0)) {\n                if (write_armap == 1) {\n                  undefined4_var_3 = ranlib_only();\n                    \n                  xexit(undefined4_var_3);\n                }\nLAB_00106abc:\n                if (uint_var_2 == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)puVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  int_var_1 = (int)unaff_RBP;\n                  if (*(char **)((long)puVar36 + (long)int_var_1 * 2 * 4) == (char *)0x0) {\n                    undefined8_var_1 = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(undefined8_var_1);\n                    uint_var_2 = extraout_EDX;\nLAB_00107548:\n                    if (uint_var_2 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(int_var_1 + 1);\n                  long_var_1 = strtol(*(char **)((long)puVar36 + (long)int_var_1 * 2 * 4),(char **)0x0,10);\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)long_var_1;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              long_var_1 = (long)(int)unaff_RBP;\n              file_pointer_2 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)puVar36 + long_var_1 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              file_pointer_2 = (FILE *)((long)puVar36 + (long_var_1 + 1) * 2 * 4);\n              if (*(FILE **)file_pointer_2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                file_pointer_2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)puVar36 + (long_var_1 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)puVar36 + (long_var_1 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)puVar36 + (long_var_1 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)puVar36 + (long_var_1 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                file_pointer_1 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)file_pointer_1;\n                  file_pointer_1 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)puVar36 + long_var_1 * 2 * 4) + (long)file_pointer_1 * 2) != 0\n                        );\n              }\n              undefined8_pointer_2 = (undefined8 *)open_inarch();\n              file_pointer_1 = file_pointer_2;\n              if (operation == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8_pointer_2 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)file_pointer_2;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(undefined8_pointer_2,extract_file,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                size_var_1 = strlen(libdeps);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(size_var_1 + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",undefined8_pointer_2);\n                if (libdeps_bfd == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  long_var_1 = bfd_find_target(\"binary\",libdeps_bfd);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (long_var_1 != 0) {\n                    char_var = bfd_set_format(libdeps_bfd,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    char_var = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    file_pointer_3 = (FILE *)bfd_bwrite(libdeps,unaff_RBP,libdeps_bfd);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (file_pointer_3 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    char_var = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (char_var == '\\0') goto LAB_00106803;\n                    long_var_1 = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (long_var_1 == 0) goto LAB_00106803;\n                    int_var_1 = (int)pcVar43;\n                    file_pointer_4 = (FILE *)((long)(int_var_1 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(file_pointer_4,\"Cannot reset libdeps record type.\");\n                    if (int_var_1 == 0) {\n                      long_var_1 = 0;\n                    }\n                    else {\n                      undefined4_var_3 = *(undefined4 *)&file_pointer_2->field_0x4;\n                      *(int *)unaff_RBP = file_pointer_2->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = undefined4_var_3;\n                      long_var_1 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = file_pointer_4[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&file_pointer_2->_flags;\n                        file_pointer_2 = (FILE *)((long)file_pointer_2 + (ulong)byte_var_3 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byte_var_3 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + long_var_1) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(int_var_1 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)file_pointer_4) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      file_pointer_2 = (FILE *)unaff_RBP;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                unaff_RBP = (char *)file_pointer_2;\n                if (file_pointer_2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                file_pointer_1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)file_pointer_2;\n                if ((file_pointer_2 != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(undefined8_pointer_2,unaff_RBP,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)file_pointer_2;\nswitchD_00106ed8_caseD_3:\n                map_over_members(undefined8_pointer_2,print_descr,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)file_pointer_2;\nswitchD_00106ed8_caseD_4:\n                map_over_members(undefined8_pointer_2,print_contents,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (file_pointer_2 == (FILE *)0x0) break;\nLAB_00106afb:\n                file_pointer_1 = (FILE *)(undefined8_pointer_2 + 0x1e);\n                do {\n                  unaff_R12 = file_pointer_1;\n                  if (*(FILE **)file_pointer_2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(undefined8_pointer_2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    long_pointer_2 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)file_pointer_2;\n                    if (long_pointer_2 == (long *)0x0) {\n                      undefined8_var_1 = *undefined8_pointer_2;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(uVar30,pcVar46,undefined8_var_1);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    long_var_1 = *long_pointer_2;\n                    undefined8_var_1 = normalize(pcVar46,undefined8_pointer_2);\n                    int_var_1 = filename_cmp(undefined8_var_1,long_var_1);\n                    if (int_var_1 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)long_pointer_2[0x1e];\n                  pplVar29 = (long **)get_pos_bfd(file_pointer_1,3,0);\n                  bool_var_3 = verbose != 0;\n                  long_pointer = *pplVar29;\n                  *pplVar29 = long_pointer_2;\n                  long_pointer_2[0x1e] = (long)long_pointer;\n                  if (bool_var_3) {\n                    printf(\"m - %s\\n\",*(FILE **)file_pointer_2);\n                  }\n                  file_pointer_2 = (FILE *)&file_pointer_2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          int_var_1 = fileno(_stdin);\n          interactive = isatty(int_var_1);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4_var_3 = bfd_get_error();\n        file_pointer_2 = (FILE *)bfd_errmsg(undefined4_var_3);\n        undefined8_var_1 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        int_var_1 = fatal(undefined8_var_1,\"x86_64-pc-linux-gnu\",file_pointer_2);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          puVar36 = pcVar39;\n          file_pointer_3 = (FILE *)pcVar46;\n          switch(int_var_1) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uint_var = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)file_pointer_2;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)file_pointer_2;\nLAB_00106803:\n        undefined8_var_1 = dcgettext(0,pcVar39,5);\n        fatal(undefined8_var_1);\nLAB_00106814:\n        int_var_1 = (int)pcVar46;\n        file_pointer_3 = (FILE *)xmalloc(8);\n        *(long **)file_pointer_3 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            int_var_1 = 0;\n          }\n          else {\n            long_var_1 = 1;\n            do {\n              int_var_1 = (int)long_var_1;\n              long_var_3 = long_var_1 * 2;\n              long_var_1 = long_var_1 + 1;\n            } while (*(long *)((int *)pcVar43 + long_var_3) != 0);\n          }\n          file_pointer_2 = (FILE *)xmalloc((long)(int_var_1 + 1) << 3);\n          long_pointer_2 = *(long **)pcVar43;\n          long_var_1 = 0;\n          while (long_pointer_2 != (long *)0x0) {\n            undefined8_var_1 = xstrdup();\n            *(undefined8 *)((long)&file_pointer_2->_flags + long_var_1) = undefined8_var_1;\n            long_pointer_2 = *(long **)((char *)((long)pcVar43 + 0x83) + long_var_1 + -0x7b);\n            long_var_1 = long_var_1 + 8;\n          }\n          *(undefined8 *)((long)&file_pointer_2->_flags + long_var_1) = 0;\nLAB_0010610a:\n          int_var_1 = (int)pcVar46;\n          pcVar43 = (char *)file_pointer_2;\n          if (*(long **)file_pointer_3 == (long *)0x0) goto LAB_00106a80;\n          long_var_1 = 0;\n          do {\n            long_var_2 = long_var_1 + 1;\n            long_var_3 = long_var_1 * 8;\n            long_var_1 = long_var_2;\n          } while (*(long *)(file_pointer_3->_shortbuf + long_var_3 + -0x7b) != 0);\n          size_var_3 = long_var_2 * 8;\n        }\n        else {\nLAB_00106a80:\n          long_var_2 = 0;\n          size_var_3 = 0;\n        }\n        long_var_1 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + long_var_2);\n        free(*(void **)((int *)pcVar43 + long_var_1));\n        file_pointer_2 = (FILE *)xrealloc(pcVar43,(long_var_2 + 1 + (long)int_var_1) * 8);\n        uint_var_2 = int_var_1 + -1 + (int)long_var_2;\n        pcVar46 = (char *)(ulong)uint_var_2;\n        memmove(&file_pointer_2->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&file_pointer_2->_IO_read_ptr + (long)file_pointer_4),\n                (long)(int)(int_var_1 - uint_var) << 3);\n        memcpy((void *)((long)&file_pointer_4->_flags + (long)&file_pointer_2->_flags),file_pointer_3,size_var_3);\n        free(file_pointer_3);\n        free(byte_pointer_3);\n        fclose(file_pointer_1);\n        uint_var = (int)file_pointer_5 + 1;\n        unaff_R12 = file_pointer_4;\n        pcVar43 = (char *)file_pointer_2;\n        file_pointer_4 = file_pointer_3;\n        if ((int)uint_var < (int)uint_var_2) goto LAB_001061ce;\n      } while( true );\n    }\n    uint_var = uint_var + 1;\n    file_pointer_5 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uint_var;\n  } while( true );\nswitchD_00107462_caseD_0:\n  int_var_1 = getopt_long((ulong)file_pointer_1 & 0xffffffff,pcVar46,file_pointer_2,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)file_pointer_2;\n  if (int_var_1 == -1) goto LAB_00106680;\n  if ((0x14 < int_var_1 - 100U) || ((0x117201UL >> ((byte)(int_var_1 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8_var_1 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(undefined8_var_1);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)file_pointer_1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  int_var_2 = 0;\n  int_var_1 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8_pointer = undefined8_pointer_2;\n  if (int_var_1 == 0) {\n    *(byte *)((long)undefined8_pointer_2 + 0x49) = *(byte *)((long)undefined8_pointer_2 + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      long_pointer_2 = undefined8_pointer + 0x1e;\n      if ((undefined8 *)*long_pointer_2 == (undefined8 *)0x0) break;\n      undefined8_var_1 = *(undefined8 *)*long_pointer_2;\n      uVar30 = normalize(*(FILE **)unaff_RBP,undefined8_pointer_2);\n      int_var_1 = filename_cmp(uVar30,undefined8_var_1);\n      if ((int_var_1 == 0) &&\n         ((counted_name_mode == '\\0' || (int_var_2 = int_var_2 + 1, int_var_2 == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *long_pointer_2 = *(long *)(*long_pointer_2 + 0xf0);\n        file_pointer_1 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8_pointer = (undefined8 *)*long_pointer_2;\n    }\n    if (verbose != 0) {\n      file_pointer_2 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,file_pointer_2);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "open_inarch",
                "bfd_fatal",
                "fprintf",
                "strtol",
                "fread",
                "fclose",
                "bfd_plugin_set_program_name",
                "bfd_errmsg",
                "bfd_plugin_set_plugin",
                "bfd_nonfatal",
                "dcgettext",
                "non_fatal",
                "strcmp",
                "fatal",
                "xmalloc",
                "memmove",
                "write_archive",
                "bindtextdomain",
                "normalize",
                "setlocale",
                "replace_members",
                "printf",
                "ranlib_usage",
                "bfd_close",
                "fopen",
                "bfd_set_format",
                "print_contents",
                "bfd_make_writable",
                "ar_emul_default_parse_arg",
                "bfd_check_format_matches",
                "memcpy",
                "bfd_find_target",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "open",
                "bfd_set_error",
                "free",
                "bfd_init",
                "xstrdup",
                "ranlib_only",
                "getopt_long",
                "ferror",
                "map_over_members",
                "get_file_size",
                "fileno",
                "bfd_create",
                "stat",
                "strlen",
                "filename_cmp",
                "bfd_set_default_target",
                "bfd_bwrite",
                "bfd_make_readable",
                "usage",
                "xexit",
                "bfd_fdopenr",
                "ftell",
                "textdomain",
                "fseek",
                "remove_output",
                "yyparse.isra.0",
                "xmalloc_set_program_name",
                "print_descr",
                "get_pos_bfd",
                "list_matching_formats",
                "extract_file",
                "xrealloc",
                "xatexit_cleanup",
                "isatty",
                "malloc",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "parse_input_files_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "ar_open",
                "write_archive",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "uVar1": "programName",
                "__format": "errorMessage",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 programName;\n  char *errorMessage;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  errorMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,errorMessage,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "fputc",
                "free",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "list_matching_formats",
                "print_contents",
                "list_supported_targets",
                "extract_file.cold",
                "write_archive.cold",
                "main",
                "make_tempname.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_and_check_libraries_00102710",
                "plVar1": "file_descriptor_ptr",
                "cVar2": "format_check_result",
                "bVar3": "is_thin_archive",
                "iVar4": "error_code",
                "lVar5": "current_file_descriptor",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "output_file_descriptor",
                "unaff_RBP": "target",
                "in_stack_00000008": "stack_parameter",
                "silent_create": "is_silent_create",
                "make_thin_archive": "is_make_thin_archive",
                "target": "final_target",
                "output_filename": "final_output_filename",
                "dcgettext": "get_text",
                "fatal": "terminate_with_error",
                "bfd_openr": "open_library_for_reading",
                "bfd_check_format": "check_library_format",
                "bfd_close": "close_library",
                "bfd_openw": "open_library_for_writing",
                "bfd_set_format": "set_library_format",
                "bfd_fatal": "terminate_bfd_with_error",
                "bfd_nonfatal": "nonfatal_bfd",
                "bfd_get_error": "get_bfd_error",
                "xexit": "exit_program",
                "bfd_openr_next_archived_file": "open_next_archived_file",
                "operation": "current_operation",
                "stack0x00000008": "stack_variable"
            },
            "code": "\nundefined8 * extract_and_check_libraries_00102710(void)\n\n{\n  long *file_descriptor_ptr;\n  char format_check_result;\n  byte is_thin_archive;\n  int error_code;\n  long current_file_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_file_descriptor;\n  undefined8 target;\n  undefined8 stack_parameter;\n  \n  current_file_descriptor = open_library_for_reading();\n  if (current_file_descriptor != 0) {\n    format_check_result = check_library_format(current_file_descriptor,1);\n    if (format_check_result != '\\0') {\n      final_target = **(undefined8 **)(current_file_descriptor + 8);\n    }\n    close_library(current_file_descriptor);\n  }\n  output_file_descriptor = (undefined8 *)open_library_for_writing();\n  if (((output_file_descriptor != (undefined8 *)0x0) && (format_check_result = set_library_format(output_file_descriptor,2), format_check_result != '\\0')) &&\n     (format_check_result = close_library(output_file_descriptor), format_check_result != '\\0')) {\n    if (is_silent_create == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  terminate_bfd_with_error();\n  do {\n    is_thin_archive = *(byte *)((long)output_file_descriptor + 0x49) >> 4 & 1;\n    if (is_make_thin_archive == '\\0') {\n      if (is_thin_archive != 0) {\n        library_name = *output_file_descriptor;\n        error_message = get_text(0,\"Cannot convert existing thin library %s to normal format\",5);\n        terminate_with_error(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_archive == 0) {\n      library_name = *output_file_descriptor;\n      error_message = get_text(0,\"Cannot convert existing library %s to thin format\",5);\n      terminate_with_error(error_message,library_name);\nLAB_001027cb:\n      nonfatal_bfd();\n      error_code = get_bfd_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(stack_parameter);\n      }\n                    \n      exit_program(1);\n    }\n    do {\n      file_descriptor_ptr = output_file_descriptor + 0x1e;\n      for (current_file_descriptor = open_next_archived_file(output_file_descriptor,0); current_file_descriptor != 0;\n          current_file_descriptor = open_next_archived_file(output_file_descriptor,current_file_descriptor)) {\n        *file_descriptor_ptr = current_file_descriptor;\n        file_descriptor_ptr = (long *)(current_file_descriptor + 0xf0);\n      }\n      *file_descriptor_ptr = 0;\n      error_code = get_bfd_error();\n      if (error_code == 9) {\n        return output_file_descriptor;\n      }\n      do {\n        terminate_bfd_with_error();\nLAB_00102826:\n        library_name = get_text(0,\"creating %s\",5);\n        non_terminate_with_error(library_name);\nLAB_001053b7:\n        final_output_filename = target;\n        output_file_descriptor = (undefined8 *)open_library_for_reading();\n      } while (output_file_descriptor == (undefined8 *)0x0);\n      format_check_result = check_library_format_matches(output_file_descriptor,2,&stack_variable);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((current_operation != 2) && (current_operation != 7)) ||\n            (current_file_descriptor = open_next_archived_file(output_file_descriptor,0), current_file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "extract_and_check_libraries_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompile_and_improve_00103e95",
                "pplVar1": "ptr_pointer_to_long_variable",
                "cVar2": "char_variable",
                "ppFVar3": "ptr_to_ptr_file_variable",
                "pFVar4": "ptr_to_file_variable",
                "plVar5": "ptr_to_long_variable",
                "uVar6": "unsigned_long_variable",
                "pbVar7": "ptr_to_byte_variable",
                "iVar8": "int_variable",
                "pcVar10": "pointer_to_char_variable",
                "uVar11": "unsigned_long_variable",
                "iVar9": "int_variable",
                "plVar12": "pointer_to_long_variable",
                "sVar13": "size_variable",
                "pvVar14": "ptr_to_void_variable",
                "pcVar15": "pointer_to_char_variable",
                "pcVar16": "pointer_to_char_variable",
                "lVar17": "long_variable",
                "lVar18": "long_variable",
                "uVar19": "ulong_variable",
                "uVar20": "uint_variable",
                "lVar21": "long_variable",
                "puVar22": "ptr_to_unsigned_long_variable",
                "puVar23": "ptr_to_unsigned_long_variable",
                "uVar24": "uint_variable",
                "iVar25": "int_variable",
                "uVar26": "ulong_variable",
                "ppcVar27": "ptr_to_ptr_char_variable",
                "bVar28": "bool_variable",
                "ppcVar29": "ptr_to_ptr_char_variable",
                "bVar30": "byte_variable",
                "lVar31": "long_variable",
                "pbVar32": "ptr_to_byte_variable",
                "pbVar33": "ptr_to_byte_variable",
                "piVar34": "ptr_to_int_variable",
                "pbVar35": "ptr_to_byte_variable",
                "uVar36": "uint_variable",
                "iVar37": "int_variable",
                "yychar": "int_variable",
                "yy_buffer_stack": "yy_new_buffer_stack",
                "yy_buffer_stack_top": "yy_new_buffer_stack_top",
                "yyensure_buffer_stack": "yy_ensure_buffer_stack",
                "yy_create_buffer_constprop_0": "yy_create_buffer",
                "yy_def": "yy_def_variable",
                "yy_base": "yy_base_variable",
                "yy_chk": "yy_chk_variable",
                "yy_n_chars": "yy_new_cards",
                "yy_c_buf_p": "yy_new_c_buf_p",
                "yytext": "yy_text",
                "yy_last_accepting_cpos": "yy_last_accepting_c_position",
                "yy_nxt": "yy_next",
                "_stdin": "standard_input_file",
                "_stdout": "standard_output_file",
                "_stderr": "standard_error_file",
                "yy_hold_char": "yy_hold_character",
                "yyleng": "yy_length"
            },
            "code": "\n\n\nvoid decompile_and_improve_00103e95(void)\n\n{\n  long **ptr_pointer_to_long_variable;\n  char char_variable;\n  FILE **ptr_to_ptr_file_variable;\n  FILE *ptr_to_file_variable;\n  long *ptr_to_long_variable;\n  undefined8 unsigned_long_variable;\n  byte *ptr_to_byte_variable;\n  int int_variable;\n  char *pointer_to_char_variable;\n  undefined8 unsigned_long_variable;\n  int int_variable;\n  long *pointer_to_long_variable;\n  size_t size_variable;\n  void *ptr_to_void_variable;\n  char *pointer_to_char_variable;\n  char *pointer_to_char_variable;\n  long long_variable;\n  long long_variable;\n  ulong ulong_variable;\n  uint uint_variable;\n  long long_variable;\n  undefined8 *ptr_to_unsigned_long_variable;\n  undefined8 *ptr_to_unsigned_long_variable;\n  uint uint_variable;\n  int int_variable;\n  ulong ulong_variable;\n  char **ptr_to_ptr_char_variable;\n  bool bool_variable;\n  char **ptr_to_ptr_char_variable;\n  byte byte_variable;\n  long long_variable;\n  byte *ptr_to_byte_variable;\n  byte *ptr_to_byte_variable;\n  int *ptr_to_int_variable;\n  byte *ptr_to_byte_variable;\n  uint uint_variable;\n  int int_variable;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_828;\n  char *local_820;\n  long local_818;\n  char **local_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  long_variable = 0;\n  int_variable = -2;\n  ptr_to_ptr_char_variable = local_678;\n  local_800 = 0;\n  local_828 = local_740;\n  local_818 = 200;\n  local_820 = local_828;\n  local_810 = ptr_to_ptr_char_variable;\nLAB_00103ee9:\n  *local_828 = (char)long_variable;\n  if (local_820 + local_818 + -1 <= local_828) {\n    long_variable = (long)local_828 - (long)local_820;\n    long_variable = long_variable + 1;\n    if (local_818 < 10000) {\n      long_variable = local_818 * 2;\n      local_818 = 10000;\n      if (long_variable < 0x2711) {\n        local_818 = long_variable;\n      }\n      pointer_to_char_variable = (char *)malloc(local_818 * 9 + 7);\n      if (pointer_to_char_variable != (char *)0x0) {\n        long_variable = long_variable * 8;\n        pointer_to_char_variable = local_820;\n        pointer_to_char_variable = pointer_to_char_variable;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *pointer_to_char_variable = *pointer_to_char_variable;\n          pointer_to_char_variable = pointer_to_char_variable + (ulong)bVar39 * -2 + 1;\n          pointer_to_char_variable = pointer_to_char_variable + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pointer_to_char_variable + local_818);\n        ptr_to_ptr_char_variable = ppcVar38;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *(undefined *)ptr_to_ptr_char_variable = *(undefined *)local_810;\n          local_810 = (char **)((long)local_810 + (ulong)bVar39 * -2 + 1);\n          ptr_to_ptr_char_variable = (char **)((long)ptr_to_ptr_char_variable + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_820 != local_740) {\n          free(local_820);\n        }\n        local_828 = pointer_to_char_variable + long_variable;\n        ptr_to_ptr_char_variable = ppcVar38 + long_variable;\n        local_820 = pointer_to_char_variable;\n        local_810 = ppcVar38;\n        if (pointer_to_char_variable + local_818 + -1 <= local_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    pointer_to_char_variable = local_820;\n    if (local_820 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pointer_to_char_variable);\n    return;\n  }\nLAB_00103fd8:\n  int_variable = (int)long_variable;\n  if (int_variable == 3) goto LAB_0010524c;\n  char_variable = (&yypact)[int_variable];\n  if (char_variable != -0xe) {\n    if (int_variable == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = standard_input_file;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = standard_output_file;\n        }\n        if ((yy_new_buffer_stack == 0) || (*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) == 0)) {\n          yy_ensure_buffer_stack();\n          ptr_to_unsigned_long_variable = (undefined8 *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8);\n          unsigned_long_variable = yy_create_buffer(yyin);\n          *ptr_to_unsigned_long_variable = unsigned_long_variable;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_new_c_buf_p = yy_hold_character;\n      ptr_to_byte_variable = yy_new_c_buf_p;\n      ptr_to_byte_variable = yy_new_c_buf_p;\n      uint_variable = yy_start;\nLAB_001040d4:\n      ulong_variable = (ulong)uint_variable;\n      ulong_variable = (ulong)local_7fc;\n      bool_variable = false;\n      do {\n        byte_variable = yy_ec[*ptr_to_byte_variable];\n        if (*(short *)(yy_accept + (long)(int)ulong_variable * 2) != 0) {\n          bool_variable = true;\n          ulong_variable = ulong_variable & 0xffffffff;\n          local_7f8 = ptr_to_byte_variable;\n        }\n        while( true ) {\n          int_variable = (int)ulong_variable;\n          long_variable = (long)(int)((int)*(short *)(yy_base_variable + (long)int_variable * 2) + (uint)byte_variable);\n          if (int_variable == *(short *)(yy_chk_variable + long_variable * 2)) break;\n          ulong_variable = (ulong)(uint)(int)*(short *)(yy_def_variable + (long)int_variable * 2);\n          if (0xb0 < *(short *)(yy_def_variable + (long)int_variable * 2)) {\n            byte_variable = yy_meta[(int)(uint)byte_variable];\n          }\n        }\n        ptr_to_byte_variable = ptr_to_byte_variable + 1;\n        ulong_variable = (ulong)*(short *)(yy_next + long_variable * 2);\n      } while (*(short *)(yy_base_variable + ulong_variable * 2) != 0xc2);\n      local_7fc = (uint)ulong_variable;\n      ptr_to_byte_variable = ptr_to_byte_variable;\n      if (bool_variable) {\n        yy_last_accepting_c_position = local_7f8;\n        yy_last_accepting_state = local_7fc;\n      }\nLAB_0010419f:\n      int_variable = (int)*(short *)(yy_accept + (long)(int)ulong_variable * 2);\n      if (int_variable == 0) {\n        int_variable = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        ptr_to_byte_variable = yy_last_accepting_c_position;\n      }\n      yy_length = (int)ptr_to_byte_variable - (int)ptr_to_byte_variable;\n      yy_hold_character = *ptr_to_byte_variable;\n      yy_new_c_buf_p = ptr_to_byte_variable;\n      yy_text = ptr_to_byte_variable;\n      *ptr_to_byte_variable = 0;\nLAB_001041f0:\n      ptr_to_byte_variable = yy_text;\n      long_variable = yy_new_buffer_stack_top;\n      switch(int_variable) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        int_variable = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        int_variable = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        int_variable = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        int_variable = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        int_variable = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        int_variable = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        int_variable = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        int_variable = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        int_variable = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        int_variable = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        int_variable = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        int_variable = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        int_variable = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        int_variable = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        int_variable = 0x28;\n        break;\n      case 0x21:\n        int_variable = 0x29;\n        break;\n      case 0x22:\n        int_variable = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yy_text);\n        int_variable = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        int_variable = 0x102;\n        break;\n      case 0x28:\n        fwrite(yy_text,(long)yy_length,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        int_variable = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        int_variable = 0x112;\n      }\n      long_variable = (long)int_variable;\n    }\n    if (0 < int_variable) {\n      if (int_variable != 0x100) {\n        int_variable = 2;\n        if (int_variable < 0x114) {\n          int_variable = (int)(char)yytranslate[int_variable];\n        }\n        goto LAB_0010497d;\n      }\n      int_variable = 0x101;\n      goto LAB_001051f0;\n    }\n    int_variable = 0;\n    int_variable = 0;\nLAB_0010497d:\n    uint_variable = char_variable + int_variable;\n    if ((0x22 < uint_variable) || (int_variable != (char)yycheck[(int)uint_variable])) goto LAB_001049db;\n    char_variable = yytable[(int)uint_variable];\n    long_variable = (long)char_variable;\n    if (char_variable < '\\x01') {\n      int_variable = -(int)char_variable;\n      goto LAB_00104a0a;\n    }\n    int_variable = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    ptr_to_ptr_char_variable = ptr_to_ptr_char_variable + 1;\n    *ptr_to_ptr_char_variable = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  int_variable = (int)(char)(&yydefact)[(int)long_variable];\n  if ((&yydefact)[(int)long_variable] == '\\0') {\n    if (local_800 == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[long_variable] != -0xe) &&\n             (uint_variable = (int)(char)(&yypact)[long_variable] + 1, uint_variable < 0x23)) &&\n            (yycheck[(int)uint_variable] == '\\x01')) &&\n           (long_variable = (long)(char)yytable[(int)uint_variable], '\\0' < (char)yytable[(int)uint_variable]))\n        goto LAB_00105227;\n        if (local_820 == local_828) goto LAB_0010524c;\n        local_828 = local_828 + -1;\n        ptr_to_ptr_char_variable = ptr_to_ptr_char_variable + -1;\n        long_variable = (long)*local_828;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < int_variable) {\n      int_variable = -2;\n      goto LAB_001051f0;\n    }\n    if (int_variable != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsigned_long_variable = program_name;\n  ptr_to_ptr_char_variable = obfd;\n  char_variable = yyr2[int_variable];\n  ppcVar38 = (char **)ptr_to_ptr_char_variable[1 - char_variable];\n  switch(int_variable) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    ptr_to_unsigned_long_variable = (undefined8 *)*ptr_to_ptr_char_variable;\n    if (obfd == (char **)0x0) {\n      pointer_to_char_variable = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointer_to_char_variable = (char *)dcgettext(0,pointer_to_char_variable,5);\n      fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable);\n      maybequit();\n    }\n    else {\n      for (; ptr_to_unsigned_long_variable != (undefined8 *)0x0; ptr_to_unsigned_long_variable = (undefined8 *)ptr_to_unsigned_long_variable[1]) {\n        for (ptr_to_unsigned_long_variable = (undefined8 *)obfd[0x1f]; ptr_to_unsigned_long_variable != (undefined8 *)0x0;\n            ptr_to_unsigned_long_variable = (undefined8 *)ptr_to_unsigned_long_variable[0x1e]) {\n          int_variable = filename_cmp(*ptr_to_unsigned_long_variable);\n          if (int_variable == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*ptr_to_unsigned_long_variable,0);\n        unsigned_long_variable = program_name;\n        unsigned_long_variable = *ptr_to_unsigned_long_variable;\n        pointer_to_char_variable = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable,unsigned_long_variable);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    ptr_to_unsigned_long_variable = (undefined8 *)*ptr_to_ptr_char_variable;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      pointer_to_char_variable = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; ptr_to_unsigned_long_variable != (undefined8 *)0x0; ptr_to_unsigned_long_variable = (undefined8 *)ptr_to_unsigned_long_variable[1]) {\n      bool_variable = false;\n      ptr_to_ptr_char_variable = obfd + 0x1f;\n      for (pointer_to_char_variable = obfd[0x1f]; pointer_to_char_variable != (char *)0x0; pointer_to_char_variable = *(char **)(pointer_to_char_variable + 0xf0)) {\n        int_variable = filename_cmp();\n        if (int_variable == 0) {\n          pointer_to_char_variable = (char *)bfd_openr(*ptr_to_unsigned_long_variable,0);\n          unsigned_long_variable = program_name;\n          if (pointer_to_char_variable == (char *)0x0) {\n            unsigned_long_variable = *ptr_to_unsigned_long_variable;\n            pointer_to_char_variable = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable,unsigned_long_variable);\n            maybequit();\n          }\n          else {\n            *ptr_to_ptr_char_variable = pointer_to_char_variable;\n            bool_variable = true;\n            *(undefined8 *)(pointer_to_char_variable + 0xf0) = *(undefined8 *)(pointer_to_char_variable + 0xf0);\n          }\n        }\n        else {\n          ptr_to_ptr_char_variable = (char **)(pointer_to_char_variable + 0xf0);\n        }\n      }\n      if (!bool_variable) {\n        pointer_to_char_variable = (char *)bfd_openr(*ptr_to_unsigned_long_variable,0);\n        unsigned_long_variable = program_name;\n        unsigned_long_variable = *ptr_to_unsigned_long_variable;\n        pointer_to_char_variable = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable,unsigned_long_variable);\n        unsigned_long_variable = program_name;\n        if (pointer_to_char_variable == (char *)0x0) {\n          unsigned_long_variable = *ptr_to_unsigned_long_variable;\n          pointer_to_char_variable = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable,unsigned_long_variable);\n          maybequit();\n        }\n        else {\n          *ptr_to_ptr_char_variable = pointer_to_char_variable;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    ptr_to_unsigned_long_variable = (undefined8 *)*ptr_to_ptr_char_variable;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; ptr_to_unsigned_long_variable != (undefined8 *)0x0; ptr_to_unsigned_long_variable = (undefined8 *)ptr_to_unsigned_long_variable[1]) {\n      bool_variable = false;\n      ptr_to_ptr_char_variable = obfd + 0x1f;\n      for (ptr_to_unsigned_long_variable = (undefined8 *)obfd[0x1f]; unsigned_long_variable = program_name, ptr_to_unsigned_long_variable != (undefined8 *)0x0;\n          ptr_to_unsigned_long_variable = (undefined8 *)ptr_to_unsigned_long_variable[0x1e]) {\n        int_variable = filename_cmp(*ptr_to_unsigned_long_variable,*ptr_to_unsigned_long_variable);\n        if (int_variable == 0) {\n          bool_variable = true;\n          *ptr_to_ptr_char_variable = (char *)ptr_to_unsigned_long_variable[0x1e];\n        }\n        else {\n          ptr_to_ptr_char_variable = (char **)(ptr_to_unsigned_long_variable + 0x1e);\n        }\n      }\n      if (!bool_variable) {\n        unsigned_long_variable = *ptr_to_unsigned_long_variable;\n        pointer_to_char_variable = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable,unsigned_long_variable);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    ptr_to_unsigned_long_variable = (undefined8 *)*ptr_to_ptr_char_variable;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; ptr_to_unsigned_long_variable != (undefined8 *)0x0; ptr_to_unsigned_long_variable = (undefined8 *)ptr_to_unsigned_long_variable[1]) {\n      pointer_to_char_variable = (char *)bfd_openr(*ptr_to_unsigned_long_variable,\"plugin\");\n      unsigned_long_variable = program_name;\n      ptr_to_ptr_char_variable = obfd;\n      if (pointer_to_char_variable == (char *)0x0) {\n        unsigned_long_variable = *ptr_to_unsigned_long_variable;\n        pointer_to_char_variable = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(standard_error_file,pointer_to_char_variable,unsigned_long_variable,unsigned_long_variable);\n        maybequit();\n      }\n      else {\n        *(char **)(pointer_to_char_variable + 0xf0) = obfd[0x1f];\n        ptr_to_ptr_char_variable[0x1f] = pointer_to_char_variable;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    pointer_to_char_variable = *obfd;\n    verbose = 1;\n    outfile = standard_output_file;\n    pointer_to_char_variable = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointer_to_char_variable,pointer_to_char_variable);\n    for (pointer_to_char_variable = obfd[0x1f]; pointer_to_char_variable != (char *)0x0; pointer_to_char_variable = *(char **)(pointer_to_char_variable + 0xf0)) {\n      ar_directory_doer(pointer_to_char_variable,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(ptr_to_ptr_char_variable);\n    pointer_to_char_variable = real_name;\n    int_variable = stat(real_name,&local_7d0);\n    if ((int_variable != 0) && (obfd = (char **)bfd_openw(pointer_to_char_variable,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*ptr_to_ptr_char_variable,0);\n    break;\n  case 0x1f:\n    ar_open(*ptr_to_ptr_char_variable,1);\n    break;\n  case 0x20:\n    pointer_to_char_variable = *ptr_to_ptr_char_variable;\n    if (obfd == (char **)0x0) {\n      pointer_to_char_variable = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long_variable = open_inarch(ptr_to_ptr_char_variable[-1],0);\n    if (long_variable != 0) {\n      map_over_list(long_variable,ar_addlib_doer,pointer_to_char_variable);\n    }\n    break;\n  case 0x21:\n    pointer_to_char_variable = *ptr_to_ptr_char_variable;\n    pointer_to_char_variable = ptr_to_ptr_char_variable[-1];\n    unsigned_long_variable = open_inarch(ptr_to_ptr_char_variable[-2],0);\n    if (pointer_to_char_variable == (char *)0x0) {\n      outfile = standard_output_file;\n    }\n    else {\n      outfile = fopen(pointer_to_char_variable,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(unsigned_long_variable,ar_directory_doer,pointer_to_char_variable);\n        bfd_close(unsigned_long_variable);\n        fclose(outfile);\n        break;\n      }\n      outfile = standard_output_file;\n      pointer_to_char_variable = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(standard_error_file,pointer_to_char_variable,pointer_to_char_variable);\n    }\n    map_over_list(unsigned_long_variable,ar_directory_doer,pointer_to_char_variable);\n    bfd_close(unsigned_long_variable);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ptr_to_ptr_char_variable;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ptr_to_ptr_char_variable[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pointer_to_char_variable = ptr_to_ptr_char_variable[-2];\n    *ppcVar38 = *ptr_to_ptr_char_variable;\n    ppcVar38[1] = pointer_to_char_variable;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  long_variable = (long)char_variable;\n  local_828 = local_828 + -long_variable;\n  ptr_to_ptr_char_variable[1 - long_variable] = (char *)ppcVar38;\n  ptr_to_ptr_char_variable = ptr_to_ptr_char_variable + (1 - long_variable);\n  uint_variable = (int)(char)yypgoto[(char)yyr1[int_variable] + -0x18] + (int)*local_828;\n  if ((uint_variable < 0x23) && (*local_828 == yycheck[(int)uint_variable])) {\n    long_variable = (long)(char)yytable[(int)uint_variable];\n  }\n  else {\n    long_variable = (long)(char)yydefgoto[(char)yyr1[int_variable] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  int_variable = ((int)ptr_to_byte_variable - (int)yy_text) + -1;\n  *ptr_to_byte_variable = yy_hold_character;\n  ptr_pointer_to_long_variable = (long **)(yy_new_buffer_stack + long_variable * 8);\n  ptr_to_ptr_file_variable = (FILE **)*ptr_pointer_to_long_variable;\n  if (*(int *)(ptr_to_ptr_file_variable + 7) == 0) {\n    yy_new_cards = *(uint *)((long)ptr_to_ptr_file_variable + 0x1c);\n    *(undefined4 *)(ptr_to_ptr_file_variable + 7) = 1;\n    *ptr_to_ptr_file_variable = yyin;\n  }\n  ptr_to_byte_variable = yy_new_c_buf_p;\n  ptr_to_file_variable = ptr_to_ptr_file_variable[1];\n  auVar40._8_8_ = ptr_to_file_variable;\n  auVar40._0_8_ = ptr_to_ptr_file_variable;\n  if ((byte *)((long)&ptr_to_file_variable->_flags + (long)(int)yy_new_cards) < yy_new_c_buf_p) {\n    if ((byte *)((long)&ptr_to_file_variable->_flags + (long)(int)yy_new_cards + 1) < yy_new_c_buf_p) {\n      auVar40 = yy_fatal_error();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uint_variable = (int)((long)ptr_to_byte_variable - (long)ptr_to_byte_variable) - 1;\n      for (long_variable = 0; (int)long_variable < (int)uint_variable; long_variable = long_variable + 1) {\n        *(byte *)(auVar40._8_8_ + long_variable) = ptr_to_byte_variable[long_variable];\n      }\n      pointer_to_long_variable = *ptr_pointer_to_long_variable;\n      if (*(int *)(pointer_to_long_variable + 7) == 2) {\n        yy_new_cards = 0;\n        *(undefined4 *)((long)pointer_to_long_variable + 0x1c) = 0;\nLAB_0010475e:\n        ptr_to_file_variable = yyin;\n        if (uint_variable == 0) {\n          if ((yy_new_buffer_stack == 0) || (*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) == 0))\n          {\n            yy_ensure_buffer_stack();\n            ptr_to_unsigned_long_variable = (undefined8 *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8);\n            unsigned_long_variable = yy_create_buffer(ptr_to_file_variable);\n            *ptr_to_unsigned_long_variable = unsigned_long_variable;\n          }\n          long_variable = yy_new_buffer_stack;\n          if (yy_new_buffer_stack != 0) {\n            long_variable = *(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8);\n          }\n          int_variable = 1;\n          yy_init_buffer(long_variable);\n          yy_load_buffer_state();\n        }\n        else {\n          int_variable = 2;\n          *(undefined4 *)(*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          ptr_to_long_variable = *ptr_pointer_to_long_variable;\n          uint_variable = ~uint_variable + *(int *)(pointer_to_long_variable + 3);\n          if (0 < (int)uint_variable) break;\n          uint_variable = (int)yy_new_c_buf_p - (int)(void *)ptr_to_long_variable[1];\n          if (*(int *)(ptr_to_long_variable + 4) == 0) {\n            ptr_to_long_variable[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          int_variable = *(int *)(ptr_to_long_variable + 3);\n          int_variable = int_variable;\n          if (int_variable < 1) {\n            int_variable = int_variable / 8;\n          }\n          *(int *)(ptr_to_long_variable + 3) = int_variable + int_variable;\n          ptr_to_void_variable = realloc((void *)ptr_to_long_variable[1],(long)(int_variable + int_variable + 2));\n          ptr_to_long_variable[1] = (long)ptr_to_void_variable;\n          if (ptr_to_void_variable == (void *)0x0) goto LAB_00104626;\n          yy_new_c_buf_p = (byte *)((long)ptr_to_void_variable + (long)(int)uint_variable);\n          pointer_to_long_variable = *ptr_pointer_to_long_variable;\n        }\n        if (0x2000 < (int)uint_variable) {\n          uint_variable = 0x2000;\n        }\n        ulong_variable = (ulong)uint_variable;\n        if (*(int *)((long)ptr_to_long_variable + 0x24) == 0) {\n          ptr_to_int_variable = __errno_location();\n          ulong_variable = (ulong)(int)uint_variable;\n          ulong_variable = (ulong)(int)uint_variable;\n          *ptr_to_int_variable = 0;\n          goto LAB_001046c7;\n        }\n        ulong_variable = 0;\n        ptr_to_int_variable = (int *)(long)(int)uint_variable;\n        do {\n          int_variable = getc(yyin);\n          uint_variable = (uint)ulong_variable;\n          if (int_variable == -1) {\n            int_variable = ferror(yyin);\n            uint_variable = uint_variable;\n            if (int_variable != 0) {\n              do {\n                pointer_to_char_variable = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *ptr_to_int_variable = 0;\n                  clearerr((FILE *)pointer_to_char_variable);\nLAB_001046c7:\n                  size_variable = fread((void *)(*(long *)(*(long *)(yy_new_buffer_stack +\n                                                             yy_new_buffer_stack_top * 8) + 8) + ulong_variable)\n                                 ,1,ulong_variable,yyin);\n                  pointer_to_char_variable = (char *)yyin;\n                  yy_new_cards = (uint)size_variable;\n                  uint_variable = yy_new_cards;\n                  if ((yy_new_cards != 0) || (int_variable = ferror(yyin), uint_variable = yy_new_cards, int_variable == 0))\n                  goto LAB_00104738;\n                } while (*ptr_to_int_variable == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (int_variable == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_variable +\n             (long)(int)uint_variable + *(long *)(*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) + 8)\n             ) = 10;\n            uint_variable = uint_variable + 1;\n            break;\n          }\n          ulong_variable = (ulong)(uint_variable + 1);\n          *(char *)(*(long *)(*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) + 8) +\n                   (long)ptr_to_int_variable) = (char)int_variable;\n          ptr_to_int_variable = (int *)((long)ptr_to_int_variable + 1);\n        } while (uint_variable != uint_variable + 1);\nLAB_00104738:\n        yy_new_cards = uint_variable;\n        uint_variable = yy_new_cards;\n        int_variable = 0;\n        *(uint *)(*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) + 0x1c) = yy_new_cards;\n        if (uint_variable == 0) goto LAB_0010475e;\n      }\n      pointer_to_long_variable = (long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8);\n      long_variable = *pointer_to_long_variable;\n      uint_variable = uint_variable + yy_new_cards;\n      if (*(int *)(long_variable + 0x18) < (int)uint_variable) {\n        int_variable = ((int)yy_new_cards >> 1) + uint_variable;\n        ptr_to_void_variable = realloc(*(void **)(long_variable + 8),(long)int_variable);\n        *(void **)(long_variable + 8) = ptr_to_void_variable;\n        auVar41._8_8_ = pointer_to_long_variable;\n        auVar41._0_8_ = *pointer_to_long_variable;\n        if (*(long *)(*pointer_to_long_variable + 8) == 0) {\n          auVar41 = yy_fatal_error();\n        }\n        pointer_to_long_variable = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = int_variable + -2;\n      }\n      yy_new_cards = uint_variable;\n      *(undefined *)(*(long *)(*pointer_to_long_variable + 8) + (long)(int)uint_variable) = 0;\n      *(undefined *)(*(long *)(*pointer_to_long_variable + 8) + 1 + (long)(int)uint_variable) = 0;\n      ptr_to_byte_variable = *(byte **)(*pointer_to_long_variable + 8);\n      yy_text = ptr_to_byte_variable;\n      if (int_variable == 1) goto LAB_001048a4;\n      if (int_variable == 2) goto LAB_001048ca;\n      ptr_to_byte_variable = ptr_to_byte_variable + int_variable;\n      yy_new_c_buf_p = ptr_to_byte_variable;\n      uint_variable = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)ptr_to_byte_variable - (long)ptr_to_byte_variable == 1) goto LAB_001048a4;\nLAB_001048ca:\n    ptr_to_byte_variable = (byte *)((long)(int)yy_new_cards +\n                      *(long *)(*(long *)(yy_new_buffer_stack + yy_new_buffer_stack_top * 8) + 8));\n    yy_new_c_buf_p = ptr_to_byte_variable;\n    ulong_variable = yy_get_previous_state();\n    ptr_to_byte_variable = yy_text;\n    goto LAB_0010419f;\n  }\n  ptr_to_byte_variable = ptr_to_byte_variable + int_variable;\n  yy_new_c_buf_p = ptr_to_byte_variable;\n  ulong_variable = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)ulong_variable * 2) != 0) {\n    yy_last_accepting_c_position = ptr_to_byte_variable;\n    yy_last_accepting_state = (uint)ulong_variable;\n  }\n  ulong_variable = ulong_variable & 0xffffffff;\n  while( true ) {\n    int_variable = (int)ulong_variable;\n    if (int_variable == *(short *)(yy_chk_variable + (long)(*(short *)(yy_base_variable + (long)int_variable * 2) + 1) * 2)) break;\n    ulong_variable = (ulong)(uint)(int)*(short *)(yy_def_variable + (long)int_variable * 2);\n  }\n  uint_variable = (uint)*(short *)(yy_next + (long)(*(short *)(yy_base_variable + (long)int_variable * 2) + 1) * 2);\n  ptr_to_byte_variable = ptr_to_byte_variable;\n  if ((*(short *)(yy_next + (long)(*(short *)(yy_base_variable + (long)int_variable * 2) + 1) * 2) == 0) ||\n     (uint_variable == 0xb0)) goto LAB_0010419f;\n  ptr_to_byte_variable = ptr_to_byte_variable + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_new_c_buf_p = yy_text;\n  int_variable = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *ptr_to_byte_variable = yy_hold_character;\n  ulong_variable = (ulong)yy_last_accepting_state;\n  ptr_to_byte_variable = yy_last_accepting_c_position;\n  goto LAB_0010419f;\nLAB_00105227:\n  ptr_to_ptr_char_variable = ptr_to_ptr_char_variable + 1;\n  local_800 = 3;\n  *ptr_to_ptr_char_variable = yylval;\nLAB_001049d1:\n  local_828 = local_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "open_inarch",
                "prompt",
                "smart_rename.constprop.0",
                "fprintf",
                "ferror",
                "fread",
                "fclose",
                "clearerr",
                "maybequit",
                "dcgettext",
                "map_over_list",
                "yy_load_buffer_state",
                "ar_directory_doer",
                "fwrite",
                "stat",
                "ar_open",
                "filename_cmp",
                "__errno_location",
                "yyerror.constprop.0",
                "bfd_openw",
                "dup",
                "ar_addlib_doer",
                "yy_fatal_error",
                "printf",
                "fopen",
                "bfd_close",
                "unlink",
                "bfd_set_format",
                "yy_init_buffer",
                "bfd_cache_close",
                "yy_get_previous_state",
                "bfd_openr",
                "realloc",
                "yyensure_buffer_stack",
                "yy_create_buffer.constprop.0",
                "getc",
                "extract_file",
                "free",
                "malloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_matching_formats",
                "list_supported_targets",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_output_files_00107730",
                "output_filename": "filename",
                "output_file": "file",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupOutputFiles_00107730(void)\n\n{\n  if (filename == 0) {\n    return;\n  }\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  removeFile(filename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_output_files_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_buffer_001031cf",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "returnVal",
                "iVar1": "errorNum",
                "uVar2": "isTerminal",
                "iVar3": "fileNo",
                "piVar4": "errnoPtr",
                "lVar5": "bufferStack"
            },
            "code": "\n\n\nundefined8\ninitializeBuffer_001031cf(FILE **outputFile,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 returnVal)\n\n{\n  int errorNum;\n  uint isTerminal;\n  int fileNo;\n  int *errnoPtr;\n  long bufferStack;\n  \n  errnoPtr = __errno_location();\n  bufferStack = yy_buffer_stack;\n  errorNum = *errnoPtr;\n  if (outputFile == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (yy_buffer_stack != 0) {\nLAB_00103263:\n      if (outputFile == *(FILE ***)(bufferStack + yy_buffer_stack_top * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)outputFile + 0x1c) = 0;\n    *(undefined *)&outputFile[1]->_flags = 0;\n    *(undefined *)((long)&outputFile[1]->_flags + 1) = 0;\n    *(undefined4 *)(outputFile + 5) = 1;\n    outputFile[2] = outputFile[1];\n    *(undefined4 *)(outputFile + 7) = 0;\n    if (bufferStack != 0) {\n      if (outputFile == *(FILE ***)(bufferStack + yy_buffer_stack_top * 8)) {\n        yy_load_buffer_state();\n      }\n      *outputFile = inputFile;\n      *(undefined4 *)((long)outputFile + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *outputFile = inputFile;\n    *(undefined4 *)((long)outputFile + 0x34) = 1;\n  }\n  *(undefined8 *)((long)outputFile + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileNo = fileno(inputFile);\n    fileNo = isatty(fileNo);\n    isTerminal = (uint)(0 < fileNo);\n  }\n  *(uint *)((long)outputFile + 0x24) = isTerminal;\n  *errnoPtr = errorNum;\n  return returnVal;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "__errno_location",
                "isatty",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "tempVar"
            },
            "code": "\nvoid copyData_0010312d(long destination,long source)\n\n{\n  long tempVar;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  tempVar = obfd;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(obfd + 0xf8);\n  *(long *)(tempVar + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationPath",
                "__fd": "destinationFileDescriptor",
                "_Var3": "sourceFilePointer",
                "uVar4": "bytesCopied",
                "sVar5": "bytesWritten",
                "iVar1": "errnoValue",
                "iVar2": "readResult",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int sourceFileDescriptor,char *destinationPath)\n\n{\n  int errnoValue;\n  int destinationFileDescriptor;\n  int readResult;\n  __off_t sourceFilePointer;\n  ulong bytesCopied;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFilePointer = lseek(sourceFileDescriptor,0,0), sourceFilePointer == 0)) {\n    destinationFileDescriptor = open(destinationPath,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesCopied = simple_copy_constprop_0_cold();\n      return bytesCopied;\n    }\n    do {\n      bytesCopied = read(sourceFileDescriptor,buffer,0x2000);\n      readResult = (int)bytesCopied;\n      if (readResult < 1) {\n        errnoPointer = __errno_location();\n        errnoValue = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (readResult != 0) {\n          *errnoPointer = errnoValue;\n          return 0xffffffff;\n        }\n        return bytesCopied & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)readResult);\n    } while (bytesWritten == (long)readResult);\n    errnoPointer = __errno_location();\n    readResult = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = readResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "write",
                "open",
                "read",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errNumPtr",
                "uVar3": "message",
                "pcVar4": "errStr",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong checkFile_001052a0(char *filePath)\n\n{\n  int status;\n  int *errNumPtr;\n  undefined8 message;\n  char *errStr;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStat);\n    if (status < 0) {\n      errNumPtr = __errno_location();\n      if (*errNumPtr == 2) {\n        message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(message,filePath);\n      }\n      else {\n        errStr = strerror(*errNumPtr);\n        message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(message,filePath,errStr);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(message,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(message,filePath);\n    }\n    else {\n      message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(message,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "get_file_size.cold",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOptionString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOptionString;\n  \n  emulationOptionString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOptionString);\n  emulationOptionString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOptionString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_archives_00103c60",
                "param_1": "input_archive_path",
                "param_2": "is_output_archive",
                "real_name": "temp_file_name",
                "temp_name": "temporary_file_name",
                "piVar2": "error_code",
                "pcVar3": "error_message",
                "lVar4": "input_bfd",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "output_bfds"
            },
            "code": "\n\n\nvoid extract_archives_00103c60(char *input_archive_path,int is_output_archive)\n\n{\n  char cVar1;\n  int *error_code;\n  char *error_message;\n  long input_bfd;\n  long archived_file;\n  undefined8 program_name;\n  long *output_bfds;\n  \n  temp_file_name = xstrdup();\n  temporary_file_name = (char *)make_tempname(temp_file_name,&temp_fd);\n  if (temporary_file_name == (char *)0x0) {\n    error_code = __errno_location();\n    input_archive_path = strerror(*error_code);\n    program_name = program_name;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    obfd = bfd_fdopenw(temporary_file_name,0,temp_fd);\n    if (obfd == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive_path = temporary_file_name;\n    }\n    else {\n      if (is_output_archive != 0) {\nLAB_00103d02:\n        bfd_set_format(obfd,2);\n        *(byte *)(obfd + 0x49) = *(byte *)(obfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_bfd = bfd_openr(input_archive_path,\"plugin\");\n      if (input_bfd == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        cVar1 = bfd_check_format(input_bfd,2);\n        if (cVar1 != '\\0') {\n          output_bfds = (long *)(obfd + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_bfd,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_bfd,archived_file)) {\n            *output_bfds = archived_file;\n            output_bfds = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = program_name;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_archive_path);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "make_tempname",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "strerror",
                "fprintf",
                "bfd_check_format",
                "maybequit",
                "bfd_fdopenw",
                "bfd_openr",
                "dcgettext",
                "bfd_set_format",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_archives_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "open_inarch",
                "print_contents",
                "bfd_nonfatal.cold",
                "replace_members.cold",
                "list_supported_targets",
                "extract_file.cold",
                "ar_emul_default_usage",
                "get_file_size",
                "main",
                "FUN_00102e6f",
                "yyparse.isra.0",
                "map_over_list",
                "ar_open",
                "list_matching_formats",
                "write_archive",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "map_over_members.cold",
                "print_arelt_descr.cold",
                "smart_rename.constprop.0.cold",
                "print_version",
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "parse_input_0010300e",
                "bVar1": "foundAcceptState",
                "iVar2": "currentState",
                "lVar3": "nextStateIndex",
                "bVar4": "ecIndex",
                "pbVar5": "currentCharPtr",
                "in_R9": "lastAcceptingCharPtr",
                "in_R10D": "lastAcceptingState",
                "yy_start": "yyStart",
                "yytext": "yyText",
                "yy_c_buf_p": "yyCBufferPtr",
                "yy_ec": "yyEc",
                "yy_accept": "yyAccept",
                "yy_base": "yyBase",
                "yy_chk": "yyCheck",
                "yy_def": "yyDefine",
                "yy_meta": "yyMeta",
                "yy_nxt": "yyNext",
                "yy_last_accepting_cpos": "lastAcceptingCharPtr",
                "yy_last_accepting_state": "lastAcceptingState"
            },
            "code": "\nvoid parseInput_0010300e(void)\n\n{\n  bool foundAcceptState;\n  int currentState;\n  long nextStateIndex;\n  byte ecIndex;\n  byte *currentCharPtr;\n  byte *lastAcceptingCharPtr;\n  int lastAcceptingState;\n  \n  foundAcceptState = false;\n  currentState = yyStart;\n  for (currentCharPtr = yyText; currentCharPtr < yyCBufferPtr; currentCharPtr = currentCharPtr + 1) {\n    ecIndex = 1;\n    if (*currentCharPtr != 0) {\n      ecIndex = yyEc[*currentCharPtr];\n    }\n    if (*(short *)(yyAccept + (long)currentState * 2) != 0) {\n      foundAcceptState = true;\n      lastAcceptingCharPtr = currentCharPtr;\n      lastAcceptingState = currentState;\n    }\n    while( true ) {\n      nextStateIndex = (long)(int)((int)*(short *)(yyBase + (long)currentState * 2) + (uint)ecIndex);\n      if (*(short *)(yyCheck + nextStateIndex * 2) == currentState) break;\n      currentState = (int)*(short *)(yyDefine + (long)currentState * 2);\n      if (0xb0 < currentState) {\n        ecIndex = yyMeta[(int)(uint)ecIndex];\n      }\n    }\n    currentState = (int)*(short *)(yyNext + nextStateIndex * 2);\n  }\n  if (foundAcceptState) {\n    lastAcceptingCharPtr = lastAcceptingCharPtr;\n    lastAcceptingState = lastAcceptingState;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "parse_input_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_write_from_archive_00107740",
                "param_1": "archive",
                "iVar1": "comparisonResult",
                "iVar2": "errorCode",
                "piVar3": "errnoLocation",
                "pcVar4": "strError",
                "uVar5": "errorText",
                "pplVar6": "extractedFiles",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "offset",
                "plVar8": "currentFile",
                "puVar9": "localVariables",
                "uVar10": "bytesRemaining",
                "sVar11": "bytesToRead",
                "local_c8": "localBuffer",
                "_Stack_b0": "fileMode",
                "uStack_98": "fileSize",
                "uStack_80": "accessTime",
                "uStack_70": "modificationTime",
                "output_file": "outputFile",
                "output_filename": "outputFileName",
                "preserve_dates": "preserveDates"
            },
            "code": "\nlong * extractAndWriteFromArchive_00107740(long **archive)\n\n{\n  int comparisonResult;\n  int errorCode;\n  int *errnoLocation;\n  char *strError;\n  undefined8 errorText;\n  long **extractedFiles;\n  void *buffer;\n  size_t bytesRead;\n  long offset;\n  long *currentFile;\n  undefined4 *localVariables;\n  ulong bytesRemaining;\n  size_t bytesToRead;\n  undefined4 localBuffer [6];\n  __mode_t fileMode;\n  ulong fileSize;\n  undefined8 accessTime;\n  undefined8 modificationTime;\n  \n  if (preserveDates != 0) {\n    localVariables = localBuffer;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *localVariables = 0;\n      localVariables = localVariables + 1;\n    }\n  }\n  extractedFiles = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    extractedFiles = archive;\n  }\n  errorCode = (*(code *)extractedFiles[1][0x3d])(archive,localBuffer);\n  if (errorCode != 0) {\n    currentFile = *archive;\n    errorText = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = fatal(errorText,currentFile);\n    errorText = posname;\n    if (errorCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorText);\n        if (comparisonResult == 0) {\n          if (errorCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(archive,0,0);\n  outputFile = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*archive);\n  }\n  else {\n    bytesRemaining = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = fileSize - bytesRemaining;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead,archive);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        errorText = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(errorText,archive);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*archive);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,outputFile);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        strError = strerror(*errnoLocation);\n        fatal(\"%s: %s\",outputFileName,strError);\n        goto LAB_00102c78;\n      }\n      bytesRemaining = bytesRemaining + bytesRead;\n    } while (bytesRemaining < fileSize);\n    free(buffer);\n  }\n  fclose(outputFile);\n  strError = outputFileName;\n  outputFile = (FILE *)0x0;\n  chmod(outputFileName,fileMode);\n  if (preserveDates != 0) {\n    accessTime = modificationTime;\n    set_times(strError,localBuffer);\n  }\n  outputFileName = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_and_write_from_archive_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_archive_001028ed",
                "param_1": "param",
                "param_2": "fileSize",
                "uVar1": "undefinedVar",
                "bVar2": "byteVar",
                "iVar3": "intVar",
                "sVar4": "sizeVar",
                "piVar5": "intPtr",
                "pcVar6": "charPtr1",
                "pcVar7": "charPtr2",
                "ppcVar8": "charPtrPtr",
                "uVar9": "undefinedVar2",
                "lVar10": "longVar1",
                "__s": "string1",
                "__s_00": "string2",
                "lVar11": "longVar2",
                "uVar12": "undefinedVar3",
                "uVar13": "ulongVar",
                "unaff_RBX": "RBX",
                "ppcVar14": "charPtrPtr1",
                "unaff_RBP": "RBP",
                "unaff_R12": "R12",
                "unaff_R13D": "R13D",
                "ppcVar15": "charPtrPtr2",
                "unaff_R14": "R14",
                "bVar16": "boolVar",
                "bVar17": "byteVar2",
                "param_7": "paramPtr",
                "param_9": "paramVar",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2",
                "bfd_fatal": "fatalError",
                "filename_cmp": "compareFilenames",
                "posname": "positionName",
                "bfd_openr": "openFile",
                "do_ar_emul_append_constprop_0": "arEmulAppend",
                "write_archive": "writeArchive",
                "output_filename": "outputFile",
                "make_thin_archive": "makeThinArchive",
                "libdeps_bfd": "libdepsBfd",
                "verbose": "isVerbose",
                "ar_truncate": "truncateArchive",
                "full_pathname": "fullPathname",
                "lbasename": "baseName",
                "xmalloc": "allocateMemory",
                "ar_emul_default_replace": "arEmulReplace",
                "stat": "getStat",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "getTranslation",
                "fatal": "handleFatalError",
                "free": "deallocateMemory",
                "get_pos_bfd": "getPosBfd",
                "ar_emul_default_append": "arEmulAppend"
            },
            "code": "\nundefined8 processArchive_001028ed(undefined8 param,long fileSize)\n\n{\n  undefined undefinedVar;\n  byte byteVar;\n  int intVar;\n  size_t sizeVar;\n  int *intPtr;\n  char *charPtr1;\n  char *charPtr2;\n  char **charPtrPtr;\n  undefined8 undefinedVar2;\n  long longVar1;\n  char *string1;\n  char *string2;\n  long longVar2;\n  undefined8 undefinedVar3;\n  ulong ulongVar;\n  char *RBX;\n  char **charPtrPtr1;\n  char **RBP;\n  char **R12;\n  uint R13D;\n  char **charPtrPtr2;\n  long R14;\n  bool boolVar;\n  byte byteVar2;\n  char **paramPtr;\n  undefined8 paramVar;\n  long stackVar1;\n  long stackVar2;\n  \n  byteVar2 = 0;\ncode_r0x001028ed:\n  fatalError(RBX,fileSize);\nLAB_001028f5:\n  undefinedVar3 = positionName;\n  if (R13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*R12 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar = compareFilenames(*(undefined8 *)*R12,undefinedVar3);\n      if (intVar == 0) break;\n      R12 = (char **)(*R12 + 0xf0);\n    }\n    if (R13D != 2) goto LAB_0010571f;\n    R12 = (char **)(*R12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar1 = *(long *)(R14 + 0xf0);\n  if (*(long *)(R14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar2 = longVar1;\n    longVar1 = *(long *)(longVar2 + 0xf0);\n  } while (longVar1 != 0);\n  R12 = (char **)(longVar2 + 0xf0);\n  RBX = *RBP;\n  if (libdepsBfd != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar = makeThinArchive;\n  R13D = (uint)(isVerbose != 0);\n  fileSize = openFile(RBX,target);\n  if (fileSize != 0) {\n    RBP = RBP + 1;\n    byteVar = arEmulAppend(R12,fileSize,R13D,undefinedVar);\n    paramVar._6_1_ = paramVar._6_1_ | byteVar;\n    charPtr1 = *RBP;\n    do {\n      if (charPtr1 == (char *)0x0) {\n        if (paramVar._6_1_ == 0) {\n          outputFile = 0;\n          return 0;\n        }\n        undefinedVar3 = writeArchive();\n        return undefinedVar3;\n      }\n      charPtrPtr1 = *(char ***)(R14 + 0xf0);\n      R12 = paramPtr;\n      if (paramVar._7_1_ == '\\0') {\n        charPtrPtr2 = paramPtr;\n        if (charPtrPtr1 != (char **)0x0) {\n          do {\n            if (fullPathname == '\\0') {\n              string1 = (char *)baseName(*charPtrPtr1);\n              charPtr2 = string1;\n              if (truncateArchive != '\\0') {\n                sizeVar = strlen(string1);\n                ulongVar = (ulong)*(byte *)(*(long *)(R14 + 8) + 0x1e);\n                if (ulongVar < sizeVar) {\n                  charPtr2 = (char *)allocateMemory(ulongVar + 1);\n                  longVar1 = *(long *)(R14 + 8);\n                  charPtr1 = charPtr2;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPtr1 = *string1;\n                    string1 = string1 + (ulong)byteVar2 * -2 + 1;\n                    charPtr1 = charPtr1 + (ulong)byteVar2 * -2 + 1;\n                  }\n                  charPtr2[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                charPtr1 = *RBP;\n                string1 = charPtr2;\n                if (fullPathname == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPtr1 = *RBP;\n              if (fullPathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n              string2 = (char *)baseName(charPtr1);\n              if (truncateArchive != '\\0') {\n                sizeVar = strlen(string2);\n                ulongVar = (ulong)*(byte *)(*(long *)(R14 + 8) + 0x1e);\n                charPtr1 = string2;\n                string1 = charPtr2;\n                if (ulongVar < sizeVar) {\n                  charPtr1 = (char *)allocateMemory(ulongVar + 1);\n                  longVar1 = *(long *)(R14 + 8);\n                  charPtr2 = charPtr1;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPtr2 = *string2;\n                    string2 = string2 + (ulong)byteVar2 * -2 + 1;\n                    charPtr2 = charPtr2 + (ulong)byteVar2 * -2 + 1;\n                  }\n                  charPtr1[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar = compareFilenames(string2,charPtr2);\n            }\n            else {\n              charPtr1 = *RBP;\n              string1 = *charPtrPtr1;\nLAB_00102980:\n              intVar = compareFilenames(charPtr1,string1);\n            }\n            if ((intVar == 0) && (charPtrPtr1[0x1c] != (char *)0x0)) {\n              if (newer_only != 0) {\n                intVar = getStat(*RBP,(getStat *)&stack0x000000b0);\n                if (intVar != 0) {\n                  intPtr = getErrnoLocation();\n                  if (*intPtr != 2) {\n                    fatalError(*RBP);\nLAB_00102b7e:\n                    charPtr1 = *charPtrPtr1;\n                    undefinedVar3 = getTranslation(0,\"internal getStat error on %s\",5);\n                    handleFatalError(undefinedVar3,charPtr1);\n                    deallocateMemory(RBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPtrPtr = (char **)charPtrPtr1[0x1d];\n                if ((char **)charPtrPtr1[0x1d] == (char **)0x0) {\n                  charPtrPtr = charPtrPtr1;\n                }\n                intVar = (**(code **)(charPtrPtr[1] + 0x1e8))(charPtrPtr1,&stack0x00000020);\n                if (intVar != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              undefinedVar3 = getPosBfd(paramPtr,2,*charPtrPtr1);\n              if (libdepsBfd == 0) {\nLAB_00102ae2:\n                charPtr1 = *RBP;\n                boolVar = isVerbose != 0;\n                longVar1 = openFile(charPtr1,target);\n                if (longVar1 == 0) {\n                  fatalError(charPtr1,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar = arEmulReplace(undefinedVar3,longVar1,boolVar);\n              }\n              else {\n                undefinedVar2 = normalize(*RBP);\n                intVar = compareFilenames(undefinedVar2,\"__.LIBDEP\");\n                if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar = arEmulReplace(undefinedVar3,libdepsBfd,isVerbose != 0);\n              }\n              if (byteVar != 0) {\n                *charPtrPtr2 = *(char **)(*charPtrPtr2 + 0xf0);\n                paramVar._6_1_ = byteVar;\n              }\n              goto LAB_0010577e;\n            }\n            charPtrPtr2 = charPtrPtr1 + 0x1e;\n            charPtrPtr1 = (char **)charPtrPtr1[0x1e];\n          } while (charPtrPtr1 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        R13D = postype;\n        if (postype != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        R13D = postype;\n        if (postype != 0) goto LAB_001028f5;\n        longVar1 = *(long *)(R14 + 0xf0);\n        if (*(long *)(R14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      RBX = *RBP;\n      if (libdepsBfd == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar3 = normalize(RBX);\n      intVar = compareFilenames(undefinedVar3,\"__.LIBDEP\");\n      if (intVar != 0) goto code_r0x0010574f;\n      byteVar = arEmulAppend(R12,libdepsBfd,isVerbose != 0,makeThinArchive);\n      paramVar._6_1_ = byteVar | paramVar._6_1_;\nLAB_0010577e:\n      RBP = RBP + 1;\n      charPtr1 = *RBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  RBX = *RBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0",
                "bfd_fatal",
                "replace_members.cold",
                "bfd_openr",
                "dcgettext",
                "ar_emul_default_replace",
                "ar_emul_default_append",
                "xmalloc",
                "fatal",
                "stat",
                "strlen",
                "filename_cmp",
                "get_pos_bfd",
                "__errno_location",
                "write_archive",
                "normalize",
                "FUN_00102943",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_archive_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "yy_init_buffer",
                "open_inarch",
                "simple_copy.constprop.0.cold",
                "ar_open",
                "print_contents",
                "set_times.cold",
                "get_file_size.cold",
                "replace_members.cold",
                "simple_copy.constprop.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "normalize.cold",
                "FUN_00105a68",
                "replace_members.cold",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "file_not_found_error_001025a0",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 fileNotFoundError_001025a0(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "strerror",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "file_not_found_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_user_permissions_0010284b",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getUserPermissions_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "get_user_permissions_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "start_main_wrapper_00105cc0",
                "param_1": "argv",
                "param_2": "argc",
                "auStack_8": "stack_frame"
            },
            "code": "\nvoid processEntry start_main_wrapper_00105cc0(undefined8 argv,undefined8 argc)\n\n{\n  undefined stack_frame [8];\n  \n  __libc_start_main(main,argc,&stack0x00000008,0,0,argv,stack_frame);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_wrapper_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_rb_and_assign_00102f08",
                "unaff_RBX": "rb_ptr",
                "unaff_R12": "temp_ptr"
            },
            "code": "\nundefined8 print_rb_and_assign_00102f08(void)\n\n{\n  undefined8 *rb_ptr;\n  undefined8 *temp_ptr;\n  \n  printf(\"a - %s\\n\",*rb_ptr);\n  rb_ptr[0x1e] = *temp_ptr;\n  *temp_ptr = rb_ptr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_rb_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "fileBundle",
                "param_2": "filePaths",
                "param_3": "useFullPath",
                "ppcVar1": "currentFile",
                "uVar2": "undefinedVar",
                "bVar3": "byteVar",
                "iVar4": "intVar",
                "sVar5": "sizeVar",
                "piVar6": "errorVar",
                "pcVar7": "currentPath",
                "pcVar8": "shortFileName",
                "uVar9": "normalizedPath",
                "pcVar10": "currentFile",
                "__s": "shortFileName",
                "lVar11": "currentElement",
                "lVar12": "nextElement",
                "uVar13": "result",
                "uVar14": "ulongVar",
                "ppcVar15": "currentFileElement",
                "ppcVar16": "nextFileElement",
                "uVar17": "posType",
                "ppcVar18": "previousFileElement",
                "bVar19": "boolVar",
                "local_15a": "archiveVar",
                "auStack_158": "temporaryStack",
                "lStack_100": "timestamp",
                "sStack_c8": "fileStatus"
            },
            "code": "\nundefined8 processFiles_00105570(long fileBundle,char **filePaths,char useFullPath)\n\n{\n  char **currentFile;\n  undefined undefinedVar;\n  byte byteVar;\n  int intVar;\n  size_t sizeVar;\n  int *errorVar;\n  char *currentPath;\n  char *shortFileName;\n  undefined8 normalizedPath;\n  char *currentFile;\n  char *shortFileName;\n  long currentElement;\n  long nextElement;\n  undefined8 result;\n  ulong ulongVar;\n  char **currentFileElement;\n  char **nextFileElement;\n  uint posType;\n  char **previousFileElement;\n  bool boolVar;\n  byte bVar20;\n  byte archiveVar;\n  undefined temporaryStack [88];\n  long timestamp;\n  stat fileStatus;\n  \n  bVar20 = 0;\n  currentFile = (char **)(fileBundle + 0xf0);\n  archiveVar = 0;\n  if (filePaths == (char **)0x0) {\n    result = initialize_output_file_00102943();\n    return result;\n  }\n  do {\n    currentFile = *filePaths;\njoined_r0x001055aa:\n    if (currentFile == (char *)0x0) {\n      if (archiveVar != 0) {\n        result = write_archive(fileBundle);\n        return result;\n      }\n      output_filename = 0;\n      return 0;\n    }\n    currentFileElement = *(char ***)(fileBundle + 0xf0);\n    nextFileElement = currentFile;\n    if (useFullPath != '\\0') {\nLAB_0010564c:\n      posType = postype;\n      if (postype != 0) goto LAB_001028f5;\n      nextElement = *(long *)(fileBundle + 0xf0);\n      if (*(long *)(fileBundle + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentElement = nextElement;\n        nextElement = *(long *)(currentElement + 0xf0);\n      } while (nextElement != 0);\n      nextFileElement = (char **)(currentElement + 0xf0);\n      currentFile = *filePaths;\n      do {\n        if (libdeps_bfd != 0) {\n          result = normalize(currentFile,fileBundle);\n          intVar = filename_cmp(result,\"__.LIBDEP\");\n          if (intVar == 0) {\n            byteVar = ar_emul_default_append(nextFileElement,libdeps_bfd,verbose != 0,make_thin_archive);\n            archiveVar = byteVar | archiveVar;\n            goto LAB_0010577e;\n          }\n          currentFile = *filePaths;\n        }\n        undefinedVar = make_thin_archive;\n        boolVar = verbose != 0;\n        nextElement = bfd_openr(currentFile,target);\n        if (nextElement != 0) {\n          filePaths = filePaths + 1;\n          byteVar = do_ar_emul_append_constprop_0(nextFileElement,nextElement,(uint)boolVar,undefinedVar);\n          archiveVar = archiveVar | byteVar;\n          currentFile = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(currentFile,0);\n        posType = (uint)boolVar;\nLAB_001028f5:\n        result = posname;\n        if (posType == 3) {\n          nextElement = *(long *)(fileBundle + 0xf0);\n          if (*(long *)(fileBundle + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*nextFileElement != (undefined8 *)0x0;\n              nextFileElement = (char **)(*nextFileElement + 0xf0)) {\n            intVar = filename_cmp(*(undefined8 *)*nextFileElement,result);\n            if (intVar == 0) {\n              if (posType == 2) {\n                nextFileElement = (char **)(*nextFileElement + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFile = *filePaths;\n      } while( true );\n    }\n    previousFileElement = currentFile;\n    if (currentFileElement == (char **)0x0) {\n      posType = postype;\n      if (postype == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname == '\\0') {\n      currentFile = (char *)lbasename(*currentFileElement);\n      shortFileName = currentFile;\n      if (ar_truncate != '\\0') {\n        sizeVar = strlen(currentFile);\n        ulongVar = (ulong)*(byte *)(*(long *)(fileBundle + 8) + 0x1e);\n        if (ulongVar < sizeVar) {\n          shortFileName = (char *)xmalloc(ulongVar + 1);\n          nextElement = *(long *)(fileBundle + 8);\n          currentPath = shortFileName;\n          for (ulongVar = (ulong)*(byte *)(nextElement + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *currentPath = *currentFile;\n            currentFile = currentFile + (ulong)bVar20 * -2 + 1;\n            currentPath = currentPath + (ulong)bVar20 * -2 + 1;\n          }\n          shortFileName[*(byte *)(nextElement + 0x1e)] = '\\0';\n        }\n        currentPath = *filePaths;\n        currentFile = shortFileName;\n        if (full_pathname == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentPath = *filePaths;\n      if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n      shortFileName = (char *)lbasename(currentPath);\n      if (ar_truncate != '\\0') {\n        sizeVar = strlen(shortFileName);\n        ulongVar = (ulong)*(byte *)(*(long *)(fileBundle + 8) + 0x1e);\n        currentPath = shortFileName;\n        currentFile = shortFileName;\n        if (ulongVar < sizeVar) {\n          currentPath = (char *)xmalloc(ulongVar + 1);\n          nextElement = *(long *)(fileBundle + 8);\n          shortFileName = currentPath;\n          for (ulongVar = (ulong)*(byte *)(nextElement + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n            *shortFileName = *shortFileName;\n            shortFileName = shortFileName + (ulong)bVar20 * -2 + 1;\n            shortFileName = shortFileName + (ulong)bVar20 * -2 + 1;\n          }\n          currentPath[*(byte *)(nextElement + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      intVar = filename_cmp(shortFileName,shortFileName);\n      if (intVar == 0) goto LAB_00102993;\nLAB_00105639:\n      previousFileElement = currentFileElement + 0x1e;\n      currentFileElement = (char **)currentFileElement[0x1e];\n      if (currentFileElement == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentPath = *filePaths;\n    currentFile = *currentFileElement;\nLAB_00102980:\n    intVar = filename_cmp(currentPath,currentFile);\n    if (intVar != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentFileElement[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (newer_only != 0) {\n      intVar = stat(*filePaths,&fileStatus);\n      if (intVar != 0) {\n        errorVar = __errno_location();\n        if (*errorVar != 2) {\n          bfd_fatal(*filePaths);\nLAB_00102b7e:\n          currentFile = *currentFileElement;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          fatal(result,currentFile);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      nextFileElement = (char **)currentFileElement[0x1d];\n      if ((char **)currentFileElement[0x1d] == (char **)0x0) {\n        nextFileElement = currentFileElement;\n      }\n      intVar = (**(code **)(nextFileElement[1] + 0x1e8))(currentFileElement,temporaryStack);\n      if (intVar != 0) goto LAB_00102b7e;\n      if (fileStatus.st_mtim.tv_sec <= timestamp) goto LAB_0010577e;\n    }\n    result = get_pos_bfd(currentFile,2,*currentFileElement);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      currentFile = *filePaths;\n      boolVar = verbose != 0;\n      nextElement = bfd_openr(currentFile,target);\n      if (nextElement == 0) {\n        bfd_fatal(currentFile,0);\n        goto LAB_00102b3e;\n      }\n      byteVar = ar_emul_default_replace(result,nextElement,boolVar);\n    }\n    else {\n      normalizedPath = normalize(*filePaths,fileBundle);\n      intVar = filename_cmp(normalizedPath,\"__.LIBDEP\");\n      if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteVar = ar_emul_default_replace(result,libdeps_bfd,verbose != 0);\n    }\n    if (byteVar != 0) {\n      *previousFileElement = *(char **)(*previousFileElement + 0xf0);\n      archiveVar = byteVar;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "smart_rename.constprop.0.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entries_in_archive_0010285f",
                "__format": "formatString",
                "lVar2": "entry",
                "plVar3": "nextEntry",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "callback",
                "unaff_R12": "archivePtr",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "nameCounter"
            },
            "code": "\n\n\nvoid printMissingEntriesInArchive_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long entry;\n  long *nextEntry;\n  undefined8 entryName;\n  long *currentEntry;\n  code *callback;\n  long archivePtr;\n  int entryCount;\n  undefined8 *entryNames;\n  int nameCounter;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePtr + 0xf0);\n  nameCounter = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entry = *currentEntry;\n      if (entry == 0) {\n        nextEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          nextEntry = currentEntry;\n        }\n        (**(code **)(nextEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) || (entry = normalize(), entry != 0)) {\n        entryName = normalize(*entryNames);\n        iVar1 = filename_cmp(entryName,entry);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (nameCounter = nameCounter + 1,\n            nameCounter == counted_name_counter)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callback)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_missing_entries_in_archive_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_message_0010394a",
                "param_1": "outputToFile",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsageMessage_0010394a(uint outputToFile)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (outputToFile != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  list_supported_targets(program_name,outputStream);\n  if (outputToFile != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToFile ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "list_supported_targets",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_message_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_if_one_00105bb0"
            },
            "code": "\nundefined8 check_if_one_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_if_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_00107640"
            },
            "code": "\nundefined8 initialize_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "extract_file.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "handle_non_interactive_mode_0010315d",
                "interactive": "isInteractive",
                "xexit": "exitWithError"
            },
            "code": "\nvoid handleNonInteractiveMode_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    exitWithError(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "handle_non_interactive_mode_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_description_00107890",
                "param_1": "output_stream",
                "_stdout": "stdout",
                "verbose": "is_verbose",
                "display_offsets": "should_display_offsets"
            },
            "code": "\n\n\nvoid print_arelt_description_00107890(undefined8 output_stream)\n\n{\n  print_arelt_descr(stdout,output_stream,is_verbose != 0,should_display_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "copy_and_print_00103172",
                "param_1": "source_ptr",
                "param_2": "destination_ptr",
                "param_3": "should_print",
                "param_4": "extra_data",
                "uVar1": "source_value",
                "auVar2": "result",
                "auVar2._1_7_": "result_byte",
                "auVar2[0]": "result_flag",
                "auVar2._8_8_": "result_extra_data"
            },
            "code": "\nundefined  [16]\ncopy_and_print_00103172(undefined8 *source_ptr,undefined8 *destination_ptr,char should_print,undefined8 extra_data)\n\n{\n  undefined8 source_value;\n  undefined result [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*destination_ptr);\n  }\n  source_value = *source_ptr;\n  destination_ptr[0x1e] = source_value;\n  result_byte = (undefined7)((ulong)source_value >> 8);\n  result_flag = 1;\n  *source_ptr = destination_ptr;\n  result_extra_data = extra_data;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "copy_and_print_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "yy_buffer_stack": "bufferStack",
                "yy_buffer_stack_top": "bufferStackTop",
                "puVar1": "currentBuffer",
                "yy_n_chars": "numChars",
                "yy_c_buf_p": "currentBufferPtr",
                "yytext": "bufferText",
                "yyin": "input",
                "yy_hold_char": "holdChar"
            },
            "code": "\nvoid initializeBuffer_001030ed(void)\n\n{\n  undefined8 *currentBuffer;\n  \n  currentBuffer = *(undefined8 **)(bufferStack + bufferStackTop * 8);\n  numChars = *(undefined4 *)((long)currentBuffer + 0x1c);\n  currentBufferPtr = (undefined *)currentBuffer[2];\n  bufferText = currentBufferPtr;\n  input = *currentBuffer;\n  holdChar = *currentBufferPtr;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yy_init_buffer",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "sourcePath",
                "param_2": "destinationPath",
                "param_3": "filePermissions",
                "param_4": "errorCode",
                "uVar1": "result",
                "piVar2": "errLocation",
                "pcVar3": "errorMessage",
                "uVar4": "localizedErrorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00105bc0(char *sourcePath,char *destinationPath,undefined4 filePermissions,undefined8 errorCode)\n\n{\n  uint result;\n  int *errLocation;\n  char *errorMessage;\n  undefined8 localizedErrorMessage;\n  ulong unlinkResult;\n  undefined returnValue [16];\n  \n  if (destinationPath == sourcePath) {\n    unlinkResult = 0;\n  }\n  else {\n    result = simple_copy_constprop_0(filePermissions);\n    unlinkResult = (ulong)result;\n    if (result != 0) {\n      errLocation = __errno_location();\n      errorMessage = strerror(*errLocation);\n      localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(localizedErrorMessage,destinationPath,errorMessage);\n    }\n    unlink(sourcePath);\n  }\n  returnValue._8_8_ = errorCode;\n  returnValue._0_8_ = unlinkResult;\n  return returnValue;\n}\n\n",
            "called": [
                "simple_copy.constprop.0",
                "smart_rename.constprop.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "write_archive.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_write_archive_00107650",
                "param_1": "file",
                "lVar2": "fileSize",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkAndWriteArchive_00107650(undefined8 file)\n\n{\n  undefined8 result;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    result = 1;\n  }\n  else {\n    write_armap = 1;\n    fileSize = open_inarch(file,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "xexit",
                "open_inarch",
                "write_archive",
                "ranlib_only.cold",
                "get_file_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_write_archive_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_report_error_00102f1e",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "returnValue",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyFileAndReportError_00102f1e(void)\n\n{\n  int *errnoPointer;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoPointer = __errno_location();\n  strerror(*errnoPointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  returnValue._0_8_ = fileSize & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "__errno_location",
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_and_report_error_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "handle_time_setting_error_00102fd7",
                "piVar1": "errnoPtr",
                "uVar2": "localizedErrorMessage"
            },
            "code": "\nvoid handleTimeSettingError_00102fd7(void)\n\n{\n  int *errnoPtr;\n  undefined8 localizedErrorMessage;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(localizedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "strerror",
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "handle_time_setting_error_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyensure_buffer_stack",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "do_ar_emul_append.constprop.0",
                "ar_open"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "initialize_program_00105d60",
                "completed_0": "isProgramInitialized"
            },
            "code": "\nvoid initializeProgram_00105d60(void)\n\n{\n  if (isProgramInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  isProgramInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "versionString",
                "pcVar1": "copyRightString"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 versionString)\n\n{\n  char *copyRightString;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyRightString = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightString);\n  copyRightString = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightString);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "traverse_archives_00105480",
                "param_1": "archiveHeader",
                "param_2": "callbackFunction",
                "param_3": "entriesArray",
                "param_4": "arrayLength",
                "__format": "messageFormat",
                "lVar2": "currentHeader",
                "plVar3": "firstEntry",
                "uVar4": "normalizedEntry",
                "plVar5": "currentEntry",
                "local_cc": "counter",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid traverseArchives_00105480(long archiveHeader,code *callbackFunction,undefined8 *entriesArray,int arrayLength)\n\n{\n  int iVar1;\n  char *messageFormat;\n  long currentHeader;\n  long *firstEntry;\n  undefined8 normalizedEntry;\n  long *currentEntry;\n  int counter;\n  undefined buffer [152];\n  \n  currentHeader = *(long *)(archiveHeader + 0xf0);\n  if (arrayLength == 0) {\n    for (; currentHeader != 0; currentHeader = *(long *)(currentHeader + 0xf0)) {\n      (*callbackFunction)(currentHeader);\n    }\n  }\n  else {\n    for (; currentHeader != 0; currentHeader = *(long *)(currentHeader + 0xf0)) {\n      *(undefined4 *)(currentHeader + 0xac) = 0;\n    }\n    do {\n      currentEntry = *(long **)(archiveHeader + 0xf0);\n      counter = 0;\n      for (; currentEntry != (long *)0x0; currentEntry = (long *)currentEntry[0x1e]) {\n        if (*(int *)((long)currentEntry + 0xac) == 0) {\n          currentHeader = *currentEntry;\n          if (currentHeader == 0) {\n            firstEntry = (long *)currentEntry[0x1d];\n            if ((long *)currentEntry[0x1d] == (long *)0x0) {\n              firstEntry = currentEntry;\n            }\n            (**(code **)(firstEntry[1] + 0x1e8))(currentEntry,buffer);\n          }\n          else if (((*(byte *)(archiveHeader + 0x49) & 0x10) == 0) ||\n                  (currentHeader = normalize(currentHeader,archiveHeader), currentHeader != 0)) {\n            normalizedEntry = normalize(*entriesArray,archiveHeader);\n            iVar1 = filename_cmp(normalizedEntry,currentHeader);\n            if ((iVar1 == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (counter = counter + 1, counter == counted_name_counter)))) {\n              (*callbackFunction)();\n              *(undefined4 *)((long)currentEntry + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedEntry = *entriesArray;\n      messageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,messageFormat,normalizedEntry);\nLAB_0010553e:\n      entriesArray = entriesArray + 1;\n      arrayLength = arrayLength + -1;\n    } while (arrayLength != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "normalize",
                "map_over_members.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "traverse_archives_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "do_ar_emul_append.constprop.0",
                "ar_open"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "parameters",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archive",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "totalBytesExpected",
                "auStack_b8": "stackBuffer",
                "local_88": "archiveSize"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *parameters)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errnoPointer;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong totalBytesExpected;\n  undefined stackBuffer [48];\n  ulong archiveSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive = (undefined8 *)parameters[0x1d];\n  if ((undefined8 *)parameters[0x1d] == (undefined8 *)0x0) {\n    archive = parameters;\n  }\n  result = (**(code **)(archive[1] + 0x1e8))(parameters,stackBuffer);\n  if (result == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*parameters);\n    }\n    totalBytesRead = 0;\n    bfd_seek(parameters,0,0);\n    goto LAB_00103afd;\n  }\n  parameters = (undefined8 *)*parameters;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    fatal(errorMessage,parameters);\n    archiveSize = totalBytesExpected;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errnoPointer = __errno_location();\n        errorString = strerror(*errnoPointer);\n        fatal(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (archiveSize <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = archiveSize - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,parameters);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    parameters = *(undefined8 **)parameters[0x1d];\n    totalBytesExpected = archiveSize;\n  } while( true );\n}\n\n",
            "called": [
                "fwrite",
                "xmalloc",
                "fatal",
                "bfd_seek",
                "__errno_location",
                "strerror",
                "printf",
                "free",
                "dcgettext",
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_output_archive_001058b0",
                "param_1": "parameters",
                "cVar1": "result",
                "uVar2": "flags",
                "iVar3": "file_descriptor",
                "uVar4": "temp_name",
                "__format": "format_string",
                "__ptr": "duplicated_str",
                "__stream": "output_file",
                "ppcVar5": "output_bfd",
                "uStack0000000000000020": "mode",
                "in_stack_00000028": "file_permissions",
                "in_stack_00000038": "file_size",
                "local_3c": "error_code",
                "uStack_33": "first_char",
                "cStack_32": "second_char",
                "cStack_31": "third_char"
            },
            "code": "\nvoid write_output_archive_001058b0(undefined8 *parameters)\n\n{\n  char result;\n  uint flags;\n  int file_descriptor;\n  undefined8 temp_name;\n  char *format_string;\n  void *duplicated_str;\n  FILE *output_file;\n  char **output_bfd;\n  uint mode;\n  uint file_permissions;\n  undefined8 file_size;\n  int error_code [2];\n  undefined first_char;\n  char second_char;\n  char third_char;\n  \n  temp_name = parameters[0x1e];\n  error_code[0] = -1;\n  duplicated_str = (void *)xstrdup(*parameters);\n  output_file = (FILE *)make_tempname(duplicated_str,error_code);\n  file_descriptor = error_code[0];\n  if (output_file != (FILE *)0x0) {\n    output_filename = output_file;\n    output_bfd = (char **)bfd_fdopenw(output_file,*(undefined8 *)parameters[1],error_code[0]);\n    if (output_bfd != (char **)0x0) {\n      output_bfd = output_bfd;\n      bfd_set_format(output_bfd,2);\n      flags = (~write_armap >> 0x1f) << 3 | *(byte *)((long)output_bfd + 0x49) & 0xfffffff7;\n      *(char *)((long)output_bfd + 0x49) = (char)flags;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)output_bfd + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(output_bfd,temp_name);\n        if (result != '\\0') break;\n        flags = bfd_fatal(duplicated_str);\nLAB_00102d37:\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x100000;\n      }\n      file_descriptor = dup(file_descriptor);\n      result = bfd_close(output_bfd);\n      if (result == '\\0') {\n        bfd_fatal(duplicated_str);\n        format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,format_string);\n        flags = mode & 0xf000;\n        if (flags == 0x4000) {\n          first_char = 100;\n        }\n        else if (flags == 0xa000) {\n          first_char = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          first_char = 0x62;\n        }\n        else if (flags == 0x2000) {\n          first_char = 99;\n        }\n        else if (flags == 0xc000) {\n          first_char = 0x73;\n        }\n        else {\n          first_char = 0x70;\n          if (flags != 0x1000) {\n            first_char = 0x2d;\n          }\n        }\n        second_char = (-((_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        third_char = (-((_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_file,\"%s %ld/%ld %6lu %s \",&second_char,_mode >> 0x20,\n                (ulong)file_permissions,file_size,&stack0xffffffffffffffd8,\n                _mode & 0xffffffff);\n        fputs(*output_bfd,output_file);\n        if ((char)parameters != '\\0') {\n          if ((*(byte *)((long)output_bfd + 0x49) & 0x10) == 0) {\n            if (output_bfd[0xb] != (char *)0x0) {\n              fprintf(output_file,\" 0x%lx\");\n            }\n          }\n          else if (output_bfd[0xc] != (char *)0x0) {\n            fprintf(output_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_file);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(parameters);\n      file_descriptor = smart_rename_constprop_0(output_file,duplicated_str,file_descriptor);\n      if (file_descriptor == 0) {\n        free(duplicated_str);\n        free(output_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(file_descriptor);\n    bfd_fatal(duplicated_str);\n  }\n  temp_name = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(temp_name);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "make_tempname",
                "close",
                "bfd_fatal",
                "bfd_fdopenw",
                "dcgettext",
                "bfd_set_format",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "replace_members.cold",
                "main"
            ],
            "imported": false,
            "current_name": "write_output_archive_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_output_file_00105a20",
                "param_1": "outputPath",
                "pcVar1": "outputDir",
                "pcVar2": "current",
                "uVar3": "baseName",
                "uVar4": "errorMsg",
                "pFVar5": "filePtr",
                "sVar6": "outputDirLength"
            },
            "code": "\nvoid extractOutputFile_00105a20(char *outputPath)\n\n{\n  char *outputDir;\n  char *current;\n  undefined8 baseName;\n  undefined8 errorMsg;\n  FILE *filePtr;\n  size_t outputDirLength;\n  \n  outputDir = output_dir;\n  output_filename = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    outputDir = output_filename;\n    errorMsg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(errorMsg,outputDir,baseName);\n    output_filename = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((output_dir != (char *)0x0) && (outputDirLength = strlen(output_dir), outputDirLength != 0)) {\n        if (outputDir[outputDirLength - 1] == '/') {\n          output_filename = (char *)concat(outputDir,output_filename,0);\n        }\n        else {\n          output_filename = (char *)concat(outputDir,&DAT_00108260,output_filename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",output_filename);\n      }\n      filePtr = fopen(output_filename,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(output_filename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current = outputPath;\n    if ((*outputPath == '.') && (current = outputPath + 1, outputPath[1] == '.')) {\n      current = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current != '\\0' && (*current != '/')); current = current + 1) {\n    }\n    for (; outputPath = current, *current == '/'; current = current + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_output_file_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_error_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPtr",
                "iVar1": "errorValue"
            },
            "code": "\nundefined8 closeFileAndSetError_00102f55(void)\n\n{\n  int errorValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  errorValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = errorValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_name_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "status",
                "pcVar2": "path_separator_ptr",
                "lVar3": "path_length",
                "lVar4": "index",
                "lVar5": "last_path_separator_index",
                "pcVar6": "allocated_memory",
                "bVar7": "is_path_separator",
                "auVar8": "result_buffer"
            },
            "code": "\nundefined  [16] extract_file_name_001057a0(char *file_path,int *file_descriptor,undefined8 unused1,undefined8 unused2)\n\n{\n  int status;\n  char *path_separator_ptr;\n  long path_length;\n  long index;\n  long last_path_separator_index;\n  char *allocated_memory;\n  byte is_path_separator;\n  undefined result_buffer [16];\n  \n  is_path_separator = 0;\n  path_separator_ptr = strrchr(file_path,0x2f);\n  if (path_separator_ptr == (char *)0x0) {\n    path_separator_ptr = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    last_path_separator_index = (long)path_separator_ptr - (long)file_path;\n    path_separator_ptr = (char *)xmalloc(last_path_separator_index + 0xb);\n    path_length = last_path_separator_index + 1;\n    allocated_memory = path_separator_ptr;\n    for (index = last_path_separator_index; index != 0; index = index + -1) {\n      *allocated_memory = *file_path;\n      file_path = file_path + (ulong)is_path_separator * -2 + 1;\n      allocated_memory = allocated_memory + (ulong)is_path_separator * -2 + 1;\n    }\n    path_separator_ptr[last_path_separator_index] = '/';\n  }\n  *(undefined8 *)(path_separator_ptr + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(path_separator_ptr + path_length) + 8) = 0;\n  status = mkstemp(path_separator_ptr);\n  if (status == -1) {\n    allocated_memory = (char *)0x0;\n    free(path_separator_ptr);\n  }\n  else {\n    *file_descriptor = status;\n    allocated_memory = path_separator_ptr;\n  }\n  result_buffer._8_8_ = unused2;\n  result_buffer._0_8_ = allocated_memory;\n  return result_buffer;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr",
                "mkstemp",
                "make_tempname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "extract_file_name_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "print_contents",
                "set_times.cold",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "open_inarch",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "ar_emul_default_usage",
                "main",
                "yyparse.isra.0",
                "map_over_list",
                "ar_open",
                "list_matching_formats",
                "map_over_members.cold",
                "print_arelt_descr.cold",
                "yy_fatal_error",
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "handle_exit_00107c10"
            },
            "code": "\nvoid handleExit_00107c10(void)\n\n{\n  bfd_nonfatal();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "write_archive",
                "replace_members.cold",
                "write_archive.cold",
                "main"
            ],
            "imported": false,
            "current_name": "handle_exit_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "list_matching_formats",
                "prompt",
                "bfd_nonfatal.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_exit_functions_00107cc0",
                "plVar4": "exitFunctionList",
                "uVar5": "numFunctions",
                "lVar1": "functionIndex",
                "lVar2": "previousIndex",
                "lVar3": "currentIndex"
            },
            "code": "\nvoid executeExitFunctions_00107cc0(void)\n\n{\n  long functionIndex;\n  long previousIndex;\n  long currentIndex;\n  long *exitFunctionList;\n  uint numFunctions;\n  \n  exitFunctionList = (long *)xatexit_head;\n  if (xatexit_head != (undefined *)0x0) {\n    do {\n      numFunctions = *(int *)(exitFunctionList + 1) - 1;\n      if (-1 < (int)numFunctions) {\n        functionIndex = (long)(int)numFunctions;\n        numFunctions = numFunctions & 7;\n        (*(code *)exitFunctionList[functionIndex + 2])();\n        previousIndex = functionIndex + -1;\n        if (-1 < (int)previousIndex) {\n          currentIndex = previousIndex;\n          if (numFunctions != 0) {\n            if (numFunctions != 1) {\n              if (numFunctions != 2) {\n                if (numFunctions != 3) {\n                  if (numFunctions != 4) {\n                    if (numFunctions != 5) {\n                      if (numFunctions != 6) {\n                        (*(code *)exitFunctionList[functionIndex + 1])();\n                        previousIndex = functionIndex + -2;\n                      }\n                      (*(code *)exitFunctionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)exitFunctionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)exitFunctionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)exitFunctionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)exitFunctionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)exitFunctionList[previousIndex + 2])();\n            currentIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)exitFunctionList[currentIndex + 2])();\n            functionIndex = currentIndex + -1;\n            (*(code *)exitFunctionList[currentIndex + 1])();\n            (*(code *)exitFunctionList[currentIndex])();\n            (*(code *)exitFunctionList[functionIndex])();\n            (*(code *)exitFunctionList[currentIndex + -2])();\n            (*(code *)exitFunctionList[currentIndex + -3])();\n            (*(code *)exitFunctionList[currentIndex + -4])();\n            (*(code *)exitFunctionList[currentIndex + -5])();\n            currentIndex = currentIndex + -8;\n          } while (-1 < (int)functionIndex + -7);\n        }\n      }\nLAB_00107d96:\n      exitFunctionList = (long *)*exitFunctionList;\n    } while (exitFunctionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_const_property_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid appendConstProperty_00105ae0(undefined8 input1,undefined8 input2,undefined param3,undefined param4)\n\n{\n  do_ar_emul_append_constprop_0(input1,input2,param3,param4);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_const_property_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "in_AL": "boolean_flag",
                "local_d8": "result_counter",
                "local_d4": "stack_size",
                "local_d0": "stack_pointer",
                "local_c8": "local_stack",
                "local_b8": "local_buffer",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "input_1_copy",
                "local_78": "input_2_copy",
                "local_68": "input_3_copy",
                "local_58": "input_4_copy",
                "local_48": "input_5_copy",
                "local_38": "input_6_copy",
                "local_28": "input_7_copy",
                "local_18": "input_8_copy"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char boolean_flag;\n  undefined4 result_counter;\n  undefined4 stack_size;\n  undefined *stack_pointer;\n  undefined *local_stack;\n  undefined local_buffer [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (boolean_flag != '\\0') {\n    input_1_copy = input_1;\n    input_2_copy = input_2;\n    input_3_copy = input_3;\n    input_4_copy = input_4;\n    input_5_copy = input_5;\n    input_6_copy = input_6;\n    input_7_copy = input_7;\n    input_8_copy = input_8;\n  }\n  stack_pointer = &stack0x00000008;\n  result_counter = 8;\n  local_stack = local_buffer;\n  stack_size = 0x30;\n  param_10 = input_10;\n  param_11 = input_11;\n  param_12 = input_12;\n  param_13 = input_13;\n  param_14 = input_14;\n  report(param_9,&result_counter);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "print_contents",
                "replace_members.cold",
                "extract_file.cold",
                "main"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentPtr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentPtr = targetList;\n  while( true ) {\n    currentTarget = *currentPtr;\n    currentPtr = currentPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "free",
                "dcgettext",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_path_00105830",
                "param_1": "inputPath",
                "param_2": "structAddress",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "__s": "baseName",
                "uVar3": "maxLength",
                "pcVar4": "destPath",
                "bVar5": "flag",
                "auVar6": "returnValue",
                "lVar1": "address",
                "sVar2": "baseNameLength"
            },
            "code": "\nundefined  [16] extractPath_00105830(char *inputPath,long structAddress,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long address;\n  size_t baseNameLength;\n  char *baseName;\n  ulong maxLength;\n  char *destPath;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  if (full_pathname == '\\0') {\n    baseName = (char *)lbasename();\n    inputPath = baseName;\n    if ((ar_truncate != '\\0') && (structAddress != 0)) {\n      baseNameLength = strlen(baseName);\n      maxLength = (ulong)*(byte *)(*(long *)(structAddress + 8) + 0x1e);\n      if (maxLength < baseNameLength) {\n        inputPath = (char *)xmalloc(maxLength + 1);\n        address = *(long *)(structAddress + 8);\n        destPath = inputPath;\n        for (maxLength = (ulong)*(byte *)(address + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n          *destPath = *baseName;\n          baseName = baseName + (ulong)flag * -2 + 1;\n          destPath = destPath + (ulong)flag * -2 + 1;\n        }\n        inputPath[*(byte *)(address + 0x1e)] = '\\0';\n      }\n    }\n  }\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = inputPath;\n  return returnValue;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "replace_members.cold",
                "map_over_members",
                "main"
            ],
            "imported": false,
            "current_name": "extract_path_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorString",
                "in_R10": "unknownArgument"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorMessage)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 unknownArgument;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorMessage,errorString,unknownArgument);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorString,unknownArgument);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr.cold",
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "initialize_output_file_00102e57",
                "pFVar1": "filePointer",
                "output_filename": "concatenatedFileName"
            },
            "code": "\nvoid initializeOutputFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  concatenatedFileName = (char *)concat();\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",concatenatedFileName);\n  }\n  filePointer = fopen(concatenatedFileName,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(concatenatedFileName);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "initialize_output_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "check_format",
                "param_4": "append_constprop",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_archived_files_00105af0(long *file_list,long archive_file,char check_format,char append_constprop)\n\n{\n  char is_valid_format;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (append_constprop == '\\0') {\n    if (check_format != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive_file,2);\n    if (is_valid_format != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        result = process_archived_files_00105af0(file_list,archived_file,check_format,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (check_format != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file",
                "do_ar_emul_append.constprop.0",
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "ar_emul_default_append",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "replace_members.cold",
                "get_file_size",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_shift_00102ba1",
                "unaff_RBP": "pointerToFree",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] freeAndShift_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *pointerToFree;\n  ulong returnAddress;\n  \n  free(pointerToFree);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "free_and_shift_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "filePointer",
                "unaff_R12": "isArchive",
                "unaff_R13": "filename",
                "unaff_R14D": "output_bfd",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "fileSize",
                "in_stack_00000070": "lastModification",
                "in_stack_00000080": "timestamp",
                "bVar1": "fatalError",
                "cVar2": "archiveResult",
                "iVar3": "renameResult",
                "__format": "errorFormat",
                "uVar4": "modeFlag",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "readPermission",
                "cStack0000000000000017": "writePermission",
                "in_stack_00000018": "executePermission",
                "cStack0000000000000019": "ownerReadPermission",
                "cStack000000000000001a": "ownerWritePermission",
                "cStack000000000000001b": "ownerExecutePermission",
                "cStack000000000000001c": "groupReadPermission",
                "cStack000000000000001d": "groupWritePermission",
                "cStack000000000000001e": "groupExecutePermission"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte fatalError;\n  char archiveResult;\n  int renameResult;\n  char *errorFormat;\n  uint modeFlag;\n  char **fileInfo;\n  FILE *filePointer;\n  long isArchive;\n  void *filename;\n  int output_bfd;\n  undefined fileTypeChar;\n  char readPermission;\n  char writePermission;\n  char executePermission;\n  char ownerReadPermission;\n  char ownerWritePermission;\n  char ownerExecutePermission;\n  char groupReadPermission;\n  char groupWritePermission;\n  char groupExecutePermission;\n  undefined uStack000000000000001f;\n  uint fileMode;\n  uint fileSize;\n  uint lastModification;\n  undefined8 timestamp;\n  \n  do {\n    fatalError = bfd_fatal();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(isArchive + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = fatalError | 0x10;\n    }\n    archiveResult = bfd_set_archive_head();\n  } while (archiveResult == '\\0');\n  dup(output_bfd);\n  archiveResult = bfd_close();\n  if (archiveResult != '\\0') {\n    output_bfd = 0;\n    output_filename = 0;\n    bfd_close();\n    renameResult = smart_rename_constprop_0();\n    if (renameResult == 0) {\n      free(filename);\n      free(filePointer);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  errorFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorFormat);\n  modeFlag = fileMode & 0xf000;\n  if (modeFlag == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (modeFlag == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (modeFlag == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (modeFlag == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (modeFlag == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (modeFlag != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  readPermission = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermission = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  executePermission = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  ownerReadPermission = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  ownerWritePermission = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  ownerExecutePermission = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  groupReadPermission = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  groupWritePermission = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  groupExecutePermission = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (executePermission == 'x') {\n      executePermission = 's';\n    }\n    else {\n      executePermission = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (ownerExecutePermission == 'x') {\n      ownerExecutePermission = 's';\n    }\n    else {\n      ownerExecutePermission = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (groupExecutePermission == 'x') {\n      groupExecutePermission = 't';\n    }\n    else {\n      groupExecutePermission = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(filePointer,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSize,\n          (ulong)lastModification,timestamp,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileInfo,filePointer);\n  if ((char)isArchive != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(filePointer,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(filePointer,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePointer);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_fatal",
                "dup",
                "smart_rename.constprop.0",
                "bfd_close",
                "bfd_set_archive_head",
                "free",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "print_contents",
                "prompt",
                "FUN_00105a68",
                "yyerror.constprop.0",
                "print_version",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "fprintf": "print",
                "_stderr": "standardError",
                "exit": "exitProgram"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  print(standardError,\"%s\\n\",errorMessage);\n                    \n  exitProgram(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyensure_buffer_stack",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "replace_members.cold",
                "normalize",
                "main",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_archive_00102c25",
                "param_7": "paramArray",
                "unaff_RBX": "archive",
                "iVar1": "comparisonResult",
                "plVar8": "currentFile",
                "uVar5": "errorMessage",
                "puVar9": "parameterPointer",
                "pplVar6": "pointerToPointer",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "iVar2": "returnValue",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToProcess",
                "param_11": "permissions",
                "param_12": "fileSize",
                "output_file": "outputFile",
                "output_filename": "filename",
                "pcVar4": "strError",
                "piVar3": "errnoLocation",
                "preserve_dates": "preserveDates"
            },
            "code": "\nlong * extractArchive_00102c25(void)\n\n{\n  int comparisonResult;\n  int returnValue;\n  int *errnoLocation;\n  char *strError;\n  undefined8 errorMessage;\n  long **pointerToPointer;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long **archive;\n  long *currentFile;\n  undefined4 *parameterPointer;\n  ulong bytesProcessed;\n  size_t bytesToProcess;\n  undefined4 *paramArray;\n  __mode_t permissions;\n  ulong fileSize;\n  \n  parameterPointer = paramArray;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *parameterPointer = 0;\n    parameterPointer = parameterPointer + 1;\n  }\n  pointerToPointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    pointerToPointer = archive;\n  }\n  returnValue = (*(code *)pointerToPointer[1][0x3d])();\n  if (returnValue != 0) {\n    currentFile = *archive;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    returnValue = fatal(errorMessage,currentFile);\n    errorMessage = posname;\n    if (returnValue == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (comparisonResult == 0) {\n          if (returnValue != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek();\n  outputFile = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*archive);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToProcess = fileSize - bytesProcessed;\n      if (0x2000 < bytesToProcess) {\n        bytesToProcess = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToProcess);\n      if (bytesToProcess != bytesRead) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(errorMessage,archive);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*archive);\n      }\n      bytesToProcess = fwrite(buffer,1,bytesRead,outputFile);\n      if (bytesToProcess != bytesRead) {\n        errnoLocation = __errno_location();\n        strError = strerror(*errnoLocation);\n        fatal(\"%s: %s\",filename,strError);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < fileSize);\n    free(buffer);\n  }\n  fclose(outputFile);\n  strError = filename;\n  outputFile = (FILE *)0x0;\n  chmod(filename,permissions);\n  if (preserveDates != 0) {\n    set_times(strError,paramArray);\n  }\n  filename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "open_output_file.isra.0",
                "strerror",
                "fclose",
                "set_times",
                "dcgettext",
                "bfd_bread",
                "chmod",
                "fwrite",
                "fatal",
                "xmalloc",
                "bfd_seek",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_archive_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "bfd_nonfatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "stringLength",
                "puVar3": "outputString",
                "uVar4": "maxCharacters",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "basePointer",
                "puVar5": "outputPointer",
                "bVar6": "byteValue",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16] reverseString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t stringLength;\n  undefined *outputString;\n  ulong maxCharacters;\n  undefined *sourcePointer;\n  long basePointer;\n  undefined *outputPointer;\n  byte byteValue;\n  undefined returnValue [16];\n  undefined8 unaff_retaddr;\n  \n  byteValue = 0;\n  stringLength = strlen(inputString);\n  maxCharacters = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  outputString = sourcePointer;\n  if (maxCharacters < stringLength) {\n    outputString = (undefined *)xmalloc(maxCharacters + 1);\n    lVar1 = *(long *)(basePointer + 8);\n    outputPointer = outputString;\n    for (maxCharacters = (ulong)*(byte *)(lVar1 + 0x1e); maxCharacters != 0; maxCharacters = maxCharacters - 1) {\n      *outputPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)byteValue * -2 + 1;\n      outputPointer = outputPointer + (ulong)byteValue * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = unaff_retaddr;\n  returnValue._0_8_ = outputString;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "reverse_string_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "ar_open",
                "write_archive",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_list",
                "replace_members.cold",
                "map_over_members",
                "get_pos_bfd.cold",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "simple_copy.constprop.0",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 110501,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}