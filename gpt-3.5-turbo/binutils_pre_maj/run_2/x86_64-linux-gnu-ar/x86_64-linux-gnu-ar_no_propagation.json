{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "unaff_RBX": "currentEntry",
                "param_7": "targetFilename",
                "in_EAX": "comparisonMode",
                "iVar1": "comparisonResult"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int comparisonMode;\n  int comparisonResult;\n  long *currentEntry;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (comparisonMode == 3) {\n    for (; *currentEntry != 0; currentEntry = (long *)(*currentEntry + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*currentEntry != (undefined8 *)0x0; currentEntry = (long *)(*currentEntry + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*currentEntry,targetFilename);\n      if (comparisonResult == 0) {\n        if (comparisonMode != 2) {\n          return currentEntry;\n        }\n        return (long *)(*currentEntry + 0xf0);\n      }\n    }\n  }\n  return currentEntry;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00105cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105830",
                "FUN_00102e6f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "file",
                "param_2": "fileInfo",
                "param_3": "includeTime",
                "param_4": "includeHex",
                "iVar1": "returnValue",
                "ppcVar2": "ptrFile",
                "pcVar3": "timeStr",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePermission",
                "cStack_f2": "userRead",
                "cStack_f1": "userWrite",
                "cStack_f0": "userExecute",
                "cStack_ef": "groupRead",
                "cStack_ee": "groupWrite",
                "cStack_ed": "groupExecute",
                "cStack_ec": "otherRead",
                "cStack_eb": "otherWrite",
                "cStack_ea": "otherExecute",
                "local_e8": "timeInfo",
                "local_b8": "buffer",
                "uStack_a0": "flags",
                "uStack_9c": "major",
                "uStack_98": "minor",
                "uStack_88": "fileSize",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *file,char **fileInfo,char includeTime,char includeHex)\n\n{\n  int returnValue;\n  char **ptrFile;\n  char *timeStr;\n  uint fileType;\n  time_t currentTime;\n  undefined filePermission;\n  char userRead;\n  char userWrite;\n  char userExecute;\n  char groupRead;\n  char groupWrite;\n  char groupExecute;\n  char otherRead;\n  char otherWrite;\n  char otherExecute;\n  undefined uStack_e9;\n  char timeInfo [48];\n  undefined buffer [24];\n  uint flags;\n  uint major;\n  uint minor;\n  undefined8 fileSize;\n  time_t fileModificationTime;\n  \n  if (includeTime != '\\0') {\n    ptrFile = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      ptrFile = fileInfo;\n    }\n    returnValue = (**(code **)(ptrFile[1] + 0x1e8))(fileInfo,buffer);\n    if (returnValue == 0) {\n      currentTime = fileModificationTime;\n      timeStr = ctime(&currentTime);\n      if (timeStr == (char *)0x0) {\n        timeStr = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeInfo,timeStr);\n      }\n      else {\n        sprintf(timeInfo,\"%.12s %.4s\",timeStr + 4);\n      }\n      fileType = flags & 0xf000;\n      if (fileType == 0x4000) {\n        filePermission = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermission = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermission = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermission = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermission = 0x73;\n      }\n      else {\n        filePermission = 0x70;\n        if (fileType != 0x1000) {\n          filePermission = 0x2d;\n        }\n      }\n      userRead = (-((flags & 0x100) == 0) & 0xbbU) + 0x72;\n      userWrite = (-((flags & 0x80) == 0) & 0xb6U) + 0x77;\n      userExecute = (-((flags & 0x40) == 0) & 0xb5U) + 0x78;\n      groupRead = (-((flags & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWrite = (-((flags & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecute = (-((flags & 8) == 0) & 0xb5U) + 0x78;\n      otherRead = (-((flags & 4) == 0) & 0xbbU) + 0x72;\n      otherWrite = (-((flags & 2) == 0) & 0xb6U) + 0x77;\n      otherExecute = (-((flags & 1) == 0) & 0xb5U) + 0x78;\n      if ((flags & 0x800) != 0) {\n        if (userExecute == 'x') {\n          userExecute = 's';\n        }\n        else {\n          userExecute = 'S';\n        }\n      }\n      if ((flags & 0x400) != 0) {\n        if (groupExecute == 'x') {\n          groupExecute = 's';\n        }\n        else {\n          groupExecute = 'S';\n        }\n      }\n      if ((flags & 0x200) != 0) {\n        if (otherExecute == 'x') {\n          otherExecute = 't';\n        }\n        else {\n          otherExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&userRead,(ulong)major,(ulong)minor,fileSize,\n              timeInfo,(ulong)flags);\n    }\n  }\n  fputs(*fileInfo,file);\n  if (includeHex != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "FUN_00102d8c",
                "ctime",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "create_output_file_00105a68",
                "pcVar1": "directoryPath",
                "pFVar2": "file",
                "sVar3": "directoryPathLength"
            },
            "code": "\nvoid createOutputFile_00105a68(void)\n\n{\n  char *directoryPath;\n  FILE *file;\n  size_t directoryPathLength;\n  \n  directoryPath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directoryPathLength = strlen(DAT_0010d5e8);\n    if (directoryPathLength != 0) {\n      if (directoryPath[directoryPathLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directoryPath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directoryPath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file = fopen(DAT_0010d618,\"w\");\n  if (file != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00102e57",
                "concat",
                "strlen",
                "perror",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "create_output_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archiveData",
                "param_2": "callback",
                "param_3": "fileEntries",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "fileName",
                "bVar3": "entryFound",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "formatString",
                "plVar6": "nextEntry",
                "lVar7": "currentEntry",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 processArchive_001032a8(long *archiveData,code *callback,undefined8 *fileEntries,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 fileName;\n  bool entryFound;\n  long *currentEntry;\n  int comparisonResult;\n  char *formatString;\n  long *nextEntry;\n  long currentEntry;\n  long *previousEntry;\n  \n  currentEntry = archiveData[0x1e];\n  if (fileEntries == (undefined8 *)0x0) {\n    while (currentEntry != 0) {\n      nextEntry = *(long *)(currentEntry + 0xf0);\n      (*callback)(currentEntry,0);\n      currentEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      currentEntry = (long *)archiveData[0x1e];\n      previousEntry = archiveData;\n      while (nextEntry = currentEntry, nextEntry != (long *)0x0) {\n        if (*nextEntry != 0) {\n          comparisonResult = filename_cmp(*fileEntries);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callback)(nextEntry,previousEntry);\n          }\n        }\n        previousEntry = nextEntry;\n        currentEntry = (long *)nextEntry[0x1e];\n      }\n      if (!entryFound) {\n        fileName = *fileEntries;\n        formatString = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,formatString,fileName);\n      }\n      fileEntries = (undefined8 *)fileEntries[1];\n    } while (fileEntries != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_error_0010285f",
                "__format": "formatString",
                "lVar2": "entryOffset",
                "plVar3": "archiveEntry",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "functionPointer",
                "unaff_R12": "archiveObject",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "entryIndex"
            },
            "code": "\n\n\nvoid printArchiveEntryError_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long entryOffset;\n  long *archiveEntry;\n  undefined8 entryName;\n  long *currentEntry;\n  code *functionPointer;\n  long archiveObject;\n  int entryCount;\n  undefined8 *entryNames;\n  int entryIndex;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archiveObject + 0xf0);\n  entryIndex = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entryOffset = *currentEntry;\n      if (entryOffset == 0) {\n        archiveEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          archiveEntry = currentEntry;\n        }\n        (**(code **)(archiveEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archiveObject + 0x49) & 0x10) == 0) || (entryOffset = FUN_00105830(), entryOffset != 0))\n      {\n        entryName = FUN_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,entryOffset);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entryIndex = entryIndex + 1,\n            entryIndex == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*functionPointer)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_error_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_or_unknown_cause_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorOrUnknownCause_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_or_unknown_cause_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "isVerbose",
                "uVar1": "formatStr",
                "pcVar2": "text",
                "__stream": "file",
                "fprintf": "printFormatted",
                "dcgettext": "getTranslatedText",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "xexit": "exitProgram"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint isVerbose)\n\n{\n  undefined8 formatStr;\n  char *text;\n  FILE *file;\n  \n  text = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  file = standardError;\n  if (isVerbose != 0) {\n    file = standardOutput;\n  }\n  fprintf(file,text,DAT_0010d660);\n  formatStr = DAT_0010d660;\n  text = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(file,text,formatStr);\n  text = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(file,text);\n  text = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(file,text);\n  FUN_0010336b(file);\n  FUN_0010266f(DAT_0010d660,file);\n  if (isVerbose != 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(file,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010336b",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_index_0010394a",
                "param_1": "options",
                "uVar1": "programName",
                "__stream": "outputStream",
                "pcVar2": "message"
            },
            "code": "\n\n\nvoid printArchiveIndex_0010394a(uint options)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  programName = DAT_0010d660;\n  outputStream = _stderr;\n  if (options != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (options != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(options ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_archive_index_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "decompile_and_process_00107920",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "param_6": "input_param6",
                "param_7": "input_param7",
                "param_8": "input_param8",
                "param_9": "data_param1",
                "param_10": "data_param2",
                "param_11": "data_param3",
                "param_12": "data_param4",
                "param_13": "data_param5",
                "param_14": "data_param6",
                "in_AL": "input_flag",
                "local_d8": "length",
                "local_d4": "constant",
                "local_d0": "stack_ptr",
                "local_c8": "local_data_ptr",
                "local_b8": "local_data",
                "local_b0": "local_param2",
                "local_a8": "local_param3",
                "local_a0": "local_param4",
                "local_98": "local_param5",
                "local_90": "local_param6",
                "local_88": "input_param1_copy",
                "local_78": "input_param2_copy",
                "local_68": "input_param3_copy",
                "local_58": "input_param4_copy",
                "local_48": "input_param5_copy",
                "local_38": "input_param6_copy",
                "local_28": "input_param7_copy",
                "local_18": "input_param8_copy"
            },
            "code": "\nvoid decompile_and_process_00107920(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4,\n                 undefined4 input_param5,undefined4 input_param6,undefined4 input_param7,undefined4 input_param8,\n                 undefined8 data_param1,undefined8 data_param2,undefined8 data_param3,undefined8 data_param4,\n                 undefined8 data_param5,undefined8 data_param6)\n\n{\n  char input_flag;\n  undefined4 length;\n  undefined4 constant;\n  undefined *stack_ptr;\n  undefined *local_data_ptr;\n  undefined local_data [8];\n  undefined8 local_param2;\n  undefined8 local_param3;\n  undefined8 local_param4;\n  undefined8 local_param5;\n  undefined8 local_param6;\n  undefined4 input_param1_copy;\n  undefined4 input_param2_copy;\n  undefined4 input_param3_copy;\n  undefined4 input_param4_copy;\n  undefined4 input_param5_copy;\n  undefined4 input_param6_copy;\n  undefined4 input_param7_copy;\n  undefined4 input_param8_copy;\n  \n  if (input_flag != '\\0') {\n    input_param1_copy = input_param1;\n    input_param2_copy = input_param2;\n    input_param3_copy = input_param3;\n    input_param4_copy = input_param4;\n    input_param5_copy = input_param5;\n    input_param6_copy = input_param6;\n    input_param7_copy = input_param7;\n    input_param8_copy = input_param8;\n  }\n  stack_ptr = &stack0x00000008;\n  length = 8;\n  local_data_ptr = local_data;\n  constant = 0x30;\n  local_param2 = data_param2;\n  local_param3 = data_param3;\n  local_param4 = data_param4;\n  local_param5 = data_param5;\n  local_param6 = data_param6;\n  FUN_001078c0(data_param1,&length);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "decompile_and_process_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0",
                "undefined8": "int"
            },
            "code": "\nint getOne_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "get_return_value_00107640"
            },
            "code": "\nundefined8 getReturnValue_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_return_value_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_file_path_00102e6f",
                "pcVar1": "currentPath",
                "in_RAX": "inputPath",
                "uVar2": "baseName",
                "uVar3": "errorMessage",
                "pFVar4": "filePointer",
                "sVar5": "pathLength",
                "pcVar6": "subPath"
            },
            "code": "\nvoid extractFilePath_00102e6f(void)\n\n{\n  char *currentPath;\n  char *inputPath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t pathLength;\n  char *subPath;\n  \n  currentPath = DAT_0010d5e8;\n  do {\n    inputPath = inputPath + 1;\n    while (*inputPath != '/') {\n      if (*inputPath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (pathLength = strlen(DAT_0010d5e8), pathLength != 0)) {\n          if (currentPath[pathLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(currentPath,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(currentPath,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePointer = fopen(DAT_0010d618,\"w\");\n        if (filePointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      subPath = inputPath;\n      if ((*inputPath == '.') && (subPath = inputPath + 1, inputPath[1] == '.')) {\n        subPath = inputPath + 2;\n        if ((inputPath[2] == '/') || (inputPath[2] == '\\0')) {\n          baseName = lbasename();\n          currentPath = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(errorMessage,currentPath,baseName);\n          DAT_0010d618 = (char *)baseName;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (inputPath = subPath, *subPath != '\\0' && (*subPath != '/')); subPath = subPath + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00107920",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_file_path_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_status_00107890",
                "param_1": "output",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printStatus_00107890(undefined8 output)\n\n{\n  FUN_001079c0(outputStream,output,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_status_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001075e0",
                "FUN_001033b0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "memory",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreate_buffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *memory;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer_001033d6()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    memory = malloc(0x4002);\n    *(void **)((long)buffer + 8) = memory;\n  } while (memory == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "FUN_001031cf",
                "malloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_param_and_return_00103172",
                "param_1": "source_ptr",
                "param_2": "target_ptr",
                "param_3": "check_condition",
                "param_4": "additional_data",
                "uVar1": "source_value",
                "auVar2": "new_data",
                "auVar2._1_7_": "shifted_value",
                "auVar2[0]": "status",
                "auVar2._8_8_": "extra_data"
            },
            "code": "\nundefined  [16]\nupdate_param_and_return_00103172(undefined8 *source_ptr,undefined8 *target_ptr,char check_condition,undefined8 additional_data)\n\n{\n  undefined8 source_value;\n  undefined new_data [16];\n  \n  if (check_condition != '\\0') {\n    printf(\"r - %s\\n\",*target_ptr);\n  }\n  source_value = *source_ptr;\n  target_ptr[0x1e] = source_value;\n  shifted_value = (undefined7)((ulong)source_value >> 8);\n  status = 1;\n  *source_ptr = target_ptr;\n  extra_data = additional_data;\n  return new_data;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_param_and_return_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_in_list_00105870",
                "param_1": "file_list",
                "param_2": "search_type",
                "param_3": "search_file",
                "iVar1": "comparison_result",
                "iVar3": "search_count",
                "uVar2": "default_search_file"
            },
            "code": "\nlong * find_file_in_list_00105870(long *file_list,int search_type,undefined8 search_file)\n\n{\n  int comparison_result;\n  undefined8 default_search_file;\n  int search_count;\n  \n  default_search_file = DAT_0010d638;\n  search_count = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    default_search_file = search_file;\n    search_count = search_type;\n  }\n  if (search_count == 3) {\n    for (; *file_list != 0; file_list = (long *)(*file_list + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*file_list != (undefined8 *)0x0; file_list = (long *)(*file_list + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*file_list,default_search_file);\n      if (comparison_result == 0) {\n        if (search_count != 2) {\n          return file_list;\n        }\n        return (long *)(*file_list + 0xf0);\n      }\n    }\n  }\n  return file_list;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_file_in_list_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *dataPointer;\n  \n  dataPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_file_with_reason_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "copyFlags",
                "param_4": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorText",
                "uVar5": "unlinkResult",
                "auVar6": "resultStruct"
            },
            "code": "\nundefined  [16] copyFileWithReason_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 copyFlags,undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorText;\n  ulong unlinkResult;\n  undefined resultStruct [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = FUN_00105c00(copyFlags);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorText = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(errorText,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  resultStruct._8_8_ = errorCode;\n  resultStruct._0_8_ = unlinkResult;\n  return resultStruct;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_process_00107650",
                "param_1": "input_parameter",
                "uVar1": "result",
                "lVar2": "function_result"
            },
            "code": "\nundefined8 check_and_process_00107650(undefined8 input_parameter)\n\n{\n  undefined8 result;\n  long function_result;\n  \n  function_result = FUN_001052a0();\n  if (function_result < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    function_result = FUN_00105300(input_parameter,0);\n    if (function_result == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(function_result);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001052a0",
                "FUN_00105300",
                "xexit",
                "FUN_001058b0",
                "FUN_0010284b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_process_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_and_unlink_file_00102f1e",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorPointer",
                "auVar3": "returnValue",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00102f1e(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(errorMessage);\n  unlink(filePath);\n  returnValue._0_8_ = fileSize & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_cannot_set_time_error_message_00102fd7",
                "piVar1": "errorLocationPointer",
                "uVar2": "translatedErrorMessage"
            },
            "code": "\nvoid printCannotSetTimeErrorMessage_00102fd7(void)\n\n{\n  int *errorLocationPointer;\n  undefined8 translatedErrorMessage;\n  \n  errorLocationPointer = __errno_location();\n  strerror(*errorLocationPointer);\n  translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(translatedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_cannot_set_time_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(outputStream);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00102cd9",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_001025a0",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_00102f1e",
                "FUN_0010285f",
                "FUN_001052a0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "initialize_data_00103ddc",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_00103ddc(undefined8 data)\n\n{\n  FUN_001079c0(DAT_0010d578,data,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_formatted_error_message_001078c0",
                "param_1": "errorMessage",
                "param_2": "arguments"
            },
            "code": "\n\n\nvoid printFormattedErrorMessage_001078c0(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010d660);\n  vfprintf(_stderr,errorMessage,arguments);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "putc",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_formatted_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_001028ed",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_gnu_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printGNUInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_gnu_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "entryList",
                "param_2": "entryHandler",
                "param_3": "fileList",
                "param_4": "numFiles",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "nextEntry",
                "uVar4": "temp",
                "plVar5": "currentFile",
                "local_cc": "entryCounter",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long entryList,code *entryHandler,undefined8 *fileList,int numFiles)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *nextEntry;\n  undefined8 temp;\n  long *currentFile;\n  int entryCounter;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(entryList + 0xf0);\n  if (numFiles == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*entryHandler)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      currentFile = *(long **)(entryList + 0xf0);\n      entryCounter = 0;\n      for (; currentFile != (long *)0x0; currentFile = (long *)currentFile[0x1e]) {\n        if (*(int *)((long)currentFile + 0xac) == 0) {\n          currentEntry = *currentFile;\n          if (currentEntry == 0) {\n            nextEntry = (long *)currentFile[0x1d];\n            if ((long *)currentFile[0x1d] == (long *)0x0) {\n              nextEntry = currentFile;\n            }\n            (**(code **)(nextEntry[1] + 0x1e8))(currentFile,buffer);\n          }\n          else if (((*(byte *)(entryList + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,entryList), currentEntry != 0)) {\n            temp = FUN_00105830(*fileList,entryList);\n            comparisonResult = filename_cmp(temp,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (entryCounter = entryCounter + 1, entryCounter == _DAT_0010d630)))) {\n              (*entryHandler)();\n              *(undefined4 *)((long)currentFile + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      temp = *fileList;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,temp);\nLAB_0010553e:\n      fileList = fileList + 1;\n      numFiles = numFiles + -1;\n    } while (numFiles != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "errorFormatString",
                "uVar1": "updatedVar1"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint updatedVar1;\n  char *errorFormatString;\n  \n  updatedVar1 = DAT_0010d554 + 1;\n  errorFormatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorFormatString,(ulong)updatedVar1);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102ba1"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_0010315d",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00105a68",
                "FUN_00102d2f",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "inputValue",
                "__size": "size",
                "lVar1": "loopCounter",
                "lVar2": "newSize",
                "puVar3": "bufferPointer",
                "bVar4": "boolFlag"
            },
            "code": "\nundefined8 ensureBufferStack_00103df9(void)\n\n{\n  size_t size;\n  undefined8 inputValue;\n  long loopCounter;\n  long newSize;\n  undefined4 *bufferPointer;\n  byte boolFlag;\n  \n  boolFlag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return inputValue;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return inputValue;\n    }\n    newSize = DAT_0010d580 + 8;\n    size = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      bufferPointer = (undefined4 *)((long)DAT_0010d5a8 + (size - 0x40));\n      DAT_0010d580 = newSize;\n      for (loopCounter = 0x10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *bufferPointer = 0;\n        bufferPointer = bufferPointer + (ulong)boolFlag * -2 + 1;\n      }\n      return inputValue;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return inputValue;\n}\n\n",
            "called": [
                "calloc",
                "realloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "process_archive_00103a78",
                "param_1": "inputParams",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "ptr",
                "uVar3": "bytesRead",
                "uVar4": "errorString",
                "sVar5": "bytesWritten",
                "piVar6": "pErrNo",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorMessage",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "maxBytesToRead"
            },
            "code": "\n\n\nvoid processArchive_00103a78(undefined8 *inputParams)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *ptr;\n  ulong bytesRead;\n  undefined8 errorString;\n  size_t bytesWritten;\n  int *pErrNo;\n  size_t remainingBytes;\n  char *errorMessage;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong maxBytesToRead;\n  \n  buffer = (void *)xmalloc(0x2000);\n  ptr = (undefined8 *)inputParams[0x1d];\n  if ((undefined8 *)inputParams[0x1d] == (undefined8 *)0x0) {\n    ptr = inputParams;\n  }\n  result = (**(code **)(ptr[1] + 0x1e8))(inputParams,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputParams);\n    }\n    totalBytesRead = 0;\n    bfd_seek(inputParams,0,0);\n    goto LAB_00103afd;\n  }\n  inputParams = (undefined8 *)*inputParams;\n  errorMessage = \"internal stat error on %s\";\n  do {\n    errorString = dcgettext(0,errorMessage,5);\n    FUN_00107690(errorString,inputParams);\n    maxBytesToRead = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        pErrNo = __errno_location();\n        errorMessage = strerror(*pErrNo);\n        FUN_00107690(\"stdout: %s\",errorMessage);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (maxBytesToRead <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = maxBytesToRead - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,inputParams);\n    } while (remainingBytes == bytesRead);\n    errorMessage = \"%s is not a valid archive\";\n    inputParams = *(undefined8 **)inputParams[0x1d];\n    archiveSize = maxBytesToRead;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_bread",
                "free",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "printf",
                "strerror",
                "dcgettext",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_to_file_001058b0",
                "param_1": "parameters",
                "cVar1": "result",
                "uVar2": "flags",
                "iVar3": "fileDescriptor",
                "uVar4": "param",
                "__format": "timeFormat",
                "__ptr": "duplicateString",
                "__stream": "fileStream",
                "ppcVar5": "archiveData",
                "uStack0000000000000020": "stackValue",
                "in_stack_00000028": "stackValue2",
                "in_stack_00000038": "stackValue3",
                "local_3c": "errorCode",
                "uStack_33": "permission",
                "cStack_32": "permissionChar1",
                "cStack_31": "permissionChar2"
            },
            "code": "\n\n\nvoid writeArchiveToFile_001058b0(undefined8 *parameters)\n\n{\n  char result;\n  uint flags;\n  int fileDescriptor;\n  undefined8 param;\n  char *timeFormat;\n  void *duplicateString;\n  FILE *fileStream;\n  char **archiveData;\n  uint stackValue;\n  uint stackValue2;\n  undefined8 stackValue3;\n  int errorCode [2];\n  undefined permission;\n  char permissionChar1;\n  char permissionChar2;\n  \n  param = parameters[0x1e];\n  errorCode[0] = -1;\n  duplicateString = (void *)xstrdup(*parameters);\n  fileStream = (FILE *)FUN_001057a0(duplicateString,errorCode);\n  fileDescriptor = errorCode[0];\n  if (fileStream != (FILE *)0x0) {\n    DAT_0010d618 = fileStream;\n    archiveData = (char **)bfd_fdopenw(fileStream,*(undefined8 *)parameters[1],errorCode[0]);\n    if (archiveData != (char **)0x0) {\n      DAT_0010d5e0 = archiveData;\n      bfd_set_format(archiveData,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)archiveData + 0x49) & 0xfffffff7;\n      *(char *)((long)archiveData + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)archiveData + 0x44) = *(uint *)((long)archiveData + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)archiveData + 0x44) = *(uint *)((long)archiveData + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)parameters + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)archiveData + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(archiveData,param);\n        if (result != '\\0') break;\n        flags = FUN_00107c10(duplicateString);\nLAB_00102d37:\n        *(uint *)((long)archiveData + 0x44) = *(uint *)((long)archiveData + 0x44) | 0x100000;\n      }\n      fileDescriptor = dup(fileDescriptor);\n      result = bfd_close(archiveData);\n      if (result == '\\0') {\n        FUN_00107c10(duplicateString);\n        timeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,timeFormat);\n        flags = stackValue & 0xf000;\n        if (flags == 0x4000) {\n          permission = 100;\n        }\n        else if (flags == 0xa000) {\n          permission = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          permission = 0x62;\n        }\n        else if (flags == 0x2000) {\n          permission = 99;\n        }\n        else if (flags == 0xc000) {\n          permission = 0x73;\n        }\n        else {\n          permission = 0x70;\n          if (flags != 0x1000) {\n            permission = 0x2d;\n          }\n        }\n        permissionChar1 = (-((_stackValue & 0x100) == 0) & 0xbbU) + 0x72;\n        permissionChar2 = (-((_stackValue & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&permissionChar1,_stackValue >> 0x20,\n                (ulong)stackValue2,stackValue3,&stack0xffffffffffffffd8,\n                _stackValue & 0xffffffff);\n        fputs(*archiveData,fileStream);\n        if ((char)parameters != '\\0') {\n          if ((*(byte *)((long)archiveData + 0x49) & 0x10) == 0) {\n            if (archiveData[0xb] != (char *)0x0) {\n              fprintf(fileStream,\" 0x%lx\");\n            }\n          }\n          else if (archiveData[0xc] != (char *)0x0) {\n            fprintf(fileStream,\" 0x%lx\");\n          }\n        }\n        fputc(10,fileStream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(parameters);\n      fileDescriptor = FUN_00105bc0(fileStream,duplicateString,fileDescriptor);\n      if (fileDescriptor == 0) {\n        free(duplicateString);\n        free(fileStream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(fileDescriptor);\n    FUN_00107c10(duplicateString);\n  }\n  param = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(param);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_set_format",
                "close",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "FUN_001057a0",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "write_archive_to_file_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "closeCache",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00103ba8",
                "FUN_00102f96"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_timestamp_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorCode",
                "pcVar3": "errorMsg",
                "uVar4": "localizedErrorMsg",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime",
                "local_28": "backupAccessTime",
                "uStack_24": "backupModificationTime",
                "uStack_20": "backupChangeTime",
                "uStack_1c": "backupCreationTime"
            },
            "code": "\nvoid setFileTimestamp_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorCode;\n  char *errorMsg;\n  undefined8 localizedErrorMsg;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 backupAccessTime;\n  undefined4 backupModificationTime;\n  undefined4 backupChangeTime;\n  undefined4 backupCreationTime;\n  \n  backupAccessTime = *(undefined4 *)(fileInfo + 0x58);\n  backupModificationTime = *(undefined4 *)(fileInfo + 0x5c);\n  backupChangeTime = *(undefined4 *)(fileInfo + 0x60);\n  backupCreationTime = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errorCode = __errno_location();\n    errorMsg = strerror(*errorCode);\n    localizedErrorMsg = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(localizedErrorMsg,filePath,errorMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_timestamp_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "pathname",
                "pcVar1": "baseDir",
                "pcVar2": "currentDir",
                "uVar3": "resolvedPath",
                "uVar4": "errorMessage",
                "pFVar5": "filePointer",
                "sVar6": "baseDirLength"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *pathname)\n\n{\n  char *baseDir;\n  char *currentDir;\n  undefined8 resolvedPath;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t baseDirLength;\n  \n  baseDir = DAT_0010d5e8;\n  DAT_0010d618 = pathname;\n  if (*pathname == '/') {\nLAB_00102e9a:\n    resolvedPath = lbasename();\n    baseDir = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(errorMessage,baseDir,resolvedPath);\n    DAT_0010d618 = (char *)resolvedPath;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*pathname == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (baseDirLength = strlen(DAT_0010d5e8), baseDirLength != 0)) {\n        if (baseDir[baseDirLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(baseDir,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(baseDir,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePointer = fopen(DAT_0010d618,\"w\");\n      if (filePointer == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentDir = pathname;\n    if ((*pathname == '.') && (currentDir = pathname + 1, pathname[1] == '.')) {\n      currentDir = pathname + 2;\n      if ((pathname[2] == '/') || (pathname[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentDir != '\\0' && (*currentDir != '/')); currentDir = currentDir + 1) {\n    }\n    for (; pathname = currentDir, *currentDir == '/'; currentDir = currentDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_return_error_status_00102f55",
                "unaff_R12D": "fileDescriptor",
                "__errno_location": "getErrorNumberLocation",
                "piVar2": "errorNumberPointer",
                "iVar1": "errorNumber"
            },
            "code": "\nundefined8 closeFileAndReturnErrorStatus_00102f55(void)\n\n{\n  int errorNumber;\n  int *errorNumberPointer;\n  int fileDescriptor;\n  \n  errorNumberPointer = __errno_location();\n  errorNumber = *errorNumberPointer;\n  close(fileDescriptor);\n  *errorNumberPointer = errorNumber;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_status_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_and_create_file_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "file_name_offset",
                "lVar4": "offset",
                "lVar5": "length",
                "pcVar6": "allocated_file_path",
                "bVar7": "flag",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_and_create_file_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  int result;\n  char *last_slash;\n  long file_name_offset;\n  long offset;\n  long length;\n  char *allocated_file_path;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    file_name_offset = 0;\n  }\n  else {\n    length = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(length + 0xb);\n    file_name_offset = length + 1;\n    allocated_file_path = last_slash;\n    for (offset = length; offset != 0; offset = offset + -1) {\n      *allocated_file_path = *file_path;\n      file_path = file_path + (ulong)flag * -2 + 1;\n      allocated_file_path = allocated_file_path + (ulong)flag * -2 + 1;\n    }\n    last_slash[length] = '/';\n  }\n  *(undefined8 *)(last_slash + file_name_offset) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + file_name_offset) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    allocated_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    allocated_file_path = last_slash;\n  }\n  return_value._8_8_ = unused_param_2;\n  return_value._0_8_ = allocated_file_path;\n  return return_value;\n}\n\n",
            "called": [
                "mkstemp",
                "strrchr",
                "xmalloc",
                "FUN_00102ba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_and_create_file_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "filePermissions",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "__format": "corruptionErrorMessage",
                "uVar1": "permissionType",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "isHex",
                "uStack0000000000000015": "permissionChar",
                "cStack0000000000000016": "readPermission",
                "cStack0000000000000017": "writePermission",
                "param_9": "executePermission",
                "cStack0000000000000019": "readPermissionGroup",
                "cStack000000000000001a": "writePermissionGroup",
                "cStack000000000000001b": "executePermissionGroup",
                "cStack000000000000001c": "readPermissionOthers",
                "cStack000000000000001d": "writePermissionOthers",
                "cStack000000000000001e": "executePermissionOthers",
                "uStack000000000000001f": "flag",
                "uStack000000000000006c": "inode",
                "fprintf": "printFormattedData",
                "fputs": "printString",
                "fputc": "printCharacter"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *corruptionErrorMessage;\n  uint permissionType;\n  char **fileData;\n  FILE *outputFile;\n  char isHex;\n  undefined permissionChar;\n  char readPermission;\n  char writePermission;\n  char executePermission;\n  char readPermissionGroup;\n  char writePermissionGroup;\n  char executePermissionGroup;\n  char readPermissionOthers;\n  char writePermissionOthers;\n  char executePermissionOthers;\n  undefined flag;\n  uint filePermissions;\n  uint inode;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  corruptionErrorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,corruptionErrorMessage);\n  permissionType = filePermissions & 0xf000;\n  if (permissionType == 0x4000) {\n    permissionChar = 100;\n  }\n  else if (permissionType == 0xa000) {\n    permissionChar = 0x6c;\n  }\n  else if (permissionType == 0x6000) {\n    permissionChar = 0x62;\n  }\n  else if (permissionType == 0x2000) {\n    permissionChar = 99;\n  }\n  else if (permissionType == 0xc000) {\n    permissionChar = 0x73;\n  }\n  else {\n    permissionChar = 0x70;\n    if (permissionType != 0x1000) {\n      permissionChar = 0x2d;\n    }\n  }\n  readPermission = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  writePermission = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  executePermission = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  readPermissionGroup = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  writePermissionGroup = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  executePermissionGroup = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  readPermissionOthers = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  writePermissionOthers = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  executePermissionOthers = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (executePermission == 'x') {\n      executePermission = 's';\n    }\n    else {\n      executePermission = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (executePermissionGroup == 'x') {\n      executePermissionGroup = 's';\n    }\n    else {\n      executePermissionGroup = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (executePermissionOthers == 'x') {\n      executePermissionOthers = 't';\n    }\n    else {\n      executePermissionOthers = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inode,\n          (ulong)fileSize,timestamp,&stack0x00000020,(ulong)filePermissions);\n  fputs(*fileData,outputFile);\n  if (isHex != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "sprintf",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_001028ed",
                "FUN_00102fd7",
                "FUN_00102f55",
                "FUN_00105c00",
                "FUN_00102c25",
                "FUN_001031cf",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "convert_library_format_00105300",
                "param_1": "libraryPath",
                "param_2": "archivedFilesArray",
                "plVar1": "archivedFilePointer",
                "pcVar2": "errorString",
                "bVar3": "isThinLibrary",
                "cVar4": "conversionError",
                "iVar5": "statusCode",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "piVar8": "errnoPointer",
                "lVar9": "filePointer",
                "puVar10": "newLibraryFile",
                "local_b0": "newArchivedFile",
                "local_a8": "fileStat",
                "_stderr": "standardErrorFile"
            },
            "code": "\n\n\nundefined8 * convertLibraryFormat_00105300(char *libraryPath,undefined8 *archivedFilesArray)\n\n{\n  long *archivedFilePointer;\n  char *errorString;\n  byte isThinLibrary;\n  char conversionError;\n  int statusCode;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  int *errnoPointer;\n  long filePointer;\n  undefined8 *newLibraryFile;\n  undefined8 newArchivedFile;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  statusCode = stat(libraryPath,&fileStat);\n  errorString = DAT_0010d618;\n  if (statusCode == 0) goto LAB_001053be;\n  errnoPointer = __errno_location();\n  if (*errnoPointer == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(standardErrorFile,\"%s: \",DAT_0010d660);\n      perror(libraryPath);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archivedFilesArray != (undefined8 *)0x0)) {\n      newLibraryFile = (undefined8 *)FUN_00102710();\n      return newLibraryFile;\n    }\n    archivedFilesArray = (undefined8 *)bfd_openw(libraryPath,DAT_0010d5f0);\n    if (((archivedFilesArray != (undefined8 *)0x0) && (conversionError = bfd_set_format(archivedFilesArray,2), conversionError != '\\0')) &&\n       (conversionError = bfd_close(archivedFilesArray), conversionError != '\\0')) {\n      errorString = libraryPath;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(libraryPath);\n  do {\n    isThinLibrary = *(byte *)((long)archivedFilesArray + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *archivedFilesArray;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *archivedFilesArray;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(errorMessage,libraryName);\nLAB_001027cb:\n      FUN_00107c20(libraryPath);\n      statusCode = bfd_get_error();\n      if (statusCode == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(newArchivedFile);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePointer = archivedFilesArray + 0x1e;\n      for (filePointer = bfd_openr_next_archived_file(archivedFilesArray,0); filePointer != 0;\n          filePointer = bfd_openr_next_archived_file(archivedFilesArray,filePointer)) {\n        *archivedFilePointer = filePointer;\n        archivedFilePointer = (long *)(filePointer + 0xf0);\n      }\n      *archivedFilePointer = 0;\n      statusCode = bfd_get_error();\n      if (statusCode == 9) {\n        return archivedFilesArray;\n      }\n      do {\n        FUN_00107c10(libraryPath);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(libraryName,libraryPath);\n        errorString = libraryPath;\nLAB_001053be:\n        DAT_0010d618 = errorString;\n        archivedFilesArray = (undefined8 *)bfd_openr(libraryPath,DAT_0010d5f0);\n      } while (archivedFilesArray == (undefined8 *)0x0);\n      conversionError = bfd_check_format_matches(archivedFilesArray,2,&newArchivedFile);\n      if (conversionError == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (filePointer = bfd_openr_next_archived_file(archivedFilesArray,0), filePointer == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "FUN_00102710",
                "xexit",
                "bfd_close",
                "__errno_location",
                "bfd_openw",
                "bfd_openr",
                "bfd_set_error",
                "dcgettext",
                "stat",
                "fprintf",
                "FUN_0010315d",
                "FUN_00107c20",
                "bfd_get_error",
                "bfd_check_format_matches",
                "FUN_00107920",
                "perror",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "convert_library_format_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "parse_command_line_args_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteValue",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "undefined4Value",
                "uVar7": "undefined4Value",
                "bVar8": "boolValue",
                "bVar9": "boolValue",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteValue",
                "cVar14": "charValue",
                "iVar15": "intValue",
                "uVar16": "uintValue",
                "uVar17": "undefined4Value",
                "pFVar18": "filePointer",
                "sVar19": "sizeValue",
                "sVar20": "sizeValue",
                "__ptr": "bytePointer",
                "plVar21": "longPointer",
                "pFVar22": "filePointer",
                "pcVar23": "charPointer",
                "lVar24": "longValue",
                "uVar25": "ulongValue",
                "puVar26": "undefined8Pointer",
                "uVar27": "undefined8Value",
                "pFVar28": "filePointer",
                "lVar34": "longValue",
                "lVar35": "longValue",
                "extraout_EDX": "uintValue",
                "puVar36": "undefinedPointerPointer",
                "uVar37": "uintValue",
                "unaff_RBP": "charPointer",
                "pbVar38": "bytePointer",
                "pcVar39": "charPointer",
                "uVar42": "ulongValue",
                "unaff_R12": "filePointer",
                "uVar44": "uintValue",
                "iVar45": "intValue",
                "pcVar46": "charPointer"
            },
            "code": "\n\n\nvoid parseCommandLineArgs_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteValue;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 undefined4Value;\n  undefined4 undefined4Value;\n  bool boolValue;\n  bool boolValue;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteValue;\n  char charValue;\n  int intValue;\n  uint uintValue;\n  undefined4 undefined4Value;\n  FILE *filePointer;\n  size_t sizeValue;\n  size_t sizeValue;\n  byte *bytePointer;\n  long *longPointer;\n  FILE *filePointer;\n  char *charPointer;\n  long longValue;\n  ulong ulongValue;\n  undefined8 *undefined8Pointer;\n  undefined8 undefined8Value;\n  FILE *filePointer;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint uintValue;\n  char **ppcVar32;\n  byte *pbyteValue3;\n  long longValue;\n  long longValue;\n  undefined **pundefinedPointerPointer;\n  uint uintValue;\n  char *charPointer;\n  byte *bytePointer;\n  char *charPointer;\n  ulong uVar40;\n  ulong uVar41;\n  ulong ulongValue;\n  FILE *filePointer;\n  char *pcVar43;\n  uint uintValue;\n  int intValue;\n  char *charPointer;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  charPointer = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePointer = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  filePointer = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  filePointer = argv;\n  do {\n    uintValue = (uint)filePointer;\n    charPointer = (char *)(long)(int)uintValue;\n    local_130 = (FILE *)((long)charPointer * 8);\n    pcVar43 = (char *)filePointer;\n    if (**(char **)(&filePointer->_flags + (long)charPointer * 2) == '@') {\n      uintValue = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uintValue;\n      if (uintValue == 0) {\n        longPointer = *(long **)filePointer;\n        charPointer = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,charPointer,longPointer);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      charPointer = *(char **)(&filePointer->_flags + (long)charPointer * 2) + 1;\n      intValue = stat(charPointer,(stat *)local_c8);\n      if (-1 < intValue) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          longPointer = *(long **)filePointer;\n          charPointer = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer = fopen(charPointer,\"r\");\n        if (filePointer != (FILE *)0x0) {\n          intValue = fseek(filePointer,0,2);\n          if (((intValue != -1) && (sizeValue = ftell(filePointer), sizeValue != 0xffffffffffffffff)) &&\n             (intValue = fseek(filePointer,0,0), intValue != -1)) {\n            local_118 = (byte *)xmalloc(sizeValue + 1);\n            sizeValue = fread(local_118,1,sizeValue,filePointer);\n            if ((sizeValue == sizeValue) || (intValue = ferror(filePointer), intValue == 0)) {\n              local_118[sizeValue] = 0;\n              byteValue = *local_118;\n              pbyteValue3 = local_118;\n              while( true ) {\n                if (byteValue == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteValue * 2] & 0x40) == 0) break;\n                byteValue = pbyteValue3[1];\n                pbyteValue3 = pbyteValue3 + 1;\n              }\n              sizeValue = strlen((char *)local_118);\n              bytePointer = (byte *)xmalloc(sizeValue + 1);\n              filePointer = (FILE *)0x0;\n              intValue = 0;\n              boolValue = false;\n              bVar47 = false;\n              boolValue = false;\n              local_100 = 0;\n              pbyteValue3 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteValue3 * 2] & 0x40) != 0) {\n                  pbyteValue3 = pbyteValue3 + 1;\n                }\n                if ((intValue == 0) || (intValue + -1 <= (int)local_100)) {\n                  if (filePointer == (FILE *)0x0) {\n                    intValue = 8;\n                    filePointer = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intValue = intValue * 2;\n                    filePointer = (FILE *)xrealloc(filePointer,(long)intValue << 3);\n                    ppcVar31 = (char **)((long)&filePointer->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer->_flags + local_100 * 8);\n                }\n                byteValue = *pbyteValue3;\n                bytePointer = bytePointer;\n                while (byteValue != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteValue * 2] & 0x40) != 0) &&\n                       (!(bool)(boolValue | boolValue | bVar47))) {\n                      boolValue = false;\n                      boolValue = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolValue) break;\n                    pbyteValue3 = pbyteValue3 + 1;\n                    *bytePointer = byteValue;\n                    bytePointer = bytePointer + 1;\n                    boolValue = false;\n                    byteValue = *pbyteValue3;\n                    if (byteValue == 0) goto LAB_0010606f;\n                  }\n                  if (byteValue == 0x5c) {\n                    boolValue = true;\n                  }\n                  else if (bVar47) {\n                    if (byteValue == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *bytePointer = byteValue;\n                      bytePointer = bytePointer + 1;\n                    }\n                  }\n                  else if (boolValue) {\n                    if (byteValue != 0x22) goto LAB_001061f1;\n                    boolValue = false;\n                  }\n                  else if (byteValue == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteValue != 0x22) goto LAB_001061f1;\n                    boolValue = true;\n                  }\n                  bytePointer = pbyteValue3 + 1;\n                  pbyteValue3 = pbyteValue3 + 1;\n                  byteValue = *bytePointer;\n                }\nLAB_0010606f:\n                *bytePointer = 0;\n                longPointer = (long *)xstrdup(bytePointer);\n                *ppcVar31 = (char *)longPointer;\n                *(undefined8 *)(filePointer->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                byteValue = *pbyteValue3;\n                byteValue = (&_sch_istable)[(ulong)byteValue * 2];\n                while ((byteValue & 0x40) != 0) {\n                  byteValue = pbyteValue3[1];\n                  pbyteValue3 = pbyteValue3 + 1;\n                  byteValue = (&_sch_istable)[(ulong)byteValue * 2];\n                }\n                local_100 = local_100 + 1;\n                if (byteValue == 0) {\n                  free(bytePointer);\n                  if (filePointer == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(filePointer);\n        }\n      }\n    }\n    if ((int)charPointer <= (int)(uintValue + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintValue = (uint)filePointer;\n        intValue = bfd_init();\n        charPointer = \"fatal error: libbfd ABI mismatch\";\n        if (intValue != 0x118) goto LAB_00106803;\n        charPointer = \"x86_64-pc-linux-gnu\";\n        uintValue = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        filePointer = (FILE *)(ulong)uintValue;\n        if ((char)uintValue != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            intValue = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intValue + 1;\n            *(code **)(undefinedPointer + (long)intValue * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            undefined8Pointer = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer != (undefined8 *)0x0) {\n              *undefined8Pointer = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Pointer;\n              goto LAB_0010632b;\n            }\n          }\n          longValue = 1;\n          do {\n            longValue = longValue;\n            intValue = (int)charPointer;\n            if (intValue <= (int)longValue) break;\n            charValue = FUN_00107640(*(undefined8 *)((int *)pcVar43 + longValue * 2));\n            longValue = longValue + 1;\n          } while (charValue != '\\0');\n          charPointer = (char *)((long)pcVar43 + longValue * 8 + -8);\n          uintValue = intValue - ((int)longValue + -1);\n          filePointer = (FILE *)(ulong)uintValue;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintValue = 0;\n            while (intValue = getopt_long(filePointer,charPointer,\"DhHUvVt\",&PTR_DAT_0010d300), intValue != -1)\n            {\n              if (intValue < 0x77) {\n                if (0x43 < intValue) {\n                  switch(intValue) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintValue = uintValue;\n                  }\n                }\n              }\n              else if (intValue == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintValue < 2) {\nLAB_00107125:\n              charPointer = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              filePointer = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintValue <= (int)pcVar43) goto LAB_00106f8b;\n                charPointer = *(char **)((int *)charPointer + (long)pcVar43 * 2);\n                if ((char)uintValue != '\\0') break;\n                uintValue = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                filePointer = (FILE *)(ulong)((uint)filePointer | uintValue);\n              }\n            }\n            while (longValue = FUN_001052a0(charPointer), longValue < 1) {\n              uintValue = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              filePointer = (FILE *)(ulong)((uint)filePointer | uintValue);\n              if ((int)uintValue <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(filePointer);\n              }\n              charPointer = *(char **)((char *)((long)charPointer + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intValue = open(charPointer,2,0);\n            if (intValue < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(charPointer);\nLAB_0010737f:\n              FUN_00107c10(charPointer);\nLAB_00107387:\n              FUN_00107c20(charPointer);\n              intValue = bfd_get_error();\n              if (intValue == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            charPointer = (char *)bfd_fdopenr(charPointer,0);\n            if ((FILE *)charPointer == (FILE *)0x0) goto LAB_0010737f;\n            charValue = bfd_check_format_matches(charPointer,2,local_c8);\n            if (charValue == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)charPointer + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)charPointer + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)charPointer + 8) + 0x1f0))(charPointer);\n              charValue = bfd_close(charPointer);\n              if (charValue != '\\0') {\n                uintValue = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Value = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8Value,charPointer);\nLAB_001073cc:\n            charPointer = (char *)lbasename(DAT_0010d660);\n            sizeValue = strlen(charPointer);\n            if ((sizeValue < 6) ||\n               (intValue = filename_cmp(charPointer + (sizeValue - 6),\"ranlib\"), intValue != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          pundefinedPointerPointer = &PTR_DAT_0010d300;\n          charPointer = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer = (FILE *)charPointer;\n          filePointer = filePointer;\n          if ((int)uintValue < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)uintValue);\nLAB_001063a3:\n          filePointer = (FILE *)charPointer;\n          if (**(char **)((long)charPointer + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            sizeValue = strlen(*(char **)((long)charPointer + 8));\n            intValue = (int)sizeValue + (int)filePointer;\n            filePointer = (FILE *)xmalloc((long)intValue * 8);\n            undefined4Value = *(undefined4 *)((long)charPointer + 4);\n            filePointer->_flags = *(int *)charPointer;\n            *(undefined4 *)&filePointer->field_0x4 = undefined4Value;\n            ppcVar31 = *(char ***)((long)charPointer + 8);\n            local_128 = (FILE *)((long)charPointer + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &filePointer->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              charPointer = (char *)xstrdup();\n              ppcVar32 = &filePointer->_IO_read_end;\n              filePointer->_IO_read_ptr = charPointer;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                charPointer = (char *)xstrdup(local_118);\n                ppcVar32 = &filePointer->_IO_read_base;\n                filePointer->_IO_read_end = charPointer;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  charPointer = (char *)xstrdup(local_118);\n                  ppcVar32 = &filePointer->_IO_write_base;\n                  filePointer->_IO_read_base = charPointer;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &filePointer->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    charPointer = (char *)xstrdup(local_118);\n                    filePointer->_IO_write_base = charPointer;\n                    charValue = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (charValue != '\\0') {\n                      charPointer = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charValue;\n                        charPointer = (char *)xstrdup(local_118);\n                        charPointer = charPointer + 1;\n                        *ppcVar31 = charPointer;\n                        charValue = *charPointer;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (charValue != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longValue = (long)(int)filePointer;\n            intPointer = (int *)charPointer + longValue * 2;\n            if (local_128 < intPointer) {\n              ulongValue = longValue * 8 - 0x11;\n              if ((ulongValue < 0x18) || (ppcVar32 == (char **)((long)charPointer + 0x18))) {\n                *ppcVar32 = *(char **)((long)charPointer + 0x10);\n                if (((char **)((long)charPointer + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)charPointer + 0x18),\n                      (char **)((long)charPointer + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)charPointer + 0x20),\n                      (char **)((long)charPointer + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)charPointer + 0x28),\n                     (char **)((long)charPointer + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)charPointer + 0x30),\n                    (char **)((long)charPointer + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)charPointer + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)charPointer + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Value = *(undefined4 *)((long)((long)charPointer + 0x10) + 4);\n                undefined4Value = *(undefined4 *)((long)charPointer + 0x18);\n                undefined4Value = *(undefined4 *)((long)((long)charPointer + 0x18) + 4);\n                uVar40 = (ulongValue >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)charPointer + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Value;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4Value;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4Value;\n                undefined4Value = *(undefined4 *)((long)((long)charPointer + 0x20) + 4);\n                undefined4Value = *(undefined4 *)((long)charPointer + 0x28);\n                undefined4Value = *(undefined4 *)((long)((long)charPointer + 0x28) + 4);\n                ulongValue = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)charPointer + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Value;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4Value;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4Value;\n                if (ulongValue != 2) {\n                  undefined4Value = *(undefined4 *)((long)((long)charPointer + 0x30) + 4);\n                  undefined4Value = *(undefined4 *)((long)charPointer + 0x38);\n                  undefined4Value = *(undefined4 *)((long)((long)charPointer + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)charPointer + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Value;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4Value;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4Value;\n                  if (ulongValue != 3) {\n                    uVar41 = 3;\n                    do {\n                      ulongValue = uVar41 + 1;\n                      charPointer = (char *)((long)charPointer + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefined4Value = *(undefined4 *)(charPointer + 4);\n                      undefined4Value = *(undefined4 *)(charPointer + 8);\n                      undefined4Value = *(undefined4 *)(charPointer + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)charPointer;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Value;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4Value;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4Value;\n                      uVar41 = ulongValue;\n                    } while (ulongValue != ulongValue);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longValue + -2;\n            }\n            filePointer = (FILE *)(ulong)(intValue - 1);\n            *ppcVar32 = (char *)0x0;\n            charPointer = (char *)filePointer;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintValue = (uint)filePointer;\n            uintValue = getopt_long((ulong)filePointer & 0xffffffff,charPointer,filePointer,pundefinedPointerPointer,0);\n            charPointer = (char *)filePointer;\n            if (uintValue == 0xffffffff) break;\n            if (((uintValue - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintValue - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePointer = (FILE *)charPointer;\n            if (uintValue < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintValue]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            charPointer = (char *)filePointer;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uintValue = DAT_0010d64c;\n          filePointer = (FILE *)charPointer;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePointer <= _optind || (_optind < 1)))) {\n              uintValue = 0;\n              goto LAB_001066aa;\n            }\n            charPointer = (char *)((long)charPointer + (long)_optind * 8 + -8);\n            uintValue = (int)filePointer - (_optind + -1);\n            filePointer = (FILE *)(ulong)uintValue;\n            _optind = 0;\n            if (1 < (int)uintValue) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          filePointer = (FILE *)((ulong)local_130 & 0xff);\n          uintValue = (uint)filePointer;\n          pundefinedPointerPointer = (undefined **)((int *)charPointer + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePointer = (FILE *)charPointer;\n              if (*pundefinedPointerPointer == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uintValue == 3) goto LAB_00106abc;\n                  if (uintValue != 0) goto LAB_00106700;\nLAB_00106eff:\n                  charPointer = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uintValue == 3) || (uintValue == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4Value = FUN_00107650();\n                    \n                  xexit(undefined4Value);\n                }\nLAB_00106abc:\n                if (uintValue == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  charPointer = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              charPointer = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*pundefinedPointerPointer;\n                charPointer = (char *)0x1;\n                charPointer = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                charPointer = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intValue = (int)charPointer;\n                  if (*(char **)((long)pundefinedPointerPointer + (long)intValue * 2 * 4) == (char *)0x0) {\n                    undefined8Value = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8Value);\n                    uintValue = uintValue;\nLAB_00107548:\n                    if (uintValue == 2) {\nLAB_0010704f:\n                      charPointer = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  charPointer = (char *)(ulong)(intValue + 1);\n                  longValue = strtol(*(char **)((long)pundefinedPointerPointer + (long)intValue * 2 * 4),(char **)0x0,10)\n                  ;\n                  charPointer = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longValue;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longValue = (long)(int)charPointer;\n              filePointer = (FILE *)charPointer;\n              if (*(long *)(int *)((long)pundefinedPointerPointer + longValue * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer = (FILE *)((long)pundefinedPointerPointer + (longValue + 1) * 2 * 4);\n              if (*(FILE **)filePointer == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer = (FILE *)0x0;\n              }\n              else if (*(long *)((long)pundefinedPointerPointer + (longValue + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)pundefinedPointerPointer + (longValue + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)pundefinedPointerPointer + (longValue + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)pundefinedPointerPointer + (longValue + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer;\n                  filePointer = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)pundefinedPointerPointer + longValue * 2 * 4) + (long)filePointer * 2) !=\n                         0);\n              }\n              undefined8Pointer = (undefined8 *)FUN_00105300();\n              filePointer = filePointer;\n              if (DAT_0010d64c == 5) {\n                charPointer = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer + 0x49) & 0x10) == 0) {\n                  charPointer = (char *)filePointer;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(undefined8Pointer,FUN_00107740,charPointer,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sizeValue = strlen(DAT_0010d628);\n                charPointer = \"__.LIBDEP\";\n                charPointer = (char *)(sizeValue + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Pointer);\n                if (DAT_0010d620 == 0) {\n                  charPointer = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longValue = bfd_find_target(\"binary\",DAT_0010d620);\n                  charPointer = \"Cannot set libdeps record type to binary.\";\n                  if (longValue != 0) {\n                    charValue = bfd_set_format(DAT_0010d620,1,5);\n                    charPointer = \"Cannot set libdeps object format.\";\n                    if (charValue == '\\0') goto LAB_00106803;\n                    charValue = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    charPointer = \"Cannot make libdeps object writable.\";\n                    if (charValue == '\\0') goto LAB_00106803;\n                    filePointer = (FILE *)bfd_bwrite(DAT_0010d628,charPointer,DAT_0010d620);\n                    charPointer = \"Cannot write libdeps record.\";\n                    if (filePointer != (FILE *)charPointer) goto LAB_00106803;\n                    charValue = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    charPointer = \"Cannot make libdeps object readable.\";\n                    if (charValue == '\\0') goto LAB_00106803;\n                    longValue = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    charPointer = \"Cannot reset libdeps record type.\";\n                    if (longValue == 0) goto LAB_00106803;\n                    intValue = (int)pcVar43;\n                    local_130 = (FILE *)((long)(intValue + 2) * 8);\n                    charPointer = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (intValue == 0) {\n                      longValue = 0;\n                    }\n                    else {\n                      undefined4Value = *(undefined4 *)&filePointer->field_0x4;\n                      *(int *)charPointer = filePointer->_flags;\n                      *(undefined4 *)((long)charPointer + 4) = undefined4Value;\n                      longValue = 8;\n                      ppcVar31 = (char **)((long)charPointer + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer->_flags;\n                        filePointer = (FILE *)((long)filePointer + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)charPointer + longValue) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intValue + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)charPointer + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer = (FILE *)charPointer;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                charPointer = (char *)filePointer;\n                if (filePointer == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                charPointer = (char *)filePointer;\n                if ((filePointer != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(undefined8Pointer,charPointer,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                charPointer = (char *)filePointer;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(undefined8Pointer,FUN_00107890,charPointer,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                charPointer = (char *)filePointer;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(undefined8Pointer,FUN_00103a78,charPointer,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                charPointer = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer = (FILE *)(undefined8Pointer + 0x1e);\n                do {\n                  filePointer = filePointer;\n                  if (*(FILE **)filePointer == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(undefined8Pointer);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer = *(long **)filePointer;\n                    charPointer = *(char **)filePointer;\n                    if (longPointer == (long *)0x0) {\n                      undefined8Value = *undefined8Pointer;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(uVar30,charPointer,undefined8Value);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longValue = *longPointer;\n                    undefined8Value = FUN_00105830(charPointer,undefined8Pointer);\n                    intValue = filename_cmp(undefined8Value,longValue);\n                    if (intValue == 0) break;\n                    filePointer = (FILE *)(*(long **)filePointer + 0x1e);\n                  }\n                  *(long **)filePointer = (long *)longPointer[0x1e];\n                  pplVar29 = (long **)FUN_00105870(filePointer,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  longPointer = *pplVar29;\n                  *pplVar29 = longPointer;\n                  longPointer[0x1e] = (long)longPointer;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer);\n                  }\n                  filePointer = (FILE *)&filePointer->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intValue = fileno(_stdin);\n          _DAT_0010d608 = isatty(intValue);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Value = bfd_get_error();\n        filePointer = (FILE *)bfd_errmsg(undefined4Value);\n        undefined8Value = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intValue = FUN_00107690(undefined8Value,\"x86_64-pc-linux-gnu\",filePointer);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          pundefinedPointerPointer = (undefined **)charPointer;\n          filePointer = (FILE *)charPointer;\n          switch(intValue) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintValue = (uint)filePointer;\n            charPointer = \"libdeps specified more than once\";\n            charPointer = (char *)filePointer;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        charPointer = \"two different operation options specified\";\n        charPointer = (char *)filePointer;\nLAB_00106803:\n        undefined8Value = dcgettext(0,charPointer,5);\n        FUN_00107690(undefined8Value);\nLAB_00106814:\n        intValue = (int)charPointer;\n        filePointer = (FILE *)xmalloc(8);\n        *(long **)filePointer = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intValue = 0;\n          }\n          else {\n            longValue = 1;\n            do {\n              intValue = (int)longValue;\n              longValue = longValue * 2;\n              longValue = longValue + 1;\n            } while (*(long *)((int *)pcVar43 + longValue) != 0);\n          }\n          filePointer = (FILE *)xmalloc((long)(intValue + 1) << 3);\n          longPointer = *(long **)pcVar43;\n          longValue = 0;\n          while (longPointer != (long *)0x0) {\n            undefined8Value = xstrdup();\n            *(undefined8 *)((long)&filePointer->_flags + longValue) = undefined8Value;\n            longPointer = *(long **)((char *)((long)pcVar43 + 0x83) + longValue + -0x7b);\n            longValue = longValue + 8;\n          }\n          *(undefined8 *)((long)&filePointer->_flags + longValue) = 0;\nLAB_0010610a:\n          intValue = (int)charPointer;\n          pcVar43 = (char *)filePointer;\n          if (*(long **)filePointer == (long *)0x0) goto LAB_00106a80;\n          longValue = 0;\n          do {\n            longValue = longValue + 1;\n            longValue = longValue * 8;\n            longValue = longValue;\n          } while (*(long *)(filePointer->_shortbuf + longValue + -0x7b) != 0);\n          local_108 = longValue * 8;\n        }\n        else {\nLAB_00106a80:\n          longValue = 0;\n          local_108 = 0;\n        }\n        longValue = (long)charPointer * 2;\n        charPointer = (char *)((long)(char **)charPointer + longValue);\n        free(*(void **)((int *)pcVar43 + longValue));\n        filePointer = (FILE *)xrealloc(pcVar43,(longValue + 1 + (long)intValue) * 8);\n        uintValue = intValue + -1 + (int)longValue;\n        charPointer = (char *)(ulong)uintValue;\n        memmove(&filePointer->_flags + (long)charPointer * 2,\n                (void *)((long)&filePointer->_IO_read_ptr + (long)local_130),\n                (long)(int)(intValue - uintValue) << 3);\n        memcpy((void *)((long)&local_130->_flags + (long)&filePointer->_flags),filePointer,local_108);\n        free(filePointer);\n        free(local_118);\n        fclose(filePointer);\n        uintValue = (int)local_128 + 1;\n        filePointer = local_130;\n        pcVar43 = (char *)filePointer;\n        local_130 = filePointer;\n        if ((int)uintValue < (int)uintValue) goto LAB_001061ce;\n      } while( true );\n    }\n    uintValue = uintValue + 1;\n    local_128 = filePointer;\nLAB_001061ce:\n    filePointer = (FILE *)(ulong)uintValue;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intValue = getopt_long((ulong)filePointer & 0xffffffff,charPointer,filePointer,\"x86_64-pc-linux-gnu\");\n  charPointer = (char *)filePointer;\n  if (intValue == -1) goto LAB_00106680;\n  if ((0x14 < intValue - 100U) || ((0x117201UL >> ((byte)(intValue - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Value = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8Value);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)charPointer == (FILE *)0x0) {\n    if ((char)filePointer != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intValue = 0;\n  intValue = strcmp((char *)*(FILE **)charPointer,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer;\n  if (intValue == 0) {\n    *(byte *)((long)undefined8Pointer + 0x49) = *(byte *)((long)undefined8Pointer + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer == (undefined8 *)0x0) break;\n      undefined8Value = *(undefined8 *)*longPointer;\n      uVar30 = FUN_00105830(*(FILE **)charPointer,undefined8Pointer);\n      intValue = filename_cmp(uVar30,undefined8Value);\n      if ((intValue == 0) &&\n         ((DAT_0010d634 == '\\0' || (intValue = intValue + 1, intValue == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)charPointer);\n        }\n        *longPointer = *(long *)(*longPointer + 0xf0);\n        filePointer = filePointer;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer;\n    }\n    if (DAT_0010d60c != 0) {\n      filePointer = *(FILE **)charPointer;\n      charPointer = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(charPointer,filePointer);\n    }\n  }\nLAB_00106d38:\n  charPointer = (char *)((long)charPointer + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00105870",
                "fileno",
                "bfd_set_error_program_name",
                "FUN_0010342d",
                "textdomain",
                "filename_cmp",
                "bfd_check_format_matches",
                "memcpy",
                "strlen",
                "bfd_plugin_set_plugin",
                "FUN_001075e0",
                "FUN_00107c10",
                "FUN_00105300",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "bfd_close",
                "strtol",
                "isatty",
                "FUN_00107cc0",
                "FUN_00107730",
                "fread",
                "ferror",
                "bfd_set_error",
                "dcgettext",
                "fopen",
                "bindtextdomain",
                "FUN_00107c20",
                "free",
                "FUN_00105830",
                "FUN_00107650",
                "lbasename",
                "FUN_00103a78",
                "xstrdup",
                "FUN_00105480",
                "bfd_find_target",
                "FUN_0010394a",
                "open",
                "bfd_make_writable",
                "fseek",
                "fprintf",
                "stat",
                "FUN_001052a0",
                "xrealloc",
                "bfd_make_readable",
                "bfd_set_default_target",
                "FUN_00107740",
                "FUN_00107920",
                "getopt_long",
                "ftell",
                "printf",
                "FUN_00103e95",
                "FUN_00107890",
                "FUN_00107690",
                "fclose",
                "FUN_00103bd1",
                "bfd_set_format",
                "setlocale",
                "xexit",
                "xmalloc",
                "bfd_fdopenr",
                "FUN_00107640",
                "bfd_bwrite",
                "bfd_get_error",
                "FUN_001058b0",
                "bfd_init",
                "strcmp",
                "bfd_create",
                "bfd_plugin_set_program_name",
                "malloc",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_command_line_args_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formats",
                "__format": "formatString",
                "uVar1": "dataValue",
                "plVar2": "formatPtr"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formats)\n\n{\n  undefined8 dataValue;\n  char *formatString;\n  long *formatPtr;\n  \n  fflush(_stdout);\n  dataValue = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,dataValue);\n  for (formatPtr = formats; *formatPtr != 0; formatPtr = formatPtr + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "fflush",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "terminate_program_00107c10",
                "xexit": "exitStatus"
            },
            "code": "\nvoid terminateProgram_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102d2f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "terminate_program_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "open_and_convert_bfd_library_00102710",
                "plVar1": "pointer_to_archived_file",
                "cVar2": "format_check_result",
                "bVar3": "bit_flag",
                "iVar4": "error_code",
                "lVar5": "file_descriptor",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "bfd_library",
                "unaff_RBP": "readable_error_code",
                "in_stack_00000008": "stack_input",
                "stack0x00000008": "stack_argument"
            },
            "code": "\n\n\nundefined8 * open_and_convert_bfd_library_00102710(void)\n\n{\n  long *pointer_to_archived_file;\n  char format_check_result;\n  byte bit_flag;\n  int error_code;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *bfd_library;\n  undefined8 readable_error_code;\n  undefined8 stack_input;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_check_result = bfd_check_format(file_descriptor,1);\n    if (format_check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  bfd_library = (undefined8 *)bfd_openw();\n  if (((bfd_library != (undefined8 *)0x0) && (format_check_result = bfd_set_format(bfd_library,2), format_check_result != '\\0')) &&\n     (format_check_result = bfd_close(bfd_library), format_check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    bit_flag = *(byte *)((long)bfd_library + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (bit_flag != 0) {\n        library_name = *bfd_library;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (bit_flag == 0) {\n      library_name = *bfd_library;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nLAB_001027cb:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(stack_input);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      pointer_to_archived_file = bfd_library + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(bfd_library,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(bfd_library,file_descriptor)) {\n        *pointer_to_archived_file = file_descriptor;\n        pointer_to_archived_file = (long *)(file_descriptor + 0xf0);\n      }\n      *pointer_to_archived_file = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return bfd_library;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nLAB_001053b7:\n        DAT_0010d618 = readable_error_code;\n        bfd_library = (undefined8 *)bfd_openr();\n      } while (bfd_library == (undefined8 *)0x0);\n      format_check_result = bfd_check_format_matches(bfd_library,2,&stack_argument);\n      if (format_check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(bfd_library,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_close",
                "bfd_check_format",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "open_and_convert_bfd_library_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "parse_file_00103e95",
                "pplVar1": "doublePointer",
                "cVar2": "character",
                "ppFVar3": "doublePointerPointer",
                "pFVar4": "filePointer",
                "plVar5": "longPointer",
                "uVar6": "undefined8",
                "pbVar7": "bytePointer",
                "iVar8": "integer",
                "pcVar10": "characterPointer",
                "uVar11": "undefined8",
                "iVar9": "integer",
                "plVar12": "longPointer",
                "sVar13": "size_t",
                "pvVar14": "voidPointer",
                "pcVar15": "characterPointer",
                "pcVar16": "characterPointer",
                "lVar17": "long",
                "lVar18": "long",
                "uVar19": "ulong",
                "uVar20": "uint",
                "lVar21": "long",
                "puVar22": "undefined8Pointer",
                "puVar23": "undefined8Pointer",
                "uVar24": "uint",
                "iVar25": "integer",
                "uVar26": "ulong",
                "ppcVar27": "characterPointerPointer",
                "bVar28": "boolean",
                "ppcVar29": "characterPointerPointer",
                "bVar30": "byte",
                "lVar31": "long",
                "pbVar32": "bytePointer",
                "pbVar33": "bytePointer",
                "piVar34": "integerPointer",
                "pbVar35": "bytePointer",
                "iVar37": "integer",
                "auVar40": "undefinedArray16",
                "auVar41": "undefinedArray16",
                "local_828": "characterPointer",
                "local_820": "characterPointer",
                "local_818": "long",
                "local_810": "characterPointerPointer",
                "local_800": "integer",
                "local_7fc": "uint",
                "local_7f8": "bytePointer",
                "local_7d0": "stat",
                "local_740": "characterArray200",
                "local_678": "characterArray201"
            },
            "code": "\n\n\nvoid parseFile_00103e95(void)\n\n{\n  long **doublePointer;\n  char character;\n  FILE **doublePointerPointer;\n  FILE *filePointer;\n  long *longPointer;\n  undefined8 undefined8;\n  byte *bytePointer;\n  int integer;\n  char *characterPointer;\n  undefined8 undefined8;\n  int integer;\n  long *longPointer;\n  size_t size_t;\n  void *voidPointer;\n  char *characterPointer;\n  char *characterPointer;\n  long long;\n  long long;\n  ulong ulong;\n  uint uint;\n  long long;\n  undefined8 *undefined8Pointer;\n  undefined8 *undefined8Pointer;\n  uint uint;\n  int integer;\n  ulong ulong;\n  char **characterPointerPointer;\n  bool boolean;\n  char **characterPointerPointer;\n  byte byte;\n  long long;\n  byte *bytePointer;\n  byte *bytePointer;\n  int *integerPointer;\n  byte *bytePointer;\n  uint uVar36;\n  int integer;\n  char **ppcVar38;\n  byte bVar39;\n  undefined undefinedArray16 [16];\n  undefined undefinedArray16 [16];\n  char *characterPointer;\n  char *characterPointer;\n  long long;\n  char **characterPointerPointer;\n  int integer;\n  uint uint;\n  byte *bytePointer;\n  stat stat;\n  char characterArray200 [200];\n  char *characterArray201 [201];\n  \n  bVar39 = 0;\n  long = 0;\n  DAT_0010d550 = -2;\n  characterPointerPointer = characterArray201;\n  integer = 0;\n  characterPointer = characterArray200;\n  long = 200;\n  characterPointer = characterPointer;\n  characterPointerPointer = characterPointerPointer;\nLAB_00103ee9:\n  *characterPointer = (char)long;\n  if (characterPointer + long + -1 <= characterPointer) {\n    long = (long)characterPointer - (long)characterPointer;\n    long = long + 1;\n    if (long < 10000) {\n      long = long * 2;\n      long = 10000;\n      if (long < 0x2711) {\n        long = long;\n      }\n      characterPointer = (char *)malloc(long * 9 + 7);\n      if (characterPointer != (char *)0x0) {\n        long = long * 8;\n        characterPointer = characterPointer;\n        characterPointer = characterPointer;\n        for (; long != 0; long = long + -1) {\n          *characterPointer = *characterPointer;\n          characterPointer = characterPointer + (ulong)bVar39 * -2 + 1;\n          characterPointer = characterPointer + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(characterPointer + long);\n        characterPointerPointer = ppcVar38;\n        for (; long != 0; long = long + -1) {\n          *(undefined *)characterPointerPointer = *(undefined *)characterPointerPointer;\n          characterPointerPointer = (char **)((long)characterPointerPointer + (ulong)bVar39 * -2 + 1);\n          characterPointerPointer = (char **)((long)characterPointerPointer + (ulong)bVar39 * -2 + 1);\n        }\n        if (characterPointer != characterArray200) {\n          free(characterPointer);\n        }\n        characterPointer = characterPointer + long;\n        characterPointerPointer = ppcVar38 + long;\n        characterPointer = characterPointer;\n        characterPointerPointer = ppcVar38;\n        if (characterPointer + long + -1 <= characterPointer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    characterPointer = characterPointer;\n    if (characterPointer == characterArray200) {\n      return;\n    }\nLAB_00105265:\n    free(characterPointer);\n    return;\n  }\nLAB_00103fd8:\n  integer = (int)long;\n  if (integer == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[integer];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          undefined8Pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          undefined8 = FUN_001033d6(DAT_0010d590);\n          *undefined8Pointer = undefined8;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      bytePointer = DAT_0010d5b0;\n      bytePointer = DAT_0010d5b0;\n      uint = DAT_0010d5d0;\nLAB_001040d4:\n      ulong = (ulong)uint;\n      ulong = (ulong)uint;\n      boolean = false;\n      do {\n        byte = (&DAT_0010ab00)[*bytePointer];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong * 2) != 0) {\n          boolean = true;\n          ulong = ulong & 0xffffffff;\n          bytePointer = bytePointer;\n        }\n        while( true ) {\n          integer = (int)ulong;\n          long = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integer * 2) + (uint)byte);\n          if (integer == *(short *)(&DAT_0010a440 + long * 2)) break;\n          ulong = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integer * 2)) {\n            byte = (&DAT_0010a7c0)[(int)(uint)byte];\n          }\n        }\n        bytePointer = bytePointer + 1;\n        ulong = (ulong)*(short *)(&DAT_0010a240 + long * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong * 2) != 0xc2);\n      uint = (uint)ulong;\n      bytePointer = bytePointer;\n      if (boolean) {\n        DAT_0010d5b8 = bytePointer;\n        DAT_0010d5c0 = uint;\n      }\nLAB_0010419f:\n      integer = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong * 2);\n      if (integer == 0) {\n        integer = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        bytePointer = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)bytePointer - (int)bytePointer;\n      DAT_0010d588 = *bytePointer;\n      DAT_0010d5b0 = bytePointer;\n      DAT_0010d5c8 = bytePointer;\n      *bytePointer = 0;\nLAB_001041f0:\n      bytePointer = DAT_0010d5c8;\n      long = DAT_0010d5a0;\n      switch(integer) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long = (long)integer;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        integer = 2;\n        if (DAT_0010d550 < 0x114) {\n          integer = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    integer = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint = character + integer;\n    if ((0x22 < uint) || (integer != (char)(&DAT_0010a0a0)[(int)uint])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)uint];\n    long = (long)character;\n    if (character < '\\x01') {\n      integer = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    integer = integer + -1 + (uint)(integer == 0);\n    characterPointerPointer = characterPointerPointer + 1;\n    *characterPointerPointer = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  integer = (int)(char)(&DAT_0010a020)[(int)long];\n  if ((&DAT_0010a020)[(int)long] == '\\0') {\n    if (integer == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long] != -0xe) &&\n             (uint = (int)(char)(&DAT_0010a200)[long] + 1, uint < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint] == '\\x01')) &&\n           (long = (long)(char)(&DAT_0010a060)[(int)uint],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint])) goto LAB_00105227;\n        if (characterPointer == characterPointer) goto LAB_0010524c;\n        characterPointer = characterPointer + -1;\n        characterPointerPointer = characterPointerPointer + -1;\n        long = (long)*characterPointer;\n      } while( true );\n    }\n    if (integer != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined8 = DAT_0010d660;\n  characterPointerPointer = DAT_0010d558;\n  character = (&DAT_00109fe0)[integer];\n  ppcVar38 = (char **)characterPointerPointer[1 - character];\n  switch(integer) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    undefined8Pointer = (undefined8 *)*characterPointerPointer;\n    if (DAT_0010d558 == (char **)0x0) {\n      characterPointer = \"%s: no open archive\\n\";\nLAB_00104b62:\n      characterPointer = (char *)dcgettext(0,characterPointer,5);\n      fprintf(_stderr,characterPointer,undefined8);\n      FUN_0010315d();\n    }\n    else {\n      for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n        for (undefined8Pointer = (undefined8 *)DAT_0010d558[0x1f]; undefined8Pointer != (undefined8 *)0x0;\n            undefined8Pointer = (undefined8 *)undefined8Pointer[0x1e]) {\n          integer = filename_cmp(*undefined8Pointer);\n          if (integer == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*undefined8Pointer,0);\n        undefined8 = DAT_0010d660;\n        undefined8 = *undefined8Pointer;\n        characterPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,characterPointer,undefined8,undefined8);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    undefined8Pointer = (undefined8 *)*characterPointerPointer;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      characterPointer = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n      boolean = false;\n      characterPointerPointer = DAT_0010d558 + 0x1f;\n      for (characterPointer = DAT_0010d558[0x1f]; characterPointer != (char *)0x0;\n          characterPointer = *(char **)(characterPointer + 0xf0)) {\n        integer = filename_cmp();\n        if (integer == 0) {\n          characterPointer = (char *)bfd_openr(*undefined8Pointer,0);\n          undefined8 = DAT_0010d660;\n          if (characterPointer == (char *)0x0) {\n            undefined8 = *undefined8Pointer;\n            characterPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,characterPointer,undefined8,undefined8);\n            FUN_0010315d();\n          }\n          else {\n            *characterPointerPointer = characterPointer;\n            boolean = true;\n            *(undefined8 *)(characterPointer + 0xf0) = *(undefined8 *)(characterPointer + 0xf0);\n          }\n        }\n        else {\n          characterPointerPointer = (char **)(characterPointer + 0xf0);\n        }\n      }\n      if (!boolean) {\n        characterPointer = (char *)bfd_openr(*undefined8Pointer,0);\n        undefined8 = DAT_0010d660;\n        undefined8 = *undefined8Pointer;\n        characterPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,characterPointer,undefined8,undefined8);\n        undefined8 = DAT_0010d660;\n        if (characterPointer == (char *)0x0) {\n          undefined8 = *undefined8Pointer;\n          characterPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,characterPointer,undefined8,undefined8);\n          FUN_0010315d();\n        }\n        else {\n          *characterPointerPointer = characterPointer;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    undefined8Pointer = (undefined8 *)*characterPointerPointer;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n      boolean = false;\n      characterPointerPointer = DAT_0010d558 + 0x1f;\n      for (undefined8Pointer = (undefined8 *)DAT_0010d558[0x1f]; undefined8 = DAT_0010d660,\n          undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[0x1e]) {\n        integer = filename_cmp(*undefined8Pointer,*undefined8Pointer);\n        if (integer == 0) {\n          boolean = true;\n          *characterPointerPointer = (char *)undefined8Pointer[0x1e];\n        }\n        else {\n          characterPointerPointer = (char **)(undefined8Pointer + 0x1e);\n        }\n      }\n      if (!boolean) {\n        undefined8 = *undefined8Pointer;\n        characterPointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,characterPointer,undefined8,undefined8);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    undefined8Pointer = (undefined8 *)*characterPointerPointer;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8Pointer != (undefined8 *)0x0; undefined8Pointer = (undefined8 *)undefined8Pointer[1]) {\n      characterPointer = (char *)bfd_openr(*undefined8Pointer,\"plugin\");\n      undefined8 = DAT_0010d660;\n      characterPointerPointer = DAT_0010d558;\n      if (characterPointer == (char *)0x0) {\n        undefined8 = *undefined8Pointer;\n        characterPointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,characterPointer,undefined8,undefined8);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(characterPointer + 0xf0) = DAT_0010d558[0x1f];\n        characterPointerPointer[0x1f] = characterPointer;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    characterPointer = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    characterPointer = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(characterPointer,characterPointer);\n    for (characterPointer = DAT_0010d558[0x1f]; characterPointer != (char *)0x0; characterPointer = *(char **)(characterPointer + 0xf0))\n    {\n      FUN_00103ddc(characterPointer,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(characterPointerPointer);\n    characterPointer = DAT_0010d570;\n    integer = stat(DAT_0010d570,&stat);\n    if ((integer != 0) && (DAT_0010d558 = (char **)bfd_openw(characterPointer,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*characterPointerPointer,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*characterPointerPointer,1);\n    break;\n  case 0x20:\n    characterPointer = *characterPointerPointer;\n    if (DAT_0010d558 == (char **)0x0) {\n      characterPointer = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long = FUN_00105300(characterPointerPointer[-1],0);\n    if (long != 0) {\n      FUN_001032a8(long,FUN_0010312d,characterPointer);\n    }\n    break;\n  case 0x21:\n    characterPointer = *characterPointerPointer;\n    characterPointer = characterPointerPointer[-1];\n    undefined8 = FUN_00105300(characterPointerPointer[-2],0);\n    if (characterPointer == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(characterPointer,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(undefined8,FUN_00103ddc,characterPointer);\n        bfd_close(undefined8);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      characterPointer = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,characterPointer,characterPointer);\n    }\n    FUN_001032a8(undefined8,FUN_00103ddc,characterPointer);\n    bfd_close(undefined8);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*characterPointerPointer;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)characterPointerPointer[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    characterPointer = characterPointerPointer[-2];\n    *ppcVar38 = *characterPointerPointer;\n    ppcVar38[1] = characterPointer;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  long = (long)character;\n  characterPointer = characterPointer + -long;\n  characterPointerPointer[1 - long] = (char *)ppcVar38;\n  characterPointerPointer = characterPointerPointer + (1 - long);\n  uint = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[integer] + -0x18] + (int)*characterPointer;\n  if ((uint < 0x23) && (*characterPointer == (&DAT_0010a0a0)[(int)uint])) {\n    long = (long)(char)(&DAT_0010a060)[(int)uint];\n  }\n  else {\n    long = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[integer] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer = ((int)bytePointer - (int)DAT_0010d5c8) + -1;\n  *bytePointer = DAT_0010d588;\n  doublePointer = (long **)(DAT_0010d5a8 + long * 8);\n  doublePointerPointer = (FILE **)*doublePointer;\n  if (*(int *)(doublePointerPointer + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)doublePointerPointer + 0x1c);\n    *(undefined4 *)(doublePointerPointer + 7) = 1;\n    *doublePointerPointer = DAT_0010d590;\n  }\n  bytePointer = DAT_0010d5b0;\n  filePointer = doublePointerPointer[1];\n  undefinedArray16._8_8_ = filePointer;\n  undefinedArray16._0_8_ = doublePointerPointer;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefinedArray16 = FUN_001033b0();\n    }\n    if (*(int *)(undefinedArray16._0_8_ + 0x34) != 0) {\n      uint = (int)((long)bytePointer - (long)bytePointer) - 1;\n      for (long = 0; (int)long < (int)uint; long = long + 1) {\n        *(byte *)(undefinedArray16._8_8_ + long) = bytePointer[long];\n      }\n      longPointer = *doublePointer;\n      if (*(int *)(longPointer + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)longPointer + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = DAT_0010d590;\n        if (uint == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            undefined8Pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            undefined8 = FUN_001033d6(filePointer);\n            *undefined8Pointer = undefined8;\n          }\n          long = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integer = 1;\n          FUN_001031cf(long);\n          FUN_001030ed();\n        }\n        else {\n          integer = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longPointer = *doublePointer;\n          uint = ~uint + *(int *)(longPointer + 3);\n          if (0 < (int)uint) break;\n          uint = (int)DAT_0010d5b0 - (int)(void *)longPointer[1];\n          if (*(int *)(longPointer + 4) == 0) {\n            longPointer[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          integer = *(int *)(longPointer + 3);\n          integer = integer;\n          if (integer < 1) {\n            integer = integer / 8;\n          }\n          *(int *)(longPointer + 3) = integer + integer;\n          voidPointer = realloc((void *)longPointer[1],(long)(integer + integer + 2));\n          longPointer[1] = (long)voidPointer;\n          if (voidPointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)voidPointer + (long)(int)uint);\n          longPointer = *doublePointer;\n        }\n        if (0x2000 < (int)uint) {\n          uint = 0x2000;\n        }\n        ulong = (ulong)uint;\n        if (*(int *)((long)longPointer + 0x24) == 0) {\n          integerPointer = __errno_location();\n          ulong = (ulong)(int)uint;\n          ulong = (ulong)(int)uint;\n          *integerPointer = 0;\n          goto LAB_001046c7;\n        }\n        ulong = 0;\n        integerPointer = (int *)(long)(int)uint;\n        do {\n          integer = getc(DAT_0010d590);\n          uVar36 = (uint)ulong;\n          if (integer == -1) {\n            integer = ferror(DAT_0010d590);\n            uint = uVar36;\n            if (integer != 0) {\n              do {\n                characterPointer = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *integerPointer = 0;\n                  clearerr((FILE *)characterPointer);\nLAB_001046c7:\n                  size_t = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong),1,ulong,DAT_0010d590);\n                  characterPointer = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_t;\n                  uint = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integer = ferror(DAT_0010d590), uint = DAT_0010d598, integer == 0))\n                  goto LAB_00104738;\n                } while (*integerPointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integer == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint = uVar36 + 1;\n            break;\n          }\n          ulong = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)integerPointer) =\n               (char)integer;\n          integerPointer = (int *)((long)integerPointer + 1);\n        } while (uint != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uint;\n        uint = DAT_0010d598;\n        integer = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint == 0) goto LAB_0010475e;\n      }\n      longPointer = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long = *longPointer;\n      uint = uint + DAT_0010d598;\n      if (*(int *)(long + 0x18) < (int)uint) {\n        integer = ((int)DAT_0010d598 >> 1) + uint;\n        voidPointer = realloc(*(void **)(long + 8),(long)integer);\n        *(void **)(long + 8) = voidPointer;\n        undefinedArray16._8_8_ = longPointer;\n        undefinedArray16._0_8_ = *longPointer;\n        if (*(long *)(*longPointer + 8) == 0) {\n          undefinedArray16 = FUN_001033b0();\n        }\n        longPointer = undefinedArray16._8_8_;\n        *(int *)(undefinedArray16._0_8_ + 0x18) = integer + -2;\n      }\n      DAT_0010d598 = uint;\n      *(undefined *)(*(long *)(*longPointer + 8) + (long)(int)uint) = 0;\n      *(undefined *)(*(long *)(*longPointer + 8) + 1 + (long)(int)uint) = 0;\n      bytePointer = *(byte **)(*longPointer + 8);\n      DAT_0010d5c8 = bytePointer;\n      if (integer == 1) goto LAB_001048a4;\n      if (integer == 2) goto LAB_001048ca;\n      bytePointer = bytePointer + integer;\n      DAT_0010d5b0 = bytePointer;\n      uint = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)bytePointer == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointer = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = bytePointer;\n    ulong = FUN_0010300e();\n    bytePointer = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  bytePointer = bytePointer + integer;\n  DAT_0010d5b0 = bytePointer;\n  ulong = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong * 2) != 0) {\n    DAT_0010d5b8 = bytePointer;\n    DAT_0010d5c0 = (uint)ulong;\n  }\n  ulong = ulong & 0xffffffff;\n  while( true ) {\n    integer = (int)ulong;\n    if (integer == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2)) break;\n    ulong = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n  }\n  uint = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2);\n  bytePointer = bytePointer;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2) == 0)\n     || (uint == 0xb0)) goto LAB_0010419f;\n  bytePointer = bytePointer + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointer = DAT_0010d588;\n  ulong = (ulong)DAT_0010d5c0;\n  bytePointer = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  characterPointerPointer = characterPointerPointer + 1;\n  integer = 3;\n  *characterPointerPointer = DAT_0010d548;\nLAB_001049d1:\n  characterPointer = characterPointer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "FUN_0010312d",
                "bfd_openw",
                "FUN_001031cf",
                "dup",
                "fprintf",
                "stat",
                "FUN_001033d6",
                "FUN_00107740",
                "filename_cmp",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_0010300e",
                "clearerr",
                "printf",
                "fclose",
                "FUN_00105300",
                "bfd_set_format",
                "bfd_close",
                "getc",
                "fwrite",
                "__errno_location",
                "fread",
                "bfd_openr",
                "ferror",
                "dcgettext",
                "FUN_001033b0",
                "fopen",
                "FUN_00103df9",
                "FUN_001030ed",
                "bfd_cache_close",
                "FUN_0010315d",
                "FUN_00105bc0",
                "FUN_00103c60",
                "free",
                "FUN_00103ddc",
                "xstrdup",
                "malloc",
                "FUN_001032a8",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "parse_file_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_functions_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "index",
                "lVar3": "prevIndex",
                "plVar4": "functionPointer",
                "uVar5": "count"
            },
            "code": "\nvoid executeFunctions_00107cc0(void)\n\n{\n  long currentIndex;\n  long index;\n  long prevIndex;\n  long *functionPointer;\n  uint count;\n  \n  functionPointer = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionPointer + 1) - 1;\n      if (-1 < (int)count) {\n        currentIndex = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionPointer[currentIndex + 2])();\n        index = currentIndex + -1;\n        if (-1 < (int)index) {\n          prevIndex = index;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionPointer[currentIndex + 1])();\n                        index = currentIndex + -2;\n                      }\n                      (*(code *)functionPointer[index + 2])();\n                      index = index + -1;\n                    }\n                    (*(code *)functionPointer[index + 2])();\n                    index = index + -1;\n                  }\n                  (*(code *)functionPointer[index + 2])();\n                  index = index + -1;\n                }\n                (*(code *)functionPointer[index + 2])();\n                index = index + -1;\n              }\n              (*(code *)functionPointer[index + 2])();\n              index = index + -1;\n            }\n            (*(code *)functionPointer[index + 2])();\n            prevIndex = index + -1;\n            if ((int)(index + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPointer[prevIndex + 2])();\n            currentIndex = prevIndex + -1;\n            (*(code *)functionPointer[prevIndex + 1])();\n            (*(code *)functionPointer[prevIndex])();\n            (*(code *)functionPointer[currentIndex])();\n            (*(code *)functionPointer[prevIndex + -2])();\n            (*(code *)functionPointer[prevIndex + -3])();\n            (*(code *)functionPointer[prevIndex + -4])();\n            (*(code *)functionPointer[prevIndex + -5])();\n            prevIndex = prevIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionPointer = (long *)*functionPointer;\n    } while (functionPointer != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_data_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data1",
                "param_4": "data2"
            },
            "code": "\nvoid processData_00105ae0(undefined8 input1,undefined8 input2,undefined data1,undefined data2)\n\n{\n  FUN_00105af0(input1,input2,data1,data2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_data_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "process_data_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "count",
                "local_d4": "length",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "value10",
                "local_a8": "value11",
                "local_a0": "value12",
                "local_98": "value13",
                "local_90": "value14",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid processData_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 count;\n  undefined4 length;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 value10;\n  undefined8 value11;\n  undefined8 value12;\n  undefined8 value13;\n  undefined8 value14;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (flag != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  buffer = &stack0x00000008;\n  count = 8;\n  localBuffer = temporaryBuffer;\n  length = 0x30;\n  value10 = param10;\n  value11 = param11;\n  value12 = param12;\n  value13 = param13;\n  value14 = param14;\n  FUN_001078c0(param9,&count);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "process_data_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetPtr",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long targetPtr;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetPtr = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetPtr == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_and_copy_string_00105830",
                "param_1": "input_string",
                "param_2": "source_data",
                "param_3": "arg1",
                "param_4": "arg2",
                "lVar1": "source_data_ptr",
                "sVar2": "input_string_length",
                "__s": "base_name",
                "uVar3": "copy_length",
                "pcVar4": "output_string",
                "bVar5": "is_negative",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extract_and_copy_string_00105830(char *input_string,long source_data,undefined8 arg1,undefined8 arg2)\n\n{\n  long source_data_ptr;\n  size_t input_string_length;\n  char *base_name;\n  ulong copy_length;\n  char *output_string;\n  byte is_negative;\n  undefined result [16];\n  \n  is_negative = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    input_string = base_name;\n    if ((DAT_0010d5fa != '\\0') && (source_data != 0)) {\n      input_string_length = strlen(base_name);\n      copy_length = (ulong)*(byte *)(*(long *)(source_data + 8) + 0x1e);\n      if (copy_length < input_string_length) {\n        input_string = (char *)xmalloc(copy_length + 1);\n        source_data_ptr = *(long *)(source_data + 8);\n        output_string = input_string;\n        for (copy_length = (ulong)*(byte *)(source_data_ptr + 0x1e); copy_length != 0; copy_length = copy_length - 1) {\n          *output_string = *base_name;\n          base_name = base_name + (ulong)is_negative * -2 + 1;\n          output_string = output_string + (ulong)is_negative * -2 + 1;\n        }\n        input_string[*(byte *)(source_data_ptr + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = arg2;\n  result._0_8_ = input_string;\n  return result;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "extract_and_copy_string_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_remove_00107730"
            },
            "code": "\nvoid cleanupAndRemove_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errMsg",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorMessage)\n\n{\n  int error;\n  undefined8 errMsg;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errMsg = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorMessage,errMsg,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errMsg,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePointerPtr",
                "param_2": "filePointer",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errno",
                "piVar4": "errnoLocation",
                "iVar3": "fileDescriptor",
                "uVar2": "isTerminal",
                "FILE": "File",
                "fileno": "getFileDescriptor",
                "isatty": "checkIfTerminal"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(File **filePointerPtr,File *filePointer,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errno;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoLocation;\n  long lVar5;\n  \n  errnoLocation = __errno_location();\n  lVar5 = DAT_0010d5a8;\n  errno = *errnoLocation;\n  if (filePointerPtr == (File **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = filePointer;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePointerPtr == *(File ***)(lVar5 + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePointerPtr + 0x1c) = 0;\n    *(undefined *)&filePointerPtr[1]->_flags = 0;\n    *(undefined *)((long)&filePointerPtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePointerPtr + 5) = 1;\n    filePointerPtr[2] = filePointerPtr[1];\n    *(undefined4 *)(filePointerPtr + 7) = 0;\n    if (lVar5 != 0) {\n      if (filePointerPtr == *(File ***)(lVar5 + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *filePointerPtr = filePointer;\n      *(undefined4 *)((long)filePointerPtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePointerPtr = filePointer;\n    *(undefined4 *)((long)filePointerPtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePointerPtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (filePointer != (File *)0x0) {\n    fileDescriptor = fileno(filePointer);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePointerPtr + 0x24) = isTerminal;\n  *errnoLocation = errno;\n  return param5;\n}\n\n",
            "called": [
                "isatty",
                "__errno_location",
                "fileno",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "reverse_and_save_data_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "fileName",
                "_Var3": "fileOffset",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "errorNumber",
                "piVar6": "pointerToErrorNumber",
                "iVar2": "returnValue",
                "__fd": "outputFileDescriptor",
                "auStack_2038": "buffer"
            },
            "code": "\nulong reverseAndSaveData_00105c00(int fileDescriptor,char *fileName)\n\n{\n  int errorNumber;\n  int outputFileDescriptor;\n  int returnValue;\n  __off_t fileOffset;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *pointerToErrorNumber;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (fileOffset = lseek(fileDescriptor,0,0), fileOffset == 0)) {\n    outputFileDescriptor = open(fileName,0x201);\n    if (outputFileDescriptor < 0) {\n      bytesRead = FUN_00102f55();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(fileDescriptor,buffer,0x2000);\n      returnValue = (int)bytesRead;\n      if (returnValue < 1) {\n        pointerToErrorNumber = __errno_location();\n        errorNumber = *pointerToErrorNumber;\n        close(fileDescriptor);\n        close(outputFileDescriptor);\n        if (returnValue != 0) {\n          *pointerToErrorNumber = errorNumber;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(outputFileDescriptor,buffer,(long)returnValue);\n    } while (bytesWritten == (long)returnValue);\n    pointerToErrorNumber = __errno_location();\n    returnValue = *pointerToErrorNumber;\n    close(fileDescriptor);\n    close(outputFileDescriptor);\n    *pointerToErrorNumber = returnValue;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "write",
                "close",
                "open",
                "FUN_00102f55",
                "__errno_location",
                "lseek",
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "reverse_and_save_data_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_stats_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileStats_001052a0(char *filePath)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_stats_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionText"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionText;\n  \n  optionText = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionText);\n  optionText = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00103ba8",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103172",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_archive_00103c60",
                "param_1": "input_archive",
                "param_2": "create_output",
                "cVar1": "check_result",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_bfd",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "archive_list"
            },
            "code": "\n\n\nvoid extract_archive_00103c60(char *input_archive,int create_output)\n\n{\n  char check_result;\n  int *errno_ptr;\n  char *error_message;\n  long input_bfd;\n  long archived_file;\n  undefined8 program_name;\n  long *archive_list;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_ptr = __errno_location();\n    input_archive = strerror(*errno_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive = DAT_0010d560;\n    }\n    else {\n      if (create_output != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_bfd = bfd_openr(input_archive,\"plugin\");\n      if (input_bfd == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        check_result = bfd_check_format(input_bfd,2);\n        if (check_result != '\\0') {\n          archive_list = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_bfd,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_bfd,archived_file)) {\n            *archive_list = archived_file;\n            archive_list = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_archive);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "FUN_0010315d",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "bfd_check_format",
                "bfd_openr",
                "strerror",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "fprintf",
                "FUN_001057a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "create_and_write_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid createAndWriteToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "create_and_write_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "archive_directory",
                "param_2": "file_to_extract",
                "param_3": "extract_flag",
                "param_4": "check_format_flag",
                "cVar1": "is_valid_format",
                "uVar2": "extracted_file",
                "lVar3": "archived_file",
                "uVar4": "result",
                "bfd_check_format": "check_bfd_format",
                "bfd_openr_next_archived_file": "get_next_archived_file"
            },
            "code": "\nulong extract_archived_files_00105af0(long *archive_directory,long file_to_extract,char extract_flag,char check_format_flag)\n\n{\n  char is_valid_format;\n  uint extracted_file;\n  long archived_file;\n  ulong result;\n  \n  if (check_format_flag == '\\0') {\n    if (extract_flag != '\\0') {\n      result = FUN_00102f08();\n      return result;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(file_to_extract,2);\n    if (is_valid_format != '\\0') {\n      result = 0;\n      for (archived_file = bfd_openr_next_archived_file(file_to_extract,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(file_to_extract,archived_file)) {\n        extracted_file = extract_archived_files_00105af0(archive_directory,archived_file,extract_flag,1);\n        if ((char)extracted_file != '\\0') {\n          result = (ulong)extracted_file;\n          archive_directory = (long *)(*archive_directory + 0xf0);\n        }\n      }\n      return result;\n    }\n    if (extract_flag != '\\0') {\n      result = FUN_00102f08();\n      return result;\n    }\n  }\n  *(long *)(file_to_extract + 0xf0) = *archive_directory;\n  *archive_directory = file_to_extract;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_001028ed",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "process_data_0010300e",
                "bVar1": "hasNonZeroValue",
                "iVar2": "currentValue",
                "lVar3": "updatedValue",
                "bVar4": "lookupValue",
                "pbVar5": "currentByte",
                "in_R9": "resultByte",
                "in_R10D": "resultValue"
            },
            "code": "\nvoid processData_0010300e(void)\n\n{\n  bool hasNonZeroValue;\n  int currentValue;\n  long updatedValue;\n  byte lookupValue;\n  byte *currentByte;\n  byte *resultByte;\n  int resultValue;\n  \n  hasNonZeroValue = false;\n  currentValue = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    lookupValue = 1;\n    if (*currentByte != 0) {\n      lookupValue = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentValue * 2) != 0) {\n      hasNonZeroValue = true;\n      resultByte = currentByte;\n      resultValue = currentValue;\n    }\n    while( true ) {\n      updatedValue = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentValue * 2) + (uint)lookupValue);\n      if (*(short *)(&DAT_0010a440 + updatedValue * 2) == currentValue) break;\n      currentValue = (int)*(short *)(&DAT_0010a800 + (long)currentValue * 2);\n      if (0xb0 < currentValue) {\n        lookupValue = (&DAT_0010a7c0)[(int)(uint)lookupValue];\n      }\n    }\n    currentValue = (int)*(short *)(&DAT_0010a240 + updatedValue * 2);\n  }\n  if (hasNonZeroValue) {\n    DAT_0010d5b8 = resultByte;\n    DAT_0010d5c0 = resultValue;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_data_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "deallocate_memory_00102ba1",
                "unaff_RBP": "memoryBlock",
                "unaff_retaddr": "returnAddress",
                "auVar1": "result"
            },
            "code": "\nundefined  [16] deallocateMemory_00102ba1(void)\n\n{\n  undefined result [16];\n  void *memoryBlock;\n  ulong returnAddress;\n  \n  free(memoryBlock);\n  result._8_8_ = 0;\n  result._0_8_ = returnAddress;\n  return result << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "deallocate_memory_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "process_archive_00107740",
                "param_1": "input",
                "iVar1": "result",
                "iVar2": "statError",
                "piVar3": "errnoPtr",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "archivePtr",
                "__ptr": "buffer",
                "__n": "readSize",
                "lVar7": "counter",
                "plVar8": "filePtr",
                "puVar9": "localArrayPtr",
                "uVar10": "bytesRead",
                "sVar11": "writeSize",
                "local_c8": "localArray",
                "_Stack_b0": "filePermission",
                "uStack_98": "archiveSize",
                "uStack_80": "errorMessage1",
                "uStack_70": "errorMessage2"
            },
            "code": "\n\n\nlong * processArchive_00107740(long **input)\n\n{\n  int result;\n  int statError;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  long **archivePtr;\n  void *buffer;\n  size_t readSize;\n  long counter;\n  long *filePtr;\n  undefined4 *localArrayPtr;\n  ulong bytesRead;\n  size_t writeSize;\n  undefined4 localArray [6];\n  __mode_t filePermission;\n  ulong archiveSize;\n  undefined8 errorMessage1;\n  undefined8 errorMessage2;\n  \n  if (_DAT_0010d600 != 0) {\n    localArrayPtr = localArray;\n    for (counter = 0x24; counter != 0; counter = counter + -1) {\n      *localArrayPtr = 0;\n      localArrayPtr = localArrayPtr + 1;\n    }\n  }\n  archivePtr = (long **)input[0x1d];\n  if ((long **)input[0x1d] == (long **)0x0) {\n    archivePtr = input;\n  }\n  statError = (*(code *)archivePtr[1][0x3d])(input,localArray);\n  if (statError != 0) {\n    filePtr = *input;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    statError = FUN_00107690(errorMessage,filePtr);\n    errorMessage = DAT_0010d638;\n    if (statError == 3) {\n      for (; *filePtr != 0; filePtr = (long *)(*filePtr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*filePtr != (undefined8 *)0x0; filePtr = (long *)(*filePtr + 0xf0)) {\n        result = filename_cmp(*(undefined8 *)*filePtr,errorMessage);\n        if (result == 0) {\n          if (statError != 2) {\n            return filePtr;\n          }\n          return (long *)(*filePtr + 0xf0);\n        }\n      }\n    }\n    return filePtr;\n  }\n  bfd_seek(input,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*input);\n  }\n  else {\n    bytesRead = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      writeSize = archiveSize - bytesRead;\n      if (0x2000 < writeSize) {\n        writeSize = 0x2000;\n      }\n      readSize = bfd_bread(buffer,writeSize,input);\n      if (writeSize != readSize) {\nLAB_00102c78:\n        input = (long **)*input[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,input);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*input);\n      }\n      writeSize = fwrite(buffer,1,readSize,DAT_0010d5d8);\n      if (writeSize != readSize) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesRead = bytesRead + readSize;\n    } while (bytesRead < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermission);\n  if (_DAT_0010d600 != 0) {\n    errorMessage1 = errorMessage2;\n    FUN_00107c80(errorString,localArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "byteValue",
                "cVar2": "charValue",
                "iVar3": "returnValue",
                "__format": "formatString",
                "uVar4": "fileType",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12": "timeData",
                "unaff_R13": "buffer1",
                "unaff_R14D": "duplicateFD",
                "uStack0000000000000015": "symbol1",
                "cStack0000000000000016": "symbol2",
                "cStack0000000000000017": "symbol3",
                "in_stack_00000018": "symbol4",
                "cStack0000000000000019": "symbol5",
                "cStack000000000000001a": "symbol6",
                "cStack000000000000001b": "symbol7",
                "cStack000000000000001c": "symbol8",
                "cStack000000000000001d": "symbol9",
                "cStack000000000000001e": "symbol10",
                "uStack000000000000001f": "flag",
                "uStack0000000000000068": "permissions",
                "uStack000000000000006c": "fileOwner",
                "in_stack_00000070": "fileGroup",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte byteValue;\n  char charValue;\n  int returnValue;\n  char *formatString;\n  uint fileType;\n  char **fileInfo;\n  FILE *outputFile;\n  long timeData;\n  void *buffer1;\n  int duplicateFD;\n  undefined symbol1;\n  char symbol2;\n  char symbol3;\n  char symbol4;\n  char symbol5;\n  char symbol6;\n  char symbol7;\n  char symbol8;\n  char symbol9;\n  char symbol10;\n  undefined flag;\n  uint permissions;\n  uint fileOwner;\n  uint fileGroup;\n  undefined8 fileSize;\n  \n  do {\n    byteValue = FUN_00107c10();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(timeData + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = byteValue | 0x10;\n    }\n    charValue = bfd_set_archive_head();\n  } while (charValue == '\\0');\n  dup(duplicateFD);\n  charValue = bfd_close();\n  if (charValue != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    returnValue = FUN_00105bc0();\n    if (returnValue == 0) {\n      free(buffer1);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,formatString);\n  fileType = permissions & 0xf000;\n  if (fileType == 0x4000) {\n    symbol1 = 100;\n  }\n  else if (fileType == 0xa000) {\n    symbol1 = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    symbol1 = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    symbol1 = 99;\n  }\n  else if (fileType == 0xc000) {\n    symbol1 = 0x73;\n  }\n  else {\n    symbol1 = 0x70;\n    if (fileType != 0x1000) {\n      symbol1 = 0x2d;\n    }\n  }\n  symbol2 = (-((permissions & 0x100) == 0) & 0xbbU) + 0x72;\n  symbol3 = (-((permissions & 0x80) == 0) & 0xb6U) + 0x77;\n  symbol4 = (-((permissions & 0x40) == 0) & 0xb5U) + 0x78;\n  symbol5 = (-((permissions & 0x20) == 0) & 0xbbU) + 0x72;\n  symbol6 = (-((permissions & 0x10) == 0) & 0xb6U) + 0x77;\n  symbol7 = (-((permissions & 8) == 0) & 0xb5U) + 0x78;\n  symbol8 = (-((permissions & 4) == 0) & 0xbbU) + 0x72;\n  symbol9 = (-((permissions & 2) == 0) & 0xb6U) + 0x77;\n  symbol10 = (-((permissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((permissions & 0x800) != 0) {\n    if (symbol4 == 'x') {\n      symbol4 = 's';\n    }\n    else {\n      symbol4 = 'S';\n    }\n  }\n  if ((permissions & 0x400) != 0) {\n    if (symbol7 == 'x') {\n      symbol7 = 's';\n    }\n    else {\n      symbol7 = 'S';\n    }\n  }\n  if ((permissions & 0x200) != 0) {\n    if (symbol10 == 'x') {\n      symbol10 = 't';\n    }\n    else {\n      symbol10 = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileOwner,\n          (ulong)fileGroup,fileSize,&stack0x00000020,(ulong)permissions)\n  ;\n  fputs(*fileInfo,outputFile);\n  if ((char)timeData != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "bfd_set_archive_head",
                "xexit",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "dup",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "arg1",
                "param_2": "arg2",
                "uVar1": "result",
                "bVar2": "status",
                "iVar3": "comparisonResult",
                "sVar4": "length",
                "piVar5": "errnoLocation",
                "pcVar6": "filename1",
                "pcVar7": "basename1",
                "ppcVar8": "effectArg",
                "uVar9": "effectResult",
                "lVar10": "currentNode",
                "__s": "basename1Alt",
                "__s_00": "basename2",
                "lVar11": "previousNode",
                "uVar12": "filenameConstant",
                "uVar13": "byteConstant",
                "unaff_RBX": "filename",
                "ppcVar14": "current",
                "unaff_RBP": "fileList",
                "unaff_R12": "node",
                "unaff_R13D": "fileListOperation",
                "ppcVar15": "next",
                "unaff_R14": "fileRecordList",
                "bVar16": "flag",
                "bVar17": "byteConstant2",
                "param_7": "fileNames",
                "param_9": "effectArg2",
                "in_stack_00000078": "variable1",
                "in_stack_00000108": "variable2"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 arg1,long arg2)\n\n{\n  undefined result;\n  byte status;\n  int comparisonResult;\n  size_t length;\n  int *errnoLocation;\n  char *filename1;\n  char *basename1;\n  char **effectArg;\n  undefined8 effectResult;\n  long currentNode;\n  char *basename1Alt;\n  char *basename2;\n  long previousNode;\n  undefined8 filenameConstant;\n  ulong byteConstant;\n  char *filename;\n  char **current;\n  char **fileList;\n  char **node;\n  uint fileListOperation;\n  char **next;\n  long fileRecordList;\n  bool flag;\n  byte byteConstant2;\n  char **fileNames;\n  undefined8 effectArg2;\n  long variable1;\n  long variable2;\n  \n  byteConstant2 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(filename,arg2);\nLAB_001028f5:\n  filenameConstant = DAT_0010d638;\n  if (fileListOperation != 3) {\n    while( true ) {\n      if ((undefined8 *)*node == (undefined8 *)0x0) goto LAB_0010571f;\n      comparisonResult = filename_cmp(*(undefined8 *)*node,filenameConstant);\n      if (comparisonResult == 0) break;\n      node = (char **)(*node + 0xf0);\n    }\n    if (fileListOperation != 2) goto LAB_0010571f;\n    node = (char **)(*node + 0xf0);\n    goto LAB_0010571f;\n  }\n  currentNode = *(long *)(fileRecordList + 0xf0);\n  if (*(long *)(fileRecordList + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    previousNode = currentNode;\n    currentNode = *(long *)(previousNode + 0xf0);\n  } while (currentNode != 0);\n  node = (char **)(previousNode + 0xf0);\n  filename = *fileList;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  result = DAT_0010d5f8;\n  fileListOperation = (uint)(DAT_0010d60c != 0);\n  arg2 = bfd_openr(filename,DAT_0010d5f0);\n  if (arg2 != 0) {\n    fileList = fileList + 1;\n    status = FUN_00105af0(node,arg2,fileListOperation,result);\n    effectArg2._6_1_ = effectArg2._6_1_ | status;\n    filename1 = *fileList;\n    do {\n      if (filename1 == (char *)0x0) {\n        if (effectArg2._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        filenameConstant = FUN_001058b0();\n        return filenameConstant;\n      }\n      current = *(char ***)(fileRecordList + 0xf0);\n      node = fileNames;\n      if (effectArg2._7_1_ == '\\0') {\n        next = fileNames;\n        if (current != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              basename1Alt = (char *)lbasename(*current);\n              basename1 = basename1Alt;\n              if (DAT_0010d5fa != '\\0') {\n                length = strlen(basename1Alt);\n                byteConstant = (ulong)*(byte *)(*(long *)(fileRecordList + 8) + 0x1e);\n                if (byteConstant < length) {\n                  basename1 = (char *)xmalloc(byteConstant + 1);\n                  currentNode = *(long *)(fileRecordList + 8);\n                  filename1 = basename1;\n                  for (byteConstant = (ulong)*(byte *)(currentNode + 0x1e); byteConstant != 0; byteConstant = byteConstant - 1) {\n                    *filename1 = *basename1Alt;\n                    basename1Alt = basename1Alt + (ulong)byteConstant2 * -2 + 1;\n                    filename1 = filename1 + (ulong)byteConstant2 * -2 + 1;\n                  }\n                  basename1[*(byte *)(currentNode + 0x1e)] = '\\0';\n                }\n                filename1 = *fileList;\n                basename1Alt = basename1;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              filename1 = *fileList;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              basename2 = (char *)lbasename(filename1);\n              if (DAT_0010d5fa != '\\0') {\n                length = strlen(basename2);\n                byteConstant = (ulong)*(byte *)(*(long *)(fileRecordList + 8) + 0x1e);\n                filename1 = basename2;\n                basename1Alt = basename1;\n                if (byteConstant < length) {\n                  filename1 = (char *)xmalloc(byteConstant + 1);\n                  currentNode = *(long *)(fileRecordList + 8);\n                  basename1 = filename1;\n                  for (byteConstant = (ulong)*(byte *)(currentNode + 0x1e); byteConstant != 0; byteConstant = byteConstant - 1) {\n                    *basename1 = *basename2;\n                    basename2 = basename2 + (ulong)byteConstant2 * -2 + 1;\n                    basename1 = basename1 + (ulong)byteConstant2 * -2 + 1;\n                  }\n                  filename1[*(byte *)(currentNode + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              comparisonResult = filename_cmp(basename2,basename1);\n            }\n            else {\n              filename1 = *fileList;\n              basename1Alt = *current;\nLAB_00102980:\n              comparisonResult = filename_cmp(filename1,basename1Alt);\n            }\n            if ((comparisonResult == 0) && (current[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                comparisonResult = stat(*fileList,(stat *)&stack0x000000b0);\n                if (comparisonResult != 0) {\n                  errnoLocation = __errno_location();\n                  if (*errnoLocation != 2) {\n                    FUN_00107c10(*fileList);\nLAB_00102b7e:\n                    filename1 = *current;\n                    filenameConstant = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(filenameConstant,filename1);\n                    free(fileList);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                effectArg = (char **)current[0x1d];\n                if ((char **)current[0x1d] == (char **)0x0) {\n                  effectArg = current;\n                }\n                comparisonResult = (**(code **)(effectArg[1] + 0x1e8))(current,&stack0x00000020);\n                if (comparisonResult != 0) goto LAB_00102b7e;\n                if (variable2 <= variable1) goto LAB_0010577e;\n              }\n              filenameConstant = FUN_00105870(fileNames,2,*current);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                filename1 = *fileList;\n                flag = DAT_0010d60c != 0;\n                currentNode = bfd_openr(filename1,DAT_0010d5f0);\n                if (currentNode == 0) {\n                  FUN_00107c10(filename1,0);\n                  goto LAB_00102b3e;\n                }\n                status = FUN_00103172(filenameConstant,currentNode,flag);\n              }\n              else {\n                effectResult = FUN_00105830(*fileList);\n                comparisonResult = filename_cmp(effectResult,\"__.LIBDEP\");\n                if (comparisonResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                status = FUN_00103172(filenameConstant,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (status != 0) {\n                *next = *(char **)(*next + 0xf0);\n                effectArg2._6_1_ = status;\n              }\n              goto LAB_0010577e;\n            }\n            next = current + 0x1e;\n            current = (char **)current[0x1e];\n          } while (current != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        fileListOperation = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        fileListOperation = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        currentNode = *(long *)(fileRecordList + 0xf0);\n        if (*(long *)(fileRecordList + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      filename = *fileList;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      filenameConstant = FUN_00105830(filename);\n      comparisonResult = filename_cmp(filenameConstant,\"__.LIBDEP\");\n      if (comparisonResult != 0) goto code_r0x0010574f;\n      status = FUN_00105ae0(node,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      effectArg2._6_1_ = status | effectArg2._6_1_;\nLAB_0010577e:\n      fileList = fileList + 1;\n      filename1 = *fileList;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  filename = *fileList;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "__errno_location",
                "bfd_openr",
                "xmalloc",
                "FUN_00102943",
                "FUN_00105870",
                "FUN_00103172",
                "dcgettext",
                "stat",
                "FUN_00105ae0",
                "FUN_001058b0",
                "filename_cmp",
                "FUN_001028ed",
                "FUN_00105830",
                "strlen",
                "lbasename",
                "FUN_00105af0",
                "FUN_00107c10",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_message_and_exit_001033b0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printMessageAndExit_001033b0(undefined8 message)\n\n{\n  fprintf(_stderr,\"%s\\n\",message);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  \n  errorPointer = __errno_location();\n  if (*errorPointer == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(errorMessage);\n  }\n  else {\n    strerror(*errorPointer);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_one_0010284b",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_archive_00102c25",
                "iVar1": "comparisonResult",
                "iVar2": "returnValue",
                "piVar3": "errnoPointer",
                "pcVar4": "errorString",
                "uVar5": "errorMessage",
                "pplVar6": "functionPointer",
                "__ptr": "bufferPointer",
                "__n": "bytesRead",
                "lVar7": "loopVariable",
                "unaff_RBX": "archiveContent",
                "plVar8": "filePointer",
                "puVar9": "paramPointer",
                "uVar10": "bytesProcessed",
                "sVar11": "readSize",
                "param_7": "errorArray",
                "param_11": "filePermissions",
                "param_12": "fileSize"
            },
            "code": "\n\n\nlong * extractArchive_00102c25(void)\n\n{\n  int comparisonResult;\n  int returnValue;\n  int *errnoPointer;\n  char *errorString;\n  undefined8 errorMessage;\n  long **functionPointer;\n  void *bufferPointer;\n  size_t bytesRead;\n  long loopVariable;\n  long **archiveContent;\n  long *filePointer;\n  undefined4 *paramPointer;\n  ulong bytesProcessed;\n  size_t readSize;\n  undefined4 *errorArray;\n  __mode_t filePermissions;\n  ulong fileSize;\n  \n  paramPointer = errorArray;\n  for (loopVariable = 0x24; loopVariable != 0; loopVariable = loopVariable + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  functionPointer = (long **)archiveContent[0x1d];\n  if ((long **)archiveContent[0x1d] == (long **)0x0) {\n    functionPointer = archiveContent;\n  }\n  returnValue = (*(code *)functionPointer[1][0x3d])();\n  if (returnValue != 0) {\n    filePointer = *archiveContent;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    returnValue = FUN_00107690(errorMessage,filePointer);\n    errorMessage = DAT_0010d638;\n    if (returnValue == 3) {\n      for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*filePointer,errorMessage);\n        if (comparisonResult == 0) {\n          if (returnValue != 2) {\n            return filePointer;\n          }\n          return (long *)(*filePointer + 0xf0);\n        }\n      }\n    }\n    return filePointer;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archiveContent);\n  }\n  else {\n    bytesProcessed = 0;\n    bufferPointer = (void *)xmalloc(0x2000);\n    do {\n      readSize = fileSize - bytesProcessed;\n      if (0x2000 < readSize) {\n        readSize = 0x2000;\n      }\n      bytesRead = bfd_bread(bufferPointer,readSize);\n      if (readSize != bytesRead) {\nLAB_00102c78:\n        archiveContent = (long **)*archiveContent[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,archiveContent);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archiveContent);\n      }\n      readSize = fwrite(bufferPointer,1,bytesRead,DAT_0010d5d8);\n      if (readSize != bytesRead) {\n        errnoPointer = __errno_location();\n        errorString = strerror(*errnoPointer);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < fileSize);\n    free(bufferPointer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermissions);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(errorString,errorArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "chmod",
                "FUN_00105a20",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "strerror",
                "dcgettext",
                "bfd_bread",
                "free",
                "FUN_00107c80",
                "fclose",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "extract_substring_00102bb0",
                "in_RAX": "string",
                "sVar2": "string_length",
                "puVar3": "new_string",
                "uVar4": "sub_length",
                "unaff_RBX": "source_ptr",
                "unaff_RBP": "base_pointer",
                "puVar5": "destination_ptr",
                "bVar6": "is_positive",
                "auVar7": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] extract_substring_00102bb0(void)\n\n{\n  long lVar1;\n  char *string;\n  size_t string_length;\n  undefined *new_string;\n  ulong sub_length;\n  undefined *source_ptr;\n  long base_pointer;\n  undefined *destination_ptr;\n  byte is_positive;\n  undefined result [16];\n  undefined8 return_address;\n  \n  is_positive = 0;\n  string_length = strlen(string);\n  sub_length = (ulong)*(byte *)(*(long *)(base_pointer + 8) + 0x1e);\n  new_string = source_ptr;\n  if (sub_length < string_length) {\n    new_string = (undefined *)xmalloc(sub_length + 1);\n    lVar1 = *(long *)(base_pointer + 8);\n    destination_ptr = new_string;\n    for (sub_length = (ulong)*(byte *)(lVar1 + 0x1e); sub_length != 0; sub_length = sub_length - 1) {\n      *destination_ptr = *source_ptr;\n      source_ptr = source_ptr + (ulong)is_positive * -2 + 1;\n      destination_ptr = destination_ptr + (ulong)is_positive * -2 + 1;\n    }\n    new_string[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  result._8_8_ = return_address;\n  result._0_8_ = new_string;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "extract_substring_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_swap_values_00102f08",
                "unaff_RBX": "buffer",
                "unaff_R12": "stringPointer"
            },
            "code": "\nundefined8 printAndSwapValues_00102f08(void)\n\n{\n  undefined8 *buffer;\n  undefined8 *stringPointer;\n  \n  printf(\"a - %s\\n\",*buffer);\n  buffer[0x1e] = *stringPointer;\n  *stringPointer = buffer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_swap_values_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "baseAddress",
                "param_2": "filePaths",
                "param_3": "reverse",
                "ppcVar1": "currentFile",
                "uVar2": "undefinedValue",
                "bVar3": "result",
                "iVar4": "index",
                "sVar5": "length",
                "piVar6": "errorNumber",
                "pcVar7": "filePath",
                "pcVar8": "basename",
                "uVar9": "libraryDependency",
                "pcVar10": "currentFilePath",
                "__s": "currentFileName",
                "lVar11": "currentPointer",
                "lVar12": "previousPointer",
                "uVar13": "returnValue",
                "uVar14": "maxLength",
                "ppcVar15": "fileNode",
                "ppcVar16": "currentNode",
                "uVar17": "comparisonType",
                "ppcVar18": "previousNode",
                "bVar19": "flag",
                "bVar20": "temporaryByte",
                "local_15a": "overallResult",
                "auStack_158": "stackBuffer",
                "lStack_100": "modificationTime",
                "sStack_c8": "fileStat"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long baseAddress,char **filePaths,char reverse)\n\n{\n  char **currentFile;\n  undefined undefinedValue;\n  byte result;\n  int index;\n  size_t length;\n  int *errorNumber;\n  char *filePath;\n  char *basename;\n  undefined8 libraryDependency;\n  char *currentFilePath;\n  char *currentFileName;\n  long currentPointer;\n  long previousPointer;\n  undefined8 returnValue;\n  ulong maxLength;\n  char **fileNode;\n  char **currentNode;\n  uint comparisonType;\n  char **previousNode;\n  bool flag;\n  byte temporaryByte;\n  byte overallResult;\n  undefined stackBuffer [88];\n  long modificationTime;\n  stat fileStat;\n  \n  temporaryByte = 0;\n  currentFile = (char **)(baseAddress + 0xf0);\n  overallResult = 0;\n  if (filePaths == (char **)0x0) {\n    returnValue = FUN_00102943();\n    return returnValue;\n  }\n  do {\n    currentFilePath = *filePaths;\njoined_r0x001055aa:\n    if (currentFilePath == (char *)0x0) {\n      if (overallResult != 0) {\n        returnValue = FUN_001058b0(baseAddress);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    fileNode = *(char ***)(baseAddress + 0xf0);\n    currentNode = currentFile;\n    if (reverse != '\\0') {\nLAB_0010564c:\n      comparisonType = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      previousPointer = *(long *)(baseAddress + 0xf0);\n      if (*(long *)(baseAddress + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPointer = previousPointer;\n        previousPointer = *(long *)(currentPointer + 0xf0);\n      } while (previousPointer != 0);\n      currentNode = (char **)(currentPointer + 0xf0);\n      currentFilePath = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = FUN_00105830(currentFilePath,baseAddress);\n          index = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (index == 0) {\n            result = FUN_00105ae0(currentNode,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            overallResult = result | overallResult;\n            goto LAB_0010577e;\n          }\n          currentFilePath = *filePaths;\n        }\n        undefinedValue = DAT_0010d5f8;\n        flag = DAT_0010d60c != 0;\n        previousPointer = bfd_openr(currentFilePath,DAT_0010d5f0);\n        if (previousPointer != 0) {\n          filePaths = filePaths + 1;\n          result = FUN_00105af0(currentNode,previousPointer,(uint)flag,undefinedValue);\n          overallResult = overallResult | result;\n          currentFilePath = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(currentFilePath,0);\n        comparisonType = (uint)flag;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (comparisonType == 3) {\n          previousPointer = *(long *)(baseAddress + 0xf0);\n          if (*(long *)(baseAddress + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentNode != (undefined8 *)0x0;\n              currentNode = (char **)(*currentNode + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*currentNode,returnValue);\n            if (index == 0) {\n              if (comparisonType == 2) {\n                currentNode = (char **)(*currentNode + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFilePath = *filePaths;\n      } while( true );\n    }\n    previousNode = currentFile;\n    if (fileNode == (char **)0x0) {\n      comparisonType = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFilePath = (char *)lbasename(*fileNode);\n      basename = currentFilePath;\n      if (DAT_0010d5fa != '\\0') {\n        length = strlen(currentFilePath);\n        maxLength = (ulong)*(byte *)(*(long *)(baseAddress + 8) + 0x1e);\n        if (maxLength < length) {\n          basename = (char *)xmalloc(maxLength + 1);\n          previousPointer = *(long *)(baseAddress + 8);\n          filePath = basename;\n          for (maxLength = (ulong)*(byte *)(previousPointer + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n            *filePath = *currentFilePath;\n            currentFilePath = currentFilePath + (ulong)temporaryByte * -2 + 1;\n            filePath = filePath + (ulong)temporaryByte * -2 + 1;\n          }\n          basename[*(byte *)(previousPointer + 0x1e)] = '\\0';\n        }\n        filePath = *filePaths;\n        currentFilePath = basename;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      filePath = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      currentFileName = (char *)lbasename(filePath);\n      if (DAT_0010d5fa != '\\0') {\n        length = strlen(currentFileName);\n        maxLength = (ulong)*(byte *)(*(long *)(baseAddress + 8) + 0x1e);\n        filePath = currentFileName;\n        currentFilePath = basename;\n        if (maxLength < length) {\n          filePath = (char *)xmalloc(maxLength + 1);\n          previousPointer = *(long *)(baseAddress + 8);\n          basename = filePath;\n          for (maxLength = (ulong)*(byte *)(previousPointer + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n            *basename = *currentFileName;\n            currentFileName = currentFileName + (ulong)temporaryByte * -2 + 1;\n            basename = basename + (ulong)temporaryByte * -2 + 1;\n          }\n          filePath[*(byte *)(previousPointer + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(currentFileName,basename);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      previousNode = fileNode + 0x1e;\n      fileNode = (char **)fileNode[0x1e];\n      if (fileNode == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    filePath = *filePaths;\n    currentFilePath = *fileNode;\nLAB_00102980:\n    index = filename_cmp(filePath,currentFilePath);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (fileNode[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*filePaths,&fileStat);\n      if (index != 0) {\n        errorNumber = __errno_location();\n        if (*errorNumber != 2) {\n          FUN_00107c10(*filePaths);\nLAB_00102b7e:\n          currentFilePath = *fileNode;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(returnValue,currentFilePath);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentNode = (char **)fileNode[0x1d];\n      if ((char **)fileNode[0x1d] == (char **)0x0) {\n        currentNode = fileNode;\n      }\n      index = (**(code **)(currentNode[1] + 0x1e8))(fileNode,stackBuffer);\n      if (index != 0) goto LAB_00102b7e;\n      if (fileStat.st_mtim.tv_sec <= modificationTime) goto LAB_0010577e;\n    }\n    returnValue = FUN_00105870(currentFile,2,*fileNode);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFilePath = *filePaths;\n      flag = DAT_0010d60c != 0;\n      previousPointer = bfd_openr(currentFilePath,DAT_0010d5f0);\n      if (previousPointer == 0) {\n        FUN_00107c10(currentFilePath,0);\n        goto LAB_00102b3e;\n      }\n      result = FUN_00103172(returnValue,previousPointer,flag);\n    }\n    else {\n      libraryDependency = FUN_00105830(*filePaths,baseAddress);\n      index = filename_cmp(libraryDependency,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      result = FUN_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (result != 0) {\n      *previousNode = *(char **)(*previousNode + 0xf0);\n      overallResult = result;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 73914,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}