{
    "functions": {
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "fileCount",
                "iVar1": "comparisonResult",
                "unaff_RBX": "fileList",
                "param_7": "desiredFileName"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int fileCount;\n  int comparisonResult;\n  long *fileList;\n  undefined8 desiredFileName;\n  \n  desiredFileName = posname;\n  if (fileCount == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileList,desiredFileName);\n      if (comparisonResult == 0) {\n        if (fileCount != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "get_pos_bfd"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_information_001079c0",
                "param_1": "file",
                "param_2": "fileData",
                "param_3": "isVerbose",
                "param_4": "printHex",
                "iVar1": "returnValue",
                "ppcVar2": "contentType",
                "pcVar3": "formattedTime",
                "uVar4": "fileMode",
                "local_100": "currentTime",
                "uStack_f3": "fileType",
                "cStack_f2": "isSetuid",
                "cStack_f1": "isSetgid",
                "cStack_f0": "isSticky",
                "cStack_ef": "isOwnerRead",
                "cStack_ee": "isOwnerWrite",
                "cStack_ed": "isOwnerExecute",
                "cStack_ec": "isGroupRead",
                "cStack_eb": "isGroupWrite",
                "cStack_ea": "isGroupExecute",
                "local_e8": "timeString",
                "local_b8": "buffer",
                "uStack_a0": "permissionBits",
                "uStack_9c": "inodeNumber",
                "uStack_98": "deviceID",
                "uStack_88": "fileSize",
                "local_60": "accessTime"
            },
            "code": "\nvoid printFileInformation_001079c0(FILE *file,char **fileData,char isVerbose,char printHex)\n\n{\n  int returnValue;\n  char **contentType;\n  char *formattedTime;\n  uint fileMode;\n  time_t currentTime;\n  undefined fileType;\n  char isSetuid;\n  char isSetgid;\n  char isSticky;\n  char isOwnerRead;\n  char isOwnerWrite;\n  char isOwnerExecute;\n  char isGroupRead;\n  char isGroupWrite;\n  char isGroupExecute;\n  undefined uStack_e9;\n  char timeString [48];\n  undefined buffer [24];\n  uint permissionBits;\n  uint inodeNumber;\n  uint deviceID;\n  undefined8 fileSize;\n  time_t accessTime;\n  \n  if (isVerbose != '\\0') {\n    contentType = (char **)fileData[0x1d];\n    if ((char **)fileData[0x1d] == (char **)0x0) {\n      contentType = fileData;\n    }\n    returnValue = (**(code **)(contentType[1] + 0x1e8))(fileData,buffer);\n    if (returnValue == 0) {\n      currentTime = accessTime;\n      formattedTime = ctime(&currentTime);\n      if (formattedTime == (char *)0x0) {\n        formattedTime = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeString,formattedTime);\n      }\n      else {\n        sprintf(timeString,\"%.12s %.4s\",formattedTime + 4);\n      }\n      fileMode = permissionBits & 0xf000;\n      if (fileMode == 0x4000) {\n        fileType = 100;\n      }\n      else if (fileMode == 0xa000) {\n        fileType = 0x6c;\n      }\n      else if (fileMode == 0x6000) {\n        fileType = 0x62;\n      }\n      else if (fileMode == 0x2000) {\n        fileType = 99;\n      }\n      else if (fileMode == 0xc000) {\n        fileType = 0x73;\n      }\n      else {\n        fileType = 0x70;\n        if (fileMode != 0x1000) {\n          fileType = 0x2d;\n        }\n      }\n      isSetuid = (-((permissionBits & 0x100) == 0) & 0xbbU) + 0x72;\n      isSetgid = (-((permissionBits & 0x80) == 0) & 0xb6U) + 0x77;\n      isSticky = (-((permissionBits & 0x40) == 0) & 0xb5U) + 0x78;\n      isOwnerRead = (-((permissionBits & 0x20) == 0) & 0xbbU) + 0x72;\n      isOwnerWrite = (-((permissionBits & 0x10) == 0) & 0xb6U) + 0x77;\n      isOwnerExecute = (-((permissionBits & 8) == 0) & 0xb5U) + 0x78;\n      isGroupRead = (-((permissionBits & 4) == 0) & 0xbbU) + 0x72;\n      isGroupWrite = (-((permissionBits & 2) == 0) & 0xb6U) + 0x77;\n      isGroupExecute = (-((permissionBits & 1) == 0) & 0xb5U) + 0x78;\n      if ((permissionBits & 0x800) != 0) {\n        if (isSticky == 'x') {\n          isSticky = 's';\n        }\n        else {\n          isSticky = 'S';\n        }\n      }\n      if ((permissionBits & 0x400) != 0) {\n        if (isOwnerExecute == 'x') {\n          isOwnerExecute = 's';\n        }\n        else {\n          isOwnerExecute = 'S';\n        }\n      }\n      if ((permissionBits & 0x200) != 0) {\n        if (isGroupExecute == 'x') {\n          isGroupExecute = 't';\n        }\n        else {\n          isGroupExecute = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&isSetuid,(ulong)inodeNumber,(ulong)deviceID,fileSize,\n              timeString,(ulong)permissionBits);\n    }\n  }\n  fputs(*fileData,file);\n  if (printHex != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "print_arelt_descr.cold",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "ar_directory_doer",
                "print_descr"
            ],
            "imported": false,
            "current_name": "print_file_information_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_output_file_00105a68",
                "pcVar1": "outputDirectory",
                "pFVar2": "outputFilePtr",
                "sVar3": "outputDirectoryLength"
            },
            "code": "\nvoid processOutputFile_00105a68(void)\n\n{\n  char *outputDirectory;\n  FILE *outputFilePtr;\n  size_t outputDirectoryLength;\n  \n  outputDirectory = output_dir;\n  if (output_dir != (char *)0x0) {\n    outputDirectoryLength = strlen(output_dir);\n    if (outputDirectoryLength != 0) {\n      if (outputDirectory[outputDirectoryLength - 1] == '/') {\n        output_filename = (char *)concat(outputDirectory,output_filename,0);\n      }\n      else {\n        output_filename = (char *)concat(outputDirectory,&DAT_00108260,output_filename,0);\n      }\n    }\n  }\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",output_filename);\n  }\n  outputFilePtr = fopen(output_filename,\"w\");\n  if (outputFilePtr != (FILE *)0x0) {\n    return;\n  }\n  perror(output_filename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "strlen",
                "xexit",
                "concat",
                "fopen",
                "printf",
                "open_output_file.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_output_file_00105a68"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archivePtr",
                "param_2": "callbackFunc",
                "param_3": "entryList",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "entry",
                "bVar3": "entryFound",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorMessage",
                "plVar6": "nextEntryPtr",
                "lVar7": "currentEntryPtr",
                "plVar8": "previousEntryPtr"
            },
            "code": "\n\n\nundefined8 processArchive_001032a8(long *archivePtr,code *callbackFunc,undefined8 *entryList,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 entry;\n  bool entryFound;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorMessage;\n  long *nextEntryPtr;\n  long currentEntryPtr;\n  long *previousEntryPtr;\n  \n  currentEntryPtr = archivePtr[0x1e];\n  if (entryList == (undefined8 *)0x0) {\n    while (currentEntryPtr != 0) {\n      nextEntry = *(long *)(currentEntryPtr + 0xf0);\n      (*callbackFunc)(currentEntryPtr,0);\n      currentEntryPtr = nextEntry;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      currentEntry = (long *)archivePtr[0x1e];\n      previousEntryPtr = archivePtr;\n      while (nextEntryPtr = currentEntry, nextEntryPtr != (long *)0x0) {\n        if (*nextEntryPtr != 0) {\n          comparisonResult = filename_cmp(*entryList);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callbackFunc)(nextEntryPtr,previousEntryPtr);\n          }\n        }\n        previousEntryPtr = nextEntryPtr;\n        currentEntry = (long *)nextEntryPtr[0x1e];\n      }\n      if (!entryFound) {\n        entry = *entryList;\n        errorMessage = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessage,entry);\n      }\n      entryList = (undefined8 *)entryList[1];\n    } while (entryList != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "display_usage_0010342d",
                "param_1": "isVerbose",
                "uVar1": "name",
                "__stream": "outputStream",
                "pcVar2": "message"
            },
            "code": "\n\n\nvoid displayUsage_0010342d(uint isVerbose)\n\n{\n  undefined8 name;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,program_name);\n  name = program_name;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,name);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  ar_emul_default_usage(outputStream);\n  list_supported_targets(program_name,outputStream);\n  if (isVerbose != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "ar_emul_default_usage",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_usage_0010342d"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "report_data_00107920",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "dataToReport",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "localSize",
                "local_d4": "localOffset",
                "local_d0": "localPointer",
                "local_c8": "localBuffer",
                "local_b8": "localArray",
                "local_b0": "localParam10",
                "local_a8": "localParam11",
                "local_a0": "localParam12",
                "local_98": "localParam13",
                "local_90": "localParam14",
                "local_88": "localParam1",
                "local_78": "localParam2",
                "local_68": "localParam3",
                "local_58": "localParam4",
                "local_48": "localParam5",
                "local_38": "localParam6",
                "local_28": "localParam7",
                "local_18": "localParam8"
            },
            "code": "\nvoid reportData_00107920(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 dataToReport,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 localSize;\n  undefined4 localOffset;\n  undefined *localPointer;\n  undefined *localBuffer;\n  undefined localArray [8];\n  undefined8 localParam10;\n  undefined8 localParam11;\n  undefined8 localParam12;\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (condition != '\\0') {\n    localParam1 = param1;\n    localParam2 = param2;\n    localParam3 = param3;\n    localParam4 = param4;\n    localParam5 = param5;\n    localParam6 = param6;\n    localParam7 = param7;\n    localParam8 = param8;\n  }\n  localPointer = &stack0x00000008;\n  localSize = 8;\n  localBuffer = localArray;\n  localOffset = 0x30;\n  localParam10 = param10;\n  localParam11 = param11;\n  localParam12 = param12;\n  localParam13 = param13;\n  localParam14 = param14;\n  report(dataToReport,&localSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "open_inarch",
                "main",
                "set_times.cold",
                "get_file_size",
                "get_file_size.cold",
                "smart_rename.constprop.0.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "report_data_00107920"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main",
                "normalize.cold",
                "replace_members.cold",
                "print_contents",
                "make_tempname",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00102590": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102590"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_0010e190": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e190",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010e190"
        },
        "FUN_00102470": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102470"
        },
        "FUN_0010e070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010e070"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "process_output_file_00102e6f",
                "in_RAX": "current_path",
                "pcVar1": "output_directory",
                "uVar2": "base_name",
                "uVar3": "error_message",
                "pFVar4": "output_file",
                "sVar5": "output_directory_length",
                "pcVar6": "current_char"
            },
            "code": "\nvoid process_output_file_00102e6f(void)\n\n{\n  char *output_directory;\n  char *current_path;\n  undefined8 base_name;\n  undefined8 error_message;\n  FILE *output_file;\n  size_t output_directory_length;\n  char *current_char;\n  \n  output_directory = output_dir;\n  do {\n    current_path = current_path + 1;\n    while (*current_path != '/') {\n      if (*current_path == '\\0') {\n        if ((output_dir != (char *)0x0) && (output_directory_length = strlen(output_dir), output_directory_length != 0)) {\n          if (output_directory[output_directory_length - 1] == '/') {\n            output_filename = (char *)concat(output_directory,output_filename,0);\n          }\n          else {\n            output_filename = (char *)concat(output_directory,&DAT_00108260,output_filename,0);\n          }\n        }\n        if (verbose != 0) {\n          printf(\"x - %s\\n\",output_filename);\n        }\n        output_file = fopen(output_filename,\"w\");\n        if (output_file == (FILE *)0x0) {\n          perror(output_filename);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_char = current_path;\n      if ((*current_path == '.') && (current_char = current_path + 1, current_path[1] == '.')) {\n        current_char = current_path + 2;\n        if ((current_path[2] == '/') || (current_path[2] == '\\0')) {\n          base_name = lbasename();\n          output_directory = output_filename;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          non_fatal(error_message,output_directory,base_name);\n          output_filename = (char *)base_name;\n          process_output_file_00102e6f_00105a68();\n          return;\n        }\n      }\n      for (; (current_path = current_char, *current_char != '\\0' && (*current_char != '/')); current_char = current_char + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "non_fatal",
                "dcgettext",
                "FUN_00102e6f",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_output_file_00102e6f"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_with_memory_001033d6",
                "param_1": "buffer_param",
                "pvVar1": "buffer_ptr",
                "pvVar2": "data_ptr",
                "auVar3": "result",
                "malloc": "allocate_memory",
                "yy_fatal_error": "handle_fatal_error",
                "yy_init_buffer": "initialize_buffer"
            },
            "code": "\nundefined  [16]\ncreate_buffer_with_memory_001033d6(undefined8 buffer_param,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  void *buffer_ptr;\n  void *data_ptr;\n  undefined result [16];\n  \n  buffer_ptr = allocate_memory(0x40);\n  if (buffer_ptr != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer_ptr = (void *)handle_fatal_error(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer_ptr + 0x18) = 0x4000;\n    data_ptr = allocate_memory(0x4002);\n    *(void **)((long)buffer_ptr + 8) = data_ptr;\n  } while (data_ptr == (void *)0x0);\n  *(undefined4 *)((long)buffer_ptr + 0x20) = 1;\n  initialize_buffer(buffer_ptr,buffer_param);\n  result._8_8_ = param_4;\n  result._0_8_ = buffer_ptr;\n  return result;\n}\n\n",
            "called": [
                "malloc",
                "yy_init_buffer",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "create_buffer_with_memory_001033d6"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "start_gmon_00102000",
                "ctx": "context",
                "iVar1": "result"
            },
            "code": "\nint startGmon_00102000(EVP_PKEY_CTX *context)\n\n{\n  int result;\n  \n  result = __gmon_start__();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "start_gmon_00102000"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00102480": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "FUN_00105a68",
                "ranlib_only",
                "main",
                "maybequit",
                "fatal",
                "ranlib_usage",
                "write_archive.cold",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102480"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_last_matching_file_00105870",
                "param_1": "fileList",
                "param_2": "fileType",
                "param_3": "targetFilename",
                "iVar1": "comparisonResult",
                "iVar3": "fileListSize",
                "uVar2": "currentFilename",
                "posname": "currentFilename",
                "postype": "fileType"
            },
            "code": "\nlong * findLastMatchingFile_00105870(long *fileList,int fileType,undefined8 targetFilename)\n\n{\n  int comparisonResult;\n  undefined8 currentFilename;\n  int fileListSize;\n  \n  currentFilename = currentFilename;\n  fileListSize = fileType;\n  if (fileType == 0) {\n    currentFilename = targetFilename;\n    fileListSize = fileType;\n  }\n  if (fileListSize == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileList,currentFilename);\n      if (comparisonResult == 0) {\n        if (fileListSize != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "get_pos_bfd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "find_last_matching_file_00105870"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "display_prompt_00103ba8",
                "interactive": "is_interactive",
                "printf": "print_message",
                "_stdout": "standard_output"
            },
            "code": "\n\n\nvoid display_prompt_00103ba8(void)\n\n{\n  if (is_interactive != 0) {\n    print_message(\"AR >\");\n    fflush(standard_output);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "display_prompt_00103ba8"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_arelt_descr_verbose_00103ddc",
                "param_1": "param",
                "outfile": "output_file",
                "verbose": "is_verbose"
            },
            "code": "\nvoid print_arelt_descr_verbose_00103ddc(undefined8 param)\n\n{\n  print_arelt_descr(output_file,param,is_verbose != 0,0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_arelt_descr_verbose_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "putc",
                "fflush",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "formatString",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *formatString;\n  \n  lineNumber = linenumber + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "FUN_0010e098": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e098",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e098"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00102490": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "open_inarch",
                "main",
                "open_inarch.cold",
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102490"
        },
        "FUN_0010e090": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e090",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_0010e090"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "open_inarch",
                "open_inarch.cold",
                "ar_open",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_buffer_size",
                "puVar3": "current_buffer_ptr",
                "bVar4": "flag",
                "yy_buffer_stack": "buffer_stack",
                "yy_buffer_stack_max": "max_buffer_stack",
                "yy_buffer_stack_top": "top_buffer_stack"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_buffer_size;\n  undefined4 *current_buffer_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (buffer_stack == (void *)0x0) {\n    buffer_stack = calloc(8,1);\n    if (buffer_stack != (void *)0x0) {\n      max_buffer_stack = 1;\n      top_buffer_stack = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (top_buffer_stack < max_buffer_stack - 1U) {\n      return return_value;\n    }\n    new_buffer_size = max_buffer_stack + 8;\n    buffer_size = new_buffer_size * 8;\n    buffer_stack = realloc(buffer_stack,buffer_size);\n    if (buffer_stack != (void *)0x0) {\n      current_buffer_ptr = (undefined4 *)((long)buffer_stack + (buffer_size - 0x40));\n      max_buffer_stack = new_buffer_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *current_buffer_ptr = 0;\n        current_buffer_ptr = current_buffer_ptr + (ulong)flag * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  yy_fatal_error(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  top_buffer_stack = 0;\n  max_buffer_stack = 1;\n  return return_value;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "yy_fatal_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "FUN_0010e308": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e308",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010e308"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_00105da0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00105da0"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_files_00102bf5",
                "output_bfd": "bfdPointer",
                "output_file": "outputFile",
                "output_filename": "filename"
            },
            "code": "\nvoid cleanupFiles_00102bf5(void)\n\n{\n  if (bfdPointer != 0) {\n    bfd_cache_close();\n  }\n  if (outputFile != (FILE *)0x0) {\n    fclose(outputFile);\n  }\n  unlink_if_ordinary(filename);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "remove_output"
            ],
            "imported": false,
            "current_name": "cleanup_files_00102bf5"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "simple_copy.constprop.0.cold",
                "write_archive",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main",
                "remove_output.cold",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_output_filename_00102943",
                "output_filename": "outputFilename"
            },
            "code": "\nvoid initializeOutputFilename_00102943(void)\n\n{\n  outputFilename = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "replace_members",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "initialize_output_filename_00102943"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileData",
                "iVar1": "result",
                "piVar2": "errorPtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "creationTime",
                "uStack_2c": "statusChangeTime",
                "local_28": "savedAccessTime",
                "uStack_24": "savedModificationTime",
                "uStack_20": "savedCreationTime",
                "uStack_1c": "savedStatusChangeTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileData)\n\n{\n  int result;\n  int *errorPtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 creationTime;\n  undefined4 statusChangeTime;\n  undefined4 savedAccessTime;\n  undefined4 savedModificationTime;\n  undefined4 savedCreationTime;\n  undefined4 savedStatusChangeTime;\n  \n  savedAccessTime = *(undefined4 *)(fileData + 0x58);\n  savedModificationTime = *(undefined4 *)(fileData + 0x5c);\n  savedCreationTime = *(undefined4 *)(fileData + 0x60);\n  savedStatusChangeTime = *(undefined4 *)(fileData + 100);\n  accessTime = *(undefined4 *)(fileData + 0x48);\n  modificationTime = *(undefined4 *)(fileData + 0x4c);\n  creationTime = *(undefined4 *)(fileData + 0x50);\n  statusChangeTime = *(undefined4 *)(fileData + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errorPtr = __errno_location();\n    errorMessage = strerror(*errorPtr);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "format_time_data_00102d8c",
                "__format": "errorMessage",
                "uVar1": "filePermissions",
                "unaff_RBX": "fileContentList",
                "unaff_RBP": "filePointer",
                "unaff_R12B": "hasAdditionalInfo",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "isExecutable",
                "cStack0000000000000017": "isWritable",
                "param_9": "isReadable",
                "cStack0000000000000019": "isSetUid",
                "cStack000000000000001a": "isSetGid",
                "cStack000000000000001b": "isSticky",
                "cStack000000000000001c": "isUserExecute",
                "cStack000000000000001d": "isUserWrite",
                "cStack000000000000001e": "isUserRead",
                "uStack000000000000001f": "isFlagSet",
                "param_19": "fileMode",
                "uStack000000000000006c": "fileSize",
                "param_20": "timestamp",
                "param_22": "parameter22"
            },
            "code": "\nvoid formatTimeData_00102d8c(void)\n\n{\n  char *errorMessage;\n  uint filePermissions;\n  char **fileContentList;\n  FILE *filePointer;\n  char hasAdditionalInfo;\n  undefined fileType;\n  char isExecutable;\n  char isWritable;\n  char isReadable;\n  char isSetUid;\n  char isSetGid;\n  char isSticky;\n  char isUserExecute;\n  char isUserWrite;\n  char isUserRead;\n  undefined isFlagSet;\n  uint fileMode;\n  uint fileSize;\n  uint timestamp;\n  undefined8 parameter22;\n  \n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorMessage);\n  filePermissions = fileMode & 0xf000;\n  if (filePermissions == 0x4000) {\n    fileType = 100;\n  }\n  else if (filePermissions == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (filePermissions == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (filePermissions == 0x2000) {\n    fileType = 99;\n  }\n  else if (filePermissions == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (filePermissions != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  isExecutable = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  isWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  isReadable = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  isSetUid = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  isSetGid = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  isSticky = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  isUserExecute = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  isUserWrite = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  isUserRead = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (isReadable == 'x') {\n      isReadable = 's';\n    }\n    else {\n      isReadable = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (isSticky == 'x') {\n      isSticky = 's';\n    }\n    else {\n      isSticky = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (isUserRead == 'x') {\n      isUserRead = 't';\n    }\n    else {\n      isUserRead = 'T';\n    }\n  }\n  isFlagSet = 0;\n  fprintf(filePointer,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSize,\n          (ulong)timestamp,parameter22,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileContentList,filePointer);\n  if (hasAdditionalInfo != '\\0') {\n    if ((*(byte *)((long)fileContentList + 0x49) & 0x10) == 0) {\n      if (fileContentList[0xb] != (char *)0x0) {\n        fprintf(filePointer,\" 0x%lx\");\n      }\n    }\n    else if (fileContentList[0xc] != (char *)0x0) {\n      fprintf(filePointer,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePointer);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputs",
                "dcgettext",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "format_time_data_00102d8c"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "improve_binary_metadata_00105300",
                "param_1": "filename",
                "param_2": "metadata",
                "plVar1": "archived_file_ptr",
                "pcVar2": "output_filename",
                "bVar3": "is_thin_library",
                "cVar4": "error_code",
                "iVar5": "result",
                "uVar6": "error_message",
                "uVar7": "context_message",
                "piVar8": "errno_location",
                "lVar9": "file_descriptor",
                "puVar10": "inarch_file_ptr",
                "local_b0": "format_buffer",
                "local_a8": "stat_buffer"
            },
            "code": "\n\n\nundefined8 * improve_binary_metadata_00105300(char *filename,undefined8 *metadata)\n\n{\n  long *archived_file_ptr;\n  char *output_filename;\n  byte is_thin_library;\n  char error_code;\n  int result;\n  undefined8 error_message;\n  undefined8 context_message;\n  int *errno_location;\n  long file_descriptor;\n  undefined8 *inarch_file_ptr;\n  undefined8 format_buffer;\n  stat stat_buffer;\n  \n  bfd_set_error(0);\n  if (target == (char *)0x0) {\n    target = \"plugin\";\n  }\n  result = stat(filename,&stat_buffer);\n  output_filename = output_filename;\n  if (result == 0) goto LAB_001053be;\n  errno_location = __errno_location();\n  if (*errno_location == 2) {\n    if (operation_alters_arch == '\\0') {\n      fprintf(_stderr,\"%s: \",program_name);\n      perror(filename);\n      maybequit();\n      return (undefined8 *)0x0;\n    }\n    if ((target == (char *)0x0) && (metadata != (undefined8 *)0x0)) {\n      inarch_file_ptr = (undefined8 *)open_inarch_cold();\n      return inarch_file_ptr;\n    }\n    metadata = (undefined8 *)bfd_openw(filename,target);\n    if (((metadata != (undefined8 *)0x0) && (error_code = bfd_set_format(metadata,2), error_code != '\\0')) &&\n       (error_code = bfd_close(metadata), error_code != '\\0')) {\n      output_filename = filename;\n      if (silent_create == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  bfd_fatal(filename);\n  do {\n    is_thin_library = *(byte *)((long)metadata + 0x49) >> 4 & 1;\n    if (make_thin_archive == '\\0') {\n      if (is_thin_library != 0) {\n        context_message = *metadata;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_message,context_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_library == 0) {\n      context_message = *metadata;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_message,context_message);\nLAB_001027cb:\n      bfd_nonfatal(filename);\n      result = bfd_get_error();\n      if (result == 0xd) {\nLAB_00102812:\n        list_matching_formats(format_buffer);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = metadata + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(metadata,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(metadata,file_descriptor)) {\n        *archived_file_ptr = file_descriptor;\n        archived_file_ptr = (long *)(file_descriptor + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      result = bfd_get_error();\n      if (result == 9) {\n        return metadata;\n      }\n      do {\n        bfd_fatal(filename);\nLAB_00102826:\n        context_message = dcgettext(0,\"creating %s\",5);\n        non_fatal(context_message,filename);\n        output_filename = filename;\nLAB_001053be:\n        output_filename = output_filename;\n        metadata = (undefined8 *)bfd_openr(filename,target);\n      } while (metadata == (undefined8 *)0x0);\n      error_code = bfd_check_format_matches(metadata,2,&format_buffer);\n      if (error_code == '\\0') goto LAB_001027cb;\n    } while (((operation != 2) && (operation != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(metadata,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_fatal",
                "perror",
                "fprintf",
                "stat",
                "bfd_set_format",
                "bfd_check_format_matches",
                "bfd_nonfatal",
                "non_fatal",
                "list_matching_formats",
                "bfd_openw",
                "open_inarch.cold",
                "bfd_close",
                "maybequit",
                "fatal",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "xexit",
                "bfd_get_error",
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "ranlib_only",
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "improve_binary_metadata_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "parse_arguments_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptr1",
                "puVar2": "ptr2",
                "bVar3": "byteVar",
                "plVar4": "ptr3",
                "puVar5": "ptr4",
                "uVar6": "var1",
                "uVar7": "var2",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "ptrArray1",
                "piVar11": "intPtr1",
                "puVar12": "ptr5",
                "bVar13": "byteVar1",
                "cVar14": "charVar",
                "iVar15": "var3",
                "uVar16": "var4",
                "uVar17": "var5",
                "pFVar18": "filePtr1",
                "sVar19": "sizeVar1",
                "sVar20": "sizeVar2",
                "__ptr": "bytePtr1",
                "plVar21": "ptr6",
                "pFVar22": "filePtr2",
                "pcVar23": "strPtr1",
                "lVar24": "longVar1",
                "uVar25": "ulongVar1",
                "puVar26": "ptrArray2",
                "uVar27": "var6",
                "pFVar28": "filePtr3",
                "pplVar29": "ptrArray3",
                "uVar30": "var7",
                "pcVar43": "strPtr2",
                "uVar44": "var8",
                "iVar45": "var9",
                "pcVar46": "strPtr3",
                "bVar47": "boolVar3",
                "bVar48": "byteVar2",
                "local_130": "var10",
                "local_128": "var11",
                "local_118": "byteArray1",
                "local_110": "strPtrArray1",
                "local_108": "sizeVar3",
                "local_100": "longVar2",
                "local_c8": "byteArray2",
                "uStack_c6": "byteVar3",
                "uStack_c5": "byteVar4",
                "local_b0": "var12",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid parse_arguments_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptr1;\n  uint *ptr2;\n  byte byteVar;\n  long *ptr3;\n  undefined8 *ptr4;\n  undefined4 var1;\n  undefined4 var2;\n  bool boolVar1;\n  bool boolVar2;\n  char **ptrArray1;\n  int *intPtr1;\n  undefined *ptr5;\n  byte byteVar1;\n  char charVar;\n  int var3;\n  uint var4;\n  undefined4 var5;\n  FILE *filePtr1;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  byte *bytePtr1;\n  long *ptr6;\n  FILE *filePtr2;\n  char *strPtr1;\n  long longVar1;\n  ulong ulongVar1;\n  undefined8 *ptrArray2;\n  undefined8 var6;\n  FILE *filePtr3;\n  long **ptrArray3;\n  undefined8 var7;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long lVar34;\n  long lVar35;\n  undefined1 *puVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *strPtr2;\n  uint var8;\n  int var9;\n  char *strPtr3;\n  bool boolVar3;\n  byte byteVar2;\n  undefined8 var10;\n  FILE *var11;\n  byte *byteArray1;\n  char **strPtrArray1;\n  size_t sizeVar3;\n  long longVar2;\n  undefined byteArray2 [2];\n  undefined byteVar3;\n  undefined5 byteVar4;\n  uint var12;\n  \n  byteVar2 = 0;\n  strPtr3 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  programName = *(long **)argv;\n  xmalloc_set_programName();\n  bfd_set_error_programName(programName);\n  bfd_plugin_set_programName(programName);\n  strPtr2 = (char *)argv;\n  filePtr1 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  strPtrArray1 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  var11 = (FILE *)0x0;\n  filePtr2 = argv;\n  do {\n    var4 = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)var4;\n    var10 = (FILE *)((long)unaff_RBP * 8);\n    strPtr2 = (char *)filePtr2;\n    if (**(char **)(&filePtr2->_flags + (long)unaff_RBP * 2) == '@') {\n      var8 = (int)strPtrArray1 - 1;\n      strPtrArray1 = (char **)(ulong)var8;\n      if (var8 == 0) {\n        ptr6 = *(long **)filePtr2;\n        strPtr3 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,strPtr3,ptr6);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&filePtr2->_flags + (long)unaff_RBP * 2) + 1;\n      var3 = stat(pcVar39,(stat *)byteArray2);\n      if (-1 < var3) {\n        if ((var12 & 0xf000) == 0x4000) {\n          ptr6 = *(long **)filePtr2;\n          strPtr3 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePtr1 = fopen(pcVar39,\"r\");\n        if (filePtr1 != (FILE *)0x0) {\n          var3 = fseek(filePtr1,0,2);\n          if (((var3 != -1) && (sizeVar1 = ftell(filePtr1), sizeVar1 != 0xffffffffffffffff)) &&\n             (var3 = fseek(filePtr1,0,0), var3 != -1)) {\n            byteArray1 = (byte *)xmalloc(sizeVar1 + 1);\n            sizeVar2 = fread(byteArray1,1,sizeVar1,filePtr1);\n            if ((sizeVar1 == sizeVar2) || (var3 = ferror(filePtr1), var3 == 0)) {\n              byteArray1[sizeVar2] = 0;\n              byteVar1 = *byteArray1;\n              pbyteVar3 = byteArray1;\n              while( true ) {\n                if (byteVar1 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar1 * 2] & 0x40) == 0) break;\n                byteVar1 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sizeVar1 = strlen((char *)byteArray1);\n              bytePtr1 = (byte *)xmalloc(sizeVar1 + 1);\n              filePtr3 = (FILE *)0x0;\n              var3 = 0;\n              boolVar2 = false;\n              boolVar3 = false;\n              boolVar1 = false;\n              longVar2 = 0;\n              pbyteVar3 = byteArray1;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((var3 == 0) || (var3 + -1 <= (int)longVar2)) {\n                  if (filePtr3 == (FILE *)0x0) {\n                    var3 = 8;\n                    filePtr3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    var3 = var3 * 2;\n                    filePtr3 = (FILE *)xrealloc(filePtr3,(long)var3 << 3);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar2 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr3->_flags + longVar2 * 8);\n                }\n                byteVar1 = *pbyteVar3;\n                pbyteVar8 = bytePtr1;\n                while (byteVar1 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar1 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | boolVar3))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      boolVar3 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *pbyteVar8 = byteVar1;\n                    pbyteVar8 = pbyteVar8 + 1;\n                    boolVar1 = false;\n                    byteVar1 = *pbyteVar3;\n                    if (byteVar1 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar1 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar1 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar8 = byteVar1;\n                      pbyteVar8 = pbyteVar8 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar1 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar1 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar1 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  ptr1 = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar1 = *ptr1;\n                }\nLAB_0010606f:\n                *pbyteVar8 = 0;\n                ptr6 = (long *)xstrdup(bytePtr1);\n                *ppcVar31 = (char *)ptr6;\n                *(undefined8 *)(filePtr3->_shortbuf + longVar2 * 8 + -0x7b) = 0;\n                byteVar1 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar1 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar1 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar1 * 2];\n                }\n                longVar2 = longVar2 + 1;\n                if (byteVar1 == 0) {\n                  free(bytePtr1);\n                  if (filePtr2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byteArray1);\n          }\n          fclose(filePtr1);\n        }\n      }\n    }\n    if ((int)strPtr3 <= (int)(var4 + 1)) {\nLAB_001062c6:\n      do {\n        if (is_ranlib < 0) goto LAB_001073cc;\nLAB_001062d3:\n        var4 = (uint)unaff_R12;\n        var3 = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (var3 != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        var4 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptr5 = xatexit_head;\n        unaff_R12 = (FILE *)(ulong)var4;\n        if ((char)var4 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = xatexit_cleanup;\n          }\n          if (*(int *)(xatexit_head + 8) < 0x20) {\nLAB_0010632b:\n            ptr5 = xatexit_head;\n            var3 = *(int *)(xatexit_head + 8);\n            *(int *)(xatexit_head + 8) = var3 + 1;\n            *(code **)(ptr5 + (long)var3 * 8 + 0x10) = remove_output;\n          }\n          else {\n            ptrArray2 = (undefined8 *)malloc(0x110);\n            if (ptrArray2 != (undefined8 *)0x0) {\n              *ptrArray2 = ptr5;\n              *(undefined4 *)(ptrArray2 + 1) = 0;\n              xatexit_head = (undefined *)ptrArray2;\n              goto LAB_0010632b;\n            }\n          }\n          longVar1 = 1;\n          do {\n            lVar35 = longVar1;\n            var3 = (int)strPtr3;\n            if (var3 <= (int)lVar35) break;\n            charVar = ar_emul_default_parse_arg(*(undefined8 *)((int *)strPtr2 + lVar35 * 2));\n            longVar1 = lVar35 + 1;\n          } while (charVar != '\\0');\n          strPtr3 = (char *)((long)strPtr2 + lVar35 * 8 + -8);\n          var8 = var3 - ((int)lVar35 + -1);\n          filePtr1 = (FILE *)(ulong)var8;\n          if (is_ranlib != 0) {\n            strPtr2 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (var3 = getopt_long(filePtr1,strPtr3,\"DhHUvVt\",long_options), var3 != -1) {\n              if (var3 < 0x77) {\n                if (0x43 < var3) {\n                  switch(var3) {\n                  case 0x44:\n                    deterministic = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    show_help = 1;\n                    break;\n                  case 0x55:\n                    deterministic = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    show_version = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = var4;\n                  }\n                }\n              }\n              else if (var3 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)var8 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              ranlib_usage();\n            }\n            else {\n              if (show_help != 0) {\nLAB_0010711b:\n                ranlib_usage();\n                goto LAB_00107125;\n              }\n              if (show_version != 0) {\n                print_version(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              strPtr2 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)var8 <= (int)strPtr2) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)strPtr3 + (long)strPtr2 * 2);\n                if ((char)uVar37 != '\\0') break;\n                var4 = ranlib_only();\n                strPtr2 = (char *)((long)(int *)strPtr2 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | var4);\n              }\n            }\n            while (longVar1 = get_file_size(pcVar39), longVar1 < 1) {\n              var4 = 1;\nLAB_001071c4:\n              intPtr1 = (int *)strPtr2;\n              strPtr2 = (char *)((long)intPtr1 + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | var4);\n              if ((int)var8 <= (int)strPtr2) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)strPtr3 + 0x83) + (long)intPtr1 * 8 + -0x7b);\n            }\n            var3 = open(pcVar39,2,0);\n            if (var3 < 0) {\n              bfd_set_error(1);\n              bfd_fatal(pcVar39);\nLAB_0010737f:\n              bfd_fatal(pcVar39);\nLAB_00107387:\n              bfd_nonfatal(pcVar39);\n              var3 = bfd_get_error();\n              if (var3 == 0xd) {\n                list_matching_formats\n                          (CONCAT53(byteVar4,CONCAT12(byteVar3,CONCAT11(byteArray2[1],byteArray2[0])))\n                          );\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,byteArray2);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (deterministic != 0) {\n                ptr2 = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *ptr2 = *ptr2 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                var4 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            var6 = dcgettext(0,\"%s: no archive map to update\",5);\n            fatal(var6,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(programName);\n            sizeVar1 = strlen(pcVar39);\n            if ((sizeVar1 < 6) ||\n               (var3 = filename_cmp(pcVar39 + (sizeVar1 - 6),\"ranlib\"), var3 != 0)) {\n              is_ranlib = 0;\n            }\n            else {\n              is_ranlib = 1;\n            }\n            goto LAB_001062d3;\n          }\n          puVar36 = long_options;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          strPtr2 = (char *)&DAT_001096a0;\n          filePtr2 = (FILE *)unaff_RBP;\n          filePtr3 = filePtr1;\n          if ((int)var8 < 2) goto switchD_00107462_caseD_1;\n          var10 = (FILE *)CONCAT71(var10._1_7_,(char)var4);\nLAB_001063a3:\n          filePtr2 = (FILE *)unaff_RBP;\n          if (**(char **)((long)strPtr3 + 8) != '-') {\n            byteArray2[0] = 0x2d;\n            byteVar3 = 0;\n            sizeVar1 = strlen(*(char **)((long)strPtr3 + 8));\n            var3 = (int)sizeVar1 + (int)filePtr1;\n            unaff_R12 = (FILE *)xmalloc((long)var3 * 8);\n            var5 = *(undefined4 *)((long)strPtr3 + 4);\n            unaff_R12->_flags = *(int *)strPtr3;\n            *(undefined4 *)&unaff_R12->field_0x4 = var5;\n            ppcVar31 = *(char ***)((long)strPtr3 + 8);\n            var11 = (FILE *)((long)strPtr3 + 0x10);\n            strPtrArray1 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              byteArray1 = byteArray2;\n              byteArray2[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                byteArray2[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(byteArray1);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  byteArray2[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(byteArray1);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    byteArray2[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(byteArray1);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    strPtrArray1 = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        byteArray2[1] = charVar;\n                        strPtr1 = (char *)xstrdup(byteArray1);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = strPtr1;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        strPtrArray1 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar1 = (long)(int)filePtr1;\n            intPtr1 = (int *)strPtr3 + longVar1 * 2;\n            if (var11 < intPtr1) {\n              ulongVar1 = longVar1 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)strPtr3 + 0x18))) {\n                *ppcVar32 = *(char **)((long)strPtr3 + 0x10);\n                if (((char **)((long)strPtr3 + 0x18) < intPtr1) &&\n                   ((((ppcVar32[1] = *(char **)((long)strPtr3 + 0x18),\n                      (char **)((long)strPtr3 + 0x20) < intPtr1 &&\n                      (ppcVar32[2] = *(char **)((long)strPtr3 + 0x20),\n                      (char **)((long)strPtr3 + 0x28) < intPtr1)) &&\n                     (ppcVar32[3] = *(char **)((long)strPtr3 + 0x28),\n                     (char **)((long)strPtr3 + 0x30) < intPtr1)) &&\n                    (ppcVar32[4] = *(char **)((long)strPtr3 + 0x30),\n                    (char **)((long)strPtr3 + 0x38) < intPtr1)))) {\n                  ppcVar32[5] = *(char **)((long)strPtr3 + 0x38);\n                  ptrArray1 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)strPtr3 + 0x40); ppcVar31 < intPtr1;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar2 * -2 + 1) {\n                    *ptrArray1 = *ppcVar31;\n                    ptrArray1 = ptrArray1 + (ulong)byteVar2 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                var5 = *(undefined4 *)((long)((long)strPtr3 + 0x10) + 4);\n                var1 = *(undefined4 *)((long)strPtr3 + 0x18);\n                var2 = *(undefined4 *)((long)((long)strPtr3 + 0x18) + 4);\n                uVar40 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)strPtr3 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = var5;\n                *(undefined4 *)(ppcVar32 + 1) = var1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = var2;\n                var5 = *(undefined4 *)((long)((long)strPtr3 + 0x20) + 4);\n                var1 = *(undefined4 *)((long)strPtr3 + 0x28);\n                var2 = *(undefined4 *)((long)((long)strPtr3 + 0x28) + 4);\n                ulongVar1 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)strPtr3 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = var5;\n                *(undefined4 *)(ppcVar32 + 3) = var1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = var2;\n                if (ulongVar1 != 2) {\n                  var5 = *(undefined4 *)((long)((long)strPtr3 + 0x30) + 4);\n                  var1 = *(undefined4 *)((long)strPtr3 + 0x38);\n                  var2 = *(undefined4 *)((long)((long)strPtr3 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)strPtr3 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = var5;\n                  *(undefined4 *)(ppcVar32 + 5) = var1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = var2;\n                  if (ulongVar1 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)strPtr3 + 0x83) + uVar41 * 0x10 + -0x73;\n                      var5 = *(undefined4 *)(pcVar39 + 4);\n                      var1 = *(undefined4 *)(pcVar39 + 8);\n                      var2 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = var5;\n                      *(undefined4 *)(ppcVar31 + 1) = var1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = var2;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar1);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)var11 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar1 + -2;\n            }\n            filePtr1 = (FILE *)(ulong)(var3 - 1);\n            *ppcVar32 = (char *)0x0;\n            strPtr3 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            var4 = (uint)unaff_R12;\n            var8 = getopt_long((ulong)filePtr1 & 0xffffffff,strPtr3,filePtr2,puVar36,0);\n            unaff_RBP = (char *)filePtr2;\n            if (var8 == 0xffffffff) break;\n            if (((var8 - 100 < 0x15) && ((0x117201UL >> ((ulong)(var8 - 100) & 0x3f) & 1) != 0))\n               && (operation != 0)) goto LAB_001067f7;\n            filePtr3 = (FILE *)strPtr3;\n            if (var8 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)strPtr2 + (long)((int *)strPtr2)[var8]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            usage(0);\n            strPtr3 = (char *)filePtr3;\nswitchD_00107462_caseD_68:\n            show_help = 1;\n          }\nLAB_00106680:\n          var8 = operation;\n          filePtr2 = (FILE *)unaff_RBP;\n          if (operation == 0) {\n            if (((write_armap == 1) || (mri_mode != 0)) ||\n               (((int)filePtr1 <= _optind || (_optind < 1)))) {\n              var8 = 0;\n              goto LAB_001066aa;\n            }\n            strPtr3 = (char *)((long)strPtr3 + (long)_optind * 8 + -8);\n            var4 = (int)filePtr1 - (_optind + -1);\n            filePtr1 = (FILE *)(ulong)var4;\n            _optind = 0;\n            if (1 < (int)var4) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)var10 & 0xff);\n          var4 = (uint)unaff_R12;\n          puVar36 = (undefined1 *)((int *)strPtr3 + (long)_optind * 2);\n          if (show_help == 0) {\n            if (show_version != 0) {\n              print_version(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (mri_mode == 0) {\n              filePtr3 = (FILE *)strPtr3;\n              if (*(long *)puVar36 == 0) goto switchD_00107462_caseD_1;\n              if (operation == 7) {\n                if (write_armap == 0) {\n                  if (var8 == 3) goto LAB_00106abc;\n                  if (var8 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                operation = 2;\n                if (newer_only != 0) goto LAB_0010704f;\n              }\n              else if ((var8 == 3) || (var8 == 0)) {\n                if (write_armap == 1) {\n                  var5 = ranlib_only();\n                    \n                  xexit(var5);\n                }\nLAB_00106abc:\n                if (var8 == 0) goto LAB_00106eff;\n                if (newer_only != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (newer_only != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (deterministic < 0) {\n                deterministic = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (postype != 0) {\n                posname = *(long *)puVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (posname == 0) goto LAB_00106803;\n              }\n              if (counted_name_mode != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((operation & 0xfffffffb) == 1) {\n                  var3 = (int)unaff_RBP;\n                  if (*(char **)((long)puVar36 + (long)var3 * 2 * 4) == (char *)0x0) {\n                    var6 = dcgettext(0,\"`N\\' missing value.\",5);\n                    fatal(var6);\n                    var8 = extraout_EDX;\nLAB_00107548:\n                    if (var8 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (deterministic < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(var3 + 1);\n                  longVar1 = strtol(*(char **)((long)puVar36 + (long)var3 * 2 * 4),(char **)0x0,10);\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  counted_name_counter = (int)longVar1;\n                  if (0 < counted_name_counter) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar1 = (long)(int)unaff_RBP;\n              filePtr2 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)puVar36 + longVar1 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePtr2 = (FILE *)((long)puVar36 + (longVar1 + 1) * 2 * 4);\n              if (*(FILE **)filePtr2 == (FILE *)0x0) {\n                strPtr2 = (char *)0x0;\n                filePtr2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)puVar36 + (longVar1 + 2) * 2 * 4) == 0) {\n                strPtr2 = (char *)0x1;\n              }\n              else if (*(long *)((long)puVar36 + (longVar1 + 3) * 2 * 4) == 0) {\n                strPtr2 = (char *)0x2;\n              }\n              else if (*(long *)((long)puVar36 + (longVar1 + 4) * 2 * 4) == 0) {\n                strPtr2 = (char *)0x3;\n              }\n              else if (*(long *)((long)puVar36 + (longVar1 + 5) * 2 * 4) == 0) {\n                strPtr2 = (char *)0x4;\n              }\n              else {\n                filePtr1 = (FILE *)0x5;\n                do {\n                  strPtr2 = (char *)filePtr1;\n                  filePtr1 = (FILE *)((long)(int *)strPtr2 + 1);\n                } while (*(long *)((int *)((long)puVar36 + longVar1 * 2 * 4) + (long)filePtr1 * 2) != 0\n                        );\n              }\n              ptrArray2 = (undefined8 *)open_inarch();\n              filePtr1 = filePtr2;\n              if (operation == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrArray2 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePtr2;\n                  if (libdeps != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  map_over_members(ptrArray2,extract_file,unaff_RBP,(ulong)strPtr2 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (libdeps != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar1 = strlen(libdeps);\n                strPtr3 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sizeVar1 + 1);\n                libdeps_bfd = bfd_create(\"__.LIBDEP\",ptrArray2);\n                if (libdeps_bfd == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar1 = bfd_find_target(\"binary\",libdeps_bfd);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar1 != 0) {\n                    charVar = bfd_set_format(libdeps_bfd,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(libdeps_bfd,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    filePtr3 = (FILE *)bfd_bwrite(libdeps,unaff_RBP,libdeps_bfd);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePtr3 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(libdeps_bfd,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    longVar1 = bfd_find_target(\"plugin\",libdeps_bfd,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (longVar1 == 0) goto LAB_00106803;\n                    var3 = (int)strPtr2;\n                    var10 = (FILE *)((long)(var3 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(var10,\"Cannot reset libdeps record type.\");\n                    if (var3 == 0) {\n                      longVar1 = 0;\n                    }\n                    else {\n                      var5 = *(undefined4 *)&filePtr2->field_0x4;\n                      *(int *)unaff_RBP = filePtr2->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = var5;\n                      longVar1 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (strPtr2 = var10[-1]._unused2 + 4; strPtr2 != (char *)0x0;\n                          strPtr2 = strPtr2 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePtr2->_flags;\n                        filePtr2 = (FILE *)((long)filePtr2 + (ulong)byteVar2 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar2 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVar1) = \"__.LIBDEP\";\n                    strPtr2 = (char *)(ulong)(var3 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)var10) = 0;\n                    switch(operation) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePtr2 = (FILE *)unaff_RBP;\n                      if (silent_create == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(operation) {\n              case 1:\n                unaff_RBP = (char *)filePtr2;\n                if (filePtr2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePtr1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePtr2;\n                if ((filePtr2 != (FILE *)0x0) || (0 < write_armap)) {\nswitchD_00106ed8_caseD_2:\n                  replace_members(ptrArray2,unaff_RBP,operation == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePtr2;\nswitchD_00106ed8_caseD_3:\n                map_over_members(ptrArray2,print_descr,unaff_RBP,(ulong)strPtr2 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePtr2;\nswitchD_00106ed8_caseD_4:\n                map_over_members(ptrArray2,print_contents,unaff_RBP,(ulong)strPtr2 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (silent_create != 0) goto switchD_001067e8_caseD_2;\n                if (filePtr2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePtr1 = (FILE *)(ptrArray2 + 0x1e);\n                do {\n                  unaff_R12 = filePtr1;\n                  if (*(FILE **)filePtr2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive(ptrArray2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    ptr6 = *(long **)unaff_R12;\n                    strPtr3 = *(char **)filePtr2;\n                    if (ptr6 == (long *)0x0) {\n                      var6 = *ptrArray2;\n                      var7 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      fatal(var7,strPtr3,var6);\n                      strPtr2 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar1 = *ptr6;\n                    var6 = normalize(strPtr3,ptrArray2);\n                    var3 = filename_cmp(var6,longVar1);\n                    if (var3 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)ptr6[0x1e];\n                  ptrArray3 = (long **)get_pos_bfd(filePtr1,3,0);\n                  boolVar3 = verbose != 0;\n                  ptr3 = *ptrArray3;\n                  *ptrArray3 = ptr6;\n                  ptr6[0x1e] = (long)ptr3;\n                  if (boolVar3) {\n                    printf(\"m - %s\\n\",*(FILE **)filePtr2);\n                  }\n                  filePtr2 = (FILE *)&filePtr2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < deterministic) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            usage(1);\n          }\n          deterministic = 1;\nLAB_0010755f:\n          var3 = fileno(_stdin);\n          interactive = isatty(var3);\n          yyparse_isra_0();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        var5 = bfd_get_error();\n        filePtr2 = (FILE *)bfd_errmsg(var5);\n        var6 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        var3 = fatal(var6,\"x86_64-pc-linux-gnu\",filePtr2);\nLAB_0010751b:\n        if (operation == 0) {\nLAB_00107447:\n          puVar36 = pcVar39;\n          filePtr3 = (FILE *)strPtr3;\n          switch(var3) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            deterministic = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            mri_mode = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            counted_name_mode = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            display_offsets = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            full_pathname = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            write_armap = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            make_thin_archive = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            deterministic = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            show_version = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            postype = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            postype = 1;\n            goto LAB_001065a2;\n          case 99:\n            silent_create = 1;\n            goto LAB_001065a2;\n          case 100:\n            operation = 1;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            ar_truncate = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (libdeps == (char *)0x0) {\n              libdeps = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            var4 = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePtr2;\n            break;\n          case 0x6d:\n            operation = 6;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            preserve_dates = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            operation = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            operation = 7;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            operation = 2;\n            operation_alters_arch = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            write_armap = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            operation = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            newer_only = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            verbose = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            operation = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            target = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            output_dir = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePtr2;\nLAB_00106803:\n        var6 = dcgettext(0,pcVar39,5);\n        fatal(var6);\nLAB_00106814:\n        var3 = (int)strPtr3;\n        filePtr3 = (FILE *)xmalloc(8);\n        *(long **)filePtr3 = (long *)0x0;\n        if ((FILE *)strPtr2 == argv) {\nLAB_00106834:\n          if (*(long **)strPtr2 == (long *)0x0) {\n            var3 = 0;\n          }\n          else {\n            longVar1 = 1;\n            do {\n              var3 = (int)longVar1;\n              lVar35 = longVar1 * 2;\n              longVar1 = longVar1 + 1;\n            } while (*(long *)((int *)strPtr2 + lVar35) != 0);\n          }\n          filePtr2 = (FILE *)xmalloc((long)(var3 + 1) << 3);\n          ptr6 = *(long **)strPtr2;\n          longVar1 = 0;\n          while (ptr6 != (long *)0x0) {\n            var6 = xstrdup();\n            *(undefined8 *)((long)&filePtr2->_flags + longVar1) = var6;\n            ptr6 = *(long **)((char *)((long)strPtr2 + 0x83) + longVar1 + -0x7b);\n            longVar1 = longVar1 + 8;\n          }\n          *(undefined8 *)((long)&filePtr2->_flags + longVar1) = 0;\nLAB_0010610a:\n          var3 = (int)strPtr3;\n          strPtr2 = (char *)filePtr2;\n          if (*(long **)filePtr3 == (long *)0x0) goto LAB_00106a80;\n          longVar1 = 0;\n          do {\n            lVar34 = longVar1 + 1;\n            lVar35 = longVar1 * 8;\n            longVar1 = lVar34;\n          } while (*(long *)(filePtr3->_shortbuf + lVar35 + -0x7b) != 0);\n          sizeVar3 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          sizeVar3 = 0;\n        }\n        longVar1 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)strPtr2 + longVar1));\n        filePtr2 = (FILE *)xrealloc(strPtr2,(lVar34 + 1 + (long)var3) * 8);\n        var8 = var3 + -1 + (int)lVar34;\n        strPtr3 = (char *)(ulong)var8;\n        memmove(&filePtr2->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePtr2->_IO_read_ptr + (long)var10),\n                (long)(int)(var3 - var4) << 3);\n        memcpy((void *)((long)&var10->_flags + (long)&filePtr2->_flags),filePtr3,sizeVar3);\n        free(filePtr3);\n        free(byteArray1);\n        fclose(filePtr1);\n        var4 = (int)var11 + 1;\n        unaff_R12 = var10;\n        strPtr2 = (char *)filePtr2;\n        var10 = filePtr3;\n        if ((int)var4 < (int)var8) goto LAB_001061ce;\n      } while( true );\n    }\n    var4 = var4 + 1;\n    var11 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)var4;\n  } while( true );\nswitchD_00107462_caseD_0:\n  var3 = getopt_long((ulong)filePtr1 & 0xffffffff,strPtr3,filePtr2,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePtr2;\n  if (var3 == -1) goto LAB_00106680;\n  if ((0x14 < var3 - 100U) || ((0x117201UL >> ((byte)(var3 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (deterministic != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  var6 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  non_fatal(var6);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePtr1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    output_filename = 0;\n    goto LAB_0010696c;\n  }\n  var9 = 0;\n  var3 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  ptr4 = ptrArray2;\n  if (var3 == 0) {\n    *(byte *)((long)ptrArray2 + 0x49) = *(byte *)((long)ptrArray2 + 0x49) & 0xf7;\n    write_armap = -1;\n  }\n  else {\n    while( true ) {\n      ptr6 = ptr4 + 0x1e;\n      if ((undefined8 *)*ptr6 == (undefined8 *)0x0) break;\n      var6 = *(undefined8 *)*ptr6;\n      var7 = normalize(*(FILE **)unaff_RBP,ptrArray2);\n      var3 = filename_cmp(var7,var6);\n      if ((var3 == 0) &&\n         ((counted_name_mode == '\\0' || (var9 = var9 + 1, var9 == counted_name_counter)))) {\n        if (verbose != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *ptr6 = *(long *)(*ptr6 + 0xf0);\n        filePtr1 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      ptr4 = (undefined8 *)*ptr6;\n    }\n    if (verbose != 0) {\n      filePtr2 = *(FILE **)unaff_RBP;\n      strPtr3 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(strPtr3,filePtr2);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "fprintf",
                "memmove",
                "bfd_create",
                "fclose",
                "ranlib_usage",
                "strcmp",
                "xstrdup",
                "textdomain",
                "bfd_set_error_program_name",
                "bfd_get_error",
                "print_version",
                "usage",
                "free",
                "replace_members",
                "write_archive",
                "fileno",
                "strtol",
                "bfd_bwrite",
                "open_inarch",
                "fseek",
                "map_over_members",
                "xatexit_cleanup",
                "normalize",
                "bfd_make_writable",
                "bfd_fdopenr",
                "get_pos_bfd",
                "bindtextdomain",
                "bfd_errmsg",
                "open",
                "strlen",
                "stat",
                "xmalloc_set_program_name",
                "bfd_nonfatal",
                "yyparse.isra.0",
                "print_descr",
                "ar_emul_default_parse_arg",
                "bfd_init",
                "remove_output",
                "ranlib_only",
                "bfd_close",
                "bfd_plugin_set_program_name",
                "extract_file",
                "getopt_long",
                "bfd_set_default_target",
                "fopen",
                "memcpy",
                "ftell",
                "bfd_find_target",
                "bfd_fatal",
                "bfd_check_format_matches",
                "bfd_set_format",
                "non_fatal",
                "print_contents",
                "bfd_plugin_set_plugin",
                "malloc",
                "list_matching_formats",
                "fread",
                "ferror",
                "setlocale",
                "bfd_make_readable",
                "fatal",
                "get_file_size",
                "dcgettext",
                "isatty",
                "xexit",
                "xrealloc",
                "filename_cmp",
                "printf",
                "xmalloc",
                "bfd_set_error",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "parse_arguments_00105db0"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_arelt_descr"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "free",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main",
                "make_tempname.cold",
                "list_supported_targets",
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold",
                "list_matching_formats",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "create_output_file_00102710",
                "plVar1": "archived_file_ptr",
                "cVar2": "format_valid",
                "bVar3": "is_thin_archive",
                "iVar4": "error_code",
                "lVar5": "file_descriptor",
                "uVar6": "error_message",
                "uVar7": "localized_message",
                "puVar8": "output_file_ptr",
                "unaff_RBP": "stack_ptr",
                "in_stack_00000008": "stack_arg",
                "target": "output_target",
                "silent_create": "is_silent_create",
                "make_thin_archive": "is_make_thin_archive",
                "output_filename": "output_file_name",
                "operation": "file_operation"
            },
            "code": "\nundefined8 * create_output_file_00102710(void)\n\n{\n  long *archived_file_ptr;\n  char format_valid;\n  byte is_thin_archive;\n  int error_code;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 localized_message;\n  undefined8 *output_file_ptr;\n  undefined8 stack_ptr;\n  undefined8 stack_arg;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    format_valid = bfd_check_format(file_descriptor,1);\n    if (format_valid != '\\0') {\n      output_target = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  output_file_ptr = (undefined8 *)bfd_openw();\n  if (((output_file_ptr != (undefined8 *)0x0) && (format_valid = bfd_set_format(output_file_ptr,2), format_valid != '\\0')) &&\n     (format_valid = bfd_close(output_file_ptr), format_valid != '\\0')) {\n    if (is_silent_create == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  bfd_fatal();\n  do {\n    is_thin_archive = *(byte *)((long)output_file_ptr + 0x49) >> 4 & 1;\n    if (is_make_thin_archive == '\\0') {\n      if (is_thin_archive != 0) {\n        localized_message = *output_file_ptr;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        fatal(error_message,localized_message);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_archive == 0) {\n      localized_message = *output_file_ptr;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      fatal(error_message,localized_message);\nLAB_001027cb:\n      bfd_nonfatal();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        list_matching_formats(stack_arg);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file_ptr = output_file_ptr + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_file_ptr,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_file_ptr,file_descriptor)) {\n        *archived_file_ptr = file_descriptor;\n        archived_file_ptr = (long *)(file_descriptor + 0xf0);\n      }\n      *archived_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file_ptr;\n      }\n      do {\n        bfd_fatal();\nLAB_00102826:\n        localized_message = dcgettext(0,\"creating %s\",5);\n        non_fatal(localized_message);\nLAB_001053b7:\n        output_file_name = stack_ptr;\n        output_file_ptr = (undefined8 *)bfd_openr();\n      } while (output_file_ptr == (undefined8 *)0x0);\n      format_valid = bfd_check_format_matches(output_file_ptr,2,&stack0x00000008);\n      if (format_valid == '\\0') goto LAB_001027cb;\n    } while (((file_operation != 2) && (file_operation != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_file_ptr,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "open_inarch"
            ],
            "imported": false,
            "current_name": "create_output_file_00102710"
        },
        "FUN_0010e2b0": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b0",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b0"
        },
        "FUN_0010e208": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e208",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010e208"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompress_and_process_file_00103e95",
                "pplVar1": "pointerToPointerToLong",
                "cVar2": "character",
                "ppFVar3": "pointerToPointerToFile",
                "pFVar4": "pointerToFile",
                "plVar5": "pointerToLong",
                "uVar6": "unsignedVar6",
                "pbVar7": "pointerToByte",
                "iVar8": "integerVar8",
                "pcVar10": "pointerToCharacter",
                "uVar11": "unsignedVar11",
                "iVar9": "integerVar9",
                "plVar12": "pointerToLong",
                "sVar13": "sizeVar13",
                "pvVar14": "pointerToVoid",
                "pcVar15": "pointerToCharacter",
                "pcVar16": "pointerToCharacter",
                "lVar17": "longVar17",
                "lVar18": "longVar18",
                "uVar19": "unsignedVar19",
                "uVar20": "unsignedVar20",
                "lVar21": "longVar21",
                "puVar22": "pointerToUnsignedVar22",
                "puVar23": "pointerToUnsignedVar23",
                "uVar24": "unsignedVar24",
                "iVar25": "integerVar25",
                "uVar26": "unsignedVar26",
                "ppcVar27": "pointerToPointerToCharacter",
                "bVar28": "booleanVar28",
                "ppcVar29": "pointerToPointerToCharacter",
                "bVar30": "booleanVar30",
                "lVar31": "longVar31",
                "pbVar32": "pointerToByte",
                "pbVar33": "pointerToByte",
                "piVar34": "pointerToIntegerVar34",
                "pbVar35": "pointerToByte",
                "uVar36": "unsignedVar36",
                "iVar37": "integerVar37",
                "ppcVar38": "pointerToPointerToCharacter",
                "bVar39": "booleanVar39",
                "auVar40": "arrayOfUnsignedVar40",
                "auVar41": "arrayOfUnsignedVar41",
                "local_828": "pointerToLocal_828",
                "local_820": "pointerToLocal_820",
                "local_810": "pointerToLocal_810"
            },
            "code": "\n\n\nvoid decompressAndProcessFile_00103e95(void)\n\n{\n  long **pointerToPointerToLong;\n  char character;\n  FILE **pointerToPointerToFile;\n  FILE *pointerToFile;\n  long *pointerToLong;\n  undefined8 unsignedVar6;\n  byte *pointerToByte;\n  int integerVar8;\n  char *pointerToCharacter;\n  undefined8 unsignedVar11;\n  int integerVar9;\n  long *pointerToLong;\n  size_t sizeVar13;\n  void *pointerToVoid;\n  char *pointerToCharacter;\n  char *pointerToCharacter;\n  long longVar17;\n  long longVar18;\n  ulong unsignedVar19;\n  uint unsignedVar20;\n  long longVar21;\n  undefined8 *pointerToUnsignedVar22;\n  undefined8 *pointerToUnsignedVar23;\n  uint unsignedVar24;\n  int integerVar25;\n  ulong unsignedVar26;\n  char **pointerToPointerToCharacter;\n  bool booleanVar28;\n  char **pointerToPointerToCharacter;\n  byte booleanVar30;\n  long longVar31;\n  byte *pointerToByte;\n  byte *pointerToByte;\n  int *pointerToIntegerVar34;\n  byte *pointerToByte;\n  uint unsignedVar36;\n  int integerVar37;\n  char **pointerToPointerToCharacter;\n  byte booleanVar39;\n  undefined arrayOfUnsignedVar40 [16];\n  undefined arrayOfUnsignedVar41 [16];\n  char *pointerToLocal_828;\n  char *pointerToLocal_820;\n  long local_818;\n  char **pointerToLocal_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  booleanVar39 = 0;\n  longVar18 = 0;\n  yychar = -2;\n  pointerToPointerToCharacter = local_678;\n  local_800 = 0;\n  pointerToLocal_828 = local_740;\n  local_818 = 200;\n  pointerToLocal_820 = pointerToLocal_828;\n  pointerToLocal_810 = pointerToPointerToCharacter;\nLAB_00103ee9:\n  *pointerToLocal_828 = (char)longVar18;\n  if (pointerToLocal_820 + local_818 + -1 <= pointerToLocal_828) {\n    longVar21 = (long)pointerToLocal_828 - (long)pointerToLocal_820;\n    longVar17 = longVar21 + 1;\n    if (local_818 < 10000) {\n      longVar31 = local_818 * 2;\n      local_818 = 10000;\n      if (longVar31 < 0x2711) {\n        local_818 = longVar31;\n      }\n      pointerToCharacter = (char *)malloc(local_818 * 9 + 7);\n      if (pointerToCharacter != (char *)0x0) {\n        longVar31 = longVar17 * 8;\n        pointerToCharacter = pointerToLocal_820;\n        pointerToCharacter = pointerToCharacter;\n        for (; longVar17 != 0; longVar17 = longVar17 + -1) {\n          *pointerToCharacter = *pointerToCharacter;\n          pointerToCharacter = pointerToCharacter + (ulong)booleanVar39 * -2 + 1;\n          pointerToCharacter = pointerToCharacter + (ulong)booleanVar39 * -2 + 1;\n        }\n        pointerToPointerToCharacter = (char **)(pointerToCharacter + local_818);\n        pointerToPointerToCharacter = pointerToPointerToCharacter;\n        for (; longVar31 != 0; longVar31 = longVar31 + -1) {\n          *(undefined *)pointerToPointerToCharacter = *(undefined *)pointerToLocal_810;\n          pointerToLocal_810 = (char **)((long)pointerToLocal_810 + (ulong)booleanVar39 * -2 + 1);\n          pointerToPointerToCharacter = (char **)((long)pointerToPointerToCharacter + (ulong)booleanVar39 * -2 + 1);\n        }\n        if (pointerToLocal_820 != local_740) {\n          free(pointerToLocal_820);\n        }\n        pointerToLocal_828 = pointerToCharacter + longVar21;\n        pointerToPointerToCharacter = pointerToPointerToCharacter + longVar21;\n        pointerToLocal_820 = pointerToCharacter;\n        pointerToLocal_810 = pointerToPointerToCharacter;\n        if (pointerToCharacter + local_818 + -1 <= pointerToLocal_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    yyerror_constprop_0();\nLAB_0010524c:\n    pointerToCharacter = pointerToLocal_820;\n    if (pointerToLocal_820 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pointerToCharacter);\n    return;\n  }\nLAB_00103fd8:\n  integerVar37 = (int)longVar18;\n  if (integerVar37 == 3) goto LAB_0010524c;\n  character = (&yypact)[integerVar37];\n  if (character != -0xe) {\n    if (yychar == -2) {\n      if (yy_init == 0) {\n        yy_init = 1;\n        if (yy_start == 0) {\n          yy_start = 1;\n        }\n        if (yyin == (FILE *)0x0) {\n          yyin = _stdin;\n        }\n        if (yyout == (FILE *)0x0) {\n          yyout = _stdout;\n        }\n        if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0)) {\n          yyensure_buffer_stack();\n          pointerToUnsignedVar22 = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          unsignedVar11 = yy_create_buffer_constprop_0(yyin);\n          *pointerToUnsignedVar22 = unsignedVar11;\n        }\n        yy_load_buffer_state();\n      }\nLAB_001040b1:\n      *yy_c_buf_p = yy_hold_char;\n      pointerToByte = yy_c_buf_p;\n      pointerToByte = yy_c_buf_p;\n      unsignedVar20 = yy_start;\nLAB_001040d4:\n      unsignedVar19 = (ulong)unsignedVar20;\n      unsignedVar26 = (ulong)local_7fc;\n      booleanVar28 = false;\n      do {\n        booleanVar30 = yy_ec[*pointerToByte];\n        if (*(short *)(yy_accept + (long)(int)unsignedVar19 * 2) != 0) {\n          booleanVar28 = true;\n          unsignedVar26 = unsignedVar19 & 0xffffffff;\n          local_7f8 = pointerToByte;\n        }\n        while( true ) {\n          integerVar8 = (int)unsignedVar19;\n          longVar18 = (long)(int)((int)*(short *)(yy_base + (long)integerVar8 * 2) + (uint)booleanVar30);\n          if (integerVar8 == *(short *)(yy_chk + longVar18 * 2)) break;\n          unsignedVar19 = (ulong)(uint)(int)*(short *)(yy_def + (long)integerVar8 * 2);\n          if (0xb0 < *(short *)(yy_def + (long)integerVar8 * 2)) {\n            booleanVar30 = yy_meta[(int)(uint)booleanVar30];\n          }\n        }\n        pointerToByte = pointerToByte + 1;\n        unsignedVar19 = (ulong)*(short *)(yy_nxt + longVar18 * 2);\n      } while (*(short *)(yy_base + unsignedVar19 * 2) != 0xc2);\n      local_7fc = (uint)unsignedVar26;\n      pointerToByte = pointerToByte;\n      if (booleanVar28) {\n        yy_last_accepting_cpos = local_7f8;\n        yy_last_accepting_state = local_7fc;\n      }\nLAB_0010419f:\n      integerVar8 = (int)*(short *)(yy_accept + (long)(int)unsignedVar19 * 2);\n      if (integerVar8 == 0) {\n        integerVar8 = (int)*(short *)(yy_accept + (long)(int)yy_last_accepting_state * 2);\n        pointerToByte = yy_last_accepting_cpos;\n      }\n      yyleng = (int)pointerToByte - (int)pointerToByte;\n      yy_hold_char = *pointerToByte;\n      yy_c_buf_p = pointerToByte;\n      yytext = pointerToByte;\n      *pointerToByte = 0;\nLAB_001041f0:\n      pointerToByte = yytext;\n      longVar18 = yy_buffer_stack_top;\n      switch(integerVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        yychar = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        yychar = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        yychar = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        yychar = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        yychar = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        yychar = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        yychar = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        yychar = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        yychar = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        yychar = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        yychar = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        yychar = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        yychar = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        yychar = 0x103;\n        break;\n      case 0x1f:\n        linenumber = linenumber + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        yychar = 0x28;\n        break;\n      case 0x21:\n        yychar = 0x29;\n        break;\n      case 0x22:\n        yychar = 0x2c;\n        break;\n      case 0x23:\n        yylval = (char *)xstrdup(yytext);\n        yychar = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        linenumber = linenumber + 1;\n        yychar = 0x102;\n        break;\n      case 0x28:\n        fwrite(yytext,(long)yyleng,1,yyout);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        yychar = 0;\n        break;\n      default:\n        yy_fatal_error(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        yychar = 0x112;\n      }\n      longVar18 = (long)integerVar37;\n    }\n    if (0 < yychar) {\n      if (yychar != 0x100) {\n        integerVar37 = 2;\n        if (yychar < 0x114) {\n          integerVar37 = (int)(char)yytranslate[yychar];\n        }\n        goto LAB_0010497d;\n      }\n      yychar = 0x101;\n      goto LAB_001051f0;\n    }\n    integerVar37 = 0;\n    yychar = 0;\nLAB_0010497d:\n    unsignedVar20 = character + integerVar37;\n    if ((0x22 < unsignedVar20) || (integerVar37 != (char)yycheck[(int)unsignedVar20])) goto LAB_001049db;\n    character = yytable[(int)unsignedVar20];\n    longVar18 = (long)character;\n    if (character < '\\x01') {\n      integerVar37 = -(int)character;\n      goto LAB_00104a0a;\n    }\n    yychar = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    pointerToPointerToCharacter = pointerToPointerToCharacter + 1;\n    *pointerToPointerToCharacter = yylval;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  integerVar37 = (int)(char)(&yydefact)[(int)longVar18];\n  if ((&yydefact)[(int)longVar18] == '\\0') {\n    if (local_800 == 0) {\n      yynerrs = yynerrs + 1;\n      yyerror_constprop_0();\nLAB_001051f0:\n      do {\n        if (((((char)(&yypact)[longVar18] != -0xe) &&\n             (unsignedVar20 = (int)(char)(&yypact)[longVar18] + 1, unsignedVar20 < 0x23)) &&\n            (yycheck[(int)unsignedVar20] == '\\x01')) &&\n           (longVar18 = (long)(char)yytable[(int)unsignedVar20], '\\0' < (char)yytable[(int)unsignedVar20]))\n        goto LAB_00105227;\n        if (pointerToLocal_820 == pointerToLocal_828) goto LAB_0010524c;\n        pointerToLocal_828 = pointerToLocal_828 + -1;\n        pointerToPointerToCharacter = pointerToPointerToCharacter + -1;\n        longVar18 = (long)*pointerToLocal_828;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < yychar) {\n      yychar = -2;\n      goto LAB_001051f0;\n    }\n    if (yychar != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  unsignedVar11 = program_name;\n  pointerToPointerToCharacter = obfd;\n  character = yyr2[integerVar37];\n  pointerToPointerToCharacter = (char **)pointerToPointerToCharacter[1 - character];\n  switch(integerVar37) {\n  case 2:\n  case 6:\n    prompt();\n    break;\n  case 0x13:\n    if (obfd == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*obfd);\n    return;\n  case 0x15:\n    yyerror_constprop_0();\n    break;\n  case 0x17:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToCharacter;\n    if (obfd == (char **)0x0) {\n      pointerToCharacter = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointerToCharacter = (char *)dcgettext(0,pointerToCharacter,5);\n      fprintf(_stderr,pointerToCharacter,unsignedVar11);\n      maybequit();\n    }\n    else {\n      for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n        for (pointerToUnsignedVar23 = (undefined8 *)obfd[0x1f]; pointerToUnsignedVar23 != (undefined8 *)0x0;\n            pointerToUnsignedVar23 = (undefined8 *)pointerToUnsignedVar23[0x1e]) {\n          integerVar8 = filename_cmp(*pointerToUnsignedVar23);\n          if (integerVar8 == 0) {\n            extract_file();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointerToUnsignedVar22,0);\n        unsignedVar6 = program_name;\n        unsignedVar11 = *pointerToUnsignedVar22;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedVar6,unsignedVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToCharacter;\n    if (obfd == (char **)0x0) {\nLAB_00104b4f:\n      pointerToCharacter = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n      booleanVar28 = false;\n      pointerToPointerToCharacter = obfd + 0x1f;\n      for (pointerToCharacter = obfd[0x1f]; pointerToCharacter != (char *)0x0; pointerToCharacter = *(char **)(pointerToCharacter + 0xf0)) {\n        integerVar8 = filename_cmp();\n        if (integerVar8 == 0) {\n          pointerToCharacter = (char *)bfd_openr(*pointerToUnsignedVar22,0);\n          unsignedVar11 = program_name;\n          if (pointerToCharacter == (char *)0x0) {\n            unsignedVar6 = *pointerToUnsignedVar22;\n            pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointerToCharacter,unsignedVar11,unsignedVar6);\n            maybequit();\n          }\n          else {\n            *pointerToPointerToCharacter = pointerToCharacter;\n            booleanVar28 = true;\n            *(undefined8 *)(pointerToCharacter + 0xf0) = *(undefined8 *)(pointerToCharacter + 0xf0);\n          }\n        }\n        else {\n          pointerToPointerToCharacter = (char **)(pointerToCharacter + 0xf0);\n        }\n      }\n      if (!booleanVar28) {\n        pointerToCharacter = (char *)bfd_openr(*pointerToUnsignedVar22,0);\n        unsignedVar6 = program_name;\n        unsignedVar11 = *pointerToUnsignedVar22;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedVar6,unsignedVar11);\n        unsignedVar11 = program_name;\n        if (pointerToCharacter == (char *)0x0) {\n          unsignedVar6 = *pointerToUnsignedVar22;\n          pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointerToCharacter,unsignedVar11,unsignedVar6);\n          maybequit();\n        }\n        else {\n          *pointerToPointerToCharacter = pointerToCharacter;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (obfd != (char **)0x0) {\n      obfd[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToCharacter;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n      booleanVar28 = false;\n      pointerToPointerToCharacter = obfd + 0x1f;\n      for (pointerToUnsignedVar23 = (undefined8 *)obfd[0x1f]; unsignedVar11 = program_name, pointerToUnsignedVar23 != (undefined8 *)0x0;\n          pointerToUnsignedVar23 = (undefined8 *)pointerToUnsignedVar23[0x1e]) {\n        integerVar8 = filename_cmp(*pointerToUnsignedVar23,*pointerToUnsignedVar22);\n        if (integerVar8 == 0) {\n          booleanVar28 = true;\n          *pointerToPointerToCharacter = (char *)pointerToUnsignedVar23[0x1e];\n        }\n        else {\n          pointerToPointerToCharacter = (char **)(pointerToUnsignedVar23 + 0x1e);\n        }\n      }\n      if (!booleanVar28) {\n        unsignedVar6 = *pointerToUnsignedVar22;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedVar11,unsignedVar6);\n        maybequit();\n      }\n    }\n    break;\n  case 0x1b:\n    pointerToUnsignedVar22 = (undefined8 *)*pointerToPointerToCharacter;\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerToUnsignedVar22 != (undefined8 *)0x0; pointerToUnsignedVar22 = (undefined8 *)pointerToUnsignedVar22[1]) {\n      pointerToCharacter = (char *)bfd_openr(*pointerToUnsignedVar22,\"plugin\");\n      unsignedVar11 = program_name;\n      pointerToPointerToCharacter = obfd;\n      if (pointerToCharacter == (char *)0x0) {\n        unsignedVar6 = *pointerToUnsignedVar22;\n        pointerToCharacter = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointerToCharacter,unsignedVar11,unsignedVar6);\n        maybequit();\n      }\n      else {\n        *(char **)(pointerToCharacter + 0xf0) = obfd[0x1f];\n        pointerToPointerToCharacter[0x1f] = pointerToCharacter;\n      }\n    }\n    break;\n  case 0x1c:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    pointerToCharacter = *obfd;\n    verbose = 1;\n    outfile = _stdout;\n    pointerToCharacter = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointerToCharacter,pointerToCharacter);\n    for (pointerToCharacter = obfd[0x1f]; pointerToCharacter != (char *)0x0; pointerToCharacter = *(char **)(pointerToCharacter + 0xf0)) {\n      ar_directory_doer(pointerToCharacter,0);\n    }\n    break;\n  case 0x1d:\n    if (obfd == (char **)0x0) goto LAB_00104b4f;\n    if (0 < deterministic) {\n      *(uint *)((long)obfd + 0x44) = *(uint *)((long)obfd + 0x44) | 0x2000;\n    }\n    temp_fd = dup(temp_fd);\n    bfd_close(pointerToPointerToCharacter);\n    pointerToCharacter = real_name;\n    integerVar8 = stat(real_name,&local_7d0);\n    if ((integerVar8 != 0) && (obfd = (char **)bfd_openw(pointerToCharacter,0), obfd != (char **)0x0)) {\n      bfd_set_format(obfd,2);\n      bfd_close(obfd);\n    }\n    smart_rename_constprop_0(temp_name,real_name,temp_fd);\n    obfd = (char **)0x0;\n    free(temp_name);\n    free(real_name);\n    break;\n  case 0x1e:\n    ar_open(*pointerToPointerToCharacter,0);\n    break;\n  case 0x1f:\n    ar_open(*pointerToPointerToCharacter,1);\n    break;\n  case 0x20:\n    pointerToCharacter = *pointerToPointerToCharacter;\n    if (obfd == (char **)0x0) {\n      pointerToCharacter = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar18 = open_inarch(pointerToPointerToCharacter[-1],0);\n    if (longVar18 != 0) {\n      map_over_list(longVar18,ar_addlib_doer,pointerToCharacter);\n    }\n    break;\n  case 0x21:\n    pointerToCharacter = *pointerToPointerToCharacter;\n    pointerToCharacter = pointerToPointerToCharacter[-1];\n    unsignedVar11 = open_inarch(pointerToPointerToCharacter[-2],0);\n    if (pointerToCharacter == (char *)0x0) {\n      outfile = _stdout;\n    }\n    else {\n      outfile = fopen(pointerToCharacter,\"w\");\n      if (outfile != (FILE *)0x0) {\n        map_over_list(unsignedVar11,ar_directory_doer,pointerToCharacter);\n        bfd_close(unsignedVar11);\n        fclose(outfile);\n        break;\n      }\n      outfile = _stdout;\n      pointerToCharacter = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointerToCharacter,pointerToCharacter);\n    }\n    map_over_list(unsignedVar11,ar_directory_doer,pointerToCharacter);\n    bfd_close(unsignedVar11);\n    break;\n  case 0x22:\n    pointerToPointerToCharacter = (char **)*pointerToPointerToCharacter;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    pointerToPointerToCharacter = (char **)0x0;\n    break;\n  case 0x24:\n    pointerToPointerToCharacter = (char **)pointerToPointerToCharacter[-1];\n    break;\n  case 0x26:\n    pointerToPointerToCharacter = (char **)malloc(0x10);\n    pointerToCharacter = pointerToPointerToCharacter[-2];\n    *pointerToPointerToCharacter = *pointerToPointerToCharacter;\n    pointerToPointerToCharacter[1] = pointerToCharacter;\n    break;\n  case 0x2a:\n    verbose = (uint)(verbose == 0);\n  }\n  longVar18 = (long)character;\n  pointerToLocal_828 = pointerToLocal_828 + -longVar18;\n  pointerToPointerToCharacter[1 - longVar18] = (char *)pointerToPointerToCharacter;\n  pointerToPointerToCharacter = pointerToPointerToCharacter + (1 - longVar18);\n  unsignedVar20 = (int)(char)yypgoto[(char)yyr1[integerVar37] + -0x18] + (int)*pointerToLocal_828;\n  if ((unsignedVar20 < 0x23) && (*pointerToLocal_828 == yycheck[(int)unsignedVar20])) {\n    longVar18 = (long)(char)yytable[(int)unsignedVar20];\n  }\n  else {\n    longVar18 = (long)(char)yydefgoto[(char)yyr1[integerVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integerVar8 = ((int)pointerToByte - (int)yytext) + -1;\n  *pointerToByte = yy_hold_char;\n  pointerToPointerToLong = (long **)(yy_buffer_stack + longVar18 * 8);\n  pointerToPointerToFile = (FILE **)*pointerToPointerToLong;\n  if (*(int *)(pointerToPointerToFile + 7) == 0) {\n    yy_n_chars = *(uint *)((long)pointerToPointerToFile + 0x1c);\n    *(undefined4 *)(pointerToPointerToFile + 7) = 1;\n    *pointerToPointerToFile = yyin;\n  }\n  pointerToByte = yy_c_buf_p;\n  pointerToFile = pointerToPointerToFile[1];\n  arrayOfUnsignedVar40._8_8_ = pointerToFile;\n  arrayOfUnsignedVar40._0_8_ = pointerToPointerToFile;\n  if ((byte *)((long)&pointerToFile->_flags + (long)(int)yy_n_chars) < yy_c_buf_p) {\n    if ((byte *)((long)&pointerToFile->_flags + (long)(int)yy_n_chars + 1) < yy_c_buf_p) {\n      arrayOfUnsignedVar40 = yy_fatal_error();\n    }\n    if (*(int *)(arrayOfUnsignedVar40._0_8_ + 0x34) != 0) {\n      unsignedVar20 = (int)((long)pointerToByte - (long)pointerToByte) - 1;\n      for (longVar18 = 0; (int)longVar18 < (int)unsignedVar20; longVar18 = longVar18 + 1) {\n        *(byte *)(arrayOfUnsignedVar40._8_8_ + longVar18) = pointerToByte[longVar18];\n      }\n      pointerToLong = *pointerToPointerToLong;\n      if (*(int *)(pointerToLong + 7) == 2) {\n        yy_n_chars = 0;\n        *(undefined4 *)((long)pointerToLong + 0x1c) = 0;\nLAB_0010475e:\n        pointerToFile = yyin;\n        if (unsignedVar20 == 0) {\n          if ((yy_buffer_stack == 0) || (*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) == 0))\n          {\n            yyensure_buffer_stack();\n            pointerToUnsignedVar22 = (undefined8 *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n            unsignedVar11 = yy_create_buffer_constprop_0(pointerToFile);\n            *pointerToUnsignedVar22 = unsignedVar11;\n          }\n          longVar18 = yy_buffer_stack;\n          if (yy_buffer_stack != 0) {\n            longVar18 = *(long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n          }\n          integerVar9 = 1;\n          yy_init_buffer(longVar18);\n          yy_load_buffer_state();\n        }\n        else {\n          integerVar9 = 2;\n          *(undefined4 *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointerToLong = *pointerToPointerToLong;\n          unsignedVar24 = ~unsignedVar20 + *(int *)(pointerToLong + 3);\n          if (0 < (int)unsignedVar24) break;\n          unsignedVar24 = (int)yy_c_buf_p - (int)(void *)pointerToLong[1];\n          if (*(int *)(pointerToLong + 4) == 0) {\n            pointerToLong[1] = 0;\nLAB_00104626:\n            yy_fatal_error();\n            break;\n          }\n          integerVar9 = *(int *)(pointerToLong + 3);\n          integerVar25 = integerVar9;\n          if (integerVar9 < 1) {\n            integerVar25 = integerVar9 / 8;\n          }\n          *(int *)(pointerToLong + 3) = integerVar25 + integerVar9;\n          pointerToVoid = realloc((void *)pointerToLong[1],(long)(integerVar25 + integerVar9 + 2));\n          pointerToLong[1] = (long)pointerToVoid;\n          if (pointerToVoid == (void *)0x0) goto LAB_00104626;\n          yy_c_buf_p = (byte *)((long)pointerToVoid + (long)(int)unsignedVar24);\n          pointerToLong = *pointerToPointerToLong;\n        }\n        if (0x2000 < (int)unsignedVar24) {\n          unsignedVar24 = 0x2000;\n        }\n        unsignedVar26 = (ulong)unsignedVar24;\n        if (*(int *)((long)pointerToLong + 0x24) == 0) {\n          pointerToIntegerVar34 = __errno_location();\n          unsignedVar26 = (ulong)(int)unsignedVar24;\n          unsignedVar19 = (ulong)(int)unsignedVar20;\n          *pointerToIntegerVar34 = 0;\n          goto LAB_001046c7;\n        }\n        unsignedVar19 = 0;\n        pointerToIntegerVar34 = (int *)(long)(int)unsignedVar20;\n        do {\n          integerVar9 = getc(yyin);\n          unsignedVar36 = (uint)unsignedVar19;\n          if (integerVar9 == -1) {\n            integerVar9 = ferror(yyin);\n            unsignedVar24 = unsignedVar36;\n            if (integerVar9 != 0) {\n              do {\n                pointerToCharacter = \"input in flex scanner failed\";\n                yy_fatal_error();\n                do {\n                  *pointerToIntegerVar34 = 0;\n                  clearerr((FILE *)pointerToCharacter);\nLAB_001046c7:\n                  sizeVar13 = fread((void *)(*(long *)(*(long *)(yy_buffer_stack +\n                                                             yy_buffer_stack_top * 8) + 8) + unsignedVar19)\n                                 ,1,unsignedVar26,yyin);\n                  pointerToCharacter = (char *)yyin;\n                  yy_n_chars = (uint)sizeVar13;\n                  unsignedVar24 = yy_n_chars;\n                  if ((yy_n_chars != 0) || (integerVar9 = ferror(yyin), unsignedVar24 = yy_n_chars, integerVar9 == 0))\n                  goto LAB_00104738;\n                } while (*pointerToIntegerVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integerVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)unsignedVar20 +\n             (long)(int)unsignedVar36 + *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8)\n             ) = 10;\n            unsignedVar24 = unsignedVar36 + 1;\n            break;\n          }\n          unsignedVar19 = (ulong)(unsignedVar36 + 1);\n          *(char *)(*(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8) +\n                   (long)pointerToIntegerVar34) = (char)integerVar9;\n          pointerToIntegerVar34 = (int *)((long)pointerToIntegerVar34 + 1);\n        } while (unsignedVar24 != unsignedVar36 + 1);\nLAB_00104738:\n        yy_n_chars = unsignedVar24;\n        unsignedVar24 = yy_n_chars;\n        integerVar9 = 0;\n        *(uint *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 0x1c) = yy_n_chars;\n        if (unsignedVar24 == 0) goto LAB_0010475e;\n      }\n      pointerToLong = (long *)(yy_buffer_stack + yy_buffer_stack_top * 8);\n      longVar18 = *pointerToLong;\n      unsignedVar20 = unsignedVar20 + yy_n_chars;\n      if (*(int *)(longVar18 + 0x18) < (int)unsignedVar20) {\n        integerVar25 = ((int)yy_n_chars >> 1) + unsignedVar20;\n        pointerToVoid = realloc(*(void **)(longVar18 + 8),(long)integerVar25);\n        *(void **)(longVar18 + 8) = pointerToVoid;\n        arrayOfUnsignedVar41._8_8_ = pointerToLong;\n        arrayOfUnsignedVar41._0_8_ = *pointerToLong;\n        if (*(long *)(*pointerToLong + 8) == 0) {\n          arrayOfUnsignedVar41 = yy_fatal_error();\n        }\n        pointerToLong = arrayOfUnsignedVar41._8_8_;\n        *(int *)(arrayOfUnsignedVar41._0_8_ + 0x18) = integerVar25 + -2;\n      }\n      yy_n_chars = unsignedVar20;\n      *(undefined *)(*(long *)(*pointerToLong + 8) + (long)(int)unsignedVar20) = 0;\n      *(undefined *)(*(long *)(*pointerToLong + 8) + 1 + (long)(int)unsignedVar20) = 0;\n      pointerToByte = *(byte **)(*pointerToLong + 8);\n      yytext = pointerToByte;\n      if (integerVar9 == 1) goto LAB_001048a4;\n      if (integerVar9 == 2) goto LAB_001048ca;\n      pointerToByte = pointerToByte + integerVar8;\n      yy_c_buf_p = pointerToByte;\n      unsignedVar20 = yy_get_previous_state();\n      goto LAB_001040d4;\n    }\n    if ((long)pointerToByte - (long)pointerToByte == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointerToByte = (byte *)((long)(int)yy_n_chars +\n                      *(long *)(*(long *)(yy_buffer_stack + yy_buffer_stack_top * 8) + 8));\n    yy_c_buf_p = pointerToByte;\n    unsignedVar19 = yy_get_previous_state();\n    pointerToByte = yytext;\n    goto LAB_0010419f;\n  }\n  pointerToByte = pointerToByte + integerVar8;\n  yy_c_buf_p = pointerToByte;\n  unsignedVar19 = yy_get_previous_state();\n  if (*(short *)(yy_accept + (long)(int)(uint)unsignedVar19 * 2) != 0) {\n    yy_last_accepting_cpos = pointerToByte;\n    yy_last_accepting_state = (uint)unsignedVar19;\n  }\n  unsignedVar26 = unsignedVar19 & 0xffffffff;\n  while( true ) {\n    integerVar8 = (int)unsignedVar26;\n    if (integerVar8 == *(short *)(yy_chk + (long)(*(short *)(yy_base + (long)integerVar8 * 2) + 1) * 2)) break;\n    unsignedVar26 = (ulong)(uint)(int)*(short *)(yy_def + (long)integerVar8 * 2);\n  }\n  unsignedVar20 = (uint)*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)integerVar8 * 2) + 1) * 2);\n  pointerToByte = pointerToByte;\n  if ((*(short *)(yy_nxt + (long)(*(short *)(yy_base + (long)integerVar8 * 2) + 1) * 2) == 0) ||\n     (unsignedVar20 == 0xb0)) goto LAB_0010419f;\n  pointerToByte = pointerToByte + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  yy_c_buf_p = yytext;\n  integerVar8 = (int)(yy_start - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointerToByte = yy_hold_char;\n  unsignedVar19 = (ulong)yy_last_accepting_state;\n  pointerToByte = yy_last_accepting_cpos;\n  goto LAB_0010419f;\nLAB_00105227:\n  pointerToPointerToCharacter = pointerToPointerToCharacter + 1;\n  local_800 = 3;\n  *pointerToPointerToCharacter = yylval;\nLAB_001049d1:\n  pointerToLocal_828 = pointerToLocal_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "fprintf",
                "ar_addlib_doer",
                "stat",
                "fclose",
                "yyerror.constprop.0",
                "fwrite",
                "bfd_openw",
                "xstrdup",
                "ar_directory_doer",
                "bfd_cache_close",
                "map_over_list",
                "prompt",
                "ar_open",
                "maybequit",
                "bfd_close",
                "yy_create_buffer.constprop.0",
                "bfd_openr",
                "extract_file",
                "clearerr",
                "yyensure_buffer_stack",
                "__errno_location",
                "fopen",
                "getc",
                "yy_fatal_error",
                "free",
                "bfd_set_format",
                "malloc",
                "open_inarch",
                "dup",
                "yy_load_buffer_state",
                "ferror",
                "fread",
                "yy_get_previous_state",
                "unlink",
                "dcgettext",
                "smart_rename.constprop.0",
                "filename_cmp",
                "printf",
                "yy_init_buffer"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "decompress_and_process_file_00103e95"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_0010e200": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e200",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e200"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_output_00107730",
                "output_filename": "filename",
                "output_file": "file",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupOutput_00107730(void)\n\n{\n  if (filename == 0) {\n    return;\n  }\n  if (output_bfd != 0) {\n    bfd_cache_close();\n  }\n  if (file != (FILE *)0x0) {\n    fclose(file);\n  }\n  removeFile(filename);\n  return;\n}\n\n",
            "called": [
                "remove_output.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_output_00107730"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_0010e2a8": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2a8",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e2a8"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_buffer_001031cf",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "piVar4": "errnoLocation",
                "lVar5": "bufferStack",
                "yy_buffer_stack": "yyBufferStack",
                "iVar1": "errorVar",
                "LAB_00103263": "label1",
                "param_1[2]": "unknown5",
                "yy_load_buffer_state()": "loadBufferState",
                "uVar2": "number",
                "fileno(param_2)": "fileIdentifier",
                "iVar3": "isTty"
            },
            "code": "\n\n\nundefined8\ninitializeFileBuffer_001031cf(FILE **outputFile,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int errorVar;\n  uint number;\n  int isTty;\n  int *errnoLocation;\n  long bufferStack;\n  \n  errnoLocation = __errno_location();\n  bufferStack = yyBufferStack;\n  errorVar = *errnoLocation;\n  if (outputFile == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (yyBufferStack != 0) {\nlabel1:\n      if (outputFile == *(FILE ***)(bufferStack + yyBufferStack_top * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)outputFile + 0x1c) = 0;\n    *(undefined *)&outputFile[1]->_flags = 0;\n    *(undefined *)((long)&outputFile[1]->_flags + 1) = 0;\n    *(undefined4 *)(outputFile + 5) = 1;\n    unknown5 = outputFile[1];\n    *(undefined4 *)(outputFile + 7) = 0;\n    if (bufferStack != 0) {\n      if (outputFile == *(FILE ***)(bufferStack + yyBufferStack_top * 8)) {\n        loadBufferState;\n      }\n      *outputFile = inputFile;\n      *(undefined4 *)((long)outputFile + 0x34) = 1;\n      goto label1;\n    }\n    *outputFile = inputFile;\n    *(undefined4 *)((long)outputFile + 0x34) = 1;\n  }\n  *(undefined8 *)((long)outputFile + 0x2c) = 1;\nLAB_0010327b:\n  number = 0;\n  if (inputFile != (FILE *)0x0) {\n    isTty = fileIdentifier;\n    isTty = isatty(isTty);\n    number = (uint)(0 < isTty);\n  }\n  *(uint *)((long)outputFile + 0x24) = number;\n  *errnoLocation = errorVar;\n  return param_5;\n}\n\n",
            "called": [
                "yy_load_buffer_state",
                "isatty",
                "__errno_location",
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_file_buffer_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "tempVar"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long tempVar;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  tempVar = obfd;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(obfd + 0xf8);\n  *(long *)(tempVar + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "inFileDescriptor",
                "param_2": "outFilePath",
                "__fd": "outFileDescriptor",
                "_Var3": "fileOffset",
                "uVar4": "bytesCopied",
                "sVar5": "bytesWritten",
                "iVar1": "errorNumber1",
                "iVar2": "errorNumber2",
                "piVar6": "errNumPtr",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int inFileDescriptor,char *outFilePath)\n\n{\n  int errorNumber1;\n  int outFileDescriptor;\n  int errorNumber2;\n  __off_t fileOffset;\n  ulong bytesCopied;\n  size_t bytesWritten;\n  int *errNumPtr;\n  undefined buffer [8200];\n  \n  if ((-1 < inFileDescriptor) && (fileOffset = lseek(inFileDescriptor,0,0), fileOffset == 0)) {\n    outFileDescriptor = open(outFilePath,0x201);\n    if (outFileDescriptor < 0) {\n      bytesCopied = simple_copy_constprop_0_cold();\n      return bytesCopied;\n    }\n    do {\n      bytesCopied = read(inFileDescriptor,buffer,0x2000);\n      errorNumber2 = (int)bytesCopied;\n      if (errorNumber2 < 1) {\n        errNumPtr = __errno_location();\n        errorNumber1 = *errNumPtr;\n        close(inFileDescriptor);\n        close(outFileDescriptor);\n        if (errorNumber2 != 0) {\n          *errNumPtr = errorNumber1;\n          return 0xffffffff;\n        }\n        return bytesCopied & 0xffffffff;\n      }\n      bytesWritten = write(outFileDescriptor,buffer,(long)errorNumber2);\n    } while (bytesWritten == (long)errorNumber2);\n    errNumPtr = __errno_location();\n    errorNumber2 = *errNumPtr;\n    close(inFileDescriptor);\n    close(outFileDescriptor);\n    *errNumPtr = errorNumber2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "simple_copy.constprop.0.cold",
                "__errno_location",
                "lseek",
                "open",
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_001052a0",
                "param_1": "file_path",
                "iVar1": "result",
                "piVar2": "errno_ptr",
                "uVar3": "error_msg",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_001052a0(char *file_path)\n\n{\n  int result;\n  int *errno_ptr;\n  undefined8 error_msg;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    result = stat(file_path,&file_stats);\n    if (result < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_msg,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_msg,file_path,error_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_msg,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_msg,file_path);\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_msg,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "get_file_size.cold",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "ranlib_only",
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOptionsHeader"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOptionsHeader;\n  \n  emulationOptionsHeader = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOptionsHeader);\n  emulationOptionsHeader = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOptionsHeader);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_input_archive_00103c60",
                "param_1": "inputArchivePath",
                "param_2": "outputArchiveFlag",
                "real_name": "duplicatedInputArchivePath",
                "temp_name": "temporaryName",
                "obfd": "outputBfd",
                "temp_fd": "temporaryFd",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchiveBfd",
                "lVar5": "fileDescriptor",
                "uVar6": "programName",
                "plVar7": "currentFilePtr"
            },
            "code": "\n\n\nvoid processInputArchive_00103c60(char *inputArchivePath,int outputArchiveFlag)\n\n{\n  char cVar1;\n  int *errorNumberPtr;\n  char *errorMessage;\n  long inputArchiveBfd;\n  long fileDescriptor;\n  undefined8 programName;\n  long *currentFilePtr;\n  \n  duplicatedInputArchivePath = xstrdup();\n  temporaryName = (char *)make_tempname(duplicatedInputArchivePath,&temporaryFd);\n  if (temporaryName == (char *)0x0) {\n    errorNumberPtr = __errno_location();\n    inputArchivePath = strerror(*errorNumberPtr);\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    outputBfd = bfd_fdopenw(temporaryName,0,temporaryFd);\n    if (outputBfd == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      inputArchivePath = temporaryName;\n    }\n    else {\n      if (outputArchiveFlag != 0) {\nLAB_00103d02:\n        bfd_set_format(outputBfd,2);\n        *(byte *)(outputBfd + 0x49) = *(byte *)(outputBfd + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchiveBfd = bfd_openr(inputArchivePath,\"plugin\");\n      if (inputArchiveBfd == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        cVar1 = bfd_check_format(inputArchiveBfd,2);\n        if (cVar1 != '\\0') {\n          currentFilePtr = (long *)(outputBfd + 0xf8);\n          for (fileDescriptor = bfd_openr_next_archived_file(inputArchiveBfd,0); fileDescriptor != 0;\n              fileDescriptor = bfd_openr_next_archived_file(inputArchiveBfd,fileDescriptor)) {\n            *currentFilePtr = fileDescriptor;\n            currentFilePtr = (long *)(fileDescriptor + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = program_name;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,inputArchivePath);\n  maybequit();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "strerror",
                "xstrdup",
                "bfd_fdopenw",
                "fprintf",
                "bfd_set_format",
                "maybequit",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "make_tempname",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "process_input_archive_00103c60"
        },
        "FUN_0010e218": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e218",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_0010e218"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main",
                "bfd_nonfatal.cold",
                "ar_emul_default_usage",
                "list_supported_targets",
                "replace_members.cold",
                "set_times.cold",
                "yyerror.constprop.0",
                "get_file_size.cold",
                "print_contents",
                "write_archive",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "FUN_00102e6f",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "get_file_size",
                "map_over_members.cold",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "parse_input_0010300e",
                "yy_start": "start_state",
                "yytext": "current_char",
                "yy_c_buf_p": "buffer_pointer",
                "yy_ec": "char_ec",
                "yy_accept": "accept_states",
                "yy_base": "base",
                "yy_chk": "check",
                "yy_def": "default",
                "yy_meta": "meta",
                "yy_nxt": "next_state",
                "yy_last_accepting_cpos": "last_accepting_char_position",
                "yy_last_accepting_state": "last_accepting_state"
            },
            "code": "\nvoid parse_input_0010300e(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *in_R9;\n  int in_R10D;\n  \n  bVar1 = false;\n  iVar2 = start_state;\n  for (pbVar5 = current_char; pbVar5 < buffer_pointer; pbVar5 = pbVar5 + 1) {\n    bVar4 = 1;\n    if (*pbVar5 != 0) {\n      bVar4 = char_ec[*pbVar5];\n    }\n    if (*(short *)(accept_states + (long)iVar2 * 2) != 0) {\n      bVar1 = true;\n      in_R9 = pbVar5;\n      in_R10D = iVar2;\n    }\n    while( true ) {\n      lVar3 = (long)(int)((int)*(short *)(base + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(check + lVar3 * 2) == iVar2) break;\n      iVar2 = (int)*(short *)(default + (long)iVar2 * 2);\n      if (0xb0 < iVar2) {\n        bVar4 = meta[(int)(uint)bVar4];\n      }\n    }\n    iVar2 = (int)*(short *)(next_state + lVar3 * 2);\n  }\n  if (bVar1) {\n    last_accepting_char_position = in_R9;\n    last_accepting_state = in_R10D;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "parse_input_0010300e"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_archive_00107740",
                "param_1": "archive",
                "iVar1": "result",
                "iVar2": "errorCode",
                "piVar3": "errnoPtr",
                "pcVar4": "errorString",
                "uVar5": "message",
                "pplVar6": "fileList",
                "__ptr": "buffer",
                "__n": "readSize",
                "lVar7": "fileOffset",
                "plVar8": "currentFile",
                "puVar9": "preserveDates",
                "uVar10": "bytesProcessed",
                "sVar11": "chunkSize",
                "local_c8": "permissions",
                "_Stack_b0": "outputPermissions",
                "uStack_98": "archiveSize",
                "uStack_80": "oldCreationTime",
                "uStack_70": "newCreationTime",
                "output_file": "outputFile",
                "output_filename": "outputFilename"
            },
            "code": "\nlong * extractArchive_00107740(long **archive)\n\n{\n  int result;\n  int errorCode;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 message;\n  long **fileList;\n  void *buffer;\n  size_t readSize;\n  long fileOffset;\n  long *currentFile;\n  undefined4 *preserveDates;\n  ulong bytesProcessed;\n  size_t chunkSize;\n  undefined4 permissions [6];\n  __mode_t outputPermissions;\n  ulong archiveSize;\n  undefined8 oldCreationTime;\n  undefined8 newCreationTime;\n  \n  if (preserve_dates != 0) {\n    preserveDates = permissions;\n    for (fileOffset = 0x24; fileOffset != 0; fileOffset = fileOffset + -1) {\n      *preserveDates = 0;\n      preserveDates = preserveDates + 1;\n    }\n  }\n  fileList = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    fileList = archive;\n  }\n  errorCode = (*(code *)fileList[1][0x3d])(archive,permissions);\n  if (errorCode != 0) {\n    currentFile = *archive;\n    message = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = fatal(message,currentFile);\n    message = posname;\n    if (errorCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        result = filename_cmp(*(undefined8 *)*currentFile,message);\n        if (result == 0) {\n          if (errorCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(archive,0,0);\n  outputFile = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)open_outputFile_isra_0(*archive);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      chunkSize = archiveSize - bytesProcessed;\n      if (0x2000 < chunkSize) {\n        chunkSize = 0x2000;\n      }\n      readSize = bfd_bread(buffer,chunkSize,archive);\n      if (chunkSize != readSize) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        message = dcgettext(0,\"%s is not a valid archive\",5);\n        fatal(message,archive);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)open_outputFile_isra_0(*archive);\n      }\n      chunkSize = fwrite(buffer,1,readSize,outputFile);\n      if (chunkSize != readSize) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        fatal(\"%s: %s\",outputFilename,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + readSize;\n    } while (bytesProcessed < archiveSize);\n    free(buffer);\n  }\n  fclose(outputFile);\n  errorString = outputFilename;\n  outputFile = (FILE *)0x0;\n  chmod(outputFilename,outputPermissions);\n  if (preserve_dates != 0) {\n    oldCreationTime = newCreationTime;\n    set_times(errorString,permissions);\n  }\n  outputFilename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "extract_file.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "main",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "extract_archive_00107740"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "remove_output.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_0010e2b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2b8",
            "calling": [
                "fwrite"
            ],
            "imported": false,
            "current_name": "FUN_0010e2b8"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_archive_files_001028ed",
                "param_1": "archiveName",
                "param_2": "target",
                "uVar1": "isMakeThin",
                "bVar2": "isAppendSuccess",
                "iVar3": "comparisonResult",
                "sVar4": "stringLength",
                "piVar5": "errorNumber",
                "pcVar6": "currentFileName",
                "pcVar7": "baseName1",
                "ppcVar8": "currentPointer",
                "uVar9": "normalizedFileName",
                "lVar10": "currentPointerValue",
                "__s": "baseName2",
                "__s_00": "baseName3",
                "lVar11": "currentPointerValue2",
                "uVar12": "positionName",
                "uVar13": "length",
                "unaff_RBX": "archiveNamePointer",
                "ppcVar14": "currentPointer2",
                "unaff_RBP": "args",
                "unaff_R12": "currentPointer3",
                "unaff_R13D": "positionType",
                "ppcVar15": "currentPointer3Plus1e",
                "unaff_R14": "unknown",
                "bVar16": "isVerbose",
                "bVar17": "unknown2",
                "param_7": "inputFiles",
                "param_9": "result",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2",
                "libdeps_bfd": "libdeps",
                "postype": "positionType2",
                "output_filename": "outputFileName",
                "write_archive": "writeArchive",
                "bfd_fatal": "reportFatalError",
                "filename_cmp": "compareFileName",
                "bfd_openr": "openFile",
                "do_ar_emul_append_constprop_0": "appendConstProperty",
                "ar_truncate": "isTruncated",
                "full_pathname": "isFullPath",
                "basename": "getBaseName",
                "xmalloc": "allocateMemory",
                "normalize": "normalizeFileName",
                "fatal": "reportFatalError2",
                "stat": "getFileInfo",
                "__errno_location": "getErrorNumber",
                "dcgettext": "getResourceString",
                "get_pos_bfd": "getPositionInArchive",
                "ar_emul_default_replace": "replaceArchive",
                "__.LIBDEP": "libdep",
                "ar_emul_default_append": "appendFileToArchive"
            },
            "code": "\nundefined8 processArchiveFiles_001028ed(undefined8 archiveName,long target)\n\n{\n  undefined isMakeThin;\n  byte isAppendSuccess;\n  int comparisonResult;\n  size_t stringLength;\n  int *errorNumber;\n  char *currentFileName;\n  char *baseName1;\n  char **currentPointer;\n  undefined8 normalizedFileName;\n  long currentPointerValue;\n  char *baseName2;\n  char *baseName3;\n  long currentPointerValue2;\n  undefined8 positionName;\n  ulong length;\n  char *archiveNamePointer;\n  char **currentPointer2;\n  char **args;\n  char **currentPointer3;\n  uint positionType;\n  char **currentPointer3Plus1e;\n  long unknown;\n  bool isVerbose;\n  byte unknown2;\n  char **inputFiles;\n  undefined8 result;\n  long stackVar1;\n  long stackVar2;\n  \n  unknown2 = 0;\ncode_r0x001028ed:\n  reportFatalError(archiveNamePointer,target);\nLAB_001028f5:\n  positionName = posname;\n  if (positionType != 3) {\n    while( true ) {\n      if ((undefined8 *)*currentPointer3 == (undefined8 *)0x0) goto LAB_0010571f;\n      comparisonResult = compareFileName(*(undefined8 *)*currentPointer3,positionName);\n      if (comparisonResult == 0) break;\n      currentPointer3 = (char **)(*currentPointer3 + 0xf0);\n    }\n    if (positionType != 2) goto LAB_0010571f;\n    currentPointer3 = (char **)(*currentPointer3 + 0xf0);\n    goto LAB_0010571f;\n  }\n  currentPointerValue = *(long *)(unknown + 0xf0);\n  if (*(long *)(unknown + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    currentPointerValue2 = currentPointerValue;\n    currentPointerValue = *(long *)(currentPointerValue2 + 0xf0);\n  } while (currentPointerValue != 0);\n  currentPointer3 = (char **)(currentPointerValue2 + 0xf0);\n  archiveNamePointer = *args;\n  if (libdeps != 0) goto LAB_00105731;\nLAB_00105698:\n  isMakeThin = make_thin_archive;\n  positionType = (uint)(verbose != 0);\n  target = openFile(archiveNamePointer,target);\n  if (target != 0) {\n    args = args + 1;\n    isAppendSuccess = appendConstProperty(currentPointer3,target,positionType,isMakeThin);\n    result._6_1_ = result._6_1_ | isAppendSuccess;\n    currentFileName = *args;\n    do {\n      if (currentFileName == (char *)0x0) {\n        if (result._6_1_ == 0) {\n          outputFileName = 0;\n          return 0;\n        }\n        positionName = writeArchive();\n        return positionName;\n      }\n      currentPointer2 = *(char ***)(unknown + 0xf0);\n      currentPointer3 = inputFiles;\n      if (result._7_1_ == '\\0') {\n        currentPointer3Plus1e = inputFiles;\n        if (currentPointer2 != (char **)0x0) {\n          do {\n            if (isFullPath == '\\0') {\n              baseName2 = (char *)lgetBaseName(*currentPointer2);\n              baseName1 = baseName2;\n              if (isTruncated != '\\0') {\n                stringLength = strlen(baseName2);\n                length = (ulong)*(byte *)(*(long *)(unknown + 8) + 0x1e);\n                if (length < stringLength) {\n                  baseName1 = (char *)allocateMemory(length + 1);\n                  currentPointerValue = *(long *)(unknown + 8);\n                  currentFileName = baseName1;\n                  for (length = (ulong)*(byte *)(currentPointerValue + 0x1e); length != 0; length = length - 1) {\n                    *currentFileName = *baseName2;\n                    baseName2 = baseName2 + (ulong)unknown2 * -2 + 1;\n                    currentFileName = currentFileName + (ulong)unknown2 * -2 + 1;\n                  }\n                  baseName1[*(byte *)(currentPointerValue + 0x1e)] = '\\0';\n                }\n                currentFileName = *args;\n                baseName2 = baseName1;\n                if (isFullPath == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              currentFileName = *args;\n              if (isFullPath != '\\0') goto LAB_00102980;\nLAB_00105611:\n              baseName3 = (char *)lgetBaseName(currentFileName);\n              if (isTruncated != '\\0') {\n                stringLength = strlen(baseName3);\n                length = (ulong)*(byte *)(*(long *)(unknown + 8) + 0x1e);\n                currentFileName = baseName3;\n                baseName2 = baseName1;\n                if (length < stringLength) {\n                  currentFileName = (char *)allocateMemory(length + 1);\n                  currentPointerValue = *(long *)(unknown + 8);\n                  baseName1 = currentFileName;\n                  for (length = (ulong)*(byte *)(currentPointerValue + 0x1e); length != 0; length = length - 1) {\n                    *baseName1 = *baseName3;\n                    baseName3 = baseName3 + (ulong)unknown2 * -2 + 1;\n                    baseName1 = baseName1 + (ulong)unknown2 * -2 + 1;\n                  }\n                  currentFileName[*(byte *)(currentPointerValue + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              comparisonResult = compareFileName(baseName3,baseName1);\n            }\n            else {\n              currentFileName = *args;\n              baseName2 = *currentPointer2;\nLAB_00102980:\n              comparisonResult = compareFileName(currentFileName,baseName2);\n            }\n            if ((comparisonResult == 0) && (currentPointer2[0x1c] != (char *)0x0)) {\n              if (newer_only != 0) {\n                comparisonResult = getFileInfo(*args,(getFileInfo *)&stack0x000000b0);\n                if (comparisonResult != 0) {\n                  errorNumber = getErrorNumber();\n                  if (*errorNumber != 2) {\n                    reportFatalError(*args);\nLAB_00102b7e:\n                    currentFileName = *currentPointer2;\n                    positionName = getResourceString(0,\"internal getFileInfo error on %s\",5);\n                    reportFatalError2(positionName,currentFileName);\n                    free(args);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                currentPointer = (char **)currentPointer2[0x1d];\n                if ((char **)currentPointer2[0x1d] == (char **)0x0) {\n                  currentPointer = currentPointer2;\n                }\n                comparisonResult = (**(code **)(currentPointer[1] + 0x1e8))(currentPointer2,&stack0x00000020);\n                if (comparisonResult != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              positionName = getPositionInArchive(inputFiles,2,*currentPointer2);\n              if (libdeps == 0) {\nLAB_00102ae2:\n                currentFileName = *args;\n                isVerbose = verbose != 0;\n                currentPointerValue = openFile(currentFileName,target);\n                if (currentPointerValue == 0) {\n                  reportFatalError(currentFileName,0);\n                  goto LAB_00102b3e;\n                }\n                isAppendSuccess = replaceArchive(positionName,currentPointerValue,isVerbose);\n              }\n              else {\n                normalizedFileName = normalizeFileName(*args);\n                comparisonResult = compareFileName(normalizedFileName,\"libdep\");\n                if (comparisonResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                isAppendSuccess = replaceArchive(positionName,libdeps,verbose != 0);\n              }\n              if (isAppendSuccess != 0) {\n                *currentPointer3Plus1e = *(char **)(*currentPointer3Plus1e + 0xf0);\n                result._6_1_ = isAppendSuccess;\n              }\n              goto LAB_0010577e;\n            }\n            currentPointer3Plus1e = currentPointer2 + 0x1e;\n            currentPointer2 = (char **)currentPointer2[0x1e];\n          } while (currentPointer2 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        positionType = positionType2;\n        if (positionType2 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        positionType = positionType2;\n        if (positionType2 != 0) goto LAB_001028f5;\n        currentPointerValue = *(long *)(unknown + 0xf0);\n        if (*(long *)(unknown + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      archiveNamePointer = *args;\n      if (libdeps == 0) goto LAB_00105698;\nLAB_00105731:\n      positionName = normalizeFileName(archiveNamePointer);\n      comparisonResult = compareFileName(positionName,\"libdep\");\n      if (comparisonResult != 0) goto code_r0x0010574f;\n      isAppendSuccess = appendFileToArchive(currentPointer3,libdeps,verbose != 0,make_thin_archive);\n      result._6_1_ = isAppendSuccess | result._6_1_;\nLAB_0010577e:\n      args = args + 1;\n      currentFileName = *args;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  archiveNamePointer = *args;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_fatal",
                "strlen",
                "stat",
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "write_archive",
                "ar_emul_default_append",
                "normalize",
                "ar_emul_default_replace",
                "fatal",
                "bfd_openr",
                "dcgettext",
                "FUN_00102943",
                "get_pos_bfd",
                "__errno_location",
                "filename_cmp",
                "lbasename",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "process_archive_files_001028ed"
        },
        "FUN_0010e1b0": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1b0",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010e1b0"
        },
        "FUN_0010e228": {
            "renaming": {},
            "code": "\n\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* realloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e228",
            "calling": [
                "realloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e228"
        },
        "FUN_0010e108": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e108",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_0010e108"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "open_inarch",
                "ar_open",
                "replace_members.cold",
                "simple_copy.constprop.0.cold",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold",
                "extract_file.cold",
                "yy_init_buffer",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "main",
                "normalize.cold",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "error_ptr",
                "uVar2": "error_msg",
                "__errno_location": "get_error_location",
                "dcgettext": "get_localized_error_message",
                "non_fatal": "print_error_message"
            },
            "code": "\nundefined8 handle_file_error_001025a0(void)\n\n{\n  int *error_ptr;\n  undefined8 error_msg;\n  \n  error_ptr = get_error_location();\n  if (*error_ptr == 2) {\n    error_msg = get_localized_error_message(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_msg);\n  }\n  else {\n    strerror(*error_ptr);\n    error_msg = get_localized_error_message(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_msg);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_return_value_0010284b",
                "undefined8": "int"
            },
            "code": "\nint getReturnValue_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "ranlib_only"
            ],
            "imported": false,
            "current_name": "get_return_value_0010284b"
        },
        "FUN_0010e220": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e220",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e220"
        },
        "FUN_0010e100": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e100",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_0010e100"
        },
        "FUN_00105cc0": {
            "renaming": {
                "FUN_00105cc0": "start_main_loop_00105cc0",
                "param_1": "entryPoint",
                "auStack_8": "stack_au8"
            },
            "code": "\nvoid processEntry startMainLoop_00105cc0(undefined8 entryPoint,undefined8 param_2)\n\n{\n  undefined stack_au8 [8];\n  \n  __libc_start_main(main,param_2,&stack0x00000008,0,0,entryPoint,stack_au8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_00105cc0"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "ptr_arg",
                "unaff_R12": "ptr_dest"
            },
            "code": "\nundefined8 print_and_assign_00102f08(void)\n\n{\n  undefined8 *ptr_arg;\n  undefined8 *ptr_dest;\n  \n  printf(\"a - %s\\n\",*ptr_arg);\n  ptr_arg[0x1e] = *ptr_dest;\n  *ptr_dest = ptr_arg;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_input_files_00105570",
                "param_1": "baseAddress",
                "param_2": "filePaths",
                "param_3": "isAppending",
                "ppcVar1": "currentFile",
                "uVar2": "undefinedValue",
                "bVar3": "byteValue",
                "iVar4": "intValue",
                "sVar5": "size",
                "piVar6": "errorFlag",
                "pcVar7": "currentFilePath",
                "pcVar8": "currentBaseName",
                "uVar9": "normalizedPath",
                "pcVar10": "currentFilePtr",
                "__s": "baseName",
                "lVar11": "currentPtr",
                "lVar12": "nextPtr",
                "uVar13": "returnValue",
                "uVar14": "ulongValue",
                "ppcVar15": "fileListPtr",
                "ppcVar16": "currentPtr",
                "uVar17": "positionType",
                "ppcVar18": "previousPtr",
                "bVar19": "boolValue",
                "bVar20": "byteValue",
                "local_15a": "localFlag",
                "auStack_158": "stackBuffer",
                "lStack_100": "timestamp",
                "sStack_c8": "fileStats"
            },
            "code": "\nundefined8 processInputFiles_00105570(long baseAddress,char **filePaths,char isAppending)\n\n{\n  char **currentFile;\n  undefined undefinedValue;\n  byte byteValue;\n  int intValue;\n  size_t size;\n  int *errorFlag;\n  char *currentFilePath;\n  char *currentBaseName;\n  undefined8 normalizedPath;\n  char *currentFilePtr;\n  char *baseName;\n  long currentPtr;\n  long nextPtr;\n  undefined8 returnValue;\n  ulong ulongValue;\n  char **fileListPtr;\n  char **currentPtr;\n  uint positionType;\n  char **previousPtr;\n  bool boolValue;\n  byte byteValue;\n  byte localFlag;\n  undefined stackBuffer [88];\n  long timestamp;\n  stat fileStats;\n  \n  byteValue = 0;\n  currentFile = (char **)(baseAddress + 0xf0);\n  localFlag = 0;\n  if (filePaths == (char **)0x0) {\n    returnValue = initialize_output_filename_00102943();\n    return returnValue;\n  }\n  do {\n    currentFilePtr = *filePaths;\njoined_r0x001055aa:\n    if (currentFilePtr == (char *)0x0) {\n      if (localFlag != 0) {\n        returnValue = write_archive(baseAddress);\n        return returnValue;\n      }\n      output_filename = 0;\n      return 0;\n    }\n    fileListPtr = *(char ***)(baseAddress + 0xf0);\n    currentPtr = currentFile;\n    if (isAppending != '\\0') {\nLAB_0010564c:\n      positionType = postype;\n      if (postype != 0) goto LAB_001028f5;\n      nextPtr = *(long *)(baseAddress + 0xf0);\n      if (*(long *)(baseAddress + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPtr = nextPtr;\n        nextPtr = *(long *)(currentPtr + 0xf0);\n      } while (nextPtr != 0);\n      currentPtr = (char **)(currentPtr + 0xf0);\n      currentFilePtr = *filePaths;\n      do {\n        if (libdeps_bfd != 0) {\n          returnValue = normalize(currentFilePtr,baseAddress);\n          intValue = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (intValue == 0) {\n            byteValue = ar_emul_default_append(currentPtr,libdeps_bfd,verbose != 0,make_thin_archive);\n            localFlag = byteValue | localFlag;\n            goto LAB_0010577e;\n          }\n          currentFilePtr = *filePaths;\n        }\n        undefinedValue = make_thin_archive;\n        boolValue = verbose != 0;\n        nextPtr = bfd_openr(currentFilePtr,target);\n        if (nextPtr != 0) {\n          filePaths = filePaths + 1;\n          byteValue = do_ar_emul_append_constprop_0(currentPtr,nextPtr,(uint)boolValue,undefinedValue);\n          localFlag = localFlag | byteValue;\n          currentFilePtr = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        bfd_fatal(currentFilePtr,0);\n        positionType = (uint)boolValue;\nLAB_001028f5:\n        returnValue = posname;\n        if (positionType == 3) {\n          nextPtr = *(long *)(baseAddress + 0xf0);\n          if (*(long *)(baseAddress + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentPtr != (undefined8 *)0x0;\n              currentPtr = (char **)(*currentPtr + 0xf0)) {\n            intValue = filename_cmp(*(undefined8 *)*currentPtr,returnValue);\n            if (intValue == 0) {\n              if (positionType == 2) {\n                currentPtr = (char **)(*currentPtr + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFilePtr = *filePaths;\n      } while( true );\n    }\n    previousPtr = currentFile;\n    if (fileListPtr == (char **)0x0) {\n      positionType = postype;\n      if (postype == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (full_pathname == '\\0') {\n      currentFilePtr = (char *)lbasename(*fileListPtr);\n      currentBaseName = currentFilePtr;\n      if (ar_truncate != '\\0') {\n        size = strlen(currentFilePtr);\n        ulongValue = (ulong)*(byte *)(*(long *)(baseAddress + 8) + 0x1e);\n        if (ulongValue < size) {\n          currentBaseName = (char *)xmalloc(ulongValue + 1);\n          nextPtr = *(long *)(baseAddress + 8);\n          currentFilePath = currentBaseName;\n          for (ulongValue = (ulong)*(byte *)(nextPtr + 0x1e); ulongValue != 0; ulongValue = ulongValue - 1) {\n            *currentFilePath = *currentFilePtr;\n            currentFilePtr = currentFilePtr + (ulong)byteValue * -2 + 1;\n            currentFilePath = currentFilePath + (ulong)byteValue * -2 + 1;\n          }\n          currentBaseName[*(byte *)(nextPtr + 0x1e)] = '\\0';\n        }\n        currentFilePath = *filePaths;\n        currentFilePtr = currentBaseName;\n        if (full_pathname == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentFilePath = *filePaths;\n      if (full_pathname != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName = (char *)lbasename(currentFilePath);\n      if (ar_truncate != '\\0') {\n        size = strlen(baseName);\n        ulongValue = (ulong)*(byte *)(*(long *)(baseAddress + 8) + 0x1e);\n        currentFilePath = baseName;\n        currentFilePtr = currentBaseName;\n        if (ulongValue < size) {\n          currentFilePath = (char *)xmalloc(ulongValue + 1);\n          nextPtr = *(long *)(baseAddress + 8);\n          currentBaseName = currentFilePath;\n          for (ulongValue = (ulong)*(byte *)(nextPtr + 0x1e); ulongValue != 0; ulongValue = ulongValue - 1) {\n            *currentBaseName = *baseName;\n            baseName = baseName + (ulong)byteValue * -2 + 1;\n            currentBaseName = currentBaseName + (ulong)byteValue * -2 + 1;\n          }\n          currentFilePath[*(byte *)(nextPtr + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      intValue = filename_cmp(baseName,currentBaseName);\n      if (intValue == 0) goto LAB_00102993;\nLAB_00105639:\n      previousPtr = fileListPtr + 0x1e;\n      fileListPtr = (char **)fileListPtr[0x1e];\n      if (fileListPtr == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentFilePath = *filePaths;\n    currentFilePtr = *fileListPtr;\nLAB_00102980:\n    intValue = filename_cmp(currentFilePath,currentFilePtr);\n    if (intValue != 0) goto LAB_00105639;\nLAB_00102993:\n    if (fileListPtr[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (newer_only != 0) {\n      intValue = stat(*filePaths,&fileStats);\n      if (intValue != 0) {\n        errorFlag = __errno_location();\n        if (*errorFlag != 2) {\n          bfd_fatal(*filePaths);\nLAB_00102b7e:\n          currentFilePtr = *fileListPtr;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          fatal(returnValue,currentFilePtr);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentPtr = (char **)fileListPtr[0x1d];\n      if ((char **)fileListPtr[0x1d] == (char **)0x0) {\n        currentPtr = fileListPtr;\n      }\n      intValue = (**(code **)(currentPtr[1] + 0x1e8))(fileListPtr,stackBuffer);\n      if (intValue != 0) goto LAB_00102b7e;\n      if (fileStats.st_mtim.tv_sec <= timestamp) goto LAB_0010577e;\n    }\n    returnValue = get_pos_bfd(currentFile,2,*fileListPtr);\n    if (libdeps_bfd == 0) {\nLAB_00102ae2:\n      currentFilePtr = *filePaths;\n      boolValue = verbose != 0;\n      nextPtr = bfd_openr(currentFilePtr,target);\n      if (nextPtr == 0) {\n        bfd_fatal(currentFilePtr,0);\n        goto LAB_00102b3e;\n      }\n      byteValue = ar_emul_default_replace(returnValue,nextPtr,boolValue);\n    }\n    else {\n      normalizedPath = normalize(*filePaths,baseAddress);\n      intValue = filename_cmp(normalizedPath,\"__.LIBDEP\");\n      if (intValue != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byteValue = ar_emul_default_replace(returnValue,libdeps_bfd,verbose != 0);\n    }\n    if (byteValue != 0) {\n      *previousPtr = *(char **)(*previousPtr + 0xf0);\n      localFlag = byteValue;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_input_files_00105570"
        },
        "FUN_0010e1a8": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1a8",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e1a8"
        },
        "FUN_0010e2e8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e8"
        },
        "FUN_0010e1c0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1c0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010e1c0"
        },
        "FUN_00102500": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "print_version",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102500"
        },
        "FUN_0010e2e0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2e0",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010e2e0"
        },
        "FUN_0010e238": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e238",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010e238"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "yyparse.isra.0",
                "smart_rename.constprop.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_entry_not_found_error_message_0010285f",
                "__format": "errorFormatString",
                "lVar2": "filePointer",
                "plVar3": "entryPointer",
                "uVar4": "currentEntry",
                "plVar5": "nextEntry",
                "unaff_RBP": "reverseFunction",
                "unaff_R12": "archivePointer",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryList",
                "iStack000000000000000c": "countedNamesCounter"
            },
            "code": "\n\n\nvoid printEntryNotFoundErrorMessage_0010285f(void)\n\n{\n  int iVar1;\n  char *errorFormatString;\n  long filePointer;\n  long *entryPointer;\n  undefined8 currentEntry;\n  long *nextEntry;\n  code *reverseFunction;\n  long archivePointer;\n  int remainingEntries;\n  undefined8 *entryList;\n  int countedNamesCounter;\n  \ncode_r0x0010285f:\n  currentEntry = *entryList;\n  errorFormatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorFormatString,currentEntry);\nLAB_0010553e:\n  entryList = entryList + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  nextEntry = *(long **)(archivePointer + 0xf0);\n  countedNamesCounter = 0;\n  do {\n    if (nextEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)nextEntry + 0xac) == 0) {\n      filePointer = *nextEntry;\n      if (filePointer == 0) {\n        entryPointer = (long *)nextEntry[0x1d];\n        if ((long *)nextEntry[0x1d] == (long *)0x0) {\n          entryPointer = nextEntry;\n        }\n        (**(code **)(entryPointer[1] + 0x1e8))(nextEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePointer + 0x49) & 0x10) == 0) || (filePointer = normalize(), filePointer != 0)) {\n        currentEntry = normalize(*entryList);\n        iVar1 = filename_cmp(currentEntry,filePointer);\n        if ((iVar1 == 0) &&\n           ((counted_name_mode == '\\0' ||\n            (countedNamesCounter = countedNamesCounter + 1,\n            countedNamesCounter == counted_name_counter)))) break;\n      }\n    }\n    nextEntry = (long *)nextEntry[0x1e];\n  } while( true );\n  (*reverseFunction)();\n  *(undefined4 *)((long)nextEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "map_over_members"
            ],
            "imported": false,
            "current_name": "print_entry_not_found_error_message_0010285f"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "flag",
                "uVar1": "programName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint flag)\n\n{\n  undefined8 programName;\n  char *message;\n  FILE *outputStream;\n  \n  programName = program_name;\n  outputStream = _stderr;\n  if (flag != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,programName);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  list_supported_targets(program_name,outputStream);\n  if (flag != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(flag ^ 1);\n}\n\n",
            "called": [
                "fprintf",
                "list_supported_targets",
                "dcgettext",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_return_value_00105bb0",
                "undefined8": "int"
            },
            "code": "\nint check_return_value_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_return_value_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "get_return_value_00107640"
            },
            "code": "\nundefined8 getReturnValue_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "get_return_value_00107640"
        },
        "FUN_0010e1d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid clearerr(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* clearerr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d8",
            "calling": [
                "clearerr"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d8"
        },
        "FUN_00102510": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "print_contents",
                "yyparse.isra.0",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102510"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_interactive_0010315d",
                "interactive": "isInteractive",
                "xexit": "exitCode"
            },
            "code": "\nvoid checkInteractive_0010315d(void)\n\n{\n  if (isInteractive == 0) {\n                    \n    exitCode(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "open_inarch",
                "ar_open",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "check_interactive_0010315d"
        },
        "FUN_0010e1d0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1d0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_0010e1d0"
        },
        "FUN_0010e248": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e248",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_0010e248"
        },
        "FUN_0010e008": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e008",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_0010e008"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_arelt_description_00107890",
                "param_1": "array_element",
                "_stdout": "output_stream",
                "verbose": "is_verbose",
                "display_offsets": "show_offsets"
            },
            "code": "\n\n\nvoid print_arelt_description_00107890(undefined8 array_element)\n\n{\n  print_arelt_descr(output_stream,array_element,is_verbose != 0,show_offsets != 0);\n  return;\n}\n\n",
            "called": [
                "print_arelt_descr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_arelt_description_00107890"
        },
        "FUN_001024a0": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "open_inarch",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "FUN_001024a0"
        },
        "FUN_0010e000": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e000",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010e000"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_00103172",
                "param_1": "old_value_ptr",
                "param_2": "new_value_ptr",
                "param_3": "should_print",
                "param_4": "new_value",
                "uVar1": "old_value",
                "auVar2": "updated_data"
            },
            "code": "\nundefined  [16]\nupdate_and_print_00103172(undefined8 *old_value_ptr,undefined8 *new_value_ptr,char should_print,undefined8 new_value)\n\n{\n  undefined8 old_value;\n  undefined updated_data [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*new_value_ptr);\n  }\n  old_value = *old_value_ptr;\n  new_value_ptr[0x1e] = old_value;\n  updated_data._1_7_ = (undefined7)((ulong)old_value >> 8);\n  updated_data[0] = 1;\n  *old_value_ptr = new_value_ptr;\n  updated_data._8_8_ = new_value;\n  return updated_data;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "update_and_print_00103172"
        },
        "FUN_0010e0a8": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0a8",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010e0a8"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "initialize_buffer_001030ed",
                "puVar1": "bufferPtr",
                "yy_buffer_stack": "bufferStack",
                "yy_buffer_stack_top": "bufferStackTop",
                "yy_n_chars": "numCharacters",
                "yy_c_buf_p": "bufPointer",
                "yytext": "currentText",
                "yyin": "input",
                "yy_hold_char": "heldCharacter"
            },
            "code": "\nvoid initializeBuffer_001030ed(void)\n\n{\n  undefined8 *bufferPtr;\n  \n  bufferPtr = *(undefined8 **)(bufferStack + bufferStackTop * 8);\n  numCharacters = *(undefined4 *)((long)bufferPtr + 0x1c);\n  bufPointer = (undefined *)bufferPtr[2];\n  currentText = bufPointer;\n  input = *bufferPtr;\n  heldCharacter = *bufPointer;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "yyparse.isra.0",
                "yy_init_buffer"
            ],
            "imported": false,
            "current_name": "initialize_buffer_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "sourceFile",
                "param_2": "destinationFile",
                "param_3": "fileSize",
                "param_4": "result",
                "uVar1": "errorCode",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "errorFlag",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00105bc0(char *sourceFile,char *destinationFile,undefined4 fileSize,undefined8 result)\n\n{\n  uint errorCode;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong errorFlag;\n  undefined returnValue [16];\n  \n  if (destinationFile == sourceFile) {\n    errorFlag = 0;\n  }\n  else {\n    errorCode = simple_copy_constprop_0(fileSize);\n    errorFlag = (ulong)errorCode;\n    if (errorCode != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMessage,destinationFile,errorString);\n    }\n    unlink(sourceFile);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = errorFlag;\n  return returnValue;\n}\n\n",
            "called": [
                "smart_rename.constprop.0.cold",
                "simple_copy.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "yyparse.isra.0",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "process_file_00107650",
                "param_1": "filePath",
                "uVar1": "returnValue",
                "lVar2": "fileSize"
            },
            "code": "\nundefined8 processFile_00107650(undefined8 filePath)\n\n{\n  undefined8 returnValue;\n  long fileSize;\n  \n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    returnValue = 1;\n  }\n  else {\n    write_armap = 1;\n    fileSize = open_inarch(filePath,0);\n    if (fileSize == 0) {\n                    \n      xexit(1);\n    }\n    write_archive(fileSize);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "open_inarch",
                "ranlib_only.cold",
                "get_file_size",
                "write_archive",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_file_00107650"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_delete_00102f1e",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileAndDelete_00102f1e(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  ulong fileSize;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  returnValue._0_8_ = fileSize & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "strerror",
                "unlink",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "smart_rename.constprop.0"
            ],
            "imported": false,
            "current_name": "copy_file_and_delete_00102f1e"
        },
        "FUN_0010e1e8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1e8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010e1e8"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "handle_time_error_00102fd7",
                "piVar1": "errorPointer",
                "uVar2": "localizedErrorMessage"
            },
            "code": "\nvoid handleTimeError_00102fd7(void)\n\n{\n  int *errorPointer;\n  undefined8 localizedErrorMessage;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(localizedErrorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "handle_time_error_00102fd7"
        },
        "FUN_0010e0c8": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c8",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c8"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102520": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "open_inarch.cold",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102520"
        },
        "FUN_001024b0": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001024b0"
        },
        "FUN_00107da8": {
            "renaming": {
                "FUN_00107da8": "FUNC_00107da8"
            },
            "code": "\nvoid FUNC_00107da8(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00107da8"
        },
        "FUN_0010e0c0": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0c0",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010e0c0"
        },
        "FUN_0010e018": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e018",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010e018"
        },
        "FUN_00105d60": {
            "renaming": {
                "FUN_00105d60": "initialize_application_00105d60",
                "completed_0": "isInitialized"
            },
            "code": "\nvoid initializeApplication_00105d60(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "initialize_application_00105d60"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_binutils_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printBinutilsInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_binutils_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "search_and_print_archives_00105480",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "alternativeEntry",
                "uVar4": "normalizedEntryName",
                "plVar5": "entryList",
                "local_cc": "countedNamesCounter",
                "local_c8": "localBuffer"
            },
            "code": "\n\n\nvoid searchAndPrintArchives_00105480(long archive,code *callback,undefined8 *entryNames,int numEntries)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *alternativeEntry;\n  undefined8 normalizedEntryName;\n  long *entryList;\n  int countedNamesCounter;\n  undefined localBuffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryList = *(long **)(archive + 0xf0);\n      countedNamesCounter = 0;\n      for (; entryList != (long *)0x0; entryList = (long *)entryList[0x1e]) {\n        if (*(int *)((long)entryList + 0xac) == 0) {\n          currentEntry = *entryList;\n          if (currentEntry == 0) {\n            alternativeEntry = (long *)entryList[0x1d];\n            if ((long *)entryList[0x1d] == (long *)0x0) {\n              alternativeEntry = entryList;\n            }\n            (**(code **)(alternativeEntry[1] + 0x1e8))(entryList,localBuffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = normalize(currentEntry,archive), currentEntry != 0)) {\n            normalizedEntryName = normalize(*entryNames,archive);\n            comparisonResult = filename_cmp(normalizedEntryName,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((counted_name_mode == '\\0' ||\n                (countedNamesCounter = countedNamesCounter + 1, countedNamesCounter == counted_name_counter)))) {\n              (*callback)();\n              *(undefined4 *)((long)entryList + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      normalizedEntryName = *entryNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,normalizedEntryName);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "normalize",
                "map_over_members.cold",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "search_and_print_archives_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_0010e258": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e258",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010e258"
        },
        "FUN_00102530": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "open_inarch",
                "ar_open",
                "do_ar_emul_append.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102530"
        },
        "FUN_0010e0b8": {
            "renaming": {},
            "code": "\n\n\n\nchar * ctime(time_t *__timer)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ctime@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0b8",
            "calling": [
                "ctime"
            ],
            "imported": false,
            "current_name": "FUN_0010e0b8"
        },
        "FUN_0010e0d8": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d8",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d8"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "param_1": "archive_descriptor",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archive_param",
                "uVar3": "read_bytes",
                "uVar4": "error_message",
                "sVar5": "bytes_written",
                "piVar6": "error_flag",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "error_string",
                "unaff_R13": "total_read_bytes",
                "unaff_R14": "archive_size",
                "auStack_b8": "temp_buffer",
                "local_88": "buffer_size"
            },
            "code": "\n\n\nvoid extract_and_print_archive_contents_00103a78(undefined8 *archive_descriptor)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive_param;\n  ulong read_bytes;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *error_flag;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong total_read_bytes;\n  ulong archive_size;\n  undefined temp_buffer [48];\n  ulong buffer_size;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive_param = (undefined8 *)archive_descriptor[0x1d];\n  if ((undefined8 *)archive_descriptor[0x1d] == (undefined8 *)0x0) {\n    archive_param = archive_descriptor;\n  }\n  result = (**(code **)(archive_param[1] + 0x1e8))(archive_descriptor,temp_buffer);\n  if (result == 0) {\n    if (verbose != 0) {\n      printf(\"\\n<%s>\\n\\n\",*archive_descriptor);\n    }\n    total_read_bytes = 0;\n    bfd_seek(archive_descriptor,0,0);\n    goto LAB_00103afd;\n  }\n  archive_descriptor = (undefined8 *)*archive_descriptor;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    fatal(error_message,archive_descriptor);\n    buffer_size = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        error_flag = __errno_location();\n        error_string = strerror(*error_flag);\n        fatal(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      total_read_bytes = total_read_bytes + bytes_written;\nLAB_00103afd:\n      if (buffer_size <= total_read_bytes) goto LAB_00103b91;\n      remaining_bytes = buffer_size - total_read_bytes;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      read_bytes = bfd_bread(buffer,remaining_bytes,archive_descriptor);\n    } while (remaining_bytes == read_bytes);\n    error_string = \"%s is not a valid archive\";\n    archive_descriptor = *(undefined8 **)archive_descriptor[0x1d];\n    archive_size = buffer_size;\n  } while( true );\n}\n\n",
            "called": [
                "strerror",
                "bfd_bread",
                "free",
                "fatal",
                "dcgettext",
                "fwrite",
                "bfd_seek",
                "__errno_location",
                "printf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_contents_00103a78"
        },
        "FUN_0010e1f0": {
            "renaming": {},
            "code": "\n\n\n\nint fileno(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fileno@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e1f0",
            "calling": [
                "fileno"
            ],
            "imported": false,
            "current_name": "FUN_0010e1f0"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_0010e0d0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0d0",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010e0d0"
        },
        "FUN_001024c0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "open_inarch",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024c0"
        },
        "FUN_0010e028": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e028",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_0010e028"
        },
        "FUN_0010e268": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e268",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010e268"
        },
        "FUN_0010e148": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e148",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_0010e148"
        },
        "FUN_0010e020": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e020",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010e020"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_entry_001058b0",
                "param_1": "entry_info",
                "cVar1": "char_variable",
                "uVar2": "unsigned_variable",
                "iVar3": "integer_variable",
                "uVar4": "unused_variable",
                "__format": "format_string",
                "__ptr": "file_path",
                "__stream": "output_file",
                "ppcVar5": "output_bfd",
                "uStack0000000000000020": "stack_variable_1",
                "in_stack_00000028": "stack_variable_2",
                "in_stack_00000038": "stack_variable_3",
                "local_3c": "local_array",
                "uStack_33": "stack_variable_4",
                "cStack_32": "char_variable_2",
                "cStack_31": "char_variable_3"
            },
            "code": "\nvoid write_archive_entry_001058b0(undefined8 *entry_info)\n\n{\n  char char_variable;\n  uint unsigned_variable;\n  int integer_variable;\n  undefined8 unused_variable;\n  char *format_string;\n  void *file_path;\n  FILE *output_file;\n  char **output_bfd;\n  uint stack_variable_1;\n  uint stack_variable_2;\n  undefined8 stack_variable_3;\n  int local_array [2];\n  undefined stack_variable_4;\n  char char_variable_2;\n  char char_variable_3;\n  \n  unused_variable = entry_info[0x1e];\n  local_array[0] = -1;\n  file_path = (void *)xstrdup(*entry_info);\n  output_file = (FILE *)make_tempname(file_path,local_array);\n  integer_variable = local_array[0];\n  if (output_file != (FILE *)0x0) {\n    output_filename = output_file;\n    output_bfd = (char **)bfd_fdopenw(output_file,*(undefined8 *)entry_info[1],local_array[0]);\n    if (output_bfd != (char **)0x0) {\n      output_bfd = output_bfd;\n      bfd_set_format(output_bfd,2);\n      unsigned_variable = (~write_armap >> 0x1f) << 3 | *(byte *)((long)output_bfd + 0x49) & 0xfffffff7;\n      *(char *)((long)output_bfd + 0x49) = (char)unsigned_variable;\n      if (ar_truncate != '\\0') {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x400;\n      }\n      if (deterministic != 0) {\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x2000;\n      }\n      if (full_pathname != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((make_thin_archive != '\\0') || ((*(byte *)((long)entry_info + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)output_bfd + 0x49) = (byte)unsigned_variable | 0x10;\n        }\n        char_variable = bfd_set_archive_head(output_bfd,unused_variable);\n        if (char_variable != '\\0') break;\n        unsigned_variable = bfd_fatal(file_path);\nLAB_00102d37:\n        *(uint *)((long)output_bfd + 0x44) = *(uint *)((long)output_bfd + 0x44) | 0x100000;\n      }\n      integer_variable = dup(integer_variable);\n      char_variable = bfd_close(output_bfd);\n      if (char_variable == '\\0') {\n        bfd_fatal(file_path);\n        format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,format_string);\n        unsigned_variable = stack_variable_1 & 0xf000;\n        if (unsigned_variable == 0x4000) {\n          stack_variable_4 = 100;\n        }\n        else if (unsigned_variable == 0xa000) {\n          stack_variable_4 = 0x6c;\n        }\n        else if (unsigned_variable == 0x6000) {\n          stack_variable_4 = 0x62;\n        }\n        else if (unsigned_variable == 0x2000) {\n          stack_variable_4 = 99;\n        }\n        else if (unsigned_variable == 0xc000) {\n          stack_variable_4 = 0x73;\n        }\n        else {\n          stack_variable_4 = 0x70;\n          if (unsigned_variable != 0x1000) {\n            stack_variable_4 = 0x2d;\n          }\n        }\n        char_variable_2 = (-((_stack_variable_1 & 0x100) == 0) & 0xbbU) + 0x72;\n        char_variable_3 = (-((_stack_variable_1 & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_file,\"%s %ld/%ld %6lu %s \",&char_variable_2,_stack_variable_1 >> 0x20,\n                (ulong)stack_variable_2,stack_variable_3,&stack0xffffffffffffffd8,\n                _stack_variable_1 & 0xffffffff);\n        fputs(*output_bfd,output_file);\n        if ((char)entry_info != '\\0') {\n          if ((*(byte *)((long)output_bfd + 0x49) & 0x10) == 0) {\n            if (output_bfd[0xb] != (char *)0x0) {\n              fprintf(output_file,\" 0x%lx\");\n            }\n          }\n          else if (output_bfd[0xc] != (char *)0x0) {\n            fprintf(output_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_file);\n        return;\n      }\n      output_bfd = (char **)0x0;\n      output_filename = (FILE *)0x0;\n      bfd_close(entry_info);\n      integer_variable = smart_rename_constprop_0(output_file,file_path,integer_variable);\n      if (integer_variable == 0) {\n        free(file_path);\n        free(output_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(integer_variable);\n    bfd_fatal(file_path);\n  }\n  unused_variable = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  bfd_fatal(unused_variable);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_fdopenw",
                "bfd_fatal",
                "close",
                "bfd_set_format",
                "dcgettext",
                "make_tempname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "ranlib_only",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "write_archive_entry_001058b0"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "open_inarch",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_0010e260": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e260",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_0010e260"
        },
        "FUN_00102540": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102540"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_001024d0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001024d0"
        },
        "FUN_0010e0e0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0e0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010e0e0"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "main",
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_file_00105a20",
                "param_1": "filename",
                "pcVar1": "outputDirectory",
                "pcVar2": "currentPosition",
                "uVar3": "baseName",
                "uVar4": "errorMsg",
                "pFVar5": "filePointer",
                "sVar6": "length",
                "output_filename": "outputFilename"
            },
            "code": "\nvoid extractFile_00105a20(char *filename)\n\n{\n  char *outputDirectory;\n  char *currentPosition;\n  undefined8 baseName;\n  undefined8 errorMsg;\n  FILE *filePointer;\n  size_t length;\n  \n  outputDirectory = output_dir;\n  outputFilename = filename;\n  if (*filename == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    outputDirectory = outputFilename;\n    errorMsg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    non_fatal(errorMsg,outputDirectory,baseName);\n    outputFilename = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*filename == '\\0') {\n      if ((output_dir != (char *)0x0) && (length = strlen(output_dir), length != 0)) {\n        if (outputDirectory[length - 1] == '/') {\n          outputFilename = (char *)concat(outputDirectory,outputFilename,0);\n        }\n        else {\n          outputFilename = (char *)concat(outputDirectory,&DAT_00108260,outputFilename,0);\n        }\n      }\n      if (verbose != 0) {\n        printf(\"x - %s\\n\",outputFilename);\n      }\n      filePointer = fopen(outputFilename,\"w\");\n      if (filePointer == (FILE *)0x0) {\n        perror(outputFilename);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPosition = filename;\n    if ((*filename == '.') && (currentPosition = filename + 1, filename[1] == '.')) {\n      currentPosition = filename + 2;\n      if ((filename[2] == '/') || (filename[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPosition != '\\0' && (*currentPosition != '/')); currentPosition = currentPosition + 1) {\n    }\n    for (; filename = currentPosition, *currentPosition == '/'; currentPosition = currentPosition + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "extract_file_00105a20"
        },
        "FUN_0010e158": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e158",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010e158"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_return_error_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errVar",
                "iVar1": "errCode"
            },
            "code": "\nundefined8 closeFileAndReturnError_00102f55(void)\n\n{\n  int errCode;\n  int *errVar;\n  int fileDescriptor;\n  \n  errVar = __errno_location();\n  errCode = *errVar;\n  close(fileDescriptor);\n  *errVar = errCode;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "reverse_file_path_and_create_temp_file_001057a0",
                "param_1": "filePath",
                "param_2": "fileDescriptor",
                "iVar1": "result",
                "pcVar2": "lastSlash",
                "lVar3": "filePathLength",
                "lVar4": "i",
                "lVar5": "lastSlashDistance",
                "pcVar6": "allocatedFilePath",
                "bVar7": "isFirstSlash",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] reverseFilePathAndCreateTempFile_001057a0(char *filePath,int *fileDescriptor,undefined8 param_3,undefined8 param_4)\n\n{\n  int result;\n  char *lastSlash;\n  long filePathLength;\n  long i;\n  long lastSlashDistance;\n  char *allocatedFilePath;\n  byte isFirstSlash;\n  undefined returnValue [16];\n  \n  isFirstSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    filePathLength = 0;\n  }\n  else {\n    lastSlashDistance = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(lastSlashDistance + 0xb);\n    filePathLength = lastSlashDistance + 1;\n    allocatedFilePath = lastSlash;\n    for (i = lastSlashDistance; i != 0; i = i + -1) {\n      *allocatedFilePath = *filePath;\n      filePath = filePath + (ulong)isFirstSlash * -2 + 1;\n      allocatedFilePath = allocatedFilePath + (ulong)isFirstSlash * -2 + 1;\n    }\n    lastSlash[lastSlashDistance] = '/';\n  }\n  *(undefined8 *)(lastSlash + filePathLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + filePathLength) + 8) = 0;\n  result = mkstemp(lastSlash);\n  if (result == -1) {\n    allocatedFilePath = (char *)0x0;\n    free(lastSlash);\n  }\n  else {\n    *fileDescriptor = result;\n    allocatedFilePath = lastSlash;\n  }\n  returnValue._8_8_ = param_4;\n  returnValue._0_8_ = allocatedFilePath;\n  return returnValue;\n}\n\n",
            "called": [
                "make_tempname.cold",
                "mkstemp",
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "reverse_file_path_and_create_temp_file_001057a0"
        },
        "FUN_00102550": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "ar_open",
                "set_times.cold",
                "get_file_size.cold",
                "print_contents",
                "smart_rename.constprop.0.cold",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102550"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "report",
                "main",
                "ar_emul_default_usage",
                "bfd_nonfatal.cold",
                "list_supported_targets",
                "yyparse.isra.0",
                "ranlib_usage",
                "list_matching_formats",
                "print_arelt_descr.cold",
                "open_inarch",
                "map_over_list",
                "ar_open",
                "map_over_members.cold",
                "usage",
                "yy_fatal_error"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_0010e0f8": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f8",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f8"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "terminate_program_00107c10",
                "bfd_nonfatal": "handleError",
                "xexit": "exitCode"
            },
            "code": "\nvoid terminateProgram_00107c10(void)\n\n{\n  handleError();\n                    \n  exitCode(1);\n}\n\n",
            "called": [
                "bfd_nonfatal",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "write_archive",
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "terminate_program_00107c10"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "report",
                "prompt",
                "bfd_nonfatal.cold",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010e0f0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e0f0",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_0010e0f0"
        },
        "FUN_001024e0": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001024e0"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_exit_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "loopIndex",
                "plVar4": "exitFunctionPtr",
                "uVar5": "funcIndex"
            },
            "code": "\nvoid executeExitFunctions_00107cc0(void)\n\n{\n  long index;\n  long prevIndex;\n  long loopIndex;\n  long *exitFunctionPtr;\n  uint funcIndex;\n  \n  exitFunctionPtr = (long *)xatexit_head;\n  if (xatexit_head != (undefined *)0x0) {\n    do {\n      funcIndex = *(int *)(exitFunctionPtr + 1) - 1;\n      if (-1 < (int)funcIndex) {\n        index = (long)(int)funcIndex;\n        funcIndex = funcIndex & 7;\n        (*(code *)exitFunctionPtr[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          loopIndex = prevIndex;\n          if (funcIndex != 0) {\n            if (funcIndex != 1) {\n              if (funcIndex != 2) {\n                if (funcIndex != 3) {\n                  if (funcIndex != 4) {\n                    if (funcIndex != 5) {\n                      if (funcIndex != 6) {\n                        (*(code *)exitFunctionPtr[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)exitFunctionPtr[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)exitFunctionPtr[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)exitFunctionPtr[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)exitFunctionPtr[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)exitFunctionPtr[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)exitFunctionPtr[prevIndex + 2])();\n            loopIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)exitFunctionPtr[loopIndex + 2])();\n            index = loopIndex + -1;\n            (*(code *)exitFunctionPtr[loopIndex + 1])();\n            (*(code *)exitFunctionPtr[loopIndex])();\n            (*(code *)exitFunctionPtr[index])();\n            (*(code *)exitFunctionPtr[loopIndex + -2])();\n            (*(code *)exitFunctionPtr[loopIndex + -3])();\n            (*(code *)exitFunctionPtr[loopIndex + -4])();\n            (*(code *)exitFunctionPtr[loopIndex + -5])();\n            loopIndex = loopIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      exitFunctionPtr = (long *)*exitFunctionPtr;\n    } while (exitFunctionPtr != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_functions_00107cc0"
        },
        "FUN_0010e288": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e288",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010e288"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "append_const_prop_00105ae0",
                "param_1": "dataPointer",
                "param_2": "targetPointer",
                "param_3": "undefined1",
                "param_4": "undefined2"
            },
            "code": "\nvoid appendConstProp_00105ae0(undefined8 dataPointer,undefined8 targetPointer,undefined undefined1,undefined undefined2)\n\n{\n  do_ar_emul_append_constprop_0(dataPointer,targetPointer,undefined1,undefined2);\n  return;\n}\n\n",
            "called": [
                "do_ar_emul_append.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "append_const_prop_00105ae0"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "report_and_exit_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "reportData",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "temp",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "localData",
                "local_b0": "localParam10",
                "local_a8": "localParam11",
                "local_a0": "localParam12",
                "local_98": "localParam13",
                "local_90": "localParam14",
                "local_88": "localInput1",
                "local_78": "localInput2",
                "local_68": "localInput3",
                "local_58": "localInput4",
                "local_48": "localInput5",
                "local_38": "localInput6",
                "local_28": "localInput7",
                "local_18": "localInput8"
            },
            "code": "\nvoid reportAndExit_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 reportData,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 temp;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined localData [8];\n  undefined8 localParam10;\n  undefined8 localParam11;\n  undefined8 localParam12;\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localInput1;\n  undefined4 localInput2;\n  undefined4 localInput3;\n  undefined4 localInput4;\n  undefined4 localInput5;\n  undefined4 localInput6;\n  undefined4 localInput7;\n  undefined4 localInput8;\n  \n  if (flag != '\\0') {\n    localInput1 = input1;\n    localInput2 = input2;\n    localInput3 = input3;\n    localInput4 = input4;\n    localInput5 = input5;\n    localInput6 = input6;\n    localInput7 = input7;\n    localInput8 = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = localData;\n  temp = 0x30;\n  localParam10 = param10;\n  localParam11 = param11;\n  localParam12 = param12;\n  localParam13 = param13;\n  localParam14 = param14;\n  report(reportData,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "report_and_exit_00107690"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetName",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long targetName;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    targetName = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (targetName == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "ranlib_usage",
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_0010e280": {
            "renaming": {},
            "code": "\n\n\n\nvoid perror(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* perror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e280",
            "calling": [
                "perror"
            ],
            "imported": false,
            "current_name": "FUN_0010e280"
        },
        "FUN_00102560": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102560"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_filename_00105830",
                "param_1": "file_path",
                "param_2": "ar_truncate_info",
                "lVar1": "offset",
                "sVar2": "filename_length",
                "__s": "base_name",
                "uVar3": "max_length",
                "pcVar4": "new_file_path",
                "bVar5": "loop_counter",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extract_filename_00105830(char *file_path,long ar_truncate_info,undefined8 param_3,undefined8 param_4)\n\n{\n  long offset;\n  size_t filename_length;\n  char *base_name;\n  ulong max_length;\n  char *new_file_path;\n  byte loop_counter;\n  undefined result [16];\n  \n  loop_counter = 0;\n  if (full_pathname == '\\0') {\n    base_name = (char *)lbasename();\n    file_path = base_name;\n    if ((ar_truncate != '\\0') && (ar_truncate_info != 0)) {\n      filename_length = strlen(base_name);\n      max_length = (ulong)*(byte *)(*(long *)(ar_truncate_info + 8) + 0x1e);\n      if (max_length < filename_length) {\n        file_path = (char *)xmalloc(max_length + 1);\n        offset = *(long *)(ar_truncate_info + 8);\n        new_file_path = file_path;\n        for (max_length = (ulong)*(byte *)(offset + 0x1e); max_length != 0; max_length = max_length - 1) {\n          *new_file_path = *base_name;\n          base_name = base_name + (ulong)loop_counter * -2 + 1;\n          new_file_path = new_file_path + (ulong)loop_counter * -2 + 1;\n        }\n        file_path[*(byte *)(offset + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = file_path;\n  return result;\n}\n\n",
            "called": [
                "normalize.cold",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "map_over_members",
                "main",
                "replace_members.cold"
            ],
            "imported": false,
            "current_name": "extract_filename_00105830"
        },
        "FUN_0010e160": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e160",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_0010e160"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "open_output_file.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_bfd_error_message_00107c20",
                "param_1": "errorMessage",
                "iVar1": "errorCode",
                "uVar2": "errorMessageText",
                "in_R10": "additionalData",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printBfdErrorMessage_00107c20(long errorMessage)\n\n{\n  int errorCode;\n  undefined8 errorMessageText;\n  undefined8 additionalData;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessageText = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessageText = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",programName,errorMessage,errorMessageText,additionalData);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",programName,errorMessageText,additionalData);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "open_inarch",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_00107c20"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "remove_output.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_001024f0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "print_arelt_descr",
                "print_arelt_descr.cold"
            ],
            "imported": false,
            "current_name": "FUN_001024f0"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "create_output_file_00102e57",
                "pFVar1": "filePointer",
                "output_filename": "outputFilename"
            },
            "code": "\nvoid createOutputFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  outputFilename = (char *)concat();\n  if (verbose != 0) {\n    printf(\"x - %s\\n\",outputFilename);\n  }\n  filePointer = fopen(outputFilename,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(outputFilename);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "create_output_file_00102e57"
        },
        "FUN_0010e058": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e058",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010e058"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_files_00105af0",
                "param_1": "pointer_to_file_info",
                "param_2": "file_info",
                "param_3": "flag1",
                "param_4": "flag2",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_files_00105af0(long *pointer_to_file_info,long file_info,char flag1,char flag2)\n\n{\n  char is_valid_format;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(file_info,2);\n    if (is_valid_format != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(file_info,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(file_info,archived_file)) {\n        result = process_files_00105af0(pointer_to_file_info,archived_file,flag1,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          pointer_to_file_info = (long *)(*pointer_to_file_info + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (flag1 != '\\0') {\n      return_value = do_ar_emul_append_constprop_0_cold();\n      return return_value;\n    }\n  }\n  *(long *)(file_info + 0xf0) = *pointer_to_file_info;\n  *pointer_to_file_info = file_info;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "do_ar_emul_append.constprop.0",
                "do_ar_emul_append.constprop.0.cold",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "do_ar_emul_append.constprop.0",
                "replace_members.cold",
                "ar_emul_default_append"
            ],
            "imported": false,
            "current_name": "process_files_00105af0"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "open_inarch",
                "main",
                "replace_members.cold",
                "get_file_size",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00102450": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102450"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "release_memory_00102ba1",
                "unaff_RBP": "buffer",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] releaseMemory_00102ba1(void)\n\n{\n  undefined auVar1 [16];\n  void *buffer;\n  ulong returnAddress;\n  \n  free(buffer);\n  auVar1._8_8_ = 0;\n  auVar1._0_8_ = returnAddress;\n  return auVar1 << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "release_memory_00102ba1"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102570": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "ar_open",
                "write_archive"
            ],
            "imported": false,
            "current_name": "FUN_00102570"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12": "fileAttributes",
                "unaff_R13": "fileInfoPtr",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "isExecutable",
                "cStack0000000000000017": "isWritable",
                "in_stack_00000018": "isReadable",
                "cStack0000000000000019": "filePermissionUser",
                "cStack000000000000001a": "filePermissionGroup",
                "cStack000000000000001b": "filePermissionOther",
                "cStack000000000000001c": "isSetuid",
                "cStack000000000000001d": "isSetgid",
                "cStack000000000000001e": "isSticky",
                "uStack000000000000001f": "isArchive",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "numLinks",
                "in_stack_00000070": "fileUID",
                "in_stack_00000080": "fileGID",
                "output_bfd": "outputBfd",
                "output_filename": "outputFilename"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **fileInfo;\n  FILE *outputFile;\n  long fileAttributes;\n  void *fileInfoPtr;\n  int fileDescriptor;\n  undefined fileType;\n  char isExecutable;\n  char isWritable;\n  char isReadable;\n  char filePermissionUser;\n  char filePermissionGroup;\n  char filePermissionOther;\n  char isSetuid;\n  char isSetgid;\n  char isSticky;\n  undefined isArchive;\n  uint fileMode;\n  uint numLinks;\n  uint fileUID;\n  undefined8 fileGID;\n  \n  do {\n    bVar1 = bfd_fatal();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((make_thin_archive != '\\0') || ((*(byte *)(fileAttributes + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    outputBfd = 0;\n    outputFilename = 0;\n    bfd_close();\n    iVar3 = smart_rename_constprop_0();\n    if (iVar3 == 0) {\n      free(fileInfoPtr);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  bfd_fatal();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = fileMode & 0xf000;\n  if (uVar4 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar4 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  isExecutable = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  isWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  isReadable = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  filePermissionUser = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  filePermissionGroup = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  filePermissionOther = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  isSetuid = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  isSetgid = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  isSticky = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (isReadable == 'x') {\n      isReadable = 's';\n    }\n    else {\n      isReadable = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (filePermissionOther == 'x') {\n      filePermissionOther = 's';\n    }\n    else {\n      filePermissionOther = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (isSticky == 'x') {\n      isSticky = 't';\n    }\n    else {\n      isSticky = 'T';\n    }\n  }\n  isArchive = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)numLinks,\n          (ulong)fileUID,fileGID,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileInfo,outputFile);\n  if ((char)fileAttributes != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dup",
                "bfd_fatal",
                "free",
                "bfd_close",
                "smart_rename.constprop.0",
                "bfd_set_archive_head",
                "xexit",
                "write_archive.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "write_archive.cold"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "prompt",
                "main",
                "do_ar_emul_append.constprop.0.cold",
                "ar_emul_default_replace",
                "yyerror.constprop.0",
                "print_contents",
                "yyparse.isra.0",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(standardError,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "yy_create_buffer.constprop.0",
                "yyparse.isra.0",
                "yyensure_buffer_stack"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "main",
                "normalize",
                "replace_members.cold",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "make_tempname"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_00102c25",
                "param_7": "permissions",
                "param_11": "fileMode",
                "param_12": "archiveSize",
                "unaff_RBX": "fileStruct",
                "plVar8": "currentFile",
                "uVar5": "errorMessage",
                "puVar9": "paramPtr",
                "pplVar6": "filePtrPtr",
                "iVar2": "errorCode",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "uVar10": "bytesProcessed",
                "sVar11": "bytesToRead",
                "piVar3": "errnoPtr",
                "pcVar4": "errorString",
                "output_file": "outputFile",
                "output_filename": "filename",
                "preserve_dates": "preserveDates",
                "set_times": "setFileTimes",
                "chmod": "changeFileMode",
                "bfd_seek": "seekBFD",
                "filename_cmp": "compareFilename",
                "open_output_file_isra_0": "openOutputFile",
                "fatal": "handleError"
            },
            "code": "\nlong * extractAndWriteArchive_00102c25(void)\n\n{\n  int iVar1;\n  int errorCode;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  long **filePtrPtr;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long **fileStruct;\n  long *currentFile;\n  undefined4 *paramPtr;\n  ulong bytesProcessed;\n  size_t bytesToRead;\n  undefined4 *permissions;\n  __mode_t fileMode;\n  ulong archiveSize;\n  \n  paramPtr = permissions;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *paramPtr = 0;\n    paramPtr = paramPtr + 1;\n  }\n  filePtrPtr = (long **)fileStruct[0x1d];\n  if ((long **)fileStruct[0x1d] == (long **)0x0) {\n    filePtrPtr = fileStruct;\n  }\n  errorCode = (*(code *)filePtrPtr[1][0x3d])();\n  if (errorCode != 0) {\n    currentFile = *fileStruct;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    errorCode = handleError(errorMessage,currentFile);\n    errorMessage = posname;\n    if (errorCode == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        iVar1 = compareFilename(*(undefined8 *)*currentFile,errorMessage);\n        if (iVar1 == 0) {\n          if (errorCode != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  seekBFD();\n  outputFile = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    outputFile = (FILE *)openOutputFile(*fileStruct);\n  }\n  else {\n    bytesProcessed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - bytesProcessed;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesToRead);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        fileStruct = (long **)*fileStruct[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        handleError(errorMessage,fileStruct);\n        goto LAB_00102ca2;\n      }\n      if (outputFile == (FILE *)0x0) {\n        outputFile = (FILE *)openOutputFile(*fileStruct);\n      }\n      bytesToRead = fwrite(buffer,1,bytesRead,outputFile);\n      if (bytesToRead != bytesRead) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        handleError(\"%s: %s\",filename,errorString);\n        goto LAB_00102c78;\n      }\n      bytesProcessed = bytesProcessed + bytesRead;\n    } while (bytesProcessed < archiveSize);\n    free(buffer);\n  }\n  fclose(outputFile);\n  errorString = filename;\n  outputFile = (FILE *)0x0;\n  changeFileMode(filename,fileMode);\n  if (preserveDates != 0) {\n    setFileTimes(errorString,permissions);\n  }\n  filename = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_bread",
                "chmod",
                "open_output_file.isra.0",
                "free",
                "fclose",
                "fwrite",
                "set_times",
                "strerror",
                "fatal",
                "dcgettext",
                "bfd_seek",
                "__errno_location",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "extract_file"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102c25"
        },
        "FUN_0010e188": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e188",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010e188"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "open_inarch",
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "strLength",
                "puVar3": "resultString",
                "uVar4": "maxLen",
                "unaff_RBX": "sourceString",
                "unaff_RBP": "stackFrame",
                "puVar5": "resultPointer",
                "bVar6": "isAscending",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] reverseString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t strLength;\n  undefined *resultString;\n  ulong maxLen;\n  undefined *sourceString;\n  long stackFrame;\n  undefined *resultPointer;\n  byte isAscending;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  isAscending = 0;\n  strLength = strlen(inputString);\n  maxLen = (ulong)*(byte *)(*(long *)(stackFrame + 8) + 0x1e);\n  resultString = sourceString;\n  if (maxLen < strLength) {\n    resultString = (undefined *)xmalloc(maxLen + 1);\n    lVar1 = *(long *)(stackFrame + 8);\n    resultPointer = resultString;\n    for (maxLen = (ulong)*(byte *)(lVar1 + 0x1e); maxLen != 0; maxLen = maxLen - 1) {\n      *resultPointer = *sourceString;\n      sourceString = sourceString + (ulong)isAscending * -2 + 1;\n      resultPointer = resultPointer + (ulong)isAscending * -2 + 1;\n    }\n    resultString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = resultString;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "normalize"
            ],
            "imported": false,
            "current_name": "reverse_string_00102bb0"
        },
        "FUN_0010e060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010e060"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "open_inarch",
                "main",
                "ar_open",
                "write_archive",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "map_over_members",
                "map_over_list",
                "main",
                "get_pos_bfd.cold",
                "replace_members.cold",
                "yyparse.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102460": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "main",
                "simple_copy.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00102460"
        },
        "FUN_00102580": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "print_contents",
                "extract_file.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102580"
        },
        "FUN_0010e180": {
            "renaming": {},
            "code": "\n\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* calloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e180",
            "calling": [
                "calloc"
            ],
            "imported": false,
            "current_name": "FUN_0010e180"
        }
    },
    "used_tokens": 110499,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_00107920",
            "FUN_001033d6",
            "FUN_00102000",
            "FUN_00105870",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107730",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_0010300e",
            "FUN_00107740",
            "FUN_001028ed",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00105cc0",
            "FUN_00102f08",
            "FUN_0010285f",
            "FUN_0010394a",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_00103172",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00105d60",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00107c10",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107c20",
            "FUN_00102e57",
            "FUN_00102ba1",
            "FUN_00102d2f",
            "FUN_001033b0",
            "FUN_00102c25",
            "FUN_00102bb0"
        ],
        [
            "FUN_00102e6f",
            "FUN_00105570"
        ],
        [
            "FUN_00105af0"
        ]
    ],
    "locked_functions": []
}