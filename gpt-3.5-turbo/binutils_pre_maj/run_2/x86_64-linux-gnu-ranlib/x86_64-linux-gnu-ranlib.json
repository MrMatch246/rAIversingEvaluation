{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_entry_00102cd9",
                "in_EAX": "condition",
                "iVar1": "filenameComparisonResult",
                "unaff_RBX": "entryPointer",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingEntry_00102cd9(void)\n\n{\n  int condition;\n  int filenameComparisonResult;\n  long *entryPointer;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (condition == 3) {\n    for (; *entryPointer != 0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryPointer != (undefined8 *)0x0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n      filenameComparisonResult = filename_cmp(*(undefined8 *)*entryPointer,targetFilename);\n      if (filenameComparisonResult == 0) {\n        if (condition != 2) {\n          return entryPointer;\n        }\n        return (long *)(*entryPointer + 0xf0);\n      }\n    }\n  }\n  return entryPointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "log_file_data_001079c0",
                "param_1": "file",
                "param_2": "data",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result",
                "ppcVar2": "ptrData",
                "pcVar3": "ctimeData",
                "uVar4": "permission",
                "local_100": "currentTime",
                "uStack_f3": "fileType",
                "cStack_f2": "permOwnerRead",
                "cStack_f1": "permOwnerWrite",
                "cStack_f0": "permOwnerExec",
                "cStack_ef": "permGroupRead",
                "cStack_ee": "permGroupWrite",
                "cStack_ed": "permGroupExec",
                "cStack_ec": "permOtherRead",
                "cStack_eb": "permOtherWrite",
                "cStack_ea": "permOtherExec",
                "local_e8": "timeStr",
                "local_b8": "localData",
                "uStack_a0": "fileMode",
                "uStack_9c": "fileVal1",
                "uStack_98": "fileVal2",
                "uStack_88": "fileVal3",
                "local_60": "fileModTime"
            },
            "code": "\nvoid logFileData_001079c0(FILE *file,char **data,char flag1,char flag2)\n\n{\n  int result;\n  char **ptrData;\n  char *ctimeData;\n  uint permission;\n  time_t currentTime;\n  undefined fileType;\n  char permOwnerRead;\n  char permOwnerWrite;\n  char permOwnerExec;\n  char permGroupRead;\n  char permGroupWrite;\n  char permGroupExec;\n  char permOtherRead;\n  char permOtherWrite;\n  char permOtherExec;\n  undefined uStack_e9;\n  char timeStr [48];\n  undefined localData [24];\n  uint fileMode;\n  uint fileVal1;\n  uint fileVal2;\n  undefined8 fileVal3;\n  time_t fileModTime;\n  \n  if (flag1 != '\\0') {\n    ptrData = (char **)data[0x1d];\n    if ((char **)data[0x1d] == (char **)0x0) {\n      ptrData = data;\n    }\n    result = (**(code **)(ptrData[1] + 0x1e8))(data,localData);\n    if (result == 0) {\n      currentTime = fileModTime;\n      ctimeData = ctime(&currentTime);\n      if (ctimeData == (char *)0x0) {\n        ctimeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeStr,ctimeData);\n      }\n      else {\n        sprintf(timeStr,\"%.12s %.4s\",ctimeData + 4);\n      }\n      permission = fileMode & 0xf000;\n      if (permission == 0x4000) {\n        fileType = 100;\n      }\n      else if (permission == 0xa000) {\n        fileType = 0x6c;\n      }\n      else if (permission == 0x6000) {\n        fileType = 0x62;\n      }\n      else if (permission == 0x2000) {\n        fileType = 99;\n      }\n      else if (permission == 0xc000) {\n        fileType = 0x73;\n      }\n      else {\n        fileType = 0x70;\n        if (permission != 0x1000) {\n          fileType = 0x2d;\n        }\n      }\n      permOwnerRead = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n      permOwnerWrite = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n      permOwnerExec = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n      permGroupRead = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n      permGroupWrite = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n      permGroupExec = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n      permOtherRead = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n      permOtherWrite = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n      permOtherExec = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileMode & 0x800) != 0) {\n        if (permOwnerExec == 'x') {\n          permOwnerExec = 's';\n        }\n        else {\n          permOwnerExec = 'S';\n        }\n      }\n      if ((fileMode & 0x400) != 0) {\n        if (permGroupExec == 'x') {\n          permGroupExec = 's';\n        }\n        else {\n          permGroupExec = 'S';\n        }\n      }\n      if ((fileMode & 0x200) != 0) {\n        if (permOtherExec == 'x') {\n          permOtherExec = 't';\n        }\n        else {\n          permOtherExec = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&permOwnerRead,(ulong)fileVal1,(ulong)fileVal2,fileVal3,\n              timeStr,(ulong)fileMode);\n    }\n  }\n  fputs(*data,file);\n  if (flag2 != '\\0') {\n    if ((*(byte *)((long)data + 0x49) & 0x10) == 0) {\n      if (data[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (data[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "log_file_data_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "write_to_file_00105a68",
                "pcVar1": "directory_path",
                "pFVar2": "file_ptr",
                "sVar3": "directory_length"
            },
            "code": "\nvoid write_to_file_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *file_ptr;\n  size_t directory_length;\n  \n  directory_path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    directory_length = strlen(DAT_0010d5e8);\n    if (directory_length != 0) {\n      if (directory_path[directory_length - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directory_path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directory_path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_ptr = fopen(DAT_0010d618,\"w\");\n  if (file_ptr != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "strlen",
                "perror",
                "FUN_00102e57",
                "xexit",
                "concat",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "write_to_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_archive_entries_001032a8",
                "param_1": "archive",
                "param_2": "callback_function",
                "param_3": "entry_names",
                "param_4": "result",
                "lVar1": "next_entry",
                "uVar2": "entry_name",
                "bVar3": "entry_found",
                "plVar4": "current_entry",
                "iVar5": "filename_comparison",
                "__format": "error_message",
                "plVar6": "next_entry",
                "plVar8": "previous_entry",
                "lVar7": "current_entry"
            },
            "code": "\n\n\nundefined8 extract_archive_entries_001032a8(long *archive,code *callback_function,undefined8 *entry_names,undefined8 result)\n\n{\n  long next_entry;\n  undefined8 entry_name;\n  bool entry_found;\n  long *current_entry;\n  int filename_comparison;\n  char *error_message;\n  long *next_entry;\n  long current_entry;\n  long *previous_entry;\n  \n  current_entry = archive[0x1e];\n  if (entry_names == (undefined8 *)0x0) {\n    while (current_entry != 0) {\n      next_entry = *(long *)(current_entry + 0xf0);\n      (*callback_function)(current_entry,0);\n      current_entry = next_entry;\n    }\n  }\n  else {\n    do {\n      entry_found = false;\n      current_entry = (long *)archive[0x1e];\n      previous_entry = archive;\n      while (next_entry = current_entry, next_entry != (long *)0x0) {\n        if (*next_entry != 0) {\n          filename_comparison = filename_cmp(*entry_names);\n          if (filename_comparison == 0) {\n            entry_found = true;\n            (*callback_function)(next_entry,previous_entry);\n          }\n        }\n        previous_entry = next_entry;\n        current_entry = (long *)next_entry[0x1e];\n      }\n      if (!entry_found) {\n        entry_name = *entry_names;\n        error_message = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,error_message,entry_name);\n      }\n      entry_names = (undefined8 *)entry_names[1];\n    } while (entry_names != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_archive_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_error_0010285f",
                "__format": "formatString",
                "lVar2": "substring",
                "plVar3": "substringPtr",
                "uVar4": "entry",
                "plVar5": "archivePtr",
                "unaff_RBP": "callbackFunc",
                "unaff_R12": "ctx",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryPtr",
                "iStack000000000000000c": "counter"
            },
            "code": "\n\n\nvoid printArchiveEntryNotFoundError_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long substring;\n  long *substringPtr;\n  undefined8 entry;\n  long *archivePtr;\n  code *callbackFunc;\n  long ctx;\n  int remainingEntries;\n  undefined8 *entryPtr;\n  int counter;\n  \ncode_r0x0010285f:\n  entry = *entryPtr;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entry);\nLAB_0010553e:\n  entryPtr = entryPtr + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  archivePtr = *(long **)(ctx + 0xf0);\n  counter = 0;\n  do {\n    if (archivePtr == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)archivePtr + 0xac) == 0) {\n      substring = *archivePtr;\n      if (substring == 0) {\n        substringPtr = (long *)archivePtr[0x1d];\n        if ((long *)archivePtr[0x1d] == (long *)0x0) {\n          substringPtr = archivePtr;\n        }\n        (**(code **)(substringPtr[1] + 0x1e8))(archivePtr,&stack0x00000010);\n      }\n      else if (((*(byte *)(ctx + 0x49) & 0x10) == 0) || (substring = extract_substring_00105830(), substring != 0))\n      {\n        entry = extract_substring_00105830(*entryPtr);\n        iVar1 = filename_cmp(entry,substring);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (counter = counter + 1,\n            counter == _DAT_0010d630)))) break;\n      }\n    }\n    archivePtr = (long *)archivePtr[0x1e];\n  } while( true );\n  (*callbackFunc)();\n  *(undefined4 *)((long)archivePtr + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_not_found_error_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102c25",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "retrieveLocalizedText",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_message_0010342d",
                "param_1": "outputType",
                "uVar1": "targetName",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsageMessage_0010342d(uint outputType)\n\n{\n  undefined8 targetName;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputType != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,DAT_0010d660);\n  targetName = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,targetName);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (outputType != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputType ^ 1);\n}\n\n",
            "called": [
                "FUN_0010336b",
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_message_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_and_version_0010394a",
                "param_1": "flag",
                "uVar1": "version",
                "__stream": "outputStream",
                "pcVar2": "translatedString"
            },
            "code": "\n\n\nvoid printUsageAndVersion_0010394a(uint flag)\n\n{\n  undefined8 version;\n  char *translatedString;\n  FILE *outputStream;\n  \n  version = DAT_0010d660;\n  outputStream = _stderr;\n  if (flag != 0) {\n    outputStream = _stdout;\n  }\n  translatedString = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,translatedString,version);\n  translatedString = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,translatedString);\n  translatedString = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,translatedString);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (flag != 0) {\n    translatedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,translatedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(flag ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_and_version_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "log_error_message_00107920",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_message",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "buffer_size",
                "local_d4": "local_var1",
                "local_d0": "stack_buffer",
                "local_c8": "local_buffer1",
                "local_b8": "local_buffer2",
                "local_b0": "param10_copy",
                "local_a8": "param11_copy",
                "local_a0": "param12_copy",
                "local_98": "param13_copy",
                "local_90": "param14_copy",
                "local_88": "error_code_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\nvoid log_error_message_00107920(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 buffer_size;\n  undefined4 local_var1;\n  undefined *stack_buffer;\n  undefined *local_buffer1;\n  undefined local_buffer2 [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (condition != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  stack_buffer = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer1 = local_buffer2;\n  local_var1 = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  log_error_message_00107920_001078c0(error_message,&buffer_size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "log_error_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_default_value_00105bb0"
            },
            "code": "\nundefined8 getDefaultValue_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_default_value_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_00107640"
            },
            "code": "\nundefined8 initialize_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_archive_member_00102e6f",
                "pcVar1": "baseDirectory",
                "in_RAX": "path",
                "uVar2": "basename",
                "uVar3": "errorMessage",
                "pFVar4": "filePointer",
                "sVar5": "length",
                "pcVar6": "currentChar"
            },
            "code": "\nvoid extractArchiveMember_00102e6f(void)\n\n{\n  char *baseDirectory;\n  char *path;\n  undefined8 basename;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t length;\n  char *currentChar;\n  \n  baseDirectory = DAT_0010d5e8;\n  do {\n    path = path + 1;\n    while (*path != '/') {\n      if (*path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (length = strlen(DAT_0010d5e8), length != 0)) {\n          if (baseDirectory[length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(baseDirectory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(baseDirectory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePointer = fopen(DAT_0010d618,\"w\");\n        if (filePointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentChar = path;\n      if ((*path == '.') && (currentChar = path + 1, path[1] == '.')) {\n        currentChar = path + 2;\n        if ((path[2] == '/') || (path[2] == '\\0')) {\n          basename = lbasename();\n          baseDirectory = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          log_error_message_00107920(errorMessage,baseDirectory,basename);\n          DAT_0010d618 = (char *)basename;\n          write_to_file_00105a68();\n          return;\n        }\n      }\n      for (; (path = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00107920",
                "dcgettext",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "log_file_data_00107890",
                "param_1": "outputStream"
            },
            "code": "\n\n\nvoid logFileData_00107890(undefined8 outputStream)\n\n{\n  log_file_data_001079c0(_stdout,outputStream,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "log_file_data_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "bufferData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "ptrToBuffer",
                "auVar3": "returnVal"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 bufferData,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *ptrToBuffer;\n  undefined returnVal [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    ptrToBuffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = ptrToBuffer;\n  } while (ptrToBuffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_001031cf(buffer,bufferData);\n  returnVal._8_8_ = param4;\n  returnVal._0_8_ = buffer;\n  return returnVal;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_00103172",
                "param_1": "src",
                "param_2": "dst",
                "param_3": "shouldPrint",
                "param_4": "data",
                "uVar1": "temp",
                "auVar2": "result"
            },
            "code": "\nundefined  [16]\nupdateAndPrint_00103172(undefined8 *src,undefined8 *dst,char shouldPrint,undefined8 data)\n\n{\n  undefined8 temp;\n  undefined result [16];\n  \n  if (shouldPrint != '\\0') {\n    printf(\"r - %s\\n\",*dst);\n  }\n  temp = *src;\n  dst[0x1e] = temp;\n  result._1_7_ = (undefined7)((ulong)temp >> 8);\n  result[0] = 1;\n  *src = dst;\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_and_print_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_in_list_00105870",
                "param_1": "fileList",
                "param_2": "fileCount",
                "param_3": "fileNameToFind",
                "iVar1": "comparisonResult",
                "iVar3": "searchOption",
                "uVar2": "defaultFileName"
            },
            "code": "\nlong * findFileInList_00105870(long *fileList,int fileCount,undefined8 fileNameToFind)\n\n{\n  int comparisonResult;\n  undefined8 defaultFileName;\n  int searchOption;\n  \n  defaultFileName = DAT_0010d638;\n  searchOption = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultFileName = fileNameToFind;\n    searchOption = fileCount;\n  }\n  if (searchOption == 3) {\n    for (; *fileList != 0; fileList = (long *)(*fileList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileList != (undefined8 *)0x0; fileList = (long *)(*fileList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileList,defaultFileName);\n      if (comparisonResult == 0) {\n        if (searchOption != 2) {\n          return fileList;\n        }\n        return (long *)(*fileList + 0xf0);\n      }\n    }\n  }\n  return fileList;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_file_in_list_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "ptrEntry"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *ptrEntry;\n  \n  ptrEntry = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)ptrEntry + 0x1c);\n  DAT_0010d5b0 = (undefined *)ptrEntry[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *ptrEntry;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "source_file",
                "param_2": "destination_file",
                "param_3": "file_permissions",
                "param_4": "log_message",
                "uVar1": "copy_result",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "uVar4": "error_description",
                "uVar5": "copy_status"
            },
            "code": "\nundefined  [16] copy_and_delete_file_00105bc0(char *source_file,char *destination_file,undefined4 file_permissions,undefined8 log_message)\n\n{\n  uint copy_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 error_description;\n  ulong copy_status;\n  undefined auVar6 [16];\n  \n  if (destination_file == source_file) {\n    copy_status = 0;\n  }\n  else {\n    copy_result = copy_file_00105c00(file_permissions);\n    copy_status = (ulong)copy_result;\n    if (copy_result != 0) {\n      errno_location = __errno_location();\n      error_message = strerror(*errno_location);\n      error_description = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      log_error_message_00107920(error_description,destination_file,error_message);\n    }\n    unlink(source_file);\n  }\n  auVar6._8_8_ = log_message;\n  auVar6._0_8_ = copy_status;\n  return auVar6;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "extract_and_print_archive_status_00107650",
                "param_1": "archive_path",
                "uVar1": "status",
                "lVar2": "file_status"
            },
            "code": "\nundefined8 extract_and_print_archive_status_00107650(undefined8 archive_path)\n\n{\n  undefined8 status;\n  long file_status;\n  \n  file_status = check_file_status_001052a0();\n  if (file_status < 1) {\n    status = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    file_status = extract_archived_files_00105300(archive_path,0);\n    if (file_status == 0) {\n                    \n      xexit(1);\n    }\n    extract_and_print_archive_information_001058b0(file_status);\n    status = 0;\n  }\n  return status;\n}\n\n",
            "called": [
                "FUN_00105300",
                "FUN_001052a0",
                "xexit",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_status_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_and_log_error_00102f1e",
                "piVar1": "errnoPtr",
                "uVar2": "errorString",
                "unaff_RBP": "fileSize",
                "unaff_R12": "filePath",
                "auVar3": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyAndLogError_00102f1e(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorString;\n  ulong fileSize;\n  char *filePath;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errnoPtr = __errno_location();\n  strerror(*errnoPtr);\n  errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  log_error_message_00107920(errorString);\n  unlink(filePath);\n  result._0_8_ = fileSize & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "unlink",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_and_log_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_error_message_00102fd7",
                "piVar1": "errorLocation",
                "uVar2": "errorText"
            },
            "code": "\nvoid printTimeErrorMessage_00102fd7(void)\n\n{\n  int *errorLocation;\n  undefined8 errorText;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  errorText = dcgettext(0,\"%s: cannot set time: %s\",5);\n  log_error_message_00107920(errorText);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_time_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_ar_status_00103ba8",
                "printf": "printMessage",
                "fflush": "flushOutput",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid checkARStatus_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_ar_status_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00102cd9",
                "FUN_00105db0",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103c60",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_00102fd7",
                "FUN_00102d8c",
                "FUN_001031a5",
                "FUN_00102e6f",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_001028ed",
                "FUN_001025a0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_001075e0",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001032a8",
                "FUN_0010266f",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "log_data_to_file_00103ddc",
                "param_1": "data"
            },
            "code": "\nvoid logDataToFile_00103ddc(undefined8 data)\n\n{\n  log_file_data_001079c0(DAT_0010d578,data,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "log_data_to_file_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "log_error_message_001078c0",
                "param_1": "message",
                "param_2": "arguments",
                "fflush": "flushStandardOutput",
                "_stdout": "standardOutput",
                "fprintf": "printErrorMessage",
                "_stderr": "standardError",
                "putc": "putCharacter"
            },
            "code": "\n\n\nvoid logErrorMessage_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fflush",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "log_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "compilerName",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 compilerName)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",compilerName,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "__format": "format",
                "lVar2": "currentEntry",
                "plVar3": "nextEntry",
                "uVar4": "substring",
                "plVar5": "entry",
                "local_cc": "count",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long archive,code *callback,undefined8 *entryNames,int numEntries)\n\n{\n  int iVar1;\n  char *format;\n  long currentEntry;\n  long *nextEntry;\n  undefined8 substring;\n  long *entry;\n  int count;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entry = *(long **)(archive + 0xf0);\n      count = 0;\n      for (; entry != (long *)0x0; entry = (long *)entry[0x1e]) {\n        if (*(int *)((long)entry + 0xac) == 0) {\n          currentEntry = *entry;\n          if (currentEntry == 0) {\n            nextEntry = (long *)entry[0x1d];\n            if ((long *)entry[0x1d] == (long *)0x0) {\n              nextEntry = entry;\n            }\n            (**(code **)(nextEntry[1] + 0x1e8))(entry,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = extract_substring_00105830(currentEntry,archive), currentEntry != 0)) {\n            substring = extract_substring_00105830(*entryNames,archive);\n            iVar1 = filename_cmp(substring,currentEntry);\n            if ((iVar1 == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entry + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      substring = *entryNames;\n      format = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,format,substring);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "display_syntax_error_001031a5",
                "__format": "errorFormat",
                "uVar1": "newLineNum"
            },
            "code": "\nvoid displaySyntaxError_001031a5(void)\n\n{\n  uint newLineNum;\n  char *errorFormat;\n  \n  newLineNum = DAT_0010d554 + 1;\n  errorFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorFormat,(ulong)newLineNum);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "display_syntax_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00102ba1",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_00102d2f",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_00107690",
                "FUN_00107c10",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_0010315d",
                "FUN_00102d2f",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "return_value",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_buffer_size",
                "puVar3": "buffer_pointer",
                "bVar4": "loop_direction"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 return_value;\n  long loop_counter;\n  long new_buffer_size;\n  undefined4 *buffer_pointer;\n  byte loop_direction;\n  \n  loop_direction = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return return_value;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return return_value;\n    }\n    new_buffer_size = DAT_0010d580 + 8;\n    buffer_size = new_buffer_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_pointer = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_buffer_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_pointer = 0;\n        buffer_pointer = buffer_pointer + (ulong)loop_direction * -2 + 1;\n      }\n      return return_value;\n    }\n  }\n  print_error_message_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return return_value;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "inputParams",
                "__ptr": "buffer",
                "puVar2": "ptrToInputParam1D",
                "iVar1": "result",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errorNumberPtr",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorMessage",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "maxBytesToRead"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *inputParams)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *ptrToInputParam1D;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errorNumberPtr;\n  size_t remainingBytes;\n  char *errorMessage;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong maxBytesToRead;\n  \n  buffer = (void *)xmalloc(0x2000);\n  ptrToInputParam1D = (undefined8 *)inputParams[0x1d];\n  if ((undefined8 *)inputParams[0x1d] == (undefined8 *)0x0) {\n    ptrToInputParam1D = inputParams;\n  }\n  result = (**(code **)(ptrToInputParam1D[1] + 0x1e8))(inputParams,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputParams);\n    }\n    totalBytesRead = 0;\n    bfd_seek(inputParams,0,0);\n    goto LAB_00103afd;\n  }\n  inputParams = (undefined8 *)*inputParams;\n  errorMessage = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorMessage,5);\n    log_error_and_exit_00107690(errorMessage,inputParams);\n    maxBytesToRead = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errorNumberPtr = __errno_location();\n        errorMessage = strerror(*errorNumberPtr);\n        log_error_and_exit_00107690(\"stdout: %s\",errorMessage);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (maxBytesToRead <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = maxBytesToRead - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,inputParams);\n    } while (remainingBytes == bytesRead);\n    errorMessage = \"%s is not a valid archive\";\n    inputParams = *(undefined8 **)inputParams[0x1d];\n    archiveSize = maxBytesToRead;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107690",
                "bfd_seek",
                "xmalloc",
                "free",
                "strerror",
                "bfd_bread",
                "printf",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_001078c0",
                "FUN_00102d8c",
                "FUN_00105300",
                "FUN_0010336b",
                "FUN_001033b0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "extract_and_print_archive_information_001058b0",
                "param_1": "archiveFilePath",
                "cVar1": "charValue",
                "uVar2": "bitmask",
                "iVar3": "tempFileDescriptor",
                "uVar4": "archiveFormat",
                "__format": "formatString",
                "__ptr": "tempFilePath",
                "__stream": "tempFile",
                "ppcVar5": "fileDescriptor",
                "uStack0000000000000020": "flags",
                "in_stack_00000028": "fileMode",
                "in_stack_00000038": "fileSize",
                "local_3c": "status",
                "uStack_33": "fileTypeChar1",
                "cStack_32": "fileTypeChar2",
                "cStack_31": "fileTypeChar3"
            },
            "code": "\n\n\nvoid extractAndPrintArchiveInformation_001058b0(undefined8 *archiveFilePath)\n\n{\n  char charValue;\n  uint bitmask;\n  int tempFileDescriptor;\n  undefined8 archiveFormat;\n  char *formatString;\n  void *tempFilePath;\n  FILE *tempFile;\n  char **fileDescriptor;\n  uint flags;\n  uint fileMode;\n  undefined8 fileSize;\n  int status [2];\n  undefined fileTypeChar1;\n  char fileTypeChar2;\n  char fileTypeChar3;\n  \n  archiveFormat = archiveFilePath[0x1e];\n  status[0] = -1;\n  tempFilePath = (void *)xstrdup(*archiveFilePath);\n  tempFile = (FILE *)create_temp_file_001057a0(tempFilePath,status);\n  tempFileDescriptor = status[0];\n  if (tempFile != (FILE *)0x0) {\n    DAT_0010d618 = tempFile;\n    fileDescriptor = (char **)bfd_fdopenw(tempFile,*(undefined8 *)archiveFilePath[1],status[0]);\n    if (fileDescriptor != (char **)0x0) {\n      DAT_0010d5e0 = fileDescriptor;\n      bfd_set_format(fileDescriptor,2);\n      bitmask = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)fileDescriptor + 0x49) & 0xfffffff7;\n      *(char *)((long)fileDescriptor + 0x49) = (char)bitmask;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)archiveFilePath + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)fileDescriptor + 0x49) = (byte)bitmask | 0x10;\n        }\n        charValue = bfd_set_archive_head(fileDescriptor,archiveFormat);\n        if (charValue != '\\0') break;\n        bitmask = print_error_and_exit_00107c10(tempFilePath);\nLAB_00102d37:\n        *(uint *)((long)fileDescriptor + 0x44) = *(uint *)((long)fileDescriptor + 0x44) | 0x100000;\n      }\n      tempFileDescriptor = dup(tempFileDescriptor);\n      charValue = bfd_close(fileDescriptor);\n      if (charValue == '\\0') {\n        print_error_and_exit_00107c10(tempFilePath);\n        formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,formatString);\n        bitmask = flags & 0xf000;\n        if (bitmask == 0x4000) {\n          fileTypeChar1 = 100;\n        }\n        else if (bitmask == 0xa000) {\n          fileTypeChar1 = 0x6c;\n        }\n        else if (bitmask == 0x6000) {\n          fileTypeChar1 = 0x62;\n        }\n        else if (bitmask == 0x2000) {\n          fileTypeChar1 = 99;\n        }\n        else if (bitmask == 0xc000) {\n          fileTypeChar1 = 0x73;\n        }\n        else {\n          fileTypeChar1 = 0x70;\n          if (bitmask != 0x1000) {\n            fileTypeChar1 = 0x2d;\n          }\n        }\n        fileTypeChar2 = (-((_flags & 0x100) == 0) & 0xbbU) + 0x72;\n        fileTypeChar3 = (-((_flags & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(tempFile,\"%s %ld/%ld %6lu %s \",&fileTypeChar2,_flags >> 0x20,\n                (ulong)fileMode,fileSize,&stack0xffffffffffffffd8,\n                _flags & 0xffffffff);\n        fputs(*fileDescriptor,tempFile);\n        if ((char)archiveFilePath != '\\0') {\n          if ((*(byte *)((long)fileDescriptor + 0x49) & 0x10) == 0) {\n            if (fileDescriptor[0xb] != (char *)0x0) {\n              fprintf(tempFile,\" 0x%lx\");\n            }\n          }\n          else if (fileDescriptor[0xc] != (char *)0x0) {\n            fprintf(tempFile,\" 0x%lx\");\n          }\n        }\n        fputc(10,tempFile);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(archiveFilePath);\n      tempFileDescriptor = copy_and_delete_file_00105bc0(tempFile,tempFilePath,tempFileDescriptor);\n      if (tempFileDescriptor == 0) {\n        free(tempFilePath);\n        free(tempFile);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(tempFileDescriptor);\n    print_error_and_exit_00107c10(tempFilePath);\n  }\n  archiveFormat = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  print_error_and_exit_00107c10(archiveFormat);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "FUN_001057a0",
                "xstrdup",
                "FUN_00107c10",
                "bfd_fdopenw",
                "bfd_set_format",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_information_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "close_file_00102bf5",
                "fclose": "closeFilePointer",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid closeFile_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "unlink_if_ordinary",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "close_file_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid execute_indirect_function_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103ba8",
                "FUN_00102f96",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_timestamp_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorStr",
                "uVar4": "message",
                "local_38": "timestamp1",
                "uStack_34": "timestamp2",
                "uStack_30": "timestamp3",
                "uStack_2c": "timestamp4",
                "local_28": "timestamp5"
            },
            "code": "\nvoid setFileTimestamp_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorStr;\n  undefined8 message;\n  undefined4 timestamp1;\n  undefined4 timestamp2;\n  undefined4 timestamp3;\n  undefined4 timestamp4;\n  undefined4 timestamp5;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  timestamp5 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  timestamp1 = *(undefined4 *)(fileInfo + 0x48);\n  timestamp2 = *(undefined4 *)(fileInfo + 0x4c);\n  timestamp3 = *(undefined4 *)(fileInfo + 0x50);\n  timestamp4 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timestamp1,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorStr = strerror(*errnoPtr);\n    message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    log_error_message_00107920(message,filePath,errorStr);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_timestamp_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "outputPath",
                "pcVar1": "baseDir",
                "pcVar2": "currentDir",
                "uVar3": "baseName",
                "uVar4": "errorMessage",
                "pFVar5": "file",
                "sVar6": "baseDirLength"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *outputPath)\n\n{\n  char *baseDir;\n  char *currentDir;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *file;\n  size_t baseDirLength;\n  \n  baseDir = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    baseDir = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    log_error_message_00107920(errorMessage,baseDir,baseName);\n    DAT_0010d618 = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (baseDirLength = strlen(DAT_0010d5e8), baseDirLength != 0)) {\n        if (baseDir[baseDirLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(baseDir,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(baseDir,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file = fopen(DAT_0010d618,\"w\");\n      if (file == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentDir = outputPath;\n    if ((*outputPath == '.') && (currentDir = outputPath + 1, outputPath[1] == '.')) {\n      currentDir = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentDir != '\\0' && (*currentDir != '/')); currentDir = currentDir + 1) {\n    }\n    for (; outputPath = currentDir, *currentDir == '/'; currentDir = currentDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_00102f55",
                "piVar2": "errorCodePtr",
                "unaff_R12D": "fileDescriptor"
            },
            "code": "\nundefined8 closeFile_00102f55(void)\n\n{\n  int iVar1;\n  int *errorCodePtr;\n  int fileDescriptor;\n  \n  errorCodePtr = __errno_location();\n  iVar1 = *errorCodePtr;\n  close(fileDescriptor);\n  *errorCodePtr = iVar1;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "create_temp_file_001057a0",
                "param_1": "filepath",
                "param_2": "file_descriptor",
                "param_3": "unused_arg1",
                "param_4": "unused_arg2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "path_length",
                "lVar4": "i",
                "lVar5": "slash_offset",
                "pcVar6": "temp_filepath",
                "bVar7": "is_first_slash",
                "auVar8": "result_object"
            },
            "code": "\nundefined  [16] create_temp_file_001057a0(char *filepath,int *file_descriptor,undefined8 unused_arg1,undefined8 unused_arg2)\n\n{\n  int result;\n  char *last_slash;\n  long path_length;\n  long i;\n  long slash_offset;\n  char *temp_filepath;\n  byte is_first_slash;\n  undefined result_object [16];\n  \n  is_first_slash = 0;\n  last_slash = strrchr(filepath,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_length = 0;\n  }\n  else {\n    slash_offset = (long)last_slash - (long)filepath;\n    last_slash = (char *)xmalloc(slash_offset + 0xb);\n    path_length = slash_offset + 1;\n    temp_filepath = last_slash;\n    for (i = slash_offset; i != 0; i = i + -1) {\n      *temp_filepath = *filepath;\n      filepath = filepath + (ulong)is_first_slash * -2 + 1;\n      temp_filepath = temp_filepath + (ulong)is_first_slash * -2 + 1;\n    }\n    last_slash[slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_length) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    temp_filepath = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    temp_filepath = last_slash;\n  }\n  result_object._8_8_ = unused_arg2;\n  result_object._0_8_ = temp_filepath;\n  return result_object;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "create_temp_file_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_metadata_00102d8c",
                "param_9": "permission",
                "param_19": "fileMode",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "unaff_RBX": "fileContents",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "hasExtraInfo",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "isUserReadable",
                "cStack0000000000000017": "isUserWritable",
                "cStack0000000000000019": "isGroupReadable",
                "cStack000000000000001a": "isGroupWritable",
                "cStack000000000000001b": "isGroupExecutable",
                "cStack000000000000001c": "isOtherReadable",
                "cStack000000000000001d": "isOtherWritable",
                "cStack000000000000001e": "isOtherExecutable",
                "uStack000000000000001f": "isUserExecutable",
                "uStack000000000000006c": "userId"
            },
            "code": "\nvoid printFileMetadata_00102d8c(void)\n\n{\n  char *__format;\n  uint uVar1;\n  char **fileContents;\n  FILE *outputFile;\n  char hasExtraInfo;\n  undefined fileType;\n  char isUserReadable;\n  char isUserWritable;\n  char permission;\n  char isGroupReadable;\n  char isGroupWritable;\n  char isGroupExecutable;\n  char isOtherReadable;\n  char isOtherWritable;\n  char isOtherExecutable;\n  undefined isUserExecutable;\n  uint fileMode;\n  uint userId;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar1 = fileMode & 0xf000;\n  if (uVar1 == 0x4000) {\n    fileType = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    fileType = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (uVar1 != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  isUserReadable = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  isUserWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permission = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  isGroupReadable = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  isGroupWritable = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  isGroupExecutable = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  isOtherReadable = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  isOtherWritable = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  isOtherExecutable = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permission == 'x') {\n      permission = 's';\n    }\n    else {\n      permission = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (isGroupExecutable == 'x') {\n      isGroupExecutable = 's';\n    }\n    else {\n      isGroupExecutable = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (isOtherExecutable == 'x') {\n      isOtherExecutable = 't';\n    }\n    else {\n      isOtherExecutable = 'T';\n    }\n  }\n  isUserExecutable = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)userId,\n          (ulong)fileSize,timestamp,&stack0x00000020,(ulong)fileMode);\n  fputs(*fileContents,outputFile);\n  if (hasExtraInfo != '\\0') {\n    if ((*(byte *)((long)fileContents + 0x49) & 0x10) == 0) {\n      if (fileContents[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContents[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fputs",
                "sprintf",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00102c25",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_001031cf",
                "FUN_001025a0",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_archived_files_00105300",
                "param_1": "fileName",
                "param_2": "archivedFiles",
                "plVar1": "pointerVar1",
                "pcVar2": "pointerVar2",
                "bVar3": "byteVar3",
                "cVar4": "charVar4",
                "iVar5": "intVar5",
                "uVar6": "unsignedVar6",
                "uVar7": "unsignedVar7",
                "piVar8": "pointerIntVar8",
                "lVar9": "longVar9",
                "puVar10": "pointerVar10",
                "local_b0": "localVar_b0",
                "local_a8": "localVar_a8"
            },
            "code": "\n\n\nundefined8 * extractArchivedFiles_00105300(char *fileName,undefined8 *archivedFiles)\n\n{\n  long *pointerVar1;\n  char *pointerVar2;\n  byte byteVar3;\n  char charVar4;\n  int intVar5;\n  undefined8 unsignedVar6;\n  undefined8 unsignedVar7;\n  int *pointerIntVar8;\n  long longVar9;\n  undefined8 *pointerVar10;\n  undefined8 localVar_b0;\n  stat localVar_a8;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  intVar5 = stat(fileName,&localVar_a8);\n  pointerVar2 = DAT_0010d618;\n  if (intVar5 == 0) goto LAB_001053be;\n  pointerIntVar8 = __errno_location();\n  if (*pointerIntVar8 == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(fileName);\n      check_and_exit_if_zero_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archivedFiles != (undefined8 *)0x0)) {\n      pointerVar10 = (undefined8 *)extract_archived_files_00102710();\n      return pointerVar10;\n    }\n    archivedFiles = (undefined8 *)bfd_openw(fileName,DAT_0010d5f0);\n    if (((archivedFiles != (undefined8 *)0x0) && (charVar4 = bfd_set_format(archivedFiles,2), charVar4 != '\\0')) &&\n       (charVar4 = bfd_close(archivedFiles), charVar4 != '\\0')) {\n      pointerVar2 = fileName;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  print_error_and_exit_00107c10(fileName);\n  do {\n    byteVar3 = *(byte *)((long)archivedFiles + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (byteVar3 != 0) {\n        unsignedVar7 = *archivedFiles;\n        unsignedVar6 = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        log_error_and_exit_00107690(unsignedVar6,unsignedVar7);\n        goto LAB_00102812;\n      }\n    }\n    else if (byteVar3 == 0) {\n      unsignedVar7 = *archivedFiles;\n      unsignedVar6 = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      log_error_and_exit_00107690(unsignedVar6,unsignedVar7);\nLAB_001027cb:\n      print_error_message_00107c20(fileName);\n      intVar5 = bfd_get_error();\n      if (intVar5 == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(localVar_b0);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      pointerVar1 = archivedFiles + 0x1e;\n      for (longVar9 = bfd_openr_next_archived_file(archivedFiles,0); longVar9 != 0;\n          longVar9 = bfd_openr_next_archived_file(archivedFiles,longVar9)) {\n        *pointerVar1 = longVar9;\n        pointerVar1 = (long *)(longVar9 + 0xf0);\n      }\n      *pointerVar1 = 0;\n      intVar5 = bfd_get_error();\n      if (intVar5 == 9) {\n        return archivedFiles;\n      }\n      do {\n        print_error_and_exit_00107c10(fileName);\nLAB_00102826:\n        unsignedVar7 = dcgettext(0,\"creating %s\",5);\n        log_error_message_00107920(unsignedVar7,fileName);\n        pointerVar2 = fileName;\nLAB_001053be:\n        DAT_0010d618 = pointerVar2;\n        archivedFiles = (undefined8 *)bfd_openr(fileName,DAT_0010d5f0);\n      } while (archivedFiles == (undefined8 *)0x0);\n      charVar4 = bfd_check_format_matches(archivedFiles,2,&localVar_b0);\n      if (charVar4 == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (longVar9 = bfd_openr_next_archived_file(archivedFiles,0), longVar9 == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_error",
                "FUN_00102710",
                "FUN_00107c10",
                "bfd_close",
                "stat",
                "perror",
                "bfd_openw",
                "FUN_00107690",
                "bfd_openr_next_archived_file",
                "bfd_check_format_matches",
                "bfd_set_format",
                "FUN_00107c20",
                "bfd_openr",
                "xexit",
                "FUN_00107920",
                "fprintf",
                "dcgettext",
                "FUN_0010315d",
                "bfd_get_error",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteVar",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVar2",
                "cVar14": "charVar",
                "iVar15": "varIndex",
                "uVar16": "loopVar",
                "pFVar18": "filePointer1",
                "sVar19": "size_tVar1",
                "sVar20": "size_tVar2",
                "__ptr": "bytePointer2",
                "plVar21": "longPointer2",
                "pFVar22": "filePointer2",
                "pcVar23": "charPointer",
                "lVar24": "loopVar2",
                "uVar25": "ulongVar1",
                "puVar26": "undefined8Pointer2",
                "pFVar28": "filePointer3",
                "iVar45": "varIndex2",
                "pcVar46": "charPointer2",
                "bVar47": "boolVar3",
                "bVar48": "byteVar3",
                "local_130": "filePointer4",
                "local_128": "filePointer5",
                "local_118": "bytePointer3",
                "local_110": "charPointerPointer2",
                "local_108": "size_tVar3",
                "local_100": "longVar1",
                "local_c8": "undefinedArray",
                "local_b0": "uintVar1"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteVar;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 uVar6;\n  undefined4 uVar7;\n  bool boolVar1;\n  bool boolVar2;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVar2;\n  char charVar;\n  int varIndex;\n  uint loopVar;\n  undefined4 uVar17;\n  FILE *filePointer1;\n  size_t size_tVar1;\n  size_t size_tVar2;\n  byte *bytePointer2;\n  long *longPointer2;\n  FILE *filePointer2;\n  char *charPointer;\n  long loopVar2;\n  ulong ulongVar1;\n  undefined8 *undefined8Pointer2;\n  undefined8 uVar27;\n  FILE *filePointer3;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long lVar34;\n  long lVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int varIndex2;\n  char *charPointer2;\n  bool boolVar3;\n  byte byteVar3;\n  undefined8 filePointer4;\n  FILE *filePointer5;\n  byte *bytePointer3;\n  char **charPointerPointer2;\n  size_t size_tVar3;\n  long longVar1;\n  undefined undefinedArray [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint uintVar1;\n  \n  byteVar3 = 0;\n  charPointer2 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePointer1 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPointerPointer2 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  filePointer5 = (FILE *)0x0;\n  filePointer2 = argv;\n  do {\n    loopVar = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)loopVar;\n    filePointer4 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)filePointer2;\n    if (**(char **)(&filePointer2->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)charPointerPointer2 - 1;\n      charPointerPointer2 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        longPointer2 = *(long **)filePointer2;\n        charPointer2 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,charPointer2,longPointer2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&filePointer2->_flags + (long)unaff_RBP * 2) + 1;\n      varIndex = stat(pcVar39,(stat *)undefinedArray);\n      if (-1 < varIndex) {\n        if ((uintVar1 & 0xf000) == 0x4000) {\n          longPointer2 = *(long **)filePointer2;\n          charPointer2 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer1 = fopen(pcVar39,\"r\");\n        if (filePointer1 != (FILE *)0x0) {\n          varIndex = fseek(filePointer1,0,2);\n          if (((varIndex != -1) && (size_tVar1 = ftell(filePointer1), size_tVar1 != 0xffffffffffffffff)) &&\n             (varIndex = fseek(filePointer1,0,0), varIndex != -1)) {\n            bytePointer3 = (byte *)xmalloc(size_tVar1 + 1);\n            size_tVar2 = fread(bytePointer3,1,size_tVar1,filePointer1);\n            if ((size_tVar1 == size_tVar2) || (varIndex = ferror(filePointer1), varIndex == 0)) {\n              bytePointer3[size_tVar2] = 0;\n              byteVar2 = *bytePointer3;\n              pbyteVar3 = bytePointer3;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              size_tVar1 = strlen((char *)bytePointer3);\n              bytePointer2 = (byte *)xmalloc(size_tVar1 + 1);\n              filePointer3 = (FILE *)0x0;\n              varIndex = 0;\n              boolVar2 = false;\n              boolVar3 = false;\n              boolVar1 = false;\n              longVar1 = 0;\n              pbyteVar3 = bytePointer3;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((varIndex == 0) || (varIndex + -1 <= (int)longVar1)) {\n                  if (filePointer3 == (FILE *)0x0) {\n                    varIndex = 8;\n                    filePointer3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer3->_flags + longVar1 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    varIndex = varIndex * 2;\n                    filePointer3 = (FILE *)xrealloc(filePointer3,(long)varIndex << 3);\n                    ppcVar31 = (char **)((long)&filePointer3->_flags + longVar1 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer3->_flags + longVar1 * 8);\n                }\n                byteVar2 = *pbyteVar3;\n                pbyteVar8 = bytePointer2;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | boolVar3))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      boolVar3 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *pbyteVar8 = byteVar2;\n                    pbyteVar8 = pbyteVar8 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar3;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar2 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar8 = byteVar2;\n                      pbyteVar8 = pbyteVar8 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  bytePointer = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar2 = *bytePointer;\n                }\nLAB_0010606f:\n                *pbyteVar8 = 0;\n                longPointer2 = (long *)xstrdup(bytePointer2);\n                *ppcVar31 = (char *)longPointer2;\n                *(undefined8 *)(filePointer3->_shortbuf + longVar1 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar2 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                longVar1 = longVar1 + 1;\n                if (byteVar2 == 0) {\n                  free(bytePointer2);\n                  if (filePointer2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePointer3);\n          }\n          fclose(filePointer1);\n        }\n      }\n    }\n    if ((int)charPointer2 <= (int)(loopVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        loopVar = (uint)unaff_R12;\n        varIndex = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (varIndex != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        loopVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)loopVar;\n        if ((char)loopVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_code_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            varIndex = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = varIndex + 1;\n            *(code **)(undefinedPointer + (long)varIndex * 8 + 0x10) = cleanup_binary_00107730;\n          }\n          else {\n            undefined8Pointer2 = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer2 != (undefined8 *)0x0) {\n              *undefined8Pointer2 = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Pointer2;\n              goto LAB_0010632b;\n            }\n          }\n          loopVar2 = 1;\n          do {\n            lVar35 = loopVar2;\n            varIndex = (int)charPointer2;\n            if (varIndex <= (int)lVar35) break;\n            charVar = initialize_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            loopVar2 = lVar35 + 1;\n          } while (charVar != '\\0');\n          charPointer2 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = varIndex - ((int)lVar35 + -1);\n          filePointer1 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (varIndex = getopt_long(filePointer1,charPointer2,\"DhHUvVt\",&PTR_DAT_0010d300), varIndex != -1)\n            {\n              if (varIndex < 0x77) {\n                if (0x43 < varIndex) {\n                  switch(varIndex) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = loopVar;\n                  }\n                }\n              }\n              else if (varIndex == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              print_usage_and_version_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_and_version_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_version_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)charPointer2 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                loopVar = extract_and_print_archive_status_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | loopVar);\n              }\n            }\n            while (loopVar2 = check_file_status_001052a0(pcVar39), loopVar2 < 1) {\n              loopVar = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | loopVar);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)charPointer2 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            varIndex = open(pcVar39,2,0);\n            if (varIndex < 0) {\n              bfd_set_error(1);\n              print_error_and_exit_00107c10(pcVar39);\nLAB_0010737f:\n              print_error_and_exit_00107c10(pcVar39);\nLAB_00107387:\n              print_error_message_00107c20(pcVar39);\n              varIndex = bfd_get_error();\n              if (varIndex == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(undefinedArray[1],undefinedArray[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,undefinedArray);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                loopVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            uVar27 = dcgettext(0,\"%s: no archive map to update\",5);\n            log_error_and_exit_00107690(uVar27,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            size_tVar1 = strlen(pcVar39);\n            if ((size_tVar1 < 6) ||\n               (varIndex = filename_cmp(pcVar39 + (size_tVar1 - 6),\"ranlib\"), varIndex != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer2 = (FILE *)unaff_RBP;\n          filePointer3 = filePointer1;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          filePointer4 = (FILE *)CONCAT71(filePointer4._1_7_,(char)loopVar);\nLAB_001063a3:\n          filePointer2 = (FILE *)unaff_RBP;\n          if (**(char **)((long)charPointer2 + 8) != '-') {\n            undefinedArray[0] = 0x2d;\n            uStack_c6 = 0;\n            size_tVar1 = strlen(*(char **)((long)charPointer2 + 8));\n            varIndex = (int)size_tVar1 + (int)filePointer1;\n            unaff_R12 = (FILE *)xmalloc((long)varIndex * 8);\n            uVar17 = *(undefined4 *)((long)charPointer2 + 4);\n            unaff_R12->_flags = *(int *)charPointer2;\n            *(undefined4 *)&unaff_R12->field_0x4 = uVar17;\n            ppcVar31 = *(char ***)((long)charPointer2 + 8);\n            filePointer5 = (FILE *)((long)charPointer2 + 0x10);\n            charPointerPointer2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePointer3 = undefinedArray;\n              undefinedArray[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                undefinedArray[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(bytePointer3);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  undefinedArray[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(bytePointer3);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    undefinedArray[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(bytePointer3);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    charPointerPointer2 = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        undefinedArray[1] = charVar;\n                        charPointer = (char *)xstrdup(bytePointer3);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = charPointer;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        charPointerPointer2 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            loopVar2 = (long)(int)filePointer1;\n            intPointer = (int *)charPointer2 + loopVar2 * 2;\n            if (filePointer5 < intPointer) {\n              ulongVar1 = loopVar2 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)charPointer2 + 0x18))) {\n                *ppcVar32 = *(char **)((long)charPointer2 + 0x10);\n                if (((char **)((long)charPointer2 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)charPointer2 + 0x18),\n                      (char **)((long)charPointer2 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)charPointer2 + 0x20),\n                      (char **)((long)charPointer2 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)charPointer2 + 0x28),\n                     (char **)((long)charPointer2 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)charPointer2 + 0x30),\n                    (char **)((long)charPointer2 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)charPointer2 + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)charPointer2 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar3 * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)byteVar3 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uVar17 = *(undefined4 *)((long)((long)charPointer2 + 0x10) + 4);\n                uVar6 = *(undefined4 *)((long)charPointer2 + 0x18);\n                uVar7 = *(undefined4 *)((long)((long)charPointer2 + 0x18) + 4);\n                uVar40 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)charPointer2 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uVar17;\n                *(undefined4 *)(ppcVar32 + 1) = uVar6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uVar7;\n                uVar17 = *(undefined4 *)((long)((long)charPointer2 + 0x20) + 4);\n                uVar6 = *(undefined4 *)((long)charPointer2 + 0x28);\n                uVar7 = *(undefined4 *)((long)((long)charPointer2 + 0x28) + 4);\n                ulongVar1 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)charPointer2 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uVar17;\n                *(undefined4 *)(ppcVar32 + 3) = uVar6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uVar7;\n                if (ulongVar1 != 2) {\n                  uVar17 = *(undefined4 *)((long)((long)charPointer2 + 0x30) + 4);\n                  uVar6 = *(undefined4 *)((long)charPointer2 + 0x38);\n                  uVar7 = *(undefined4 *)((long)((long)charPointer2 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)charPointer2 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uVar17;\n                  *(undefined4 *)(ppcVar32 + 5) = uVar6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uVar7;\n                  if (ulongVar1 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)charPointer2 + 0x83) + uVar41 * 0x10 + -0x73;\n                      uVar17 = *(undefined4 *)(pcVar39 + 4);\n                      uVar6 = *(undefined4 *)(pcVar39 + 8);\n                      uVar7 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uVar17;\n                      *(undefined4 *)(ppcVar31 + 1) = uVar6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uVar7;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar1);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePointer5 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + loopVar2 + -2;\n            }\n            filePointer1 = (FILE *)(ulong)(varIndex - 1);\n            *ppcVar32 = (char *)0x0;\n            charPointer2 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            loopVar = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)filePointer1 & 0xffffffff,charPointer2,filePointer2,ppuVar36,0);\n            unaff_RBP = (char *)filePointer2;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePointer3 = (FILE *)charPointer2;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_message_0010342d(0);\n            charPointer2 = (char *)filePointer3;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          filePointer2 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePointer1 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            charPointer2 = (char *)((long)charPointer2 + (long)_optind * 8 + -8);\n            loopVar = (int)filePointer1 - (_optind + -1);\n            filePointer1 = (FILE *)(ulong)loopVar;\n            _optind = 0;\n            if (1 < (int)loopVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)filePointer4 & 0xff);\n          loopVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)charPointer2 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_version_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePointer3 = (FILE *)charPointer2;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  uVar17 = extract_and_print_archive_status_00107650();\n                    \n                  xexit(uVar17);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  varIndex = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)varIndex * 2 * 4) == (char *)0x0) {\n                    uVar27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    log_error_and_exit_00107690(uVar27);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(varIndex + 1);\n                  loopVar2 = strtol(*(char **)((long)ppuVar36 + (long)varIndex * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)loopVar2;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              loopVar2 = (long)(int)unaff_RBP;\n              filePointer2 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + loopVar2 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer2 = (FILE *)((long)ppuVar36 + (loopVar2 + 1) * 2 * 4);\n              if (*(FILE **)filePointer2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (loopVar2 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (loopVar2 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (loopVar2 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (loopVar2 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer1 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer1;\n                  filePointer1 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + loopVar2 * 2 * 4) + (long)filePointer1 * 2) !=\n                         0);\n              }\n              undefined8Pointer2 = (undefined8 *)extract_archived_files_00105300();\n              filePointer1 = filePointer2;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer2 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePointer2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_entries_00105480(undefined8Pointer2,extract_archive_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_tVar1 = strlen(DAT_0010d628);\n                charPointer2 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(size_tVar1 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Pointer2);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  loopVar2 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (loopVar2 != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    filePointer3 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePointer3 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    loopVar2 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (loopVar2 == 0) goto LAB_00106803;\n                    varIndex = (int)pcVar43;\n                    filePointer4 = (FILE *)((long)(varIndex + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(filePointer4,\"Cannot reset libdeps record type.\");\n                    if (varIndex == 0) {\n                      loopVar2 = 0;\n                    }\n                    else {\n                      uVar17 = *(undefined4 *)&filePointer2->field_0x4;\n                      *(int *)unaff_RBP = filePointer2->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = uVar17;\n                      loopVar2 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = filePointer4[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer2->_flags;\n                        filePointer2 = (FILE *)((long)filePointer2 + (ulong)byteVar3 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar3 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + loopVar2) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(varIndex + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)filePointer4) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer2 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)filePointer2;\n                if (filePointer2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePointer2;\n                if ((filePointer2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_and_print_archived_files_00105570(undefined8Pointer2,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePointer2;\nswitchD_00106ed8_caseD_3:\n                process_entries_00105480(undefined8Pointer2,log_file_data_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePointer2;\nswitchD_00106ed8_caseD_4:\n                process_entries_00105480(undefined8Pointer2,extract_and_print_archive_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer1 = (FILE *)(undefined8Pointer2 + 0x1e);\n                do {\n                  unaff_R12 = filePointer1;\n                  if (*(FILE **)filePointer2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_and_print_archive_information_001058b0(undefined8Pointer2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer2 = *(long **)unaff_R12;\n                    charPointer2 = *(char **)filePointer2;\n                    if (longPointer2 == (long *)0x0) {\n                      uVar27 = *undefined8Pointer2;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      log_error_and_exit_00107690(uVar30,charPointer2,uVar27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    loopVar2 = *longPointer2;\n                    uVar27 = extract_substring_00105830(charPointer2,undefined8Pointer2);\n                    varIndex = filename_cmp(uVar27,loopVar2);\n                    if (varIndex == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer2[0x1e];\n                  pplVar29 = (long **)find_file_in_list_00105870(filePointer1,3,0);\n                  boolVar3 = DAT_0010d60c != 0;\n                  longPointer = *pplVar29;\n                  *pplVar29 = longPointer2;\n                  longPointer2[0x1e] = (long)longPointer;\n                  if (boolVar3) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer2);\n                  }\n                  filePointer2 = (FILE *)&filePointer2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_message_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          varIndex = fileno(_stdin);\n          _DAT_0010d608 = isatty(varIndex);\n          parse_binary_data_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uVar17 = bfd_get_error();\n        filePointer2 = (FILE *)bfd_errmsg(uVar17);\n        uVar27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        varIndex = log_error_and_exit_00107690(uVar27,\"x86_64-pc-linux-gnu\",filePointer2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          filePointer3 = (FILE *)charPointer2;\n          switch(varIndex) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            loopVar = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePointer2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePointer2;\nLAB_00106803:\n        uVar27 = dcgettext(0,pcVar39,5);\n        log_error_and_exit_00107690(uVar27);\nLAB_00106814:\n        varIndex = (int)charPointer2;\n        filePointer3 = (FILE *)xmalloc(8);\n        *(long **)filePointer3 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            varIndex = 0;\n          }\n          else {\n            loopVar2 = 1;\n            do {\n              varIndex = (int)loopVar2;\n              lVar35 = loopVar2 * 2;\n              loopVar2 = loopVar2 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          filePointer2 = (FILE *)xmalloc((long)(varIndex + 1) << 3);\n          longPointer2 = *(long **)pcVar43;\n          loopVar2 = 0;\n          while (longPointer2 != (long *)0x0) {\n            uVar27 = xstrdup();\n            *(undefined8 *)((long)&filePointer2->_flags + loopVar2) = uVar27;\n            longPointer2 = *(long **)((char *)((long)pcVar43 + 0x83) + loopVar2 + -0x7b);\n            loopVar2 = loopVar2 + 8;\n          }\n          *(undefined8 *)((long)&filePointer2->_flags + loopVar2) = 0;\nLAB_0010610a:\n          varIndex = (int)charPointer2;\n          pcVar43 = (char *)filePointer2;\n          if (*(long **)filePointer3 == (long *)0x0) goto LAB_00106a80;\n          loopVar2 = 0;\n          do {\n            lVar34 = loopVar2 + 1;\n            lVar35 = loopVar2 * 8;\n            loopVar2 = lVar34;\n          } while (*(long *)(filePointer3->_shortbuf + lVar35 + -0x7b) != 0);\n          size_tVar3 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          size_tVar3 = 0;\n        }\n        loopVar2 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + loopVar2));\n        filePointer2 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)varIndex) * 8);\n        uVar44 = varIndex + -1 + (int)lVar34;\n        charPointer2 = (char *)(ulong)uVar44;\n        memmove(&filePointer2->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePointer2->_IO_read_ptr + (long)filePointer4),\n                (long)(int)(varIndex - loopVar) << 3);\n        memcpy((void *)((long)&filePointer4->_flags + (long)&filePointer2->_flags),filePointer3,size_tVar3);\n        free(filePointer3);\n        free(bytePointer3);\n        fclose(filePointer1);\n        loopVar = (int)filePointer5 + 1;\n        unaff_R12 = filePointer4;\n        pcVar43 = (char *)filePointer2;\n        filePointer4 = filePointer3;\n        if ((int)loopVar < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    loopVar = loopVar + 1;\n    filePointer5 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)loopVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  varIndex = getopt_long((ulong)filePointer1 & 0xffffffff,charPointer2,filePointer2,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePointer2;\n  if (varIndex == -1) goto LAB_00106680;\n  if ((0x14 < varIndex - 100U) || ((0x117201UL >> ((byte)(varIndex - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  uVar27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  log_error_message_00107920(uVar27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePointer1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  varIndex2 = 0;\n  varIndex = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer2;\n  if (varIndex == 0) {\n    *(byte *)((long)undefined8Pointer2 + 0x49) = *(byte *)((long)undefined8Pointer2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer2 = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer2 == (undefined8 *)0x0) break;\n      uVar27 = *(undefined8 *)*longPointer2;\n      uVar30 = extract_substring_00105830(*(FILE **)unaff_RBP,undefined8Pointer2);\n      varIndex = filename_cmp(uVar30,uVar27);\n      if ((varIndex == 0) &&\n         ((DAT_0010d634 == '\\0' || (varIndex2 = varIndex2 + 1, varIndex2 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *longPointer2 = *(long *)(*longPointer2 + 0xf0);\n        filePointer1 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer2;\n    }\n    if (DAT_0010d60c != 0) {\n      filePointer2 = *(FILE **)unaff_RBP;\n      charPointer2 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(charPointer2,filePointer2);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "fseek",
                "ftell",
                "fread",
                "memcpy",
                "FUN_00107cc0",
                "bfd_make_writable",
                "bfd_check_format_matches",
                "free",
                "setlocale",
                "FUN_00105830",
                "memmove",
                "FUN_00107c20",
                "bfd_make_readable",
                "FUN_00107640",
                "xexit",
                "FUN_0010394a",
                "FUN_00107890",
                "textdomain",
                "printf",
                "FUN_00103a78",
                "bfd_find_target",
                "isatty",
                "FUN_001052a0",
                "open",
                "bindtextdomain",
                "FUN_00103e95",
                "bfd_close",
                "stat",
                "strcmp",
                "bfd_create",
                "malloc",
                "bfd_plugin_set_program_name",
                "getopt_long",
                "bfd_set_format",
                "strtol",
                "xrealloc",
                "lbasename",
                "FUN_00107920",
                "FUN_0010342d",
                "fprintf",
                "bfd_set_error_program_name",
                "dcgettext",
                "bfd_get_error",
                "FUN_00103bd1",
                "filename_cmp",
                "bfd_fdopenr",
                "FUN_00105870",
                "bfd_set_error",
                "FUN_00107740",
                "bfd_set_default_target",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "FUN_00105300",
                "bfd_init",
                "ferror",
                "fileno",
                "fopen",
                "FUN_001058b0",
                "FUN_00105480",
                "bfd_bwrite",
                "FUN_00107c10",
                "FUN_00107730",
                "FUN_00107650",
                "bfd_plugin_set_plugin",
                "FUN_00107690",
                "xstrdup",
                "FUN_001075e0",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formats",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formats)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  data = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "print_error_and_exit_00107c10",
                "print_error_message_00107c20": "print_error_message",
                "xexit": "exit_function"
            },
            "code": "\nvoid print_error_and_exit_00107c10(void)\n\n{\n  print_error_message();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "lVar5": "bfd_handle",
                "plVar1": "archived_file",
                "cVar2": "format_checked",
                "bVar3": "is_thin",
                "iVar4": "error_code",
                "uVar6": "error_message_1",
                "uVar7": "error_message_2",
                "puVar8": "output_handle",
                "in_stack_00000008": "context"
            },
            "code": "\n\n\nundefined8 * extract_archived_files_00102710(void)\n\n{\n  long *archived_file;\n  char format_checked;\n  byte is_thin;\n  int error_code;\n  long bfd_handle;\n  undefined8 error_message_1;\n  undefined8 error_message_2;\n  undefined8 *output_handle;\n  undefined8 unaff_RBP;\n  undefined8 context;\n  \n  bfd_handle = bfd_openr();\n  if (bfd_handle != 0) {\n    format_checked = bfd_check_format(bfd_handle,1);\n    if (format_checked != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(bfd_handle + 8);\n    }\n    bfd_close(bfd_handle);\n  }\n  output_handle = (undefined8 *)bfd_openw();\n  if (((output_handle != (undefined8 *)0x0) && (format_checked = bfd_set_format(output_handle,2), format_checked != '\\0')) &&\n     (format_checked = bfd_close(output_handle), format_checked != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  print_error_and_exit_00107c10();\n  do {\n    is_thin = *(byte *)((long)output_handle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin != 0) {\n        error_message_2 = *output_handle;\n        error_message_1 = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        log_error_and_exit_00107690(error_message_1,error_message_2);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin == 0) {\n      error_message_2 = *output_handle;\n      error_message_1 = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      log_error_and_exit_00107690(error_message_1,error_message_2);\nLAB_001027cb:\n      print_error_message_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(context);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archived_file = output_handle + 0x1e;\n      for (bfd_handle = bfd_openr_next_archived_file(output_handle,0); bfd_handle != 0;\n          bfd_handle = bfd_openr_next_archived_file(output_handle,bfd_handle)) {\n        *archived_file = bfd_handle;\n        archived_file = (long *)(bfd_handle + 0xf0);\n      }\n      *archived_file = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_handle;\n      }\n      do {\n        print_error_and_exit_00107c10();\nLAB_00102826:\n        error_message_2 = dcgettext(0,\"creating %s\",5);\n        log_error_message_00107920(error_message_2);\nLAB_001053b7:\n        DAT_0010d618 = unaff_RBP;\n        output_handle = (undefined8 *)bfd_openr();\n      } while (output_handle == (undefined8 *)0x0);\n      format_checked = bfd_check_format_matches(output_handle,2,&stack0x00000008);\n      if (format_checked == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (bfd_handle = bfd_openr_next_archived_file(output_handle,0), bfd_handle == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "parse_binary_data_00103e95",
                "ppFVar3": "filePointer",
                "pplVar1": "pointerPointer",
                "cVar2": "character",
                "ppcVar29": "stringArray",
                "pFVar4": "filePointer",
                "plVar5": "pointerLong",
                "uVar6": "ulongVar",
                "pbVar7": "bytePointer",
                "iVar8": "integerVar",
                "pcVar10": "charVar",
                "uVar11": "uintVar",
                "iVar9": "integerVar",
                "plVar12": "pointerLong",
                "sVar13": "sizeVar",
                "pvVar14": "pointerVar",
                "lVar17": "longVar",
                "lVar18": "longVar",
                "lVar21": "longVar",
                "puVar22": "pointerUlong",
                "puVar23": "pointerUlong",
                "uVar24": "uintVar",
                "iVar25": "integerVar",
                "uVar26": "ulongVar",
                "ppcVar27": "stringPointerPointer",
                "bVar28": "booleanVar",
                "bVar30": "byteVar",
                "lVar31": "longVar",
                "pbVar32": "bytePointer",
                "pbVar33": "bytePointer",
                "piVar34": "integerPointer",
                "pbVar35": "bytePointer",
                "iVar37": "integerVar",
                "bVar39": "byteVar",
                "auVar41": "auxiliaryVar",
                "local_828": "localArray",
                "local_820": "localArray",
                "local_818": "localLong",
                "local_810": "localArray",
                "local_800": "localInteger",
                "local_7fc": "localUint",
                "local_7f8": "localBytePointer",
                "local_7d0": "localStruct",
                "local_740": "localCharArray",
                "local_678": "localStringArray"
            },
            "code": "\n\n\nvoid parseBinaryData_00103e95(void)\n\n{\n  long **pointerPointer;\n  char character;\n  FILE **filePointer;\n  FILE *filePointer;\n  long *pointerLong;\n  undefined8 ulongVar;\n  byte *bytePointer;\n  int integerVar;\n  char *charVar;\n  undefined8 uintVar;\n  int integerVar;\n  long *pointerLong;\n  size_t sizeVar;\n  void *pointerVar;\n  char *pcVar15;\n  char *pcVar16;\n  long longVar;\n  long longVar;\n  ulong uVar19;\n  uint uVar20;\n  long longVar;\n  undefined8 *pointerUlong;\n  undefined8 *pointerUlong;\n  uint uintVar;\n  int integerVar;\n  ulong ulongVar;\n  char **stringPointerPointer;\n  bool booleanVar;\n  char **stringArray;\n  byte byteVar;\n  long longVar;\n  byte *bytePointer;\n  byte *bytePointer;\n  int *integerPointer;\n  byte *bytePointer;\n  uint uVar36;\n  int integerVar;\n  char **ppcVar38;\n  byte byteVar;\n  undefined auVar40 [16];\n  undefined auxiliaryVar [16];\n  char *localArray;\n  char *localArray;\n  long localLong;\n  char **localArray;\n  int localInteger;\n  uint localUint;\n  byte *localBytePointer;\n  stat localStruct;\n  char localCharArray [200];\n  char *localStringArray [201];\n  \n  byteVar = 0;\n  longVar = 0;\n  DAT_0010d550 = -2;\n  stringArray = localStringArray;\n  localInteger = 0;\n  localArray = localCharArray;\n  localLong = 200;\n  localArray = localArray;\n  localArray = stringArray;\nLAB_00103ee9:\n  *localArray = (char)longVar;\n  if (localArray + localLong + -1 <= localArray) {\n    longVar = (long)localArray - (long)localArray;\n    longVar = longVar + 1;\n    if (localLong < 10000) {\n      longVar = localLong * 2;\n      localLong = 10000;\n      if (longVar < 0x2711) {\n        localLong = longVar;\n      }\n      charVar = (char *)malloc(localLong * 9 + 7);\n      if (charVar != (char *)0x0) {\n        longVar = longVar * 8;\n        pcVar15 = localArray;\n        pcVar16 = charVar;\n        for (; longVar != 0; longVar = longVar + -1) {\n          *pcVar16 = *pcVar15;\n          pcVar15 = pcVar15 + (ulong)byteVar * -2 + 1;\n          pcVar16 = pcVar16 + (ulong)byteVar * -2 + 1;\n        }\n        ppcVar38 = (char **)(charVar + localLong);\n        stringArray = ppcVar38;\n        for (; longVar != 0; longVar = longVar + -1) {\n          *(undefined *)stringArray = *(undefined *)localArray;\n          localArray = (char **)((long)localArray + (ulong)byteVar * -2 + 1);\n          stringArray = (char **)((long)stringArray + (ulong)byteVar * -2 + 1);\n        }\n        if (localArray != localCharArray) {\n          free(localArray);\n        }\n        localArray = charVar + longVar;\n        stringArray = ppcVar38 + longVar;\n        localArray = charVar;\n        localArray = ppcVar38;\n        if (charVar + localLong + -1 <= localArray) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    display_syntax_error_001031a5();\nLAB_0010524c:\n    charVar = localArray;\n    if (localArray == localCharArray) {\n      return;\n    }\nLAB_00105265:\n    free(charVar);\n    return;\n  }\nLAB_00103fd8:\n  integerVar = (int)longVar;\n  if (integerVar == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[integerVar];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          pointerUlong = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uintVar = create_buffer_001033d6(DAT_0010d590);\n          *pointerUlong = uintVar;\n        }\n        extract_data_from_binary_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      bytePointer = DAT_0010d5b0;\n      bytePointer = DAT_0010d5b0;\n      uVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)uVar20;\n      ulongVar = (ulong)localUint;\n      booleanVar = false;\n      do {\n        byteVar = (&DAT_0010ab00)[*bytePointer];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          booleanVar = true;\n          ulongVar = uVar19 & 0xffffffff;\n          localBytePointer = bytePointer;\n        }\n        while( true ) {\n          integerVar = (int)uVar19;\n          longVar = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integerVar * 2) + (uint)byteVar);\n          if (integerVar == *(short *)(&DAT_0010a440 + longVar * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integerVar * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integerVar * 2)) {\n            byteVar = (&DAT_0010a7c0)[(int)(uint)byteVar];\n          }\n        }\n        bytePointer = bytePointer + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + longVar * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      localUint = (uint)ulongVar;\n      bytePointer = bytePointer;\n      if (booleanVar) {\n        DAT_0010d5b8 = localBytePointer;\n        DAT_0010d5c0 = localUint;\n      }\nLAB_0010419f:\n      integerVar = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (integerVar == 0) {\n        integerVar = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        bytePointer = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)bytePointer - (int)bytePointer;\n      DAT_0010d588 = *bytePointer;\n      DAT_0010d5b0 = bytePointer;\n      DAT_0010d5c8 = bytePointer;\n      *bytePointer = 0;\nLAB_001041f0:\n      bytePointer = DAT_0010d5c8;\n      longVar = DAT_0010d5a0;\n      switch(integerVar) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_error_message_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      longVar = (long)integerVar;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        integerVar = 2;\n        if (DAT_0010d550 < 0x114) {\n          integerVar = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    integerVar = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uVar20 = character + integerVar;\n    if ((0x22 < uVar20) || (integerVar != (char)(&DAT_0010a0a0)[(int)uVar20])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)uVar20];\n    longVar = (long)character;\n    if (character < '\\x01') {\n      integerVar = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    localInteger = localInteger + -1 + (uint)(localInteger == 0);\n    stringArray = stringArray + 1;\n    *stringArray = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  integerVar = (int)(char)(&DAT_0010a020)[(int)longVar];\n  if ((&DAT_0010a020)[(int)longVar] == '\\0') {\n    if (localInteger == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      display_syntax_error_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[longVar] != -0xe) &&\n             (uVar20 = (int)(char)(&DAT_0010a200)[longVar] + 1, uVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uVar20] == '\\x01')) &&\n           (longVar = (long)(char)(&DAT_0010a060)[(int)uVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uVar20])) goto LAB_00105227;\n        if (localArray == localArray) goto LAB_0010524c;\n        localArray = localArray + -1;\n        stringArray = stringArray + -1;\n        longVar = (long)*localArray;\n      } while( true );\n    }\n    if (localInteger != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uintVar = DAT_0010d660;\n  stringPointerPointer = DAT_0010d558;\n  character = (&DAT_00109fe0)[integerVar];\n  ppcVar38 = (char **)stringArray[1 - character];\n  switch(integerVar) {\n  case 2:\n  case 6:\n    check_ar_status_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    display_syntax_error_001031a5();\n    break;\n  case 0x17:\n    pointerUlong = (undefined8 *)*stringArray;\n    if (DAT_0010d558 == (char **)0x0) {\n      charVar = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charVar = (char *)dcgettext(0,charVar,5);\n      fprintf(_stderr,charVar,uintVar);\n      check_and_exit_if_zero_0010315d();\n    }\n    else {\n      for (; pointerUlong != (undefined8 *)0x0; pointerUlong = (undefined8 *)pointerUlong[1]) {\n        for (pointerUlong = (undefined8 *)DAT_0010d558[0x1f]; pointerUlong != (undefined8 *)0x0;\n            pointerUlong = (undefined8 *)pointerUlong[0x1e]) {\n          integerVar = filename_cmp(*pointerUlong);\n          if (integerVar == 0) {\n            extract_archive_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointerUlong,0);\n        ulongVar = DAT_0010d660;\n        uintVar = *pointerUlong;\n        charVar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar,ulongVar,uintVar);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointerUlong = (undefined8 *)*stringArray;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      charVar = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointerUlong != (undefined8 *)0x0; pointerUlong = (undefined8 *)pointerUlong[1]) {\n      booleanVar = false;\n      stringPointerPointer = DAT_0010d558 + 0x1f;\n      for (charVar = DAT_0010d558[0x1f]; charVar != (char *)0x0;\n          charVar = *(char **)(charVar + 0xf0)) {\n        integerVar = filename_cmp();\n        if (integerVar == 0) {\n          pcVar15 = (char *)bfd_openr(*pointerUlong,0);\n          uintVar = DAT_0010d660;\n          if (pcVar15 == (char *)0x0) {\n            ulongVar = *pointerUlong;\n            pcVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,uintVar,ulongVar);\n            check_and_exit_if_zero_0010315d();\n          }\n          else {\n            *stringPointerPointer = pcVar15;\n            booleanVar = true;\n            *(undefined8 *)(pcVar15 + 0xf0) = *(undefined8 *)(charVar + 0xf0);\n          }\n        }\n        else {\n          stringPointerPointer = (char **)(charVar + 0xf0);\n        }\n      }\n      if (!booleanVar) {\n        charVar = (char *)bfd_openr(*pointerUlong,0);\n        ulongVar = DAT_0010d660;\n        uintVar = *pointerUlong;\n        pcVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,ulongVar,uintVar);\n        uintVar = DAT_0010d660;\n        if (charVar == (char *)0x0) {\n          ulongVar = *pointerUlong;\n          charVar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charVar,uintVar,ulongVar);\n          check_and_exit_if_zero_0010315d();\n        }\n        else {\n          *stringPointerPointer = charVar;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointerUlong = (undefined8 *)*stringArray;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerUlong != (undefined8 *)0x0; pointerUlong = (undefined8 *)pointerUlong[1]) {\n      booleanVar = false;\n      stringPointerPointer = DAT_0010d558 + 0x1f;\n      for (pointerUlong = (undefined8 *)DAT_0010d558[0x1f]; uintVar = DAT_0010d660,\n          pointerUlong != (undefined8 *)0x0; pointerUlong = (undefined8 *)pointerUlong[0x1e]) {\n        integerVar = filename_cmp(*pointerUlong,*pointerUlong);\n        if (integerVar == 0) {\n          booleanVar = true;\n          *stringPointerPointer = (char *)pointerUlong[0x1e];\n        }\n        else {\n          stringPointerPointer = (char **)(pointerUlong + 0x1e);\n        }\n      }\n      if (!booleanVar) {\n        ulongVar = *pointerUlong;\n        charVar = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar,uintVar,ulongVar);\n        check_and_exit_if_zero_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointerUlong = (undefined8 *)*stringArray;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointerUlong != (undefined8 *)0x0; pointerUlong = (undefined8 *)pointerUlong[1]) {\n      charVar = (char *)bfd_openr(*pointerUlong,\"plugin\");\n      uintVar = DAT_0010d660;\n      stringPointerPointer = DAT_0010d558;\n      if (charVar == (char *)0x0) {\n        ulongVar = *pointerUlong;\n        charVar = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charVar,uintVar,ulongVar);\n        check_and_exit_if_zero_0010315d();\n      }\n      else {\n        *(char **)(charVar + 0xf0) = DAT_0010d558[0x1f];\n        stringPointerPointer[0x1f] = charVar;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    charVar = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pcVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,charVar);\n    for (charVar = DAT_0010d558[0x1f]; charVar != (char *)0x0; charVar = *(char **)(charVar + 0xf0))\n    {\n      log_data_to_file_00103ddc(charVar,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(stringPointerPointer);\n    charVar = DAT_0010d570;\n    integerVar = stat(DAT_0010d570,&localStruct);\n    if ((integerVar != 0) && (DAT_0010d558 = (char **)bfd_openw(charVar,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_delete_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    process_binary_00103c60(*stringArray,0);\n    break;\n  case 0x1f:\n    process_binary_00103c60(*stringArray,1);\n    break;\n  case 0x20:\n    charVar = *stringArray;\n    if (DAT_0010d558 == (char **)0x0) {\n      charVar = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar = extract_archived_files_00105300(stringArray[-1],0);\n    if (longVar != 0) {\n      extract_archive_entries_001032a8(longVar,copy_data_to_destination_0010312d,charVar);\n    }\n    break;\n  case 0x21:\n    charVar = *stringArray;\n    pcVar15 = stringArray[-1];\n    uintVar = extract_archived_files_00105300(stringArray[-2],0);\n    if (charVar == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(charVar,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        extract_archive_entries_001032a8(uintVar,log_data_to_file_00103ddc,pcVar15);\n        bfd_close(uintVar);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pcVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,charVar);\n    }\n    extract_archive_entries_001032a8(uintVar,log_data_to_file_00103ddc,pcVar15);\n    bfd_close(uintVar);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*stringArray;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)stringArray[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    charVar = stringArray[-2];\n    *ppcVar38 = *stringArray;\n    ppcVar38[1] = charVar;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  longVar = (long)character;\n  localArray = localArray + -longVar;\n  stringArray[1 - longVar] = (char *)ppcVar38;\n  stringArray = stringArray + (1 - longVar);\n  uVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[integerVar] + -0x18] + (int)*localArray;\n  if ((uVar20 < 0x23) && (*localArray == (&DAT_0010a0a0)[(int)uVar20])) {\n    longVar = (long)(char)(&DAT_0010a060)[(int)uVar20];\n  }\n  else {\n    longVar = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[integerVar] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integerVar = ((int)bytePointer - (int)DAT_0010d5c8) + -1;\n  *bytePointer = DAT_0010d588;\n  pointerPointer = (long **)(DAT_0010d5a8 + longVar * 8);\n  filePointer = (FILE **)*pointerPointer;\n  if (*(int *)(filePointer + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)filePointer + 0x1c);\n    *(undefined4 *)(filePointer + 7) = 1;\n    *filePointer = DAT_0010d590;\n  }\n  bytePointer = DAT_0010d5b0;\n  filePointer = filePointer[1];\n  auVar40._8_8_ = filePointer;\n  auVar40._0_8_ = filePointer;\n  if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&filePointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = print_error_message_and_exit_001033b0();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uVar20 = (int)((long)bytePointer - (long)bytePointer) - 1;\n      for (longVar = 0; (int)longVar < (int)uVar20; longVar = longVar + 1) {\n        *(byte *)(auVar40._8_8_ + longVar) = bytePointer[longVar];\n      }\n      pointerLong = *pointerPointer;\n      if (*(int *)(pointerLong + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointerLong + 0x1c) = 0;\nLAB_0010475e:\n        filePointer = DAT_0010d590;\n        if (uVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            pointerUlong = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uintVar = create_buffer_001033d6(filePointer);\n            *pointerUlong = uintVar;\n          }\n          longVar = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            longVar = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integerVar = 1;\n          initialize_file_001031cf(longVar);\n          extract_data_from_binary_001030ed();\n        }\n        else {\n          integerVar = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointerLong = *pointerPointer;\n          uintVar = ~uVar20 + *(int *)(pointerLong + 3);\n          if (0 < (int)uintVar) break;\n          uintVar = (int)DAT_0010d5b0 - (int)(void *)pointerLong[1];\n          if (*(int *)(pointerLong + 4) == 0) {\n            pointerLong[1] = 0;\nLAB_00104626:\n            print_error_message_and_exit_001033b0();\n            break;\n          }\n          integerVar = *(int *)(pointerLong + 3);\n          integerVar = integerVar;\n          if (integerVar < 1) {\n            integerVar = integerVar / 8;\n          }\n          *(int *)(pointerLong + 3) = integerVar + integerVar;\n          pointerVar = realloc((void *)pointerLong[1],(long)(integerVar + integerVar + 2));\n          pointerLong[1] = (long)pointerVar;\n          if (pointerVar == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pointerVar + (long)(int)uintVar);\n          pointerLong = *pointerPointer;\n        }\n        if (0x2000 < (int)uintVar) {\n          uintVar = 0x2000;\n        }\n        ulongVar = (ulong)uintVar;\n        if (*(int *)((long)pointerLong + 0x24) == 0) {\n          integerPointer = __errno_location();\n          ulongVar = (ulong)(int)uintVar;\n          uVar19 = (ulong)(int)uVar20;\n          *integerPointer = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        integerPointer = (int *)(long)(int)uVar20;\n        do {\n          integerVar = getc(DAT_0010d590);\n          uVar36 = (uint)uVar19;\n          if (integerVar == -1) {\n            integerVar = ferror(DAT_0010d590);\n            uintVar = uVar36;\n            if (integerVar != 0) {\n              do {\n                charVar = \"input in flex scanner failed\";\n                print_error_message_and_exit_001033b0();\n                do {\n                  *integerPointer = 0;\n                  clearerr((FILE *)charVar);\nLAB_001046c7:\n                  sizeVar = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,ulongVar,DAT_0010d590);\n                  charVar = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sizeVar;\n                  uintVar = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integerVar = ferror(DAT_0010d590), uintVar = DAT_0010d598, integerVar == 0))\n                  goto LAB_00104738;\n                } while (*integerPointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integerVar == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uintVar = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)integerPointer) =\n               (char)integerVar;\n          integerPointer = (int *)((long)integerPointer + 1);\n        } while (uintVar != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uintVar;\n        uintVar = DAT_0010d598;\n        integerVar = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uintVar == 0) goto LAB_0010475e;\n      }\n      pointerLong = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      longVar = *pointerLong;\n      uVar20 = uVar20 + DAT_0010d598;\n      if (*(int *)(longVar + 0x18) < (int)uVar20) {\n        integerVar = ((int)DAT_0010d598 >> 1) + uVar20;\n        pointerVar = realloc(*(void **)(longVar + 8),(long)integerVar);\n        *(void **)(longVar + 8) = pointerVar;\n        auxiliaryVar._8_8_ = pointerLong;\n        auxiliaryVar._0_8_ = *pointerLong;\n        if (*(long *)(*pointerLong + 8) == 0) {\n          auxiliaryVar = print_error_message_and_exit_001033b0();\n        }\n        pointerLong = auxiliaryVar._8_8_;\n        *(int *)(auxiliaryVar._0_8_ + 0x18) = integerVar + -2;\n      }\n      DAT_0010d598 = uVar20;\n      *(undefined *)(*(long *)(*pointerLong + 8) + (long)(int)uVar20) = 0;\n      *(undefined *)(*(long *)(*pointerLong + 8) + 1 + (long)(int)uVar20) = 0;\n      bytePointer = *(byte **)(*pointerLong + 8);\n      DAT_0010d5c8 = bytePointer;\n      if (integerVar == 1) goto LAB_001048a4;\n      if (integerVar == 2) goto LAB_001048ca;\n      bytePointer = bytePointer + integerVar;\n      DAT_0010d5b0 = bytePointer;\n      uVar20 = find_matching_values_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)bytePointer - (long)bytePointer == 1) goto LAB_001048a4;\nLAB_001048ca:\n    bytePointer = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = bytePointer;\n    uVar19 = find_matching_values_0010300e();\n    bytePointer = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  bytePointer = bytePointer + integerVar;\n  DAT_0010d5b0 = bytePointer;\n  uVar19 = find_matching_values_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = bytePointer;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  ulongVar = uVar19 & 0xffffffff;\n  while( true ) {\n    integerVar = (int)ulongVar;\n    if (integerVar == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integerVar * 2) + 1) * 2)) break;\n    ulongVar = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integerVar * 2);\n  }\n  uVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integerVar * 2) + 1) * 2);\n  bytePointer = bytePointer;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integerVar * 2) + 1) * 2) == 0)\n     || (uVar20 == 0xb0)) goto LAB_0010419f;\n  bytePointer = bytePointer + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integerVar = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *bytePointer = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  bytePointer = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  stringArray = stringArray + 1;\n  localInteger = 3;\n  *stringArray = DAT_0010d548;\nLAB_001049d1:\n  localArray = localArray + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00103c60",
                "filename_cmp",
                "FUN_001033d6",
                "bfd_openw",
                "FUN_001031cf",
                "FUN_00107740",
                "fread",
                "FUN_00105300",
                "FUN_001030ed",
                "FUN_00105bc0",
                "free",
                "ferror",
                "dup",
                "fwrite",
                "printf",
                "FUN_0010315d",
                "fopen",
                "bfd_close",
                "stat",
                "clearerr",
                "FUN_00103df9",
                "malloc",
                "FUN_0010312d",
                "FUN_001031a5",
                "FUN_0010300e",
                "realloc",
                "FUN_00103ba8",
                "bfd_cache_close",
                "xstrdup",
                "FUN_001033b0",
                "bfd_openr",
                "bfd_set_format",
                "FUN_00103ddc",
                "fprintf",
                "fclose",
                "dcgettext",
                "FUN_001032a8",
                "unlink",
                "__errno_location",
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "parse_binary_data_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00102c25",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_code_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionList",
                "uVar5": "count"
            },
            "code": "\nvoid executeCode_00107cc0(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionList;\n  uint count;\n  \n  functionList = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)count) {\n        currentIndex = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionList[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionList[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionList[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[currentIndex])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_code_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_archived_files_00105ae0",
                "param_1": "archive_path",
                "param_2": "output_dir",
                "param_3": "option_1",
                "param_4": "option_2"
            },
            "code": "\nvoid process_archived_files_00105ae0(undefined8 archive_path,undefined8 output_dir,undefined option_1,undefined option_2)\n\n{\n  process_archived_files_00105ae0_00105af0(archive_path,output_dir,option_1,option_2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "log_error_and_exit_00107690",
                "param_1": "message",
                "param_2": "code_1",
                "param_3": "code_2",
                "param_4": "code_3",
                "param_5": "code_4",
                "param_6": "code_5",
                "param_7": "code_6",
                "param_8": "code_7",
                "param_9": "error_handle",
                "param_10": "log_param_1",
                "param_11": "log_param_2",
                "param_12": "log_param_3",
                "param_13": "log_param_4",
                "param_14": "log_param_5",
                "in_AL": "input_flag",
                "local_d8": "buffer_size",
                "local_d4": "local_var_1",
                "local_d0": "local_buffer_1",
                "local_c8": "local_buffer_2",
                "local_b8": "local_buffer_3",
                "local_b0": "log_param_6",
                "local_a8": "log_param_7",
                "local_a0": "log_param_8",
                "local_98": "log_param_9",
                "local_90": "log_param_10",
                "local_88": "log_param_11",
                "local_78": "log_param_12",
                "local_68": "log_param_13",
                "local_58": "log_param_14",
                "local_48": "log_param_15",
                "local_38": "log_param_16",
                "local_28": "log_param_17",
                "local_18": "log_param_18"
            },
            "code": "\nvoid log_error_and_exit_00107690(undefined4 message,undefined4 code_1,undefined4 code_2,undefined4 code_3,\n                 undefined4 code_4,undefined4 code_5,undefined4 code_6,undefined4 code_7,\n                 undefined8 error_handle,undefined8 log_param_1,undefined8 log_param_2,undefined8 log_param_3,\n                 undefined8 log_param_4,undefined8 log_param_5)\n\n{\n  char input_flag;\n  undefined4 buffer_size;\n  undefined4 local_var_1;\n  undefined *local_buffer_1;\n  undefined *local_buffer_2;\n  undefined local_buffer_3 [8];\n  undefined8 log_param_6;\n  undefined8 log_param_7;\n  undefined8 log_param_8;\n  undefined8 log_param_9;\n  undefined8 log_param_10;\n  undefined4 log_param_11;\n  undefined4 log_param_12;\n  undefined4 log_param_13;\n  undefined4 log_param_14;\n  undefined4 log_param_15;\n  undefined4 log_param_16;\n  undefined4 log_param_17;\n  undefined4 log_param_18;\n  \n  if (input_flag != '\\0') {\n    log_param_11 = message;\n    log_param_12 = code_1;\n    log_param_13 = code_2;\n    log_param_14 = code_3;\n    log_param_15 = code_4;\n    log_param_16 = code_5;\n    log_param_17 = code_6;\n    log_param_18 = code_7;\n  }\n  local_buffer_1 = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer_2 = local_buffer_3;\n  local_var_1 = 0x30;\n  log_param_6 = log_param_1;\n  log_param_7 = log_param_2;\n  log_param_8 = log_param_3;\n  log_param_9 = log_param_4;\n  log_param_10 = log_param_5;\n  log_error_message_001078c0(error_handle,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00102c25",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "log_error_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "targetName",
                "param_2": "outputFile",
                "lVar1": "targetId",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPointer"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long targetName,FILE *outputFile)\n\n{\n  long targetId;\n  char *message;\n  long *targetList;\n  long *targetPointer;\n  \n  if (targetName == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPointer = targetList;\n  while( true ) {\n    targetId = *targetPointer;\n    targetPointer = targetPointer + 1;\n    if (targetId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "bfd_target_list",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010394a",
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_substring_00105830",
                "param_1": "inputString",
                "param_2": "structAddress",
                "param_3": "unused1",
                "param_4": "unused2",
                "lVar1": "structValue1",
                "sVar2": "inputStringLength",
                "__s": "programName",
                "uVar3": "byteValue",
                "pcVar4": "outputString",
                "bVar5": "byteFlag",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractSubstring_00105830(char *inputString,long structAddress,undefined8 unused1,undefined8 unused2)\n\n{\n  long structValue1;\n  size_t inputStringLength;\n  char *programName;\n  ulong byteValue;\n  char *outputString;\n  byte byteFlag;\n  undefined result [16];\n  \n  byteFlag = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    programName = (char *)lbasename();\n    inputString = programName;\n    if ((DAT_0010d5fa != '\\0') && (structAddress != 0)) {\n      inputStringLength = strlen(programName);\n      byteValue = (ulong)*(byte *)(*(long *)(structAddress + 8) + 0x1e);\n      if (byteValue < inputStringLength) {\n        inputString = (char *)xmalloc(byteValue + 1);\n        structValue1 = *(long *)(structAddress + 8);\n        outputString = inputString;\n        for (byteValue = (ulong)*(byte *)(structValue1 + 0x1e); byteValue != 0; byteValue = byteValue - 1) {\n          *outputString = *programName;\n          programName = programName + (ulong)byteFlag * -2 + 1;\n          outputString = outputString + (ulong)byteFlag * -2 + 1;\n        }\n        inputString[*(byte *)(structValue1 + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = unused2;\n  result._0_8_ = inputString;\n  return result;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_substring_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_binary_00107730",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupBinary_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_binary_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorMessage",
                "iVar1": "errorStatus",
                "uVar2": "errorString",
                "in_R10": "unknownCause",
                "stdout": "standardOutput",
                "stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorMessage)\n\n{\n  int errorStatus;\n  undefined8 errorString;\n  undefined8 unknownCause;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(errorStatus);\n  }\n  fflush(_standardOutput);\n  if (errorMessage != 0) {\n    fprintf(_standardError,\"%s: %s: %s\\n\",DAT_0010d660,errorMessage,errorString,unknownCause);\n    return;\n  }\n  fprintf(_standardError,\"%s: %s\\n\",DAT_0010d660,errorString,unknownCause);\n  return;\n}\n\n",
            "called": [
                "FUN_00102f96",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00107c10",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "error",
                "uVar2": "isTTY",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoPtr",
                "lVar5": "dataOffset"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int error;\n  uint isTTY;\n  int fileDescriptor;\n  int *errnoPtr;\n  long dataOffset;\n  \n  errnoPtr = __errno_location();\n  dataOffset = DAT_0010d5a8;\n  error = *errnoPtr;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(dataOffset + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (dataOffset != 0) {\n      if (filePtr == *(FILE ***)(dataOffset + DAT_0010d5a0 * 8)) {\n        extract_data_from_binary_001030ed();\n      }\n      *filePtr = inputFile;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = inputFile;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTTY = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTTY = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTTY;\n  *errnoPtr = error;\n  return param5;\n}\n\n",
            "called": [
                "FUN_001030ed",
                "fileno",
                "__errno_location",
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_to_destination_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "tempVariable"
            },
            "code": "\nvoid copyDataToDestination_0010312d(long destination,long source)\n\n{\n  long tempVariable;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  tempVariable = DAT_0010d558;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempVariable + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_to_destination_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "initialOffset",
                "uVar4": "result",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int sourceFileDescriptor,char *destinationFilePath)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t initialOffset;\n  ulong result;\n  size_t bytesWritten;\n  int *errnoPtr;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (initialOffset = lseek(sourceFileDescriptor,0,0), initialOffset == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      result = close_file_00102f55();\n      return result;\n    }\n    do {\n      result = read(sourceFileDescriptor,buffer,0x2000);\n      bytesRead = (int)result;\n      if (bytesRead < 1) {\n        errnoPtr = __errno_location();\n        originalErrno = *errnoPtr;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoPtr = originalErrno;\n          return 0xffffffff;\n        }\n        return result & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoPtr = __errno_location();\n    bytesRead = *errnoPtr;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPtr = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "open",
                "read",
                "close",
                "lseek",
                "write",
                "FUN_00102f55",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_status_001052a0",
                "param_1": "filename",
                "iVar1": "result",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_status"
            },
            "code": "\nlong check_file_status_001052a0(char *filename)\n\n{\n  int result;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_status;\n  \n  if (filename != (char *)0x0) {\n    result = stat(filename,&file_status);\n    if (result < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        log_error_message_00107920(error_message,filename);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        log_error_message_00107920(error_message,filename,error_reason);\n      }\n    }\n    else if ((file_status.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      log_error_message_00107920(error_message,filename);\n    }\n    else if ((file_status.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_status.st_size) {\n        return file_status.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      log_error_message_00107920(error_message,filename);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      log_error_message_00107920(error_message,filename);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "check_file_status_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "filePtr",
                "pcVar1": "message"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *filePtr)\n\n{\n  char *message;\n  \n  message = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(filePtr,message);\n  message = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(filePtr,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103172",
                "FUN_00103ba8",
                "FUN_00103e95",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_binary_00103c60",
                "param_1": "inputArchivePath",
                "param_2": "isPlugin",
                "cVar1": "checkResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchiveHandle",
                "lVar5": "archivedFileHandle",
                "uVar6": "binaryName",
                "plVar7": "archivedFilesArray"
            },
            "code": "\n\n\nvoid processBinary_00103c60(char *inputArchivePath,int isPlugin)\n\n{\n  char checkResult;\n  int *errnoLocation;\n  char *errorMessage;\n  long inputArchiveHandle;\n  long archivedFileHandle;\n  undefined8 binaryName;\n  long *archivedFilesArray;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)create_temp_file_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errnoLocation = __errno_location();\n    inputArchivePath = strerror(*errnoLocation);\n    binaryName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      inputArchivePath = DAT_0010d560;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchiveHandle = bfd_openr(inputArchivePath,\"plugin\");\n      if (inputArchiveHandle == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        checkResult = bfd_check_format(inputArchiveHandle,2);\n        if (checkResult != '\\0') {\n          archivedFilesArray = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFileHandle = bfd_openr_next_archived_file(inputArchiveHandle,0); archivedFileHandle != 0;\n              archivedFileHandle = bfd_openr_next_archived_file(inputArchiveHandle,archivedFileHandle)) {\n            *archivedFilesArray = archivedFileHandle;\n            archivedFilesArray = (long *)(archivedFileHandle + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    binaryName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,binaryName,inputArchivePath);\n  check_and_exit_if_zero_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "FUN_001057a0",
                "bfd_set_format",
                "strerror",
                "bfd_fdopenw",
                "bfd_openr",
                "fprintf",
                "FUN_0010315d",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_binary_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_data_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid writeDataToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_data_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "flag1",
                "param_4": "flag2",
                "cVar1": "check_result",
                "uVar2": "subprocess_result",
                "lVar3": "archived_file",
                "uVar4": "total_result"
            },
            "code": "\nulong process_archived_files_00105af0(long *file_list,long archive_file,char flag1,char flag2)\n\n{\n  char check_result;\n  uint subprocess_result;\n  long archived_file;\n  ulong total_result;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      total_result = print_and_update_pointer_00102f08();\n      return total_result;\n    }\n  }\n  else {\n    check_result = bfd_check_format(archive_file,2);\n    if (check_result != '\\0') {\n      total_result = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        subprocess_result = process_archived_files_00105af0(file_list,archived_file,flag1,1);\n        if ((char)subprocess_result != '\\0') {\n          total_result = (ulong)subprocess_result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return total_result;\n    }\n    if (flag1 != '\\0') {\n      total_result = print_and_update_pointer_00102f08();\n      return total_result;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105af0",
                "FUN_001028ed",
                "FUN_00105ae0"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_values_0010300e",
                "bVar1": "hasMatch",
                "iVar2": "currentIndex",
                "lVar3": "newIndex",
                "bVar4": "offset",
                "pbVar5": "currentByte",
                "in_R9": "foundByte",
                "in_R10D": "foundIndex"
            },
            "code": "\nvoid findMatchingValues_0010300e(void)\n\n{\n  bool hasMatch;\n  int currentIndex;\n  long newIndex;\n  byte offset;\n  byte *currentByte;\n  byte *foundByte;\n  int foundIndex;\n  \n  hasMatch = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    offset = 1;\n    if (*currentByte != 0) {\n      offset = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      hasMatch = true;\n      foundByte = currentByte;\n      foundIndex = currentIndex;\n    }\n    while( true ) {\n      newIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)offset);\n      if (*(short *)(&DAT_0010a440 + newIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        offset = (&DAT_0010a7c0)[(int)(uint)offset];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + newIndex * 2);\n  }\n  if (hasMatch) {\n    DAT_0010d5b8 = foundByte;\n    DAT_0010d5c0 = foundIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_values_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_memory_and_shift_00102ba1",
                "unaff_RBP": "memoryAddress",
                "unaff_retaddr": "returnAddress",
                "auVar1": "modifiedReturnValue"
            },
            "code": "\nundefined  [16] freeMemoryAndShift_00102ba1(void)\n\n{\n  undefined modifiedReturnValue [16];\n  void *memoryAddress;\n  ulong returnAddress;\n  \n  free(memoryAddress);\n  modifiedReturnValue._8_8_ = 0;\n  modifiedReturnValue._0_8_ = returnAddress;\n  return modifiedReturnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_memory_and_shift_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_archive_00107740",
                "param_1": "inputParams",
                "iVar1": "filenameComparisonResult",
                "iVar2": "statErrorType",
                "piVar3": "errnoLocation",
                "pcVar4": "errorString",
                "uVar5": "gettextResult",
                "pplVar6": "checkParam",
                "__ptr": "bufferPtr",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "plVar8": "currentFile",
                "puVar9": "localVariableArray",
                "uVar10": "totalBytesRead",
                "sVar11": "bytesToRead",
                "local_c8": "localArray",
                "_Stack_b0": "filePermissions",
                "uStack_98": "totalBytesInFile",
                "uStack_80": "fileTimestamp",
                "uStack_70": "fileTimestamp"
            },
            "code": "\n\n\nlong * extractArchive_00107740(long **inputParams)\n\n{\n  int filenameComparisonResult;\n  int statErrorType;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 gettextResult;\n  long **checkParam;\n  void *bufferPtr;\n  size_t bytesRead;\n  long loopCounter;\n  long *currentFile;\n  undefined4 *localVariableArray;\n  ulong totalBytesRead;\n  size_t bytesToRead;\n  undefined4 localArray [6];\n  __mode_t filePermissions;\n  ulong totalBytesInFile;\n  undefined8 fileTimestamp;\n  undefined8 fileTimestamp;\n  \n  if (_DAT_0010d600 != 0) {\n    localVariableArray = localArray;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localVariableArray = 0;\n      localVariableArray = localVariableArray + 1;\n    }\n  }\n  checkParam = (long **)inputParams[0x1d];\n  if ((long **)inputParams[0x1d] == (long **)0x0) {\n    checkParam = inputParams;\n  }\n  statErrorType = (*(code *)checkParam[1][0x3d])(inputParams,localArray);\n  if (statErrorType != 0) {\n    currentFile = *inputParams;\n    gettextResult = dcgettext(0,\"internal stat error on %s\",5);\n    statErrorType = log_error_and_exit_00107690(gettextResult,currentFile);\n    gettextResult = DAT_0010d638;\n    if (statErrorType == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        filenameComparisonResult = filename_cmp(*(undefined8 *)*currentFile,gettextResult);\n        if (filenameComparisonResult == 0) {\n          if (statErrorType != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek(inputParams,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (totalBytesInFile == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*inputParams);\n  }\n  else {\n    totalBytesRead = 0;\n    bufferPtr = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = totalBytesInFile - totalBytesRead;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(bufferPtr,bytesToRead,inputParams);\n      if (bytesToRead != bytesRead) {\nLAB_00102c78:\n        inputParams = (long **)*inputParams[0x1d];\n        gettextResult = dcgettext(0,\"%s is not a valid archive\",5);\n        log_error_and_exit_00107690(gettextResult,inputParams);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*inputParams);\n      }\n      bytesToRead = fwrite(bufferPtr,1,bytesRead,DAT_0010d5d8);\n      if (bytesToRead != bytesRead) {\n        errnoLocation = __errno_location();\n        errorString = strerror(*errnoLocation);\n        log_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      totalBytesRead = totalBytesRead + bytesRead;\n    } while (totalBytesRead < totalBytesInFile);\n    free(bufferPtr);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermissions);\n  if (_DAT_0010d600 != 0) {\n    fileTimestamp = fileTimestamp;\n    set_file_timestamp_00107c80(errorString,localArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_metadata_00102d2f",
                "unaff_RBX": "fileLines",
                "unaff_RBP": "filePointer",
                "unaff_R12": "fileMetadata",
                "unaff_R13": "fileData",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000068": "fileMode",
                "in_stack_00000070": "fileSize",
                "in_stack_00000080": "fileModificationTime"
            },
            "code": "\nvoid printFileMetadata_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *__format;\n  uint uVar4;\n  char **fileLines;\n  FILE *filePointer;\n  long fileMetadata;\n  void *fileData;\n  int fileDescriptor;\n  undefined uStack0000000000000015;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char in_stack_00000018;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined uStack000000000000001f;\n  uint fileMode;\n  uint uStack000000000000006c;\n  uint fileSize;\n  undefined8 fileModificationTime;\n  \n  do {\n    bVar1 = print_error_and_exit_00107c10();\n    *(uint *)((long)fileLines + 0x44) = *(uint *)((long)fileLines + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(fileMetadata + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileLines + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = copy_and_delete_file_00105bc0();\n    if (iVar3 == 0) {\n      free(fileData);\n      free(filePointer);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  print_error_and_exit_00107c10();\n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  uVar4 = fileMode & 0xf000;\n  if (uVar4 == 0x4000) {\n    uStack0000000000000015 = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    uStack0000000000000015 = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    uStack0000000000000015 = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    uStack0000000000000015 = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    uStack0000000000000015 = 0x73;\n  }\n  else {\n    uStack0000000000000015 = 0x70;\n    if (uVar4 != 0x1000) {\n      uStack0000000000000015 = 0x2d;\n    }\n  }\n  cStack0000000000000016 = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  cStack0000000000000017 = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  in_stack_00000018 = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  cStack0000000000000019 = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001a = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001b = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  cStack000000000000001c = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001d = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001e = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (in_stack_00000018 == 'x') {\n      in_stack_00000018 = 's';\n    }\n    else {\n      in_stack_00000018 = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (cStack000000000000001b == 'x') {\n      cStack000000000000001b = 's';\n    }\n    else {\n      cStack000000000000001b = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (cStack000000000000001e == 'x') {\n      cStack000000000000001e = 't';\n    }\n    else {\n      cStack000000000000001e = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(filePointer,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)uStack000000000000006c,\n          (ulong)fileSize,fileModificationTime,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileLines,filePointer);\n  if ((char)fileMetadata != '\\0') {\n    if ((*(byte *)((long)fileLines + 0x49) & 0x10) == 0) {\n      if (fileLines[0xb] != (char *)0x0) {\n        fprintf(filePointer,\" 0x%lx\");\n      }\n    }\n    else if (fileLines[0xc] != (char *)0x0) {\n      fprintf(filePointer,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePointer);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "free",
                "bfd_set_archive_head",
                "bfd_close",
                "FUN_00107c10",
                "dup",
                "xexit",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_file_001028ed",
                "param_1": "filePath",
                "param_2": "fileStat",
                "uVar1": "undefinedVar1",
                "bVar2": "byteVar2",
                "iVar3": "intVar3",
                "sVar4": "sizeVar4",
                "piVar5": "intPointerVar5",
                "pcVar6": "charPointerVar6",
                "pcVar7": "charPointerVar7",
                "ppcVar8": "charPointerPointerVar8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "__s": "charPointerVarS",
                "__s_00": "charPointerVarS00",
                "lVar11": "longVar11",
                "uVar12": "undefinedVar12",
                "uVar13": "ulongVar13",
                "unaff_RBX": "charPointerVarRBX",
                "ppcVar14": "charPointerPointerVar14",
                "unaff_RBP": "charPointerPointerVarRBP",
                "unaff_R12": "charPointerPointerVarR12",
                "unaff_R13D": "uintVarR13D",
                "ppcVar15": "charPointerPointerVar15",
                "unaff_R14": "longVarR14",
                "bVar16": "boolVar16",
                "bVar17": "byteVar17",
                "param_7": "charPointerPointerVar7",
                "param_9": "undefinedVar9",
                "in_stack_00000078": "longVarInStack00000078",
                "in_stack_00000108": "longVarInStack00000108"
            },
            "code": "\n\n\nundefined8 processFile_001028ed(undefined8 filePath,long fileStat)\n\n{\n  undefined undefinedVar1;\n  byte byteVar2;\n  int intVar3;\n  size_t sizeVar4;\n  int *intPointerVar5;\n  char *charPointerVar6;\n  char *charPointerVar7;\n  char **charPointerPointerVar8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  char *charPointerVarS;\n  char *charPointerVarS00;\n  long longVar11;\n  undefined8 undefinedVar12;\n  ulong ulongVar13;\n  char *charPointerVarRBX;\n  char **charPointerPointerVar14;\n  char **charPointerPointerVarRBP;\n  char **charPointerPointerVarR12;\n  uint uintVarR13D;\n  char **charPointerPointerVar15;\n  long longVarR14;\n  bool boolVar16;\n  byte byteVar17;\n  char **charPointerPointerVar7;\n  undefined8 undefinedVar9;\n  long longVarInStack00000078;\n  long longVarInStack00000108;\n  \n  byteVar17 = 0;\ncode_r0x001028ed:\n  print_error_and_exit_00107c10(charPointerVarRBX,fileStat);\nLAB_001028f5:\n  undefinedVar12 = DAT_0010d638;\n  if (uintVarR13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*charPointerPointerVarR12 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar3 = filename_cmp(*(undefined8 *)*charPointerPointerVarR12,undefinedVar12);\n      if (intVar3 == 0) break;\n      charPointerPointerVarR12 = (char **)(*charPointerPointerVarR12 + 0xf0);\n    }\n    if (uintVarR13D != 2) goto LAB_0010571f;\n    charPointerPointerVarR12 = (char **)(*charPointerPointerVarR12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar10 = *(long *)(longVarR14 + 0xf0);\n  if (*(long *)(longVarR14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar11 = longVar10;\n    longVar10 = *(long *)(longVar11 + 0xf0);\n  } while (longVar10 != 0);\n  charPointerPointerVarR12 = (char **)(longVar11 + 0xf0);\n  charPointerVarRBX = *charPointerPointerVarRBP;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar1 = DAT_0010d5f8;\n  uintVarR13D = (uint)(DAT_0010d60c != 0);\n  fileStat = bfd_openr(charPointerVarRBX,DAT_0010d5f0);\n  if (fileStat != 0) {\n    charPointerPointerVarRBP = charPointerPointerVarRBP + 1;\n    byteVar2 = process_archived_files_00105af0(charPointerPointerVarR12,fileStat,uintVarR13D,undefinedVar1);\n    undefinedVar9._6_1_ = undefinedVar9._6_1_ | byteVar2;\n    charPointerVar6 = *charPointerPointerVarRBP;\n    do {\n      if (charPointerVar6 == (char *)0x0) {\n        if (undefinedVar9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefinedVar12 = extract_and_print_archive_information_001058b0();\n        return undefinedVar12;\n      }\n      charPointerPointerVar14 = *(char ***)(longVarR14 + 0xf0);\n      charPointerPointerVarR12 = charPointerPointerVar7;\n      if (undefinedVar9._7_1_ == '\\0') {\n        charPointerPointerVar15 = charPointerPointerVar7;\n        if (charPointerPointerVar14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              charPointerVarS = (char *)lbasename(*charPointerPointerVar14);\n              charPointerVar7 = charPointerVarS;\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar4 = strlen(charPointerVarS);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(longVarR14 + 8) + 0x1e);\n                if (ulongVar13 < sizeVar4) {\n                  charPointerVar7 = (char *)xmalloc(ulongVar13 + 1);\n                  longVar10 = *(long *)(longVarR14 + 8);\n                  charPointerVar6 = charPointerVar7;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *charPointerVar6 = *charPointerVarS;\n                    charPointerVarS = charPointerVarS + (ulong)byteVar17 * -2 + 1;\n                    charPointerVar6 = charPointerVar6 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  charPointerVar7[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                charPointerVar6 = *charPointerPointerVarRBP;\n                charPointerVarS = charPointerVar7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPointerVar6 = *charPointerPointerVarRBP;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              charPointerVarS00 = (char *)lbasename(charPointerVar6);\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar4 = strlen(charPointerVarS00);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(longVarR14 + 8) + 0x1e);\n                charPointerVar6 = charPointerVarS00;\n                charPointerVarS = charPointerVar7;\n                if (ulongVar13 < sizeVar4) {\n                  charPointerVar6 = (char *)xmalloc(ulongVar13 + 1);\n                  longVar10 = *(long *)(longVarR14 + 8);\n                  charPointerVar7 = charPointerVar6;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *charPointerVar7 = *charPointerVarS00;\n                    charPointerVarS00 = charPointerVarS00 + (ulong)byteVar17 * -2 + 1;\n                    charPointerVar7 = charPointerVar7 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  charPointerVar6[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar3 = filename_cmp(charPointerVarS00,charPointerVar7);\n            }\n            else {\n              charPointerVar6 = *charPointerPointerVarRBP;\n              charPointerVarS = *charPointerPointerVar14;\nLAB_00102980:\n              intVar3 = filename_cmp(charPointerVar6,charPointerVarS);\n            }\n            if ((intVar3 == 0) && (charPointerPointerVar14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                intVar3 = stat(*charPointerPointerVarRBP,(stat *)&stack0x000000b0);\n                if (intVar3 != 0) {\n                  intPointerVar5 = __errno_location();\n                  if (*intPointerVar5 != 2) {\n                    print_error_and_exit_00107c10(*charPointerPointerVarRBP);\nLAB_00102b7e:\n                    charPointerVar6 = *charPointerPointerVar14;\n                    undefinedVar12 = dcgettext(0,\"internal stat error on %s\",5);\n                    log_error_and_exit_00107690(undefinedVar12,charPointerVar6);\n                    free(charPointerPointerVarRBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPointerPointerVar8 = (char **)charPointerPointerVar14[0x1d];\n                if ((char **)charPointerPointerVar14[0x1d] == (char **)0x0) {\n                  charPointerPointerVar8 = charPointerPointerVar14;\n                }\n                intVar3 = (**(code **)(charPointerPointerVar8[1] + 0x1e8))(charPointerPointerVar14,&stack0x00000020);\n                if (intVar3 != 0) goto LAB_00102b7e;\n                if (longVarInStack00000108 <= longVarInStack00000078) goto LAB_0010577e;\n              }\n              undefinedVar12 = find_file_in_list_00105870(charPointerPointerVar7,2,*charPointerPointerVar14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                charPointerVar6 = *charPointerPointerVarRBP;\n                boolVar16 = DAT_0010d60c != 0;\n                longVar10 = bfd_openr(charPointerVar6,DAT_0010d5f0);\n                if (longVar10 == 0) {\n                  print_error_and_exit_00107c10(charPointerVar6,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar2 = update_and_print_00103172(undefinedVar12,longVar10,boolVar16);\n              }\n              else {\n                undefinedVar9 = extract_substring_00105830(*charPointerPointerVarRBP);\n                intVar3 = filename_cmp(undefinedVar9,\"__.LIBDEP\");\n                if (intVar3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar2 = update_and_print_00103172(undefinedVar12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar2 != 0) {\n                *charPointerPointerVar15 = *(char **)(*charPointerPointerVar15 + 0xf0);\n                undefinedVar9._6_1_ = byteVar2;\n              }\n              goto LAB_0010577e;\n            }\n            charPointerPointerVar15 = charPointerPointerVar14 + 0x1e;\n            charPointerPointerVar14 = (char **)charPointerPointerVar14[0x1e];\n          } while (charPointerPointerVar14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uintVarR13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uintVarR13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        longVar10 = *(long *)(longVarR14 + 0xf0);\n        if (*(long *)(longVarR14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      charPointerVarRBX = *charPointerPointerVarRBP;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar12 = extract_substring_00105830(charPointerVarRBX);\n      intVar3 = filename_cmp(undefinedVar12,\"__.LIBDEP\");\n      if (intVar3 != 0) goto code_r0x0010574f;\n      byteVar2 = process_archived_files_00105ae0(charPointerPointerVarR12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      undefinedVar9._6_1_ = byteVar2 | undefinedVar9._6_1_;\nLAB_0010577e:\n      charPointerPointerVarRBP = charPointerPointerVarRBP + 1;\n      charPointerVar6 = *charPointerPointerVarRBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  charPointerVarRBX = *charPointerPointerVarRBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "xmalloc",
                "filename_cmp",
                "FUN_00103172",
                "FUN_00105870",
                "strlen",
                "FUN_00107c10",
                "stat",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_00105af0",
                "FUN_00105830",
                "bfd_openr",
                "FUN_001028ed",
                "lbasename",
                "dcgettext",
                "FUN_001058b0",
                "FUN_00105ae0",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_file_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorOutput",
                "exit": "terminateProgram"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorOutput,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_error_001025a0",
                "piVar1": "error_pointer",
                "uVar2": "error_message",
                "__errno_location": "get_error_location",
                "dcgettext": "get_corrected_string",
                "log_error_message_00107920": "log_error_message"
            },
            "code": "\nundefined8 handle_error_001025a0(void)\n\n{\n  int *error_pointer;\n  undefined8 error_message;\n  \n  error_pointer = __errno_location();\n  if (*error_pointer == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    log_error_message(error_message);\n  }\n  else {\n    strerror(*error_pointer);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    log_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "check_if_one_0010284b",
                "undefined8": "int"
            },
            "code": "\nint checkIfOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "check_if_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_valid_archive_member_00102c25",
                "param_7": "ptrArray",
                "unaff_RBX": "archiveData",
                "iVar1": "fileCompareResult",
                "uVar5": "errorText",
                "plVar8": "currentPointer",
                "puVar9": "paramPointer",
                "iVar2": "internalError",
                "pplVar6": "targetPointer",
                "__ptr": "buffer",
                "__n": "readSize",
                "lVar7": "loopVar",
                "uVar10": "totalSize",
                "sVar11": "copySize",
                "param_12": "archiveSize",
                "piVar3": "errnoLocation",
                "pcVar4": "errorMessage"
            },
            "code": "\n\n\nlong * extractValidArchiveMember_00102c25(void)\n\n{\n  int fileCompareResult;\n  int internalError;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 errorText;\n  long **targetPointer;\n  void *buffer;\n  size_t readSize;\n  long loopVar;\n  long **archiveData;\n  long *currentPointer;\n  undefined4 *paramPointer;\n  ulong totalSize;\n  size_t copySize;\n  undefined4 *ptrArray;\n  __mode_t param_11;\n  ulong archiveSize;\n  \n  paramPointer = ptrArray;\n  for (loopVar = 0x24; loopVar != 0; loopVar = loopVar + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  targetPointer = (long **)archiveData[0x1d];\n  if ((long **)archiveData[0x1d] == (long **)0x0) {\n    targetPointer = archiveData;\n  }\n  internalError = (*(code *)targetPointer[1][0x3d])();\n  if (internalError != 0) {\n    currentPointer = *archiveData;\n    errorText = dcgettext(0,\"internal stat error on %s\",5);\n    internalError = log_error_and_exit_00107690(errorText,currentPointer);\n    errorText = DAT_0010d638;\n    if (internalError == 3) {\n      for (; *currentPointer != 0; currentPointer = (long *)(*currentPointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentPointer != (undefined8 *)0x0; currentPointer = (long *)(*currentPointer + 0xf0)) {\n        fileCompareResult = filename_cmp(*(undefined8 *)*currentPointer,errorText);\n        if (fileCompareResult == 0) {\n          if (internalError != 2) {\n            return currentPointer;\n          }\n          return (long *)(*currentPointer + 0xf0);\n        }\n      }\n    }\n    return currentPointer;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*archiveData);\n  }\n  else {\n    totalSize = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      copySize = archiveSize - totalSize;\n      if (0x2000 < copySize) {\n        copySize = 0x2000;\n      }\n      readSize = bfd_bread(buffer,copySize);\n      if (copySize != readSize) {\nLAB_00102c78:\n        archiveData = (long **)*archiveData[0x1d];\n        errorText = dcgettext(0,\"%s is not a valid archive\",5);\n        log_error_and_exit_00107690(errorText,archiveData);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*archiveData);\n      }\n      copySize = fwrite(buffer,1,readSize,DAT_0010d5d8);\n      if (copySize != readSize) {\n        errnoLocation = __errno_location();\n        errorMessage = strerror(*errnoLocation);\n        log_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorMessage);\n        goto LAB_00102c78;\n      }\n      totalSize = totalSize + readSize;\n    } while (totalSize < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessage = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,param_11);\n  if (_DAT_0010d600 != 0) {\n    set_file_timestamp_00107c80(errorMessage,ptrArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_seek",
                "xmalloc",
                "strerror",
                "FUN_00105a20",
                "bfd_bread",
                "chmod",
                "FUN_00107690",
                "free",
                "FUN_00107c80",
                "fclose",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_valid_archive_member_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_and_allocate_substring_00102bb0",
                "unaff_RBX": "source",
                "unaff_RBP": "basePointer",
                "unaff_retaddr": "returnAddress",
                "in_RAX": "inputString",
                "lVar1": "longVar1",
                "sVar2": "inputLength",
                "puVar3": "allocatedSubstring",
                "puVar5": "substringPointer",
                "bVar6": "flag",
                "auVar7": "returnValue",
                "uVar4": "substringSize"
            },
            "code": "\nundefined  [16] reverseAndAllocateSubstring_00102bb0(void)\n\n{\n  long longVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *allocatedSubstring;\n  ulong substringSize;\n  undefined *source;\n  long basePointer;\n  undefined *substringPointer;\n  byte flag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  flag = 0;\n  inputLength = strlen(inputString);\n  substringSize = (ulong)*(byte *)(*(long *)(basePointer + 8) + 0x1e);\n  allocatedSubstring = source;\n  if (substringSize < inputLength) {\n    allocatedSubstring = (undefined *)xmalloc(substringSize + 1);\n    longVar1 = *(long *)(basePointer + 8);\n    substringPointer = allocatedSubstring;\n    for (substringSize = (ulong)*(byte *)(longVar1 + 0x1e); substringSize != 0; substringSize = substringSize - 1) {\n      *substringPointer = *source;\n      source = source + (ulong)flag * -2 + 1;\n      substringPointer = substringPointer + (ulong)flag * -2 + 1;\n    }\n    allocatedSubstring[*(byte *)(longVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = allocatedSubstring;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "reverse_and_allocate_substring_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_update_pointer_00102f08",
                "unaff_RBX": "ptrToPrint",
                "unaff_R12": "ptrToData"
            },
            "code": "\nundefined8 printAndUpdatePointer_00102f08(void)\n\n{\n  undefined8 *ptrToPrint;\n  undefined8 *ptrToData;\n  \n  printf(\"a - %s\\n\",*ptrToPrint);\n  ptrToPrint[0x1e] = *ptrToData;\n  *ptrToData = ptrToPrint;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_update_pointer_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_and_print_archived_files_00105570",
                "param_1": "archive",
                "param_2": "file_paths",
                "param_3": "extract_dependencies",
                "ppcVar1": "current_file_path",
                "uVar2": "undefined_value",
                "bVar3": "flag",
                "iVar4": "iterator",
                "sVar5": "length",
                "piVar6": "errno_location",
                "pcVar7": "file_path",
                "pcVar8": "base_name",
                "uVar9": "substring",
                "pcVar10": "current_file",
                "__s": "base_name_2",
                "lVar11": "previous",
                "lVar12": "current",
                "uVar13": "result",
                "uVar14": "limit",
                "ppcVar15": "file_list",
                "ppcVar16": "current_entry",
                "uVar17": "mode",
                "ppcVar18": "previous_entry",
                "bVar19": "flag_2",
                "bVar20": "byte_flag",
                "local_15a": "archive_flag",
                "auStack_158": "stack_buffer",
                "lStack_100": "last_modified_time",
                "sStack_c8": "stat_struct"
            },
            "code": "\n\n\nundefined8 processAndPrintArchivedFiles_00105570(long archive,char **file_paths,char extract_dependencies)\n\n{\n  char **current_file_path;\n  undefined undefined_value;\n  byte flag;\n  int iterator;\n  size_t length;\n  int *errno_location;\n  char *file_path;\n  char *base_name;\n  undefined8 substring;\n  char *current_file;\n  char *base_name_2;\n  long previous;\n  long current;\n  undefined8 result;\n  ulong limit;\n  char **file_list;\n  char **current_entry;\n  uint mode;\n  char **previous_entry;\n  bool flag_2;\n  byte byte_flag;\n  byte archive_flag;\n  undefined stack_buffer [88];\n  long last_modified_time;\n  stat stat_struct;\n  \n  byte_flag = 0;\n  current_file_path = (char **)(archive + 0xf0);\n  archive_flag = 0;\n  if (file_paths == (char **)0x0) {\n    result = initialize_data_00102943();\n    return result;\n  }\n  do {\n    current_file = *file_paths;\njoined_r0x001055aa:\n    if (current_file == (char *)0x0) {\n      if (archive_flag != 0) {\n        result = extract_and_print_archive_information_001058b0(archive);\n        return result;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    file_list = *(char ***)(archive + 0xf0);\n    current_entry = current_file_path;\n    if (extract_dependencies != '\\0') {\nLAB_0010564c:\n      mode = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      current = *(long *)(archive + 0xf0);\n      if (*(long *)(archive + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        previous = current;\n        current = *(long *)(previous + 0xf0);\n      } while (current != 0);\n      current_entry = (char **)(previous + 0xf0);\n      current_file = *file_paths;\n      do {\n        if (DAT_0010d620 != 0) {\n          result = extract_substring_00105830(current_file,archive);\n          iterator = filename_cmp(result,\"__.LIBDEP\");\n          if (iterator == 0) {\n            flag = process_archived_files_00105ae0(current_entry,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            archive_flag = flag | archive_flag;\n            goto LAB_0010577e;\n          }\n          current_file = *file_paths;\n        }\n        undefined_value = DAT_0010d5f8;\n        flag_2 = DAT_0010d60c != 0;\n        current = bfd_openr(current_file,DAT_0010d5f0);\n        if (current != 0) {\n          file_paths = file_paths + 1;\n          flag = process_archived_files_00105af0(current_entry,current,(uint)flag_2,undefined_value);\n          archive_flag = archive_flag | flag;\n          current_file = *file_paths;\n          goto joined_r0x001055aa;\n        }\n        print_error_and_exit_00107c10(current_file,0);\n        mode = (uint)flag_2;\nLAB_001028f5:\n        result = DAT_0010d638;\n        if (mode == 3) {\n          current = *(long *)(archive + 0xf0);\n          if (*(long *)(archive + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*current_entry != (undefined8 *)0x0;\n              current_entry = (char **)(*current_entry + 0xf0)) {\n            iterator = filename_cmp(*(undefined8 *)*current_entry,result);\n            if (iterator == 0) {\n              if (mode == 2) {\n                current_entry = (char **)(*current_entry + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        current_file = *file_paths;\n      } while( true );\n    }\n    previous_entry = current_file_path;\n    if (file_list == (char **)0x0) {\n      mode = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      current_file = (char *)lbasename(*file_list);\n      base_name = current_file;\n      if (DAT_0010d5fa != '\\0') {\n        length = strlen(current_file);\n        limit = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        if (limit < length) {\n          base_name = (char *)xmalloc(limit + 1);\n          current = *(long *)(archive + 8);\n          file_path = base_name;\n          for (limit = (ulong)*(byte *)(current + 0x1e); limit != 0; limit = limit - 1) {\n            *file_path = *current_file;\n            current_file = current_file + (ulong)byte_flag * -2 + 1;\n            file_path = file_path + (ulong)byte_flag * -2 + 1;\n          }\n          base_name[*(byte *)(current + 0x1e)] = '\\0';\n        }\n        file_path = *file_paths;\n        current_file = base_name;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file_path = *file_paths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      base_name_2 = (char *)lbasename(file_path);\n      if (DAT_0010d5fa != '\\0') {\n        length = strlen(base_name_2);\n        limit = (ulong)*(byte *)(*(long *)(archive + 8) + 0x1e);\n        file_path = base_name_2;\n        current_file = base_name;\n        if (limit < length) {\n          file_path = (char *)xmalloc(limit + 1);\n          current = *(long *)(archive + 8);\n          base_name = file_path;\n          for (limit = (ulong)*(byte *)(current + 0x1e); limit != 0; limit = limit - 1) {\n            *base_name = *base_name_2;\n            base_name_2 = base_name_2 + (ulong)byte_flag * -2 + 1;\n            base_name = base_name + (ulong)byte_flag * -2 + 1;\n          }\n          file_path[*(byte *)(current + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      iterator = filename_cmp(base_name_2,base_name);\n      if (iterator == 0) goto LAB_00102993;\nLAB_00105639:\n      previous_entry = file_list + 0x1e;\n      file_list = (char **)file_list[0x1e];\n      if (file_list == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file_path = *file_paths;\n    current_file = *file_list;\nLAB_00102980:\n    iterator = filename_cmp(file_path,current_file);\n    if (iterator != 0) goto LAB_00105639;\nLAB_00102993:\n    if (file_list[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      iterator = stat(*file_paths,&stat_struct);\n      if (iterator != 0) {\n        errno_location = __errno_location();\n        if (*errno_location != 2) {\n          print_error_and_exit_00107c10(*file_paths);\nLAB_00102b7e:\n          current_file = *file_list;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          log_error_and_exit_00107690(result,current_file);\n          free(file_paths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      current_entry = (char **)file_list[0x1d];\n      if ((char **)file_list[0x1d] == (char **)0x0) {\n        current_entry = file_list;\n      }\n      iterator = (**(code **)(current_entry[1] + 0x1e8))(file_list,stack_buffer);\n      if (iterator != 0) goto LAB_00102b7e;\n      if (stat_struct.st_mtim.tv_sec <= last_modified_time) goto LAB_0010577e;\n    }\n    result = find_file_in_list_00105870(current_file_path,2,*file_list);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      current_file = *file_paths;\n      flag_2 = DAT_0010d60c != 0;\n      current = bfd_openr(current_file,DAT_0010d5f0);\n      if (current == 0) {\n        print_error_and_exit_00107c10(current_file,0);\n        goto LAB_00102b3e;\n      }\n      flag = update_and_print_00103172(result,current,flag_2);\n    }\n    else {\n      substring = extract_substring_00105830(*file_paths,archive);\n      iterator = filename_cmp(substring,\"__.LIBDEP\");\n      if (iterator != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      flag = update_and_print_00103172(result,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (flag != 0) {\n      *previous_entry = *(char **)(*previous_entry + 0xf0);\n      archive_flag = flag;\n    }\nLAB_0010577e:\n    file_paths = file_paths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_and_print_archived_files_00105570"
        }
    },
    "used_tokens": 77275,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}