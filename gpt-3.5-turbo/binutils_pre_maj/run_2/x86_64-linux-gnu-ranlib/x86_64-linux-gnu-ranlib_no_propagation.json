{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "search_for_file_00102cd9",
                "in_EAX": "fileType",
                "iVar1": "cmpResult",
                "unaff_RBX": "fileArray",
                "param_7": "fileToSearch"
            },
            "code": "\nlong * searchForFile_00102cd9(void)\n\n{\n  int fileType;\n  int cmpResult;\n  long *fileArray;\n  undefined8 fileToSearch;\n  \n  fileToSearch = DAT_0010d638;\n  if (fileType == 3) {\n    for (; *fileArray != 0; fileArray = (long *)(*fileArray + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileArray != (undefined8 *)0x0; fileArray = (long *)(*fileArray + 0xf0)) {\n      cmpResult = filename_cmp(*(undefined8 *)*fileArray,fileToSearch);\n      if (cmpResult == 0) {\n        if (fileType != 2) {\n          return fileArray;\n        }\n        return (long *)(*fileArray + 0xf0);\n      }\n    }\n  }\n  return fileArray;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "search_for_file_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102710",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_00105db0",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "outputFile",
                "param_2": "fileInfo",
                "param_3": "printHeader",
                "param_4": "printAddress",
                "iVar1": "result",
                "ppcVar2": "filePtr",
                "pcVar3": "timeData",
                "uVar4": "filePerm",
                "local_100": "currentTime",
                "uStack_f3": "fileType",
                "cStack_f2": "isReadOnly",
                "cStack_f1": "isHidden",
                "cStack_f0": "isSystem",
                "cStack_ef": "isArchive",
                "cStack_ee": "isDirectory",
                "cStack_ed": "isExecutable",
                "cStack_ec": "isReadable",
                "cStack_eb": "isWritable",
                "cStack_ea": "isExecutable",
                "uStack_e9": "unused",
                "local_e8": "timeString",
                "local_b8": "timeStringBuffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "firstDate",
                "uStack_98": "lastDate",
                "uStack_88": "address",
                "local_60": "currentDate"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *outputFile,char **fileInfo,char printHeader,char printAddress)\n\n{\n  int result;\n  char **filePtr;\n  char *timeData;\n  uint filePerm;\n  time_t currentTime;\n  undefined fileType;\n  char isReadOnly;\n  char isHidden;\n  char isSystem;\n  char isArchive;\n  char isDirectory;\n  char isExecutable;\n  char isReadable;\n  char isWritable;\n  char isExecutable;\n  undefined unused;\n  char timeString [48];\n  undefined timeStringBuffer [24];\n  uint fileSize;\n  uint firstDate;\n  uint lastDate;\n  undefined8 address;\n  time_t currentDate;\n  \n  if (printHeader != '\\0') {\n    filePtr = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      filePtr = fileInfo;\n    }\n    result = (**(code **)(filePtr[1] + 0x1e8))(fileInfo,timeStringBuffer);\n    if (result == 0) {\n      currentTime = currentDate;\n      timeData = ctime(&currentTime);\n      if (timeData == (char *)0x0) {\n        timeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeString,timeData);\n      }\n      else {\n        sprintf(timeString,\"%.12s %.4s\",timeData + 4);\n      }\n      filePerm = fileSize & 0xf000;\n      if (filePerm == 0x4000) {\n        fileType = 100;\n      }\n      else if (filePerm == 0xa000) {\n        fileType = 0x6c;\n      }\n      else if (filePerm == 0x6000) {\n        fileType = 0x62;\n      }\n      else if (filePerm == 0x2000) {\n        fileType = 99;\n      }\n      else if (filePerm == 0xc000) {\n        fileType = 0x73;\n      }\n      else {\n        fileType = 0x70;\n        if (filePerm != 0x1000) {\n          fileType = 0x2d;\n        }\n      }\n      isReadOnly = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      isHidden = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      isSystem = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      isArchive = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      isDirectory = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      isExecutable = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      isReadable = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      isWritable = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      isExecutable = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (isSystem == 'x') {\n          isSystem = 's';\n        }\n        else {\n          isSystem = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (isExecutable == 'x') {\n          isExecutable = 's';\n        }\n        else {\n          isExecutable = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (isExecutable == 'x') {\n          isExecutable = 't';\n        }\n        else {\n          isExecutable = 'T';\n        }\n      }\n      unused = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&isReadOnly,(ulong)firstDate,(ulong)lastDate,address,\n              timeString,(ulong)fileSize);\n    }\n  }\n  fputs(*fileInfo,outputFile);\n  if (printAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "ctime",
                "FUN_00102d8c",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "fileDirectory",
                "pFVar2": "filePointer",
                "sVar3": "fileDirectoryLength"
            },
            "code": "\nvoid processFile_00105a68(void)\n\n{\n  char *fileDirectory;\n  FILE *filePointer;\n  size_t fileDirectoryLength;\n  \n  fileDirectory = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    fileDirectoryLength = strlen(DAT_0010d5e8);\n    if (fileDirectoryLength != 0) {\n      if (fileDirectory[fileDirectoryLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(fileDirectory,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(fileDirectory,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "perror",
                "concat",
                "printf",
                "fopen",
                "strlen",
                "xexit",
                "FUN_00102e57"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_entries_from_archive_001032a8",
                "param_1": "archivePointer",
                "param_2": "callbackFunction",
                "param_3": "entryNames",
                "param_4": "returnValue",
                "lVar1": "nextEntryPointer",
                "uVar2": "currentEntryName",
                "bVar3": "entryFound",
                "plVar4": "currentEntryPointer",
                "iVar5": "comparisonResult",
                "__format": "errorMessage",
                "plVar6": "previousEntryPointer",
                "lVar7": "currentEntryIndex",
                "plVar8": "previousEntryIndex"
            },
            "code": "\n\n\nundefined8 extractEntriesFromArchive_001032a8(long *archivePointer,code *callbackFunction,undefined8 *entryNames,undefined8 returnValue)\n\n{\n  long nextEntryPointer;\n  undefined8 currentEntryName;\n  bool entryFound;\n  long *currentEntryPointer;\n  int comparisonResult;\n  char *errorMessage;\n  long *previousEntryPointer;\n  long currentEntryIndex;\n  long *previousEntryIndex;\n  \n  currentEntryIndex = archivePointer[0x1e];\n  if (entryNames == (undefined8 *)0x0) {\n    while (currentEntryIndex != 0) {\n      nextEntryPointer = *(long *)(currentEntryIndex + 0xf0);\n      (*callbackFunction)(currentEntryIndex,0);\n      currentEntryIndex = nextEntryPointer;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      currentEntryPointer = (long *)archivePointer[0x1e];\n      previousEntryIndex = archivePointer;\n      while (previousEntryPointer = currentEntryPointer, previousEntryPointer != (long *)0x0) {\n        if (*previousEntryPointer != 0) {\n          comparisonResult = filename_cmp(*entryNames);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callbackFunction)(previousEntryPointer,previousEntryIndex);\n          }\n        }\n        previousEntryIndex = previousEntryPointer;\n        currentEntryPointer = (long *)previousEntryPointer[0x1e];\n      }\n      if (!entryFound) {\n        currentEntryName = *entryNames;\n        errorMessage = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessage,currentEntryName);\n      }\n      entryNames = (undefined8 *)entryNames[1];\n    } while (entryNames != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_entries_from_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entries_0010285f",
                "__format": "formatString",
                "lVar2": "entry",
                "plVar3": "fallbackEntry",
                "uVar4": "filename",
                "plVar5": "currentEntry",
                "unaff_RBP": "callbackFunc",
                "unaff_R12": "archivePtr",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryArray",
                "iStack000000000000000c": "matchCount"
            },
            "code": "\n\n\nvoid printMissingEntries_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long entry;\n  long *fallbackEntry;\n  undefined8 filename;\n  long *currentEntry;\n  code *callbackFunc;\n  long archivePtr;\n  int entryCount;\n  undefined8 *entryArray;\n  int matchCount;\n  \ncode_r0x0010285f:\n  filename = *entryArray;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,filename);\nLAB_0010553e:\n  entryArray = entryArray + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePtr + 0xf0);\n  matchCount = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      entry = *currentEntry;\n      if (entry == 0) {\n        fallbackEntry = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          fallbackEntry = currentEntry;\n        }\n        (**(code **)(fallbackEntry[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) || (entry = FUN_00105830(), entry != 0))\n      {\n        filename = FUN_00105830(*entryArray);\n        iVar1 = filename_cmp(filename,entry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (matchCount = matchCount + 1,\n            matchCount == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callbackFunc)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_missing_entries_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_001057a0",
                "FUN_00103a78",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printError_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "isStandardOutput",
                "uVar1": "text",
                "pcVar2": "message",
                "__stream": "stream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint isStandardOutput)\n\n{\n  undefined8 text;\n  char *message;\n  FILE *stream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  stream = _stderr;\n  if (isStandardOutput != 0) {\n    stream = _stdout;\n  }\n  fprintf(stream,message,DAT_0010d660);\n  text = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(stream,message,text);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(stream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(stream,message);\n  FUN_0010336b(stream);\n  FUN_0010266f(DAT_0010d660,stream);\n  if (isStandardOutput != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(stream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isStandardOutput ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010336b",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_index_0010394a",
                "param_1": "isError",
                "uVar1": "symbolMapTimestamp",
                "__stream": "outputStream",
                "pcVar2": "localizedString"
            },
            "code": "\n\n\nvoid printArchiveIndex_0010394a(uint isError)\n\n{\n  undefined8 symbolMapTimestamp;\n  char *localizedString;\n  FILE *outputStream;\n  \n  symbolMapTimestamp = DAT_0010d660;\n  outputStream = _stderr;\n  if (isError != 0) {\n    outputStream = _stdout;\n  }\n  localizedString = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,localizedString,symbolMapTimestamp);\n  localizedString = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (isError != 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isError ^ 1);\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_0010266f",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_archive_index_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "decompile_and_process_00107920",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "input_9",
                "param_10": "result_1",
                "param_11": "result_2",
                "param_12": "result_3",
                "param_13": "result_4",
                "param_14": "result_5",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "constant",
                "local_d0": "pointer_1",
                "local_c8": "pointer_2",
                "local_b8": "buffer",
                "local_b0": "result_1",
                "local_a8": "result_2",
                "local_a0": "result_3",
                "local_98": "result_4",
                "local_90": "result_5",
                "local_88": "input_1_copy",
                "local_78": "input_2_copy",
                "local_68": "input_3_copy",
                "local_58": "input_4_copy",
                "local_48": "input_5_copy",
                "local_38": "input_6_copy",
                "local_28": "input_7_copy",
                "local_18": "input_8_copy"
            },
            "code": "\nvoid decompile_and_process_00107920(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 input_9,undefined8 result_1,undefined8 result_2,undefined8 result_3,\n                 undefined8 result_4,undefined8 result_5)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 constant;\n  undefined *pointer_1;\n  undefined *pointer_2;\n  undefined buffer [8];\n  undefined8 result_1;\n  undefined8 result_2;\n  undefined8 result_3;\n  undefined8 result_4;\n  undefined8 result_5;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_3_copy;\n  undefined4 input_4_copy;\n  undefined4 input_5_copy;\n  undefined4 input_6_copy;\n  undefined4 input_7_copy;\n  undefined4 input_8_copy;\n  \n  if (condition != '\\0') {\n    input_1_copy = input_1;\n    input_2_copy = input_2;\n    input_3_copy = input_3;\n    input_4_copy = input_4;\n    input_5_copy = input_5;\n    input_6_copy = input_6;\n    input_7_copy = input_7;\n    input_8_copy = input_8;\n  }\n  pointer_1 = &stack0x00000008;\n  size = 8;\n  pointer_2 = buffer;\n  constant = 0x30;\n  result_1 = result_1;\n  result_2 = result_2;\n  result_3 = result_3;\n  result_4 = result_4;\n  result_5 = result_5;\n  FUN_001078c0(input_9,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "decompile_and_process_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0"
            },
            "code": "\nundefined8 getOne_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "get_default_value_00107640",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t get_default_value_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_default_value_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_archive_member_00102e6f",
                "pcVar1": "baseDirectory",
                "in_RAX": "filePath",
                "uVar2": "baseName",
                "uVar3": "errorMessage",
                "pFVar4": "filePointer",
                "sVar5": "pathLength",
                "pcVar6": "currentChar"
            },
            "code": "\nvoid extractArchiveMember_00102e6f(void)\n\n{\n  char *baseDirectory;\n  char *filePath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  size_t pathLength;\n  char *currentChar;\n  \n  baseDirectory = DAT_0010d5e8;\n  do {\n    filePath = filePath + 1;\n    while (*filePath != '/') {\n      if (*filePath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (pathLength = strlen(DAT_0010d5e8), pathLength != 0)) {\n          if (baseDirectory[pathLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(baseDirectory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(baseDirectory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePointer = fopen(DAT_0010d618,\"w\");\n        if (filePointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentChar = filePath;\n      if ((*filePath == '.') && (currentChar = filePath + 1, filePath[1] == '.')) {\n        currentChar = filePath + 2;\n        if ((filePath[2] == '/') || (filePath[2] == '\\0')) {\n          baseName = lbasename();\n          baseDirectory = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(errorMessage,baseDirectory,baseName);\n          DAT_0010d618 = (char *)baseName;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (filePath = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107920",
                "lbasename",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d",
                "xexit": "exitFunction"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_data_00107890",
                "param_1": "data"
            },
            "code": "\n\n\nvoid printData_00107890(undefined8 data)\n\n{\n  FUN_001079c0(_stdout,data,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_data_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00105af0",
                "FUN_00103c60",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_with_memory_001033d6",
                "param_1": "buffer_input",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "buffer_output",
                "pvVar1": "buffer_ptr",
                "pvVar2": "data_ptr",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ncreate_buffer_with_memory_001033d6(undefined8 buffer_input,undefined8 unused_param,undefined8 unused_param,undefined8 buffer_output)\n\n{\n  void *buffer_ptr;\n  void *data_ptr;\n  undefined return_value [16];\n  \n  buffer_ptr = malloc(0x40);\n  if (buffer_ptr != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer_ptr = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer_ptr + 0x18) = 0x4000;\n    data_ptr = malloc(0x4002);\n    *(void **)((long)buffer_ptr + 8) = data_ptr;\n  } while (data_ptr == (void *)0x0);\n  *(undefined4 *)((long)buffer_ptr + 0x20) = 1;\n  FUN_001031cf(buffer_ptr,buffer_input);\n  return_value._8_8_ = buffer_output;\n  return_value._0_8_ = buffer_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "malloc",
                "FUN_001033b0",
                "FUN_001031cf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_with_memory_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "copy_and_print_00103172",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "should_print",
                "param_4": "additional_data",
                "uVar1": "temp",
                "auVar2": "result"
            },
            "code": "\nundefined  [16]\ncopy_and_print_00103172(undefined8 *source,undefined8 *destination,char should_print,undefined8 additional_data)\n\n{\n  undefined8 temp;\n  undefined result [16];\n  \n  if (should_print != '\\0') {\n    printf(\"r - %s\\n\",*destination);\n  }\n  temp = *source;\n  destination[0x1e] = temp;\n  result._1_7_ = (undefined7)((ulong)temp >> 8);\n  result[0] = 1;\n  *source = destination;\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "copy_and_print_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_matching_pointer_00105870",
                "param_1": "array",
                "param_2": "comparisonType",
                "param_3": "searchValue",
                "iVar1": "filenameComparisonResult",
                "uVar2": "defaultSearchValue",
                "iVar3": "defaultComparisonType"
            },
            "code": "\nlong * findMatchingPointer_00105870(long *array,int comparisonType,undefined8 searchValue)\n\n{\n  int filenameComparisonResult;\n  undefined8 defaultSearchValue;\n  int defaultComparisonType;\n  \n  defaultSearchValue = DAT_0010d638;\n  defaultComparisonType = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultSearchValue = searchValue;\n    defaultComparisonType = comparisonType;\n  }\n  if (defaultComparisonType == 3) {\n    for (; *array != 0; array = (long *)(*array + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*array != (undefined8 *)0x0; array = (long *)(*array + 0xf0)) {\n      filenameComparisonResult = filename_cmp(*(undefined8 *)*array,defaultSearchValue);\n      if (filenameComparisonResult == 0) {\n        if (defaultComparisonType != 2) {\n          return array;\n        }\n        return (long *)(*array + 0xf0);\n      }\n    }\n  }\n  return array;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_matching_pointer_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_from_binary_001030ed",
                "puVar1": "pointer"
            },
            "code": "\nvoid extractDataFromBinary_001030ed(void)\n\n{\n  undefined8 *pointer;\n  \n  pointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)pointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)pointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *pointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_unlink_file_00105bc0",
                "param_1": "source_file",
                "param_2": "destination_file",
                "param_3": "flags",
                "param_4": "result",
                "uVar1": "errno_value",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "uVar4": "translated_error",
                "uVar5": "copy_result",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16] copy_and_unlink_file_00105bc0(char *source_file,char *destination_file,undefined4 flags,undefined8 result)\n\n{\n  uint errno_value;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 translated_error;\n  ulong copy_result;\n  undefined return_value [16];\n  \n  if (destination_file == source_file) {\n    copy_result = 0;\n  }\n  else {\n    errno_value = FUN_00105c00(flags);\n    copy_result = (ulong)errno_value;\n    if (errno_value != 0) {\n      errno_ptr = __errno_location();\n      error_message = strerror(*errno_ptr);\n      translated_error = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(translated_error,destination_file,error_message);\n    }\n    unlink(source_file);\n  }\n  return_value._8_8_ = result;\n  return_value._0_8_ = copy_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_process_data_00107650",
                "param_1": "data",
                "uVar1": "result",
                "lVar2": "count"
            },
            "code": "\nundefined8 check_and_process_data_00107650(undefined8 data)\n\n{\n  undefined8 result;\n  long count;\n  \n  count = FUN_001052a0();\n  if (count < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    count = FUN_00105300(data,0);\n    if (count == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(count);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010284b",
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_001052a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_process_data_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_with_reason_00102f1e",
                "unaff_RBP": "errorCode",
                "unaff_R12": "fileName",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorLocation",
                "auVar3": "returnValues",
                "uVar2": "localizedErrorMessage"
            },
            "code": "\nundefined  [16] copyFileWithReason_00102f1e(void)\n\n{\n  int *errorLocation;\n  undefined8 localizedErrorMessage;\n  ulong errorCode;\n  char *fileName;\n  undefined returnValues [16];\n  undefined8 returnAddress;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(localizedErrorMessage);\n  unlink(fileName);\n  returnValues._0_8_ = errorCode & 0xffffffff;\n  returnValues._8_8_ = returnAddress;\n  return returnValues;\n}\n\n",
            "called": [
                "dcgettext",
                "unlink",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_file_time_error_00102fd7",
                "piVar1": "errorCode",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printFileTimeError_00102fd7(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  \n  errorCode = __errno_location();\n  strerror(*errorCode);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_file_time_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_ar_status_00103ba8",
                "printf": "printMessage",
                "fflush": "flushOutput",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid checkARStatus_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_ar_status_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_001032a8",
                "FUN_00105db0",
                "FUN_00102cd9",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001025a0",
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00102f1e",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001052a0",
                "FUN_00102c25",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001031a5",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_001032a8",
                "FUN_00102f96",
                "FUN_0010342d",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00102e6f",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "execute_data_processing_00103ddc",
                "param_1": "inputData"
            },
            "code": "\nvoid executeDataProcessing_00103ddc(undefined8 inputData)\n\n{\n  FUN_001079c0(DAT_0010d578,inputData,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "execute_data_processing_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "__gnuc_va_list": "arguments",
                "fflush": "flushOutput",
                "fprintf": "printToError",
                "_stderr": "errorOutput",
                "vfprintf": "printFormattedToError",
                "putc": "putCharacterToError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,arguments param_2)\n\n{\n  fflush(_stdout);\n  fprintf(errorOutput,\"%s: \",DAT_0010d660);\n  vfprintf(errorOutput,message,param_2);\n  putc(10,errorOutput);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "program_name",
                "pcVar1": "message"
            },
            "code": "\nvoid print_version_info_001075e0(undefined8 program_name)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",program_name,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "fileList",
                "param_4": "fileListLength",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "fallbackEntry",
                "uVar4": "comparisonResult",
                "plVar5": "entry",
                "local_cc": "count",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *callback,undefined8 *fileList,int fileListLength)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *fallbackEntry;\n  undefined8 comparisonResult;\n  long *entry;\n  int count;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (fileListLength == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entry = *(long **)(archive + 0xf0);\n      count = 0;\n      for (; entry != (long *)0x0; entry = (long *)entry[0x1e]) {\n        if (*(int *)((long)entry + 0xac) == 0) {\n          currentEntry = *entry;\n          if (currentEntry == 0) {\n            fallbackEntry = (long *)entry[0x1d];\n            if ((long *)entry[0x1d] == (long *)0x0) {\n              fallbackEntry = entry;\n            }\n            (**(code **)(fallbackEntry[1] + 0x1e8))(entry,buffer);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = FUN_00105830(currentEntry,archive), currentEntry != 0)) {\n            comparisonResult = FUN_00105830(*fileList,archive);\n            comparisonResult = filename_cmp(comparisonResult,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entry + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      comparisonResult = *fileList;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,comparisonResult);\nLAB_0010553e:\n      fileList = fileList + 1;\n      fileListLength = fileListLength + -1;\n    } while (fileListLength != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010285f",
                "FUN_00105830",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_in_archive_script_001031a5",
                "__format": "errorMessageFormat",
                "uVar1": "updatedVar1"
            },
            "code": "\nvoid printSyntaxErrorInArchiveScript_001031a5(void)\n\n{\n  uint updatedVar1;\n  char *errorMessageFormat;\n  \n  updatedVar1 = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)updatedVar1);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_in_archive_script_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103a78",
                "FUN_00102ba1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_0010266f",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_0010315d",
                "FUN_00105db0",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00107690",
                "FUN_00105a68",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input_param",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "bVar4": "flag",
                "__size": "total_size"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t total_size;\n  undefined8 input_param;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return input_param;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return input_param;\n    }\n    new_size = DAT_0010d580 + 8;\n    total_size = new_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,total_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (total_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)flag * -2 + 1;\n      }\n      return input_param;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return input_param;\n}\n\n",
            "called": [
                "realloc",
                "calloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "functionParams",
                "iVar1": "returnCode",
                "__ptr": "buffer",
                "puVar2": "pointerVar",
                "uVar3": "bytesRead",
                "uVar4": "errorMessage",
                "sVar5": "bytesWritten",
                "piVar6": "errorNumberPointer",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesWritten",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "desiredSize"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *functionParams)\n\n{\n  int returnCode;\n  void *buffer;\n  undefined8 *pointerVar;\n  ulong bytesRead;\n  undefined8 errorMessage;\n  size_t bytesWritten;\n  int *errorNumberPointer;\n  size_t remainingBytes;\n  char *errorString;\n  ulong totalBytesWritten;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong desiredSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  pointerVar = (undefined8 *)functionParams[0x1d];\n  if ((undefined8 *)functionParams[0x1d] == (undefined8 *)0x0) {\n    pointerVar = functionParams;\n  }\n  returnCode = (**(code **)(pointerVar[1] + 0x1e8))(functionParams,stackBuffer);\n  if (returnCode == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*functionParams);\n    }\n    totalBytesWritten = 0;\n    bfd_seek(functionParams,0,0);\n    goto LAB_00103afd;\n  }\n  functionParams = (undefined8 *)*functionParams;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMessage = dcgettext(0,errorString,5);\n    FUN_00107690(errorMessage,functionParams);\n    desiredSize = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errorNumberPointer = __errno_location();\n        errorString = strerror(*errorNumberPointer);\n        FUN_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesWritten = totalBytesWritten + bytesWritten;\nLAB_00103afd:\n      if (desiredSize <= totalBytesWritten) goto LAB_00103b91;\n      remainingBytes = desiredSize - totalBytesWritten;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,functionParams);\n    } while (remainingBytes == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    functionParams = *(undefined8 **)functionParams[0x1d];\n    archiveSize = desiredSize;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "printf",
                "bfd_seek",
                "bfd_bread",
                "__errno_location",
                "free",
                "FUN_00107690",
                "fwrite",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_0010336b",
                "FUN_00105300",
                "FUN_00102d8c",
                "FUN_00105db0",
                "FUN_0010394a",
                "FUN_001078c0",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_001032a8",
                "FUN_0010342d",
                "FUN_00102f96",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "process_archived_file_001058b0",
                "param_1": "filePaths",
                "cVar1": "result",
                "uVar2": "flags",
                "iVar3": "fileDescriptor",
                "uVar4": "archiveHeader",
                "__format": "errorMessage",
                "__ptr": "filePathsCopy",
                "__stream": "fileStream",
                "ppcVar5": "filePointer",
                "uStack0000000000000020": "filePermissions",
                "in_stack_00000028": "fileVersion",
                "in_stack_00000038": "fileSize",
                "local_3c": "archiveHeaderStatus",
                "uStack_33": "firstChar",
                "cStack_32": "secondChar",
                "cStack_31": "thirdChar"
            },
            "code": "\n\n\nvoid processArchivedFile_001058b0(undefined8 *filePaths)\n\n{\n  char result;\n  uint flags;\n  int fileDescriptor;\n  undefined8 archiveHeader;\n  char *errorMessage;\n  void *filePathsCopy;\n  FILE *fileStream;\n  char **filePointer;\n  uint filePermissions;\n  uint fileVersion;\n  undefined8 fileSize;\n  int archiveHeaderStatus [2];\n  undefined firstChar;\n  char secondChar;\n  char thirdChar;\n  \n  archiveHeader = filePaths[0x1e];\n  archiveHeaderStatus[0] = -1;\n  filePathsCopy = (void *)xstrdup(*filePaths);\n  fileStream = (FILE *)FUN_001057a0(filePathsCopy,archiveHeaderStatus);\n  fileDescriptor = archiveHeaderStatus[0];\n  if (fileStream != (FILE *)0x0) {\n    DAT_0010d618 = fileStream;\n    filePointer = (char **)bfd_fdopenw(fileStream,*(undefined8 *)filePaths[1],archiveHeaderStatus[0]);\n    if (filePointer != (char **)0x0) {\n      DAT_0010d5e0 = filePointer;\n      bfd_set_format(filePointer,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)filePointer + 0x49) & 0xfffffff7;\n      *(char *)((long)filePointer + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)filePointer + 0x44) = *(uint *)((long)filePointer + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)filePointer + 0x44) = *(uint *)((long)filePointer + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)filePaths + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)filePointer + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(filePointer,archiveHeader);\n        if (result != '\\0') break;\n        flags = FUN_00107c10(filePathsCopy);\nLAB_00102d37:\n        *(uint *)((long)filePointer + 0x44) = *(uint *)((long)filePointer + 0x44) | 0x100000;\n      }\n      fileDescriptor = dup(fileDescriptor);\n      result = bfd_close(filePointer);\n      if (result == '\\0') {\n        FUN_00107c10(filePathsCopy);\n        errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,errorMessage);\n        flags = filePermissions & 0xf000;\n        if (flags == 0x4000) {\n          firstChar = 100;\n        }\n        else if (flags == 0xa000) {\n          firstChar = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          firstChar = 0x62;\n        }\n        else if (flags == 0x2000) {\n          firstChar = 99;\n        }\n        else if (flags == 0xc000) {\n          firstChar = 0x73;\n        }\n        else {\n          firstChar = 0x70;\n          if (flags != 0x1000) {\n            firstChar = 0x2d;\n          }\n        }\n        secondChar = (-((_filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n        thirdChar = (-((_filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(fileStream,\"%s %ld/%ld %6lu %s \",&secondChar,_filePermissions >> 0x20,\n                (ulong)fileVersion,fileSize,&stack0xffffffffffffffd8,\n                _filePermissions & 0xffffffff);\n        fputs(*filePointer,fileStream);\n        if ((char)filePaths != '\\0') {\n          if ((*(byte *)((long)filePointer + 0x49) & 0x10) == 0) {\n            if (filePointer[0xb] != (char *)0x0) {\n              fprintf(fileStream,\" 0x%lx\");\n            }\n          }\n          else if (filePointer[0xc] != (char *)0x0) {\n            fprintf(fileStream,\" 0x%lx\");\n          }\n        }\n        fputc(10,fileStream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(filePaths);\n      fileDescriptor = FUN_00105bc0(fileStream,filePathsCopy,fileDescriptor);\n      if (fileDescriptor == 0) {\n        free(filePathsCopy);\n        free(fileStream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(fileDescriptor);\n    FUN_00107c10(filePathsCopy);\n  }\n  archiveHeader = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(archiveHeader);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00107c10",
                "close",
                "bfd_fdopenw",
                "FUN_001057a0",
                "xstrdup",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_file_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "closeCache",
                "unlink_if_ordinary": "removeFile"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105db0",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105af0",
                "FUN_00105300",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_modification_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileAttributes",
                "iVar1": "returnValue",
                "piVar2": "errorCode",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "modificationTime",
                "uStack_34": "stackVar1",
                "uStack_30": "stackVar2",
                "uStack_2c": "stackVar3",
                "local_28": "stackVar4"
            },
            "code": "\nvoid setFileModificationTime_00107c80(char *filePath,long fileAttributes)\n\n{\n  int returnValue;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 modificationTime;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  undefined4 stackVar3;\n  undefined4 stackVar4;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  stackVar4 = *(undefined4 *)(fileAttributes + 0x58);\n  uStack_24 = *(undefined4 *)(fileAttributes + 0x5c);\n  uStack_20 = *(undefined4 *)(fileAttributes + 0x60);\n  uStack_1c = *(undefined4 *)(fileAttributes + 100);\n  modificationTime = *(undefined4 *)(fileAttributes + 0x48);\n  stackVar1 = *(undefined4 *)(fileAttributes + 0x4c);\n  stackVar2 = *(undefined4 *)(fileAttributes + 0x50);\n  stackVar3 = *(undefined4 *)(fileAttributes + 0x54);\n  returnValue = utimensat(-100,filePath,(timespec *)&modificationTime,0);\n  if (returnValue != 0) {\n    errorCode = __errno_location();\n    errorMessage = strerror(*errorCode);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_to_file_00105a20",
                "param_1": "outputPath",
                "pcVar1": "archivePath",
                "pcVar2": "currentDir",
                "uVar3": "basenameResult",
                "uVar4": "errorString",
                "pFVar5": "filePtr",
                "sVar6": "archivePathLength"
            },
            "code": "\nvoid extractArchiveMemberToFile_00105a20(char *outputPath)\n\n{\n  char *archivePath;\n  char *currentDir;\n  undefined8 basenameResult;\n  undefined8 errorString;\n  FILE *filePtr;\n  size_t archivePathLength;\n  \n  archivePath = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    basenameResult = lbasename();\n    archivePath = DAT_0010d618;\n    errorString = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(errorString,archivePath,basenameResult);\n    DAT_0010d618 = (char *)basenameResult;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (archivePathLength = strlen(DAT_0010d5e8), archivePathLength != 0)) {\n        if (archivePath[archivePathLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(archivePath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(archivePath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePtr = fopen(DAT_0010d618,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentDir = outputPath;\n    if ((*outputPath == '.') && (currentDir = outputPath + 1, outputPath[1] == '.')) {\n      currentDir = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentDir != '\\0' && (*currentDir != '/')); currentDir = currentDir + 1) {\n    }\n    for (; outputPath = currentDir, *currentDir == '/'; currentDir = currentDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_archive_member_to_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "handle_close_error_00102f55",
                "piVar2": "errno_ptr",
                "iVar1": "errno_value"
            },
            "code": "\nundefined8 handle_close_error_00102f55(void)\n\n{\n  int errno_value;\n  int *errno_ptr;\n  int unaff_R12D;\n  \n  errno_ptr = __errno_location();\n  errno_value = *errno_ptr;\n  close(unaff_R12D);\n  *errno_ptr = errno_value;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "handle_close_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_path_and_create_temp_file_001057a0",
                "param_1": "path",
                "param_2": "file_descriptor",
                "param_3": "unknown_param_1",
                "param_4": "unknown_param_2",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "path_offset",
                "lVar4": "index",
                "lVar5": "last_slash_offset",
                "pcVar6": "new_path",
                "bVar7": "is_last_slash",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_path_and_create_temp_file_001057a0(char *path,int *file_descriptor,undefined8 unknown_param_1,undefined8 unknown_param_2)\n\n{\n  int result;\n  char *last_slash;\n  long path_offset;\n  long index;\n  long last_slash_offset;\n  char *new_path;\n  byte is_last_slash;\n  undefined return_value [16];\n  \n  is_last_slash = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    path_offset = 0;\n  }\n  else {\n    last_slash_offset = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(last_slash_offset + 0xb);\n    path_offset = last_slash_offset + 1;\n    new_path = last_slash;\n    for (index = last_slash_offset; index != 0; index = index + -1) {\n      *new_path = *path;\n      path = path + (ulong)is_last_slash * -2 + 1;\n      new_path = new_path + (ulong)is_last_slash * -2 + 1;\n    }\n    last_slash[last_slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + path_offset) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + path_offset) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_path = last_slash;\n  }\n  return_value._8_8_ = unknown_param_2;\n  return_value._0_8_ = new_path;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "mkstemp",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_001058b0",
                "FUN_00103c60"
            ],
            "imported": false,
            "current_name": "extract_path_and_create_temp_file_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "format_time_data_00102d8c",
                "param_9": "flag1",
                "param_19": "flags",
                "uVar1": "bitFlags",
                "uStack0000000000000015": "uVal1",
                "uStack000000000000001f": "uVal2",
                "uStack000000000000006c": "val1",
                "param_20": "val2",
                "param_22": "val3",
                "unaff_RBX": "fileData",
                "unaff_RBP": "filePtr",
                "unaff_R12B": "isNotNull"
            },
            "code": "\nvoid formatTimeData_00102d8c(void)\n\n{\n  char *__format;\n  uint bitFlags;\n  char **fileData;\n  FILE *filePtr;\n  char isNotNull;\n  undefined uVal1;\n  char cStack0000000000000016;\n  char cStack0000000000000017;\n  char flag1;\n  char cStack0000000000000019;\n  char cStack000000000000001a;\n  char cStack000000000000001b;\n  char cStack000000000000001c;\n  char cStack000000000000001d;\n  char cStack000000000000001e;\n  undefined uVal2;\n  uint flags;\n  uint val1;\n  uint val2;\n  undefined8 val3;\n  \n  __format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,__format);\n  bitFlags = flags & 0xf000;\n  if (bitFlags == 0x4000) {\n    uVal1 = 100;\n  }\n  else if (bitFlags == 0xa000) {\n    uVal1 = 0x6c;\n  }\n  else if (bitFlags == 0x6000) {\n    uVal1 = 0x62;\n  }\n  else if (bitFlags == 0x2000) {\n    uVal1 = 99;\n  }\n  else if (bitFlags == 0xc000) {\n    uVal1 = 0x73;\n  }\n  else {\n    uVal1 = 0x70;\n    if (bitFlags != 0x1000) {\n      uVal1 = 0x2d;\n    }\n  }\n  cStack0000000000000016 = (-((flags & 0x100) == 0) & 0xbbU) + 0x72;\n  cStack0000000000000017 = (-((flags & 0x80) == 0) & 0xb6U) + 0x77;\n  flag1 = (-((flags & 0x40) == 0) & 0xb5U) + 0x78;\n  cStack0000000000000019 = (-((flags & 0x20) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001a = (-((flags & 0x10) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001b = (-((flags & 8) == 0) & 0xb5U) + 0x78;\n  cStack000000000000001c = (-((flags & 4) == 0) & 0xbbU) + 0x72;\n  cStack000000000000001d = (-((flags & 2) == 0) & 0xb6U) + 0x77;\n  cStack000000000000001e = (-((flags & 1) == 0) & 0xb5U) + 0x78;\n  if ((flags & 0x800) != 0) {\n    if (flag1 == 'x') {\n      flag1 = 's';\n    }\n    else {\n      flag1 = 'S';\n    }\n  }\n  if ((flags & 0x400) != 0) {\n    if (cStack000000000000001b == 'x') {\n      cStack000000000000001b = 's';\n    }\n    else {\n      cStack000000000000001b = 'S';\n    }\n  }\n  if ((flags & 0x200) != 0) {\n    if (cStack000000000000001e == 'x') {\n      cStack000000000000001e = 't';\n    }\n    else {\n      cStack000000000000001e = 'T';\n    }\n  }\n  uVal2 = 0;\n  fprintf(filePtr,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)val1,\n          (ulong)val2,val3,&stack0x00000020,(ulong)flags);\n  fputs(*fileData,filePtr);\n  if (isNotNull != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(filePtr,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(filePtr,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePtr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputs",
                "fprintf",
                "fputc",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "format_time_data_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001031cf",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "extract_archive_files_00105300",
                "param_1": "archive_path",
                "param_2": "output_files",
                "plVar1": "file_pointer",
                "pcVar2": "plugin",
                "bVar3": "is_thin_library",
                "cVar4": "conversion_error",
                "iVar5": "result",
                "uVar6": "error_message",
                "uVar7": "file_name",
                "piVar8": "errno_pointer",
                "lVar9": "file_descriptor",
                "puVar10": "converted_files",
                "local_b0": "stat_struct",
                "local_a8": "file_stat",
                "_stderr": "standard_error",
                "bfd_set_error": "set_bfd_error",
                "__errno_location": "get_errno_location",
                "fprintf": "print_error",
                "perror": "print_error_message",
                "bfd_openw": "open_file_write_mode",
                "bfd_set_format": "set_bfd_format",
                "bfd_close": "close_bfd",
                "LAB_00102812": "handle_conversion_error",
                "bfd_get_error": "get_bfd_error",
                "xexit": "exit_program"
            },
            "code": "\n\n\nundefined8 * extract_archive_files_00105300(char *archive_path,undefined8 *output_files)\n\n{\n  long *file_pointer;\n  char *plugin;\n  byte is_thin_library;\n  char conversion_error;\n  int result;\n  undefined8 error_message;\n  undefined8 file_name;\n  int *errno_pointer;\n  long file_descriptor;\n  undefined8 *converted_files;\n  undefined8 stat_struct;\n  stat file_stat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  result = stat(archive_path,&file_stat);\n  plugin = DAT_0010d618;\n  if (result == 0) goto LAB_001053be;\n  errno_pointer = __errno_location();\n  if (*errno_pointer == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(standard_error,\"%s: \",DAT_0010d660);\n      perror(archive_path);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (output_files != (undefined8 *)0x0)) {\n      converted_files = (undefined8 *)FUN_00102710();\n      return converted_files;\n    }\n    output_files = (undefined8 *)bfd_openw(archive_path,DAT_0010d5f0);\n    if (((output_files != (undefined8 *)0x0) && (conversion_error = bfd_set_format(output_files,2), conversion_error != '\\0')) &&\n       (conversion_error = bfd_close(output_files), conversion_error != '\\0')) {\n      plugin = archive_path;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(archive_path);\n  do {\n    is_thin_library = *(byte *)((long)output_files + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_library != 0) {\n        file_name = *output_files;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,file_name);\n        goto handle_conversion_error;\n      }\n    }\n    else if (is_thin_library == 0) {\n      file_name = *output_files;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,file_name);\nLAB_001027cb:\n      FUN_00107c20(archive_path);\n      result = bfd_get_error();\n      if (result == 0xd) {\nhandle_conversion_error:\n        FUN_00103bd1(stat_struct);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      file_pointer = output_files + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_files,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_files,file_descriptor)) {\n        *file_pointer = file_descriptor;\n        file_pointer = (long *)(file_descriptor + 0xf0);\n      }\n      *file_pointer = 0;\n      result = bfd_get_error();\n      if (result == 9) {\n        return output_files;\n      }\n      do {\n        FUN_00107c10(archive_path);\nLAB_00102826:\n        file_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(file_name,archive_path);\n        plugin = archive_path;\nLAB_001053be:\n        DAT_0010d618 = plugin;\n        output_files = (undefined8 *)bfd_openr(archive_path,DAT_0010d5f0);\n      } while (output_files == (undefined8 *)0x0);\n      conversion_error = bfd_check_format_matches(output_files,2,&stat_struct);\n      if (conversion_error == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_files,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "FUN_00103bd1",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_close",
                "__errno_location",
                "FUN_00107920",
                "bfd_set_error",
                "FUN_00107690",
                "stat",
                "fprintf",
                "bfd_openw",
                "FUN_00107c20",
                "FUN_00102710",
                "perror",
                "FUN_0010315d",
                "xexit",
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_archive_files_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_file_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePtr1",
                "puVar2": "uintPtr1",
                "bVar3": "byteVar1",
                "plVar4": "longPtr1",
                "puVar5": "undefined8Ptr1",
                "uVar6": "undefined4Var1",
                "uVar7": "undefined4Var2",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "charPtrPtr1",
                "piVar11": "intPtr1",
                "puVar12": "undefinedPtr1",
                "bVar13": "byteVar2",
                "cVar14": "charVar1",
                "iVar15": "intVar1",
                "uVar16": "uintVar1",
                "uVar17": "undefined4Var3",
                "pFVar18": "filePtr1",
                "sVar19": "size_tVar1",
                "sVar20": "size_tVar2",
                "__ptr": "bytePtr2",
                "plVar21": "longPtr2",
                "pFVar22": "filePtr2",
                "pcVar23": "charPtr1",
                "lVar24": "longVar4",
                "uVar25": "ulongVar1",
                "puVar26": "undefined8Ptr2",
                "uVar27": "undefined8Var1",
                "pFVar28": "filePtr3",
                "lVar34": "longVar6",
                "lVar35": "longVar5",
                "uVar37": "uintVar3",
                "unaff_RBP": "charPtr2",
                "pbVar38": "bytePtr3",
                "pcVar39": "charPtr3",
                "pplVar29": "longPtrPtr1",
                "uVar30": "undefined8Var2",
                "local_130": "fileVar1",
                "local_128": "fileVar2",
                "local_118": "bytePtr4",
                "local_110": "charPtrPtr2",
                "local_100": "longVar7"
            },
            "code": "\n\n\nvoid processFile_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePtr1;\n  uint *uintPtr1;\n  byte byteVar1;\n  long *longPtr1;\n  undefined8 *undefined8Ptr1;\n  undefined4 undefined4Var1;\n  undefined4 undefined4Var2;\n  bool boolVar1;\n  bool boolVar2;\n  char **charPtrPtr1;\n  int *intPtr1;\n  undefined *undefinedPtr1;\n  byte byteVar2;\n  char charVar1;\n  int intVar1;\n  uint uintVar1;\n  undefined4 undefined4Var3;\n  FILE *filePtr1;\n  size_t size_tVar1;\n  size_t size_tVar2;\n  byte *bytePtr2;\n  long *longPtr2;\n  FILE *filePtr2;\n  char *charPtr1;\n  long longVar4;\n  ulong ulongVar1;\n  undefined8 *undefined8Ptr2;\n  undefined8 undefined8Var1;\n  FILE *filePtr3;\n  long **longPtrPtr1;\n  undefined8 undefined8Var2;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar13;\n  long longVar6;\n  long longVar5;\n  undefined **ppuVar36;\n  uint uintVar3;\n  char *charPtr2;\n  byte *bytePtr3;\n  char *charPtr3;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 fileVar1;\n  FILE *fileVar2;\n  byte *bytePtr4;\n  char **charPtrPtr2;\n  size_t local_108;\n  long longVar7;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePtr1 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPtrPtr2 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  fileVar2 = (FILE *)0x0;\n  filePtr2 = argv;\n  do {\n    uintVar1 = (uint)unaff_R12;\n    charPtr2 = (char *)(long)(int)uintVar1;\n    fileVar1 = (FILE *)((long)charPtr2 * 8);\n    pcVar43 = (char *)filePtr2;\n    if (**(char **)(&filePtr2->_flags + (long)charPtr2 * 2) == '@') {\n      uVar44 = (int)charPtrPtr2 - 1;\n      charPtrPtr2 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        longPtr2 = *(long **)filePtr2;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPtr2);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      charPtr3 = *(char **)(&filePtr2->_flags + (long)charPtr2 * 2) + 1;\n      intVar1 = stat(charPtr3,(stat *)local_c8);\n      if (-1 < intVar1) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          longPtr2 = *(long **)filePtr2;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePtr1 = fopen(charPtr3,\"r\");\n        if (filePtr1 != (FILE *)0x0) {\n          intVar1 = fseek(filePtr1,0,2);\n          if (((intVar1 != -1) && (size_tVar1 = ftell(filePtr1), size_tVar1 != 0xffffffffffffffff)) &&\n             (intVar1 = fseek(filePtr1,0,0), intVar1 != -1)) {\n            bytePtr4 = (byte *)xmalloc(size_tVar1 + 1);\n            size_tVar2 = fread(bytePtr4,1,size_tVar1,filePtr1);\n            if ((size_tVar1 == size_tVar2) || (intVar1 = ferror(filePtr1), intVar1 == 0)) {\n              bytePtr4[size_tVar2] = 0;\n              byteVar2 = *bytePtr4;\n              pbyteVar13 = bytePtr4;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar13[1];\n                pbyteVar13 = pbyteVar13 + 1;\n              }\n              size_tVar1 = strlen((char *)bytePtr4);\n              bytePtr2 = (byte *)xmalloc(size_tVar1 + 1);\n              filePtr3 = (FILE *)0x0;\n              intVar1 = 0;\n              boolVar2 = false;\n              bVar47 = false;\n              boolVar1 = false;\n              longVar7 = 0;\n              pbyteVar13 = bytePtr4;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar13 * 2] & 0x40) != 0) {\n                  pbyteVar13 = pbyteVar13 + 1;\n                }\n                if ((intVar1 == 0) || (intVar1 + -1 <= (int)longVar7)) {\n                  if (filePtr3 == (FILE *)0x0) {\n                    intVar1 = 8;\n                    filePtr3 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar7 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar1 = intVar1 * 2;\n                    filePtr3 = (FILE *)xrealloc(filePtr3,(long)intVar1 << 3);\n                    ppcVar31 = (char **)((long)&filePtr3->_flags + longVar7 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr3->_flags + longVar7 * 8);\n                }\n                byteVar2 = *pbyteVar13;\n                bytePtr3 = bytePtr2;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | bVar47))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar13 = pbyteVar13 + 1;\n                    *bytePtr3 = byteVar2;\n                    bytePtr3 = bytePtr3 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar13;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar2 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *bytePtr3 = byteVar2;\n                      bytePtr3 = bytePtr3 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  bytePtr1 = pbyteVar13 + 1;\n                  pbyteVar13 = pbyteVar13 + 1;\n                  byteVar2 = *bytePtr1;\n                }\nLAB_0010606f:\n                *bytePtr3 = 0;\n                longPtr2 = (long *)xstrdup(bytePtr2);\n                *ppcVar31 = (char *)longPtr2;\n                *(undefined8 *)(filePtr3->_shortbuf + longVar7 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar13;\n                byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar1 & 0x40) != 0) {\n                  byteVar2 = pbyteVar13[1];\n                  pbyteVar13 = pbyteVar13 + 1;\n                  byteVar1 = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                longVar7 = longVar7 + 1;\n                if (byteVar2 == 0) {\n                  free(bytePtr2);\n                  if (filePtr2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePtr4);\n          }\n          fclose(filePtr1);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar1 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar1 = (uint)unaff_R12;\n        intVar1 = bfd_init();\n        charPtr3 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar1 != 0x118) goto LAB_00106803;\n        charPtr3 = \"x86_64-pc-linux-gnu\";\n        uintVar1 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPtr1 = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar1;\n        if ((char)uintVar1 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPtr1 = PTR_DAT_0010d2e0;\n            intVar1 = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar1 + 1;\n            *(code **)(undefinedPtr1 + (long)intVar1 * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            undefined8Ptr2 = (undefined8 *)malloc(0x110);\n            if (undefined8Ptr2 != (undefined8 *)0x0) {\n              *undefined8Ptr2 = undefinedPtr1;\n              *(undefined4 *)(undefined8Ptr2 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Ptr2;\n              goto LAB_0010632b;\n            }\n          }\n          longVar4 = 1;\n          do {\n            longVar5 = longVar4;\n            intVar1 = (int)pcVar46;\n            if (intVar1 <= (int)longVar5) break;\n            charVar1 = FUN_00107640(*(undefined8 *)((int *)pcVar43 + longVar5 * 2));\n            longVar4 = longVar5 + 1;\n          } while (charVar1 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar5 * 8 + -8);\n          uVar44 = intVar1 - ((int)longVar5 + -1);\n          filePtr1 = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar3 = 0;\n            while (intVar1 = getopt_long(filePtr1,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar1 != -1)\n            {\n              if (intVar1 < 0x77) {\n                if (0x43 < intVar1) {\n                  switch(intVar1) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintVar3 = uintVar1;\n                  }\n                }\n              }\n              else if (intVar1 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              charPtr3 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                charPtr3 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uintVar3 != '\\0') break;\n                uintVar1 = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar1);\n              }\n            }\n            while (longVar4 = FUN_001052a0(charPtr3), longVar4 < 1) {\n              uintVar1 = 1;\nLAB_001071c4:\n              intPtr1 = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPtr1 + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar1);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              charPtr3 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPtr1 * 8 + -0x7b);\n            }\n            intVar1 = open(charPtr3,2,0);\n            if (intVar1 < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(charPtr3);\nLAB_0010737f:\n              FUN_00107c10(charPtr3);\nLAB_00107387:\n              FUN_00107c20(charPtr3);\n              intVar1 = bfd_get_error();\n              if (intVar1 == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            charPtr2 = (char *)bfd_fdopenr(charPtr3,0);\n            if ((FILE *)charPtr2 == (FILE *)0x0) goto LAB_0010737f;\n            charVar1 = bfd_check_format_matches(charPtr2,2,local_c8);\n            if (charVar1 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)charPtr2 + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPtr1 = (uint *)((long)((long)charPtr2 + 0x40) + 4);\n                *uintPtr1 = *uintPtr1 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)charPtr2 + 8) + 0x1f0))(charPtr2);\n              charVar1 = bfd_close(charPtr2);\n              if (charVar1 != '\\0') {\n                uintVar1 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var1 = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8Var1,charPtr3);\nLAB_001073cc:\n            charPtr3 = (char *)lbasename(DAT_0010d660);\n            size_tVar1 = strlen(charPtr3);\n            if ((size_tVar1 < 6) ||\n               (intVar1 = filename_cmp(charPtr3 + (size_tVar1 - 6),\"ranlib\"), intVar1 != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          charPtr2 = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePtr2 = (FILE *)charPtr2;\n          filePtr3 = filePtr1;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          fileVar1 = (FILE *)CONCAT71(fileVar1._1_7_,(char)uintVar1);\nLAB_001063a3:\n          filePtr2 = (FILE *)charPtr2;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            size_tVar1 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar1 = (int)size_tVar1 + (int)filePtr1;\n            unaff_R12 = (FILE *)xmalloc((long)intVar1 * 8);\n            undefined4Var3 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4Var3;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            fileVar2 = (FILE *)((long)pcVar46 + 0x10);\n            charPtrPtr2 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePtr4 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              charPtr3 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = charPtr3;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                charPtr3 = (char *)xstrdup(bytePtr4);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = charPtr3;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  charPtr3 = (char *)xstrdup(bytePtr4);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = charPtr3;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    charPtr3 = (char *)xstrdup(bytePtr4);\n                    unaff_R12->_IO_write_base = charPtr3;\n                    charVar1 = *(char *)((long)ppcVar31 + 4);\n                    charPtrPtr2 = ppcVar32;\n                    if (charVar1 != '\\0') {\n                      charPtr3 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar1;\n                        charPtr1 = (char *)xstrdup(bytePtr4);\n                        charPtr3 = charPtr3 + 1;\n                        *ppcVar31 = charPtr1;\n                        charVar1 = *charPtr3;\n                        ppcVar31 = ppcVar32;\n                        charPtrPtr2 = ppcVar32;\n                      } while (charVar1 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar4 = (long)(int)filePtr1;\n            intPtr1 = (int *)pcVar46 + longVar4 * 2;\n            if (fileVar2 < intPtr1) {\n              ulongVar1 = longVar4 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPtr1) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPtr1 &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPtr1)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPtr1)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPtr1)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPtrPtr1 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPtr1;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *charPtrPtr1 = *ppcVar31;\n                    charPtrPtr1 = charPtrPtr1 + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Var3 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefined4Var1 = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefined4Var2 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Var3;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4Var1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4Var2;\n                undefined4Var3 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefined4Var1 = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefined4Var2 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar1 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Var3;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4Var1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4Var2;\n                if (ulongVar1 != 2) {\n                  undefined4Var3 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefined4Var1 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefined4Var2 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Var3;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4Var1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4Var2;\n                  if (ulongVar1 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      charPtr3 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefined4Var3 = *(undefined4 *)(charPtr3 + 4);\n                      undefined4Var1 = *(undefined4 *)(charPtr3 + 8);\n                      undefined4Var2 = *(undefined4 *)(charPtr3 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)charPtr3;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Var3;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4Var1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4Var2;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar1);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)fileVar2 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar4 + -2;\n            }\n            filePtr1 = (FILE *)(ulong)(intVar1 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar1 = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)filePtr1 & 0xffffffff,pcVar46,filePtr2,ppuVar36,0);\n            charPtr2 = (char *)filePtr2;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePtr3 = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)filePtr3;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          filePtr2 = (FILE *)charPtr2;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePtr1 <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar1 = (int)filePtr1 - (_optind + -1);\n            filePtr1 = (FILE *)(ulong)uintVar1;\n            _optind = 0;\n            if (1 < (int)uintVar1) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)fileVar1 & 0xff);\n          uintVar1 = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePtr3 = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  charPtr3 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4Var3 = FUN_00107650();\n                    \n                  xexit(undefined4Var3);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  charPtr3 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              charPtr2 = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                charPtr2 = (char *)0x1;\n                charPtr3 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                charPtr3 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar1 = (int)charPtr2;\n                  if (*(char **)((long)ppuVar36 + (long)intVar1 * 2 * 4) == (char *)0x0) {\n                    undefined8Var1 = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8Var1);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      charPtr3 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  charPtr2 = (char *)(ulong)(intVar1 + 1);\n                  longVar4 = strtol(*(char **)((long)ppuVar36 + (long)intVar1 * 2 * 4),(char **)0x0,10)\n                  ;\n                  charPtr3 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar4;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar4 = (long)(int)charPtr2;\n              filePtr2 = (FILE *)charPtr2;\n              if (*(long *)(int *)((long)ppuVar36 + longVar4 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePtr2 = (FILE *)((long)ppuVar36 + (longVar4 + 1) * 2 * 4);\n              if (*(FILE **)filePtr2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePtr2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar4 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar4 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar4 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar4 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePtr1 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePtr1;\n                  filePtr1 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVar4 * 2 * 4) + (long)filePtr1 * 2) !=\n                         0);\n              }\n              undefined8Ptr2 = (undefined8 *)FUN_00105300();\n              filePtr1 = filePtr2;\n              if (DAT_0010d64c == 5) {\n                charPtr3 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Ptr2 + 0x49) & 0x10) == 0) {\n                  charPtr2 = (char *)filePtr2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(undefined8Ptr2,FUN_00107740,charPtr2,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_tVar1 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                charPtr2 = (char *)(size_tVar1 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Ptr2);\n                if (DAT_0010d620 == 0) {\n                  charPtr3 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar4 = bfd_find_target(\"binary\",DAT_0010d620);\n                  charPtr3 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar4 != 0) {\n                    charVar1 = bfd_set_format(DAT_0010d620,1,5);\n                    charPtr3 = \"Cannot set libdeps object format.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    charVar1 = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    charPtr3 = \"Cannot make libdeps object writable.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    filePtr3 = (FILE *)bfd_bwrite(DAT_0010d628,charPtr2,DAT_0010d620);\n                    charPtr3 = \"Cannot write libdeps record.\";\n                    if (filePtr3 != (FILE *)charPtr2) goto LAB_00106803;\n                    charVar1 = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    charPtr3 = \"Cannot make libdeps object readable.\";\n                    if (charVar1 == '\\0') goto LAB_00106803;\n                    longVar4 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    charPtr3 = \"Cannot reset libdeps record type.\";\n                    if (longVar4 == 0) goto LAB_00106803;\n                    intVar1 = (int)pcVar43;\n                    fileVar1 = (FILE *)((long)(intVar1 + 2) * 8);\n                    charPtr2 = (char *)xmalloc(fileVar1,\"Cannot reset libdeps record type.\");\n                    if (intVar1 == 0) {\n                      longVar4 = 0;\n                    }\n                    else {\n                      undefined4Var3 = *(undefined4 *)&filePtr2->field_0x4;\n                      *(int *)charPtr2 = filePtr2->_flags;\n                      *(undefined4 *)((long)charPtr2 + 4) = undefined4Var3;\n                      longVar4 = 8;\n                      ppcVar31 = (char **)((long)charPtr2 + 8);\n                      for (pcVar43 = fileVar1[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePtr2->_flags;\n                        filePtr2 = (FILE *)((long)filePtr2 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)charPtr2 + longVar4) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar1 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)charPtr2 + -0xd8))->_unused2 + 0xc + (long)fileVar1) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePtr2 = (FILE *)charPtr2;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                charPtr2 = (char *)filePtr2;\n                if (filePtr2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePtr1 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                charPtr2 = (char *)filePtr2;\n                if ((filePtr2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(undefined8Ptr2,charPtr2,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                charPtr2 = (char *)filePtr2;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(undefined8Ptr2,FUN_00107890,charPtr2,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                charPtr2 = (char *)filePtr2;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(undefined8Ptr2,FUN_00103a78,charPtr2,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                charPtr3 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePtr2 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePtr1 = (FILE *)(undefined8Ptr2 + 0x1e);\n                do {\n                  unaff_R12 = filePtr1;\n                  if (*(FILE **)filePtr2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(undefined8Ptr2);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPtr2 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePtr2;\n                    if (longPtr2 == (long *)0x0) {\n                      undefined8Var1 = *undefined8Ptr2;\n                      undefined8Var2 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(undefined8Var2,pcVar46,undefined8Var1);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar4 = *longPtr2;\n                    undefined8Var1 = FUN_00105830(pcVar46,undefined8Ptr2);\n                    intVar1 = filename_cmp(undefined8Var1,longVar4);\n                    if (intVar1 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPtr2[0x1e];\n                  longPtrPtr1 = (long **)FUN_00105870(filePtr1,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  longPtr1 = *longPtrPtr1;\n                  *longPtrPtr1 = longPtr2;\n                  longPtr2[0x1e] = (long)longPtr1;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePtr2);\n                  }\n                  filePtr2 = (FILE *)&filePtr2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar1 = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar1);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Var3 = bfd_get_error();\n        filePtr2 = (FILE *)bfd_errmsg(undefined4Var3);\n        undefined8Var1 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar1 = FUN_00107690(undefined8Var1,\"x86_64-pc-linux-gnu\",filePtr2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)charPtr3;\n          filePtr3 = (FILE *)pcVar46;\n          switch(intVar1) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar1 = (uint)unaff_R12;\n            charPtr3 = \"libdeps specified more than once\";\n            charPtr2 = (char *)filePtr2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        charPtr3 = \"two different operation options specified\";\n        charPtr2 = (char *)filePtr2;\nLAB_00106803:\n        undefined8Var1 = dcgettext(0,charPtr3,5);\n        FUN_00107690(undefined8Var1);\nLAB_00106814:\n        intVar1 = (int)pcVar46;\n        filePtr3 = (FILE *)xmalloc(8);\n        *(long **)filePtr3 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar4 = 1;\n            do {\n              intVar1 = (int)longVar4;\n              longVar5 = longVar4 * 2;\n              longVar4 = longVar4 + 1;\n            } while (*(long *)((int *)pcVar43 + longVar5) != 0);\n          }\n          filePtr2 = (FILE *)xmalloc((long)(intVar1 + 1) << 3);\n          longPtr2 = *(long **)pcVar43;\n          longVar4 = 0;\n          while (longPtr2 != (long *)0x0) {\n            undefined8Var1 = xstrdup();\n            *(undefined8 *)((long)&filePtr2->_flags + longVar4) = undefined8Var1;\n            longPtr2 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar4 + -0x7b);\n            longVar4 = longVar4 + 8;\n          }\n          *(undefined8 *)((long)&filePtr2->_flags + longVar4) = 0;\nLAB_0010610a:\n          intVar1 = (int)pcVar46;\n          pcVar43 = (char *)filePtr2;\n          if (*(long **)filePtr3 == (long *)0x0) goto LAB_00106a80;\n          longVar4 = 0;\n          do {\n            longVar6 = longVar4 + 1;\n            longVar5 = longVar4 * 8;\n            longVar4 = longVar6;\n          } while (*(long *)(filePtr3->_shortbuf + longVar5 + -0x7b) != 0);\n          local_108 = longVar6 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar6 = 0;\n          local_108 = 0;\n        }\n        longVar4 = (long)charPtr2 * 2;\n        charPtr2 = (char *)((long)(char **)charPtr2 + longVar6);\n        free(*(void **)((int *)pcVar43 + longVar4));\n        filePtr2 = (FILE *)xrealloc(pcVar43,(longVar6 + 1 + (long)intVar1) * 8);\n        uVar44 = intVar1 + -1 + (int)longVar6;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&filePtr2->_flags + (long)charPtr2 * 2,\n                (void *)((long)&filePtr2->_IO_read_ptr + (long)fileVar1),\n                (long)(int)(intVar1 - uintVar1) << 3);\n        memcpy((void *)((long)&fileVar1->_flags + (long)&filePtr2->_flags),filePtr3,local_108);\n        free(filePtr3);\n        free(bytePtr4);\n        fclose(filePtr1);\n        uintVar1 = (int)fileVar2 + 1;\n        unaff_R12 = fileVar1;\n        pcVar43 = (char *)filePtr2;\n        fileVar1 = filePtr3;\n        if ((int)uintVar1 < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar1 = uintVar1 + 1;\n    fileVar2 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar1;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar1 = getopt_long((ulong)filePtr1 & 0xffffffff,pcVar46,filePtr2,\"x86_64-pc-linux-gnu\");\n  charPtr2 = (char *)filePtr2;\n  if (intVar1 == -1) goto LAB_00106680;\n  if ((0x14 < intVar1 - 100U) || ((0x117201UL >> ((byte)(intVar1 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var1 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8Var1);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)charPtr2 == (FILE *)0x0) {\n    if ((char)filePtr1 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVar1 = strcmp((char *)*(FILE **)charPtr2,\"__.SYMDEF\");\n  undefined8Ptr1 = undefined8Ptr2;\n  if (intVar1 == 0) {\n    *(byte *)((long)undefined8Ptr2 + 0x49) = *(byte *)((long)undefined8Ptr2 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPtr2 = undefined8Ptr1 + 0x1e;\n      if ((undefined8 *)*longPtr2 == (undefined8 *)0x0) break;\n      undefined8Var1 = *(undefined8 *)*longPtr2;\n      undefined8Var2 = FUN_00105830(*(FILE **)charPtr2,undefined8Ptr2);\n      intVar1 = filename_cmp(undefined8Var2,undefined8Var1);\n      if ((intVar1 == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)charPtr2);\n        }\n        *longPtr2 = *(long *)(*longPtr2 + 0xf0);\n        filePtr1 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Ptr1 = (undefined8 *)*longPtr2;\n    }\n    if (DAT_0010d60c != 0) {\n      filePtr2 = *(FILE **)charPtr2;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePtr2);\n    }\n  }\nLAB_00106d38:\n  charPtr2 = (char *)((long)charPtr2 + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_close",
                "FUN_00105300",
                "FUN_00105830",
                "stat",
                "memmove",
                "bfd_init",
                "FUN_00103a78",
                "strlen",
                "getopt_long",
                "ferror",
                "FUN_00107890",
                "xexit",
                "FUN_001075e0",
                "FUN_00105870",
                "FUN_00107c10",
                "strtol",
                "bfd_get_error",
                "bfd_check_format_matches",
                "bfd_errmsg",
                "bfd_find_target",
                "bfd_set_error",
                "bindtextdomain",
                "setlocale",
                "fprintf",
                "FUN_00107c20",
                "bfd_bwrite",
                "fseek",
                "bfd_fdopenr",
                "textdomain",
                "bfd_create",
                "printf",
                "xrealloc",
                "FUN_00107730",
                "fclose",
                "FUN_00107740",
                "FUN_0010342d",
                "xstrdup",
                "strcmp",
                "FUN_00103e95",
                "FUN_00105570",
                "fileno",
                "fopen",
                "FUN_00107cc0",
                "lbasename",
                "bfd_plugin_set_program_name",
                "FUN_0010394a",
                "filename_cmp",
                "FUN_001058b0",
                "bfd_plugin_set_plugin",
                "free",
                "isatty",
                "malloc",
                "bfd_set_format",
                "FUN_00107650",
                "dcgettext",
                "memcpy",
                "xmalloc",
                "FUN_00103bd1",
                "FUN_00105480",
                "FUN_00107920",
                "fread",
                "bfd_make_readable",
                "FUN_001052a0",
                "FUN_00107690",
                "xmalloc_set_program_name",
                "bfd_make_writable",
                "bfd_set_error_program_name",
                "open",
                "FUN_00107640",
                "bfd_set_default_target",
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_file_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "defaultFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 defaultFormat;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  defaultFormat = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,defaultFormat);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatList);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_001058b0",
                "FUN_00105300",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "process_binary_00102710",
                "lVar5": "bfdHandle",
                "plVar1": "archivedFiles",
                "cVar2": "formatCheck",
                "bVar3": "thinConversionFlag",
                "iVar4": "error",
                "uVar6": "errorMsg",
                "uVar7": "file",
                "puVar8": "outputHandle",
                "unaff_RBP": "initialHandle",
                "in_stack_00000008": "fileSpecifier"
            },
            "code": "\n\n\nundefined8 * processBinary_00102710(void)\n\n{\n  long *archivedFiles;\n  char formatCheck;\n  byte thinConversionFlag;\n  int error;\n  long bfdHandle;\n  undefined8 errorMsg;\n  undefined8 file;\n  undefined8 *outputHandle;\n  undefined8 initialHandle;\n  undefined8 fileSpecifier;\n  \n  bfdHandle = bfd_openr();\n  if (bfdHandle != 0) {\n    formatCheck = bfd_check_format(bfdHandle,1);\n    if (formatCheck != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(bfdHandle + 8);\n    }\n    bfd_close(bfdHandle);\n  }\n  outputHandle = (undefined8 *)bfd_openw();\n  if (((outputHandle != (undefined8 *)0x0) && (formatCheck = bfd_set_format(outputHandle,2), formatCheck != '\\0')) &&\n     (formatCheck = bfd_close(outputHandle), formatCheck != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    thinConversionFlag = *(byte *)((long)outputHandle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (thinConversionFlag != 0) {\n        file = *outputHandle;\n        errorMsg = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(errorMsg,file);\n        goto LAB_00102812;\n      }\n    }\n    else if (thinConversionFlag == 0) {\n      file = *outputHandle;\n      errorMsg = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(errorMsg,file);\nLAB_001027cb:\n      FUN_00107c20();\n      error = bfd_get_error();\n      if (error == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(fileSpecifier);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFiles = outputHandle + 0x1e;\n      for (bfdHandle = bfd_openr_next_archived_file(outputHandle,0); bfdHandle != 0;\n          bfdHandle = bfd_openr_next_archived_file(outputHandle,bfdHandle)) {\n        *archivedFiles = bfdHandle;\n        archivedFiles = (long *)(bfdHandle + 0xf0);\n      }\n      *archivedFiles = 0;\n      error = bfd_get_error();\n      if (error == 9) {\n        return outputHandle;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        file = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(file);\nLAB_001053b7:\n        DAT_0010d618 = initialHandle;\n        outputHandle = (undefined8 *)bfd_openr();\n      } while (outputHandle == (undefined8 *)0x0);\n      formatCheck = bfd_check_format_matches(outputHandle,2,&stack0x00000008);\n      if (formatCheck == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (bfdHandle = bfd_openr_next_archived_file(outputHandle,0), bfdHandle == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "process_binary_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompiled_function_00103e95",
                "pplVar1": "doublePointerVar1",
                "cVar2": "charVar2",
                "ppFVar3": "doublePointerFileVar3",
                "pFVar4": "fileVar4",
                "plVar5": "longVar5",
                "uVar6": "ulongVar6",
                "pbVar7": "byteVar7",
                "iVar8": "intVar8",
                "pcVar10": "charVar10",
                "uVar11": "ulongVar11",
                "iVar9": "intVar9",
                "plVar12": "longVar12",
                "sVar13": "sizeVar13",
                "pvVar14": "voidVar14",
                "pcVar15": "charVar15",
                "pcVar16": "charVar16",
                "lVar17": "longVar17",
                "lVar18": "longVar18",
                "lVar21": "longVar21",
                "uVar20": "uintVar20",
                "lVar31": "longVar31",
                "puVar22": "ulong8Var22",
                "puVar23": "ulong8Var23",
                "uVar24": "uintVar24",
                "iVar25": "intVar25",
                "uVar26": "ulongVar26",
                "ppcVar27": "doublePointerCharVar27",
                "bVar28": "boolVar28",
                "ppcVar29": "doublePointerCharVar29",
                "bVar30": "byteVar30",
                "pbVar32": "byteVar32",
                "pbVar33": "byteVar33",
                "piVar34": "intPointerVar34",
                "pbVar35": "byteVar35",
                "uVar36": "uintVar36",
                "auVar40": "undefinedVar40",
                "auVar41": "undefinedVar41",
                "local_828": "localCharVar828",
                "local_820": "localCharVar820",
                "local_818": "localLongVar818",
                "local_810": "localDoublePointerCharVar810",
                "local_800": "localIntVar800",
                "local_7fc": "localUintVar7fc",
                "local_7f8": "localByteVar7f8",
                "local_7d0": "localStatVar7d0",
                "local_740": "localCharVar740",
                "local_678": "localCharVar678"
            },
            "code": "\n\n\nvoid decompiledFunction_00103e95(void)\n\n{\n  long **doublePointerVar1;\n  char charVar2;\n  FILE **doublePointerFileVar3;\n  FILE *fileVar4;\n  long *longVar5;\n  undefined8 ulongVar6;\n  byte *byteVar7;\n  int intVar8;\n  char *charVar10;\n  undefined8 ulongVar11;\n  int intVar9;\n  long *longVar12;\n  size_t sizeVar13;\n  void *voidVar14;\n  char *charVar15;\n  char *charVar16;\n  long longVar17;\n  long longVar18;\n  ulong uVar19;\n  uint uintVar20;\n  long longVar21;\n  undefined8 *ulong8Var22;\n  undefined8 *ulong8Var23;\n  uint uintVar24;\n  int intVar25;\n  ulong ulongVar26;\n  char **doublePointerCharVar27;\n  bool boolVar28;\n  char **doublePointerCharVar29;\n  byte byteVar30;\n  long longVar31;\n  byte *byteVar32;\n  byte *byteVar33;\n  int *intPointerVar34;\n  byte *byteVar35;\n  uint uintVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined undefinedVar40 [16];\n  undefined undefinedVar41 [16];\n  char *localCharVar828;\n  char *localCharVar820;\n  long localLongVar818;\n  char **localDoublePointerCharVar810;\n  int localIntVar800;\n  uint localUintVar7fc;\n  byte *localByteVar7f8;\n  stat localStatVar7d0;\n  char localCharVar740 [200];\n  char *localCharVar678 [201];\n  \n  bVar39 = 0;\n  longVar18 = 0;\n  DAT_0010d550 = -2;\n  doublePointerCharVar29 = localCharVar678;\n  localIntVar800 = 0;\n  localCharVar828 = localCharVar740;\n  localLongVar818 = 200;\n  localCharVar820 = localCharVar828;\n  localDoublePointerCharVar810 = doublePointerCharVar29;\nLAB_00103ee9:\n  *localCharVar828 = (char)longVar18;\n  if (localCharVar820 + localLongVar818 + -1 <= localCharVar828) {\n    longVar21 = (long)localCharVar828 - (long)localCharVar820;\n    longVar17 = longVar21 + 1;\n    if (localLongVar818 < 10000) {\n      longVar31 = localLongVar818 * 2;\n      localLongVar818 = 10000;\n      if (longVar31 < 0x2711) {\n        localLongVar818 = longVar31;\n      }\n      charVar10 = (char *)malloc(localLongVar818 * 9 + 7);\n      if (charVar10 != (char *)0x0) {\n        longVar31 = longVar17 * 8;\n        charVar15 = localCharVar820;\n        charVar16 = charVar10;\n        for (; longVar17 != 0; longVar17 = longVar17 + -1) {\n          *charVar16 = *charVar15;\n          charVar15 = charVar15 + (ulong)bVar39 * -2 + 1;\n          charVar16 = charVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(charVar10 + localLongVar818);\n        doublePointerCharVar29 = ppcVar38;\n        for (; longVar31 != 0; longVar31 = longVar31 + -1) {\n          *(undefined *)doublePointerCharVar29 = *(undefined *)localDoublePointerCharVar810;\n          localDoublePointerCharVar810 = (char **)((long)localDoublePointerCharVar810 + (ulong)bVar39 * -2 + 1);\n          doublePointerCharVar29 = (char **)((long)doublePointerCharVar29 + (ulong)bVar39 * -2 + 1);\n        }\n        if (localCharVar820 != localCharVar740) {\n          free(localCharVar820);\n        }\n        localCharVar828 = charVar10 + longVar21;\n        doublePointerCharVar29 = ppcVar38 + longVar21;\n        localCharVar820 = charVar10;\n        localDoublePointerCharVar810 = ppcVar38;\n        if (charVar10 + localLongVar818 + -1 <= localCharVar828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    charVar10 = localCharVar820;\n    if (localCharVar820 == localCharVar740) {\n      return;\n    }\nLAB_00105265:\n    free(charVar10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)longVar18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  charVar2 = (&DAT_0010a200)[iVar37];\n  if (charVar2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          ulong8Var22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          ulongVar11 = FUN_001033d6(DAT_0010d590);\n          *ulong8Var22 = ulongVar11;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      byteVar32 = DAT_0010d5b0;\n      byteVar35 = DAT_0010d5b0;\n      uintVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)uintVar20;\n      ulongVar26 = (ulong)localUintVar7fc;\n      boolVar28 = false;\n      do {\n        byteVar30 = (&DAT_0010ab00)[*byteVar35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          boolVar28 = true;\n          ulongVar26 = uVar19 & 0xffffffff;\n          localByteVar7f8 = byteVar35;\n        }\n        while( true ) {\n          intVar8 = (int)uVar19;\n          longVar18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + (uint)byteVar30);\n          if (intVar8 == *(short *)(&DAT_0010a440 + longVar18 * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)intVar8 * 2)) {\n            byteVar30 = (&DAT_0010a7c0)[(int)(uint)byteVar30];\n          }\n        }\n        byteVar35 = byteVar35 + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + longVar18 * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      localUintVar7fc = (uint)ulongVar26;\n      byteVar33 = byteVar32;\n      if (boolVar28) {\n        DAT_0010d5b8 = localByteVar7f8;\n        DAT_0010d5c0 = localUintVar7fc;\n      }\nLAB_0010419f:\n      intVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (intVar8 == 0) {\n        intVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        byteVar35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)byteVar35 - (int)byteVar33;\n      DAT_0010d588 = *byteVar35;\n      DAT_0010d5b0 = byteVar35;\n      DAT_0010d5c8 = byteVar33;\n      *byteVar35 = 0;\nLAB_001041f0:\n      byteVar32 = DAT_0010d5c8;\n      longVar18 = DAT_0010d5a0;\n      switch(intVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      longVar18 = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uintVar20 = charVar2 + iVar37;\n    if ((0x22 < uintVar20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uintVar20])) goto LAB_001049db;\n    charVar2 = (&DAT_0010a060)[(int)uintVar20];\n    longVar18 = (long)charVar2;\n    if (charVar2 < '\\x01') {\n      iVar37 = -(int)charVar2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    localIntVar800 = localIntVar800 + -1 + (uint)(localIntVar800 == 0);\n    doublePointerCharVar29 = doublePointerCharVar29 + 1;\n    *doublePointerCharVar29 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)longVar18];\n  if ((&DAT_0010a020)[(int)longVar18] == '\\0') {\n    if (localIntVar800 == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[longVar18] != -0xe) &&\n             (uintVar20 = (int)(char)(&DAT_0010a200)[longVar18] + 1, uintVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uintVar20] == '\\x01')) &&\n           (longVar18 = (long)(char)(&DAT_0010a060)[(int)uintVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uintVar20])) goto LAB_00105227;\n        if (localCharVar820 == localCharVar828) goto LAB_0010524c;\n        localCharVar828 = localCharVar828 + -1;\n        doublePointerCharVar29 = doublePointerCharVar29 + -1;\n        longVar18 = (long)*localCharVar828;\n      } while( true );\n    }\n    if (localIntVar800 != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  ulongVar11 = DAT_0010d660;\n  doublePointerCharVar27 = DAT_0010d558;\n  charVar2 = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)doublePointerCharVar29[1 - charVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    ulong8Var22 = (undefined8 *)*doublePointerCharVar29;\n    if (DAT_0010d558 == (char **)0x0) {\n      charVar10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      charVar10 = (char *)dcgettext(0,charVar10,5);\n      fprintf(_stderr,charVar10,ulongVar11);\n      FUN_0010315d();\n    }\n    else {\n      for (; ulong8Var22 != (undefined8 *)0x0; ulong8Var22 = (undefined8 *)ulong8Var22[1]) {\n        for (ulong8Var23 = (undefined8 *)DAT_0010d558[0x1f]; ulong8Var23 != (undefined8 *)0x0;\n            ulong8Var23 = (undefined8 *)ulong8Var23[0x1e]) {\n          intVar8 = filename_cmp(*ulong8Var23);\n          if (intVar8 == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*ulong8Var22,0);\n        ulongVar6 = DAT_0010d660;\n        ulongVar11 = *ulong8Var22;\n        charVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar10,ulongVar6,ulongVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    ulong8Var22 = (undefined8 *)*doublePointerCharVar29;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      charVar10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; ulong8Var22 != (undefined8 *)0x0; ulong8Var22 = (undefined8 *)ulong8Var22[1]) {\n      boolVar28 = false;\n      doublePointerCharVar27 = DAT_0010d558 + 0x1f;\n      for (charVar10 = DAT_0010d558[0x1f]; charVar10 != (char *)0x0;\n          charVar10 = *(char **)(charVar10 + 0xf0)) {\n        intVar8 = filename_cmp();\n        if (intVar8 == 0) {\n          charVar15 = (char *)bfd_openr(*ulong8Var22,0);\n          ulongVar11 = DAT_0010d660;\n          if (charVar15 == (char *)0x0) {\n            ulongVar6 = *ulong8Var22;\n            charVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,charVar15,ulongVar11,ulongVar6);\n            FUN_0010315d();\n          }\n          else {\n            *doublePointerCharVar27 = charVar15;\n            boolVar28 = true;\n            *(undefined8 *)(charVar15 + 0xf0) = *(undefined8 *)(charVar10 + 0xf0);\n          }\n        }\n        else {\n          doublePointerCharVar27 = (char **)(charVar10 + 0xf0);\n        }\n      }\n      if (!boolVar28) {\n        charVar10 = (char *)bfd_openr(*ulong8Var22,0);\n        ulongVar6 = DAT_0010d660;\n        ulongVar11 = *ulong8Var22;\n        charVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar15,ulongVar6,ulongVar11);\n        ulongVar11 = DAT_0010d660;\n        if (charVar10 == (char *)0x0) {\n          ulongVar6 = *ulong8Var22;\n          charVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,charVar10,ulongVar11,ulongVar6);\n          FUN_0010315d();\n        }\n        else {\n          *doublePointerCharVar27 = charVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    ulong8Var22 = (undefined8 *)*doublePointerCharVar29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; ulong8Var22 != (undefined8 *)0x0; ulong8Var22 = (undefined8 *)ulong8Var22[1]) {\n      boolVar28 = false;\n      doublePointerCharVar27 = DAT_0010d558 + 0x1f;\n      for (ulong8Var23 = (undefined8 *)DAT_0010d558[0x1f]; ulongVar11 = DAT_0010d660,\n          ulong8Var23 != (undefined8 *)0x0; ulong8Var23 = (undefined8 *)ulong8Var23[0x1e]) {\n        intVar8 = filename_cmp(*ulong8Var23,*ulong8Var22);\n        if (intVar8 == 0) {\n          boolVar28 = true;\n          *doublePointerCharVar27 = (char *)ulong8Var23[0x1e];\n        }\n        else {\n          doublePointerCharVar27 = (char **)(ulong8Var23 + 0x1e);\n        }\n      }\n      if (!boolVar28) {\n        ulongVar6 = *ulong8Var22;\n        charVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,charVar10,ulongVar11,ulongVar6);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    ulong8Var22 = (undefined8 *)*doublePointerCharVar29;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; ulong8Var22 != (undefined8 *)0x0; ulong8Var22 = (undefined8 *)ulong8Var22[1]) {\n      charVar10 = (char *)bfd_openr(*ulong8Var22,\"plugin\");\n      ulongVar11 = DAT_0010d660;\n      doublePointerCharVar27 = DAT_0010d558;\n      if (charVar10 == (char *)0x0) {\n        ulongVar6 = *ulong8Var22;\n        charVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,charVar10,ulongVar11,ulongVar6);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(charVar10 + 0xf0) = DAT_0010d558[0x1f];\n        doublePointerCharVar27[0x1f] = charVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    charVar10 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    charVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(charVar15,charVar10);\n    for (charVar10 = DAT_0010d558[0x1f]; charVar10 != (char *)0x0; charVar10 = *(char **)(charVar10 + 0xf0))\n    {\n      FUN_00103ddc(charVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(doublePointerCharVar27);\n    charVar10 = DAT_0010d570;\n    intVar8 = stat(DAT_0010d570,&localStatVar7d0);\n    if ((intVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(charVar10,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*doublePointerCharVar29,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*doublePointerCharVar29,1);\n    break;\n  case 0x20:\n    charVar10 = *doublePointerCharVar29;\n    if (DAT_0010d558 == (char **)0x0) {\n      charVar10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    longVar18 = FUN_00105300(doublePointerCharVar29[-1],0);\n    if (longVar18 != 0) {\n      FUN_001032a8(longVar18,FUN_0010312d,charVar10);\n    }\n    break;\n  case 0x21:\n    charVar10 = *doublePointerCharVar29;\n    charVar15 = doublePointerCharVar29[-1];\n    ulongVar11 = FUN_00105300(doublePointerCharVar29[-2],0);\n    if (charVar10 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(charVar10,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(ulongVar11,FUN_00103ddc,charVar15);\n        bfd_close(ulongVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      charVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,charVar16,charVar10);\n    }\n    FUN_001032a8(ulongVar11,FUN_00103ddc,charVar15);\n    bfd_close(ulongVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*doublePointerCharVar29;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)doublePointerCharVar29[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    charVar10 = doublePointerCharVar29[-2];\n    *ppcVar38 = *doublePointerCharVar29;\n    ppcVar38[1] = charVar10;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  longVar18 = (long)charVar2;\n  localCharVar828 = localCharVar828 + -longVar18;\n  doublePointerCharVar29[1 - longVar18] = (char *)ppcVar38;\n  doublePointerCharVar29 = doublePointerCharVar29 + (1 - longVar18);\n  uintVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*localCharVar828;\n  if ((uintVar20 < 0x23) && (*localCharVar828 == (&DAT_0010a0a0)[(int)uintVar20])) {\n    longVar18 = (long)(char)(&DAT_0010a060)[(int)uintVar20];\n  }\n  else {\n    longVar18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  intVar8 = ((int)byteVar35 - (int)DAT_0010d5c8) + -1;\n  *byteVar35 = DAT_0010d588;\n  doublePointerVar1 = (long **)(DAT_0010d5a8 + longVar18 * 8);\n  doublePointerFileVar3 = (FILE **)*doublePointerVar1;\n  if (*(int *)(doublePointerFileVar3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)doublePointerFileVar3 + 0x1c);\n    *(undefined4 *)(doublePointerFileVar3 + 7) = 1;\n    *doublePointerFileVar3 = DAT_0010d590;\n  }\n  byteVar7 = DAT_0010d5b0;\n  fileVar4 = doublePointerFileVar3[1];\n  undefinedVar40._8_8_ = fileVar4;\n  undefinedVar40._0_8_ = doublePointerFileVar3;\n  if ((byte *)((long)&fileVar4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&fileVar4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefinedVar40 = FUN_001033b0();\n    }\n    if (*(int *)(undefinedVar40._0_8_ + 0x34) != 0) {\n      uintVar20 = (int)((long)byteVar7 - (long)byteVar32) - 1;\n      for (longVar18 = 0; (int)longVar18 < (int)uintVar20; longVar18 = longVar18 + 1) {\n        *(byte *)(undefinedVar40._8_8_ + longVar18) = byteVar32[longVar18];\n      }\n      longVar12 = *doublePointerVar1;\n      if (*(int *)(longVar12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)longVar12 + 0x1c) = 0;\nLAB_0010475e:\n        fileVar4 = DAT_0010d590;\n        if (uintVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            ulong8Var22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            ulongVar11 = FUN_001033d6(fileVar4);\n            *ulong8Var22 = ulongVar11;\n          }\n          longVar18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            longVar18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          intVar9 = 1;\n          FUN_001031cf(longVar18);\n          FUN_001030ed();\n        }\n        else {\n          intVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          longVar5 = *doublePointerVar1;\n          uintVar24 = ~uintVar20 + *(int *)(longVar12 + 3);\n          if (0 < (int)uintVar24) break;\n          uintVar24 = (int)DAT_0010d5b0 - (int)(void *)longVar5[1];\n          if (*(int *)(longVar5 + 4) == 0) {\n            longVar5[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          intVar9 = *(int *)(longVar5 + 3);\n          intVar25 = intVar9;\n          if (intVar9 < 1) {\n            intVar25 = intVar9 / 8;\n          }\n          *(int *)(longVar5 + 3) = intVar25 + intVar9;\n          voidVar14 = realloc((void *)longVar5[1],(long)(intVar25 + intVar9 + 2));\n          longVar5[1] = (long)voidVar14;\n          if (voidVar14 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)voidVar14 + (long)(int)uintVar24);\n          longVar12 = *doublePointerVar1;\n        }\n        if (0x2000 < (int)uintVar24) {\n          uintVar24 = 0x2000;\n        }\n        ulongVar26 = (ulong)uintVar24;\n        if (*(int *)((long)longVar5 + 0x24) == 0) {\n          intPointerVar34 = __errno_location();\n          ulongVar26 = (ulong)(int)uintVar24;\n          uVar19 = (ulong)(int)uintVar20;\n          *intPointerVar34 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        intPointerVar34 = (int *)(long)(int)uintVar20;\n        do {\n          intVar9 = getc(DAT_0010d590);\n          uintVar36 = (uint)uVar19;\n          if (intVar9 == -1) {\n            intVar9 = ferror(DAT_0010d590);\n            uintVar24 = uintVar36;\n            if (intVar9 != 0) {\n              do {\n                charVar10 = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *intPointerVar34 = 0;\n                  clearerr((FILE *)charVar10);\nLAB_001046c7:\n                  sizeVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,ulongVar26,DAT_0010d590);\n                  charVar10 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sizeVar13;\n                  uintVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (intVar9 = ferror(DAT_0010d590), uintVar24 = DAT_0010d598, intVar9 == 0))\n                  goto LAB_00104738;\n                } while (*intPointerVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (intVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uintVar20 +\n             (long)(int)uintVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uintVar24 = uintVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uintVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)intPointerVar34) =\n               (char)intVar9;\n          intPointerVar34 = (int *)((long)intPointerVar34 + 1);\n        } while (uintVar24 != uintVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uintVar24;\n        uintVar24 = DAT_0010d598;\n        intVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uintVar24 == 0) goto LAB_0010475e;\n      }\n      longVar12 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      longVar18 = *longVar12;\n      uintVar20 = uintVar20 + DAT_0010d598;\n      if (*(int *)(longVar18 + 0x18) < (int)uintVar20) {\n        intVar25 = ((int)DAT_0010d598 >> 1) + uintVar20;\n        voidVar14 = realloc(*(void **)(longVar18 + 8),(long)intVar25);\n        *(void **)(longVar18 + 8) = voidVar14;\n        undefinedVar41._8_8_ = longVar12;\n        undefinedVar41._0_8_ = *longVar12;\n        if (*(long *)(*longVar12 + 8) == 0) {\n          undefinedVar41 = FUN_001033b0();\n        }\n        longVar12 = undefinedVar41._8_8_;\n        *(int *)(undefinedVar41._0_8_ + 0x18) = intVar25 + -2;\n      }\n      DAT_0010d598 = uintVar20;\n      *(undefined *)(*(long *)(*longVar12 + 8) + (long)(int)uintVar20) = 0;\n      *(undefined *)(*(long *)(*longVar12 + 8) + 1 + (long)(int)uintVar20) = 0;\n      byteVar32 = *(byte **)(*longVar12 + 8);\n      DAT_0010d5c8 = byteVar32;\n      if (intVar9 == 1) goto LAB_001048a4;\n      if (intVar9 == 2) goto LAB_001048ca;\n      byteVar35 = byteVar32 + intVar8;\n      DAT_0010d5b0 = byteVar35;\n      uintVar20 = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)byteVar7 - (long)byteVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    byteVar35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = byteVar35;\n    uVar19 = FUN_0010300e();\n    byteVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  byteVar35 = byteVar32 + intVar8;\n  DAT_0010d5b0 = byteVar35;\n  uVar19 = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = byteVar35;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  ulongVar26 = uVar19 & 0xffffffff;\n  while( true ) {\n    intVar8 = (int)ulongVar26;\n    if (intVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2)) break;\n    ulongVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)intVar8 * 2);\n  }\n  uintVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2);\n  byteVar33 = byteVar32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)intVar8 * 2) + 1) * 2) == 0)\n     || (uintVar20 == 0xb0)) goto LAB_0010419f;\n  byteVar35 = byteVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  intVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *byteVar35 = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  byteVar35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  doublePointerCharVar29 = doublePointerCharVar29 + 1;\n  localIntVar800 = 3;\n  *doublePointerCharVar29 = DAT_0010d548;\nLAB_001049d1:\n  localCharVar828 = localCharVar828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "fopen",
                "bfd_close",
                "FUN_00105300",
                "bfd_cache_close",
                "FUN_00103df9",
                "FUN_00103ddc",
                "stat",
                "filename_cmp",
                "fwrite",
                "FUN_0010312d",
                "FUN_001033d6",
                "unlink",
                "malloc",
                "free",
                "ferror",
                "FUN_00103c60",
                "bfd_set_format",
                "FUN_001031cf",
                "dcgettext",
                "realloc",
                "bfd_openr",
                "getc",
                "__errno_location",
                "fread",
                "FUN_00103ba8",
                "fprintf",
                "bfd_openw",
                "FUN_001030ed",
                "FUN_001033b0",
                "dup",
                "FUN_001031a5",
                "printf",
                "FUN_00105bc0",
                "clearerr",
                "fclose",
                "FUN_0010315d",
                "FUN_001032a8",
                "FUN_00107740",
                "xstrdup",
                "FUN_0010300e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "decompiled_function_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103a78",
                "FUN_00102fd7",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_all_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "i",
                "lVar3": "j",
                "plVar4": "functionList",
                "uVar5": "count"
            },
            "code": "\nvoid executeAllFunctions_00107cc0(void)\n\n{\n  long index;\n  long i;\n  long j;\n  long *functionList;\n  uint count;\n  \n  functionList = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionList[index + 2])();\n        i = index + -1;\n        if (-1 < (int)i) {\n          j = i;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionList[index + 1])();\n                        i = index + -2;\n                      }\n                      (*(code *)functionList[i + 2])();\n                      i = i + -1;\n                    }\n                    (*(code *)functionList[i + 2])();\n                    i = i + -1;\n                  }\n                  (*(code *)functionList[i + 2])();\n                  i = i + -1;\n                }\n                (*(code *)functionList[i + 2])();\n                i = i + -1;\n              }\n              (*(code *)functionList[i + 2])();\n              i = i + -1;\n            }\n            (*(code *)functionList[i + 2])();\n            j = i + -1;\n            if ((int)(i + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionList[j + 2])();\n            index = j + -1;\n            (*(code *)functionList[j + 1])();\n            (*(code *)functionList[j])();\n            (*(code *)functionList[index])();\n            (*(code *)functionList[j + -2])();\n            (*(code *)functionList[j + -3])();\n            (*(code *)functionList[j + -4])();\n            (*(code *)functionList[j + -5])();\n            j = j + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_all_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "execute_function_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "parameter3",
                "param_4": "parameter4"
            },
            "code": "\nvoid executeFunction_00105ae0(undefined8 input1,undefined8 input2,undefined parameter3,undefined parameter4)\n\n{\n  FUN_00105af0(input1,input2,parameter3,parameter4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "execute_function_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105db0",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "extract_data_and_exit_00107690",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "localData",
                "local_c8": "buffer",
                "local_b8": "tempBuffer",
                "local_b0": "data1",
                "local_a8": "data2",
                "local_a0": "data3",
                "local_98": "data4",
                "local_90": "data5",
                "local_88": "extractedInput1",
                "local_78": "extractedInput2",
                "local_68": "extractedInput3",
                "local_58": "extractedInput4",
                "local_48": "extractedInput5",
                "local_38": "extractedInput6",
                "local_28": "extractedInput7",
                "local_18": "extractedInput8"
            },
            "code": "\nvoid extractDataAndExit_00107690(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 offset;\n  undefined *localData;\n  undefined *buffer;\n  undefined tempBuffer [8];\n  undefined8 data1;\n  undefined8 data2;\n  undefined8 data3;\n  undefined8 data4;\n  undefined8 data5;\n  undefined4 extractedInput1;\n  undefined4 extractedInput2;\n  undefined4 extractedInput3;\n  undefined4 extractedInput4;\n  undefined4 extractedInput5;\n  undefined4 extractedInput6;\n  undefined4 extractedInput7;\n  undefined4 extractedInput8;\n  \n  if (condition != '\\0') {\n    extractedInput1 = input1;\n    extractedInput2 = input2;\n    extractedInput3 = input3;\n    extractedInput4 = input4;\n    extractedInput5 = input5;\n    extractedInput6 = input6;\n    extractedInput7 = input7;\n    extractedInput8 = input8;\n  }\n  localData = &stack0x00000008;\n  size = 8;\n  buffer = tempBuffer;\n  offset = 0x30;\n  data1 = param10;\n  data2 = param11;\n  data3 = param12;\n  data4 = param13;\n  data5 = param14;\n  FUN_001078c0(param9,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00103a78",
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_data_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00103a78",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "pcVar2": "targetMsg",
                "__ptr": "targetList",
                "plVar3": "targetPtr",
                "lVar1": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *targetMsg;\n  long *targetList;\n  long *targetPtr;\n  \n  if (target == 0) {\n    targetMsg = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,targetMsg);\n  }\n  else {\n    targetMsg = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,targetMsg,target);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    currentTarget = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "fprintf",
                "fputc",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_filename_00105830",
                "param_1": "file_path",
                "param_2": "buffer",
                "__s": "extracted_filename",
                "uVar3": "num_bytes",
                "pcVar4": "destination",
                "bVar5": "is_negative",
                "lVar1": "buffer_ptr",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractFilename_00105830(char *file_path,long buffer,undefined8 param_3,undefined8 param_4)\n\n{\n  long buffer_ptr;\n  size_t sVar2;\n  char *extracted_filename;\n  ulong num_bytes;\n  char *destination;\n  byte is_negative;\n  undefined result [16];\n  \n  is_negative = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    extracted_filename = (char *)lbasename();\n    file_path = extracted_filename;\n    if ((DAT_0010d5fa != '\\0') && (buffer != 0)) {\n      sVar2 = strlen(extracted_filename);\n      num_bytes = (ulong)*(byte *)(*(long *)(buffer + 8) + 0x1e);\n      if (num_bytes < sVar2) {\n        file_path = (char *)xmalloc(num_bytes + 1);\n        buffer_ptr = *(long *)(buffer + 8);\n        destination = file_path;\n        for (num_bytes = (ulong)*(byte *)(buffer_ptr + 0x1e); num_bytes != 0; num_bytes = num_bytes - 1) {\n          *destination = *extracted_filename;\n          extracted_filename = extracted_filename + (ulong)is_negative * -2 + 1;\n          destination = destination + (ulong)is_negative * -2 + 1;\n        }\n        file_path[*(byte *)(buffer_ptr + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = file_path;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_filename_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_00107730"
            },
            "code": "\nvoid cleanup_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_bfd_error_message_00107c20",
                "param_1": "errorDescription",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "in_R10": "unknown"
            },
            "code": "\n\n\nvoid printBfdErrorMessage_00107c20(long errorDescription)\n\n{\n  int bfdError;\n  undefined8 errorMessage;\n  undefined8 unknown;\n  \n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(bfdError);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorDescription,errorMessage,unknown);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,unknown);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00107c10",
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_bfd_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePointer",
                "param_2": "file",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoLocation",
                "lVar5": "dataPointer"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePointer,FILE *file,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoLocation;\n  long dataPointer;\n  \n  errnoLocation = __errno_location();\n  dataPointer = DAT_0010d5a8;\n  errnoValue = *errnoLocation;\n  if (filePointer == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = file;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePointer == *(FILE ***)(dataPointer + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePointer + 0x1c) = 0;\n    *(undefined *)&filePointer[1]->_flags = 0;\n    *(undefined *)((long)&filePointer[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePointer + 5) = 1;\n    filePointer[2] = filePointer[1];\n    *(undefined4 *)(filePointer + 7) = 0;\n    if (dataPointer != 0) {\n      if (filePointer == *(FILE ***)(dataPointer + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *filePointer = file;\n      *(undefined4 *)((long)filePointer + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePointer = file;\n    *(undefined4 *)((long)filePointer + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePointer + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (file != (FILE *)0x0) {\n    fileDescriptor = fileno(file);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePointer + 0x24) = isTerminal;\n  *errnoLocation = errnoValue;\n  return param5;\n}\n\n",
            "called": [
                "fileno",
                "__errno_location",
                "isatty",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_and_swap_data_0010312d",
                "param_1": "sourcePointer",
                "param_2": "destinationPointer",
                "lVar1": "tempVariable"
            },
            "code": "\nvoid copyAndSwapData_0010312d(long sourcePointer,long destinationPointer)\n\n{\n  long tempVariable;\n  \n  if (destinationPointer != 0) {\n    *(undefined8 *)(destinationPointer + 0xf0) = *(undefined8 *)(sourcePointer + 0xf0);\n  }\n  tempVariable = DAT_0010d558;\n  *(undefined8 *)(sourcePointer + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(tempVariable + 0xf8) = sourcePointer;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_and_swap_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "sourceFD",
                "param_2": "destinationPath",
                "__fd": "destinationFD",
                "_Var3": "filePosition",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "originalError",
                "iVar2": "currentError",
                "piVar6": "errorPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int sourceFD,char *destinationPath)\n\n{\n  int originalError;\n  int destinationFD;\n  int currentError;\n  __off_t filePosition;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errorPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFD) && (filePosition = lseek(sourceFD,0,0), filePosition == 0)) {\n    destinationFD = open(destinationPath,0x201);\n    if (destinationFD < 0) {\n      bytesRead = FUN_00102f55();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(sourceFD,buffer,0x2000);\n      currentError = (int)bytesRead;\n      if (currentError < 1) {\n        errorPointer = __errno_location();\n        originalError = *errorPointer;\n        close(sourceFD);\n        close(destinationFD);\n        if (currentError != 0) {\n          *errorPointer = originalError;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(destinationFD,buffer,(long)currentError);\n    } while (bytesWritten == (long)currentError);\n    errorPointer = __errno_location();\n    currentError = *errorPointer;\n    close(sourceFD);\n    close(destinationFD);\n    *errorPointer = currentError;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "FUN_00102f55",
                "__errno_location",
                "open",
                "write",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_stats_001052a0",
                "param_1": "filePath",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "strerrorResult",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong getFileStats_001052a0(char *filePath)\n\n{\n  int result;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *strerrorResult;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    result = stat(filePath,&fileStats);\n    if (result < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(errorMessage,filePath);\n      }\n      else {\n        strerrorResult = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(errorMessage,filePath,strerrorResult);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001025a0",
                "FUN_00107920",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_file_stats_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "localizedString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *localizedString;\n  \n  localizedString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,localizedString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_00103ba8",
                "FUN_00105a68",
                "FUN_001075e0",
                "FUN_00103e95",
                "FUN_00103172",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_archive_files_00103c60",
                "param_1": "inputArchivePath",
                "param_2": "isPlugin",
                "cVar1": "formatCheckResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMsg",
                "lVar4": "inputArchiveHandle",
                "lVar5": "archivedFileHandle",
                "uVar6": "programName",
                "plVar7": "archivedFileHandlesArray"
            },
            "code": "\n\n\nvoid processArchiveFiles_00103c60(char *inputArchivePath,int isPlugin)\n\n{\n  char formatCheckResult;\n  int *errnoLocation;\n  char *errorMsg;\n  long inputArchiveHandle;\n  long archivedFileHandle;\n  undefined8 programName;\n  long *archivedFileHandlesArray;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errnoLocation = __errno_location();\n    inputArchivePath = strerror(*errnoLocation);\n    programName = DAT_0010d660;\n    errorMsg = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMsg = \"%s: Can\\'t open output archive %s\\n\";\n      inputArchivePath = DAT_0010d560;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchiveHandle = bfd_openr(inputArchivePath,\"plugin\");\n      if (inputArchiveHandle == 0) {\n        errorMsg = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        formatCheckResult = bfd_check_format(inputArchiveHandle,2);\n        if (formatCheckResult != '\\0') {\n          archivedFileHandlesArray = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFileHandle = bfd_openr_next_archived_file(inputArchiveHandle,0); archivedFileHandle != 0;\n              archivedFileHandle = bfd_openr_next_archived_file(inputArchiveHandle,archivedFileHandle)) {\n            *archivedFileHandlesArray = archivedFileHandle;\n            archivedFileHandlesArray = (long *)(archivedFileHandle + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMsg = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = DAT_0010d660;\n    errorMsg = (char *)dcgettext(0,errorMsg,5);\n  }\n  fprintf(_stderr,errorMsg,programName,inputArchivePath);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_openr",
                "bfd_fdopenw",
                "FUN_001057a0",
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "FUN_0010315d",
                "fprintf",
                "xstrdup",
                "bfd_set_format",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_files_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid writeToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "extract_archived_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "is_recursive",
                "param_4": "is_bfd_format",
                "cVar1": "is_valid_bfd_format",
                "uVar2": "num_extracted_files",
                "lVar3": "archived_file",
                "uVar4": "result",
                "bfd_check_format": "check_bfd_format",
                "bfd_openr_next_archived_file": "get_next_archived_file"
            },
            "code": "\nulong extract_archived_files_00105af0(long *file_list,long archive_file,char is_recursive,char is_bfd_format)\n\n{\n  char is_valid_bfd_format;\n  uint num_extracted_files;\n  long archived_file;\n  ulong result;\n  \n  if (is_bfd_format == '\\0') {\n    if (is_recursive != '\\0') {\n      result = FUN_00102f08();\n      return result;\n    }\n  }\n  else {\n    is_valid_bfd_format = bfd_check_format(archive_file,2);\n    if (is_valid_bfd_format != '\\0') {\n      result = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        num_extracted_files = extract_archived_files_00105af0(file_list,archived_file,is_recursive,1);\n        if ((char)num_extracted_files != '\\0') {\n          result = (ulong)num_extracted_files;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return result;\n    }\n    if (is_recursive != '\\0') {\n      result = FUN_00102f08();\n      return result;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_values_0010300e",
                "in_R9": "matchingByteIndex",
                "in_R10D": "matchingByteValue",
                "bVar1": "isMatchFound",
                "iVar2": "currentIndex",
                "lVar3": "nextIndex",
                "bVar4": "lookupValue",
                "pbVar5": "dataPtr"
            },
            "code": "\nvoid findMatchingValues_0010300e(void)\n\n{\n  bool isMatchFound;\n  int currentIndex;\n  long nextIndex;\n  byte lookupValue;\n  byte *dataPtr;\n  byte *matchingByteIndex;\n  int matchingByteValue;\n  \n  isMatchFound = false;\n  currentIndex = DAT_0010d5d0;\n  for (dataPtr = DAT_0010d5c8; dataPtr < DAT_0010d5b0; dataPtr = dataPtr + 1) {\n    lookupValue = 1;\n    if (*dataPtr != 0) {\n      lookupValue = (&DAT_0010ab00)[*dataPtr];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      isMatchFound = true;\n      matchingByteIndex = dataPtr;\n      matchingByteValue = currentIndex;\n    }\n    while( true ) {\n      nextIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)lookupValue);\n      if (*(short *)(&DAT_0010a440 + nextIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        lookupValue = (&DAT_0010a7c0)[(int)(uint)lookupValue];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + nextIndex * 2);\n  }\n  if (isMatchFound) {\n    DAT_0010d5b8 = matchingByteIndex;\n    DAT_0010d5c0 = matchingByteValue;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_values_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_00102ba1",
                "unaff_RBP": "address_to_free",
                "unaff_retaddr": "return_address",
                "auVar1": "return_value"
            },
            "code": "\nundefined  [16] free_and_return_00102ba1(void)\n\n{\n  undefined return_value [16];\n  void *address_to_free;\n  ulong return_address;\n  \n  free(address_to_free);\n  return_value._8_8_ = 0;\n  return_value._0_8_ = return_address;\n  return return_value << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_valid_archive_00107740",
                "param_1": "archive",
                "iVar1": "comparisonResult",
                "iVar2": "returnValue",
                "piVar3": "errnoPointer",
                "pcVar4": "errorMessage",
                "uVar5": "gettextMessage",
                "pplVar6": "archivePointer",
                "__ptr": "buffer",
                "__n": "readSize",
                "lVar7": "loopCounter",
                "plVar8": "currentPointer",
                "puVar9": "localArrayPointer",
                "uVar10": "currentOffset",
                "sVar11": "requestSize",
                "local_c8": "localArray",
                "_Stack_b0": "filePermissions",
                "uStack_98": "fileSize",
                "uStack_80": "oldStackSize",
                "uStack_70": "newStackSize"
            },
            "code": "\n\n\nlong * extractValidArchive_00107740(long **archive)\n\n{\n  int comparisonResult;\n  int returnValue;\n  int *errnoPointer;\n  char *errorMessage;\n  undefined8 gettextMessage;\n  long **archivePointer;\n  void *buffer;\n  size_t readSize;\n  long loopCounter;\n  long *currentPointer;\n  undefined4 *localArrayPointer;\n  ulong currentOffset;\n  size_t requestSize;\n  undefined4 localArray [6];\n  __mode_t filePermissions;\n  ulong fileSize;\n  undefined8 oldStackSize;\n  undefined8 newStackSize;\n  \n  if (_DAT_0010d600 != 0) {\n    localArrayPointer = localArray;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localArrayPointer = 0;\n      localArrayPointer = localArrayPointer + 1;\n    }\n  }\n  archivePointer = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archivePointer = archive;\n  }\n  returnValue = (*(code *)archivePointer[1][0x3d])(archive,localArray);\n  if (returnValue != 0) {\n    currentPointer = *archive;\n    gettextMessage = dcgettext(0,\"internal stat error on %s\",5);\n    returnValue = FUN_00107690(gettextMessage,currentPointer);\n    gettextMessage = DAT_0010d638;\n    if (returnValue == 3) {\n      for (; *currentPointer != 0; currentPointer = (long *)(*currentPointer + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentPointer != (undefined8 *)0x0; currentPointer = (long *)(*currentPointer + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentPointer,gettextMessage);\n        if (comparisonResult == 0) {\n          if (returnValue != 2) {\n            return currentPointer;\n          }\n          return (long *)(*currentPointer + 0xf0);\n        }\n      }\n    }\n    return currentPointer;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n  }\n  else {\n    currentOffset = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      requestSize = fileSize - currentOffset;\n      if (0x2000 < requestSize) {\n        requestSize = 0x2000;\n      }\n      readSize = bfd_bread(buffer,requestSize,archive);\n      if (requestSize != readSize) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        gettextMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(gettextMessage,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archive);\n      }\n      requestSize = fwrite(buffer,1,readSize,DAT_0010d5d8);\n      if (requestSize != readSize) {\n        errnoPointer = __errno_location();\n        errorMessage = strerror(*errnoPointer);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorMessage);\n        goto LAB_00102c78;\n      }\n      currentOffset = currentOffset + readSize;\n    } while (currentOffset < fileSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorMessage = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermissions);\n  if (_DAT_0010d600 != 0) {\n    oldStackSize = newStackSize;\n    FUN_00107c80(errorMessage,localArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_valid_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "byteValue",
                "cVar2": "returnValue",
                "iVar3": "status",
                "__format": "formatString",
                "uVar4": "fileType",
                "unaff_RBX": "fileInfoArray",
                "unaff_RBP": "outputFile",
                "unaff_R12": "fileMode",
                "unaff_R13": "fileData",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "filePermission",
                "cStack0000000000000016": "flag1",
                "cStack0000000000000017": "flag2",
                "in_stack_00000018": "flag3",
                "cStack0000000000000019": "flag4",
                "cStack000000000000001a": "flag5",
                "cStack000000000000001b": "flag6",
                "cStack000000000000001c": "flag7",
                "cStack000000000000001d": "flag8",
                "cStack000000000000001e": "flag9",
                "uStack000000000000001f": "flag10",
                "uStack0000000000000068": "filePermissionsFlag",
                "uStack000000000000006c": "fileBlockSize",
                "in_stack_00000070": "fileBlocks",
                "in_stack_00000080": "fileLastModified"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte byteValue;\n  char returnValue;\n  int status;\n  char *formatString;\n  uint fileType;\n  char **fileInfoArray;\n  FILE *outputFile;\n  long fileMode;\n  void *fileData;\n  int fileDescriptor;\n  undefined filePermission;\n  char flag1;\n  char flag2;\n  char flag3;\n  char flag4;\n  char flag5;\n  char flag6;\n  char flag7;\n  char flag8;\n  char flag9;\n  undefined flag10;\n  uint filePermissionsFlag;\n  uint fileBlockSize;\n  uint fileBlocks;\n  undefined8 fileLastModified;\n  \n  do {\n    byteValue = FUN_00107c10();\n    *(uint *)((long)fileInfoArray + 0x44) = *(uint *)((long)fileInfoArray + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(fileMode + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfoArray + 0x49) = byteValue | 0x10;\n    }\n    returnValue = bfd_set_archive_head();\n  } while (returnValue == '\\0');\n  dup(fileDescriptor);\n  returnValue = bfd_close();\n  if (returnValue != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    status = FUN_00105bc0();\n    if (status == 0) {\n      free(fileData);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,formatString);\n  fileType = filePermissionsFlag & 0xf000;\n  if (fileType == 0x4000) {\n    filePermission = 100;\n  }\n  else if (fileType == 0xa000) {\n    filePermission = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    filePermission = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    filePermission = 99;\n  }\n  else if (fileType == 0xc000) {\n    filePermission = 0x73;\n  }\n  else {\n    filePermission = 0x70;\n    if (fileType != 0x1000) {\n      filePermission = 0x2d;\n    }\n  }\n  flag1 = (-((filePermissionsFlag & 0x100) == 0) & 0xbbU) + 0x72;\n  flag2 = (-((filePermissionsFlag & 0x80) == 0) & 0xb6U) + 0x77;\n  flag3 = (-((filePermissionsFlag & 0x40) == 0) & 0xb5U) + 0x78;\n  flag4 = (-((filePermissionsFlag & 0x20) == 0) & 0xbbU) + 0x72;\n  flag5 = (-((filePermissionsFlag & 0x10) == 0) & 0xb6U) + 0x77;\n  flag6 = (-((filePermissionsFlag & 8) == 0) & 0xb5U) + 0x78;\n  flag7 = (-((filePermissionsFlag & 4) == 0) & 0xbbU) + 0x72;\n  flag8 = (-((filePermissionsFlag & 2) == 0) & 0xb6U) + 0x77;\n  flag9 = (-((filePermissionsFlag & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissionsFlag & 0x800) != 0) {\n    if (flag3 == 'x') {\n      flag3 = 's';\n    }\n    else {\n      flag3 = 'S';\n    }\n  }\n  if ((filePermissionsFlag & 0x400) != 0) {\n    if (flag6 == 'x') {\n      flag6 = 's';\n    }\n    else {\n      flag6 = 'S';\n    }\n  }\n  if ((filePermissionsFlag & 0x200) != 0) {\n    if (flag9 == 'x') {\n      flag9 = 't';\n    }\n    else {\n      flag9 = 'T';\n    }\n  }\n  flag10 = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileBlockSize,\n          (ulong)fileBlocks,fileLastModified,&stack0x00000020,(ulong)filePermissionsFlag)\n  ;\n  fputs(*fileInfoArray,outputFile);\n  if ((char)fileMode != '\\0') {\n    if ((*(byte *)((long)fileInfoArray + 0x49) & 0x10) == 0) {\n      if (fileInfoArray[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfoArray[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00107c10",
                "FUN_00105bc0",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "xexit",
                "dup",
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "find_matching_file_001028ed",
                "param_1": "file_list",
                "param_2": "file_count",
                "uVar1": "undefined_var_1",
                "bVar2": "byte_var_2",
                "iVar3": "int_var_3",
                "sVar4": "size_var_4",
                "piVar5": "int_ptr_5",
                "pcVar6": "char_ptr_6",
                "pcVar7": "char_ptr_7",
                "ppcVar8": "char_ptr_ptr_8",
                "uVar9": "undefined_var_9",
                "lVar10": "long_var_10",
                "__s": "char_ptr_s",
                "__s_00": "char_ptr_s_00",
                "lVar11": "long_var_11",
                "uVar12": "undefined_var_12",
                "uVar13": "ulong_var_13",
                "unaff_RBX": "file_path",
                "ppcVar14": "file_entry",
                "unaff_RBP": "file_ptr_ptr",
                "unaff_R12": "file_ptr_ptr_12",
                "unaff_R13D": "file_index",
                "ppcVar15": "file_ptr_ptr_15",
                "unaff_R14": "file_ptr_14",
                "bVar16": "bool_var_16",
                "bVar17": "byte_var_17",
                "param_7": "search_paths",
                "param_9": "result",
                "in_stack_00000078": "stack_var_78",
                "in_stack_00000108": "stack_var_108"
            },
            "code": "\n\n\nundefined8 find_matching_file_001028ed(undefined8 file_list,long file_count)\n\n{\n  undefined undefined_var_1;\n  byte byte_var_2;\n  int int_var_3;\n  size_t size_var_4;\n  int *int_ptr_5;\n  char *char_ptr_6;\n  char *char_ptr_7;\n  char **char_ptr_ptr_8;\n  undefined8 undefined_var_9;\n  long long_var_10;\n  char *char_ptr_s;\n  char *char_ptr_s_00;\n  long long_var_11;\n  undefined8 undefined_var_12;\n  ulong ulong_var_13;\n  char *file_path;\n  char **file_entry;\n  char **file_ptr_ptr;\n  char **file_ptr_ptr_12;\n  uint file_index;\n  char **file_ptr_ptr_15;\n  long file_ptr_14;\n  bool bool_var_16;\n  byte byte_var_17;\n  char **search_paths;\n  undefined8 result;\n  long stack_var_78;\n  long stack_var_108;\n  \n  byte_var_17 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(file_path,file_count);\nLAB_001028f5:\n  undefined_var_12 = DAT_0010d638;\n  if (file_index != 3) {\n    while( true ) {\n      if ((undefined8 *)*file_ptr_ptr_12 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var_3 = filename_cmp(*(undefined8 *)*file_ptr_ptr_12,undefined_var_12);\n      if (int_var_3 == 0) break;\n      file_ptr_ptr_12 = (char **)(*file_ptr_ptr_12 + 0xf0);\n    }\n    if (file_index != 2) goto LAB_0010571f;\n    file_ptr_ptr_12 = (char **)(*file_ptr_ptr_12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var_10 = *(long *)(file_ptr_14 + 0xf0);\n  if (*(long *)(file_ptr_14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var_11 = long_var_10;\n    long_var_10 = *(long *)(long_var_11 + 0xf0);\n  } while (long_var_10 != 0);\n  file_ptr_ptr_12 = (char **)(long_var_11 + 0xf0);\n  file_path = *file_ptr_ptr;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var_1 = DAT_0010d5f8;\n  file_index = (uint)(DAT_0010d60c != 0);\n  file_count = bfd_openr(file_path,DAT_0010d5f0);\n  if (file_count != 0) {\n    file_ptr_ptr = file_ptr_ptr + 1;\n    byte_var_2 = FUN_00105af0(file_ptr_ptr_12,file_count,file_index,undefined_var_1);\n    result._6_1_ = result._6_1_ | byte_var_2;\n    char_ptr_6 = *file_ptr_ptr;\n    do {\n      if (char_ptr_6 == (char *)0x0) {\n        if (result._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var_12 = FUN_001058b0();\n        return undefined_var_12;\n      }\n      file_entry = *(char ***)(file_ptr_14 + 0xf0);\n      file_ptr_ptr_12 = search_paths;\n      if (result._7_1_ == '\\0') {\n        file_ptr_ptr_15 = search_paths;\n        if (file_entry != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              char_ptr_s = (char *)lbasename(*file_entry);\n              char_ptr_7 = char_ptr_s;\n              if (DAT_0010d5fa != '\\0') {\n                size_var_4 = strlen(char_ptr_s);\n                ulong_var_13 = (ulong)*(byte *)(*(long *)(file_ptr_14 + 8) + 0x1e);\n                if (ulong_var_13 < size_var_4) {\n                  char_ptr_7 = (char *)xmalloc(ulong_var_13 + 1);\n                  long_var_10 = *(long *)(file_ptr_14 + 8);\n                  char_ptr_6 = char_ptr_7;\n                  for (ulong_var_13 = (ulong)*(byte *)(long_var_10 + 0x1e); ulong_var_13 != 0; ulong_var_13 = ulong_var_13 - 1) {\n                    *char_ptr_6 = *char_ptr_s;\n                    char_ptr_s = char_ptr_s + (ulong)byte_var_17 * -2 + 1;\n                    char_ptr_6 = char_ptr_6 + (ulong)byte_var_17 * -2 + 1;\n                  }\n                  char_ptr_7[*(byte *)(long_var_10 + 0x1e)] = '\\0';\n                }\n                char_ptr_6 = *file_ptr_ptr;\n                char_ptr_s = char_ptr_7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_ptr_6 = *file_ptr_ptr;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              char_ptr_s_00 = (char *)lbasename(char_ptr_6);\n              if (DAT_0010d5fa != '\\0') {\n                size_var_4 = strlen(char_ptr_s_00);\n                ulong_var_13 = (ulong)*(byte *)(*(long *)(file_ptr_14 + 8) + 0x1e);\n                char_ptr_6 = char_ptr_s_00;\n                char_ptr_s = char_ptr_7;\n                if (ulong_var_13 < size_var_4) {\n                  char_ptr_6 = (char *)xmalloc(ulong_var_13 + 1);\n                  long_var_10 = *(long *)(file_ptr_14 + 8);\n                  char_ptr_7 = char_ptr_6;\n                  for (ulong_var_13 = (ulong)*(byte *)(long_var_10 + 0x1e); ulong_var_13 != 0; ulong_var_13 = ulong_var_13 - 1) {\n                    *char_ptr_7 = *char_ptr_s_00;\n                    char_ptr_s_00 = char_ptr_s_00 + (ulong)byte_var_17 * -2 + 1;\n                    char_ptr_7 = char_ptr_7 + (ulong)byte_var_17 * -2 + 1;\n                  }\n                  char_ptr_6[*(byte *)(long_var_10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var_3 = filename_cmp(char_ptr_s_00,char_ptr_7);\n            }\n            else {\n              char_ptr_6 = *file_ptr_ptr;\n              char_ptr_s = *file_entry;\nLAB_00102980:\n              int_var_3 = filename_cmp(char_ptr_6,char_ptr_s);\n            }\n            if ((int_var_3 == 0) && (file_entry[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var_3 = stat(*file_ptr_ptr,(stat *)&stack0x000000b0);\n                if (int_var_3 != 0) {\n                  int_ptr_5 = __errno_location();\n                  if (*int_ptr_5 != 2) {\n                    FUN_00107c10(*file_ptr_ptr);\nLAB_00102b7e:\n                    char_ptr_6 = *file_entry;\n                    undefined_var_12 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefined_var_12,char_ptr_6);\n                    free(file_ptr_ptr);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_ptr_ptr_8 = (char **)file_entry[0x1d];\n                if ((char **)file_entry[0x1d] == (char **)0x0) {\n                  char_ptr_ptr_8 = file_entry;\n                }\n                int_var_3 = (**(code **)(char_ptr_ptr_8[1] + 0x1e8))(file_entry,&stack0x00000020);\n                if (int_var_3 != 0) goto LAB_00102b7e;\n                if (stack_var_108 <= stack_var_78) goto LAB_0010577e;\n              }\n              undefined_var_12 = FUN_00105870(search_paths,2,*file_entry);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_ptr_6 = *file_ptr_ptr;\n                bool_var_16 = DAT_0010d60c != 0;\n                long_var_10 = bfd_openr(char_ptr_6,DAT_0010d5f0);\n                if (long_var_10 == 0) {\n                  FUN_00107c10(char_ptr_6,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var_2 = FUN_00103172(undefined_var_12,long_var_10,bool_var_16);\n              }\n              else {\n                undefined_var_9 = FUN_00105830(*file_ptr_ptr);\n                int_var_3 = filename_cmp(undefined_var_9,\"__.LIBDEP\");\n                if (int_var_3 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var_2 = FUN_00103172(undefined_var_12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var_2 != 0) {\n                *file_ptr_ptr_15 = *(char **)(*file_ptr_ptr_15 + 0xf0);\n                result._6_1_ = byte_var_2;\n              }\n              goto LAB_0010577e;\n            }\n            file_ptr_ptr_15 = file_entry + 0x1e;\n            file_entry = (char **)file_entry[0x1e];\n          } while (file_entry != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        file_index = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        file_index = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var_10 = *(long *)(file_ptr_14 + 0xf0);\n        if (*(long *)(file_ptr_14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      file_path = *file_ptr_ptr;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var_12 = FUN_00105830(file_path);\n      int_var_3 = filename_cmp(undefined_var_12,\"__.LIBDEP\");\n      if (int_var_3 != 0) goto code_r0x0010574f;\n      byte_var_2 = FUN_00105ae0(file_ptr_ptr_12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      result._6_1_ = byte_var_2 | result._6_1_;\nLAB_0010577e:\n      file_ptr_ptr = file_ptr_ptr + 1;\n      char_ptr_6 = *file_ptr_ptr;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  file_path = *file_ptr_ptr;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "bfd_openr",
                "FUN_00107c10",
                "dcgettext",
                "FUN_00105ae0",
                "xmalloc",
                "__errno_location",
                "FUN_00105af0",
                "lbasename",
                "FUN_00105830",
                "FUN_00107690",
                "stat",
                "filename_cmp",
                "FUN_00102943",
                "FUN_001058b0",
                "strlen",
                "FUN_00103172",
                "FUN_00105870",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_matching_file_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "code": "\nundefined8 handle_file_error_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00107920",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "get_return_value_0010284b"
            },
            "code": "\nundefined8 getReturnValue_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "get_return_value_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "find_matching_file_00102c25",
                "param_7": "filePermissions",
                "param_11": "fileMode",
                "param_12": "archiveSize",
                "iVar1": "comparisonResult",
                "lVar7": "loopCounter",
                "unaff_RBX": "fileArray",
                "plVar8": "currentFile",
                "pplVar6": "archiveFile",
                "puVar9": "paramPointer",
                "uVar5": "errorMessage",
                "uVar10": "bytesRead",
                "sVar11": "bytesToRead",
                "__ptr": "buffer",
                "__n": "readBytes",
                "iVar2": "statResult",
                "piVar3": "errorNumber",
                "pcVar4": "errorString"
            },
            "code": "\n\n\nlong * findMatchingFile_00102c25(void)\n\n{\n  int comparisonResult;\n  int statResult;\n  int *errorNumber;\n  char *errorString;\n  undefined8 errorMessage;\n  long **archiveFile;\n  void *buffer;\n  size_t readBytes;\n  long loopCounter;\n  long **fileArray;\n  long *currentFile;\n  undefined4 *paramPointer;\n  ulong bytesRead;\n  size_t bytesToRead;\n  undefined4 *filePermissions;\n  __mode_t fileMode;\n  ulong archiveSize;\n  \n  paramPointer = filePermissions;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  archiveFile = (long **)fileArray[0x1d];\n  if ((long **)fileArray[0x1d] == (long **)0x0) {\n    archiveFile = fileArray;\n  }\n  statResult = (*(code *)archiveFile[1][0x3d])();\n  if (statResult != 0) {\n    currentFile = *fileArray;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    statResult = FUN_00107690(errorMessage,currentFile);\n    errorMessage = DAT_0010d638;\n    if (statResult == 3) {\n      for (; *currentFile != 0; currentFile = (long *)(*currentFile + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentFile != (undefined8 *)0x0; currentFile = (long *)(*currentFile + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentFile,errorMessage);\n        if (comparisonResult == 0) {\n          if (statResult != 2) {\n            return currentFile;\n          }\n          return (long *)(*currentFile + 0xf0);\n        }\n      }\n    }\n    return currentFile;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*fileArray);\n  }\n  else {\n    bytesRead = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytesToRead = archiveSize - bytesRead;\n      if (0x2000 < bytesToRead) {\n        bytesToRead = 0x2000;\n      }\n      readBytes = bfd_bread(buffer,bytesToRead);\n      if (bytesToRead != readBytes) {\nLAB_00102c78:\n        fileArray = (long **)*fileArray[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,fileArray);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*fileArray);\n      }\n      bytesToRead = fwrite(buffer,1,readBytes,DAT_0010d5d8);\n      if (bytesToRead != readBytes) {\n        errorNumber = __errno_location();\n        errorString = strerror(*errorNumber);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesRead = bytesRead + readBytes;\n    } while (bytesRead < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,fileMode);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(errorString,filePermissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00107c80",
                "dcgettext",
                "FUN_00105a20",
                "xmalloc",
                "__errno_location",
                "bfd_bread",
                "FUN_00107690",
                "fwrite",
                "bfd_seek",
                "fclose",
                "free",
                "chmod",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_with_limit_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputStringLength",
                "puVar3": "copiedString",
                "uVar4": "limit",
                "unaff_RBX": "sourcePtr",
                "unaff_RBP": "stackFramePtr",
                "puVar5": "destPtr",
                "bVar6": "isNegative",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyStringWithLimit_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputStringLength;\n  undefined *copiedString;\n  ulong limit;\n  undefined *sourcePtr;\n  long stackFramePtr;\n  undefined *destPtr;\n  byte isNegative;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  isNegative = 0;\n  inputStringLength = strlen(inputString);\n  limit = (ulong)*(byte *)(*(long *)(stackFramePtr + 8) + 0x1e);\n  copiedString = sourcePtr;\n  if (limit < inputStringLength) {\n    copiedString = (undefined *)xmalloc(limit + 1);\n    lVar1 = *(long *)(stackFramePtr + 8);\n    destPtr = copiedString;\n    for (limit = (ulong)*(byte *)(lVar1 + 0x1e); limit != 0; limit = limit - 1) {\n      *destPtr = *sourcePtr;\n      sourcePtr = sourcePtr + (ulong)isNegative * -2 + 1;\n      destPtr = destPtr + (ulong)isNegative * -2 + 1;\n    }\n    copiedString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = copiedString;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_string_with_limit_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_update_data_00102f08",
                "unaff_RBX": "dataPointer",
                "unaff_R12": "newDataPointer"
            },
            "code": "\nundefined8 printAndUpdateData_00102f08(void)\n\n{\n  undefined8 *dataPointer;\n  undefined8 *newDataPointer;\n  \n  printf(\"a - %s\\n\",*dataPointer);\n  dataPointer[0x1e] = *newDataPointer;\n  *newDataPointer = dataPointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_update_data_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "arg1",
                "param_2": "file_list",
                "param_3": "flag",
                "ppcVar1": "file_pointer",
                "uVar2": "undefined_var",
                "bVar3": "byte_var",
                "iVar4": "int_var",
                "sVar5": "size_var",
                "piVar6": "int_ptr",
                "pcVar7": "file_name1",
                "pcVar8": "file_name2",
                "uVar9": "undefined_var2",
                "pcVar10": "file_name",
                "__s": "file_name3",
                "lVar11": "long_var1",
                "lVar12": "long_var2",
                "uVar13": "undefined_var3",
                "uVar14": "ulong_var",
                "ppcVar15": "file_item",
                "ppcVar16": "file_item2",
                "uVar17": "uint_var",
                "ppcVar18": "file_item3",
                "bVar19": "bool_var",
                "bVar20": "byte_var2",
                "local_15a": "byte_var3",
                "auStack_158": "stack_var",
                "lStack_100": "long_var3",
                "sStack_c8": "stat_var"
            },
            "code": "\n\n\nundefined8 process_files_00105570(long arg1,char **file_list,char flag)\n\n{\n  char **file_pointer;\n  undefined undefined_var;\n  byte byte_var;\n  int int_var;\n  size_t size_var;\n  int *int_ptr;\n  char *file_name1;\n  char *file_name2;\n  undefined8 undefined_var2;\n  char *file_name;\n  char *file_name3;\n  long long_var1;\n  long long_var2;\n  undefined8 undefined_var3;\n  ulong ulong_var;\n  char **file_item;\n  char **file_item2;\n  uint uint_var;\n  char **file_item3;\n  bool bool_var;\n  byte byte_var2;\n  byte byte_var3;\n  undefined stack_var [88];\n  long long_var3;\n  stat stat_var;\n  \n  byte_var2 = 0;\n  file_pointer = (char **)(arg1 + 0xf0);\n  byte_var3 = 0;\n  if (file_list == (char **)0x0) {\n    undefined_var3 = FUN_00102943();\n    return undefined_var3;\n  }\n  do {\n    file_name = *file_list;\njoined_r0x001055aa:\n    if (file_name == (char *)0x0) {\n      if (byte_var3 != 0) {\n        undefined_var3 = FUN_001058b0(arg1);\n        return undefined_var3;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    file_item = *(char ***)(arg1 + 0xf0);\n    file_item2 = file_pointer;\n    if (flag != '\\0') {\nLAB_0010564c:\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      long_var2 = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        long_var1 = long_var2;\n        long_var2 = *(long *)(long_var1 + 0xf0);\n      } while (long_var2 != 0);\n      file_item2 = (char **)(long_var1 + 0xf0);\n      file_name = *file_list;\n      do {\n        if (DAT_0010d620 != 0) {\n          undefined_var3 = FUN_00105830(file_name,arg1);\n          int_var = filename_cmp(undefined_var3,\"__.LIBDEP\");\n          if (int_var == 0) {\n            byte_var = FUN_00105ae0(file_item2,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            byte_var3 = byte_var | byte_var3;\n            goto LAB_0010577e;\n          }\n          file_name = *file_list;\n        }\n        undefined_var = DAT_0010d5f8;\n        bool_var = DAT_0010d60c != 0;\n        long_var2 = bfd_openr(file_name,DAT_0010d5f0);\n        if (long_var2 != 0) {\n          file_list = file_list + 1;\n          byte_var = FUN_00105af0(file_item2,long_var2,(uint)bool_var,undefined_var);\n          byte_var3 = byte_var3 | byte_var;\n          file_name = *file_list;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(file_name,0);\n        uint_var = (uint)bool_var;\nLAB_001028f5:\n        undefined_var3 = DAT_0010d638;\n        if (uint_var == 3) {\n          long_var2 = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*file_item2 != (undefined8 *)0x0;\n              file_item2 = (char **)(*file_item2 + 0xf0)) {\n            int_var = filename_cmp(*(undefined8 *)*file_item2,undefined_var3);\n            if (int_var == 0) {\n              if (uint_var == 2) {\n                file_item2 = (char **)(*file_item2 + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        file_name = *file_list;\n      } while( true );\n    }\n    file_item3 = file_pointer;\n    if (file_item == (char **)0x0) {\n      uint_var = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      file_name = (char *)lbasename(*file_item);\n      file_name2 = file_name;\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(file_name);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (ulong_var < size_var) {\n          file_name2 = (char *)xmalloc(ulong_var + 1);\n          long_var2 = *(long *)(arg1 + 8);\n          file_name1 = file_name2;\n          for (ulong_var = (ulong)*(byte *)(long_var2 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *file_name1 = *file_name;\n            file_name = file_name + (ulong)byte_var2 * -2 + 1;\n            file_name1 = file_name1 + (ulong)byte_var2 * -2 + 1;\n          }\n          file_name2[*(byte *)(long_var2 + 0x1e)] = '\\0';\n        }\n        file_name1 = *file_list;\n        file_name = file_name2;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      file_name1 = *file_list;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      file_name3 = (char *)lbasename(file_name1);\n      if (DAT_0010d5fa != '\\0') {\n        size_var = strlen(file_name3);\n        ulong_var = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        file_name1 = file_name3;\n        file_name = file_name2;\n        if (ulong_var < size_var) {\n          file_name1 = (char *)xmalloc(ulong_var + 1);\n          long_var2 = *(long *)(arg1 + 8);\n          file_name2 = file_name1;\n          for (ulong_var = (ulong)*(byte *)(long_var2 + 0x1e); ulong_var != 0; ulong_var = ulong_var - 1) {\n            *file_name2 = *file_name3;\n            file_name3 = file_name3 + (ulong)byte_var2 * -2 + 1;\n            file_name2 = file_name2 + (ulong)byte_var2 * -2 + 1;\n          }\n          file_name1[*(byte *)(long_var2 + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      int_var = filename_cmp(file_name3,file_name2);\n      if (int_var == 0) goto LAB_00102993;\nLAB_00105639:\n      file_item3 = file_item + 0x1e;\n      file_item = (char **)file_item[0x1e];\n      if (file_item == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    file_name1 = *file_list;\n    file_name = *file_item;\nLAB_00102980:\n    int_var = filename_cmp(file_name1,file_name);\n    if (int_var != 0) goto LAB_00105639;\nLAB_00102993:\n    if (file_item[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      int_var = stat(*file_list,&stat_var);\n      if (int_var != 0) {\n        int_ptr = __errno_location();\n        if (*int_ptr != 2) {\n          FUN_00107c10(*file_list);\nLAB_00102b7e:\n          file_name = *file_item;\n          undefined_var3 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(undefined_var3,file_name);\n          free(file_list);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      file_item2 = (char **)file_item[0x1d];\n      if ((char **)file_item[0x1d] == (char **)0x0) {\n        file_item2 = file_item;\n      }\n      int_var = (**(code **)(file_item2[1] + 0x1e8))(file_item,stack_var);\n      if (int_var != 0) goto LAB_00102b7e;\n      if (stat_var.st_mtim.tv_sec <= long_var3) goto LAB_0010577e;\n    }\n    undefined_var3 = FUN_00105870(file_pointer,2,*file_item);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      file_name = *file_list;\n      bool_var = DAT_0010d60c != 0;\n      long_var2 = bfd_openr(file_name,DAT_0010d5f0);\n      if (long_var2 == 0) {\n        FUN_00107c10(file_name,0);\n        goto LAB_00102b3e;\n      }\n      byte_var = FUN_00103172(undefined_var3,long_var2,bool_var);\n    }\n    else {\n      undefined_var2 = FUN_00105830(*file_list,arg1);\n      int_var = filename_cmp(undefined_var2,\"__.LIBDEP\");\n      if (int_var != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      byte_var = FUN_00103172(undefined_var3,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (byte_var != 0) {\n      *file_item3 = *(char **)(*file_item3 + 0xf0);\n      byte_var3 = byte_var;\n    }\nLAB_0010577e:\n    file_list = file_list + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 73918,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}