{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "initialize_block_with_parameter_00113dfe",
                "param_1": "memory_size",
                "param_2": "data",
                "lVar1": "memory_block"
            },
            "code": "\nvoid initialize_block_with_parameter_00113dfe(undefined4 memory_size,undefined data)\n\n{\n  long memory_block;\n  \n  memory_block = initialize_memory_block_00112904(3,memory_size);\n  if (memory_block != 0) {\n    *(undefined *)(memory_block + 0x10) = data;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_block_with_parameter_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_0010ab4d",
                "param_1": "data",
                "param_2": "inputString",
                "param_3": "var3",
                "param_4": "var4",
                "uVar1": "dataPtr",
                "lVar2": "dataPtr2",
                "auVar3": "result1",
                "sVar4": "inputLength",
                "pcVar5": "existingString",
                "sVar6": "existingLength",
                "auVar7": "result2"
            },
            "code": "\nundefined  [16] updateString_0010ab4d(long data,char *inputString,undefined8 var3,undefined8 var4)\n\n{\n  ulong dataPtr;\n  long dataPtr2;\n  undefined result1 [16];\n  size_t inputLength;\n  char *existingString;\n  size_t existingLength;\n  undefined result2 [16];\n  \n  dataPtr = *(ulong *)(data + 0x60);\n  if ((dataPtr != 0) && (*(long *)(dataPtr + 0x20) != 0)) {\n    existingString = *(char **)(dataPtr + 0x30);\n    inputLength = strlen(inputString);\n    if (existingString == (char *)0x0) {\n      existingString = (char *)xmalloc(inputLength + 3);\n      *existingString = '\\0';\n    }\n    else {\n      existingLength = strlen(existingString);\n      existingString = (char *)xrealloc(existingString,inputLength + 4 + existingLength);\n    }\n    inputLength = strlen(existingString);\n    sprintf(existingString + inputLength,\"%s::\",inputString);\n    dataPtr2 = *(long *)(data + 0x60);\n    *(char **)(dataPtr2 + 0x30) = existingString;\n    result2._1_7_ = (undefined7)((ulong)dataPtr2 >> 8);\n    result2[0] = 1;\n    result2._8_8_ = var4;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = dataPtr;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_string_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_debug_name_type_0010c218",
                "param_1": "input_file",
                "param_2": "current_file",
                "param_3": "memory_size",
                "uVar1": "error_msg",
                "lVar2": "memory_block",
                "pauVar3": "data_structure",
                "lVar4": "initialized_structure"
            },
            "code": "\n\n\nlong initialize_debug_name_type_0010c218(long input_file,long current_file,long memory_size)\n\n{\n  undefined8 error_msg;\n  long memory_block;\n  undefined (*data_structure) [16];\n  long initialized_structure;\n  \n  if ((current_file != 0) && (memory_size != 0)) {\n    if ((*(long *)(input_file + 8) == 0) || (*(long *)(input_file + 0x10) == 0)) {\n      error_msg = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_msg);\n    }\n    else {\n      memory_block = initialize_memory_block_00112904(0x16,0);\n      if (memory_block != 0) {\n        data_structure = (undefined (*) [16])xmalloc(0x10);\n        initialized_structure = *(long *)(input_file + 0x10);\n        *data_structure = ZEXT816(0);\n        *(long *)(*data_structure + 8) = memory_size;\n        *(undefined (**) [16])(memory_block + 0x10) = data_structure;\n        initialized_structure = initialize_data_structure_00112925(initialized_structure + 0x10,current_file,0,3);\n        if (initialized_structure != 0) {\n          *(long *)(initialized_structure + 0x20) = memory_block;\n          *(long *)*data_structure = initialized_structure;\n          return memory_block;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "initialize_debug_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_00113fb0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_message_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_message_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = initialize_hash_table_00113f20();\n  DAT_00127a10 = initialize_hash_table_00113f20();\n  DAT_00127a28 = initialize_hash_table_00113f20();\n  DAT_00127a08 = initialize_hash_table_00113f20();\n  DAT_00127a00 = initialize_hash_table_00113f20();\n  DAT_001279f8 = initialize_hash_table_00113f20();\n  DAT_001279f0 = initialize_hash_table_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,calculate_hash_00108800,compare_strings_00108898);\n  DAT_001278e8 = initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = execute_reverse_function_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hashtables_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_and_compare_entries_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        process_entries_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        process_entries_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_binutils_version_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_binary_file_details_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_binutils_version_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = compare_strings_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = decode_and_validate_string_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = compare_strings_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = decode_and_validate_string_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  process_binary_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_set_modification_time_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = check_file_stats_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    process_binary_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_set_modification_time_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_for_symbol_redefinition_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_for_symbol_redefinition_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_message_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_and_compare_entries_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_entries_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = parse_query_string_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    read_file_and_store_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = copy_and_null_terminate_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = copy_and_null_terminate_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = copy_and_null_terminate_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = check_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_entries_00114190(pcVar32,1,uVar12);\n    lVar17 = check_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = check_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = parse_query_string_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = check_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)check_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_file_and_process_lines_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = check_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_entries_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_file_and_process_lines_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_file_and_process_lines_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = check_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_for_symbol_redefinition_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_entries_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = check_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_entries_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_entries_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = check_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = check_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_file_and_process_lines_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_file_and_process_lines_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = parse_query_string_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    read_file_and_store_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = check_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_file_and_process_lines_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_message_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "FUN_00114c20",
                "FUN_00119ed0",
                "FUN_00119970",
                "ftell",
                "FUN_00114690",
                "getc",
                "dcgettext",
                "FUN_001054af",
                "malloc",
                "FUN_00113f50",
                "htab_create_alloc",
                "FUN_00114d60",
                "filename_cmp",
                "FUN_00108d9a",
                "strerror",
                "FUN_00108898",
                "htab_find_slot",
                "FUN_00113fb0",
                "bfd_set_default_target",
                "xrealloc",
                "fread",
                "strchr",
                "FUN_00108800",
                "FUN_00119940",
                "memcpy",
                "free",
                "strcasecmp",
                "FUN_001199d0",
                "FUN_0011a480",
                "htab_elements",
                "xexit",
                "bfd_errmsg",
                "xmalloc",
                "bfd_get_error",
                "FUN_00114460",
                "FUN_00113f20",
                "fclose",
                "FUN_00113fe0",
                "textdomain",
                "bindtextdomain",
                "FUN_00115970",
                "fseek",
                "strlen",
                "strtoul",
                "FUN_00108c86",
                "strcpy",
                "strcmp",
                "bfd_set_error_program_name",
                "FUN_00114cf0",
                "close",
                "unlink_if_ordinary",
                "fprintf",
                "FUN_00114c80",
                "setlocale",
                "strncasecmp",
                "FUN_001126c0",
                "dup",
                "free",
                "memmove",
                "strncpy",
                "FUN_00114190",
                "xstrdup",
                "xmalloc_set_program_name",
                "FUN_0011a390",
                "getopt_long",
                "mkstemp",
                "FUN_00108916",
                "bfd_scan_arch",
                "fopen",
                "bfd_init",
                "FUN_00108a2a",
                "FUN_00119dd0",
                "xcalloc",
                "__errno_location",
                "strtol",
                "stat",
                "ferror"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "block",
                "param_2": "debugger",
                "param_3": "var1",
                "param_4": "var2",
                "puVar1": "currentBlock",
                "uVar2": "result",
                "puVar3": "newBlock",
                "puVar4": "tempBlock",
                "lVar5": "tempValue",
                "puVar6": "lastBlock",
                "puVar7": "ptr",
                "bVar8": "flag",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugging_0010be88(long block,undefined8 debugger,undefined8 var1,undefined8 var2)\n\n{\n  undefined8 *currentBlock;\n  undefined8 result;\n  undefined4 *newBlock;\n  undefined8 *tempBlock;\n  long tempValue;\n  undefined8 *lastBlock;\n  undefined4 *ptr;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  if ((*(long *)(block + 8) == 0) || (*(long *)(block + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    ptr = newBlock;\n    for (tempValue = 0xc; tempValue != 0; tempValue = tempValue + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    tempValue = *(long *)(block + 0x20);\n    *(undefined8 *)(newBlock + 6) = debugger;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = tempValue;\n    currentBlock = *(undefined8 **)(tempValue + 0x10);\n    lastBlock = (undefined8 *)(tempValue + 0x10);\n    while (tempBlock = currentBlock, tempBlock != (undefined8 *)0x0) {\n      lastBlock = tempBlock;\n      currentBlock = (undefined8 *)*tempBlock;\n    }\n    *lastBlock = newBlock;\n    result = 1;\n    *(undefined4 **)(block + 0x20) = newBlock;\n  }\n  returnValue._8_8_ = var2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00115dc0",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "paramArray",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "size",
                "param_5": "option",
                "cVar1": "character",
                "iVar2": "intValue",
                "lVar3": "longValue",
                "__s": "extractedString",
                "sVar4": "paramLen",
                "sVar5": "fieldNameLen",
                "sVar6": "extractedStringLen",
                "__s_00": "outputString",
                "uVar7": "warningMessage",
                "uVar8": "returnValue",
                "pcVar9": "optionPath"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *paramArray,char *fieldName,undefined8 param3,ulong size,int option)\n\n{\n  char character;\n  int intValue;\n  long longValue;\n  char *extractedString;\n  size_t paramLen;\n  size_t fieldNameLen;\n  size_t extractedStringLen;\n  char *outputString;\n  undefined8 warningMessage;\n  undefined8 returnValue;\n  char *optionPath;\n  \n  character = *(char *)(paramArray[0xc] + 0x1c);\n  intValue = *(int *)(paramArray[0xc] + 0x18);\n  extractedString = (char *)extract_and_free_00109b2f();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    paramLen = strlen(*(char **)(paramArray[0xc] + 0x20));\n    fieldNameLen = strlen(fieldName);\n    extractedStringLen = strlen(extractedString);\n    outputString = (char *)xmalloc(paramLen + 0x32 + fieldNameLen + extractedStringLen);\n    if (option == 1) {\n      optionPath = \"/1\";\n    }\n    else {\n      optionPath = \"/0\";\n      if ((option != 2) && (optionPath = \"\", option != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((size == 0) && (size = (ulong)(uint)(intValue * 8), size == 0)) {\n      returnValue = *(undefined8 *)*paramArray;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message_00119ed0(warningMessage,returnValue,fieldName);\n    }\n    sprintf(outputString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),fieldName,optionPath,extractedString,\n            param3,size);\n    free(*(void **)(paramArray[0xc] + 0x20));\n    longValue = paramArray[0xc];\n    *(char **)(longValue + 0x20) = outputString;\n    if (character != '\\0') {\n      *(undefined *)(longValue + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)longValue >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "abort",
                "xmalloc",
                "strlen",
                "dcgettext",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "input_address",
                "param_2": "data_value",
                "param_3": "option",
                "param_4": "flag",
                "cVar1": "char_var1",
                "lVar2": "ptr1",
                "cVar3": "char_var3",
                "uVar4": "uint_var",
                "__s": "string_data",
                "sVar5": "string_length",
                "pcVar6": "allocated_string",
                "lVar7": "ptr2",
                "uVar8": "result",
                "uVar9": "ulong_var1",
                "uVar10": "ulong_var2"
            },
            "code": "\nundefined8 process_data_0010aa53(long input_address,undefined8 data_value,char option,int flag)\n\n{\n  char char_var1;\n  long ptr1;\n  char char_var3;\n  uint uint_var;\n  char *string_data;\n  size_t string_length;\n  char *allocated_string;\n  long ptr2;\n  undefined8 result;\n  ulong ulong_var1;\n  ulong ulong_var2;\n  \n  char_var1 = *(char *)(*(long *)(input_address + 0x60) + 0x1c);\n  string_data = (char *)extract_and_free_00109b2f();\n  string_length = strlen(string_data);\n  allocated_string = (char *)xmalloc(string_length + 0x19);\n  *allocated_string = option + '0';\n  if (flag == 1) {\n    char_var3 = '1';\n  }\n  else {\n    char_var3 = '0';\n    if ((flag != 2) && (char_var3 = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  allocated_string[1] = char_var3;\n  sprintf(allocated_string + 2,\"%ld,%s;\",data_value);\n  free(string_data);\n  ptr1 = *(long *)(input_address + 0x60);\n  result = 0;\n  if ((ptr1 != 0) && (*(long *)(ptr1 + 0x20) != 0)) {\n    ptr1 = *(long *)(ptr1 + 0x28);\n    ulong_var2 = 0;\n    if (ptr1 != 0) {\n      uint_var = 0;\n      do {\n        ulong_var1 = (ulong)uint_var;\n        ulong_var2 = (ulong)uint_var;\n        uint_var = uint_var + 1;\n      } while (*(long *)(ptr1 + ulong_var1 * 8) != 0);\n    }\n    ptr2 = xrealloc(ptr1,(ulong)((int)ulong_var2 + 2) << 3);\n    *(char **)(ptr2 + ulong_var2 * 8) = allocated_string;\n    *(undefined8 *)(ptr2 + (ulong)((int)ulong_var2 + 1) * 8) = 0;\n    ptr1 = *(long *)(input_address + 0x60);\n    *(long *)(ptr1 + 0x28) = ptr2;\n    if (char_var1 != '\\0') {\n      *(undefined *)(ptr1 + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_debug_records_0011173a",
                "param_1": "param",
                "param_2": "debugInfo",
                "param_3": "opcode",
                "param_4": "value",
                "param_5": "address",
                "param_6": "name",
                "cVar1": "char1",
                "bVar2": "byte1",
                "__ptr": "ptr",
                "cVar3": "result",
                "uVar4": "undefinedVar",
                "iVar5": "index",
                "puVar6": "ptrVar",
                "plVar7": "longVar",
                "pcVar8": "charVar",
                "uVar9": "undefinedVar2",
                "lVar10": "longVar2",
                "lVar11": "longVar3",
                "lVar12": "longVar4",
                "pplVar13": "ptrToPtrVar",
                "uVar14": "ulongVar",
                "uVar15": "ulongVar2",
                "pcVar16": "charVar2",
                "uVar17": "uintVar",
                "dVar19": "doubleVar",
                "local_48": "localCharVar",
                "local_40": "localPtrToPtrVar"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parseDebugRecords_0011173a(undefined8 param,long *debugInfo,int opcode,int value,ulong address,\n                      char *name)\n\n{\n  char char1;\n  byte byte1;\n  void *ptr;\n  char result;\n  undefined undefinedVar;\n  int index;\n  undefined8 *ptrVar;\n  long *longVar;\n  char *charVar;\n  undefined8 undefinedVar2;\n  long longVar2;\n  long longVar3;\n  long longVar4;\n  long **ptrToPtrVar;\n  ulong ulongVar;\n  ulong ulongVar2;\n  char *charVar2;\n  uint uintVar;\n  long **pplVar18;\n  double doubleVar;\n  char *localCharVar;\n  long **localPtrToPtrVar [2];\n  \n  if (debugInfo[4] != 0) {\n    if (((opcode == 100) && (*name != '\\0')) && (debugInfo[5] == address)) goto LAB_00111a06;\n    result = initialize_debug_info_0010bbd3(param);\n    if (result == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)debugInfo + 0x44) = 0;\n    *(undefined4 *)(debugInfo + 8) = 0;\n    debugInfo[9] = debugInfo[4];\n    if (*(char *)(debugInfo + 1) == '\\0') {\n      debugInfo[6] = debugInfo[5];\n    }\n    *(undefined4 *)(debugInfo + 0x10) = 1;\n    ptrVar = (undefined8 *)xmalloc(8);\n    debugInfo[0x11] = (long)ptrVar;\n    *ptrVar = 0;\n    debugInfo[4] = 0;\n  }\n  strlen(name);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefinedVar = add_source_file_00108f08(param,name);\n    return undefinedVar;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      index = strcmp(name,\"gcc2_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(debugInfo + 8) = 2;\n        return 1;\n      }\n      index = strcmp(name,\"gcc_compiled.\");\n      if (index == 0) {\n        *(undefined4 *)(debugInfo + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)debugInfo + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*name == '\\0') {\n          if (*(char *)(debugInfo + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(debugInfo + 1) != '\\0') {\n            address = address + debugInfo[7];\n          }\n          result = process_debug_records_0010c1c6(param,debugInfo);\n          if (result != '\\0') {\n            result = debug_end_function_0010be1a(param,address);\n            if (result != '\\0') {\n              *(undefined *)(debugInfo + 0xc) = 0;\n              debugInfo[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(debugInfo + 0xc) != '\\0') &&\n           ((address < (ulong)debugInfo[0xd] || (debugInfo[0xd] == 0xffffffffffffffff)))) {\n          debugInfo[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(debugInfo + 0xc) != '\\0') {\n          ulongVar = address;\n          if (((*name != '\\0') && (ulongVar2 = debugInfo[0xd], ulongVar2 != 0xffffffffffffffff)) &&\n             (ulongVar = ulongVar2, address < ulongVar2)) {\n            ulongVar = address;\n          }\n          result = process_debug_records_0010c1c6(param,debugInfo);\n          if (result == '\\0') {\n            return 0;\n          }\n          result = debug_end_function_0010be1a(param,ulongVar);\n          if (result == '\\0') {\n            return 0;\n          }\n          *(undefined *)(debugInfo + 0xc) = 0;\n          debugInfo[0xd] = -1;\n        }\n        if (*name == '\\0') {\n          return 1;\n        }\n        ptr = (void *)debugInfo[4];\n        if (ptr == (void *)0x0) {\n          longVar4 = xstrdup(name);\n          debugInfo[4] = longVar4;\n        }\n        else {\n          if (*name == '/') {\n            longVar4 = xstrdup(name);\n          }\n          else {\n            longVar4 = concat(ptr,name,0);\n          }\n          debugInfo[4] = longVar4;\n          free(ptr);\n        }\n        debugInfo[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          longVar4 = 0;\n          if (*(char *)(debugInfo + 0xc) != '\\0') {\n            longVar4 = debugInfo[7];\n          }\n          undefinedVar = record_line_debug_0010bf86(param,(long)value,longVar4 + address);\n          return undefinedVar;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        longVar = (long *)xmalloc();\n        index = *(int *)(debugInfo + 0x10);\n        longVar2 = debugInfo[10];\n        longVar3 = debugInfo[0xb];\n        longVar[5] = 0;\n        longVar4 = debugInfo[0x11];\n        *(int *)(longVar + 4) = index;\n        uintVar = index + 1;\n        *(uint *)(debugInfo + 0x10) = uintVar;\n        *longVar = longVar3;\n        longVar[1] = longVar2;\n        longVar[2] = (long)name;\n        longVar[3] = address;\n        debugInfo[10] = (long)longVar;\n        debugInfo[0xb] = (long)longVar;\n        longVar4 = xrealloc(longVar4,(ulong)uintVar << 3);\n        uintVar = *(uint *)(longVar + 4);\n        debugInfo[0x11] = longVar4;\n        *(undefined8 *)(longVar4 + (ulong)uintVar * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charVar = strchr(name,0x3a);\n    if ((charVar != (char *)0x0) && ((charVar[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(debugInfo + 0xc) != '\\0') {\n        ulongVar = debugInfo[0xd];\n        ulongVar2 = address;\n        if ((ulongVar != 0xffffffffffffffff) && (ulongVar2 = ulongVar, address < ulongVar)) {\n          ulongVar2 = address;\n        }\n        result = process_debug_records_0010c1c6(param,debugInfo);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = debug_end_function_0010be1a(param,ulongVar2);\n        if (result == '\\0') {\n          return 0;\n        }\n        debugInfo[0xd] = -1;\n      }\n      if (*(char *)(debugInfo + 1) != '\\0') {\n        debugInfo[7] = address;\n      }\n      *(undefined *)(debugInfo + 0xc) = 1;\n    }\n    localCharVar = strchr(name,0x3a);\n    if (localCharVar == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharVar[1] == ':') goto code_r0x00111cc7;\n    if (*name == '$') {\n      result = name[1];\n      charVar2 = \"eh_throw\";\n      if (result != 'e') {\n        if (result < 'f') {\n          if ((result != 'X') && (result != '_')) {\nLAB_00111d1a:\n            undefinedVar2 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_message_00108fe8(name,undefinedVar2);\n          }\n        }\n        else {\n          charVar2 = \"this\";\n          if (result == 't') goto LAB_00111d62;\n          if (result != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charVar2 = (char *)0x0;\n      if ((name != localCharVar) && ((*name != ' ' || (localCharVar != name + 1)))) {\n        charVar2 = (char *)copy_and_null_terminate_00109a0b(name,(int)localCharVar - (int)name);\n      }\n    }\nLAB_00111d62:\n    byte1 = localCharVar[1];\n    charVar = localCharVar + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byte1 * 2) >> 2) & 1 |\n        (byte1 == 0x2d || byte1 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte1 == 0) goto switchD_00111de5_caseD_44;\n    charVar = localCharVar + 2;\n    result = localCharVar[1];\n    switch(result) {\n    case 'C':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      charVar = \"debug_record_label: not implemented\";\n      if (longVar4 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      result = record_debug_function_0010bc80(param,charVar2,longVar4,result == 'F',address);\n      if (result != '\\0') {\n        do {\n          if (*localCharVar != ';') {\n            return 1;\n          }\n          localCharVar = localCharVar + 1;\n          longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n        } while (longVar4 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (charVar2 == (char *)0x0) goto LAB_0011208f;\n      longVar2 = debugInfo[3];\n      longVar = (long *)debugInfo[2];\n      result = *(char *)(*(long *)(*debugInfo + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        localCharVar = charVar;\n        do {\n          if (*localCharVar != ';') {\n            return 1;\n          }\n          localCharVar = localCharVar + 1;\n          longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n        } while (longVar4 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 2;\n      break;\n    case 'S':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      result = localCharVar[2];\n      if (result == 't') {\n        charVar = localCharVar + 3;\n      }\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,charVar2,&localCharVar,localPtrToPtrVar);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (charVar2 == (char *)0x0) {\n        return 1;\n      }\n      char1 = *(char *)(debugInfo + 0x35);\n      longVar = (long *)process_debug_tag_0010c6be(param,charVar2,longVar4);\n      if (longVar == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrToPtrVar[0] != (long **)0x0) {\n        *localPtrToPtrVar[0] = longVar;\n      }\n      if (char1 != '\\0') goto LAB_001122f0;\n      ptrToPtrVar = (long **)(debugInfo + 0x34);\n      pplVar18 = (long **)debugInfo[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charVar = localCharVar + 3;\n      if (((localCharVar[2] != '\\0') && (charVar = localCharVar + 4, localCharVar[3] == 'n')) &&\n         (charVar = localCharVar + 5, charVar2 = localCharVar + 4, localCharVar = charVar, *charVar2 == '0')) {\n        for (; charVar = localCharVar, *localCharVar != '\\0'; localCharVar = localCharVar + 1) {\n          if (*localCharVar == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 4;\n      break;\n    case 'c':\n      if (localCharVar[2] == '=') {\n        charVar = localCharVar + 4;\n        result = localCharVar[3];\n        localCharVar = charVar;\n        if (result == 'i') {\n          longVar4 = strtol(charVar,(char **)0x0,10);\n          if (charVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar2 = initialize_or_print_error_00112996(param,charVar2,4);\n          if (longVar2 != 0) {\n            *(long *)(longVar2 + 0x20) = (long)(int)longVar4;\n            return 1;\n          }\n          return 0;\n        }\n        if (result == 'r') {\n          doubleVar = strtod(charVar,(char **)0x0);\n          if (charVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar4 = initialize_or_print_error_00112996(param,charVar2,5);\n          if (longVar4 != 0) {\n            *(double *)(longVar4 + 0x20) = doubleVar;\n            return 1;\n          }\n          return 0;\n        }\n        if (result == 'e') {\n          longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n          if (longVar4 == 0) {\n            return 0;\n          }\n          charVar = localCharVar;\n          if (*localCharVar == ',') {\n            longVar2 = strtol(localCharVar,(char **)0x0,10);\n            if (charVar2 == (char *)0x0) {\n              return 0;\n            }\n            longVar3 = initialize_or_print_error_00112996(param,charVar2,6);\n            if (longVar3 != 0) {\n              longVar = (long *)xmalloc(0x10);\n              *longVar = longVar4;\n              longVar[1] = (long)(int)longVar2;\n              *(long **)(longVar3 + 0x20) = longVar;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharVar[2] == 'F') {\n        localCharVar = localCharVar + 3;\n        longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n        if (longVar4 == 0) {\n          return 0;\n        }\n        undefinedVar2 = initialize_memory_00113ce0(longVar4,0,0);\n        longVar4 = allocate_memory_block_00113d3a(undefinedVar2);\n      }\n      else {\n        localCharVar = charVar;\n        longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      }\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 1;\n      break;\n    case 'r':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 5;\nLAB_001123e8:\n      result = allocate_or_update_record_0010c139(param,debugInfo,charVar2,longVar4,undefinedVar2,address);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,charVar2,&localCharVar,localPtrToPtrVar);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      if (charVar2 == (char *)0x0) {\n        return 1;\n      }\n      longVar = (long *)initialize_debug_name_type_0010c218(param,charVar2,longVar4);\n      if (longVar == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrToPtrVar[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrToPtrVar[0] = longVar;\n      return 1;\n    case 'v':\n      localCharVar = charVar;\n      longVar4 = FUNC_0010ee3f(param,debugInfo,0,&localCharVar,0);\n      if (longVar4 == 0) {\n        return 0;\n      }\n      undefinedVar2 = 3;\n    }\n    result = record_parameter_debug_0010bd62(param,charVar2,longVar4,undefinedVar2,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (value == 1)) {\n      return 1;\n    }\n    result = process_debug_records_0010c1c6(param,debugInfo);\n    if (result == '\\0') {\n      return 0;\n    }\n    result = end_block_debugging_0010bf20(param,debugInfo[7] + debugInfo[6] + address);\n    if (result == '\\0') {\n      return 0;\n    }\n    debugInfo = debugInfo + 0xe;\n    *(int *)debugInfo = *(int *)debugInfo + -1;\n    charVar = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)debugInfo) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        charVar = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charVar = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar2 = dcgettext(0,charVar,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar2);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        index = *(int *)(debugInfo + 0x10);\n        *(uint *)(debugInfo + 0x10) = index + 1U;\n        longVar4 = xrealloc(debugInfo[0x11],(ulong)(index + 1U) << 3);\n        ptrVar = (undefined8 *)debugInfo[0xb];\n        debugInfo[0x11] = longVar4;\n        while( true ) {\n          if (ptrVar == (undefined8 *)0x0) {\n            undefinedVar2 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_message_00108fe8(name,undefinedVar2);\n            *(undefined8 *)(debugInfo[0x11] + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptrVar[3]) && (index = strcmp((char *)ptrVar[2],name), index == 0))\n          break;\n          ptrVar = (undefined8 *)*ptrVar;\n        }\n        *(undefined8 *)(longVar4 + (ulong)(*(int *)(debugInfo + 0x10) - 1) * 8) = ptrVar[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        longVar4 = debugInfo[10];\n        if (longVar4 != 0) {\n          longVar2 = *(long *)(longVar4 + 8);\n          uintVar = *(uint *)(longVar4 + 0x20);\n          debugInfo[10] = longVar2;\n          if ((uintVar < *(uint *)(debugInfo + 0x10)) &&\n             (*(undefined8 *)(longVar4 + 0x28) = *(undefined8 *)(debugInfo[0x11] + (ulong)uintVar * 8),\n             longVar2 != 0)) {\n            name = *(char **)(longVar2 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        name = (char *)debugInfo[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)debugInfo + 0x44) != '\\0') && (value == 1)) {\n      return 1;\n    }\n    if (*(char *)(debugInfo + 0xc) != '\\0') {\n      result = start_block_debugging_0010be88(param,debugInfo[7] + debugInfo[6] + address);\n      if (result == '\\0') {\n        return 0;\n      }\n      result = process_debug_records_0010c1c6(param,debugInfo);\n      if (result != '\\0') {\n        *(int *)(debugInfo + 0xe) = *(int *)(debugInfo + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charVar = \"N_LBRAC not within function\\n\";\n  }\n  charVar = (char *)dcgettext(0,charVar,5);\n  fprintf(_stderr,charVar);\n  return 0;\ncode_r0x00111cc7:\n  localCharVar = localCharVar + 2;\n  localCharVar = strchr(localCharVar,0x3a);\n  if (localCharVar == (char *)0x0) {\n    charVar = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharVar = charVar;\n    print_bad_stab_00108fb9(name);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (result != 't') {\n      return 1;\n    }\n    longVar = (long *)initialize_debug_name_type_0010c218(param,charVar2,longVar);\n    if (longVar != (long *)0x0) {\n      if (localPtrToPtrVar[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrToPtrVar[0] = longVar;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *charVar2) &&\n     (index = strcmp((char *)pplVar18[1],charVar2), index == 0)) {\n    pplVar18[3] = longVar;\n    *ptrToPtrVar = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptrToPtrVar = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar2 < 1) {\nLAB_0011208f:\n    undefinedVar2 = 1;\nLAB_001121c4:\n    result = debug_record_variable_0010c05d(param,charVar2,longVar4,undefinedVar2,address);\njoined_r0x001123f8:\n    if (result != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charVar = *(char **)(*longVar + 8);\n  if ((result != '\\0') && (result == *charVar)) {\n    charVar = charVar + 1;\n  }\n  if ((*charVar == *charVar2) && (index = strcmp(charVar,charVar2), index == 0)) {\n    address = *(long *)(*longVar + 0x10) + *(long *)(*(long *)(*longVar + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar2 = longVar2 + -1;\n  longVar = longVar + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "strlen",
                "dcgettext",
                "FUN_0010bf86",
                "strtod",
                "FUN_00112996",
                "strcmp",
                "FUN_0010ee3f",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00108f08",
                "xrealloc",
                "strchr",
                "free",
                "FUN_0010c6be",
                "FUN_0010c139",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "xstrdup",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "xmalloc",
                "strtol",
                "FUN_00113d3a",
                "FUN_0010bf20",
                "FUN_0010c218",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_debug_records_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "binaryFilePath",
                "param_2": "binaryData",
                "param_3": "binaryLength",
                "cVar1": "hasDuplicates",
                "iVar2": "errorCode",
                "uVar3": "relocCount",
                "lVar4": "relocUpperBound",
                "puVar5": "relocEntries",
                "uVar6": "relocEntriesCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "matchingEntries",
                "puVar8": "matchingEntriesPtr",
                "uVar9": "loopCounter",
                "uStack_38": "errorStack"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 binaryFilePath,undefined8 *binaryData,long binaryLength)\n\n{\n  char hasDuplicates;\n  int errorCode;\n  undefined8 relocCount;\n  long relocUpperBound;\n  undefined8 *relocEntries;\n  ulong relocEntriesCount;\n  code *jumpTable;\n  undefined8 *matchingEntries;\n  undefined8 *matchingEntriesPtr;\n  ulong loopCounter;\n  undefined8 errorStack;\n  \n  hasDuplicates = check_binary_for_duplicates_00115f50(binaryFilePath,binaryData,0);\n  if (hasDuplicates != '\\0') {\n    return;\n  }\n  relocCount = binaryData[0xc];\n  if ((((*(byte *)(binaryLength + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (relocUpperBound = process_entries_00114190(*binaryData,0,0x100), relocUpperBound == 0)) {\n    relocUpperBound = bfd_get_reloc_upper_bound(binaryFilePath,binaryData);\n    if (relocUpperBound < 0) {\n      if ((relocUpperBound != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        DAT_00127a40 = 1;\n        relocCount = 0;\nLAB_00108315:\n        print_error_001126c0(0,binaryFilePath,binaryData,relocCount,errorStack);\n        return;\n      }\n    }\n    else if (relocUpperBound != 0) {\n      relocEntries = (undefined8 *)binaryData[0xe];\n      if (relocEntries == (undefined8 *)0x0) {\n        relocEntries = (undefined8 *)bfd_alloc(binaryLength);\n        if (relocEntries == (undefined8 *)0x0) {\n          print_error_message_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocEntriesCount = bfd_canonicalize_reloc(binaryFilePath,binaryData,relocEntries,DAT_001278d0);\n        if ((long)relocEntriesCount < 0) {\n          DAT_00127a40 = 1;\n          relocCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocEntriesCount = (ulong)*(uint *)(binaryData + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        matchingEntries = relocEntries;\n        for (loopCounter = 0; loopCounter != relocEntriesCount; loopCounter = loopCounter + 1) {\n          matchingEntriesPtr = matchingEntries;\n          if (((*(long **)relocEntries[loopCounter] != (long *)0x0) &&\n              (relocUpperBound = **(long **)relocEntries[loopCounter], relocUpperBound != 0)) &&\n             (hasDuplicates = check_matching_pattern_00115d70(*(undefined8 *)(relocUpperBound + 8),DAT_00127a28), hasDuplicates != '\\0')) {\n            matchingEntriesPtr = matchingEntries + 1;\n            *matchingEntries = relocEntries[loopCounter];\n          }\n          matchingEntries = matchingEntriesPtr;\n        }\n        *matchingEntries = 0;\n        relocEntriesCount = (long)matchingEntries - (long)relocEntries >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(binaryLength + 8) + 0x288);\n      if (relocEntriesCount == 0) {\n        relocEntriesCount = 0;\n        relocEntries = (undefined8 *)0x0;\n      }\n      else {\n        relocEntriesCount = relocEntriesCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocEntriesCount = 0;\n  relocEntries = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(binaryLength + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(binaryLength,relocCount,relocEntries,relocEntriesCount);\n  return;\n}\n\n",
            "called": [
                "FUN_001082df",
                "FUN_00115f50",
                "xexit",
                "bfd_alloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00114190",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "FUN_0011a110",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_find_string_0010d559",
                "param_1": "input_array",
                "param_2": "input_string",
                "param_3": "output_length",
                "bVar1": "first_char",
                "pbVar2": "current_char",
                "cVar3": "parse_result",
                "uVar4": "extracted_number",
                "iVar5": "comparison_result",
                "ppcVar6": "temp_array",
                "sVar7": "string_length",
                "lVar8": "result",
                "plVar9": "pointer_array",
                "pcVar10": "temp_string",
                "__s1": "temp_string",
                "__ptr": "temp_pointer",
                "pbVar11": "new_char",
                "uVar12": "named_type_flag",
                "local_64": "loop_counter",
                "local_40": "temporary_string_array"
            },
            "code": "\nundefined8 parse_and_find_string_0010d559(undefined8 *input_array,byte **input_string,long *output_length)\n\n{\n  byte first_char;\n  byte *current_char;\n  char parse_result;\n  uint extracted_number;\n  int comparison_result;\n  char **temp_array;\n  size_t string_length;\n  long result;\n  long *pointer_array;\n  char *temp_string;\n  char *temp_string;\n  void *temp_pointer;\n  byte *new_char;\n  undefined8 named_type_flag;\n  byte *__nptr;\n  int loop_counter;\n  char *temporary_string_array [2];\n  \n  current_char = *input_string;\n  first_char = current_char[1];\n  if ((char)first_char < ':') {\n    if ((char)first_char < '1') goto LAB_0010d5d8;\n    loop_counter = (char)first_char + -0x30;\n    if (current_char[2] == 0x5f) {\n      *input_string = current_char + 1;\n    }\n    new_char = *input_string + 2;\n  }\n  else {\n    if (((first_char != 0x5f) || (((&_sch_istable)[(ulong)current_char[2] * 2] & 4) == 0)) ||\n       (current_char[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_char + 2;\n    result = strtol((char *)__nptr,(char **)0x0,10);\n    loop_counter = (int)result;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    new_char = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_string = new_char;\n  temp_array = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    temp_array = temporary_string_array;\n  }\n  result = 0;\n  while( true ) {\n    while( true ) {\n      loop_counter = loop_counter + -1;\n      if (loop_counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = result;\n        }\n        return 1;\n      }\n      if (**input_string == 0x5f) {\n        *input_string = *input_string + 1;\n      }\n      if (**input_string != 0x74) break;\n      parse_result = parse_string_0010d21c(input_array,input_string,temp_array);\n      temp_string = temporary_string_array[0];\n      if (parse_result == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(temporary_string_array[0]);\n        result = find_string_in_memory_0010afd5(*input_array,input_array[1],temp_string,string_length & 0xffffffff,9);\n        free(temp_string);\n        if (result == 0) {\n          return 0;\n        }\n      }\n    }\n    extracted_number = extract_number_from_string_00108e76(input_string);\n    string_length = strlen((char *)*input_string);\n    if (string_length < extracted_number) break;\n    if (output_length != (long *)0x0) {\n      if ((result != 0) && (pointer_array = (long *)extract_real_value_00113b1e(result), pointer_array != (long *)0x0)) {\n        temp_string = (char *)copy_and_null_terminate_00109a0b(*input_string,extracted_number);\n        for (; result = *pointer_array, result != 0; pointer_array = pointer_array + 1) {\n          result = *(long *)(result + 8);\n          if (result == 0) {\n            free(temp_string);\n            return 0;\n          }\n          temp_string = (char *)get_return_value_001129f4(result);\n          if ((temp_string != (char *)0x0) && (comparison_result = strcmp(temp_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (result != 0) goto LAB_0010d7ad;\n      }\n      named_type_flag = 9;\n      if (loop_counter == 0) {\n        temp_pointer = (void *)copy_and_null_terminate_00109a0b(*input_string,extracted_number);\n        result = find_named_type_in_binary_0010914e(*input_array,temp_pointer);\n        free(temp_pointer);\n        if (result != 0) goto LAB_0010d7ad;\n        named_type_flag = 0;\n      }\n      result = find_string_in_memory_0010afd5(*input_array,input_array[1],*input_string,extracted_number,named_type_flag);\n      if (result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_string = *input_string + extracted_number;\n  }\nLAB_0010d5d8:\n  print_bad_name_error_0010911f(current_char);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010afd5",
                "strlen",
                "FUN_001129f4",
                "strtol",
                "FUN_00109a0b",
                "FUN_00113b1e",
                "FUN_00108e76",
                "strcmp",
                "FUN_0010914e",
                "FUN_0010911f",
                "free",
                "FUN_0010d21c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_find_string_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_00108466",
                "param_7": "resource"
            },
            "code": "\nvoid cleanupAndPrintError_00108466(void)\n\n{\n  void *resource;\n  \n  DAT_00127a40 = 1;\n  print_error_001126c0(0);\n  free(resource);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_number_from_string_00108e76",
                "param_1": "string_pointer",
                "bVar1": "current_char",
                "iVar2": "result"
            },
            "code": "\nint extract_number_from_string_00108e76(byte **string_pointer)\n\n{\n  byte current_char;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_char = **string_pointer;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *string_pointer = *string_pointer + 1;\n    result = result * 10 + -0x30 + (int)(char)current_char;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "extract_number_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "create_hash_function_0010bb52",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "hashValue"
            },
            "code": "\nlong createHashFunction_0010bb52(long inputValue,undefined8 param2,undefined8 param3)\n\n{\n  long hashValue;\n  \n  if (((inputValue != 0) || (inputValue = bfd_hash_allocate(param2,0x30), inputValue != 0)) &&\n     (hashValue = bfd_hash_newfunc(inputValue,param2,param3), hashValue != 0)) {\n    *(undefined8 *)(hashValue + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hashValue + 0x18) = 0;\n    *(undefined4 *)(hashValue + 0x28) = 0;\n    return hashValue;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "create_hash_function_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "set_string_and_process_thunk_0010e439",
                "param_1": "baseAddress",
                "param_2": "stringValue",
                "process_string_0010e2f0": "processString"
            },
            "code": "\nvoid setStringAndProcess_thunk_0010e439(long baseAddress,undefined8 stringValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = stringValue;\n  processString(baseAddress,0x84,0,0,stringValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_string_and_process_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permissions_0011283f",
                "param_1": "path",
                "param_2": "directory",
                "iVar1": "access_result",
                "sStack_a8": "file_stats"
            },
            "code": "\nchar * check_directory_permissions_0011283f(char *path,char *directory)\n\n{\n  int access_result;\n  stat file_stats;\n  \n  if ((directory == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stats);\n      if ((access_result == 0) && ((file_stats.st_mode & 0xf000) == 0x4000)) {\n        directory = path;\n      }\n    }\n  }\n  return directory;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permissions_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_return_error_00108237",
                "piVar2": "errno_ptr",
                "iVar1": "errno_value",
                "unaff_R12D": "file_descriptor"
            },
            "code": "\nundefined8 close_file_and_return_error_00108237(void)\n\n{\n  int errno_value;\n  int *errno_ptr;\n  int file_descriptor;\n  \n  errno_ptr = __errno_location();\n  errno_value = *errno_ptr;\n  close(file_descriptor);\n  *errno_ptr = errno_value;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_and_return_error_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "filePointer",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flag",
                "uVar1": "errorMessage",
                "plVar2": "debugRecordStructPtr",
                "puVar3": "dataStructurePtr",
                "lVar4": "tmpLong",
                "puVar5": "tmpPtr",
                "pcVar6": "tmpStr",
                "bVar7": "flagValue",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long filePointer,char *filename,long size,uint flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 errorMessage;\n  long *debugRecordStructPtr;\n  undefined4 *dataStructurePtr;\n  long tmpLong;\n  undefined4 *tmpPtr;\n  char *tmpStr;\n  byte flagValue;\n  undefined returnValue [16];\n  \n  flagValue = 0;\n  tmpStr = \"\";\n  if (filename != (char *)0x0) {\n    tmpStr = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(filePointer + 8) == 0) {\n      errorMessage = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      debugRecordStructPtr = (long *)xmalloc(0x18);\n      *debugRecordStructPtr = size;\n      *(undefined (*) [16])(debugRecordStructPtr + 1) = ZEXT816(0);\n      dataStructurePtr = (undefined4 *)xmalloc(0x30);\n      *(long **)(filePointer + 0x18) = debugRecordStructPtr;\n      debugRecordStructPtr[2] = (long)dataStructurePtr;\n      tmpPtr = dataStructurePtr;\n      for (tmpLong = 0xc; tmpLong != 0; tmpLong = tmpLong + -1) {\n        *tmpPtr = 0;\n        tmpPtr = tmpPtr + (ulong)flagValue * -2 + 1;\n      }\n      *(undefined4 **)(filePointer + 0x20) = dataStructurePtr;\n      tmpLong = *(long *)(filePointer + 0x10);\n      *(undefined8 *)(dataStructurePtr + 6) = param_5;\n      *(undefined8 *)(dataStructurePtr + 8) = 0xffffffffffffffff;\n      tmpLong = initialize_data_structure_00112925(tmpLong + 0x10,tmpStr,3,(flag & 0xff) + 1);\n      if (tmpLong != 0) {\n        *(long **)(tmpLong + 0x20) = debugRecordStructPtr;\n        errorMessage = CONCAT71((int7)((ulong)tmpLong >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param_6;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = construct_filename_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = construct_filename_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_entries_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_entries_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_entries_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = reorganize_and_improve_debugging_data_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_and_free_memory_block_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_debug_records_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_buffer_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_and_free_memory_block_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = parse_debug_records_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_tag_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_block_debugging_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debugging_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = initialize_section_data_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_matching_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_matching_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_matching_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_matching_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = initialize_section_data_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = improve_and_extract_code_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_and_reverse_section_contents_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "dcgettext",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "index",
                "lVar3": "allocationOffset",
                "lVar4": "slashOffset",
                "pcVar5": "newFilePath",
                "bVar6": "isSlash"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long index;\n  long allocationOffset;\n  long slashOffset;\n  char *newFilePath;\n  byte isSlash;\n  \n  isSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    allocationOffset = 0;\n  }\n  else {\n    slashOffset = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(slashOffset + 0xb);\n    allocationOffset = slashOffset + 1;\n    newFilePath = lastSlash;\n    for (index = slashOffset; index != 0; index = index + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)isSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)isSlash * -2 + 1;\n    }\n    lastSlash[slashOffset] = '/';\n  }\n  *(undefined8 *)(lastSlash + allocationOffset) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + allocationOffset) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "extract_and_initialize_0010a181",
                "param_1": "obj_ptr",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "flag_value",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "string1_length",
                "sVar6": "string2_length",
                "__s_01": "new_string",
                "local_41": "new_flag_value",
                "iVar2": "integer_value1",
                "lVar7": "counter",
                "iVar3": "computed_value",
                "uVar4": "result"
            },
            "code": "\nundefined4 extract_and_initialize_0010a181(long obj_ptr,long start_index,long end_index,byte flag)\n\n{\n  char flag_value;\n  int integer_value1;\n  int computed_value;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t string1_length;\n  size_t string2_length;\n  char *new_string;\n  long counter;\n  byte new_flag_value;\n  \n  flag_value = *(char *)(*(long *)(obj_ptr + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_00109b2f();\n  new_flag_value = 1;\n  if (flag_value == '\\0') {\n    new_flag_value = *(byte *)(*(long *)(obj_ptr + 0x60) + 0x1c);\n  }\n  integer_value1 = *(int *)(*(long *)(obj_ptr + 0x60) + 0x18);\n  string2 = (char *)extract_and_free_00109b2f(obj_ptr);\n  string1_length = strlen(string1);\n  string2_length = strlen(string2);\n  new_string = (char *)xmalloc(string1_length + 100 + string2_length);\n  if (flag == 0) {\n    *new_string = '\\0';\n    counter = 0;\n    new_flag_value = new_flag_value & 1;\n  }\n  else {\n    counter = *(long *)(obj_ptr + 0x68);\n    *(long *)(obj_ptr + 0x68) = counter + 1;\n    sprintf(new_string,\"%ld=@S;\",counter);\n    new_flag_value = flag;\n  }\n  string1_length = strlen(new_string);\n  sprintf(new_string + string1_length,\"ar%s;%ld;%ld;%s\",string1,start_index,end_index,string2);\n  free(string1);\n  free(string2);\n  computed_value = 0;\n  if (start_index <= end_index) {\n    computed_value = integer_value1 * (((int)end_index - (int)start_index) + 1);\n  }\n  result = initialize_object_00109b52(obj_ptr,new_string,counter,new_flag_value,computed_value);\n  if ((char)result != '\\0') {\n    free(new_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_initialize_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_binary_file_details_001199d0",
                "pcVar4": "headerMessage",
                "iVar1": "columnWidth",
                "iVar2": "targetNum",
                "iVar3": "compareResult",
                "pcVar6": "tempFileName",
                "sVar5": "length",
                "piVar8": "errorCode",
                "iVar9": "counter",
                "lVar10": "index",
                "lVar11": "archIndex",
                "ppcVar12": "fileNames",
                "uVar13": "maxArchLength",
                "uVar14": "fileLength",
                "local_70": "fileCount"
            },
            "code": "\n\n\nvoid printBinaryFileDetails_001199d0(void)\n\n{\n  int columnWidth;\n  int targetNum;\n  int compareResult;\n  char *headerMessage;\n  size_t length;\n  char *tempFileName;\n  undefined8 uVar7;\n  int *errorCode;\n  int counter;\n  long index;\n  long archIndex;\n  char **fileNames;\n  uint maxArchLength;\n  ulong fileLength;\n  int fileCount;\n  \n  headerMessage = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerMessage,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    headerMessage = getenv(\"TMPDIR\");\n    uVar7 = check_directory_permissions_0011283f(headerMessage,0);\n    headerMessage = getenv(\"TMP\");\n    uVar7 = check_directory_permissions_0011283f(headerMessage,uVar7);\n    headerMessage = getenv(\"TEMP\");\n    uVar7 = check_directory_permissions_0011283f(headerMessage,uVar7);\n    uVar7 = check_directory_permissions_0011283f(&DAT_0011b39a,uVar7);\n    uVar7 = check_directory_permissions_0011283f(\"/var/tmp\",uVar7);\n    headerMessage = (char *)check_directory_permissions_0011283f(&DAT_00120324,uVar7);\n    if (headerMessage == (char *)0x0) {\n      headerMessage = \".\";\n    }\n    length = strlen(headerMessage);\n    tempFileName = (char *)xmalloc((int)length + 2);\n    DAT_001278e0 = strcpy(tempFileName,headerMessage);\n    DAT_001278e0[length & 0xffffffff] = '/';\n    DAT_001278e0[(int)length + 1] = '\\0';\n  }\n  headerMessage = DAT_001278e0;\n  length = strlen(DAT_001278e0);\n  index = (long)(int)length;\n  tempFileName = (char *)xmalloc(index + 9);\n  strcpy(tempFileName,headerMessage);\n  *(undefined2 *)(tempFileName + index) = 0x6363;\n  *(undefined4 *)(tempFileName + index + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFileName + index + 2) + 3) = 0x585858;\n  tempFileName[index + 8] = '\\0';\n  targetNum = mkstemps(tempFileName,0);\n  if (targetNum == -1) {\n    errorCode = __errno_location();\n    tempFileName = strerror(*errorCode);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerMessage,tempFileName);\n                    \n    abort();\n  }\n  targetNum = close(targetNum);\n  if (targetNum != 0) {\n                    \n    abort();\n  }\n  maxArchLength = 0;\n  targetNum = 2;\n  bfd_iterate_over_targets(process_binary_file_00119f70);\n  unlink(tempFileName);\n  free(tempFileName);\n  fileCount = 0;\n  do {\n    headerMessage = (char *)bfd_printable_arch_mach(targetNum);\n    length = strlen(headerMessage);\n    if ((int)maxArchLength < (int)(uint)length) {\n      maxArchLength = (uint)length;\n    }\n    targetNum = targetNum + 1;\n  } while (targetNum != 0x57);\n  headerMessage = getenv(\"COLUMNS\");\n  targetNum = fileCount;\n  if (headerMessage != (char *)0x0) {\n    index = strtol(headerMessage,(char **)0x0,10);\n    columnWidth = (int)index;\n    if (columnWidth != 0) goto LAB_00119b11;\n  }\n  columnWidth = 0x50;\nLAB_00119b11:\n  do {\n    fileCount = targetNum;\n    if (-1 < fileCount) {\n      return;\n    }\n    archIndex = (long)fileCount;\n    counter = (columnWidth - maxArchLength) + -1;\n    index = archIndex;\n    do {\n      targetNum = (int)index;\n      if (-1 < targetNum) break;\n      length = strlen(*(char **)(index * 0x60));\n      index = index + 1;\n      counter = (counter - (int)length) + -1;\n    } while (-1 < counter);\n    printf(\"\\n%*s\",(ulong)(maxArchLength + 1),&DAT_0011b4a1);\n    for (fileNames = (char **)(archIndex * 0x60);\n        ((ulong)(uint)(targetNum - fileCount) + archIndex) * 0x60 - (long)fileNames != 0;\n        fileNames = fileNames + 0xc) {\n      printf(\"%s \",*fileNames);\n    }\n    counter = 2;\n    putc(10,_stdout);\n    do {\n      headerMessage = (char *)bfd_printable_arch_mach(counter,0);\n      compareResult = strcmp(headerMessage,\"UNKNOWN!\");\n      if (compareResult != 0) {\n        uVar7 = bfd_printable_arch_mach(counter,0);\n        printf(\"%*s \",(ulong)maxArchLength,uVar7);\n        fileNames = (char **)(archIndex * 0x60);\n        compareResult = fileCount;\n        while (targetNum != compareResult) {\n          if (*(char *)((long)fileNames + (ulong)(counter - 2) + 8) == '\\0') {\n            length = strlen(*fileNames);\n            for (fileLength = length & 0xffffffff; (int)fileLength != 0; fileLength = (ulong)((int)fileLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*fileNames,_stdout);\n          }\n          compareResult = compareResult + 1;\n          if (targetNum != compareResult) {\n            putc(0x20,_stdout);\n          }\n          fileNames = fileNames + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      counter = counter + 1;\n    } while (counter != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "getenv",
                "abort",
                "bfd_iterate_over_targets",
                "FUN_00119f70",
                "strlen",
                "mkstemps",
                "FUN_00104943",
                "dcgettext",
                "FUN_0011283f",
                "strcpy",
                "unlink",
                "printf",
                "strerror",
                "xmalloc",
                "close",
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binary_file_details_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "execute_initial_function_0010847a"
            },
            "code": "\nvoid executeInitialFunction_0010847a(void)\n\n{\n  process_build_attribute_notes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "execute_initial_function_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_string_0010d21c",
                "bVar1": "byte1",
                "pbVar2": "bytePtr",
                "bVar3": "byte2",
                "cVar4": "charVar",
                "bVar5": "byte3",
                "uVar6": "result",
                "iVar7": "intVar",
                "uVar8": "parseResult",
                "sVar9": "stringLength",
                "pbVar10": "bytePtr1",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "var11",
                "uVar12": "var12",
                "pcVar13": "var13",
                "bVar14": "byte4",
                "pcVar15": "var15",
                "bVar16": "byte5",
                "bVar17": "byte6",
                "bVar18": "byte7",
                "bVar19": "byte8",
                "uVar20": "count",
                "uVar21": "ulongVar",
                "local_3c": "array"
            },
            "code": "\nundefined4 parseString_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte byte1;\n  byte *bytePtr;\n  byte byte2;\n  char charVar;\n  byte byte3;\n  undefined4 result;\n  int intVar;\n  uint parseResult;\n  size_t stringLength;\n  byte *bytePtr1;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *var11;\n  undefined8 var12;\n  char *var13;\n  byte byte4;\n  char *var15;\n  byte byte5;\n  byte byte6;\n  byte byte7;\n  byte byte8;\n  uint count;\n  ulong ulongVar;\n  uint array [3];\n  \n  bytePtr = *param_2;\n  *param_2 = bytePtr + 1;\n  array[0] = extract_number_from_string_00108e76(param_2);\n  ulongVar = (ulong)array[0];\n  if (array[0] != 0) {\n    bytePtr1 = *param_2;\n    stringLength = strlen((char *)bytePtr1);\n    if (ulongVar <= stringLength) {\n      *param_2 = bytePtr1 + ulongVar;\n      count = 0;\n      result = parse_number_00108ea1(param_2,array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (array[0] <= count) {\n          if (param_3 == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)copy_and_null_terminate_00109a0b(bytePtr,(int)*param_2 - (int)bytePtr);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (var11 = strstr(haystack,\"::NoSuchStrinG\"), var13 = haystack,\n             var15 = haystack, var11 != (char *)0x0)) {\n            for (; var13 != var11; var13 = var13 + 1) {\n              if ((*var13 != ' ') ||\n                 (((var13[1] == '>' && (haystack < var13)) && (var13[-1] == '>')))) {\n                *var15 = *var13;\n                var15 = var15 + 1;\n              }\n            }\n            var12 = copy_and_null_terminate_00109a0b(haystack,(int)var15 - (int)haystack);\n            *param_3 = var12;\n            free(haystack);\n            return result;\n          }\n          print_bad_name_error_0010911f(bytePtr);\n          free(haystack);\n          return 0;\n        }\n        bytePtr1 = *param_2;\n        if (*bytePtr1 != 0x5a) {\n          byte3 = process_binary_data_0010c95e(param_1,param_2,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          byte2 = 0;\n          byte4 = 0;\n          byte7 = 0;\n          byte6 = 0;\n          byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte5 = byte2;\n              byte1 = *bytePtr1;\n              if ((byte4 | byte1 == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte2 = byte3;\n              byte4 = byte3;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr1 = bytePtr1 + 1;\n              byte2 = byte5;\n              byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte2 = byte5;\n              byte7 = byte3;\n              break;\n            case 99:\n              byte2 = byte5;\n              byte8 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte2 = byte5;\n              byte6 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = bytePtr1 + 1;\n        charVar = process_binary_data_0010c95e(param_1,param_2,0);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_bad_name_error_0010911f(bytePtr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte5 == 0) {\n    if (byte8 == 0) {\n      if (byte7 == 0) {\n        if (byte6 == 0) {\n          if (byte3 != 0) {\n            parseResult = extract_number_from_string_00108e76(param_2);\n            if (parseResult == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + parseResult;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            bytePtr1 = *param_2;\n            if (((&_sch_istable)[(ulong)*bytePtr1 * 2] & 4) == 0) break;\n            *param_2 = bytePtr1 + 1;\n          }\n          if (*bytePtr1 == 0x2e) {\n            do {\n              bytePtr1 = bytePtr1 + 1;\n              *param_2 = bytePtr1;\n            } while (((&_sch_istable)[(ulong)*bytePtr1 * 2] & 4) != 0);\n          }\n          bytePtr1 = *param_2;\n          if (*bytePtr1 == 0x65) {\n            do {\n              bytePtr1 = bytePtr1 + 1;\n              *param_2 = bytePtr1;\n            } while (((&_sch_istable)[(ulong)*bytePtr1 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        parseResult = extract_number_from_string_00108e76(param_2);\n        if (1 < parseResult) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      intVar = extract_number_from_string_00108e76(param_2);\n      if (intVar == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  count = count + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "abort",
                "FUN_00108ea1",
                "strstr",
                "strlen",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108e76",
                "concat",
                "FUN_0010911f",
                "cplus_demangle",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_string_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = extract_number_from_string_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_null_terminate_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_null_terminate_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_bad_name_error_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_bad_name_error_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = extract_number_from_string_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = extract_number_from_string_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = extract_number_from_string_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hashtables_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupHashtables_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hashtables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_or_update_record_0010c139",
                "param_1": "context",
                "param_2": "recordAddr",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "prevRecordAddr",
                "cVar2": "recordFlag",
                "uVar3": "result",
                "puVar4": "newRecord",
                "in_R10": "register10",
                "unaff_R15": "unaffectedRegister15"
            },
            "code": "\nulong allocateOrUpdateRecord_0010c139(undefined8 context,long recordAddr,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 prevRecordAddr;\n  char recordFlag;\n  ulong result;\n  undefined8 *newRecord;\n  undefined8 register10;\n  undefined8 unaffectedRegister15;\n  \n  recordFlag = *(char *)(recordAddr + 0x60);\n  if ((recordFlag != '\\0') && ((*(int *)(recordAddr + 0x40) != 0 || (*(char *)(recordAddr + 0x44) == '\\0')))) {\n    newRecord = (undefined8 *)xmalloc(0x28);\n    prevRecordAddr = *(undefined8 *)(recordAddr + 0x78);\n    *(undefined8 *)((long)newRecord + 0x1c) = 0;\n    newRecord[2] = param4;\n    *(undefined4 *)(newRecord + 3) = param5;\n    newRecord[4] = param6;\n    *(undefined8 **)(recordAddr + 0x78) = newRecord;\n    *newRecord = prevRecordAddr;\n    newRecord[1] = param3;\n    return CONCAT71((int7)((ulong)unaffectedRegister15 >> 8),recordFlag) & 0xffffffff;\n  }\n  result = debug_record_variable_0010c05d(context,param3,param4,param5,param6,register10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_or_update_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_string_and_process_0010e439",
                "param_1": "base_address",
                "param_2": "input_string",
                "process_string_0010e2f0": "process_string"
            },
            "code": "\nvoid set_string_and_process_0010e439(long base_address,undefined8 input_string)\n\n{\n  *(undefined8 *)(base_address + 0x210) = input_string;\n  process_string(base_address,0x84,0,0,input_string);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_string_and_process_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010e9a0",
                "FUN_0010b800",
                "FUN_00109e76",
                "FUN_0010e918",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010abdd",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010554f",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00113ede",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_00113fb0",
                "FUN_0010b800",
                "FUN_0010e918",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_001199d0",
                "FUN_00104ad6",
                "FUN_00109bbb",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_object_00109d3e",
                "param_1": "object_address",
                "param_2": "object_size",
                "uVar1": "initialized_value"
            },
            "code": "\nvoid initialize_object_00109d3e(undefined8 object_address,int object_size)\n\n{\n  undefined8 initialized_value;\n  \n  initialized_value = 0xfffffffffffffff0;\n  if (object_size - 1U < 8) {\n    initialized_value = *(undefined8 *)(&DAT_00121360 + (ulong)(object_size - 1U) * 8);\n  }\n  initialize_object_00109d3e_with_params_00109cf4(object_address,initialized_value,object_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_object_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_and_check_files_00112502",
                "param_1": "file_data",
                "param_2": "file_handle",
                "param_3": "file_size",
                "uVar1": "index",
                "puVar2": "file_array_ptr",
                "uVar3": "temp_var",
                "cVar4": "return_value",
                "process_file_0010edb4": "process_file"
            },
            "code": "\nundefined process_and_check_files_00112502(long file_data,undefined8 file_handle,ulong file_size)\n\n{\n  uint index;\n  undefined8 *file_array_ptr;\n  undefined8 temp_var;\n  char return_value;\n  \n  do {\n    file_array_ptr = *(undefined8 **)(file_data + 0x40);\n    if (file_array_ptr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_data + 0x48), index < 10 && (file_array_ptr[(ulong)index + 2] != -1))) {\n      if (file_size <= (ulong)file_array_ptr[(ulong)index + 0xc]) {\n        return 1;\n      }\n      return_value = process_file(file_handle,*(undefined8 *)(file_array_ptr[1] + 8));\n      if (return_value == '\\0') {\n        return 0;\n      }\n      *(int *)(file_data + 0x48) = *(int *)(file_data + 0x48) + 1;\n    }\n    temp_var = *file_array_ptr;\n    *(undefined4 *)(file_data + 0x48) = 0;\n    *(undefined8 *)(file_data + 0x40) = temp_var;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_and_check_files_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_input_lines_00104cc1",
                "unaff_RBX": "currentLine",
                "pbVar5": "nextLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "lineBuffer",
                "unaff_R13": "param1",
                "unaff_R14": "param2",
                "unaff_R15": "param3",
                "param_7": "param4",
                "param_8": "param5",
                "param_9": "param6",
                "uVar1": "errorMessage",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentChar",
                "bVar4": "currentByte"
            },
            "code": "\nvoid processInputLines_00104cc1(void)\n\n{\n  undefined8 errorMessage;\n  byte **slotPtr;\n  byte *currentChar;\n  byte currentByte;\n  byte *currentLine;\n  byte *nextLine;\n  int lineNumber;\n  byte *lineBuffer;\n  undefined8 param1;\n  byte *param2;\n  byte *param3;\n  undefined8 param4;\n  undefined8 *param5;\n  byte *param6;\n  \ncode_r0x00104cc1:\n  param6 = lineBuffer;\n  errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(errorMessage,param4,lineNumber);\n  nextLine = currentLine;\n  lineBuffer = param6;\nLAB_00114599:\n  do {\n    *lineBuffer = 0;\n    if (param3 < lineBuffer) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = param3;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = nextLine;\n    if (param2[1] == 0) {\n      *param5 = param1;\n      return;\n    }\n    for (; currentByte = *currentChar, param2 = currentChar, currentByte != 10; currentChar = currentChar + 1) {\n      if ((char)currentByte < '\\v') {\n        if (currentByte == 0) {\n          currentLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (currentByte == 0xd) {\n          *currentChar = 0;\n          currentLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            currentLine = currentChar + 2;\n            param2 = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (currentByte == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      param2 = currentChar + 1;\n      currentLine = currentChar + 2;\n    }\n    else {\n      currentLine = currentChar + 1;\n    }\nLAB_00114553:\n    currentByte = *nextLine;\n    param3 = nextLine;\n    while ((currentByte == 0x20 || (lineBuffer = param3, currentByte == 9))) {\n      nextLine = param3 + 1;\n      param3 = param3 + 1;\n      currentByte = *nextLine;\n    }\n    do {\n      nextLine = currentLine;\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = lineBuffer[1];\n      lineBuffer = lineBuffer + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    currentByte = lineBuffer[1];\n    if ((((((currentByte == 9) || (currentByte == 0x20)) && ((currentByte = lineBuffer[2], currentByte == 9 || (currentByte == 0x20)))\n          ) && ((currentByte = lineBuffer[3], currentByte == 9 || (currentByte == 0x20)))) &&\n        ((currentByte = lineBuffer[4], currentByte == 9 || (currentByte == 0x20)))) &&\n       ((currentByte = lineBuffer[5], currentByte == 9 || (currentByte == 0x20)))) {\n      currentByte = lineBuffer[6];\n      currentChar = lineBuffer + 6;\n      if ((currentByte == 9) || (currentByte == 0x20)) {\n        do {\n          do {\n            currentByte = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (currentByte == 0x20);\n        } while (currentByte == 9);\n      }\n    }\n    if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c",
                "dcgettext",
                "FUN_00104cc1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_input_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010aa53",
                "FUN_0010ab4d",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_00109ed3",
                "FUN_0010d7d4",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_00109be3",
                "FUN_0010dac0",
                "FUN_0010abdd",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_memory_block_00113bfa",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "memory_block",
                "plVar2": "allocated_block"
            },
            "code": "\nlong initialize_memory_block_00113bfa(long input1,long input2)\n\n{\n  long memory_block;\n  long *allocated_block;\n  \n  if (((input1 != 0) && (input2 != 0)) && (memory_block = initialize_memory_block_00113bfa_00112904(0x12,0), memory_block != 0)) {\n    allocated_block = (long *)xmalloc(0x10);\n    *allocated_block = input1;\n    allocated_block[1] = input2;\n    *(long **)(memory_block + 0x10) = allocated_block;\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_and_drop_share_flag_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "value1",
                "uVar2": "errorMessage",
                "unaff_EBX": "modified_EBX"
            },
            "code": "\nuint checkAndDropShareFlag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 value1;\n  undefined8 errorMessage;\n  uint modified_EBX;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    value1 = *param2;\n    modified_EBX = modified_EBX & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,value1,param3);\n  }\n  return modified_EBX;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_and_drop_share_flag_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_initialize_object_00109e76",
                "param_1": "objectAddress",
                "param_2": "value",
                "lVar1": "objectValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateAndInitializeObject_00109e76(long objectAddress,uint value)\n\n{\n  long objectValue;\n  char formattedString [58];\n  \n  objectValue = *(long *)(objectAddress + 0x68);\n  *(long *)(objectAddress + 0x68) = objectValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",objectValue,objectValue,(ulong)value);\n  initialize_object_00109b52(objectAddress,formattedString,objectValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_initialize_object_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_and_free_memory_block_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newString",
                "iVar1": "currentBlockIndex",
                "lVar2": "previousBlockIndex",
                "lVar3": "blockOffset",
                "uVar4": "duplicatedString"
            },
            "code": "\nulong updateAndFreeMemoryBlock_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newString)\n\n{\n  int currentBlockIndex;\n  long previousBlockIndex;\n  long blockOffset;\n  undefined8 duplicatedString;\n  \n  previousBlockIndex = (long)DAT_001278c0;\n  blockOffset = previousBlockIndex * 0x18;\n  free((void *)(&DAT_00127750)[previousBlockIndex * 3]);\n  *(undefined4 *)(&DAT_00127740 + blockOffset) = newValue1;\n  *(undefined4 *)(&DAT_00127744 + blockOffset) = newValue2;\n  *(undefined8 *)(&DAT_00127748 + blockOffset) = newValue3;\n  duplicatedString = xstrdup(newString);\n  (&DAT_00127750)[previousBlockIndex * 3] = duplicatedString;\n  currentBlockIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = currentBlockIndex % 0x10;\n  return (long)currentBlockIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_and_free_memory_block_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_memory_0010afd5",
                "param_1": "list_ptr",
                "param_2": "context",
                "param_3": "string_ptr",
                "param_4": "length",
                "param_5": "value",
                "param_6": "block_size",
                "__s2": "search_string",
                "iVar1": "result",
                "puVar2": "current_ptr",
                "uVar3": "block_value",
                "lVar4": "block_length",
                "puVar5": "inner_list_ptr",
                "puVar6": "inner_value",
                "bVar7": "counter",
                "auVar8": "result_value"
            },
            "code": "\nundefined  [16]\nfindStringInMemory_0010afd5(undefined8 *list_ptr,long context,undefined8 string_ptr,undefined4 length,\n            undefined4 value,undefined8 block_size)\n\n{\n  int result;\n  char *search_string;\n  undefined8 *current_ptr;\n  undefined8 block_value;\n  long block_length;\n  undefined8 *inner_list_ptr;\n  undefined4 *inner_value;\n  byte counter;\n  undefined result_value [16];\n  \n  counter = 0;\n  search_string = (char *)copy_and_null_terminate_00109a0b(string_ptr,length);\n  for (list_ptr = (undefined8 *)*list_ptr; list_ptr != (undefined8 *)0x0;\n      list_ptr = (undefined8 *)*list_ptr) {\n    for (current_ptr = (undefined8 *)list_ptr[1]; current_ptr != (undefined8 *)0x0;\n        current_ptr = (undefined8 *)*current_ptr) {\n      if ((undefined8 *)current_ptr[2] != (undefined8 *)0x0) {\n        for (inner_list_ptr = *(undefined8 **)(undefined8 *)current_ptr[2]; inner_list_ptr != (undefined8 *)0x0;\n            inner_list_ptr = (undefined8 *)*inner_list_ptr) {\n          if ((*(int *)((long)inner_list_ptr + 0x14) == 1) && (*(char *)inner_list_ptr[1] == *search_string)) {\n            result = strcmp((char *)inner_list_ptr[1],search_string);\n            if (result == 0) {\n              block_length = inner_list_ptr[4];\n              if (block_length == 0) goto LAB_0010b05b;\n              free(search_string);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_ptr = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_ptr == (undefined8 *)0x0) {\n      current_ptr = (undefined8 *)xmalloc(0x28);\n      block_value = *(undefined8 *)(context + 0x1a0);\n      inner_value = (undefined4 *)((long)current_ptr + 0x14);\n      for (block_length = 5; block_length != 0; block_length = block_length + -1) {\n        *inner_value = 0;\n        inner_value = inner_value + (ulong)counter * -2 + 1;\n      }\n      *(undefined4 *)(current_ptr + 2) = value;\n      *current_ptr = block_value;\n      current_ptr[1] = search_string;\n      block_value = create_memory_block_00113e23(current_ptr + 3,search_string);\n      *(undefined8 **)(context + 0x1a0) = current_ptr;\n      current_ptr[4] = block_value;\nLAB_0010b0e7:\n      block_length = current_ptr[4];\nLAB_0010b0eb:\n      result_value._8_8_ = block_size;\n      result_value._0_8_ = block_length;\n      return result_value;\n    }\n    if (*(char *)current_ptr[1] == *search_string) {\n      result = strcmp((char *)current_ptr[1],search_string);\n      if (result == 0) {\n        if (*(int *)(current_ptr + 2) == 0) {\n          *(undefined4 *)(current_ptr + 2) = value;\n        }\n        free(search_string);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_ptr = (undefined8 *)*current_ptr;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_00113e23",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_string_in_memory_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_and_extract_values_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = get_type_file_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_memory_block_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_and_extract_values_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_memory_block_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)get_type_file_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)get_type_file_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_memory_block_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)find_real_type_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_memory_block_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_memory_block_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)allocate_memory_block_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_input_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_input_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_memory_block_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_memory_block_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_memory_block_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_block_with_param_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_and_extract_values_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_in_binary_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = initialize_block_with_parameter_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_input_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_input_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_memory_block_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_input_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_input_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_input_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)initialize_block_with_parameter_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_memory_block_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_input_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)allocate_memory_block_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_memory_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)allocate_memory_block_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_and_extract_values_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_input_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_input_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)initialize_block_with_parameter_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)initialize_block_with_parameter_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_memory_block_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_message_00108fe8(pbVar27,uVar15);\n                lVar38 = initialize_block_with_parameter_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_memory_block_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)initialize_block_with_parameter_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_memory_block_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)initialize_block_with_parameter_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)initialize_block_with_parameter_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)initialize_block_with_parameter_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)initialize_block_with_parameter_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)initialize_block_with_parameter_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_message_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = compare_strings_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = compare_strings_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = compare_strings_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)initialize_block_with_parameter_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)initialize_block_with_parameter_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_input_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_input_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_message_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_message_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_input_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)get_return_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_message_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_input_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_null_terminate_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_message_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_input_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_input_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_null_terminate_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_null_terminate_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_null_terminate_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_message_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_data_type_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)find_real_type_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = extract_arglist_demangled_names_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_bad_name_error_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_bad_name_error_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_find_string_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_add_to_buffer_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_bad_name_error_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_string_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_add_to_buffer_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = extract_number_from_string_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_add_to_buffer_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_bad_name_error_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = reverse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = reverse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = reverse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = reverse_and_process_data_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_memory_block_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = validate_and_execute_operation_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_bad_name_error_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_bad_name_error_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = validate_and_execute_operation_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = compare_strings_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = compare_strings_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_memory_block_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_message_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_input_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_and_extract_values_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_and_allocate_memory_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_memory_block_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_message_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)find_string_in_memory_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)get_type_file_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "dcgettext",
                "malloc",
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0010b6ea",
                "FUN_00113fb0",
                "xrealloc",
                "strchr",
                "FUN_00112904",
                "cplus_demangle_mangled_name",
                "FUN_00113da9",
                "FUN_0010afd5",
                "strcat",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_00112b6e",
                "xmalloc",
                "FUN_00113b98",
                "strspn",
                "strncmp",
                "FUN_00113cb9",
                "sprintf",
                "strlen",
                "FUN_00113bfa",
                "strcpy",
                "strcmp",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00109ab1",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00109be3",
                "FUN_00113d6e",
                "FUN_00108e76",
                "free",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00108fe8",
                "FUN_00113c43",
                "FUN_00113e5e",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010914e",
                "FUN_00113dfe",
                "strstr",
                "FUN_00113d3a",
                "strtol",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "concat",
                "FUN_0010d21c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "iVar5",
                "lVar3": "entryOffset",
                "piVar4": "stabPtr",
                "iVar5": "i",
                "bfd_get_stab_name": "getSymbolName"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param1,undefined8 param2,undefined8 param3)\n\n{\n  char *formatString;\n  long stabName;\n  long iVar5;\n  long entryOffset;\n  int *stabPtr;\n  int i;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  i = DAT_001278c0;\n  do {\n    iVar5 = (long)i;\n    entryOffset = iVar5 * 0x18;\n    stabPtr = (int *)(&DAT_00127740 + entryOffset);\n    if ((&DAT_00127750)[iVar5 * 3] != 0) {\n      stabName = bfd_get_stab_name(*stabPtr);\n      if (stabName == 0) {\n        if (*stabPtr == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + entryOffset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + entryOffset));\n      if (*stabPtr != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[iVar5 * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    i = (i + 1) % 0x10;\n  } while (DAT_001278c0 != i);\n  return param3;\n}\n\n",
            "called": [
                "fwrite",
                "fprintf",
                "bfd_get_stab_name",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_data_0010a083",
                "param_1": "input_data"
            },
            "code": "\nvoid process_data_0010a083(long input_data)\n\n{\n  process_data_0010a083_00109ed3(input_data,0x2a,4,input_data + 0x178,input_data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "param_1": "array_ptr",
                "param_2": "value",
                "param_3": "array_size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "data",
                "lVar1": "new_array_ptr",
                "plVar2": "element_ptr",
                "lVar3": "remaining",
                "puVar4": "current_element",
                "uVar5": "current_size",
                "bVar6": "is_zero",
                "auVar7": "output"
            },
            "code": "\nundefined  [16]\nresizeArray_00109c2e(long array_ptr,long value,ulong array_size,int flag,undefined4 *result,\n            undefined8 data)\n\n{\n  long new_array_ptr;\n  long *element_ptr;\n  long remaining;\n  undefined *current_element;\n  ulong current_size;\n  byte is_zero;\n  undefined output [16];\n  \n  is_zero = 0;\n  array_size = array_size & 0xffffffff;\n  current_size = *(ulong *)(array_ptr + 0x1b0);\n  if (current_size <= array_size) {\n    if (current_size == 0) {\n      current_size = 10;\n    }\n    for (; current_size <= array_size; current_size = current_size * 2) {\n    }\n    new_array_ptr = xrealloc(*(undefined8 *)(array_ptr + 0x1a8),current_size * 0x18);\n    *(long *)(array_ptr + 0x1a8) = new_array_ptr;\n    current_element = (undefined *)(*(long *)(array_ptr + 0x1b0) * 0x18 + new_array_ptr);\n    for (remaining = (current_size - *(long *)(array_ptr + 0x1b0)) * 0x18; remaining != 0; remaining = remaining + -1) {\n      *current_element = 0;\n      current_element = current_element + (ulong)is_zero * -2 + 1;\n    }\n    *(ulong *)(array_ptr + 0x1b0) = current_size;\n  }\n  element_ptr = (long *)(array_size * 0x18 + *(long *)(array_ptr + 0x1a8));\n  if (*element_ptr == 0) {\n    new_array_ptr = *(long *)(array_ptr + 0x68);\n    *element_ptr = new_array_ptr;\n    *(long *)(array_ptr + 0x68) = new_array_ptr + 1;\n    element_ptr[1] = value;\n    *(int *)(element_ptr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(element_ptr + 2) = 0;\n    *(undefined4 *)((long)element_ptr + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)element_ptr + 0x14);\n  }\n  output._8_8_ = data;\n  output._0_8_ = *element_ptr;\n  return output;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_message_and_exit_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedErrorMessage",
                "print_error_message_and_exit_00119dd0": "printErrorMessageAndExit"
            },
            "code": "\nvoid printErrorMessageAndExit_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  printErrorMessageAndExit_001053b5(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_or_print_error_00112996",
                "param_1": "file_context",
                "uVar1": "result",
                "lVar2": "data_offset"
            },
            "code": "\n\n\nundefined8 initialize_or_print_error_00112996(long file_context,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long data_offset;\n  \n  if ((*(long *)(file_context + 8) != 0) && (*(long *)(file_context + 0x10) != 0)) {\n    data_offset = *(long *)(file_context + 0x10) + 0x10;\n    if (*(long *)(file_context + 0x20) != 0) {\n      data_offset = *(long *)(file_context + 0x20) + 0x28;\n    }\n    result = initialize_data_structure_00112925(data_offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_or_print_error_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_debug_class_id_0010c7a0",
                "param_1": "class_id",
                "param_2": "class_name",
                "param_3": "type_kind",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "temp3",
                "piVar4": "temp4",
                "__s1": "temp5",
                "cVar5": "temp6",
                "iVar6": "temp7",
                "puVar7": "temp8",
                "auVar8": "temp9"
            },
            "code": "\nundefined  [16] set_debug_class_id_0010c7a0(long class_id,char *class_name,int *type_kind,undefined8 param4)\n\n{\n  undefined8 temp1;\n  uint temp2;\n  long temp3;\n  int *temp4;\n  char *temp5;\n  char temp6;\n  int temp7;\n  undefined8 *temp8;\n  undefined temp9 [16];\n  \n  if (3 < *type_kind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  temp3 = *(long *)(type_kind + 4);\n  temp8 = (undefined8 *)(ulong)*(uint *)(temp3 + 0xc);\n  if (*(uint *)(temp3 + 0xc) <= *(uint *)(class_id + 0x38)) {\n    for (temp8 = *(undefined8 **)(class_id + 0x50); temp8 != (undefined8 *)0x0;\n        temp8 = (undefined8 *)*temp8) {\n      temp4 = (int *)temp8[1];\n      if (*temp4 == *type_kind) {\n        temp5 = (char *)temp8[2];\n        if (class_name == (char *)0x0) {\n          if (temp5 == (char *)0x0) {\nLAB_0010c82c:\n            temp6 = compare_params_0010922b(class_id,temp4,type_kind);\n            if (temp6 != '\\0') {\n              temp2 = *(uint *)(*(long *)(temp8[1] + 0x10) + 0xc);\n              temp8 = (undefined8 *)(ulong)temp2;\n              *(uint *)(temp3 + 0xc) = temp2;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((temp5 != (char *)0x0) && (*temp5 == *class_name)) &&\n                (temp7 = strcmp(temp5,class_name), temp7 == 0)) goto LAB_0010c82c;\n      }\n    }\n    temp7 = *(int *)(class_id + 0x34) + 1;\n    *(int *)(class_id + 0x34) = temp7;\n    *(int *)(temp3 + 0xc) = temp7;\n    temp8 = (undefined8 *)xmalloc(0x18);\n    temp1 = *(undefined8 *)(class_id + 0x50);\n    temp8[2] = class_name;\n    *(undefined8 **)(class_id + 0x50) = temp8;\n    *temp8 = temp1;\n    temp8[1] = type_kind;\n  }\nLAB_0010c884:\n  temp9._1_7_ = (undefined7)((ulong)temp8 >> 8);\n  temp9[0] = 1;\n  temp9._8_8_ = param4;\n  return temp9;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strcmp",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "set_debug_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_params_0010922b",
                "uVar1": "value_1",
                "uVar2": "value_2",
                "pplVar3": "ptr_ptr_1",
                "ppcVar4": "ptr_ptr_2",
                "ppcVar5": "ptr_ptr_3",
                "lVar6": "length_1",
                "lVar7": "length_2",
                "lVar8": "length_3",
                "pcVar9": "str_ptr_1",
                "pcVar10": "str_ptr_2",
                "cVar11": "char_cmp",
                "bVar12": "comparison_result",
                "iVar13": "int_result",
                "uVar14": "type_1",
                "uVar15": "type_2",
                "puVar16": "ptr_1",
                "puVar17": "ptr_2",
                "plVar18": "ptr_3",
                "lVar19": "length_4",
                "plVar20": "ptr_4",
                "plVar21": "ptr_5",
                "lVar22": "length_5",
                "local_70": "local_ptr_1",
                "local_58": "local_ptr_2",
                "plStack_50": "local_ptr_3",
                "local_48": "local_ptr_4"
            },
            "code": "\nbyte compareParams_0010922b(long param_1,long *param_2,long *param_3)\n\n{\n  uint value_1;\n  uint value_2;\n  long **ptr_ptr_1;\n  char **ptr_ptr_2;\n  char **ptr_ptr_3;\n  long length_1;\n  long length_2;\n  long length_3;\n  char *str_ptr_1;\n  char *str_ptr_2;\n  char char_cmp;\n  byte comparison_result;\n  int int_result;\n  undefined8 type_1;\n  undefined8 type_2;\n  undefined8 *ptr_1;\n  undefined8 *ptr_2;\n  long *ptr_3;\n  long length_4;\n  long *ptr_4;\n  long *ptr_5;\n  long length_5;\n  long *local_ptr_1;\n  undefined8 *local_ptr_2;\n  long *local_ptr_3;\n  long *local_ptr_4;\n  \n  ptr_3 = param_3;\n  if (param_2 == (long *)0x0) {\nLAB_00109241:\n    return param_3 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr_3 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value_1 = *(uint *)param_2;\n    if (value_1 == 1) goto code_r0x00109263;\n    while (value_2 = *(uint *)param_3, value_2 == 1) {\n      param_3 = **(long ***)param_3[2];\n      if (param_3 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (param_2 == param_3) {\n      return true;\n    }\n    if (value_1 != 0x16) break;\n    if (value_2 != 0x17) goto LAB_001092cb;\n    param_2 = *(long **)(param_2[2] + 8);\n    if (param_2 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value_1 == 0x17) && (value_2 == 0x16)) {\n    param_3 = *(long **)(param_3[2] + 8);\n    ptr_3 = param_3;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*param_2 != *param_3) {\n    return false;\n  }\n  if (value_1 == 3) {\n    return *(char *)(param_2 + 2) == *(char *)(param_3 + 2);\n  }\n  if (value_1 < 4) {\n    if (value_1 == 2) {\n      return true;\n    }\n  }\n  else if (value_1 - 4 < 3) {\n    return true;\n  }\n  local_ptr_2 = *(undefined8 **)(param_1 + 0x58);\n  for (ptr_2 = local_ptr_2; ptr_2 != (undefined8 *)0x0; ptr_2 = (undefined8 *)*ptr_2) {\n    if (((long *)ptr_2[1] == param_2) && ((long *)ptr_2[2] == param_3)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_1 + 0x58) = &local_ptr_2;\n  local_ptr_3 = param_2;\n  local_ptr_4 = param_3;\n  switch(value_1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr_3 = (long *)param_2[2];\n    ptr_ptr_1 = (long **)param_3[2];\n    if (ptr_3 == (long *)0x0) {\n      comparison_result = ptr_ptr_1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr_1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_1 + 0x38) < *(uint *)((long)ptr_3 + 0xc)) &&\n       (*(uint *)((long)ptr_3 + 0xc) == *(uint *)((long)ptr_ptr_1 + 0xc))) goto LAB_001097af;\n    ptr_2 = (undefined8 *)*ptr_3;\n    local_ptr_1 = *ptr_ptr_1;\n    if (((ptr_2 == (undefined8 *)0x0) == (local_ptr_1 == (long *)0x0)) &&\n       ((((ptr_3[2] == 0) == (ptr_ptr_1[2] == (long *)0x0) &&\n         ((ptr_3[3] == 0) == (ptr_ptr_1[3] == (long *)0x0))) &&\n        ((ptr_3[4] == 0) == (ptr_ptr_1[4] == (long *)0x0))))) {\n      if (ptr_2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr_3[4] != 0) &&\n           (char_cmp = compareParams_0010922b(param_1,ptr_3[4],ptr_ptr_1[4]), char_cmp == '\\0'))\n        goto LAB_00109382;\n        ptr_5 = (long *)ptr_3[2];\n        if (ptr_5 == (long *)0x0) {\nLAB_00109540:\n          ptr_2 = (undefined8 *)ptr_3[3];\n          if (ptr_2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptr_3 = ptr_ptr_1[3];\n          while( true ) {\n            ptr_ptr_3 = (char **)*ptr_2;\n            if (ptr_ptr_3 == (char **)0x0) {\n              comparison_result = *ptr_3 == 0;\n              goto LAB_001099c4;\n            }\n            ptr_ptr_2 = (char **)*ptr_3;\n            if (ptr_ptr_2 == (char **)0x0) break;\n            if ((**ptr_ptr_3 != **ptr_ptr_2) || (int_result = strcmp(*ptr_ptr_3,*ptr_ptr_2), int_result != 0))\n            break;\n            str_ptr_1 = ptr_ptr_3[1];\n            str_ptr_2 = ptr_ptr_2[1];\n            if ((str_ptr_1 == (char *)0x0) != (str_ptr_2 == (char *)0x0)) break;\n            if (str_ptr_1 != (char *)0x0) {\n              length_5 = 0;\n              while( true ) {\n                ptr_ptr_3 = *(char ***)(str_ptr_1 + length_5);\n                ptr_ptr_2 = *(char ***)(str_ptr_2 + length_5);\n                if (ptr_ptr_3 == (char **)0x0) break;\n                if (ptr_ptr_2 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptr_ptr_3 != **ptr_ptr_2) ||\n                     ((((ulong)ptr_ptr_3[2] ^ (ulong)ptr_ptr_2[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptr_ptr_3[3] != ptr_ptr_2[3] ||\n                     ((((ptr_ptr_3[4] == (char *)0x0) != (ptr_ptr_2[4] == (char *)0x0) ||\n                       (int_result = strcmp(*ptr_ptr_3,*ptr_ptr_2), int_result != 0)) ||\n                      (char_cmp = compareParams_0010922b(param_1,ptr_ptr_3[1],ptr_ptr_2[1]), char_cmp == '\\0')))))) ||\n                   ((ptr_ptr_3[4] != (char *)0x0 &&\n                    (char_cmp = compareParams_0010922b(param_1,ptr_ptr_3[4],ptr_ptr_2[4]), char_cmp == '\\0'))))\n                goto LAB_00109382;\n                length_5 = length_5 + 8;\n              }\n              if (ptr_ptr_2 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_2 = ptr_2 + 1;\n            ptr_3 = ptr_3 + 1;\n          }\n        }\n        else {\n          ptr_4 = ptr_ptr_1[2];\n          for (; ptr_2 = (undefined8 *)*ptr_5, ptr_2 != (undefined8 *)0x0;\n              ptr_5 = ptr_5 + 1) {\n            ptr_1 = (undefined8 *)*ptr_4;\n            if ((((ptr_1 == (undefined8 *)0x0) ||\n                 (((ptr_2[1] ^ ptr_1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_2 + 2) != *(int *)(ptr_1 + 2))) ||\n               (char_cmp = compareParams_0010922b(param_1,*ptr_2,*ptr_1), char_cmp == '\\0'))\n            goto LAB_00109382;\n            ptr_4 = ptr_4 + 1;\n          }\n          if (*ptr_4 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptr_ptr_3 = (char **)*ptr_2, ptr_ptr_3 != (char **)0x0; ptr_2 = ptr_2 + 1) {\n          ptr_ptr_2 = (char **)*local_ptr_1;\n          if (ptr_ptr_2 == (char **)0x0) goto LAB_00109382;\n          str_ptr_1 = *ptr_ptr_2;\n          str_ptr_2 = *ptr_ptr_3;\n          if ((*str_ptr_2 != *str_ptr_1) ||\n             ((((ulong)ptr_ptr_3[2] ^ (ulong)ptr_ptr_2[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptr_ptr_3 + 0x14) == '\\0') {\n            if (ptr_ptr_3[3] == ptr_ptr_2[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          int_result = strcmp(ptr_ptr_3[3],ptr_ptr_2[3]);\n          if (int_result != 0) goto LAB_00109382;\nLAB_00109480:\n          int_result = strcmp(str_ptr_2,str_ptr_1);\n          if (((int_result != 0) || (ptr_ptr_3[1] == (char *)0x0)) || (ptr_ptr_2[1] == (char *)0x0))\n          goto LAB_00109382;\n          type_1 = find_real_type_00112b6e(ptr_ptr_2[1],0);\n          type_2 = find_real_type_00112b6e(ptr_ptr_3[1],0);\n          char_cmp = compareParams_0010922b(param_1,type_2,type_1);\n          if (char_cmp == '\\0') goto LAB_00109382;\n          local_ptr_1 = local_ptr_1 + 1;\n        }\n        if (*local_ptr_1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr_3 = (long *)param_2[2];\n    ptr_5 = (long *)param_3[2];\n    if (ptr_3 == (long *)0x0) {\n      comparison_result = ptr_5 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_5 == (long *)0x0) goto LAB_00109382;\n    length_5 = *ptr_3;\n    length_1 = *ptr_5;\n    length_4 = 0;\n    length_2 = ptr_3[1];\n    length_3 = ptr_5[1];\n    do {\n      str_ptr_1 = *(char **)(length_5 + length_4);\n      if (str_ptr_1 == (char *)0x0) {\n        comparison_result = *(long *)(length_1 + length_4) == 0;\n        goto LAB_001099c1;\n      }\n      str_ptr_2 = *(char **)(length_1 + length_4);\n      if (((str_ptr_2 == (char *)0x0) || (*str_ptr_1 != *str_ptr_2)) ||\n         (*(long *)(length_2 + length_4) != *(long *)(length_3 + length_4))) break;\n      int_result = strcmp(str_ptr_1,str_ptr_2);\n      length_4 = length_4 + 8;\n    } while (int_result == 0);\nLAB_00109964:\n    comparison_result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    comparison_result = compareParams_0010922b(param_1,param_2[2],param_3[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)param_2[2] + 2) == *(char *)((undefined8 *)param_3[2] + 2)) &&\n       (char_cmp = compareParams_0010922b(param_1,*(undefined8 *)param_2[2],*(undefined8 *)param_3[2]),\n       char_cmp != '\\0')) {\n      ptr_3 = *(long **)(param_2[2] + 8);\n      ptr_5 = *(long **)(param_3[2] + 8);\n      if ((ptr_3 == (long *)0x0) == (ptr_5 == (long *)0x0)) {\n        if (ptr_3 == (long *)0x0) goto LAB_001097af;\n        while (((*ptr_3 != 0 && (*ptr_5 != 0)) &&\n               (char_cmp = compareParams_0010922b(param_1), char_cmp != '\\0'))) {\n          ptr_3 = ptr_3 + 1;\n          ptr_5 = ptr_5 + 1;\n        }\nLAB_0010995d:\n        if (*ptr_3 != 0) goto LAB_00109964;\n        comparison_result = *ptr_5 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_2 = (undefined8 *)param_3[2];\n    ptr_1 = (undefined8 *)param_2[2];\n    comparison_result = 0;\n    if ((ptr_1[1] == ptr_2[1]) && (ptr_1[2] == ptr_2[2])) {\nLAB_00109862:\n      comparison_result = compareParams_0010922b(param_1,*ptr_1,*ptr_2);\n    }\n    break;\n  case 0x10:\n    ptr_2 = (undefined8 *)param_3[2];\n    ptr_1 = (undefined8 *)param_2[2];\n    comparison_result = 0;\n    if (((ptr_1[2] == ptr_2[2]) && (ptr_1[3] == ptr_2[3])) &&\n       (*(char *)(ptr_1 + 4) == *(char *)(ptr_2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_2 = (undefined8 *)param_3[2];\n    ptr_1 = (undefined8 *)param_2[2];\n    comparison_result = 0;\n    if (*(char *)(ptr_1 + 1) == *(char *)(ptr_2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    char_cmp = compareParams_0010922b(param_1,*(undefined8 *)param_2[2],*(undefined8 *)param_3[2]);\n    comparison_result = 0;\n    if (char_cmp != '\\0') {\n      comparison_result = compareParams_0010922b(param_1,*(undefined8 *)(param_2[2] + 8),*(undefined8 *)(param_3[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)param_2[2] + 3) == *(char *)((undefined8 *)param_3[2] + 3)) &&\n        (char_cmp = compareParams_0010922b(param_1,*(undefined8 *)param_2[2],*(undefined8 *)param_3[2]),\n        char_cmp != '\\0')) &&\n       (char_cmp = compareParams_0010922b(param_1,*(undefined8 *)(param_2[2] + 8),\n                              *(undefined8 *)(param_3[2] + 8)), char_cmp != '\\0')) {\n      ptr_3 = *(long **)(param_2[2] + 0x10);\n      ptr_5 = *(long **)(param_3[2] + 0x10);\n      if ((ptr_3 == (long *)0x0) == (ptr_5 == (long *)0x0)) {\n        if (ptr_3 != (long *)0x0) {\n          while (((*ptr_3 != 0 && (*ptr_5 != 0)) &&\n                 (char_cmp = compareParams_0010922b(param_1), char_cmp != '\\0'))) {\n            ptr_3 = ptr_3 + 1;\n            ptr_5 = ptr_5 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        comparison_result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    comparison_result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr_3 = (long *)param_3[2];\n    ptr_5 = (long *)param_2[2];\n    int_result = strcmp(*(char **)(*ptr_5 + 8),*(char **)(*ptr_3 + 8));\n    comparison_result = 0;\n    if (int_result == 0) {\n      comparison_result = compareParams_0010922b(param_1,ptr_5[1],ptr_3[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  comparison_result = comparison_result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_1 + 0x58) = local_ptr_2;\n  return comparison_result;\ncode_r0x00109263:\n  param_2 = **(long ***)param_2[2];\n  ptr_3 = param_2;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "strcmp",
                "FUN_00112b6e",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "compare_params_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "path",
                "cVar1": "charVar",
                "iVar2": "intVar1",
                "iVar3": "intVar2",
                "ppcVar4": "pointerPointerVar",
                "lVar5": "longVar1",
                "uVar6": "uVar1",
                "__format": "formatStr",
                "puVar7": "pointerVar",
                "piVar8": "pointerIntVar",
                "uVar9": "uVar2",
                "in_RAX": "raxValue",
                "pcVar10": "currentChar",
                "ppcVar11": "pointerPointerVar2",
                "lVar12": "longVar2",
                "pvVar13": "pointerVar2",
                "pcVar14": "pointerFunc",
                "lVar15": "longVar3",
                "pcVar16": "currentChar2",
                "psVar17": "pointerStat",
                "unaff_R14": "unaffVar1",
                "unaff_R15": "unaffVar2",
                "bVar18": "byteVar",
                "unaff_retaddr": "unaffRetAddr",
                "in_stack_00000008": "stackVar1",
                "in_stack_00000010": "stackVar2",
                "in_stack_00000018": "stackVar3",
                "in_stack_00000020": "stackVar4",
                "in_stack_00000028": "stackVar5",
                "in_stack_00000030": "stackVar6",
                "in_stack_000000f8": "stackVar7",
                "in_stack_00000110": "stackVar8"
            },
            "code": "\nvoid extractArchive_001052a2(undefined8 param1,undefined8 param2,char *path)\n\n{\n  char charVar;\n  int intVar1;\n  int intVar2;\n  char **pointerPointerVar;\n  long longVar1;\n  undefined8 uVar1;\n  char *formatStr;\n  undefined8 *pointerVar;\n  int *pointerIntVar;\n  undefined8 uVar2;\n  long raxValue;\n  char *currentChar;\n  char **pointerPointerVar2;\n  long longVar2;\n  void *pointerVar2;\n  code *pointerFunc;\n  long longVar3;\n  char *currentChar2;\n  stat *pointerStat;\n  undefined8 *unaffVar1;\n  char **unaffVar2;\n  byte byteVar;\n  undefined8 unaffRetAddr;\n  undefined8 *stackVar1;\n  long *stackVar2;\n  char *stackVar3;\n  undefined8 *stackVar4;\n  undefined8 stackVar5;\n  undefined8 stackVar6;\n  uint stackVar7;\n  long stackVar8;\n  \n  byteVar = 0;\n  currentChar = (char *)(raxValue + 1);\n  do {\n    if (*currentChar == '/') {\n      extractArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(stackVar3,&DAT_0011b47d);\n      intVar2 = stat(currentChar,(stat *)&stack0x00000050);\n      pointerVar = unaffVar1;\n      if (-1 < intVar2) {\n        longVar2 = create_temp_directory_0011a0e0(currentChar);\n        free(currentChar);\n        if (longVar2 == 0) {\n          pointerIntVar = __errno_location();\n          currentChar = strerror(*pointerIntVar);\n          uVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar2,currentChar);\n          goto LAB_00104e93;\n        }\n        pointerVar = (undefined8 *)xmalloc(0x18);\n        currentChar = *unaffVar2;\n        *pointerVar = unaffVar1;\n        pointerVar[2] = 0;\n        pointerVar[1] = longVar2;\n        currentChar = (char *)concat(longVar2,&DAT_0011b47d,currentChar);\n      }\n      intVar2 = 0;\n      if (DAT_001279eb != '\\0') {\n        pointerStat = (stat *)&stack0x00000050;\n        for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n          *(undefined4 *)&pointerStat->st_dev = 0;\n          pointerStat = (stat *)((long)pointerStat + (ulong)byteVar * -8 + 4);\n        }\n        pointerPointerVar2 = (char **)unaffVar2[0x1d];\n        if ((char **)unaffVar2[0x1d] == (char **)0x0) {\n          pointerPointerVar2 = unaffVar2;\n        }\n        intVar2 = (**(code **)(pointerPointerVar2[1] + 0x1e8))(unaffVar2,(stat *)&stack0x00000050);\n        if (intVar2 != 0) {\n          currentChar2 = *unaffVar2;\n          uVar2 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar2,currentChar2);\n        }\n      }\n      unaffVar1 = (undefined8 *)xmalloc(0x18);\n      unaffVar1[1] = currentChar;\n      *unaffVar1 = pointerVar;\n      unaffVar1[2] = 0;\n      charVar = bfd_check_format(unaffVar2,1);\n      if (charVar == '\\0') {\n        uVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_001126c0(0,unaffVar2,0,uVar2);\n        pointerPointerVar2 = (char **)bfd_openw(currentChar,stackVar5);\n        if (pointerPointerVar2 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        pointerPointerVar = (char **)unaffVar2[0x1d];\n        if ((char **)unaffVar2[0x1d] == (char **)0x0) {\n          pointerPointerVar = unaffVar2;\n        }\n        intVar1 = (**(code **)(pointerPointerVar[1] + 0x1e8))(unaffVar2,&stack0x000000e0);\n        longVar2 = stackVar8;\n        if (intVar1 == 0) {\n          if (stackVar8 < 0) {\n            uVar2 = construct_filename_001125fa(unaffVar2);\n            uVar1 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(uVar1,uVar2);\n          }\n          else {\n            intVar1 = bfd_seek(unaffVar2,0,0);\n            if (intVar1 == 0) {\n              if (DAT_001279e9 != '\\0') {\n                currentChar2 = *pointerPointerVar2;\n                uVar2 = construct_filename_001125fa(unaffVar2);\n                formatStr = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatStr,uVar2,currentChar2);\n              }\n              pointerVar2 = (void *)xmalloc(0x2000);\n              for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                longVar3 = 0x2000;\n                if (longVar2 < 0x2001) {\n                  longVar3 = longVar2;\n                }\n                longVar1 = bfd_bread(pointerVar2,longVar3,unaffVar2);\n                pointerPointerVar = unaffVar2;\n                if ((longVar3 != longVar1) ||\n                   (longVar1 = bfd_bwrite(pointerVar2,longVar3,pointerPointerVar2), pointerPointerVar = pointerPointerVar2, longVar3 != longVar1\n                   )) {\n                  print_error_001126c0(0,pointerPointerVar,0,0);\n                  free(pointerVar2);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*pointerPointerVar2,stackVar7 | 0x100);\n              free(pointerVar2);\n              charVar = bfd_close_all_done(pointerPointerVar2);\n              if (charVar == '\\0') {\n                print_error_001126c0(currentChar,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            uVar2 = construct_filename_001125fa(unaffVar2);\n            print_error_message_0011a110(uVar2);\n          }\n        }\n        else {\n          print_error_001126c0(0,unaffVar2,0,0);\n        }\nLAB_00104f00:\n        charVar = bfd_close_all_done(pointerPointerVar2);\n        if (charVar == '\\0') {\n          print_error_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (stackVar6._7_1_ == '\\0') {\n          pointerPointerVar2 = (char **)bfd_openw(currentChar,*(undefined8 *)unaffVar2[1]);\n        }\n        else {\n          pointerPointerVar2 = (char **)bfd_openw(currentChar,stackVar5);\n        }\n        if (pointerPointerVar2 == (char **)0x0) {\nLAB_00104e80:\n          print_error_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        charVar = FUNC_00114e50(unaffVar2,pointerPointerVar2,unaffRetAddr);\n        if (charVar == '\\0') {\n          intVar1 = bfd_get_arch(unaffVar2);\n          if (intVar1 == 0) goto LAB_00104d75;\n          charVar = bfd_close_all_done(pointerPointerVar2);\n          if (charVar == '\\0') {\n            print_error_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        charVar = bfd_close(pointerPointerVar2);\n        if (charVar == '\\0') {\n          print_error_001126c0(currentChar,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n          set_file_modification_time_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        longVar2 = bfd_openr(currentChar,stackVar5);\n        unaffVar1[2] = longVar2;\n        *stackVar2 = longVar2;\n        stackVar2 = (long *)(longVar2 + 0xf0);\n        pointerPointerVar2 = (char **)bfd_openr_next_archived_file(stackVar4,unaffVar2);\n        bfd_close(unaffVar2);\n        unaffVar2 = pointerPointerVar2;\n      }\n      if ((DAT_00127a40 != 0) || (unaffVar2 == (char **)0x0)) {\n        *stackVar2 = 0;\n        pointerVar2 = (void *)xstrdup(*stackVar1);\n        if (DAT_00127a40 == 0) {\n          pointerFunc = bfd_close;\n        }\n        else {\n          pointerFunc = bfd_close_all_done;\n        }\n        charVar = (*pointerFunc)(stackVar1);\n        if (charVar == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_001126c0(pointerVar2,0,0,0);\n        }\n        free(pointerVar2);\n        pointerVar2 = (void *)xstrdup(*stackVar4);\n        charVar = bfd_close(stackVar4);\n        if (charVar == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_001126c0(pointerVar2,0,0,0);\n        }\n        free(pointerVar2);\n        goto LAB_00114b4b;\n      }\n      currentChar = *unaffVar2;\n      path = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    currentChar2 = currentChar;\n    if ((*currentChar == '.') && (currentChar2 = currentChar + 1, currentChar[1] == '.')) {\n      currentChar2 = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        uVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar2,path);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (unaffVar1 != (undefined8 *)0x0) {\n          if (unaffVar1[2] == 0) {\n            rmdir((char *)unaffVar1[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)unaffVar1[1]);\n          }\n          free((void *)unaffVar1[1]);\n          pointerVar = (undefined8 *)*unaffVar1;\n          free(unaffVar1);\n          unaffVar1 = pointerVar;\n        }\n        rmdir(stackVar3);\n        free(stackVar3);\n        return;\n      }\n    }\n    for (; (currentChar = currentChar2, *currentChar2 != '\\0' && (*currentChar2 != '/')); currentChar2 = currentChar2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_0010e453",
                "param_1": "object",
                "param_2": "name",
                "param_3": "parameters",
                "lVar1": "paramPtr",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "counter",
                "ppcVar6": "paramPtrs",
                "lVar7": "offset"
            },
            "code": "\nundefined8 initialize_0010e453(long object,char *name,char **parameters)\n\n{\n  long paramPtr;\n  char result;\n  size_t length;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long counter;\n  char **paramPtrs;\n  long offset;\n  \n  if (parameters == (char **)0x0) {\n    if (name != (char *)0x0) {\n      length = strlen(name);\n      formattedString = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedString,\"xe%s:\",name);\nLAB_0010e578:\n      result = initialize_0010e453_object_00109b52(object,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    counter = 10;\n    paramPtrs = parameters;\n    if (name != (char *)0x0) {\n      length = strlen(name);\n      counter = length + 10;\n    }\n    for (; *paramPtrs != (char *)0x0; paramPtrs = paramPtrs + 1) {\n      length = strlen(*paramPtrs);\n      counter = counter + 0x14 + length;\n    }\n    formattedString = (undefined2 *)xmalloc(counter);\n    if (name == (char *)0x0) {\n      *formattedString = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(object + 0x68);\n      *(long *)(object + 0x68) = counter + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",name,counter);\n    }\n    offset = 0;\n    while( true ) {\n      paramPtr = *(long *)((long)parameters + offset);\n      length = strlen((char *)formattedString);\n      if (paramPtr == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + length) = 0x3b;\n    if (name == (char *)0x0) goto LAB_0010e578;\n    result = process_string_0010e2f0(object,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = initialize_0010e453_object_with_params_00109cf4(object,counter,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "initialize_object_from_resized_array_00109d5c",
                "param_1": "input_param",
                "lVar1": "resized_array_size",
                "uVar2": "initialized_object"
            },
            "code": "\nundefined8 initialize_object_from_resized_array_00109d5c(undefined8 input_param)\n\n{\n  long resized_array_size;\n  undefined8 initialized_object;\n  \n  resized_array_size = resize_array_00109c2e();\n  if (-1 < resized_array_size) {\n    initialized_object = initialize_object_with_params_00109cf4(input_param,resized_array_size,0);\n    return initialized_object;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_object_from_resized_array_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_max_value_0010ed2c",
                "param_1": "data_buffer",
                "param_2": "new_value",
                "param_3": "additional_param",
                "cVar1": "char_result",
                "iVar2": "counter",
                "uVar3": "result",
                "in_R10": "extra_param",
                "auVar4": "output_data"
            },
            "code": "\nundefined  [16] update_max_value_0010ed2c(long data_buffer,ulong new_value,undefined8 additional_param)\n\n{\n  char char_result;\n  int counter;\n  undefined8 extraout_RDX;\n  ulong result;\n  undefined8 extra_param;\n  undefined output_data [16];\n  \n  if (*(ulong *)(data_buffer + 0x1f0) < new_value) {\n    *(ulong *)(data_buffer + 0x1f0) = new_value;\n  }\n  if (*(long *)(data_buffer + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data_buffer + 0x1f8) != 0) {\n      counter = *(int *)(data_buffer + 0x1f8) + -1;\n      result = CONCAT71((int7)((ulong)additional_param >> 8),1);\n      *(int *)(data_buffer + 0x1f8) = counter;\n      if (counter != 0) {\n        output_data = process_string_0010e2f0(data_buffer,0xe0,0,new_value - *(long *)(data_buffer + 0x200),0,extra_param);\n        return output_data;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    char_result = process_string_0010e2f0(data_buffer,0xc0,0,*(long *)(data_buffer + 0x208),0);\n    if (char_result != '\\0') {\n      *(undefined8 *)(data_buffer + 0x208) = 0xffffffffffffffff;\n      additional_param = extraout_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  result = 0;\nLAB_0010edae:\n  output_data._0_8_ = result & 0xffffffff;\n  output_data._8_8_ = extra_param;\n  return output_data;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_max_value_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_return_result_0011a1b0",
                "param_1": "array1",
                "param_2": "array2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "array1Value",
                "uVar2": "array2Value",
                "iVar3": "comparisonResult",
                "extraout_var": "comparisonResultExtra",
                "uVar4": "finalResult",
                "auVar5": "returnValue"
            },
            "code": "\nundefined  [16] compareAndReturnResult_0011a1b0(ulong *array1,ulong *array2,undefined8 value1,undefined8 value2)\n\n{\n  ulong array1Value;\n  ulong array2Value;\n  int comparisonResult;\n  undefined4 comparisonResultExtra;\n  ulong finalResult;\n  undefined returnValue [16];\n  \n  finalResult = *array1;\n  if (*array2 <= *array1) {\n    finalResult = *array2;\n  }\n  comparisonResult = memcmp((void *)(array1[3] + 3),(void *)(array2[3] + 3),finalResult - 3);\n  finalResult = CONCAT44(comparisonResultExtra,comparisonResult);\n  if (comparisonResult == 0) {\n    array1Value = array1[8];\n    if (array1Value < array2[7]) {\n      finalResult = 0xffffffff;\n    }\n    else {\n      array2Value = array2[8];\n      if (array2Value < array1[7]) {\n        finalResult = 1;\n      }\n      else {\n        finalResult = 0xffffffff;\n        if (array2[7] <= array1[7]) {\n          if (array2Value < array1Value) {\n            finalResult = 1;\n          }\n          else {\n            finalResult = 0xffffffff;\n            if (array2Value <= array1Value) {\n              if (array1[2] == 0x100) {\n                finalResult = (ulong)-(uint)(array2[2] != 0x100);\n              }\n              else {\n                finalResult = (ulong)(array2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnValue._8_8_ = value2;\n  returnValue._0_8_ = finalResult;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_return_result_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_build_attribute_notes_001163d0",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "param_4": "data",
                "uVar1": "result",
                "uVar2": "input_value_1",
                "uVar3": "input_value_2",
                "bVar4": "is_valid",
                "puVar5": "temp_ptr",
                "iVar6": "tmp_value",
                "uVar7": "error_str",
                "lVar8": "error_code",
                "__ptr": "reloc_buffer",
                "uVar9": "temp_value_1",
                "uVar10": "temp_value_2",
                "uVar11": "temp_value_3",
                "uVar12": "temp_value_4",
                "uVar13": "aligned_size",
                "uVar14": "tmp_value_5",
                "uVar15": "temp_value_6",
                "uVar16": "remaining_size",
                "puVar17": "records_ptr",
                "puVar18": "temp_ptr_2",
                "cVar19": "temp_char",
                "puVar20": "temp_ptr_3",
                "iVar21": "temp_index",
                "puVar22": "temp_ptr_4",
                "puVar23": "temp_ptr_5",
                "uVar24": "tmp_value_7",
                "__nmemb": "num_elements",
                "puVar25": "temp_ptr_6",
                "bVar26": "temp_bool",
                "local_88": "temp_local_value_1",
                "uStack_80": "temp_local_value_2",
                "local_70": "temp_local_value_3",
                "local_68": "temp_local_value_4",
                "local_60": "build_attr_notes_ptr"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong process_build_attribute_notes_001163d0(undefined8 *input,undefined8 *output,ulong size,undefined *data)\n\n{\n  ulong result;\n  undefined8 input_value_1;\n  undefined8 input_value_2;\n  bool is_valid;\n  ulong *temp_ptr;\n  int tmp_value;\n  undefined8 error_str;\n  long error_code;\n  void *reloc_buffer;\n  ulong temp_value_1;\n  ulong temp_value_2;\n  ulong temp_value_3;\n  ulong temp_value_4;\n  undefined *reloc_buffer_00;\n  ulong aligned_size;\n  ulong tmp_value_5;\n  ulong temp_value_6;\n  ulong remaining_size;\n  ulong *records_ptr;\n  undefined *temp_ptr_2;\n  char temp_char;\n  undefined *temp_ptr_3;\n  int temp_index;\n  undefined *temp_ptr_4;\n  ulong *temp_ptr_5;\n  ulong tmp_value_7;\n  size_t num_elements;\n  ulong *temp_ptr_6;\n  byte temp_bool;\n  ulong temp_local_value_1;\n  ulong temp_local_value_2;\n  ulong temp_local_value_3;\n  ulong temp_local_value_4;\n  ulong *build_attr_notes_ptr;\n  \n  temp_bool = 0;\n  error_code = bfd_get_reloc_upper_bound();\n  temp_local_value_4 = size;\n  if (0 < error_code) {\n    reloc_buffer = (void *)xmalloc(error_code);\n    error_code = bfd_canonicalize_reloc(input,output,reloc_buffer,DAT_001278d0);\n    free(reloc_buffer);\n    if (error_code != 0) {\n      if (_DAT_001264c0 == 0) {\n        input_value_1 = *input;\n        input_value_2 = *output;\n        error_str = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(error_str,input_value_1,input_value_2);\n      }\n      build_attr_notes_ptr = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  build_attr_notes_ptr = (ulong *)xcalloc(size / 0xc,0x48,size % 0xc);\n  temp_local_value_1 = 0;\n  temp_local_value_3 = 0;\n  remaining_size = size;\n  temp_value_6 = 0;\n  temp_ptr_5 = build_attr_notes_ptr;\n  tmp_value_5 = 0;\n  temp_ptr_4 = data;\n  while (0xb < remaining_size) {\n    temp_value_2 = (**(code **)(input[1] + 0x40))(temp_ptr_4);\n    *temp_ptr_5 = temp_value_2;\n    temp_value_2 = (**(code **)(input[1] + 0x40))(temp_ptr_4 + 4);\n    temp_ptr_5[1] = temp_value_2;\n    temp_value_3 = (**(code **)(input[1] + 0x40))(temp_ptr_4 + 8);\n    temp_value_2 = *temp_ptr_5;\n    temp_ptr_5[2] = temp_value_3;\n    temp_value_4 = temp_ptr_5[1];\n    aligned_size = temp_value_2 + 3 & 0xfffffffffffffffc;\n    temp_ptr_5[6] = aligned_size;\n    if (temp_value_4 != (temp_value_4 + 3 & 0xfffffffffffffffc)) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp_value_3 - 0x100) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = aligned_size + temp_value_4 + 0xc;\n    if (remaining_size < result) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_value_2 < 2) {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    temp_ptr_5[3] = (ulong)(temp_ptr_4 + 0xc);\n    temp_ptr_5[4] = (ulong)(temp_ptr_4 + aligned_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (aligned_size + temp_value_4));\n    if (temp_value_2 != 2) {\n      if (temp_ptr_4[0xc] == '$') {\n        if ((temp_ptr_4[0xd] == '\\x01') && (temp_ptr_4[0xe] == '1')) {\n          remaining_size = process_build_attribute_notes_001163d0_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < temp_value_2) && (temp_ptr_4[0xc] == 'G')) && (temp_ptr_4[0xd] == 'A')) &&\n              ((temp_ptr_4[0xe] == '$' && (temp_ptr_4[0xf] == '\\x01')))) {\n        if (temp_ptr_4[0x10] == '2') {\n          remaining_size = process_build_attribute_notes_001163d0_00116490();\n          return remaining_size;\n        }\n        if (temp_ptr_4[0x10] == '3') {\n          remaining_size = process_build_attribute_notes_001163d0_00116490();\n          return remaining_size;\n        }\n        error_code = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_value_1 = temp_value_6;\n    tmp_value_7 = tmp_value_5;\n    if (temp_value_4 == 0) {\n      if (temp_value_3 == 0x100) {\n        temp_ptr_5[7] = temp_local_value_1;\nLAB_001164af:\n        temp_value_4 = tmp_value_5;\n        tmp_value_7 = tmp_value_5;\n      }\n      else {\n        temp_ptr_5[7] = temp_local_value_3;\nLAB_0011669e:\n        temp_value_1 = temp_value_6;\n        temp_value_4 = temp_value_6;\n      }\n    }\n    else {\n      if (temp_value_4 != 0x10) {\n        if (temp_value_4 < 0x11) {\n          if (temp_value_4 == 4) {\n            temp_value_3 = (**(code **)(input[1] + 0x40))();\n            temp_value_4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp_value_4 == 8) {\n            remaining_size = process_build_attr_notes_001086af();\n            return remaining_size;\n          }\n        }\n        error_code = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp_value_3 = (**(code **)(input[1] + 0x28))(temp_ptr_4 + aligned_size + 0xc);\n      temp_value_4 = (**(code **)(input[1] + 0x28))();\n      if (temp_value_4 < temp_value_3) {\n        temp_value_3 = temp_value_4;\n      }\nLAB_00116631:\n      if (temp_ptr_5[2] == 0x100) {\n        if (temp_value_3 == 0) {\n          temp_value_3 = temp_local_value_1;\n        }\n        temp_value_2 = *temp_ptr_5;\n        temp_ptr_5[7] = temp_value_3;\n        tmp_value_7 = temp_value_4;\n        temp_local_value_1 = temp_value_3;\n        if (temp_value_4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_value_3 == 0) {\n          temp_value_3 = temp_local_value_3;\n        }\n        temp_value_2 = *temp_ptr_5;\n        temp_ptr_5[7] = temp_value_3;\n        temp_value_1 = temp_value_4;\n        temp_local_value_3 = temp_value_3;\n        if (temp_value_4 == 0) goto LAB_0011669e;\n      }\n    }\n    temp_ptr_5[8] = temp_value_4;\n    if (*(char *)((temp_ptr_5[3] - 1) + temp_value_2) != '\\0') {\n      error_code = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    temp_ptr_5 = temp_ptr_5 + 9;\n    temp_value_6 = temp_value_1;\n    tmp_value_5 = tmp_value_7;\n    temp_ptr_4 = temp_ptr_4 + result;\n  }\n  if (remaining_size == 0) {\n    input_value_1 = *input;\n    input_value_2 = *output;\n    error_str = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(error_str,input_value_1,input_value_2);\n    num_elements = ((long)temp_ptr_5 - (long)build_attr_notes_ptr >> 3) * -0x71c71c71c71c71c7;\n    qsort(build_attr_notes_ptr,num_elements,0x48,compare_and_return_result_0011a1b0);\n    for (records_ptr = build_attr_notes_ptr; records_ptr < temp_ptr_5; records_ptr = records_ptr + 9) {\n      remaining_size = records_ptr[2];\n      if (remaining_size != 0) {\n        temp_value_6 = records_ptr[7];\n        tmp_value_5 = records_ptr[8];\n        temp_ptr_6 = records_ptr;\n        temp_index = 0;\n        if (temp_value_6 == tmp_value_5) {\n          records_ptr[2] = 0;\n        }\n        else {\n          do {\n            do {\n              temp_ptr = temp_ptr_6;\n              temp_ptr_6 = temp_ptr + -9;\n              if (temp_ptr_6 < build_attr_notes_ptr) goto LAB_001167f5;\n              temp_value_2 = temp_ptr[-7];\n            } while (temp_value_2 == 0);\n            if ((*temp_ptr_6 != *records_ptr) ||\n               (tmp_value = memcmp((void *)temp_ptr[-6],(void *)records_ptr[3],*records_ptr), tmp_value != 0)) break;\n            temp_value_4 = temp_ptr[-2];\n            temp_value_3 = temp_ptr[-1];\n            if (temp_value_6 == temp_value_4) {\n              if (tmp_value_5 == temp_value_3) {\n                records_ptr[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (tmp_value_5 <= temp_value_3) {\n                records_ptr[2] = 0;\n                break;\n              }\n              if (temp_value_3 < temp_value_6) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp_value_3) || (temp_value_6 <= (temp_value_3 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (temp_value_2 == 0x101)) {\n                if (temp_value_3 <= tmp_value_5) {\n                  temp_value_3 = tmp_value_5;\n                }\n                if (temp_value_4 < temp_value_6) {\n                  temp_value_6 = temp_value_4;\n                }\n                temp_ptr[-1] = temp_value_3;\n                temp_ptr[-2] = temp_value_6;\n                records_ptr[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp_value_4 <= temp_value_6) goto LAB_001167a6;\n              if (temp_value_3 < temp_value_6) goto LAB_0010852c;\n              if (tmp_value_5 < temp_value_6) {\n                if ((0xfffffffffffffff0 < tmp_value_5) || (temp_value_4 <= (tmp_value_5 + 0xf & 0xfffffffffffffff0))\n                   ) goto process_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (tmp_value_5 != temp_value_3) goto LAB_001167b8;\n            }\nprocess_records_00116852:\n            is_valid = temp_index < 0x11;\n            temp_index = temp_index + 1;\n          } while (is_valid);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(build_attr_notes_ptr,num_elements,0x48,compare_records_0011a250);\n    reloc_buffer_00 = (undefined *)xmalloc(size * 2);\n    temp_local_value_2 = 0;\n    temp_local_value_3 = 0;\n    temp_ptr_4 = reloc_buffer_00;\n    for (records_ptr = build_attr_notes_ptr; records_ptr < temp_ptr_5; records_ptr = records_ptr + 9) {\n      if (records_ptr[2] != 0) {\n        temp_ptr_2 = temp_ptr_4 + 0xc;\n        if ((records_ptr[7] == temp_local_value_3) && (records_ptr[8] == temp_local_value_2)) {\n          (**(code **)(input[1] + 0x50))(*records_ptr,temp_ptr_4);\n          (**(code **)(input[1] + 0x50))(0,temp_ptr_4 + 4);\n          (**(code **)(input[1] + 0x50))(records_ptr[2],temp_ptr_4 + 8);\n          temp_value_6 = records_ptr[6];\n          remaining_size = *records_ptr;\n          temp_ptr_4 = (undefined *)records_ptr[3];\n          temp_ptr_3 = temp_ptr_2;\n          for (tmp_value_5 = remaining_size; tmp_value_5 != 0; tmp_value_5 = tmp_value_5 - 1) {\n            *temp_ptr_3 = *temp_ptr_4;\n            temp_ptr_4 = temp_ptr_4 + (ulong)temp_bool * -2 + 1;\n            temp_ptr_3 = temp_ptr_3 + (ulong)temp_bool * -2 + 1;\n          }\n          if (remaining_size < temp_value_6) {\n            for (error_code = temp_value_6 - remaining_size; error_code != 0; error_code = error_code + -1) {\n              *temp_ptr_3 = 0;\n              temp_ptr_3 = temp_ptr_3 + (ulong)temp_bool * -2 + 1;\n            }\n          }\n          temp_ptr_4 = temp_ptr_2 + temp_value_6;\n        }\n        else {\n          (**(code **)(input[1] + 0x50))();\n          if (*(int *)(input[1] + 8) == 5) {\n            temp_char = (*(char *)(input[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            temp_char = '\\b';\n          }\n          (**(code **)(input[1] + 0x50))(temp_char,temp_ptr_4 + 4);\n          (**(code **)(input[1] + 0x50))(records_ptr[2],temp_ptr_4 + 8);\n          remaining_size = *records_ptr;\n          temp_ptr_4 = (undefined *)records_ptr[3];\n          temp_ptr_3 = temp_ptr_2;\n          for (temp_value_6 = remaining_size; temp_value_6 != 0; temp_value_6 = temp_value_6 - 1) {\n            *temp_ptr_3 = *temp_ptr_4;\n            temp_ptr_4 = temp_ptr_4 + (ulong)temp_bool * -2 + 1;\n            temp_ptr_3 = temp_ptr_3 + (ulong)temp_bool * -2 + 1;\n          }\n          temp_value_6 = records_ptr[6];\n          if (remaining_size < temp_value_6) {\n            for (error_code = temp_value_6 - remaining_size; error_code != 0; error_code = error_code + -1) {\n              *temp_ptr_3 = 0;\n              temp_ptr_3 = temp_ptr_3 + (ulong)temp_bool * -2 + 1;\n            }\n          }\n          error_code = input[1];\n          temp_ptr_2 = temp_ptr_2 + temp_value_6;\n          temp_ptr_4 = temp_ptr_2 + 8;\n          if ((*(int *)(error_code + 8) == 5) && (*(char *)(input[0x22] + 4) == '\\x02')) {\n            (**(code **)(error_code + 0x38))(records_ptr[7],temp_ptr_2);\n            (**(code **)(input[1] + 0x38))(records_ptr[8],temp_ptr_4);\n            temp_ptr_4 = temp_ptr_2 + 0x10;\n          }\n          else {\n            (**(code **)(error_code + 0x50))(records_ptr[7],temp_ptr_2);\n            (**(code **)(input[1] + 0x50))(records_ptr[8],temp_ptr_2 + 4);\n          }\n          temp_local_value_3 = records_ptr[7];\n          temp_local_value_2 = records_ptr[8];\n        }\n      }\n    }\n    temp_value_6 = (long)temp_ptr_4 - (long)reloc_buffer_00;\n    remaining_size = temp_value_6;\n    temp_ptr_4 = reloc_buffer_00;\n    temp_local_value_4 = size;\n    if (temp_value_6 < size) {\n      for (; temp_local_value_4 = temp_value_6, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *data = *temp_ptr_4;\n        temp_ptr_4 = temp_ptr_4 + (ulong)temp_bool * -2 + 1;\n        data = data + (ulong)temp_bool * -2 + 1;\n      }\n    }\n    free(reloc_buffer_00);\n  }\n  else {\n    error_code = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (error_code != 0) {\n      bfd_set_error(0x11);\n      print_error_001126c0(0,input,output,error_code);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(build_attr_notes_ptr);\n  return temp_local_value_4;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "version",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 version;\n  char *message;\n  \n  version = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,version);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "FUN_00104a35",
                "exit",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "decode_and_validate_string_00108c86",
                "param_1": "input_data",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "puVar4": "decoded_string",
                "lVar5": "input_offset",
                "__s": "input_string",
                "__s1": "arch_type",
                "puVar6": "decoded_string_offset",
                "uVar7": "return_value"
            },
            "code": "\nundefined8 decode_and_validate_string_00108c86(long *input_data)\n\n{\n  char result;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *decoded_string;\n  long input_offset;\n  char *input_string;\n  char *arch_type;\n  undefined2 *decoded_string_offset;\n  undefined8 return_value;\n  byte bVar8;\n  \n  bVar8 = 0;\n  input_offset = *input_data;\n  input_string = (char *)(input_offset + 4);\n  result = compare_strings_00113fb0(input_string,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = compare_strings_00113fb0(input_string,\"bsdrv-\");\n    if (result == '\\0') {\n      result = compare_strings_00113fb0(input_string,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(input_offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      input_string = (char *)(input_offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(input_string);\n  decoded_string = (undefined2 *)xmalloc(string_length + 8);\n  arch_type = input_string + 4;\n  decoded_string_offset = decoded_string;\n  for (input_offset = string_length + 1; input_offset != 0; input_offset = input_offset + -1) {\n    *(char *)decoded_string_offset = *input_string;\n    input_string = input_string + (ulong)bVar8 * -2 + 1;\n    decoded_string_offset = (undefined2 *)((long)decoded_string_offset + (ulong)bVar8 * -2 + 1);\n  }\n  *(undefined *)(decoded_string + 1) = 0x69;\n  *decoded_string = 0x6570;\n  comparison_result = strcmp(arch_type,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)decoded_string + 7) = 0x36;\n    *(undefined2 *)((long)decoded_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(arch_type,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)decoded_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(arch_type,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)decoded_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_data = (long)decoded_string;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "decode_and_validate_string_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_bad_name_error_0010911f",
                "param_1": "badName",
                "__format": "errorMessage"
            },
            "code": "\n\n\nvoid printBadNameError_0010911f(undefined8 badName)\n\n{\n  char *errorMessage;\n  \n  errorMessage = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,errorMessage,badName);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_bad_name_error_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_error_message_001053d5",
                "unaff_R12": "ptrParam",
                "unaff_R14": "ptrArray",
                "print_error_message_0011a110": "printErrorMessageFunc",
                "bfd_close_all_done": "closeAllDoneFunc"
            },
            "code": "\nundefined4 printErrorMessage_001053d5(void)\n\n{\n  long ptrParam;\n  undefined8 *ptrArray;\n  \n  printErrorMessage_001053d5Func(*ptrArray);\n  *(undefined4 *)(ptrParam + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptrParam + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_error_message_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_handle_errors_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "param1",
                "unaff_R14": "param2"
            },
            "code": "\nvoid checkAndHandleErrors_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint param1;\n  long param2;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_message_and_exit_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((param1 & 0x10) == 0)) && ((param1 & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((param1 & 0x40) == 0)) && ((param1 & 0x60) != 0x60)) {\n      *(uint *)(param2 + 0x14) = flags | param1;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_message_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_message_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_handle_errors_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "remainingLength",
                "puVar3": "destPtr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long remainingLength;\n  undefined *destPtr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destPtr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    destPtr = destPtr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010afd5",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_memory_0010da0b",
                "param_1": "memoryPtr",
                "param_2": "slotIndex",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "errorMessage",
                "plVar2": "newMemoryBlock",
                "lVar3": "startOffset",
                "lVar4": "iterationCount",
                "uVar5": "remainingSlots",
                "bVar6": "increment",
                "auVar7": "returnVal"
            },
            "code": "\nundefined  [16] allocateAndInitializeMemory_0010da0b(long **memoryPtr,ulong slotIndex,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 errorMessage;\n  long *newMemoryBlock;\n  long startOffset;\n  long iterationCount;\n  ulong remainingSlots;\n  byte increment;\n  undefined returnVal [16];\n  \n  increment = 0;\n  remainingSlots = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*memoryPtr == (long *)0x0) {\n        newMemoryBlock = (long *)xmalloc(0x88);\n        *memoryPtr = newMemoryBlock;\n        for (startOffset = 0x22; startOffset != 0; startOffset = startOffset + -1) {\n          *(undefined4 *)newMemoryBlock = 0;\n          newMemoryBlock = (long *)((long)newMemoryBlock + (ulong)increment * -8 + 4);\n        }\n      }\n      memoryPtr = (long **)*memoryPtr;\n    }\n    startOffset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      startOffset = 0;\n    }\n    if (*memoryPtr == (long *)0x0) {\n      newMemoryBlock = (long *)xmalloc(0x88);\n      *memoryPtr = newMemoryBlock;\n      for (iterationCount = 0x22; iterationCount != 0; iterationCount = iterationCount + -1) {\n        *(undefined4 *)newMemoryBlock = 0;\n        newMemoryBlock = (long *)((long)newMemoryBlock + (ulong)increment * -8 + 4);\n      }\n    }\n    returnVal._8_8_ = param4;\n    returnVal._0_8_ = *memoryPtr + slotIndex + startOffset + 1;\n    return returnVal;\n  }\n  errorMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_message_and_exit_00119dd0(errorMessage,slotIndex);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_buffer_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "buffer",
                "puVar2": "currentPtr",
                "lVar3": "count",
                "bVar4": "increment",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined8 *\ninitializeBuffer_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *buffer;\n  undefined8 *currentPtr;\n  long count;\n  byte increment;\n  \n  increment = 0;\n  buffer = (undefined8 *)xmalloc(0x1b0);\n  currentPtr = buffer;\n  for (count = 0x6c; count != 0; count = count + -1) {\n    *(undefined4 *)currentPtr = 0;\n    currentPtr = (undefined8 *)((long)currentPtr + (ulong)increment * -8 + 4);\n  }\n  *buffer = input1;\n  *(undefined *)(buffer + 1) = input2;\n  buffer[2] = input3;\n  buffer[3] = input4;\n  *(undefined4 *)(buffer + 0x10) = 1;\n  currentPtr = (undefined8 *)xmalloc(8);\n  buffer[0xd] = 0xffffffffffffffff;\n  buffer[0x11] = currentPtr;\n  *currentPtr = 0;\n  return buffer;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_buffer_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_00109b2f",
                "param_1": "ptr",
                "__ptr": "dataPtr",
                "puVar1": "nextPtr"
            },
            "code": "\nundefined8 * extractAndFree_00109b2f(long ptr)\n\n{\n  undefined8 *dataPtr;\n  undefined8 *nextPtr;\n  \n  dataPtr = *(undefined8 **)(ptr + 0x60);\n  if (dataPtr != (undefined8 *)0x0) {\n    nextPtr = (undefined8 *)dataPtr[1];\n    *(undefined8 *)(ptr + 0x60) = *dataPtr;\n    free(dataPtr);\n    return nextPtr;\n  }\n  return dataPtr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e5db",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010e9a0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e918"
            ],
            "imported": false,
            "current_name": "extract_and_free_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_for_symbol_redefinition_00108d9a",
                "param_1": "program_name",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_pair",
                "pcVar2": "duplicate_symbol",
                "lVar3": "symbol_found",
                "uVar4": "error_message",
                "plVar5": "slot"
            },
            "code": "\nundefined8 check_for_symbol_redefinition_00108d9a(undefined8 program_name,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *duplicate_symbol;\n  long symbol_found;\n  undefined8 error_message;\n  long *slot;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_name);\n  *symbol_pair = duplicate_symbol;\n  duplicate_symbol = strdup(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_pair[1] = duplicate_symbol;\n  symbol_found = htab_find(error_message,symbol_pair);\n  if (symbol_found != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_message_and_exit_00119dd0(error_message,program_name,symbol_name);\n  }\n  symbol_found = htab_find(DAT_001278e8,target_symbol);\n  if (symbol_found != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_message_and_exit_00119dd0(error_message,program_name,target_symbol);\n  }\n  slot = (long *)htab_find_slot(DAT_001278f0,symbol_pair,1);\n  error_message = DAT_001278e8;\n  *slot = (long)symbol_pair;\n  duplicate_symbol = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(error_message,duplicate_symbol,1);\n  *symbol_pair = duplicate_symbol;\n  return result;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "dcgettext",
                "strdup",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_for_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "process_input_0010e9a0",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "option",
                "param_4": "param",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "extractedString",
                "__s_00": "newString",
                "__s_01": "finalString",
                "pcVar5": "symbol",
                "uVar6": "value",
                "sVar3": "inputLength",
                "sVar4": "extractedLength"
            },
            "code": "\nundefined4 processInput_0010e9a0(long input,char *prefix,undefined4 option,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *extractedString;\n  byte *newString;\n  size_t inputLength;\n  size_t extractedLength;\n  char *finalString;\n  char *symbol;\n  undefined8 value;\n  \n  extractedString = (byte *)extract_and_free_00109b2f();\n  switch(option) {\n  case 1:\n    symbol = \"G\";\n    value = 0x20;\n    break;\n  case 2:\n    symbol = \"S\";\n    value = 0x26;\n    break;\n  case 3:\n    symbol = \"V\";\n    value = 0x26;\n    break;\n  case 4:\n    symbol = \"\";\n    value = 0x80;\n    if (((&_sch_istable)[(ulong)*extractedString * 2] & 4) == 0) {\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      inputLength = strlen((char *)extractedString);\n      newString = (byte *)xmalloc(inputLength + 0x14);\n      sprintf((char *)newString,\"%ld=%s\",counter,extractedString);\n      free(extractedString);\n      extractedString = newString;\n    }\n    break;\n  case 5:\n    symbol = \"r\";\n    value = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  inputLength = strlen(prefix);\n  extractedLength = strlen((char *)extractedString);\n  finalString = (char *)xmalloc(inputLength + 3 + extractedLength);\n  sprintf(finalString,\"%s:%s%s\",prefix,symbol,extractedString);\n  free(extractedString);\n  result = process_string_0010e2f0(input,value,0,param,finalString);\n  if ((char)result != '\\0') {\n    free(finalString);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_input_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_error_message_and_exit_0010827b",
                "unaff_RBX": "sectionPtr",
                "uVar1": "section",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorMessageAndExit_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  \n  section = *sectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_message_and_exit_00119dd0(errorMessage,section);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "print_error_and_exit_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getMessage"
            },
            "code": "\nvoid printErrorAndExit_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,isEqualString,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "xcalloc",
                "free",
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "ptrRBX",
                "unaff_RBP": "ptrRBP",
                "unaff_R12": "ptrR12",
                "unaff_R14B": "charFlag",
                "unaff_R15": "ptrR15",
                "lVar1": "result1",
                "lVar2": "result2",
                "cVar3": "charVar",
                "lVar4": "errorMsg",
                "lVar5": "data",
                "dcgettext": "getMessage",
                "retrieve_data_00115d00": "retrieveData",
                "copy_private_data_0010808f": "copyPrivateData",
                "print_error_001126c0": "printError"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long result1;\n  long result2;\n  char charVar;\n  long errorMsg;\n  long data;\n  long ptrRBX;\n  long ptrRBP;\n  long ptrR12;\n  char charFlag;\n  long ptrR15;\n  \n  errorMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(ptrR15 + 0xb4) = *(undefined4 *)(ptrRBX + 0xb4);\n  *(byte *)(ptrR15 + 0x28) =\n       *(byte *)(ptrR15 + 0x28) & 0xcf | *(byte *)(ptrRBX + 0x28) & 0x30;\n  *(long *)(ptrRBX + 0x60) = ptrR15;\n  *(undefined8 *)(ptrRBX + 0x58) = 0;\n  if ((*(byte *)(ptrRBX + 0x27) & 2) != 0) {\n    result1 = *(long *)(ptrRBX + 0xd0);\n    data = retrieveData(result1,*(undefined8 *)(ptrRBX + 0xe0));\n    if ((data != 0) &&\n       (result2 = *(long *)(ptrR12 + 8), *(uint *)(data + 0x18) = *(uint *)(data + 0x18) | 0x20,\n       *(int *)(result2 + 8) == 5)) {\n      *(long *)(result1 + 0xb0) = data;\n      charVar = (**(code **)(*(long *)(ptrRBP + 8) + 0x158))();\n      if (charVar == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(ptrRBP + 8) + 0x158))();\n  if (charVar == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (charFlag != '\\0') {\n    *(undefined4 *)(*(long *)(ptrR15 + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a40 = 1;\n    printError(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "get_type_file_00109022",
                "param_1": "file",
                "param_2": "type",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "fileNumber",
                "pcVar2": "errorMessage",
                "plVar3": "typeData",
                "lVar4": "loopIndex",
                "uVar5": "indexNumber",
                "pplVar6": "typeDataPtr",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] getTypeFile_00109022(long file,uint *type,undefined8 arg3,undefined8 arg4)\n\n{\n  uint fileNumber;\n  char *errorMessage;\n  long *typeData;\n  long loopIndex;\n  uint indexNumber;\n  long **typeDataPtr;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  indexNumber = *type;\n  fileNumber = type[1];\n  if (((int)indexNumber < 0) || (*(uint *)(file + 0x80) <= indexNumber)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)indexNumber);\n  }\n  else {\n    if (-1 < (int)fileNumber) {\n      typeDataPtr = (long **)(*(long *)(file + 0x88) + (long)(int)indexNumber * 8);\n      for (indexNumber = fileNumber; 0xf < (int)indexNumber; indexNumber = indexNumber - 0x10) {\n        if (*typeDataPtr == (long *)0x0) {\n          typeData = (long *)xmalloc(0x88);\n          *typeDataPtr = typeData;\n          for (loopIndex = 0x22; loopIndex != 0; loopIndex = loopIndex + -1) {\n            *(undefined4 *)typeData = 0;\n            typeData = (long *)((long)typeData + (ulong)flag * -8 + 4);\n          }\n        }\n        typeDataPtr = (long **)*typeDataPtr;\n      }\n      if (*typeDataPtr == (long *)0x0) {\n        typeData = (long *)xmalloc(0x88);\n        *typeDataPtr = typeData;\n        for (loopIndex = 0x22; loopIndex != 0; loopIndex = loopIndex + -1) {\n          *(undefined4 *)typeData = 0;\n          typeData = (long *)((long)typeData + (ulong)flag * -8 + 4);\n        }\n      }\n      typeData = *typeDataPtr + (long)(int)((fileNumber >> 4) * -0x10 + fileNumber) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)fileNumber);\n  }\n  typeData = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = arg4;\n  returnValue._0_8_ = typeData;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_type_file_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "param_1": "file_ptr",
                "param_2": "var_length",
                "param_3": "var_address",
                "param_4": "var_type",
                "auVar1": "result",
                "uVar2": "error_code",
                "piVar3": "var_info_ptr",
                "cVar4": "flag",
                "lVar5": "loop_counter",
                "lVar6": "data_structure",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file_ptr,long var_length,ulong var_address,int var_type,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 error_code;\n  int *var_info_ptr;\n  char flag;\n  long loop_counter;\n  long data_structure;\n  int *piVar7;\n  byte bVar8;\n  undefined return_value [16];\n  \n  bVar8 = 0;\n  if (var_length == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = var_address;\n    return result << 0x40;\n  }\n  if (var_address != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (data_structure = *(long *)(file_ptr + 0x10), data_structure == 0)) {\n      error_code = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_code);\n    }\n    else {\n      if (var_type - 1U < 2) {\n        data_structure = data_structure + 0x10;\n        flag = (var_type == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        data_structure = data_structure + 0x10;\n        flag = '\\0';\n      }\n      else {\n        data_structure = *(long *)(file_ptr + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      data_structure = initialize_data_structure_00112925(data_structure,var_length,2,flag);\n      if (data_structure != 0) {\n        var_info_ptr = (int *)xmalloc(0x18);\n        piVar7 = var_info_ptr + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *piVar7 = 0;\n          piVar7 = piVar7 + (ulong)bVar8 * -2 + 1;\n        }\n        *var_info_ptr = var_type;\n        error_code = 1;\n        *(ulong *)(var_info_ptr + 2) = var_address;\n        *(undefined8 *)(var_info_ptr + 4) = param_5;\n        *(int **)(data_structure + 0x20) = var_info_ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  error_code = 0;\nLAB_0010c12e:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_code;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "debug_record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_print_object_00109d97",
                "param_1": "objPtr",
                "lVar1": "counter",
                "local_40": "formattedString"
            },
            "code": "\nvoid initializeOrPrintObject_00109d97(long objPtr)\n\n{\n  long counter;\n  char formattedString [40];\n  \n  if (*(long *)(objPtr + 0x70) != 0) {\n    initialize_object_with_params_00109cf4(objPtr,*(long *)(objPtr + 0x70),0);\n    return;\n  }\n  counter = *(long *)(objPtr + 0x68);\n  *(long *)(objPtr + 0x68) = counter + 1;\n  sprintf(formattedString,\"%ld=%ld\",counter,counter);\n  initialize_object_00109b52(objPtr,formattedString,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_print_object_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "process_build_attr_notes_001086af",
                "uVar1": "min_note_size",
                "uVar2": "tmp1",
                "uVar3": "tmp2",
                "bVar4": "flag",
                "puVar5": "ptr1",
                "iVar6": "result",
                "lVar7": "msg",
                "uVar8": "fmt_msg",
                "uVar9": "note1_size",
                "uVar10": "note2_size",
                "uVar11": "tmp3",
                "__ptr": "ptr2",
                "in_RCX": "note3_size",
                "uVar12": "ptr_note",
                "uVar13": "tmp4",
                "uVar14": "note1_addr",
                "unaff_RBX": "num_notes",
                "unaff_RBP": "orig_note1_size",
                "puVar15": "note_array",
                "puVar16": "ptr_desc",
                "cVar17": "desc_type",
                "puVar18": "ptr_name",
                "puVar19": "ptr_tmp",
                "unaff_R12": "note_ptr",
                "unaff_R13": "orig_note2_size",
                "uVar20": "orig_note3_size",
                "__nmemb": "num_notes_sorted",
                "unaff_R14": "func_ptr_array",
                "puVar21": "ptr_tmp2",
                "bVar22": "bool_val",
                "iVar23": "loop_count",
                "unaff_retaddr": "ret_addr",
                "param_7": "note3_addr",
                "param_8": "bool_val2",
                "param_9": "note2_addr",
                "param_10": "output_size",
                "param_11": "note_array_copy",
                "in_stack_00000030": "output_data",
                "in_stack_00000038": "version",
                "param_13": "note_type",
                "param_14": "version_note",
                "compare_records": "compare_records_func",
                "process_records": "process_records_func"
            },
            "code": "\nulong process_build_attr_notes_001086af(void)\n\n{\n  ulong min_note_size;\n  undefined8 tmp1;\n  undefined8 tmp2;\n  bool flag;\n  ulong *ptr1;\n  int result;\n  long msg;\n  undefined8 fmt_msg;\n  ulong note1_size;\n  ulong note2_size;\n  ulong tmp3;\n  undefined *ptr2;\n  ulong note3_size;\n  ulong ptr_note;\n  ulong tmp4;\n  ulong note1_addr;\n  ulong num_notes;\n  ulong orig_note1_size;\n  ulong *note_array;\n  undefined *ptr_desc;\n  char desc_type;\n  undefined *ptr_name;\n  undefined *ptr_tmp;\n  ulong *note_ptr;\n  ulong orig_note2_size;\n  ulong orig_note3_size;\n  size_t num_notes_sorted;\n  undefined8 *func_ptr_array;\n  ulong *ptr_tmp2;\n  byte bool_val;\n  int loop_count;\n  ulong ret_addr;\n  ulong note3_addr;\n  uint bool_val2;\n  ulong note2_addr;\n  ulong output_size;\n  ulong *note_array_copy;\n  undefined *output_data;\n  uint version;\n  uint note_type;\n  undefined8 *version_note;\n  \n  bool_val = 0;\n  note3_addr = note3_size;\n  note1_size = (**(code **)(func_ptr_array[1] + 0x40))();\n  note2_size = (**(code **)(func_ptr_array[1] + 0x40))(note_ptr[4] + 4);\nLAB_0011662a:\n  tmp4 = orig_note1_size;\n  orig_note3_size = orig_note2_size;\n  if (note2_size < note1_size) {\n    note1_size = note2_size;\n  }\n  do {\n    tmp3 = note3_addr;\n    ptr_note = note3_addr;\n    note_array = note_ptr;\n    if (note_ptr[2] == 0x100) {\n      if (note1_size == 0) {\n        note1_size = ret_addr;\n      }\n      note1_addr = *note_ptr;\n      note_ptr[7] = note1_size;\n      orig_note1_size = tmp4;\n      orig_note2_size = note2_size;\n      ret_addr = note1_size;\n      if (note2_size == 0) goto LAB_001164af;\n    }\n    else {\n      if (note1_size == 0) {\n        note1_size = note2_addr;\n      }\n      note1_addr = *note_ptr;\n      note_ptr[7] = note1_size;\n      orig_note1_size = note2_size;\n      orig_note2_size = orig_note3_size;\n      note2_addr = note1_size;\n      if (note2_size == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    note_array[8] = note2_size;\n    if (*(char *)((note_array[3] - 1) + note1_addr) != '\\0') {\n      msg = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    note_ptr = note_array + 9;\n    if (num_notes < 0xc) {\n      if (num_notes != 0) {\n        msg = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((version | note_type | bool_val2) != 0) {\n        if (((note_type | bool_val2) == 0) || (version == 0)) {\n          if (note_type == 0) {\n            if (bool_val2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (bool_val2 == 0) goto LAB_001166f8;\n        }\n        msg = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      tmp1 = *func_ptr_array;\n      tmp2 = *version_note;\n      fmt_msg = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(fmt_msg,tmp1,tmp2);\nLAB_0011671b:\n      num_notes_sorted = ((long)note_ptr - (long)note_array_copy >> 3) * -0x71c71c71c71c71c7;\n      qsort(note_array_copy,num_notes_sorted,0x48,compare_and_return_result_0011a1b0);\n      note_array = note_array_copy;\n      goto LAB_001167f9;\n    }\n    note2_size = (**(code **)(func_ptr_array[1] + 0x40))(ptr_note);\n    *note_ptr = note2_size;\n    note2_size = (**(code **)(func_ptr_array[1] + 0x40))(ptr_note + 4);\n    note_array[10] = note2_size;\n    note1_size = (**(code **)(func_ptr_array[1] + 0x40))(ptr_note + 8);\n    note1_addr = *note_ptr;\n    note_array[0xb] = note1_size;\n    note2_size = note_array[10];\n    tmp4 = note1_addr + 3 & 0xfffffffffffffffc;\n    note_array[0xf] = tmp4;\n    if (note2_size != (note2_size + 3 & 0xfffffffffffffffc)) {\n      msg = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note1_size - 0x100) {\n      msg = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    tmp3 = tmp4 + note2_size + 0xc;\n    if (num_notes < tmp3) {\n      msg = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (note1_addr < 2) {\n      msg = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    note_array[0xc] = ptr_note + 0xc;\n    min_note_size = ptr_note + 0xc + tmp4;\n    note_array[0xd] = min_note_size;\n    num_notes = num_notes + (-0xc - (tmp4 + note2_size));\n    tmp3 = ptr_note + tmp3;\n    if (note1_addr != 2) {\n      if (*(char *)(ptr_note + 0xc) == '$') {\n        if ((*(char *)(ptr_note + 0xd) == '\\x01') && (*(char *)(ptr_note + 0xe) == '1')) {\n          note2_size = process_build_attribute_notes_00116490();\n          return note2_size;\n        }\n      }\n      else if ((((4 < note1_addr) && (*(char *)(ptr_note + 0xc) == 'G')) &&\n               (*(char *)(ptr_note + 0xd) == 'A')) &&\n              ((*(char *)(ptr_note + 0xe) == '$' && (*(char *)(ptr_note + 0xf) == '\\x01')))) {\n        if (*(char *)(ptr_note + 0x10) == '2') {\n          note2_size = process_build_attribute_notes_00116490();\n          return note2_size;\n        }\n        if (*(char *)(ptr_note + 0x10) == '3') {\n          note2_size = process_build_attribute_notes_00116490();\n          return note2_size;\n        }\n        msg = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    tmp4 = orig_note1_size;\n    orig_note3_size = orig_note2_size;\n    if (note2_size == 0) {\n      if (note1_size == 0x100) {\n        note_array[0x10] = ret_addr;\nLAB_001164af:\n        ptr_note = tmp3;\n        note2_size = orig_note3_size;\n        note_array = note_ptr;\n        orig_note2_size = orig_note3_size;\n      }\n      else {\n        note_array[0x10] = note2_addr;\nLAB_0011669e:\n        orig_note1_size = tmp4;\n        ptr_note = tmp3;\n        note2_size = tmp4;\n        note_array = note_ptr;\n        orig_note2_size = orig_note3_size;\n      }\n      goto LAB_001164bb;\n    }\n    if (note2_size == 0x10) break;\n    if (0x10 < note2_size) {\nLAB_00116679:\n      msg = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (msg != 0) {\n        bfd_set_error(0x11);\n        print_error_001126c0(0,func_ptr_array,version_note,msg);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (note2_size != 4) {\n      if (note2_size == 8) {\n        note2_size = process_build_attr_notes_001086af();\n        return note2_size;\n      }\n      goto LAB_00116679;\n    }\n    note3_addr = tmp3;\n    note1_size = (**(code **)(func_ptr_array[1] + 0x40))();\n    note2_size = 0xffffffffffffffff;\n  } while( true );\n  note3_addr = tmp3;\n  note1_size = (**(code **)(func_ptr_array[1] + 0x28))(min_note_size);\n  note2_size = (**(code **)(func_ptr_array[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (note_ptr <= note_array) {\n    qsort(note_array_copy,num_notes_sorted,0x48,compare_records_func_0011a250);\n    ptr2 = (undefined *)xmalloc(output_size * 2);\n    note3_addr = 0;\n    note2_addr = 0;\n    ptr_tmp = ptr2;\n    for (note_array = note_array_copy; note_array < note_ptr; note_array = note_array + 9) {\n      if (note_array[2] != 0) {\n        ptr_name = ptr_tmp + 4;\n        ptr_desc = ptr_tmp + 0xc;\n        if ((note_array[7] == note2_addr) && (note_array[8] == note3_addr)) {\n          (**(code **)(func_ptr_array[1] + 0x50))(*note_array,ptr_tmp);\n          (**(code **)(func_ptr_array[1] + 0x50))(0,ptr_name);\n          (**(code **)(func_ptr_array[1] + 0x50))(note_array[2],ptr_tmp + 8);\n          note1_size = note_array[6];\n          note2_size = *note_array;\n          ptr_tmp = (undefined *)note_array[3];\n          ptr_name = ptr_desc;\n          for (tmp4 = note2_size; tmp4 != 0; tmp4 = tmp4 - 1) {\n            *ptr_name = *ptr_tmp;\n            ptr_tmp = ptr_tmp + (ulong)bool_val * -2 + 1;\n            ptr_name = ptr_name + (ulong)bool_val * -2 + 1;\n          }\n          if (note2_size < note1_size) {\n            for (msg = note1_size - note2_size; msg != 0; msg = msg + -1) {\n              *ptr_name = 0;\n              ptr_name = ptr_name + (ulong)bool_val * -2 + 1;\n            }\n          }\n          ptr_tmp = ptr_desc + note1_size;\n        }\n        else {\n          (**(code **)(func_ptr_array[1] + 0x50))();\n          if (*(int *)(func_ptr_array[1] + 8) == 5) {\n            desc_type = (*(char *)(func_ptr_array[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            desc_type = '\\b';\n          }\n          (**(code **)(func_ptr_array[1] + 0x50))(desc_type,ptr_name);\n          (**(code **)(func_ptr_array[1] + 0x50))(note_array[2],ptr_tmp + 8);\n          note2_size = *note_array;\n          ptr_tmp = (undefined *)note_array[3];\n          ptr_name = ptr_desc;\n          for (note1_size = note2_size; note1_size != 0; note1_size = note1_size - 1) {\n            *ptr_name = *ptr_tmp;\n            ptr_tmp = ptr_tmp + (ulong)bool_val * -2 + 1;\n            ptr_name = ptr_name + (ulong)bool_val * -2 + 1;\n          }\n          note1_size = note_array[6];\n          if (note2_size < note1_size) {\n            for (msg = note1_size - note2_size; msg != 0; msg = msg + -1) {\n              *ptr_name = 0;\n              ptr_name = ptr_name + (ulong)bool_val * -2 + 1;\n            }\n          }\n          msg = func_ptr_array[1];\n          ptr_desc = ptr_desc + note1_size;\n          ptr_tmp = ptr_desc + 8;\n          if ((*(int *)(msg + 8) == 5) && (*(char *)(func_ptr_array[0x22] + 4) == '\\x02')) {\n            (**(code **)(msg + 0x38))(note_array[7],ptr_desc);\n            (**(code **)(func_ptr_array[1] + 0x38))(note_array[8],ptr_tmp);\n            ptr_tmp = ptr_desc + 0x10;\n          }\n          else {\n            (**(code **)(msg + 0x50))(note_array[7],ptr_desc);\n            (**(code **)(func_ptr_array[1] + 0x50))(note_array[8],ptr_desc + 4);\n          }\n          note2_addr = note_array[7];\n          note3_addr = note_array[8];\n        }\n      }\n    }\n    note1_size = (long)ptr_tmp - (long)ptr2;\n    note2_size = note1_size;\n    ptr_tmp = ptr2;\n    if (note1_size < output_size) {\n      for (; output_size = note1_size, note2_size != 0; note2_size = note2_size - 1) {\n        *output_data = *ptr_tmp;\n        ptr_tmp = ptr_tmp + (ulong)bool_val * -2 + 1;\n        output_data = output_data + (ulong)bool_val * -2 + 1;\n      }\n    }\n    free(ptr2);\nLAB_001166f8:\n    free(note_array_copy);\n    return output_size;\n  }\n  if (note_array[2] != 0) {\n    note2_size = note_array[7];\n    note1_size = note_array[8];\n    tmp4 = note_array[2];\n    ptr_tmp2 = note_array;\n    loop_count = 0;\n    if (note2_size == note1_size) {\n      note_array[2] = 0;\n    }\n    else {\n      do {\n        do {\n          ptr1 = ptr_tmp2;\n          ptr_tmp2 = ptr1 + -9;\n          if (ptr_tmp2 < note_array_copy) goto LAB_001167f5;\n          orig_note3_size = ptr1[-7];\n        } while (orig_note3_size == 0);\n        note3_addr = tmp4;\n        if ((*ptr_tmp2 != *note_array) ||\n           (result = memcmp((void *)ptr1[-6],(void *)note_array[3],*note_array), result != 0)) break;\n        tmp4 = ptr1[-2];\n        tmp3 = ptr1[-1];\n        if (note2_size == tmp4) {\n          if (note1_size == tmp3) {\n            note_array[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (note1_size <= tmp3) {\n            note_array[2] = 0;\n            break;\n          }\n          if (tmp3 < note2_size) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < tmp3) || (note2_size <= (tmp3 + 0xf & 0xfffffffffffffff0)))\n            goto process_records_func_00116852;\n          }\nLAB_001167b8:\n          if ((note3_addr == 0x101) == (orig_note3_size == 0x101)) {\n            if (tmp3 <= note1_size) {\n              tmp3 = note1_size;\n            }\n            if (tmp4 < note2_size) {\n              note2_size = tmp4;\n            }\n            ptr1[-1] = tmp3;\n            ptr1[-2] = note2_size;\n            note_array[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (tmp4 <= note2_size) goto LAB_001167a6;\n          if (tmp3 < note2_size) goto LAB_0010852c;\n          if (note1_size < note2_size) {\n            if ((0xfffffffffffffff0 < note1_size) || (tmp4 <= (note1_size + 0xf & 0xfffffffffffffff0)))\n            goto process_records_func_00116852;\n            goto LAB_001167b8;\n          }\n          if (note1_size != tmp3) goto LAB_001167b8;\n        }\nprocess_records_func_00116852:\n        flag = loop_count < 0x11;\n        tmp4 = note3_addr;\n        loop_count = loop_count + 1;\n      } while (flag);\n    }\n  }\nLAB_001167f5:\n  note_array = note_array + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010847a",
                "FUN_00116490",
                "bfd_set_error",
                "FUN_0011a1b0",
                "dcgettext",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "process_build_attr_notes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_configuration_0010add5",
                "update_config_info_0010abdd": "updateConfigurationInfo"
            },
            "code": "\nvoid initializeConfiguration_0010add5(void)\n\n{\n  updateConfigurationInfo();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_configuration_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_memory_block_00113e17"
            },
            "code": "\nvoid initialize_memory_block_00113e17(void)\n\n{\n  initialize_memory_block_00113e17_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_object_00109b52",
                "param_1": "objectPtr",
                "param_2": "stringParam",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "prevObjectPtr",
                "puVar2": "newObjectPtr",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeObject_00109b52(long objectPtr,undefined8 stringParam,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 prevObjectPtr;\n  undefined8 *newObjectPtr;\n  undefined8 duplicatedString;\n  \n  newObjectPtr = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(stringParam);\n  newObjectPtr[2] = param3;\n  *(undefined (*) [16])(newObjectPtr + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newObjectPtr + 6) = ZEXT816(0);\n  prevObjectPtr = *(undefined8 *)(objectPtr + 0x60);\n  *(undefined *)((long)newObjectPtr + 0x1c) = param4;\n  *(undefined4 *)(newObjectPtr + 3) = param5;\n  *(undefined8 **)(objectPtr + 0x60) = newObjectPtr;\n  *newObjectPtr = prevObjectPtr;\n  newObjectPtr[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e453",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109e76"
            ],
            "imported": false,
            "current_name": "initialize_object_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_input_00109a32",
                "param_1": "input_ptr",
                "param_2": "error_flag_ptr",
                "param_3": "end_of_input",
                "__nptr": "current_input",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_numeric_input_00109a32(char **input_ptr,undefined *error_flag_ptr,char *end_of_input,undefined8 param_4,undefined8 param_5)\n\n{\n  char *current_input;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (error_flag_ptr != (undefined *)0x0) {\n    *error_flag_ptr = 0;\n  }\n  current_input = *input_ptr;\n  if ((current_input < end_of_input) && (*current_input != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(current_input,input_ptr,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag_ptr == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_message_00108fe8(current_input,error_message);\n    }\n    else {\n      *error_flag_ptr = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  result._8_8_ = param_5;\n  result._0_8_ = parsed_value;\n  return result;\n}\n\n",
            "called": [
                "FUN_00108fe8",
                "strtoul",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_numeric_input_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_0010c6be",
                "param_1": "file_handle",
                "param_2": "tag",
                "param_3": "current_tag",
                "iVar1": "comparison_result",
                "uVar2": "translated_message",
                "piVar3": "new_debug_tag",
                "pauVar4": "memory_block",
                "lVar5": "offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * process_debug_tag_0010c6be(long file_handle,char *tag,int *current_tag)\n\n{\n  int comparison_result;\n  undefined8 translated_message;\n  int *new_debug_tag;\n  undefined (*memory_block) [16];\n  long offset;\n  char *error_message;\n  \n  if ((tag != (char *)0x0) && (current_tag != (int *)0x0)) {\n    if (*(long *)(file_handle + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*current_tag != 0x17) {\n        new_debug_tag = (int *)initialize_memory_block_00112904(0x17,0);\n        if (new_debug_tag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        memory_block = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(file_handle + 0x10);\n        *memory_block = ZEXT816(0);\n        *(int **)(*memory_block + 8) = current_tag;\n        *(undefined (**) [16])(new_debug_tag + 4) = memory_block;\n        offset = initialize_data_structure_00112925(offset + 0x10,tag,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = new_debug_tag;\n        *(long *)*memory_block = offset;\n        return new_debug_tag;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(current_tag + 4) + 8),tag);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return current_tag;\n      }\n    }\n    translated_message = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",translated_message);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "strcmp",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "process_debug_tag_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "extract_arglist_demangled_names_0010b6ea",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result_array",
                "__format": "error_message",
                "lVar1": "name_length",
                "uVar2": "result_count",
                "uVar3": "result_array_size",
                "uVar4": "temp_count",
                "local_39": "name_buffer"
            },
            "code": "\n\n\nvoid * extract_arglist_demangled_names_0010b6ea(undefined8 param_1,undefined8 param_2,int *arglist,undefined *error_flag)\n\n{\n  void *result_array;\n  char *error_message;\n  long name_length;\n  ulong result_count;\n  ulong result_array_size;\n  uint temp_count;\n  char name_buffer [9];\n  \n  result_array_size = 10;\n  result_count = 0;\n  result_array = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_array);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    name_length = demangle_and_initialize_0010b0fa(param_1,param_2,*(long *)(arglist + 4),0,name_buffer);\n    if (name_length == 0) {\n      if (name_buffer[0] == '\\0') {\n        free(result_array);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      temp_count = (int)result_count + 1;\n      if ((uint)result_array_size <= temp_count) {\n        result_array_size = (ulong)((uint)result_array_size + 10);\n        result_array = (void *)xrealloc(result_array,result_array_size << 3);\n      }\n      *(long *)((long)result_array + result_count * 8) = name_length;\n      result_count = (ulong)temp_count;\n    }\n  }\n  *(undefined8 *)((long)result_array + result_count * 8) = 0;\n  return result_array;\n}\n\n",
            "called": [
                "FUN_0010b0fa",
                "xmalloc",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_arglist_demangled_names_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "initialize_section_data_0011a2e0",
                "param_1": "sectionData",
                "param_2": "paramInfo",
                "uVar1": "sectionDataPtr",
                "uVar2": "errorMsg",
                "lVar3": "sectionInfo",
                "lVar4": "sectionPtr"
            },
            "code": "\nlong initializeSectionData_0011a2e0(long sectionData,long paramInfo)\n\n{\n  undefined8 sectionDataPtr;\n  undefined8 errorMsg;\n  long sectionInfo;\n  long sectionPtr;\n  \n  sectionInfo = (**(code **)(*(long *)(paramInfo + 8) + 0x208))(paramInfo);\n  sectionPtr = *(long *)(sectionData + 0x20);\n  *(undefined8 *)(sectionInfo + 8) = *(undefined8 *)(sectionData + 8);\n  *(undefined8 *)(sectionInfo + 0x10) = *(undefined8 *)(sectionData + 0x10);\n  *(undefined4 *)(sectionInfo + 0x18) = *(undefined4 *)(sectionData + 0x18);\n  if (sectionPtr == 0) {\n    sectionPtr = 0x128598;\n  }\n  else {\n    sectionPtr = bfd_get_section_by_name(paramInfo);\n    if (sectionPtr == 0) {\n      sectionDataPtr = *(undefined8 *)(sectionData + 0x20);\n      errorMsg = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_message_and_exit_00119dd0(errorMsg,sectionDataPtr);\n    }\n  }\n  *(long *)(sectionInfo + 0x20) = sectionPtr;\n  return sectionInfo;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_section_data_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "process_and_free_string_0010e8a9",
                "param_1": "prefix",
                "param_2": "input",
                "param_3": "append_string",
                "uVar1": "result",
                "sVar2": "append_length",
                "__s": "concatenated_string"
            },
            "code": "\nundefined4 process_and_free_string_0010e8a9(undefined8 prefix,undefined8 input,char *append_string)\n\n{\n  undefined4 result;\n  size_t append_length;\n  char *concatenated_string;\n  \n  append_length = strlen(append_string);\n  concatenated_string = (char *)xmalloc(append_length + 0x14);\n  sprintf(concatenated_string,\"%s:c=f%g\",prefix,append_string);\n  result = process_string_0010e2f0(input,0x80,0,0,concatenated_string);\n  if ((char)result != '\\0') {\n    free(concatenated_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_free_string_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "find_section_flags_00104ad6",
                "unaff_RBP": "currentSection",
                "__s": "sectionString",
                "sVar4": "sectionLength",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "iVar5": "stringLength",
                "unaff_R14D": "currentFlags",
                "unaff_R15": "acceptString",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] findSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentSection;\n  char *sectionString;\n  size_t sectionLength;\n  int stringLength;\n  uint currentFlags;\n  char *acceptString;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    currentFlags = currentFlags | 0x2000;\n    sectionString = currentSection;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionString == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = currentFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              commaPosition = strchr(sectionString,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionLength = strlen(sectionString);\n                stringLength = (int)sectionLength;\n                currentSection = (char *)0x0;\n              }\n              else {\n                currentSection = commaPosition + 1;\n                stringLength = (int)commaPosition - (int)sectionString;\n              }\n              sectionLength = (size_t)stringLength;\n              comparisonResult = strncasecmp(acceptString,sectionString,sectionLength);\n              if (comparisonResult != 0) break;\n              currentFlags = currentFlags | 1;\n              sectionString = currentSection;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionString,sectionLength);\n            if (comparisonResult != 0) break;\n            currentFlags = currentFlags | 2;\n            sectionString = currentSection;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionString,sectionLength);\n          if (comparisonResult != 0) break;\n          currentFlags = currentFlags | 0x200;\n          sectionString = currentSection;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionString,sectionLength);\n        if (comparisonResult != 0) break;\n        currentFlags = currentFlags | 8;\n        sectionString = currentSection;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionString,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionString,sectionLength);\n      if (comparisonResult == 0) {\n        currentFlags = currentFlags | 0x10;\n        sectionString = currentSection;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionString,sectionLength);\n        if (comparisonResult == 0) {\n          currentFlags = currentFlags | 0x20;\n          sectionString = currentSection;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionString,sectionLength);\n          if (comparisonResult == 0) {\n            currentFlags = currentFlags | 0x40;\n            sectionString = currentSection;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionString,sectionLength);\n            if (comparisonResult == 0) {\n              currentFlags = currentFlags | 0x8000;\n              sectionString = currentSection;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionString,sectionLength);\n              if (comparisonResult == 0) {\n                currentFlags = currentFlags | 0x8000000;\n                sectionString = currentSection;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionString,sectionLength);\n                if (comparisonResult == 0) {\n                  currentFlags = currentFlags | 0x100;\n                  sectionString = currentSection;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionString,sectionLength);\n                  if (comparisonResult == 0) {\n                    currentFlags = currentFlags | 0x800000;\n                    sectionString = currentSection;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionString,sectionLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(stringLength + 1));\n                      strncpy(commaPosition,sectionString,sectionLength);\n                      commaPosition[sectionLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_message_and_exit_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    currentFlags = currentFlags | 0x1000000;\n                    sectionString = currentSection;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00119dd0",
                "xmalloc",
                "strncpy",
                "strlen",
                "dcgettext",
                "strncasecmp",
                "FUN_00104ad6",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "find_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_in_binary_0010914e",
                "param_1": "binaryAddress",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "compilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorString",
                "puVar4": "currentType",
                "lVar5": "typeAddress",
                "puVar6": "currentCompilationUnit",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedTypeInBinary_0010914e(long binaryAddress,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long compilationUnit;\n  int comparisonResult;\n  undefined8 errorString;\n  undefined8 *currentType;\n  long typeAddress;\n  undefined8 *currentCompilationUnit;\n  undefined returnValue [16];\n  \n  compilationUnit = *(long *)(binaryAddress + 8);\n  if (compilationUnit == 0) {\n    errorString = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorString);\n  }\n  else {\n    for (typeAddress = *(long *)(binaryAddress + 0x20); typeAddress != 0; typeAddress = *(long *)(typeAddress + 8)) {\n      if (*(undefined8 **)(typeAddress + 0x28) != (undefined8 *)0x0) {\n        for (currentType = (undefined8 *)**(undefined8 **)(typeAddress + 0x28); currentType != (undefined8 *)0x0;\n            currentType = (undefined8 *)*currentType) {\n          if (*(int *)((long)currentType + 0x14) == 0) {\n            if (*(char *)currentType[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentType[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (currentCompilationUnit = *(undefined8 **)(compilationUnit + 8); currentCompilationUnit != (undefined8 *)0x0;\n        currentCompilationUnit = (undefined8 *)*currentCompilationUnit) {\n      if ((undefined8 *)currentCompilationUnit[2] != (undefined8 *)0x0) {\n        for (currentType = *(undefined8 **)(undefined8 *)currentCompilationUnit[2]; currentType != (undefined8 *)0x0;\n            currentType = (undefined8 *)*currentType) {\n          if (*(int *)((long)currentType + 0x14) == 0) {\n            if (*(char *)currentType[1] == *typeName) {\n              comparisonResult = strcmp((char *)currentType[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorString = 0;\nLAB_00109223:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorString;\n  return returnValue;\nLAB_00109216:\n  errorString = currentType[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_in_binary_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_input_0010829e",
                "unaff_EBP": "inputValue",
                "check_string_length_and_compare_00113ede": "checkAndCompareString",
                "validate_and_invert_result_001082b3": "validateAndInvertResult"
            },
            "code": "\nundefined8 processInput_0010829e(void)\n\n{\n  undefined8 uVar1;\n  int inputValue;\n  \n  if (inputValue == 5) {\n    uVar1 = checkAndCompareString();\n    return uVar1;\n  }\n  if ((inputValue != 4) && (inputValue == 6)) {\n    uVar1 = validateAndInvertResult();\n    return uVar1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "process_input_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "longValue",
                "iVar1": "intValue",
                "iVar2": "archIndex",
                "pcVar5": "archString",
                "sVar4": "stringLength",
                "iVar7": "archMachIndex",
                "lVar8": "startValue",
                "iVar9": "currentValue",
                "unaff_R15D": "stackValue",
                "uVar10": "loopValue",
                "uVar11": "loopIndex",
                "param_7": "maxValue",
                "uStack000000000000000c": "indentation",
                "param_11": "binaryData",
                "param_13": "dataPointer"
            },
            "code": "\n\n\nvoid printBinaryInfo_00104943(void)\n\n{\n  int intValue;\n  int archIndex;\n  char *inputString;\n  long longValue;\n  size_t stringLength;\n  char *archString;\n  undefined8 uVar6;\n  int archMachIndex;\n  long startValue;\n  int currentValue;\n  uint stackValue;\n  ulong loopValue;\n  uint loopIndex;\n  int maxValue;\n  uint indentation;\n  undefined8 binaryData;\n  long dataPointer;\n  \n  longValue = strtol(inputString,(char **)0x0,10);\n  intValue = (int)longValue;\n  currentValue = maxValue;\n  indentation = stackValue;\n  if (intValue == 0) {\n    intValue = 0x50;\n  }\n  do {\n    maxValue = currentValue;\n    if (binaryData._4_4_ <= maxValue) {\n      return;\n    }\n    startValue = (long)maxValue;\n    archMachIndex = (intValue - indentation) + -1;\n    longValue = startValue;\n    do {\n      currentValue = (int)longValue;\n      if (binaryData._4_4_ <= currentValue) break;\n      stringLength = strlen(*(char **)(dataPointer + longValue * 0x60));\n      longValue = longValue + 1;\n      archMachIndex = (archMachIndex - (int)stringLength) + -1;\n    } while (-1 < archMachIndex);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (longValue = startValue * 0x60; ((ulong)(uint)(currentValue - maxValue) + startValue) * 0x60 - longValue != 0;\n        longValue = longValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataPointer + longValue));\n    }\n    archMachIndex = 2;\n    putc(10,_stdout);\n    do {\n      archString = (char *)bfd_printable_arch_mach(archMachIndex,0);\n      archIndex = strcmp(archString,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        uVar6 = bfd_printable_arch_mach(archMachIndex,0);\n        printf(\"%*s \",(ulong)indentation,uVar6);\n        loopIndex = archMachIndex - 2;\n        longValue = startValue * 0x60;\n        archIndex = maxValue;\n        while (currentValue != archIndex) {\n          archString = *(char **)(dataPointer + longValue);\n          if (*(char *)((long)(char **)(dataPointer + longValue) + (ulong)loopIndex + 8) == '\\0') {\n            stringLength = strlen(archString);\n            for (loopValue = stringLength & 0xffffffff; (int)loopValue != 0; loopValue = (ulong)((int)loopValue - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archString,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (currentValue != archIndex) {\n            putc(0x20,_stdout);\n          }\n          longValue = longValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMachIndex = archMachIndex + 1;\n    } while (archMachIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "strtol",
                "strcmp",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_binary_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_memory_block_00113e23",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "memory_block",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong create_memory_block_00113e23(undefined8 data_1,undefined8 data_2)\n\n{\n  long memory_block;\n  undefined8 *allocated_memory;\n  \n  memory_block = initialize_memory_block_00112904(1,0);\n  if (memory_block != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = data_1;\n    allocated_memory[1] = data_2;\n    *(undefined8 **)(memory_block + 0x10) = allocated_memory;\n  }\n  return memory_block;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_memory_block_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_00108fb9",
                "param_1": "stab",
                "__format": "format"
            },
            "code": "\n\n\nvoid printBadStab_00108fb9(undefined8 stab)\n\n{\n  char *format;\n  \n  format = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,format,stab);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_bad_stab_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "data_ptr",
                "param_2": "number_ptr",
                "iVar1": "parsed_number",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **data_ptr,int *number_ptr)\n\n{\n  int parsed_number;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *data_ptr;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    parsed_number = (char)*current_byte + -0x30;\n    *number_ptr = parsed_number;\n    *data_ptr = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        parsed_number = parsed_number * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *data_ptr = next_byte;\n        *number_ptr = parsed_number;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_alignment_and_size_00108072",
                "unaff_RBX": "functionArray",
                "unaff_RBP": "basePointer",
                "unaff_R12": "inputArg1",
                "unaff_R14B": "flag",
                "unaff_R15": "localVar1",
                "bVar1": "byteVar",
                "uVar2": "pointerVar",
                "cVar3": "charVar",
                "uVar4": "uintVar",
                "lVar5": "errorMsg",
                "lVar6": "result1",
                "lVar7": "result2",
                "lVar8": "offset",
                "process_entries_00114190": "processEntries",
                "dcgettext": "getMessage",
                "set_alignment_00108179": "setAlignment",
                "retrieve_data_00115d00": "retrieveData",
                "copy_private_data_0010808f": "copyPrivateData",
                "print_error_001126c0": "printError"
            },
            "code": "\n\n\nvoid setAlignmentAndSize_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 pointerVar;\n  char charVar;\n  uint uintVar;\n  long errorMsg;\n  long result1;\n  long result2;\n  undefined8 *functionArray;\n  long basePointer;\n  long inputArg1;\n  long offset;\n  char flag;\n  long localVar1;\n  \n  errorMsg = dcgettext(0,\"failed to set size\",5);\n  offset = functionArray[6];\n  result1 = processEntries(*functionArray,0,0x18);\n  if (result1 == 0) {\n    *(byte *)(localVar1 + 0x28) = *(byte *)(localVar1 + 0x28) | 1;\n    pointerVar = *functionArray;\n    offset = offset + _DAT_001279b0;\n    *(long *)(localVar1 + 0x30) = offset;\n    *(long *)(localVar1 + 0x38) = offset;\n    offset = functionArray[7];\n    result1 = processEntries(pointerVar,0,0x60);\n    if (result1 == 0) goto LAB_00115695;\nLAB_00115860:\n    result2 = *(long *)(result1 + 0x20);\n    if ((*(byte *)(result1 + 0x14) & 0x40) != 0) {\n      result2 = result2 + offset;\n    }\n    *(long *)(localVar1 + 0x38) = result2;\n    offset = processEntries(*functionArray,0,0x200);\n    if (offset != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)functionArray + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorMsg = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(localVar1 + 0xb4) = *(undefined4 *)((long)functionArray + 0xb4);\n    *(byte *)(localVar1 + 0x28) =\n         *(byte *)(localVar1 + 0x28) & 0xcf | *(byte *)(functionArray + 5) & 0x30;\n    functionArray[0xc] = localVar1;\n    functionArray[0xb] = 0;\n    byteVar = *(byte *)((long)functionArray + 0x27);\n  }\n  else {\n    result2 = *(long *)(result1 + 0x18);\n    if ((*(byte *)(result1 + 0x14) & 8) == 0) {\n      result2 = result2 + offset;\n    }\n    *(byte *)(localVar1 + 0x28) = *(byte *)(localVar1 + 0x28) | 1;\n    pointerVar = *functionArray;\n    *(long *)(localVar1 + 0x30) = result2;\n    *(long *)(localVar1 + 0x38) = result2;\n    offset = functionArray[7];\n    result1 = processEntries(pointerVar,0,0x60);\n    if (result1 != 0) goto LAB_00115860;\nLAB_00115695:\n    pointerVar = *functionArray;\n    *(long *)(localVar1 + 0x38) = offset + _DAT_001279b0;\n    offset = processEntries(pointerVar,0,0x200);\n    if (offset == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(offset + 0x2c);\n    if (0x3e < uintVar) {\n      setAlignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(localVar1 + 0x7c) = uintVar;\n    *(undefined4 *)(localVar1 + 0xb4) = *(undefined4 *)((long)functionArray + 0xb4);\n    *(byte *)(localVar1 + 0x28) =\n         *(byte *)(localVar1 + 0x28) & 0xcf | *(byte *)(functionArray + 5) & 0x30;\n    functionArray[0xc] = localVar1;\n    functionArray[0xb] = 0;\n    byteVar = *(byte *)((long)functionArray + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    offset = functionArray[0x1a];\n    result1 = retrieveData(offset,functionArray[0x1c]);\n    if ((result1 != 0) &&\n       (result2 = *(long *)(inputArg1 + 8), *(uint *)(result1 + 0x18) = *(uint *)(result1 + 0x18) | 0x20,\n       *(int *)(result2 + 8) == 5)) {\n      *(long *)(offset + 0xb0) = result1;\n      charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charVar == '\\0') {\n        copyPrivateData();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charVar = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charVar == '\\0') {\n    copyPrivateData();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(localVar1 + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a40 = 1;\n    printError(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_alignment_and_size_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "generate_formatted_string_0010a2b9",
                "param_1": "objectPtr",
                "param_2": "flag",
                "param_3": "ptr1",
                "param_4": "ptr2",
                "cVar1": "char1",
                "__s": "str1",
                "sVar2": "strLength1",
                "__s_00": "str2",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] generateFormattedString_0010a2b9(long objectPtr,char flag,undefined8 ptr1,undefined8 ptr2)\n\n{\n  char char1;\n  char *str1;\n  size_t strLength1;\n  char *str2;\n  long counter;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(objectPtr + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_00109b2f();\n  strLength1 = strlen(str1);\n  str2 = (char *)xmalloc(strLength1 + 0x1e);\n  if (flag == '\\0') {\n    *str2 = '\\0';\n    counter = 0;\n    flag = char1;\n  }\n  else {\n    counter = *(long *)(objectPtr + 0x68);\n    *(long *)(objectPtr + 0x68) = counter + 1;\n    sprintf(str2,\"%ld=@S;\",counter);\n  }\n  strLength1 = strlen(str2);\n  sprintf(str2 + strLength1,\"S%s\",str1);\n  free(str1);\n  result._0_4_ = initialize_object_00109b52(objectPtr,str2,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(str2);\n  }\n  result._8_8_ = ptr2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_and_update_data_0010ec73",
                "param_1": "data_array",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "count",
                "cVar2": "result"
            },
            "code": "\nundefined process_and_update_data_0010ec73(long *data_array,long value,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int count;\n  char result;\n  \n  if (data_array[0x3c] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(value,data_array[1] + 8 + data_array[0x3c]);\n    data_array[0x3c] = -1;\n  }\n  if (data_array[0x3d] != -1) {\n    (**(code **)(*(long *)(*data_array + 8) + 0x50))(value,data_array[1] + 8 + data_array[0x3d]);\n    data_array[0x3d] = -1;\n  }\n  count = *(int *)(data_array + 0x3f);\n  *(int *)(data_array + 0x3f) = count + 1;\n  if (count == 0) {\n    data_array[0x40] = value;\n  }\n  else {\n    if ((data_array[0x41] != -1) &&\n       (result = process_string_0010e2f0(data_array,0xc0,0,data_array[0x41],0,param6,param4), result == '\\0')) {\n      return 0;\n    }\n    data_array[0x41] = value - data_array[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_and_update_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "check_endianness_00114e00",
                "param_1": "endiannessCode",
                "dcgettext": "translateEndianness"
            },
            "code": "\nvoid checkEndianness_00114e00(int endiannessCode)\n\n{\n  if (endiannessCode == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessCode == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "check_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_modification_time_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "fileSize",
                "param_5": "updateModificationTime",
                "param_6": "returnCallback",
                "uVar1": "copyResult",
                "piVar2": "errnoPointer",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copySuccess",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndSetModificationTime_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 fileSize,char updateModificationTime,\n            undefined8 returnCallback)\n\n{\n  uint copyResult;\n  int *errnoPointer;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copySuccess;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copySuccess = 0;\n  }\n  else {\n    copyResult = copy_file_00115a90(filePermissions,destinationFilePath,fileSize);\n    copySuccess = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPointer = __errno_location();\n      errorString = strerror(*errnoPointer);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (updateModificationTime != '\\0') {\n    set_file_modification_time_0011a350(destinationFilePath,fileSize);\n  }\n  returnValue._8_8_ = returnCallback;\n  returnValue._0_8_ = copySuccess;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_set_modification_time_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_config_0010adf2",
                "update_config_info_0010abdd": "update_config_info"
            },
            "code": "\nvoid initialize_config_0010adf2(void)\n\n{\n  update_config_info();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_config_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_buffer_0010d7d4",
                "param_1": "buffer_length",
                "param_2": "buffer_address",
                "param_3": "data_array",
                "param_4": "count_array",
                "param_5": "max_count",
                "uVar1": "buffer_start",
                "cVar2": "result",
                "uVar3": "expanded_buffer",
                "lVar4": "temp",
                "plVar5": "local_data_array",
                "uVar6": "current_count",
                "local_40": "local_data"
            },
            "code": "\nundefined4\nprocess_buffer_0010d7d4(undefined8 buffer_length,undefined8 *buffer_address,long *data_array,uint *count_array,uint *max_count)\n\n{\n  undefined8 buffer_start;\n  char result;\n  undefined4 expanded_buffer;\n  long temp;\n  long *local_data_array;\n  uint current_count;\n  long local_data [2];\n  \n  buffer_start = *buffer_address;\n  local_data_array = local_data;\n  if (data_array == (long *)0x0) {\n    local_data_array = (long *)0x0;\n  }\n  result = process_binary_data_0010c95e(buffer_length,buffer_address,local_data_array);\n  if ((result != '\\0') &&\n     (expanded_buffer = expand_and_add_to_buffer_00109be3(buffer_length,buffer_start,(int)*buffer_address - (int)buffer_start), (char)expanded_buffer != '\\0')) {\n    if (data_array == (long *)0x0) {\n      return expanded_buffer;\n    }\n    if (local_data[0] != 0) {\n      if (*max_count <= *count_array + 1) {\n        current_count = *max_count + 10;\n        temp = *data_array;\n        *max_count = current_count;\n        temp = xrealloc(temp,(ulong)current_count << 3);\n        *data_array = temp;\n      }\n      current_count = *count_array;\n      *(long *)(*data_array + (ulong)current_count * 8) = local_data[0];\n      *count_array = current_count + 1;\n      return expanded_buffer;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_buffer_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_add_to_buffer_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_stats_00113f50",
                "param_1": "file_path",
                "iVar1": "stat_result",
                "piVar2": "error_number",
                "uVar3": "error_message",
                "pcVar4": "reason",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_stats_00113f50(char *file_path)\n\n{\n  int stat_result;\n  int *error_number;\n  undefined8 error_message;\n  char *reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    stat_result = stat(file_path,&file_stats);\n    if (stat_result < 0) {\n      error_number = __errno_location();\n      if (*error_number == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(error_message,file_path);\n      }\n      else {\n        reason = strerror(*error_number);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(error_message,file_path,reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "FUN_00119ed0",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_stats_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "get_default_value_001087fd",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getDefaultValue_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "get_default_value_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "data"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatList)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  data = DAT_00127600;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fputc",
                "fflush",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "improve_and_extract_code_0011378f",
                "param_1": "ptr_input_1",
                "param_2": "ptr_input_2",
                "param_3": "ptr_output_1",
                "param_4": "ptr_output_2",
                "param_5": "ptr_output_3",
                "param_6": "ptr_output_4",
                "auVar1": "aux_var_1",
                "cVar2": "char_var",
                "uVar3": "uint_var_1",
                "uVar4": "uint_var_2",
                "puVar5": "ptr_var_1",
                "sVar6": "size_var",
                "lVar7": "long_var",
                "puVar8": "ptr_var_2",
                "puVar9": "ptr_var_3",
                "__dest": "dest_var",
                "puVar10": "ptr_var_4",
                "plVar11": "ptr_var_5",
                "bVar12": "byte_var",
                "local_258": "local_ptr_1",
                "local_250": "local_long_1",
                "local_248": "local_uint_1",
                "uStack_244": "stack_uint_1",
                "uStack_240": "stack_uint_2",
                "uStack_23c": "stack_uint_3",
                "local_238": "local_arr_1",
                "local_228": "local_uint_2",
                "local_220": "local_arr_2",
                "local_1f8": "local_uint_3",
                "local_1f0": "local_uint_4",
                "local_1e8": "local_arr_3",
                "local_a0": "local_arr_4",
                "local_78": "local_arr_5",
                "uStack_70": "stack_uint_4",
                "local_68": "local_uint_5",
                "local_60": "local_uint_6",
                "local_58": "local_uint_7",
                "uStack_54": "stack_uint_5",
                "uStack_50": "stack_uint_6",
                "uStack_4c": "stack_uint_7"
            },
            "code": "\nundefined4\nimprove_and_extract_code_0011378f(undefined8 *ptr_input_1,undefined8 *ptr_input_2,long *ptr_output_1,undefined8 *ptr_output_2,\n            undefined8 *ptr_output_3,undefined8 *ptr_output_4)\n\n{\n  undefined aux_var_1 [16];\n  char char_var;\n  undefined4 uint_var_1;\n  undefined8 uint_var_2;\n  undefined *ptr_var_1;\n  size_t size_var;\n  long long_var;\n  undefined8 *ptr_var_2;\n  undefined4 *ptr_var_3;\n  char *dest_var;\n  undefined8 *ptr_var_4;\n  long *ptr_var_5;\n  byte byte_var;\n  undefined8 *local_ptr_1;\n  long local_long_1;\n  undefined4 local_uint_1;\n  undefined4 stack_uint_1;\n  undefined4 stack_uint_2;\n  undefined4 stack_uint_3;\n  undefined local_arr_1 [16];\n  undefined8 local_uint_2;\n  undefined local_arr_2 [40];\n  undefined8 local_uint_3;\n  undefined8 local_uint_4;\n  undefined4 local_arr_3 [82];\n  undefined local_arr_4 [40];\n  undefined local_arr_5 [8];\n  undefined8 stack_uint_4;\n  undefined8 local_uint_5;\n  undefined4 local_uint_6;\n  undefined4 local_uint_7;\n  undefined4 stack_uint_5;\n  undefined4 stack_uint_6;\n  undefined4 stack_uint_7;\n  \n  byte_var = 0;\n  local_uint_1 = 0;\n  stack_uint_1 = 0;\n  stack_uint_2 = 500;\n  stack_uint_3 = 0;\n  local_ptr_1 = ptr_input_1;\n  local_long_1 = xmalloc(500);\n  local_uint_2 = 1;\n  local_arr_1 = ZEXT816(0);\n  char_var = bfd_hash_table_init(local_arr_2,create_hash_function_0010bb52,0x30);\n  if ((char_var == '\\0') || (char_var = bfd_hash_table_init(local_arr_4,create_hash_function_0010bb52,0x30), char_var == '\\0')) {\n    uint_var_1 = bfd_get_error();\n    uint_var_2 = bfd_errmsg(uint_var_1);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uint_var_2);\n  }\n  else {\n    local_uint_3 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_arr_5 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    ptr_var_3 = local_arr_3;\n    for (long_var = 0x52; long_var != 0; long_var = long_var + -1) {\n      *ptr_var_3 = 0;\n      ptr_var_3 = ptr_var_3 + (ulong)byte_var * -2 + 1;\n    }\n    local_uint_5 = 0;\n    local_uint_6 = 0;\n    local_uint_4 = 1;\n    local_uint_7 = 0;\n    stack_uint_5 = 0;\n    stack_uint_6 = 0xffffffff;\n    stack_uint_7 = 0xffffffff;\n    char_var = process_string_0010e2f0(&local_ptr_1,0,0,0,0);\n    aux_var_1 = _local_arr_5;\n    if (char_var != '\\0') {\n      local_arr_5._4_4_ = stack_uint_1;\n      local_arr_5._0_4_ = local_uint_1;\n      stack_uint_4 = aux_var_1._8_8_;\n      char_var = process_string_0010e2f0(&local_ptr_1,100,0,0,*ptr_input_1);\n      if (char_var != '\\0') {\n        *(int *)(ptr_input_2 + 6) = *(int *)(ptr_input_2 + 6) + 1;\n        ptr_input_2[10] = 0;\n        ptr_var_4 = (undefined8 *)*ptr_input_2;\n        *(undefined4 *)(ptr_input_2 + 7) = *(undefined4 *)((long)ptr_input_2 + 0x34);\n        for (; ptr_var_4 != (undefined8 *)0x0; ptr_var_4 = (undefined8 *)*ptr_var_4) {\n          ptr_input_2[8] = ptr_var_4[2];\n          *(undefined4 *)(ptr_input_2 + 9) = 0;\n          char_var = set_string_and_process_thunk_0010e439(&local_ptr_1,*(undefined8 *)(ptr_var_4[1] + 8));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          ptr_var_5 = (long *)ptr_var_4[1];\n          if (ptr_var_5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)ptr_var_5[2] != (undefined8 *)0x0) {\n                for (ptr_var_2 = *(undefined8 **)(undefined8 *)ptr_var_5[2]; ptr_var_2 != (undefined8 *)0x0;\n                    ptr_var_2 = (undefined8 *)*ptr_var_2) {\n                  char_var = process_function_001135a5(ptr_input_2,&local_ptr_1);\n                  if (char_var == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              ptr_var_5 = (long *)*ptr_var_5;\n              if (ptr_var_5 == (long *)0x0) break;\n              char_var = set_string_and_process_0010e439(&local_ptr_1,ptr_var_5[1]);\n              if (char_var == '\\0') {\n                return 0;\n              }\n            }\n          }\n          char_var = process_and_check_files_00112502(ptr_input_2,&local_ptr_1,0xffffffffffffffff);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(stack_uint_7,stack_uint_6) == -1) &&\n           (uint_var_1 = process_string_0010e2f0(&local_ptr_1,100,0,local_uint_5,0), (char)uint_var_1 != '\\0')) {\n          (**(code **)(ptr_input_1[1] + 0x50))(local_uint_2,local_long_1 + 8);\n          *ptr_output_1 = local_long_1;\n          *ptr_output_2 = CONCAT44(stack_uint_1,local_uint_1);\n          *ptr_output_4 = local_uint_2;\n          ptr_var_1 = (undefined *)xmalloc();\n          *ptr_var_1 = 0;\n          dest_var = ptr_var_1 + 1;\n          *ptr_output_3 = ptr_var_1;\n          for (long_var = local_arr_1._0_8_; long_var != 0; long_var = *(long *)(long_var + 0x18)) {\n            strcpy(dest_var,*(char **)(long_var + 8));\n            size_var = strlen(dest_var);\n            dest_var = dest_var + size_var + 1;\n          }\n          return uint_var_1;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "strcpy",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010bb52",
                "FUN_001135a5",
                "xmalloc",
                "thunk_FUN_0010e439",
                "FUN_00112502"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "improve_and_extract_code_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,create_hash_function_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,create_hash_function_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = set_string_and_process_thunk_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_string_and_process_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_and_check_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errorLocation",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errorLocation;\n  undefined8 errorMessage;\n  \n  errorLocation = __errno_location();\n  if (*errorLocation == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errorLocation);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "inputData",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a0a0(long inputData)\n\n{\n  processData_0010a0a0Helper(inputData,0x26,4,inputData + 0x198,inputData + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "flag",
                "local_d8": "buffer_size",
                "local_d4": "param_15",
                "local_d0": "stack_pointer",
                "local_c8": "buffer",
                "local_b8": "local_buffer",
                "local_b0": "param_16",
                "local_a8": "param_17",
                "local_a0": "param_18",
                "local_98": "param_19",
                "local_90": "param_20",
                "local_88": "local_param_1",
                "local_78": "local_param_2",
                "local_68": "local_param_3",
                "local_58": "local_param_4",
                "local_48": "local_param_5",
                "local_38": "local_param_6",
                "local_28": "local_param_7",
                "local_18": "local_param_8"
            },
            "code": "\nvoid print_error_message_00119ed0(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char flag;\n  undefined4 buffer_size;\n  undefined4 param_15;\n  undefined *stack_pointer;\n  undefined *buffer;\n  undefined local_buffer [8];\n  undefined8 param_16;\n  undefined8 param_17;\n  undefined8 param_18;\n  undefined8 param_19;\n  undefined8 param_20;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 local_param_5;\n  undefined4 local_param_6;\n  undefined4 local_param_7;\n  undefined4 local_param_8;\n  \n  if (flag != '\\0') {\n    local_param_1 = error_code;\n    local_param_2 = param_2;\n    local_param_3 = param_3;\n    local_param_4 = param_4;\n    local_param_5 = param_5;\n    local_param_6 = param_6;\n    local_param_7 = param_7;\n    local_param_8 = param_8;\n  }\n  stack_pointer = &stack0x00000008;\n  buffer_size = 8;\n  buffer = local_buffer;\n  param_15 = 0x30;\n  param_16 = error_code0;\n  param_17 = error_code1;\n  param_18 = error_code2;\n  param_19 = error_code3;\n  param_20 = error_code4;\n  print_error_message_00119ed0_00119e70(error_message,&buffer_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00108375",
                "FUN_00104ad6",
                "FUN_00108200",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_0011378f",
                "FUN_0010ba08",
                "FUN_001152b6",
                "FUN_0010b800",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_debug_function_00112c1f",
                "param_1": "info",
                "param_2": "output",
                "param_3": "typeList",
                "param_4": "currentObject",
                "plVar1": "ptr1",
                "lVar2": "var1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "cVar5": "flag",
                "piVar6": "ptr4",
                "uVar7": "result",
                "uVar8": "param1",
                "iVar9": "index",
                "uVar10": "param3",
                "uVar11": "param2",
                "uVar12": "param5",
                "uVar13": "param4",
                "bVar14": "flag2",
                "local_3c": "localVar"
            },
            "code": "\n\n\nundefined8 processDebugFunction_00112c1f(ulong info,undefined8 output,int *typeList,long currentObject)\n\n{\n  long *ptr1;\n  long var1;\n  undefined8 *ptr2;\n  undefined8 *ptr3;\n  char flag;\n  int *ptr4;\n  undefined8 result;\n  undefined8 param1;\n  int index;\n  undefined4 param3;\n  undefined8 param2;\n  ulong param5;\n  uint param4;\n  bool flag2;\n  uint localVar;\n  \n  param5 = info;\nLAB_00112c39:\n  if (typeList != (int *)0x0) {\n    index = *typeList;\n    if (index - 0x16U < 2) {\n      do {\n        ptr1 = *(long **)(typeList + 4);\n        param4 = *(uint *)(info + 0x30);\n        param5 = (ulong)param4;\n        var1 = *ptr1;\n        if (*(uint *)(var1 + 0x10) == param4) {\n          if (index == 0x16) {\n            result = initialize_object_0010bba1(output,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptr4 = (int *)find_real_type_00112b6e(typeList,0);\n          if (ptr4 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptr4 - 7U < 4) && (*(long *)(ptr4 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptr4 + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n               (flag = set_debug_class_id_0010c7a0(info,*(undefined8 *)(**(long **)(typeList + 4) + 8),ptr4),\n               flag == '\\0')) {\n              return 0;\n            }\n            param4 = *(uint *)(*(long *)(ptr4 + 4) + 0xc);\n          }\n          else {\n            param4 = 0;\n          }\n          index = *ptr4;\n          result = *(undefined8 *)(**(long **)(typeList + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (index == 0x17) {\n          if (var1 != currentObject) goto LAB_00112c94;\n          *(uint *)(currentObject + 0x10) = param4;\n          currentObject = *ptr1;\n          typeList = (int *)ptr1[1];\n          goto LAB_00112c39;\n        }\n        if (currentObject != 0) {\n          *(uint *)(currentObject + 0x10) = param4;\n        }\n        typeList = (int *)ptr1[1];\n        if (typeList == (int *)0x0) goto LAB_00112dd6;\n        index = *typeList;\n        currentObject = 0;\n      } while (index - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (currentObject == 0) goto LAB_00112d74;\n      *(undefined4 *)(currentObject + 0x10) = *(undefined4 *)(info + 0x30);\n      if (*(int *)(currentObject + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(currentObject + 8);\n    }\n    switch(index) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = initialize_or_increment_00109dfe(output);\n      return result;\n    case 3:\n      result = initialize_object_with_params_0010b800(output,typeList[1],*(undefined *)(typeList + 4));\n      return result;\n    case 4:\n      result = initialize_object_with_params_0010b948(output,typeList[1]);\n      return result;\n    case 5:\n      result = update_and_initialize_object_00109e76(output,typeList[1]);\n      return result;\n    case 6:\n      result = initialize_object_00109d3e(output,typeList[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(typeList + 4) != 0) {\n        if ((*(uint *)(*(long *)(typeList + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (flag = set_debug_class_id_0010c7a0(info,result,typeList), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(typeList + 4);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          param4 = *(uint *)(var1 + 0xc);\n          if (param4 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          index = *typeList;\nLAB_00112ed2:\n          result = initialize_object_from_resized_array_00109d5c(output,result,param4,index);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n      }\n      param3 = 0;\n      if (*(long *)(typeList + 4) != 0) {\n        param3 = *(undefined4 *)(*(long *)(typeList + 4) + 0xc);\n      }\n      flag = update_object_0010a69a(output,result,param3,*typeList == 7,typeList[1]);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(typeList + 4) != (long *)0x0) && (param5 = 0, **(long **)(typeList + 4) != 0)) {\n        while( true ) {\n          ptr3 = *(undefined8 **)(**(long **)(typeList + 4) + param5 * 8);\n          if (ptr3 == (undefined8 *)0x0) break;\n          flag = processDebugFunction_00112c1f(info,output,ptr3[1],0);\n          if (flag == '\\0') {\n            return 0;\n          }\n          flag = generate_warning_message_0010ba08(output,*ptr3,*(undefined4 *)(ptr3 + 3),\n                               *(undefined4 *)((long)ptr3 + 0x1c),*(undefined4 *)(ptr3 + 2));\n          if (flag == '\\0') {\n            return 0;\n          }\n          param5 = (ulong)((int)param5 + 1);\n        }\n      }\n      result = process_object_0010a77a(output);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(typeList + 4) == 0) {\n        param4 = 0;\n        ptr4 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(typeList + 4) + 0xc) <= *(uint *)(info + 0x38)) &&\n           (param5 = info, flag = set_debug_class_id_0010c7a0(info,result,typeList), flag == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(typeList + 4);\n        param4 = *(uint *)(var1 + 0xc);\n        if (*(int *)(info + 0x30) == *(int *)(var1 + 8)) {\n          if (param4 <= *(uint *)(info + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          index = *typeList;\n          goto LAB_00112ed2;\n        }\n        ptr4 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(info + 0x30);\n        if (((ptr4 != (int *)0x0) && (typeList != ptr4)) &&\n           (param5 = info, flag = processDebugFunction_00112c1f(info,output,ptr4,0), flag == '\\0')) {\n          return 0;\n        }\n      }\n      flag = update_and_format_string_0010a83e(output,result,param4,*typeList == 9,typeList[1],ptr4 != (int *)0x0,\n                           typeList == ptr4,param5);\n      if (flag == '\\0') {\n        return 0;\n      }\n      if (*(long **)(typeList + 4) != (long *)0x0) {\n        param4 = 0;\n        if (**(long **)(typeList + 4) != 0) {\n          while (ptr3 = *(undefined8 **)(**(long **)(typeList + 4) + (ulong)param4 * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = processDebugFunction_00112c1f(info,output,ptr3[1],0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptr3 + 0x14) == '\\0') {\n              flag = generate_warning_message_0010ba08(output,*ptr3,*(undefined4 *)(ptr3 + 3));\n            }\n            else {\n              flag = generate_url_0010a94e(output,*ptr3,ptr3[3]);\n            }\n            if (flag == '\\0') {\n              return 0;\n            }\n            param4 = param4 + 1;\n          }\n        }\n        param4 = 0;\n        if (*(long *)(*(long *)(typeList + 4) + 0x10) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeList + 4) + 0x10) + (ulong)param4 * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = processDebugFunction_00112c1f(info,output,*ptr3,0);\n            if (flag == '\\0') {\n              return 0;\n            }\n            flag = process_data_0010aa53(output,*(undefined4 *)(ptr3 + 1),\n                                 *(undefined *)((long)ptr3 + 0xc));\n            if (flag == '\\0') {\n              return 0;\n            }\n            param4 = param4 + 1;\n          }\n        }\n        localVar = 0;\n        if (*(long *)(*(long *)(typeList + 4) + 0x18) != 0) {\n          while (ptr3 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeList + 4) + 0x18) + (ulong)localVar * 8),\n                ptr3 != (undefined8 *)0x0) {\n            flag = update_string_0010ab4d(output,*ptr3);\n            if (flag == '\\0') {\n              return 0;\n            }\n            param4 = 0;\n            while (ptr2 = *(undefined8 **)(ptr3[1] + (ulong)param4 * 8),\n                  ptr2 != (undefined8 *)0x0) {\n              if ((ptr2[4] != 0) &&\n                 (flag = processDebugFunction_00112c1f(info,output,ptr2[4],0), flag == '\\0')) {\n                return 0;\n              }\n              flag = processDebugFunction_00112c1f(info,output,ptr2[1],0);\n              if (flag == '\\0') {\n                return 0;\n              }\n              if (ptr2[3] == -1) {\n                flag = initialize_config_0010adf2(output,*ptr2,*(undefined4 *)(ptr2 + 2),\n                                     *(undefined *)((long)ptr2 + 0x14),\n                                     *(undefined *)((long)ptr2 + 0x15));\n              }\n              else {\n                flag = initialize_configuration_0010add5(output);\n              }\n              if (flag == '\\0') {\n                return 0;\n              }\n              param4 = param4 + 1;\n            }\n            flag = check_and_append_semicolon_00109bbb(output);\n            if (flag == '\\0') {\n              return 0;\n            }\n            localVar = localVar + 1;\n          }\n        }\n      }\n      result = concatenate_strings_0010ae0e(output);\n      return result;\n    case 0xb:\n      ptr3 = *(undefined8 **)(typeList + 4);\n      if (ptr3 == (undefined8 *)0x0) {\n        param1 = 0;\n        param2 = 0;\n      }\n      else {\n        param1 = ptr3[1];\n        param2 = *ptr3;\n      }\n      result = initialize_0010e453(output,result,param2,param1);\n      return result;\n    case 0xc:\n      flag = processDebugFunction_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a083(output);\n      return result;\n    case 0xd:\n      flag = processDebugFunction_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      param5 = 0;\n      if (*(long *)(*(long *)(typeList + 4) + 8) == 0) {\n        param5 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(typeList + 4) + 8) + param5 * 8), var1 != 0) {\n          param5 = param5 + 1;\n          flag = processDebugFunction_00112c1f(info,output,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        param5 = param5 & 0xffffffff;\n      }\n      result = process_and_extract_0010e5db(output,param5,*(undefined *)(*(long *)(typeList + 4) + 0x10));\n      return result;\n    case 0xe:\n      flag = processDebugFunction_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0a0(output);\n      return result;\n    case 0xf:\n      flag = processDebugFunction_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = execute_command_0010a0e9(output,*(undefined8 *)(*(long *)(typeList + 4) + 8),\n                           *(undefined8 *)(*(long *)(typeList + 4) + 0x10));\n      return result;\n    case 0x10:\n      flag = processDebugFunction_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = processDebugFunction_00112c1f(info,output,*(undefined8 *)(*(long *)(typeList + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(typeList + 4);\n      result = extract_and_initialize_0010a181(output,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      flag = processDebugFunction_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = generate_formatted_string_0010a2b9(output,*(undefined *)(*(long *)(typeList + 4) + 8));\n      return result;\n    case 0x12:\n      flag = processDebugFunction_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      flag = processDebugFunction_00112c1f(info,output,*(undefined8 *)(*(long *)(typeList + 4) + 8),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = generate_object_info_0010a377(output);\n      return result;\n    case 0x13:\n      flag = processDebugFunction_00112c1f(info,output,**(undefined8 **)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      param5 = 0;\n      if (*(long *)(*(long *)(typeList + 4) + 0x10) == 0) {\n        param5 = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(typeList + 4) + 0x10) + param5 * 8), var1 != 0)\n        {\n          param5 = param5 + 1;\n          flag = processDebugFunction_00112c1f(info,output,var1,0);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(typeList + 4) + 8) != 0) &&\n         (flag = processDebugFunction_00112c1f(info,output,*(long *)(*(long *)(typeList + 4) + 8),0),\n         flag == '\\0')) {\n        return 0;\n      }\n      result = convert_and_format_data_0010a424(output,*(long *)(*(long *)(typeList + 4) + 8) != 0,param5 & 0xffffffff,\n                           *(undefined *)(*(long *)(typeList + 4) + 0x18));\n      return result;\n    case 0x14:\n      flag = processDebugFunction_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0bd(output);\n      return result;\n    case 0x15:\n      flag = processDebugFunction_00112c1f(info,output,*(undefined8 *)(typeList + 4),0);\n      if (flag == '\\0') {\n        return 0;\n      }\n      result = process_data_0010a0d3(output);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  flag2 = *(int **)**(undefined8 **)(typeList + 4) == typeList;\n  typeList = *(int **)**(undefined8 **)(typeList + 4);\n  if (flag2) {\nLAB_00112dd6:\n    result = initialize_or_print_object_00109d97(output);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "dcgettext",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010c7a0",
                "FUN_0010adf2",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_0010a083",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "__assert_fail",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00109d5c",
                "FUN_00109bbb",
                "FUN_0010a83e",
                "FUN_0010e453",
                "FUN_0010add5",
                "FUN_0010bba1",
                "FUN_0010ba08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_debug_function_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "shouldCopyData",
                "unaff_R15": "dataAddress",
                "lVar1": "errorMsg",
                "print_error_001126c0": "printErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMsg;\n  char shouldCopyData;\n  long dataAddress;\n  \n  errorMsg = dcgettext(0,\"failed to copy private data\",5);\n  if (shouldCopyData != '\\0') {\n    *(undefined4 *)(*(long *)(dataAddress + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    DAT_00127a40 = 1;\n    printErrorMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "warningMessage",
                "param_2": "errorMessage",
                "in_RAX": "tempValue",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 warningMessage,undefined8 errorMessage)\n\n{\n  undefined8 tempValue;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,errorMessage,warningMessage,tempValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_00109a32",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_architecture_00105828",
                "iVar1": "architecture",
                "uVar2": "mach_arch",
                "uVar3": "filename",
                "uVar4": "error_message"
            },
            "code": "\nundefined8 check_architecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 mach_arch;\n  undefined8 filename;\n  undefined8 error_message;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    filename = construct_filename_001125fa();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(error_message,filename);\n  }\n  else {\n    filename = bfd_get_mach();\n    mach_arch = bfd_get_arch();\n    filename = bfd_printable_arch_mach(mach_arch,filename);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(error_message,filename);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "file_path",
                "pcVar1": "temp_directory",
                "allocate_file_path_00114cf0": "allocate_file_path",
                "mkdtemp": "make_temp_directory"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *file_path;\n  char *temp_directory;\n  \n  file_path = (char *)allocate_file_path();\n  temp_directory = mkdtemp(file_path);\n  if (temp_directory == (char *)0x0) {\n    free(file_path);\n  }\n  return temp_directory;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "initialize_object_0010bba1",
                "param_1": "object_ptr",
                "param_2": "param",
                "lVar1": "hash_result",
                "uVar2": "initialized_object"
            },
            "code": "\nundefined8 initialize_object_0010bba1(long object_ptr,undefined8 param)\n\n{\n  long hash_result;\n  undefined8 initialized_object;\n  \n  hash_result = bfd_hash_lookup(object_ptr + 0x1b8,param,0,0);\n  if ((hash_result != 0) && (0 < *(long *)(hash_result + 0x20))) {\n    initialized_object = initialize_object_0010bba1_with_params_00109cf4(object_ptr,*(long *)(hash_result + 0x20),*(undefined4 *)(hash_result + 0x28));\n    return initialized_object;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_object_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_string_0010e6a8",
                "param_1": "inputPtr",
                "param_2": "inputStr",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "extractedStr",
                "sVar3": "inputStrLen",
                "sVar4": "extractedStrLen",
                "__s_00": "combinedStr",
                "lVar8": "counter",
                "uVar9": "result",
                "auVar10": "output"
            },
            "code": "\nundefined  [16] processString_0010e6a8(long inputPtr,char *inputStr,undefined8 param3,undefined8 param4)\n\n{\n  uint uVar1;\n  undefined4 uVar2;\n  char *extractedStr;\n  size_t inputStrLen;\n  size_t extractedStrLen;\n  char *combinedStr;\n  long lVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  long counter;\n  ulong result;\n  undefined output [16];\n  \n  counter = *(long *)(*(long *)(inputPtr + 0x60) + 0x10);\n  uVar2 = *(undefined4 *)(*(long *)(inputPtr + 0x60) + 0x18);\n  extractedStr = (char *)extract_and_free_00109b2f();\n  inputStrLen = strlen(inputStr);\n  extractedStrLen = strlen(extractedStr);\n  combinedStr = (char *)xmalloc(inputStrLen + 0x14 + extractedStrLen);\n  if (counter < 1) {\n    counter = *(long *)(inputPtr + 0x68);\n    *(long *)(inputPtr + 0x68) = counter + 1;\n    sprintf(combinedStr,\"%s:t%ld=%s\",inputStr,counter,extractedStr);\n  }\n  else {\n    sprintf(combinedStr,\"%s:t%s\",inputStr,extractedStr);\n  }\n  free(extractedStr);\n  uVar1 = process_string_0010e2f0(inputPtr,0x80,0,0,combinedStr);\n  result = (ulong)uVar1;\n  if ((char)uVar1 != '\\0') {\n    free(combinedStr);\n    lVar5 = bfd_hash_lookup(inputPtr + 0x1b8,inputStr,1,0);\n    if (lVar5 != 0) {\n      *(long *)(lVar5 + 0x20) = counter;\n      *(undefined4 *)(lVar5 + 0x28) = uVar2;\n      goto LAB_0010e7b3;\n    }\n    uVar2 = bfd_get_error();\n    uVar6 = bfd_errmsg(uVar2);\n    uVar7 = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(uVar7,uVar6);\n  }\n  result = 0;\nLAB_0010e7b3:\n  output._8_8_ = param4;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xmalloc",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "combine_and_process_strings_0010e7c2",
                "param_1": "data1",
                "param_2": "string1",
                "param_3": "data2",
                "param_4": "result",
                "__s": "extractedString",
                "sVar1": "string1Length",
                "sVar2": "extractedStringLength",
                "__s_00": "combinedString",
                "auVar3": "processResult"
            },
            "code": "\nundefined  [16] combineAndProcessStrings_0010e7c2(undefined8 data1,char *string1,undefined8 data2,undefined8 result)\n\n{\n  char *extractedString;\n  size_t string1Length;\n  size_t extractedStringLength;\n  char *combinedString;\n  undefined processResult [16];\n  \n  extractedString = (char *)extract_and_free_00109b2f();\n  string1Length = strlen(string1);\n  extractedStringLength = strlen(extractedString);\n  combinedString = (char *)xmalloc(string1Length + 3 + extractedStringLength);\n  sprintf(combinedString,\"%s:T%s\",string1,extractedString);\n  free(extractedString);\n  processResult._0_4_ = process_string_0010e2f0(data1,0x80,0,0,combinedString);\n  processResult._4_4_ = 0;\n  if ((char)processResult._0_4_ != '\\0') {\n    free(combinedString);\n  }\n  processResult._8_8_ = result;\n  return processResult;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "combine_and_process_strings_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_message_and_exit_00119dd0",
                "param_1": "errorCode",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "param_8": "param7",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "constant",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "temporaryBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "errorCodeCopy",
                "local_78": "param1Copy",
                "local_68": "param2Copy",
                "local_58": "param3Copy",
                "local_48": "param4Copy",
                "local_38": "param5Copy",
                "local_28": "param6Copy",
                "local_18": "param7Copy"
            },
            "code": "\nvoid printErrorMessageAndExit_00119dd0(undefined4 errorCode,undefined4 param1,undefined4 param2,undefined4 param3,\n                 undefined4 param4,undefined4 param5,undefined4 param6,undefined4 param7,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined temporaryBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCodeCopy;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  \n  if (flag != '\\0') {\n    errorCodeCopy = errorCode;\n    param1Copy = param1;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = temporaryBuffer;\n  constant = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_00119e70(errorMessage,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_001083de",
                "FUN_00115b70",
                "FUN_00108808",
                "FUN_0010543c",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00114dc7",
                "FUN_001053b5"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdErrorCode",
                "unaff_RBP": "unaffRegisters",
                "unaff_retaddr": "returnValue"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdErrorCode;\n  undefined8 *unaffRegisters;\n  undefined8 returnValue;\n  \n  if (errorCode == -1) {\n    bfdErrorCode = bfd_get_error();\n    if (bfdErrorCode == 5) {\n      return returnValue;\n    }\n  }\n  print_error_message_0011a110(*unaffRegisters);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_error",
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_records_00116852",
                "in_RCX": "recordArray",
                "unaff_RBX": "recordCount",
                "unaff_RBP": "tempRecord",
                "param_7": "param7",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "tempArray",
                "param_12": "outputBuffer",
                "param_13": "param13",
                "param_14": "param14",
                "sVar1": "recordSize",
                "pcVar2": "compareFunc",
                "iVar3": "compareResult",
                "uVar4": "counter",
                "__ptr": "temporaryBuffer",
                "uVar5": "minSize",
                "uVar6": "maxSize",
                "lVar7": "loopVar",
                "uVar8": "recordIndex",
                "unaff_R15": "maxRecordSize",
                "unaff_R13": "recordStart",
                "unaff_R14": "currentRecord",
                "bVar14": "loopFlag",
                "cVar10": "byteTemp",
                "puVar9": "ptrTemp",
                "puVar11": "ptrTemp2",
                "puVar12": "ptrTemp3",
                "in_R10": "loopCounter",
                "in_R11": "recordFlag"
            },
            "code": "\nulong processRecords_00116852(void)\n\n{\n  size_t recordSize;\n  code *compareFunc;\n  int compareResult;\n  uint counter;\n  undefined *temporaryBuffer;\n  size_t *recordArray;\n  ulong minSize;\n  ulong maxSize;\n  long loopVar;\n  ulong recordIndex;\n  size_t recordCount;\n  size_t *tempRecord;\n  undefined *ptrTemp;\n  char byteTemp;\n  undefined *ptrTemp2;\n  ulong loopCounter;\n  undefined *ptrTemp3;\n  size_t recordFlag;\n  size_t *recordStart;\n  size_t *currentRecord;\n  size_t maxRecordSize;\n  size_t *precordSize3;\n  byte loopFlag;\n  size_t param7;\n  size_t param9;\n  ulong param10;\n  size_t *tempArray;\n  undefined *outputBuffer;\n  long param13;\n  size_t param14;\n  \n  loopFlag = 0;\ncode_r0x00116852:\n  counter = (int)loopCounter + 1;\n  if (0x10 < (int)loopCounter) goto LAB_001167f5;\nLAB_00116863:\n  currentRecord = currentRecord + -9;\n  do {\n    if (recordStart <= currentRecord) {\n      recordSize = currentRecord[2];\n      if (recordSize == 0) goto LAB_00116863;\n      recordIndex = (ulong)counter;\n      if ((*currentRecord == *tempRecord) &&\n         (compareResult = memcmp((void *)currentRecord[3],(void *)tempRecord[3],*tempRecord), compareResult == 0)) {\n        maxSize = currentRecord[7];\n        minSize = currentRecord[8];\n        loopCounter = recordIndex & 0xffffffff;\n        if (maxRecordSize == maxSize) {\n          if (recordCount != minSize) goto LAB_001167a6;\n          tempRecord[2] = 0;\n        }\n        else {\n          if (maxRecordSize < maxSize) {\n            if (minSize < maxRecordSize) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < minSize) || (maxRecordSize <= (minSize + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (recordCount < maxRecordSize) {\n              if ((0xfffffffffffffff0 < recordCount) ||\n                 (maxSize <= (recordCount + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (recordCount == minSize) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (recordCount <= minSize) {\n              tempRecord[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (minSize < maxRecordSize) goto LAB_0010852c;\n          }\n          if ((recordFlag == 0x101) != (recordSize == 0x101)) goto code_r0x00116852;\n          if (minSize <= recordCount) {\n            minSize = recordCount;\n          }\n          if (maxSize < maxRecordSize) {\n            maxRecordSize = maxSize;\n          }\n          currentRecord[8] = minSize;\n          currentRecord[7] = maxRecordSize;\n          tempRecord[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentRecord = tempRecord;\n        tempRecord = currentRecord + 9;\n        if (recordArray <= tempRecord) {\n          qsort(tempArray,param14,0x48,compare_records_0011a250);\n          temporaryBuffer = (undefined *)xmalloc(param10 * 2);\n          param7 = 0;\n          ptrTemp3 = temporaryBuffer;\n          for (precordSize3 = tempArray; precordSize3 < recordArray; precordSize3 = precordSize3 + 9) {\n            if (precordSize3[2] != 0) {\n              ptrTemp2 = ptrTemp3 + 4;\n              ptrTemp = ptrTemp3 + 0xc;\n              compareFunc = *(code **)(*(long *)(param13 + 8) + 0x50);\n              if ((precordSize3[7] == param9) && (precordSize3[8] == param7)) {\n                (*compareFunc)(*precordSize3,ptrTemp3);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(0,ptrTemp2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(precordSize3[2],ptrTemp3 + 8);\n                maxSize = precordSize3[6];\n                recordIndex = *precordSize3;\n                ptrTemp3 = (undefined *)precordSize3[3];\n                ptrTemp2 = ptrTemp;\n                for (minSize = recordIndex; minSize != 0; minSize = minSize - 1) {\n                  *ptrTemp2 = *ptrTemp3;\n                  ptrTemp3 = ptrTemp3 + (ulong)loopFlag * -2 + 1;\n                  ptrTemp2 = ptrTemp2 + (ulong)loopFlag * -2 + 1;\n                }\n                if (recordIndex < maxSize) {\n                  for (loopVar = maxSize - recordIndex; loopVar != 0; loopVar = loopVar + -1) {\n                    *ptrTemp2 = 0;\n                    ptrTemp2 = ptrTemp2 + (ulong)loopFlag * -2 + 1;\n                  }\n                }\n                ptrTemp3 = ptrTemp + maxSize;\n              }\n              else {\n                (*compareFunc)();\n                if (*(int *)(*(long *)(param13 + 8) + 8) == 5) {\n                  byteTemp = (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  byteTemp = '\\b';\n                }\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(byteTemp,ptrTemp2);\n                (**(code **)(*(long *)(param13 + 8) + 0x50))(precordSize3[2],ptrTemp3 + 8);\n                recordIndex = *precordSize3;\n                ptrTemp3 = (undefined *)precordSize3[3];\n                ptrTemp2 = ptrTemp;\n                for (maxSize = recordIndex; maxSize != 0; maxSize = maxSize - 1) {\n                  *ptrTemp2 = *ptrTemp3;\n                  ptrTemp3 = ptrTemp3 + (ulong)loopFlag * -2 + 1;\n                  ptrTemp2 = ptrTemp2 + (ulong)loopFlag * -2 + 1;\n                }\n                maxSize = precordSize3[6];\n                if (recordIndex < maxSize) {\n                  for (loopVar = maxSize - recordIndex; loopVar != 0; loopVar = loopVar + -1) {\n                    *ptrTemp2 = 0;\n                    ptrTemp2 = ptrTemp2 + (ulong)loopFlag * -2 + 1;\n                  }\n                }\n                loopVar = *(long *)(param13 + 8);\n                ptrTemp = ptrTemp + maxSize;\n                ptrTemp3 = ptrTemp + 8;\n                if ((*(int *)(loopVar + 8) == 5) &&\n                   (*(char *)(*(long *)(param13 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopVar + 0x38))(precordSize3[7],ptrTemp);\n                  (**(code **)(*(long *)(param13 + 8) + 0x38))(precordSize3[8],ptrTemp3);\n                  ptrTemp3 = ptrTemp + 0x10;\n                }\n                else {\n                  (**(code **)(loopVar + 0x50))(precordSize3[7],ptrTemp);\n                  (**(code **)(*(long *)(param13 + 8) + 0x50))(precordSize3[8],ptrTemp + 4);\n                }\n                param9 = precordSize3[7];\n                param7 = precordSize3[8];\n              }\n            }\n          }\n          maxSize = (long)ptrTemp3 - (long)temporaryBuffer;\n          recordIndex = maxSize;\n          ptrTemp3 = temporaryBuffer;\n          if (maxSize < param10) {\n            for (; param10 = maxSize, recordIndex != 0; recordIndex = recordIndex - 1) {\n              *outputBuffer = *ptrTemp3;\n              ptrTemp3 = ptrTemp3 + (ulong)loopFlag * -2 + 1;\n              outputBuffer = outputBuffer + (ulong)loopFlag * -2 + 1;\n            }\n          }\n          free(temporaryBuffer);\n          free(tempArray);\n          return param10;\n        }\n        recordFlag = currentRecord[0xb];\n      } while (recordFlag == 0);\n      maxRecordSize = currentRecord[0x10];\n      recordCount = currentRecord[0x11];\n      counter = 0;\n      if (maxRecordSize != recordCount) break;\n      currentRecord[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "FUN_00116852",
                "qsort",
                "memcmp",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "allocate_memory_block_00113d3a",
                "param_1": "input_address",
                "lVar1": "memory_block_address"
            },
            "code": "\nlong allocate_memory_block_00113d3a(long input_address)\n\n{\n  long memory_block_address;\n  \n  if (input_address != 0) {\n    memory_block_address = *(long *)(input_address + 8);\n    if (memory_block_address == 0) {\n      memory_block_address = initialize_memory_block_00112904(0xc,0);\n      if (memory_block_address == 0) {\n        memory_block_address = 0;\n      }\n      else {\n        *(long *)(memory_block_address + 0x10) = input_address;\n        *(long *)(input_address + 8) = memory_block_address;\n      }\n    }\n    return memory_block_address;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010bba1",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "input",
                "process_data_00109ed3": "processDataInternal"
            },
            "code": "\nvoid processData_0010a0d3(long input)\n\n{\n  processData_0010a0d3Internal(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_binary_00115530",
                "param_1": "param_a",
                "param_2": "param_b",
                "param_3": "param_c",
                "lVar1": "loop_var1",
                "pcVar2": "ptr_var1",
                "ppcVar3": "ptr_ptr_var1",
                "cVar4": "result",
                "iVar5": "int_var1",
                "uVar6": "uint_var1",
                "sVar7": "size_var1",
                "sVar8": "size_var2",
                "lVar9": "loop_var2",
                "pcVar10": "ptr_var2",
                "pcVar11": "ptr_var3",
                "pcVar12": "ptr_var4",
                "uVar13": "uint_var2",
                "bVar14": "bool_var1",
                "local_50": "local_var1",
                "local_48": "local_var2",
                "local_40": "local_arr1"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid process_binary_00115530(long param_a,char **param_b,long param_c)\n\n{\n  long loop_var1;\n  char *ptr_var1;\n  char **ptr_ptr_var1;\n  char result;\n  int int_var1;\n  uint uint_var1;\n  size_t size_var1;\n  size_t size_var2;\n  long loop_var2;\n  char *ptr_var2;\n  char *ptr_var3;\n  char *ptr_var4;\n  uint uint_var2;\n  bool bool_var1;\n  long local_var1;\n  char *local_var2;\n  long local_arr1 [2];\n  \n  result = process_binary_00115530_001159d0(param_b);\n  if (result != '\\0') {\n    return;\n  }\n  ptr_var2 = *param_b;\n  uint_var2 = *(uint *)((long)param_b + 0x24);\n  local_var2 = ptr_var2;\n  ptr_ptr_var1 = DAT_001278f8;\n  if (*(int *)(*(long *)(param_a + 8) + 8) != *(int *)(*(long *)(param_c + 8) + 8)) {\n    uint_var2 = uint_var2 & *(uint *)(*(long *)(param_a + 8) + 0x18) &\n             *(uint *)(*(long *)(param_c + 8) + 0x18);\n  }\n  for (; ptr_ptr_var1 != (char **)0x0; ptr_ptr_var1 = (char **)ptr_ptr_var1[3]) {\n    int_var1 = strcmp(*ptr_ptr_var1,ptr_var2);\n    if (int_var1 == 0) {\n      if (*(uint *)(ptr_ptr_var1 + 2) != 0xffffffff) {\n        uint_var2 = *(uint *)(ptr_ptr_var1 + 2);\n      }\n      if (ptr_var2 != ptr_ptr_var1[1]) {\n        local_var2 = ptr_ptr_var1[1];\n        uint_var2 = remove_share_flag_if_not_coff_00115f30(uint_var2,param_c);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (ptr_var2 = DAT_00127918, (*(byte *)((long)param_b + 0x24) & 1) != 0)) ||\n     (ptr_var2 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    size_var1 = strlen(ptr_var2);\n    size_var2 = strlen(local_var2);\n    ptr_var4 = (char *)xmalloc(size_var1 + 1 + size_var2);\n    ptr_var2 = strcpy(ptr_var4,ptr_var2);\n    local_var2 = strcat(ptr_var2,local_var2);\n  }\n  loop_var2 = process_entries_00114190(*param_b,0,0x80);\n  bool_var1 = false;\n  if (loop_var2 == 0) {\n    if ((DAT_00127a48 == 4) && ((uint_var2 & 0x2000001) != 0)) {\n      int_var1 = *(int *)(*(long *)(param_a + 8) + 8);\n      if (int_var1 == 5) {\n        if (*(int *)(param_b[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_c + 8) + 8) == 5) {\n            bool_var1 = (uint_var2 & 0x2000000) == 0;\n            uint_var1 = ~((-(uint)((uint_var2 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param_b + 0x24) = *(uint *)((long)param_b + 0x24) & uint_var1;\n          }\n          else {\n            uint_var1 = 0xfdfffefd;\n          }\n          uint_var2 = uint_var2 & uint_var1;\n        }\n      }\n      else if ((int_var1 != 2) || (int_var1 = strcmp(*param_b,\".buildid\"), int_var1 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    uint_var2 = remove_share_flag_if_not_coff_00115f30(uint_var2 & 0x104 | *(uint *)(loop_var2 + 0x28),param_c,*param_b);\n  }\n  result = bfd_convert_section_setup(param_a,param_b,param_c,&local_var2,local_arr1);\n  if (result == '\\0') {\n    ptr_var2 = (char *)0x0;\n    local_var1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  ptr_var2 = (char *)bfd_make_section_anyway_with_flags(param_c,local_var2,uint_var2);\n  if (ptr_var2 == (char *)0x0) {\n    local_var1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      local_arr1[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(ptr_var2,local_arr1[0]);\n    if (result == '\\0') {\n      set_alignment_and_size_00108072();\n      return;\n    }\n  }\n  else {\n    local_arr1[0] = ((((long)DAT_00127a3c - 1U) + local_arr1[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    result = bfd_set_section_size(ptr_var2);\n    if (result == '\\0') {\n      set_alignment_and_size_00108072();\n      return;\n    }\n  }\n  local_var1 = 0;\n  ptr_var4 = param_b[6];\n  loop_var2 = process_entries_00114190(*param_b,0,0x18);\n  if (loop_var2 == 0) {\n    ptr_var2[0x28] = ptr_var2[0x28] | 1;\n    ptr_var3 = *param_b;\n    ptr_var4 = ptr_var4 + _DAT_001279b0;\n    *(char **)(ptr_var2 + 0x30) = ptr_var4;\n    *(char **)(ptr_var2 + 0x38) = ptr_var4;\n    ptr_var4 = param_b[7];\n    loop_var2 = process_entries_00114190(ptr_var3,0,0x60);\n    if (loop_var2 == 0) goto LAB_00115695;\nLAB_00115860:\n    ptr_var3 = *(char **)(loop_var2 + 0x20);\n    if ((*(byte *)(loop_var2 + 0x14) & 0x40) != 0) {\n      ptr_var3 = ptr_var3 + (long)ptr_var4;\n    }\n    *(char **)(ptr_var2 + 0x38) = ptr_var3;\n    loop_var2 = process_entries_00114190(*param_b,0,0x200);\n    if (loop_var2 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uint_var2 = *(uint *)((long)param_b + 0x7c);\n    if (uint_var2 < 0x3f) goto LAB_001156c4;\n    local_var1 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(ptr_var2 + 0xb4) = *(undefined4 *)((long)param_b + 0xb4);\n    ptr_var2[0x28] = ptr_var2[0x28] & 0xcfU | *(byte *)(param_b + 5) & 0x30;\n    param_b[0xc] = ptr_var2;\n    param_b[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_b + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(param_c + 8) + 0x158))(param_a,param_b,param_c,ptr_var2);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    ptr_var3 = *(char **)(loop_var2 + 0x18);\n    if ((*(byte *)(loop_var2 + 0x14) & 8) == 0) {\n      ptr_var3 = ptr_var3 + (long)ptr_var4;\n    }\n    ptr_var2[0x28] = ptr_var2[0x28] | 1;\n    ptr_var1 = *param_b;\n    *(char **)(ptr_var2 + 0x30) = ptr_var3;\n    *(char **)(ptr_var2 + 0x38) = ptr_var3;\n    ptr_var4 = param_b[7];\n    loop_var2 = process_entries_00114190(ptr_var1,0,0x60);\n    if (loop_var2 != 0) goto LAB_00115860;\nLAB_00115695:\n    ptr_var3 = *param_b;\n    *(char **)(ptr_var2 + 0x38) = ptr_var4 + _DAT_001279b0;\n    loop_var2 = process_entries_00114190(ptr_var3,0,0x200);\n    if (loop_var2 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uint_var2 = *(uint *)(loop_var2 + 0x2c);\n    if (0x3e < uint_var2) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(ptr_var2 + 0x7c) = uint_var2;\n    *(undefined4 *)(ptr_var2 + 0xb4) = *(undefined4 *)((long)param_b + 0xb4);\n    ptr_var2[0x28] = ptr_var2[0x28] & 0xcfU | *(byte *)(param_b + 5) & 0x30;\n    param_b[0xc] = ptr_var2;\n    param_b[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param_b + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    ptr_var4 = param_b[0x1a];\n    loop_var2 = retrieve_data_00115d00(ptr_var4,param_b[0x1c]);\n    if ((loop_var2 == 0) ||\n       (loop_var1 = *(long *)(param_a + 8), *(uint *)(loop_var2 + 0x18) = *(uint *)(loop_var2 + 0x18) | 0x20,\n       *(int *)(loop_var1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(ptr_var4 + 0xb0) = loop_var2;\n    result = (**(code **)(*(long *)(param_c + 8) + 0x158))(param_a,param_b,param_c,ptr_var2);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (bool_var1) {\n    *(undefined4 *)(*(long *)(ptr_var2 + 0xd0) + 4) = 8;\n  }\n  if (local_var1 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  print_error_001126c0(0,param_c,ptr_var2,local_var1);\n  return;\n}\n\n",
            "called": [
                "FUN_00108072",
                "FUN_00115f30",
                "FUN_00114190",
                "strlen",
                "strcat",
                "dcgettext",
                "strcpy",
                "strcmp",
                "FUN_001159d0",
                "xmalloc",
                "bfd_set_section_size",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_0010a0bd",
                "param_1": "data",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a0bd(long data)\n\n{\n  processData_0010a0bdHelper(data,0x6b,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_and_execute_operation_00113e5e",
                "param_1": "input",
                "param_2": "command",
                "param_3": "length",
                "cVar1": "comparison_result",
                "local_20": "command_copy"
            },
            "code": "\nundefined8 validate_and_execute_operation_00113e5e(undefined8 input,char **command,long length)\n\n{\n  char comparison_result;\n  char *command_copy [2];\n  \n  command_copy[0] = *command;\n  *command = (char *)(length + 2);\n  if ((((long)(char *)(length + 2) - (long)command_copy[0] < 5) ||\n      (comparison_result = compare_strings_00113fb0(command_copy[0],\"type\"), comparison_result == '\\0')) ||\n     ((command_copy[0][4] != '$' && (command_copy[0][4] != '.')))) {\n    if (*command_copy[0] != '_') {\n      return 1;\n    }\n    if (command_copy[0][1] != '_') {\n      return 1;\n    }\n    if (command_copy[0][2] != 'o') {\n      return 1;\n    }\n    if (command_copy[0][3] != 'p') {\n      return 1;\n    }\n    command_copy[0] = command_copy[0] + 4;\n  }\n  else {\n    command_copy[0] = command_copy[0] + 5;\n  }\n  comparison_result = process_binary_data_0010c95e(input,command_copy,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_and_execute_operation_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = compare_strings_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "update_config_info_0010abdd",
                "param_1": "configInfo",
                "param_2": "data",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "configPtr",
                "pcVar2": "configString",
                "bVar3": "byteValue",
                "pcVar4": "extractedData",
                "__s": "extraInfo",
                "sVar5": "configLen",
                "sVar6": "extractedDataLen",
                "sVar7": "dataLen",
                "sVar8": "extraInfoLen",
                "uVar9": "result",
                "cVar10": "charVar1",
                "cVar11": "charVar2",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nupdateConfigInfo_0010abdd(long configInfo,char *data,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long configPtr;\n  char *configString;\n  byte byteValue;\n  char *extractedData;\n  char *extraInfo;\n  size_t configLen;\n  size_t extractedDataLen;\n  size_t dataLen;\n  size_t extraInfoLen;\n  undefined8 result;\n  char charVar1;\n  char charVar2;\n  byte localByte;\n  \n  extraInfo = (char *)0x0;\n  localByte = *(byte *)(*(long *)(configInfo + 0x60) + 0x1c);\n  extractedData = (char *)extract_and_free_00109b2f();\n  if (flag4 != '\\0') {\n    byteValue = 1;\n    if (localByte == 0) {\n      byteValue = *(byte *)(*(long *)(configInfo + 0x60) + 0x1c);\n    }\n    localByte = byteValue & 1;\n    extraInfo = (char *)extract_and_free_00109b2f(configInfo);\n  }\n  configPtr = *(long *)(configInfo + 0x60);\n  if ((configPtr == 0) || (configString = *(char **)(configPtr + 0x30), configString == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVar2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVar1 = '?';\n    if (flag1 == '\\0') {\n      charVar1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    configLen = strlen(configString);\n    extractedDataLen = strlen(extractedData);\n    dataLen = strlen(data);\n    extraInfoLen = 0;\n    if (flag4 != '\\0') {\n      extraInfoLen = strlen(extraInfo);\n    }\n    result = xrealloc(configString,dataLen + configLen + 0x28 + extractedDataLen + extraInfoLen);\n    *(undefined8 *)(configPtr + 0x30) = result;\n    configString = *(char **)(*(long *)(configInfo + 0x60) + 0x30);\n    configLen = strlen(configString);\n    sprintf(configString + configLen,\"%s:%s;%c%c%c\",extractedData,data,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)charVar2,(ulong)(uint)(int)charVar1,configLen);\n    free(extractedData);\n    if (flag4 != '\\0') {\n      extractedData = *(char **)(*(long *)(configInfo + 0x60) + 0x30);\n      configLen = strlen(extractedData);\n      sprintf(extractedData + configLen,\"%ld;%s;\",value,extraInfo);\n      free(extraInfo);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(configInfo + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "update_config_info_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "params",
                "param_3": "outputFile",
                "uVar1": "param_2_0",
                "uVar2": "errorMessage"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *params,undefined8 outputFile)\n\n{\n  undefined8 param_2_0;\n  undefined8 errorMessage;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(params[1] + 8) != 2)) {\n    param_2_0 = *params;\n    flags = flags & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,param_2_0,outputFile);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "input",
                "puVar1": "functionPointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *input)\n\n{\n  undefined8 *functionPointer;\n  int *currentPointer;\n  \n  do {\n    if (*input != 1) {\n      if (1 < *input - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input + 4) + 8);\n    }\n    functionPointer = (undefined8 *)(input + 4);\n    currentPointer = **(int ***)(undefined8 *)*functionPointer;\n  } while ((input != currentPointer) && (input = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*functionPointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "validate_and_invert_result_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint validate_and_invert_result_001082b3(void)\n\n{\n  uint result;\n  \n  result = check_string_length_and_compare_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "validate_and_invert_result_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_binary_00114690",
                "param_1": "inputFilename",
                "param_2": "outputFilename",
                "param_3": "outputFileDescriptor",
                "param_4": "outputFileStat",
                "param_5": "binaryFormat",
                "param_6": "fileSize",
                "param_7": "conditionalFunction",
                "bVar1": "byteValue",
                "cVar2": "charValue1",
                "cVar3": "charValue2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerPointerChar1",
                "pvVar7": "pointerVoid1",
                "lVar8": "longVar1",
                "puVar9": "pointerUint64_1",
                "piVar10": "pointerInt1",
                "uVar11": "unsigned64Var1",
                "uVar12": "unsigned64Var2",
                "lVar13": "longVar2",
                "puVar14": "pointerUint64_2",
                "pcVar15": "pointerChar1",
                "ppcVar16": "pointerPointerChar2",
                "pcVar17": "pointerChar2",
                "pcVar18": "pointerChar3",
                "__ptr": "pointerUint64_3",
                "ppcVar19": "pointerPointerChar3",
                "pcVar20": "pointerCode1",
                "lVar21": "longVar3",
                "uVar22": "unsignedVar1",
                "pcVar23": "pointerChar4",
                "psVar24": "pointerStat1",
                "bVar25": "boolValue1",
                "bVar26": "byteValue2",
                "local_1a0": "localPointerUint641",
                "local_198": "localPointerLong1",
                "local_158": "localStat",
                "local_c8": "localPointerVoidArray3",
                "uStack_b0": "unsignedStackVar1",
                "lStack_98": "longStackVar1"
            },
            "code": "\n\n\nvoid processBinary_00114690(undefined8 inputFilename,undefined8 outputFilename,int outputFileDescriptor,undefined8 outputFileStat,\n                 undefined8 binaryFormat,long fileSize,undefined8 conditionalFunction)\n\n{\n  byte byteValue;\n  char charValue1;\n  char charValue2;\n  int intVar1;\n  int intVar2;\n  char **pointerPointerChar1;\n  void *pointerVoid1;\n  long longVar1;\n  undefined8 *pointerUint64_1;\n  int *pointerInt1;\n  undefined8 unsigned64Var1;\n  undefined8 unsigned64Var2;\n  long longVar2;\n  undefined8 *pointerUint64_2;\n  char *pointerChar1;\n  char **pointerPointerChar2;\n  char *pointerChar2;\n  char *pointerChar3;\n  undefined8 *pointerUint64_3;\n  char **pointerPointerChar3;\n  code *pointerCode1;\n  long longVar3;\n  uint unsignedVar1;\n  char *pointerChar4;\n  stat *pointerStat1;\n  bool boolValue1;\n  byte byteValue2;\n  undefined8 *localPointerUint641;\n  long *localPointerLong1;\n  stat localStat;\n  void *localPointerVoidArray3 [3];\n  uint unsignedStackVar1;\n  long longStackVar1;\n  \n  byteValue2 = 0;\n  longVar2 = check_file_stats_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      unsigned64Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(unsigned64Var2,inputFilename);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  pointerUint64_2 = (undefined8 *)bfd_openr(inputFilename,binaryFormat);\n  if ((pointerUint64_2 == (undefined8 *)0x0) || (intVar2 = bfd_stat(pointerUint64_2,outputFileStat), intVar2 != 0)) {\n    print_error_001126c0(inputFilename,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerUint64_2 + 0x44) = *(uint *)((long)pointerUint64_2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerUint64_2 + 0x44) = *(uint *)((long)pointerUint64_2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerUint64_2 + 0x44) = *(uint *)((long)pointerUint64_2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerUint64_2 + 0x44) = *(uint *)((long)pointerUint64_2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)pointerUint64_2 + 0x44) = *(uint *)((long)pointerUint64_2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)pointerUint64_2 + 0x44) = *(uint *)((long)pointerUint64_2 + 0x44) | 0x40000;\n  }\n  charValue1 = bfd_check_format(pointerUint64_2,2);\n  if (charValue1 != '\\0') {\n    if (fileSize == 0) {\n      charValue1 = '\\0';\n      fileSize = *(long *)pointerUint64_2[1];\n    }\n    if (outputFileDescriptor < 0) {\n      localPointerUint641 = (undefined8 *)bfd_openw(outputFilename,fileSize);\n    }\n    else {\n      localPointerUint641 = (undefined8 *)bfd_fdopenw(outputFilename,fileSize,outputFileDescriptor);\n    }\n    if (localPointerUint641 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        unsigned64Var2 = *pointerUint64_2;\n        unsigned64Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(unsigned64Var1,unsigned64Var2);\n        DAT_00127a30 = 0;\n      }\n      execute_conditional_function_00114d50(localPointerUint641,pointerUint64_2,DAT_001264b4);\n      localPointerLong1 = localPointerUint641 + 0x1f;\n      if ((*(byte *)((long)pointerUint64_2 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        unsigned64Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_001126c0(0,pointerUint64_2,0,unsigned64Var2);\n        return;\n      }\n      pointerChar1 = (char *)create_temp_directory_0011a0e0(*localPointerUint641);\n      if (pointerChar1 == (char *)0x0) {\n        pointerInt1 = __errno_location();\n        pointerChar1 = strerror(*pointerInt1);\n        unsigned64Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_message_and_exit_00119dd0(unsigned64Var2,pointerChar1);\n      }\n      if (DAT_00127a48 == 7) {\n        byteValue = *(byte *)((long)pointerUint64_2 + 0x49);\n        unsignedVar1 = 0;\n      }\n      else {\n        byteValue = *(byte *)((long)pointerUint64_2 + 0x49);\n        unsignedVar1 = byteValue >> 3 & 1;\n      }\n      boolValue1 = _DAT_001264b0 != 0;\n      *(byte *)((long)localPointerUint641 + 0x49) =\n           byteValue & 0x10 | (byte)(unsignedVar1 << 3) | *(byte *)((long)localPointerUint641 + 0x49) & 0xe7;\n      if (boolValue1) {\n        *(uint *)((long)localPointerUint641 + 0x44) = *(uint *)((long)localPointerUint641 + 0x44) | 0x2000;\n      }\n      pointerUint64_3 = (undefined8 *)0x0;\n      pointerPointerChar2 = (char **)bfd_openr_next_archived_file(pointerUint64_2,0);\n      charValue2 = bfd_set_format(localPointerUint641,*(byte *)(pointerUint64_2 + 9) & 7);\n      if (charValue2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_001126c0(0,localPointerUint641,0,0);\n        remove_and_free_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (pointerPointerChar2 != (char **)0x0))) {\n        pointerChar3 = *pointerPointerChar2;\n        pointerChar2 = pointerChar3;\n        if (*pointerChar3 == '/') {\nLAB_0010527d:\n          unsigned64Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(unsigned64Var2,pointerChar3);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointerChar2 != '\\0') {\n          pointerChar4 = pointerChar2;\n          if ((*pointerChar2 == '.') && (pointerChar4 = pointerChar2 + 1, pointerChar2[1] == '.')) {\n            pointerChar4 = pointerChar2 + 2;\n            if ((pointerChar2[2] == '\\0') || (pointerChar2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerChar4 != '\\0' && (*pointerChar4 != '/')); pointerChar4 = pointerChar4 + 1) {\n          }\n          pointerChar2 = pointerChar4;\n          if (*pointerChar4 == '/') {\n            extract_archive_001052a2();\n            return;\n          }\n        }\n        pointerChar3 = (char *)concat(pointerChar1,&DAT_0011b47d);\n        intVar2 = stat(pointerChar3,&localStat);\n        pointerUint64_1 = pointerUint64_3;\n        if (-1 < intVar2) {\n          longVar2 = create_temp_directory_0011a0e0(pointerChar3);\n          free(pointerChar3);\n          if (longVar2 == 0) {\n            pointerInt1 = __errno_location();\n            pointerChar3 = strerror(*pointerInt1);\n            unsigned64Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(unsigned64Var2,pointerChar3);\n            goto LAB_00104e93;\n          }\n          pointerUint64_1 = (undefined8 *)xmalloc(0x18);\n          pointerChar3 = *pointerPointerChar2;\n          *pointerUint64_1 = pointerUint64_3;\n          pointerUint64_1[2] = 0;\n          pointerUint64_1[1] = longVar2;\n          pointerChar3 = (char *)concat(longVar2,&DAT_0011b47d,pointerChar3);\n        }\n        intVar2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointerStat1 = &localStat;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&pointerStat1->st_dev = 0;\n            pointerStat1 = (stat *)((long)pointerStat1 + (ulong)byteValue2 * -8 + 4);\n          }\n          pointerPointerChar3 = (char **)pointerPointerChar2[0x1d];\n          if ((char **)pointerPointerChar2[0x1d] == (char **)0x0) {\n            pointerPointerChar3 = pointerPointerChar2;\n          }\n          intVar2 = (**(code **)(pointerPointerChar3[1] + 0x1e8))(pointerPointerChar2,&localStat);\n          if (intVar2 != 0) {\n            pointerChar2 = *pointerPointerChar2;\n            unsigned64Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(unsigned64Var2,pointerChar2);\n          }\n        }\n        pointerUint64_3 = (undefined8 *)xmalloc(0x18);\n        pointerUint64_3[1] = pointerChar3;\n        *pointerUint64_3 = pointerUint64_1;\n        pointerUint64_3[2] = 0;\n        charValue2 = bfd_check_format(pointerPointerChar2,1);\n        if (charValue2 == '\\0') {\n          unsigned64Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_001126c0(0,pointerPointerChar2,0,unsigned64Var2);\n          pointerPointerChar3 = (char **)bfd_openw(pointerChar3,fileSize);\n          if (pointerPointerChar3 == (char **)0x0) {\nLAB_00104e80:\n            print_error_001126c0(pointerChar3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerPointerChar1 = (char **)pointerPointerChar2[0x1d];\n          if ((char **)pointerPointerChar2[0x1d] == (char **)0x0) {\n            pointerPointerChar1 = pointerPointerChar2;\n          }\n          intVar1 = (**(code **)(pointerPointerChar1[1] + 0x1e8))(pointerPointerChar2);\n          longVar2 = longStackVar1;\n          if (intVar1 == 0) {\n            if (longStackVar1 < 0) {\n              construct_filename_001125fa(pointerPointerChar2);\n              unsigned64Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(unsigned64Var2);\n            }\n            else {\n              intVar1 = bfd_seek(pointerPointerChar2,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointerChar2 = *pointerPointerChar3;\n                  unsigned64Var2 = construct_filename_001125fa(pointerPointerChar2);\n                  pointerChar4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerChar4,unsigned64Var2,pointerChar2);\n                }\n                pointerVoid1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(pointerVoid1,longVar3,pointerPointerChar2);\n                  pointerPointerChar1 = pointerPointerChar2;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(pointerVoid1,longVar3,pointerPointerChar3), pointerPointerChar1 = pointerPointerChar3,\n                     longVar3 != longVar1)) {\n                    print_error_001126c0(0,pointerPointerChar1,0,0);\n                    free(pointerVoid1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointerPointerChar3,unsignedStackVar1 | 0x100);\n                free(pointerVoid1);\n                charValue2 = bfd_close_all_done(pointerPointerChar3);\n                if (charValue2 == '\\0') {\n                  print_error_001126c0(pointerChar3,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              unsigned64Var2 = construct_filename_001125fa(pointerPointerChar2);\n              print_error_message_0011a110(unsigned64Var2);\n            }\n          }\n          else {\n            print_error_001126c0(0,pointerPointerChar2,0,0);\n          }\nLAB_00104f00:\n          charValue2 = bfd_close_all_done(pointerPointerChar3);\n          if (charValue2 == '\\0') {\n            print_error_001126c0(pointerChar3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointerChar3);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charValue1 == '\\0') {\n            pointerPointerChar3 = (char **)bfd_openw(pointerChar3,*(undefined8 *)pointerPointerChar2[1]);\n          }\n          else {\n            pointerPointerChar3 = (char **)bfd_openw(pointerChar3,fileSize);\n          }\n          if (pointerPointerChar3 == (char **)0x0) goto LAB_00104e80;\n          charValue2 = FUNC_00114e50(pointerPointerChar2,pointerPointerChar3,conditionalFunction);\n          if (charValue2 == '\\0') {\n            intVar1 = bfd_get_arch(pointerPointerChar2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charValue2 = bfd_close_all_done(pointerPointerChar3);\n            if (charValue2 == '\\0') {\n              print_error_001126c0(pointerChar3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charValue2 = bfd_close(pointerPointerChar3);\n          if (charValue2 == '\\0') {\n            print_error_001126c0(pointerChar3,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n            set_file_modification_time_0011a350(pointerChar3,&localStat);\n          }\n          longVar2 = bfd_openr(pointerChar3,fileSize);\n          pointerUint64_3[2] = longVar2;\n          *localPointerLong1 = longVar2;\n          localPointerLong1 = (long *)(longVar2 + 0xf0);\n          pointerPointerChar3 = (char **)bfd_openr_next_archived_file(pointerUint64_2);\n          bfd_close(pointerPointerChar2);\n          pointerPointerChar2 = pointerPointerChar3;\n        }\n      }\n      *localPointerLong1 = 0;\n      pointerVoid1 = (void *)xstrdup(*localPointerUint641);\n      if (DAT_00127a40 == 0) {\n        pointerCode1 = bfd_close;\n      }\n      else {\n        pointerCode1 = bfd_close_all_done;\n      }\n      charValue1 = (*pointerCode1)(localPointerUint641);\n      if (charValue1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_001126c0(pointerVoid1,0,0,0);\n      }\n      free(pointerVoid1);\n      pointerVoid1 = (void *)xstrdup(*pointerUint64_2);\n      charValue1 = bfd_close(pointerUint64_2);\n      if (charValue1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_001126c0(pointerVoid1,0,0,0);\n      }\n      free(pointerVoid1);\nLAB_00114b4b:\n      while (pointerUint64_3 != (undefined8 *)0x0) {\n        if (pointerUint64_3[2] == 0) {\n          rmdir((char *)pointerUint64_3[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)pointerUint64_3[1]);\n        }\n        free((void *)pointerUint64_3[1]);\n        pointerUint64_2 = (undefined8 *)*pointerUint64_3;\n        free(pointerUint64_3);\n        pointerUint64_3 = pointerUint64_2;\n      }\n      rmdir(pointerChar1);\n      free(pointerChar1);\n      return;\n    }\nLAB_00105231:\n    close(outputFileDescriptor);\n    print_error_001126c0(outputFilename,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charValue1 = bfd_check_format_matches(pointerUint64_2,1,localPointerVoidArray3);\n  if (charValue1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charValue1 = bfd_check_format_matches(pointerUint64_2,3,&localStat);\n    if (charValue1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      print_error_001126c0(inputFilename,0,0,0);\n      if (intVar2 == 0xd) {\n        print_matching_formats_0011256b(localPointerVoidArray3[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(localStat.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(localPointerVoidArray3[0]);\n    }\n  }\n  if (fileSize == 0) {\n    fileSize = *(long *)pointerUint64_2[1];\n  }\n  if (outputFileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilename,fileSize);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilename,fileSize,outputFileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  execute_conditional_function_00114d50(longVar2,pointerUint64_2,DAT_001264b4);\n  charValue1 = FUNC_00114e50(pointerUint64_2,longVar2,conditionalFunction);\n  if (charValue1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charValue1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charValue1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charValue1 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_error_001126c0(outputFilename,0,0,0);\n    return;\n  }\n  charValue1 = bfd_close(pointerUint64_2);\n  if (charValue1 == '\\0') {\n    DAT_00127a40 = 1;\n    print_error_001126c0(inputFilename,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close",
                "dcgettext",
                "FUN_00113f50",
                "close",
                "strerror",
                "FUN_00104d25",
                "bfd_check_format",
                "bfd_close_all_done",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "free",
                "bfd_stat",
                "bfd_openr_next_archived_file",
                "FUN_00114d50",
                "bfd_check_format_matches",
                "FUN_00119dd0",
                "bfd_openw",
                "bfd_get_error",
                "__errno_location",
                "bfd_set_error",
                "bfd_fdopenw",
                "bfd_set_format",
                "bfd_openr",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_binary_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "initialize_object_with_params_0010b800",
                "param_1": "base_address",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptr_to_64bit",
                "uVar2": "result",
                "sVar3": "length",
                "lVar4": "value",
                "lVar5": "bit_mask",
                "local_8c": "string_buffer",
                "auStack_8a": "auxiliary_stack"
            },
            "code": "\nundefined8 initialize_object_with_params_0010b800(long base_address,int size,char flag)\n\n{\n  long *ptr_to_64bit;\n  undefined8 result;\n  size_t length;\n  long value;\n  long bit_mask;\n  undefined2 string_buffer;\n  undefined4 auxiliary_stack [24];\n  \n  if (size - 1U < 8) {\n    value = base_address + 0xb8;\n    if (flag != '\\0') {\n      value = base_address + 0x78;\n    }\n    ptr_to_64bit = (long *)(value + (ulong)(size - 1U) * 8);\n    value = *ptr_to_64bit;\n    if (value != 0) {\n      result = initialize_object_with_params_0010b800_00109cf4(base_address,value,size);\n      return result;\n    }\n    value = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = value + 1;\n    *ptr_to_64bit = value;\n    sprintf((char *)&string_buffer,\"%ld=r%ld;\",value,value);\n    if (flag == '\\0') {\n      bit_mask = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      length = strlen((char *)&string_buffer);\n      sprintf((char *)((long)&string_buffer + length),\"%ld;%ld;\",-bit_mask,bit_mask + -1);\n    }\n    else {\n      length = strlen((char *)&string_buffer);\n      *(undefined2 *)((long)&string_buffer + length) = 0x3b30;\n      *(undefined *)((long)&string_buffer + length + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&string_buffer + length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&string_buffer + length + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_object_00109b52(base_address,&string_buffer,value,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00109b52",
                "strlen",
                "dcgettext",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_object_with_params_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "dataArray",
                "param_5": "arraySize",
                "uVar1": "size",
                "uVar2": "newSize",
                "cVar3": "result",
                "pcVar4": "extractedString",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "var1",
                "__ptr": "extractedObject",
                "uVar7": "returnVal",
                "uVar8": "flagVal",
                "lVar9": "loopVar",
                "uVar10": "currentSize",
                "puVar11": "ptrToData",
                "bVar12": "byteVar"
            },
            "code": "\nundefined8 processData_00109ed3(long dataPointer,uint value,undefined4 flag,long *dataArray,ulong *arraySize)\n\n{\n  ulong size;\n  ulong newSize;\n  char result;\n  char *extractedString;\n  size_t stringLength;\n  char *formattedString;\n  long var1;\n  void *extractedObject;\n  undefined8 returnVal;\n  undefined flagVal;\n  long loopVar;\n  ulong currentSize;\n  undefined *ptrToData;\n  byte byteVar;\n  \n  byteVar = 0;\n  var1 = *(long *)(dataPointer + 0x60);\n  if (var1 != 0) {\n    size = *(ulong *)(var1 + 0x10);\n    if (((long)size < 1) || (dataArray == (long *)0x0)) {\n      flagVal = *(undefined *)(var1 + 0x1c);\n      extractedString = (char *)extract_and_free_00109b2f(dataPointer);\n      stringLength = strlen(extractedString);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)value,extractedString);\n      free(extractedString);\n      var1 = 0;\n    }\n    else {\n      currentSize = *arraySize;\n      if (currentSize <= size) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= size; currentSize = currentSize * 2) {\n        }\n        var1 = xrealloc(*dataArray,currentSize * 8);\n        newSize = *arraySize;\n        *dataArray = var1;\n        ptrToData = (undefined *)(var1 + newSize * 8);\n        for (loopVar = (currentSize - newSize) * 8; loopVar != 0; loopVar = loopVar + -1) {\n          *ptrToData = 0;\n          ptrToData = ptrToData + (ulong)byteVar * -2 + 1;\n        }\n        *arraySize = currentSize;\n      }\n      var1 = *(long *)(*dataArray + size * 8);\n      if ((var1 != 0) && (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0')) {\n        extractedObject = (void *)extract_and_free_00109b2f(dataPointer);\n        free(extractedObject);\n        returnVal = initialize_object_with_params_00109cf4(dataPointer,var1,flag);\n        return returnVal;\n      }\n      var1 = *(long *)(dataPointer + 0x68);\n      *(long *)(dataPointer + 0x68) = var1 + 1;\n      extractedString = (char *)extract_and_free_00109b2f(dataPointer);\n      stringLength = strlen(extractedString);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",var1,(ulong)value,extractedString);\n      free(extractedString);\n      flagVal = 1;\n      *(long *)(*dataArray + size * 8) = var1;\n    }\n    result = initialize_object_00109b52(dataPointer,formattedString,var1,flagVal,flag);\n    if (result != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "xrealloc",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_0010bf86",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_00114d60",
                "FUN_0010a77a",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011378f",
                "FUN_00116852",
                "FUN_00112904",
                "FUN_0010c139",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00113da9",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_001199d0",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_00113b98",
                "FUN_00114460",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_00107880",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_00114cf0",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010a69a",
                "FUN_00112925",
                "FUN_00113d6e",
                "FUN_00114c80",
                "FUN_0010c7a0",
                "FUN_0010e9a0",
                "FUN_0010da0b",
                "FUN_0010e918",
                "FUN_0010c6be",
                "FUN_00113c43",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bd62",
                "FUN_00114190",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debug_info",
                "param_2": "filename",
                "puVar1": "units",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "lVar4": "loop_counter",
                "puVar5": "ptr3",
                "pcVar6": "filename_ptr",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] initialize_debug_info_0010bbd3(long *debug_info,char *filename,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *units;\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  long loop_counter;\n  undefined4 *ptr3;\n  char *filename_ptr;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  filename_ptr = \"\";\n  if (filename != (char *)0x0) {\n    filename_ptr = filename;\n  }\n  ptr1 = (undefined4 *)xmalloc(0x18);\n  ptr3 = ptr1;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr3 = 0;\n    ptr3 = ptr3 + (ulong)flag * -2 + 1;\n  }\n  *(char **)(ptr1 + 2) = filename_ptr;\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  debug_info[2] = (long)ptr1;\n  ptr3 = ptr2;\n  for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *ptr3 = 0;\n    ptr3 = ptr3 + (ulong)flag * -2 + 1;\n  }\n  units = (undefined8 *)debug_info[1];\n  *(undefined4 **)(ptr2 + 2) = ptr1;\n  if (units == (undefined8 *)0x0) {\n    if (*debug_info != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debug_info = (long)ptr2;\n  }\n  else {\n    *units = ptr2;\n  }\n  debug_info[1] = (long)ptr2;\n  debug_info[5] = 0;\n  *(undefined (*) [16])(debug_info + 3) = ZEXT816(0);\n  result._8_8_ = param_4;\n  result._0_8_ = 1;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = construct_filename_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = construct_filename_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = construct_filename_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = construct_filename_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = construct_filename_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = construct_filename_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = construct_filename_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = compare_strings_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = compare_strings_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_binary_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_entries_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_entries_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_entries_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = reorganize_and_improve_debugging_data_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_buffer_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_and_free_memory_block_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_debug_records_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_info_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_buffer_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_and_free_memory_block_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_debug_records_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_info_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_debug_tag_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_block_debugging_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = end_block_debugging_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = record_debug_function_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_line_debug_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = initialize_section_data_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,pattern_matching_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,pattern_matching_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,pattern_matching_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,pattern_matching_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_binary_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = check_matching_pattern_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = check_matching_pattern_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = check_matching_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = check_matching_pattern_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = initialize_section_data_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = improve_and_extract_code_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,process_binary_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_binary_00115dc0,param_2);\n    bfd_map_over_sections(param_1,process_and_reverse_section_contents_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = compare_strings_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = compare_strings_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107976",
                "dcgettext",
                "bfd_set_format",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "retrieve_data_00115d00",
                "param_1": "dataAddress",
                "param_2": "bufferAddress",
                "uVar1": "flag",
                "lVar2": "result"
            },
            "code": "\nlong retrieveData_00115d00(long dataAddress,long bufferAddress)\n\n{\n  uint flag;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(bufferAddress + 8) + 8) == 5) {\n      if (*(int *)(dataAddress + 0x28) == *(int *)(*(long *)(bufferAddress + 0x110) + 0xd40)) {\n        flag = *(uint *)(dataAddress + 0x2c);\n        if (flag == 0) {\n          result = 0;\n        }\n        else if ((ulong)flag <\n                 *(ulong *)(*(long *)(bufferAddress + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(bufferAddress + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(flag - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "retrieve_data_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_memory_block_00113c43",
                "param_1": "memory_block_size",
                "param_2": "initial_value",
                "lVar1": "memory_ptr",
                "plVar2": "ptr_to_memory_block",
                "auVar3": "result",
                "initialize_memory_block_00112904": "create_memory_block",
                "xmalloc": "allocate_memory"
            },
            "code": "\nundefined  [16]\ninitialize_memory_block_00113c43(long memory_block_size,long initial_value,long param_3,long param_4,undefined param_5,\n            undefined8 param_6)\n\n{\n  long memory_ptr;\n  long *ptr_to_memory_block;\n  undefined result [16];\n  \n  if ((memory_block_size != 0) && (initial_value != 0)) {\n    memory_ptr = create_memory_block(0x10,0);\n    if (memory_ptr != 0) {\n      ptr_to_memory_block = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)ptr_to_memory_block + 0x21) = 0;\n      *ptr_to_memory_block = memory_block_size;\n      *(undefined4 *)((long)ptr_to_memory_block + 0x24) = 0;\n      ptr_to_memory_block[1] = initial_value;\n      ptr_to_memory_block[2] = param_3;\n      ptr_to_memory_block[3] = param_4;\n      *(undefined *)(ptr_to_memory_block + 4) = param_5;\n      *(long **)(memory_ptr + 0x10) = ptr_to_memory_block;\n      goto LAB_00113caa;\n    }\n  }\n  memory_ptr = 0;\nLAB_00113caa:\n  result._8_8_ = param_6;\n  result._0_8_ = memory_ptr;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_debug_tag_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "tagResult",
                "plVar3": "memoryPointer"
            },
            "code": "\nbool processDebugTag_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long tagResult;\n  long *memoryPointer;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        result = debug_record_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,4,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = debug_record_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,5,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_debug_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,1,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tagResult = process_debug_tag_0010c6be(param5,*(undefined8 *)(param2 + 8));\n        if (tagResult == 0) {\n          return false;\n        }\n        memoryPointer = (long *)allocate_and_initialize_memory_0010da0b(param1,param3);\n        *memoryPointer = tagResult;\n        break;\n      case 0xd:\n        tagResult = initialize_debug_name_type_0010c218(param5,*(undefined8 *)(param2 + 8));\n        return tagResult != 0;\n      case 0x11:\n        result = record_parameter_debug_0010bd62(param5,*(undefined8 *)(param2 + 8),param6,2,\n                             *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable_0010c05d(param5,*(undefined8 *)(param2 + 8),param6,1,\n                         *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_tag_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "initialize_data_type_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "dataType",
                "pcVar2": "dataTypeString",
                "uVar3": "typeInitialization",
                "lVar4": "dataTypeAddress",
                "plVar5": "typeFile",
                "uVar6": "dataTypeIndex"
            },
            "code": "\n\n\nlong initializeDataType_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint dataType;\n  char *dataTypeString;\n  undefined8 typeInitialization;\n  long dataTypeAddress;\n  long *typeFile;\n  uint dataTypeIndex;\n  \n  if ((*param3 == 0) && (dataType = param3[1], (int)dataType < 0)) {\n    dataTypeIndex = ~dataType;\n    if (dataTypeIndex < 0x22) {\n      dataTypeAddress = *(long *)(param2 + 0x90 + (ulong)dataTypeIndex * 8);\n      if (dataTypeAddress == 0) {\n        switch(dataTypeIndex) {\n        case 1:\n          typeInitialization = initialize_block_with_parameter_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          typeInitialization = initialize_block_with_parameter_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          typeInitialization = initialize_block_with_parameter_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          typeInitialization = initialize_block_with_parameter_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          typeInitialization = initialize_block_with_parameter_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          typeInitialization = initialize_memory_block_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          typeInitialization = initialize_memory_block_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          typeInitialization = initialize_memory_block_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          typeInitialization = initialize_memory_block_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          typeInitialization = initialize_memory_block_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          typeInitialization = initialize_memory_block_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          typeInitialization = initialize_memory_block_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          typeInitialization = 0;\n          break;\n        case 0x13:\n          typeInitialization = initialize_block_with_parameter_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          typeInitialization = initialize_memory_block_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          typeInitialization = initialize_memory_block_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          typeInitialization = initialize_memory_block_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          typeInitialization = initialize_memory_block_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          typeInitialization = initialize_memory_block_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          typeInitialization = initialize_memory_block_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          typeInitialization = initialize_block_with_parameter_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          typeInitialization = initialize_block_with_parameter_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          typeInitialization = initialize_block_with_parameter_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          typeInitialization = initialize_block_with_parameter_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          typeInitialization = initialize_block_with_parameter_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          typeInitialization = initialize_memory_block_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          typeInitialization = initialize_block_with_parameter_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          typeInitialization = initialize_block_with_parameter_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        dataTypeAddress = initialize_debug_name_type_0010c218(param1,dataTypeString,typeInitialization);\n        *(long *)(param2 + 0x90 + (ulong)dataTypeIndex * 8) = dataTypeAddress;\n        return dataTypeAddress;\n      }\n      return dataTypeAddress;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)dataType);\n  }\n  else {\n    typeFile = (long *)get_type_file_00109022(param2);\n    if (typeFile != (long *)0x0) {\n      if (*typeFile == 0) {\n        dataTypeAddress = create_memory_block_00113e23(typeFile,0);\n        return dataTypeAddress;\n      }\n      return *typeFile;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00109022"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "extract_symbols_0010e07c",
                "param_2": "symbol_table",
                "param_4": "format",
                "param_5": "header",
                "lVar1": "header_size",
                "lVar2": "symbol_address",
                "lVar3": "current_symbol_count",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "symbol_list",
                "uVar6": "symbol_value",
                "uVar7": "error_message",
                "puVar8": "symbol_entry",
                "pcVar9": "error_format",
                "puVar10": "aux_entry",
                "uVar11": "aux_value",
                "lVar12": "symbol_count",
                "iVar13": "symbol_offset",
                "iVar14": "symbol_capacity",
                "local_a8": "symbol_attribute",
                "uStack_a4": "symbol_attribute_high",
                "uStack_a0": "symbol_address_low",
                "uStack_9c": "symbol_address_high",
                "local_88": "symbol_name_buffer",
                "local_6a": "symbol_type",
                "local_68": "symbol_class",
                "local_67": "symbol_aux",
                "local_60": "aux_buffer",
                "local_56": "symbol_value_low"
            },
            "code": "\nundefined8\nextract_symbols_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int format,long header,\n            undefined8 param_6)\n\n{\n  long header_size;\n  long symbol_address;\n  long current_symbol_count;\n  char result;\n  undefined4 error_code;\n  void *symbol_list;\n  undefined8 symbol_value;\n  undefined8 error_message;\n  undefined4 *symbol_entry;\n  char *error_format;\n  undefined *aux_entry;\n  uint aux_value;\n  long symbol_count;\n  int symbol_offset;\n  int symbol_capacity;\n  undefined4 symbol_attribute;\n  undefined4 symbol_attribute_high;\n  undefined4 symbol_address_low;\n  undefined4 symbol_address_high;\n  undefined symbol_name_buffer [30];\n  undefined2 symbol_type;\n  byte symbol_class;\n  byte symbol_aux;\n  undefined aux_buffer [10];\n  ushort symbol_value_low;\n  \n  symbol_capacity = 10;\n  symbol_count = 0;\n  header_size = *(long *)(header + 0x18);\n  symbol_list = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < header_size && (symbol_table[2] < symbol_table[1]))) {\n    symbol_address = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_address,symbol_name_buffer);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      symbol_value = bfd_errmsg(error_code);\n      error_format = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_format,5);\n      print_error_message_00119ed0(error_message,symbol_value);\n      free(symbol_list);\n      return 0;\n    }\n    current_symbol_count = symbol_table[3];\n    aux_entry = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = current_symbol_count + 1 + (ulong)symbol_aux;\n    if (symbol_aux != 0) {\n      aux_entry = aux_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_address,0,aux_entry);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        symbol_value = bfd_errmsg(error_code);\n        error_format = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbol_class == 0x12) {\n      aux_value = (uint)symbol_value_low;\n      symbol_offset = (int)*(undefined8 *)(symbol_address + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (symbol_class < 0x13) {\n        if ((symbol_class == 8) || (symbol_class == 0xb)) {\n          aux_value = 0;\n          symbol_offset = ((int)*(undefined8 *)(symbol_address + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbol_class == 0x66) break;\n      aux_value = 0;\n      symbol_offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_coff_type_0010dac0(param_1,symbol_table,param_3,current_symbol_count,symbol_type,aux_entry,1);\n    symbol_value = *(undefined8 *)(symbol_address + 8);\n    symbol_entry = (undefined4 *)xmalloc(0x20);\n    symbol_attribute = (undefined4)symbol_value;\n    symbol_attribute_high = (undefined4)((ulong)symbol_value >> 0x20);\n    symbol_address_low = (undefined4)error_message;\n    symbol_address_high = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(symbol_entry + 5) = 0;\n    symbol_entry[6] = symbol_offset;\n    symbol_entry[7] = aux_value;\n    symbol_entry[4] = 0;\n    *symbol_entry = symbol_attribute;\n    symbol_entry[1] = symbol_attribute_high;\n    symbol_entry[2] = symbol_address_low;\n    symbol_entry[3] = symbol_address_high;\n    if (symbol_capacity <= (int)symbol_count + 1) {\n      symbol_capacity = symbol_capacity + 10;\n      symbol_list = (void *)xrealloc(symbol_list,(long)symbol_capacity << 3,symbol_entry,0,param_6);\n    }\n    *(undefined4 **)((long)symbol_list + symbol_count * 8) = symbol_entry;\n    symbol_count = symbol_count + 1;\n  }\n  *(undefined8 *)((long)symbol_list + (long)(int)symbol_count * 8) = 0;\n  symbol_value = initialize_and_allocate_memory_00113da9(format == 8,*(undefined2 *)(header + 10),symbol_list);\n  return symbol_value;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113da9",
                "dcgettext",
                "FUN_0010dac0",
                "bfd_coff_get_auxent",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "extract_symbols_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_and_allocate_memory_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_program_001082c3"
            },
            "code": "\nundefined8 initializeProgram_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_program_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_file_and_process_lines_00114460",
                "param_1": "filePath",
                "param_2": "hashTable",
                "param_3": "fileContent",
                "iVar1": "lineNumber",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "localizedMessage",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "filePointer",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "nextCharacter",
                "bVar8": "currentCharacter",
                "pbVar9": "nextLineStart",
                "pbVar10": "currentLineStart",
                "pbVar11": "lineEnd",
                "pbVar12": "lineStart"
            },
            "code": "\nvoid readFileAndProcessLines_00114460(char *filePath,undefined8 hashTable,byte **fileContent)\n\n{\n  int lineNumber;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 localizedMessage;\n  size_t fileSize;\n  byte *buffer;\n  FILE *filePointer;\n  size_t bytesRead;\n  byte **hashTableSlot;\n  byte *nextCharacter;\n  byte currentCharacter;\n  byte *nextLineStart;\n  byte *currentLineStart;\n  byte *lineEnd;\n  byte *lineStart;\n  \n  fileSize = check_file_stats_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    filePointer = fopen(filePath,\"r\");\n    if (filePointer == (FILE *)0x0) {\n      errnoLocation = __errno_location();\n      errorMessage = strerror(*errnoLocation);\n      localizedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_message_and_exit_00119dd0(localizedMessage,filePath,errorMessage);\n    }\n    bytesRead = fread(buffer,1,fileSize,filePointer);\n    if ((bytesRead == 0) || (lineNumber = ferror(filePointer), lineNumber != 0)) {\n      localizedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_message_and_exit_00119dd0(localizedMessage,filePath);\n    }\n    lineNumber = 1;\n    fclose(filePointer);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentCharacter = *buffer;\n    lineStart = buffer;\n    while (currentLineStart = lineStart, currentCharacter != 0) {\n      for (; currentCharacter = *currentLineStart, lineEnd = currentLineStart, currentCharacter != 10; currentLineStart = currentLineStart + 1) {\n        if ((char)currentCharacter < '\\v') {\n          if (currentCharacter == 0) {\n            nextLineStart = currentLineStart + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentCharacter == 0xd) {\n            *currentLineStart = 0;\n            nextLineStart = currentLineStart + 1;\n            if (currentLineStart[1] == 10) {\n              nextLineStart = currentLineStart + 2;\n              lineEnd = currentLineStart + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentCharacter == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentLineStart = 0;\n      if (currentLineStart[1] == 0xd) {\n        lineEnd = currentLineStart + 1;\n        nextLineStart = currentLineStart + 2;\n      }\n      else {\n        nextLineStart = currentLineStart + 1;\n      }\nLAB_00114553:\n      currentCharacter = *lineStart;\n      while ((currentCharacter == 0x20 || (currentLineStart = lineStart, currentCharacter == 9))) {\n        currentLineStart = lineStart + 1;\n        lineStart = lineStart + 1;\n        currentCharacter = *currentLineStart;\n      }\n      do {\n        if ((currentCharacter == 10) || (currentCharacter == 0xd)) goto LAB_00114676;\n        if (currentCharacter == 0) goto LAB_00114599;\n        currentCharacter = currentLineStart[1];\n        currentLineStart = currentLineStart + 1;\n      } while ((currentCharacter != 0x20) && (currentCharacter != 9));\n      if ((char)currentCharacter < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentCharacter & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentCharacter = currentLineStart[1];\n        if ((((((currentCharacter == 9) || (currentCharacter == 0x20)) &&\n              ((currentCharacter = currentLineStart[2], currentCharacter == 9 || (currentCharacter == 0x20)))) &&\n             ((currentCharacter = currentLineStart[3], currentCharacter == 9 || (currentCharacter == 0x20)))) &&\n            ((currentCharacter = currentLineStart[4], currentCharacter == 9 || (currentCharacter == 0x20)))) &&\n           ((currentCharacter = currentLineStart[5], currentCharacter == 9 || (currentCharacter == 0x20)))) {\n          currentCharacter = currentLineStart[6];\n          nextCharacter = currentLineStart + 6;\n          if ((currentCharacter == 9) || (currentCharacter == 0x20)) {\n            do {\n              do {\n                currentCharacter = nextCharacter[1];\n                nextCharacter = nextCharacter + 1;\n              } while (currentCharacter == 0x20);\n            } while (currentCharacter == 9);\n          }\n        }\n        if ((0xd < currentCharacter) || ((-0x2402L >> (currentCharacter & 0x3f) & 1U) != 0)) {\n          localizedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(localizedMessage,filePath,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentLineStart = 0;\n      if (lineStart < currentLineStart) {\n        hashTableSlot = (byte **)htab_find_slot(hashTable,lineStart,1);\n        *hashTableSlot = lineStart;\n      }\n      lineNumber = lineNumber + 1;\n      lineStart = nextLineStart;\n      currentCharacter = lineEnd[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "xmalloc",
                "fclose",
                "__errno_location",
                "dcgettext",
                "ferror",
                "fopen",
                "fread",
                "FUN_00113f50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_process_lines_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_url_0010a94e",
                "param_1": "input_data",
                "param_2": "username",
                "param_3": "password",
                "param_4": "option",
                "cVar1": "flag",
                "lVar2": "ptr_data",
                "__s": "extracted_data",
                "sVar3": "length_username",
                "sVar4": "length_param_2",
                "sVar5": "length_extracted_data",
                "sVar6": "length_param_3",
                "pcVar7": "new_url",
                "uVar8": "result",
                "pcVar9": "option_string"
            },
            "code": "\nundefined8 generateURL_0010a94e(long input_data,char *username,char *password,int option)\n\n{\n  char flag;\n  long ptr_data;\n  char *extracted_data;\n  size_t length_username;\n  size_t length_param_2;\n  size_t length_extracted_data;\n  size_t length_param_3;\n  char *new_url;\n  undefined8 result;\n  char *option_string;\n  \n  flag = *(char *)(*(long *)(input_data + 0x60) + 0x1c);\n  extracted_data = (char *)extract_and_free_00109b2f();\n  new_url = *(char **)(*(long *)(input_data + 0x60) + 0x20);\n  if (new_url == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length_username = strlen(new_url);\n    length_param_2 = strlen(username);\n    length_extracted_data = strlen(extracted_data);\n    length_param_3 = strlen(password);\n    new_url = (char *)xmalloc(length_username + 10 + length_param_2 + length_extracted_data + length_param_3);\n    if (option == 1) {\n      option_string = \"/1\";\n    }\n    else {\n      option_string = \"/0\";\n      if ((option != 2) && (option_string = \"\", option != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(new_url,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(input_data + 0x60) + 0x20),username,option_string,\n            extracted_data,password,*(long *)(input_data + 0x60));\n    free(*(void **)(*(long *)(input_data + 0x60) + 0x20));\n    ptr_data = *(long *)(input_data + 0x60);\n    *(char **)(ptr_data + 0x20) = new_url;\n    if (flag != '\\0') {\n      *(undefined *)(ptr_data + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ptr_data >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_url_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_value_00113b1e",
                "param_1": "input_value",
                "param_2": "ptr_param",
                "param_3": "initial_value",
                "param_4": "ptr_result",
                "auVar1": "output_value",
                "piVar2": "ptr_real_type",
                "uVar3": "real_value",
                "auVar4": "result_value"
            },
            "code": "\nundefined  [16] extract_real_value_00113b1e(long input_value,undefined8 ptr_param,ulong initial_value,undefined8 ptr_result)\n\n{\n  undefined output_value [16];\n  int *ptr_real_type;\n  undefined8 real_value;\n  undefined result_value [16];\n  \n  if (input_value != 0) {\n    ptr_real_type = (int *)find_real_type_00112b6e(input_value,0);\n    if ((ptr_real_type == (int *)0x0) || (3 < *ptr_real_type - 7U)) {\n      real_value = 0;\n    }\n    else {\n      real_value = **(undefined8 **)(ptr_real_type + 4);\n    }\n    result_value._8_8_ = ptr_result;\n    result_value._0_8_ = real_value;\n    return result_value;\n  }\n  output_value._8_8_ = 0;\n  output_value._0_8_ = initial_value;\n  return output_value << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_real_value_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "execute_command_0010a0e9",
                "param_1": "binaryAddress",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "extractedData",
                "uVar2": "result",
                "__s": "command",
                "sVar3": "commandLength",
                "__s_00": "formattedCommand"
            },
            "code": "\nundefined4 executeCommand_0010a0e9(long binaryAddress,undefined8 param2,undefined8 param3)\n\n{\n  undefined extractedData;\n  undefined4 result;\n  char *command;\n  size_t commandLength;\n  char *formattedCommand;\n  \n  extractedData = *(undefined *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(binaryAddress + 0x60) + 0x18);\n  command = (char *)extract_and_free_00109b2f();\n  commandLength = strlen(command);\n  formattedCommand = (char *)xmalloc(commandLength + 100);\n  sprintf(formattedCommand,\"r%s;%ld;%ld;\",command,param2,param3);\n  free(command);\n  result = initialize_object_00109b52(binaryAddress,formattedCommand,0,extractedData,result);\n  if ((char)result != '\\0') {\n    free(formattedCommand);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_command_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_and_compare_entries_00114c20",
                "param_1": "entry",
                "cVar1": "comparisonResult",
                "pcVar2": "currentEntry"
            },
            "code": "\nvoid processAndCompareEntries_00114c20(long entry)\n\n{\n  char comparisonResult;\n  char *currentEntry;\n  \n  process_entries_00114190(entry,1,1);\n  comparisonResult = compare_strings_00113fb0(entry,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    currentEntry = (char *)(entry + 5);\n    if (*(char *)(entry + 4) != 'a') {\n      currentEntry = (char *)(entry + 4);\n    }\n    if (*currentEntry != '\\0') {\n      process_entries_00114190(currentEntry,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_and_compare_entries_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_binary_for_duplicates_00115f50",
                "param_1": "binarySize",
                "param_2": "binaryContents",
                "param_3": "checkFlag",
                "__s1": "currentString",
                "uVar1": "stringComparison",
                "uVar2": "comparisonResult",
                "extraout_EDX": "comparisonResultEDX",
                "plVar3": "linkedListPointer",
                "auVar4": "processingResult"
            },
            "code": "\nuint checkBinaryForDuplicates_00115f50(long binarySize,char **binaryContents,char checkFlag)\n\n{\n  char *currentString;\n  uint stringComparison;\n  undefined4 comparisonResult;\n  undefined4 comparisonResultEDX;\n  long *linkedListPointer;\n  undefined processingResult [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  processingResult = process_binary_001159d0(binaryContents);\n  if (processingResult[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      currentString = *binaryContents;\n      linkedListPointer = DAT_001279d8;\n      do {\n        stringComparison = strcmp(currentString,(char *)linkedListPointer[1]);\n        processingResult._4_4_ = 0;\n        processingResult._0_4_ = stringComparison;\n        processingResult._8_4_ = comparisonResultEDX;\n        if (stringComparison == 0) {\n          return 1;\n        }\n        linkedListPointer = (long *)*linkedListPointer;\n      } while (linkedListPointer != (long *)0x0);\n    }\n    comparisonResult = processingResult._8_4_;\n    if (((((checkFlag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (processingResult._8_4_ = comparisonResult, processingResult._0_8_ = *(long *)(binarySize + 8),\n         *(int *)(*(long *)(binarySize + 8) + 8) != 5)) ||\n        ((processingResult._0_8_ = (ulong)binaryContents[0x1a], *(int *)(binaryContents[0x1a] + 4) != 7 ||\n         (processingResult = compare_strings_00113fb0(*binaryContents,\".gnu.build.attributes\"), processingResult[0] == '\\0')))) &&\n       ((*(byte *)((long)binaryContents + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(processingResult._1_7_,binaryContents[8] == (char *)0x0) |\n             CONCAT31(processingResult._9_3_,binaryContents[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_001159d0",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_binary_for_duplicates_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "unaff_RBX": "sectionLength",
                "unaff_EBP": "errorCode",
                "uVar1": "section",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorAndExit_001083de(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionLength;\n  undefined4 errorCode;\n  \n  section = *sectionLength;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_message_and_exit_00119dd0(errorMessage,section,errorCode);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_0011a2e0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_object_with_params_0010b948",
                "param_1": "object",
                "param_2": "count",
                "lVar1": "tempVar1",
                "cVar2": "result",
                "__ptr": "ptr",
                "uVar3": "countU",
                "uVar4": "countM1",
                "local_5a": "stringBuffer"
            },
            "code": "\nvoid initializeObjectWithParams_0010b948(long object,uint count)\n\n{\n  long tempVar1;\n  char result;\n  void *ptr;\n  ulong countU;\n  uint countM1;\n  char stringBuffer [50];\n  \n  countM1 = count - 1;\n  countU = (ulong)count;\n  if ((countM1 < 0x10) && (tempVar1 = *(long *)(object + 0xf8 + (ulong)countM1 * 8), tempVar1 != 0)) {\n    initialize_object_with_params_00109cf4(object,tempVar1,countU);\n    return;\n  }\n  result = initialize_object_with_params_0010b800(object,4,0);\n  if (result != '\\0') {\n    ptr = (void *)extract_and_free_00109b2f(object);\n    tempVar1 = *(long *)(object + 0x68);\n    *(long *)(object + 0x68) = tempVar1 + 1;\n    if (countM1 < 0x10) {\n      *(long *)(object + 0xf8 + (ulong)countM1 * 8) = tempVar1;\n    }\n    sprintf(stringBuffer,\"%ld=r%s;%u;0;\",tempVar1,ptr,countU);\n    free(ptr);\n    initialize_object_00109b52(object,stringBuffer,tempVar1,1,countU);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010b800",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_object_with_params_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010e07c",
                "FUN_00119970",
                "FUN_00114690",
                "FUN_00116490",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00108200",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00115b70",
                "FUN_00113f50",
                "FUN_0010be1a",
                "FUN_00108d9a",
                "FUN_00109a32",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0010808f",
                "FUN_0011256b",
                "FUN_00104966",
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00119f70",
                "FUN_00108375",
                "FUN_00104920",
                "FUN_0010bc80",
                "FUN_00112b6e",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010543c",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_00114460",
                "FUN_00107976",
                "FUN_0010551d",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0010882c",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00112996",
                "FUN_0010871c",
                "FUN_001083de",
                "FUN_00108808",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_0010da0b",
                "FUN_0010c892",
                "FUN_0010b800",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00108072",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00108916",
                "FUN_0010914e",
                "FUN_00112c1f",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_00108a2a",
                "FUN_00114e00",
                "FUN_0010c218",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_real_type_00112b6e",
                "param_1": "input_ptr",
                "param_2": "debug_info",
                "iVar1": "value",
                "__format": "format_string",
                "piVar3": "result_ptr",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "visited_debug_info",
                "local_10": "current_input_ptr"
            },
            "code": "\n\n\nint * find_real_type_00112b6e(int *input_ptr,long *debug_info)\n\n{\n  int value;\n  undefined8 uVar2;\n  char *format_string;\n  int *result_ptr;\n  long *current_debug_info;\n  bool is_circular;\n  long *visited_debug_info;\n  int *current_input_ptr;\n  \n  value = *input_ptr;\n  if ((value != 1) && (1 < value - 0x16U)) {\n    return input_ptr;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_ptr == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      uVar2 = get_return_value_001129f4(input_ptr,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,uVar2);\n      return (int *)0x0;\n    }\n  }\n  visited_debug_info = debug_info;\n  current_input_ptr = input_ptr;\n  if (value - 0x16U < 2) {\n    result_ptr = (int *)find_real_type_00112b6e((*(undefined8 **)(input_ptr + 4))[1],&visited_debug_info);\n    return result_ptr;\n  }\n  result_ptr = *(int **)**(undefined8 **)(input_ptr + 4);\n  if (input_ptr == result_ptr) {\n    return input_ptr;\n  }\n  if (result_ptr == (int *)0x0) {\n    return input_ptr;\n  }\n  result_ptr = (int *)find_real_type_00112b6e(result_ptr,&visited_debug_info);\n  return result_ptr;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "update_and_format_string_0010a83e",
                "param_1": "obj_ptr",
                "param_2": "obj_data",
                "param_3": "param_ptr",
                "param_4": "param_data",
                "param_5": "format_flags",
                "param_6": "is_flag_set",
                "param_7": "is_size_set",
                "__s": "extracted_string",
                "__s_00": "formatted_string",
                "sVar2": "string_length",
                "cVar3": "previous_value"
            },
            "code": "\nundefined4\nupdate_and_format_string_0010a83e(long obj_ptr,undefined8 obj_data,ulong param_ptr,undefined param_data,ulong format_flags,\n            byte is_flag_set,byte is_size_set)\n\n{\n  undefined4 uVar1;\n  char *extracted_string;\n  char *formatted_string;\n  size_t string_length;\n  char previous_value;\n  \n  if (((is_size_set ^ 1) & is_flag_set) == 0) {\n    extracted_string = (char *)0x0;\n    previous_value = '\\0';\n  }\n  else {\n    previous_value = *(char *)(*(long *)(obj_ptr + 0x60) + 0x1c);\n    extracted_string = (char *)extract_and_free_00109b2f();\n    format_flags = format_flags & 0xffffffff;\n    param_ptr = param_ptr & 0xffffffff;\n  }\n  uVar1 = update_object_0010a69a(obj_ptr,obj_data,param_ptr,param_data,format_flags);\n  if ((char)uVar1 != '\\0') {\n    if (is_flag_set == 0) {\n      return uVar1;\n    }\n    if (is_size_set == 0) {\n      if (extracted_string == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(extracted_string);\n      formatted_string = (char *)xmalloc(string_length + 3);\n      sprintf(formatted_string,\"~%%%s\",extracted_string);\n      free(extracted_string);\n      if (previous_value != '\\0') {\n        *(undefined *)(*(long *)(obj_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(obj_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      formatted_string = (char *)xmalloc(0x14);\n      sprintf(formatted_string,\"~%%%ld\",*(undefined8 *)(*(long *)(obj_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(obj_ptr + 0x60) + 0x38) = formatted_string;\n    return uVar1;\n  }\n  return uVar1;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010a69a",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_format_string_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_memory_block_00113d6e",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "memory_block_address",
                "puVar2": "allocated_block"
            },
            "code": "\nlong allocate_memory_block_00113d6e(undefined8 data_1,undefined8 data_2)\n\n{\n  long memory_block_address;\n  undefined8 *allocated_block;\n  \n  memory_block_address = initialize_memory_block_00112904(0xb,0);\n  if (memory_block_address != 0) {\n    allocated_block = (undefined8 *)xmalloc(0x10);\n    *allocated_block = data_1;\n    allocated_block[1] = data_2;\n    *(undefined8 **)(memory_block_address + 0x10) = allocated_block;\n  }\n  return memory_block_address;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_00114690",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_0010c1c6",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00116852",
                "FUN_00109b2f",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00108466",
                "FUN_001199d0",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e453",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010dac0",
                "FUN_00108863",
                "FUN_00107880",
                "FUN_0011173a",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010e9a0",
                "FUN_001081e9",
                "FUN_0010e918",
                "FUN_001088ae",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00114b84",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_conditional_function_00114d50",
                "param_1": "structure1",
                "param_2": "structure2",
                "param_3": "flag"
            },
            "code": "\nvoid executeConditionalFunction_00114d50(long structure1,long structure2,uint flag)\n\n{\n  if (*(int *)(*(long *)(structure1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(structure2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(structure2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(structure1 + 8) + 0x380) + 0x78))(structure1,flag != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_conditional_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "defaultUsageString",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 defaultUsageString;\n  char *localizedString;\n  \n  defaultUsageString = DAT_00127600;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,localizedString,defaultUsageString);\n  localizedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,localizedString);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "FUN_00104a35",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_001126c0",
                "param_1": "error1",
                "param_2": "error2",
                "param_3": "error3",
                "param_4": "error4",
                "param_5": "error5",
                "param_6": "error6",
                "param_7": "error7",
                "param_8": "error8",
                "param_9": "fileName",
                "param_10": "fileSize",
                "param_11": "errorCode",
                "param_12": "errorMessage",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "error",
                "uVar2": "errorDescription",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localVar3",
                "local_f0": "localVar4",
                "local_e8": "localArray",
                "local_c8": "localVar5",
                "local_c0": "localVar6",
                "local_b8": "localVar7",
                "local_a8": "localVar8",
                "local_98": "localVar9",
                "local_88": "localVar10",
                "local_78": "localVar11",
                "local_68": "localVar12",
                "local_58": "localVar13",
                "local_48": "localVar14"
            },
            "code": "\n\n\nvoid printError_001126c0(undefined4 error1,undefined4 error2,undefined4 error3,undefined4 error4,\n                 undefined4 error5,undefined4 error6,undefined4 error7,undefined4 error8,\n                 long fileName,long fileSize,long *errorCode,char *errorMessage,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 errorDescription;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localArray [32];\n  undefined8 localVar5;\n  undefined8 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  undefined4 localVar10;\n  undefined4 localVar11;\n  undefined4 localVar12;\n  undefined4 localVar13;\n  undefined4 localVar14;\n  \n  if (flag != '\\0') {\n    localVar7 = error1;\n    localVar8 = error2;\n    localVar9 = error3;\n    localVar10 = error4;\n    localVar11 = error5;\n    localVar12 = error6;\n    localVar13 = error7;\n    localVar14 = error8;\n  }\n  localVar5 = param13;\n  localVar6 = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    errorDescription = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorDescription = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (fileSize != 0) {\n    if (fileName == 0) {\n      fileName = construct_filename_001125fa(fileSize);\n    }\n    if ((errorCode != (long *)0x0) && (*errorCode != 0)) {\n      fprintf(_stderr,\": %s[%s]\",fileName);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",fileName);\nLAB_001127c1:\n  if (errorMessage != (char *)0x0) {\n    localVar3 = &stack0x00000008;\n    localVar4 = localArray;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorMessage,&localVar1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorDescription);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "fwrite",
                "bfd_errmsg",
                "bfd_get_error",
                "fprintf",
                "dcgettext",
                "vfprintf",
                "fflush",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001088ae",
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_memory_block_with_param_00113b4a",
                "param_1": "input_value",
                "lVar1": "memory_block",
                "initialize_memory_block_00112904": "allocate_memory_block"
            },
            "code": "\nlong initialize_memory_block_with_param_00113b4a(long input_value)\n\n{\n  long memory_block;\n  \n  if (input_value != 0) {\n    memory_block = allocate_memory_block(0x15,0);\n    if (memory_block == 0) {\n      memory_block = 0;\n    }\n    else {\n      *(long *)(memory_block + 0x10) = input_value;\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_with_param_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "process_file_0010edb4",
                "param_1": "file_data",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "file_size",
                "cVar1": "processed_char",
                "iVar2": "filename_comparison",
                "uVar3": "result",
                "in_R10": "extra_data"
            },
            "code": "\nundefined8 process_file_0010edb4(long file_data,undefined8 filename,undefined4 flag,ulong file_size)\n\n{\n  char processed_char;\n  int filename_comparison;\n  undefined8 result;\n  undefined8 extra_data;\n  \n  if (*(long *)(file_data + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(file_data + 0x1f0) < file_size) {\n    *(ulong *)(file_data + 0x1f0) = file_size;\n  }\n  filename_comparison = filename_cmp(filename);\n  if (filename_comparison != 0) {\n    processed_char = process_string_0010e2f0(file_data,0x84,0,file_size,filename);\n    if (processed_char == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(file_data + 0x210) = filename;\n  }\n  result = process_string_0010e2f0(file_data,0x44,flag,file_size - *(long *)(file_data + 0x200),0,extra_data);\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "process_file_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_0010be1a",
                "FUN_0010554f",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_0010c892",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_0010bc80",
                "FUN_0010914e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_00108a2a",
                "FUN_0010b0fa",
                "FUN_00104a35",
                "FUN_0010bf20",
                "FUN_0010c218"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_and_extract_0010e5db",
                "param_1": "data_address",
                "param_2": "num_iterations",
                "cVar1": "result",
                "__ptr": "extracted_data",
                "__s": "extracted_string",
                "sVar2": "string_length",
                "__s_00": "modified_string",
                "in_R10": "extra_data",
                "iVar3": "iteration_count",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] process_and_extract_0010e5db(long data_address,int num_iterations)\n\n{\n  char result;\n  void *extracted_data;\n  char *extracted_string;\n  size_t string_length;\n  char *modified_string;\n  ulong extra_data;\n  int iteration_count;\n  undefined return_value [16];\n  \n  iteration_count = 0;\n  do {\n    if (num_iterations <= iteration_count) {\n      return_value = process_data_00109ed3(data_address,0x66,0,data_address + 0x188,data_address + 400,extra_data);\n      return return_value;\n    }\n    if (*(char *)(*(long *)(data_address + 0x60) + 0x1c) == '\\0') {\n      extracted_data = (void *)extract_and_free_00109b2f(data_address);\n      free(extracted_data);\n    }\n    else {\n      extracted_string = (char *)extract_and_free_00109b2f(data_address);\n      string_length = strlen(extracted_string);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",extracted_string);\n      free(extracted_string);\n      result = process_string_0010e2f0(data_address,0x80,0,0,modified_string);\n      if (result == '\\0') {\n        return_value._8_8_ = 0;\n        return_value._0_8_ = extra_data;\n        return return_value << 0x40;\n      }\n      free(modified_string);\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_and_extract_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_and_print_error_00104d25",
                "param_7": "param",
                "print_error_001126c0": "printError",
                "remove_and_free_directory_00114b84": "removeAndFreeDirectory"
            },
            "code": "\nvoid initializeAndPrintError_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a40 = 1;\n  printError(0,param,0,0);\n  removeAndFreeDirectory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_and_print_error_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "extract_and_process_debug_info_0010551d",
                "puVar1": "ptrUInt",
                "bVar2": "byteVar",
                "puVar3": "ptrVoid",
                "pcVar4": "ptrCode",
                "puVar5": "ptrUInt64",
                "uVar6": "ulongVar1",
                "uVar7": "ulongVar2",
                "__s": "ptrChar",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "uintVar1",
                "iVar11": "intVar",
                "uVar12": "uintVar2",
                "uVar13": "uintVar3",
                "iVar14": "intVar2",
                "plVar15": "ptrLong3",
                "uVar16": "ulongVar3",
                "uVar17": "ulongVar4",
                "sVar18": "sizeVar",
                "pcVar19": "ptrChar2",
                "pcVar28": "ptrChar3",
                "sVar26": "sizeVar2",
                "lVar21": "longVar",
                "plVar32": "ptrLong2",
                "iVar31": "intVar3",
                "puVar34": "ptrVoid4",
                "pcVar33": "ptrChar4",
                "ppcVar35": "ptrPtrChar",
                "in_stack_00000018": "bitStack",
                "unaff_R13": "ptrLong4",
                "pvVar36": "ptrVoid5",
                "unaff_R14": "ptrUInt642",
                "puVar29": "ptrUInt642",
                "bVar38": "boolVar"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong extractAndProcessDebugInfo_0010551d(void)\n\n{\n  uint *ptrUInt;\n  byte byteVar;\n  undefined *ptrVoid;\n  code *ptrCode;\n  undefined8 *ptrUInt64;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *ptrChar;\n  char charVar;\n  char charVar2;\n  uint uintVar1;\n  int intVar;\n  uint uintVar2;\n  undefined4 uintVar3;\n  int intVar2;\n  long *ptrLong3;\n  undefined8 ulongVar3;\n  undefined8 ulongVar4;\n  size_t sizeVar;\n  char *ptrChar2;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long longVar;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *ptrChar_00;\n  size_t sizeVar2;\n  long lVar27;\n  long *unaff_RBX;\n  char *ptrChar3;\n  undefined8 *ptrUInt642;\n  ulong uVar30;\n  int intVar3;\n  long unaff_RBP;\n  long *ptrLong2;\n  char *ptrChar4;\n  undefined4 *ptrVoid4;\n  char **ptrPtrChar;\n  long *ptrLong4;\n  void *ptrVoid5;\n  undefined8 *ptrUInt642;\n  undefined **pptrVoid7;\n  bool boolVar;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char bitStack;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  ptrUInt642 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(ptrUInt642[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVar2 = compare_strings_00113fb0(), charVar2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      lVar27 = process_build_attribute_notes_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        unaff_RBX[3] = (long)ptrLong4;\n        *unaff_RBX = unaff_RBP;\n        ptrLong4 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; ptrUInt642 != (undefined8 *)0x0; ptrUInt642 = (undefined8 *)*ptrUInt642) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_001126c0(0);\n    }\n    else {\n      sizeVar = *(size_t *)(lVar25 + 0x40);\n      ptrChar_00 = fopen((char *)ptrUInt642[2],\"w\");\n      if (ptrChar_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_001126c0(ptrUInt642[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_001126c0(0);\n        }\n        else if ((sizeVar != 0) &&\n                (sizeVar2 = fwrite(in_stack_00000140,1,sizeVar,ptrChar_00), sizeVar2 != sizeVar)) {\n          piVar23 = __errno_location();\n          ptrChar4 = strerror(*piVar23);\n          ulongVar4 = ptrUInt642[2];\n          ulongVar3 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(ulongVar3,ulongVar4,ptrChar4);\n          free(in_stack_00000140);\n          fclose(ptrChar_00);\n          return 0;\n        }\n        fclose(ptrChar_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      ulongVar4 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(ulongVar4);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      ulongVar4 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_001126c0(0,in_stack_00000008,0,ulongVar4,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        ulongVar1 = uVar24;\n        ulongVar2 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = ulongVar1, ulongVar2 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            ulongVar1 = uVar20;\n            ulongVar2 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  ptrLong2 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = reorganize_and_improve_debugging_data_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    pptrVoid7 = &PTR_sptrChartab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    ptrVoid4 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *ptrVoid4 = 0;\n      ptrVoid4 = ptrVoid4 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      ptrVoid = *pptrVoid7;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*ptrUInt642);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          bitStack = bfd_get_section_contents();\n          if (bitStack == '\\0') {\n            uintVar3 = bfd_get_error();\n            bfd_errmsg(uintVar3);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*ptrUInt642);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (ptrVoid5 = __ptr; ptrVoid5 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  ptrVoid5 = (void *)((long)ptrVoid5 + 0xc)) {\n                uVar20 = (**(code **)(ptrUInt642[1] + 0x40))(ptrVoid5);\n                byteVar = *(byte *)((long)ptrVoid5 + 4);\n                uintVar3 = (**(code **)(ptrUInt642[1] + 0x58))((long)ptrVoid5 + 6);\n                lVar27 = (**(code **)(ptrUInt642[1] + 0x40))((long)ptrVoid5 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    ptrChar4 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVar = strlen(ptrChar4);\n                      if (((sizeVar == 0) || (ptrChar3 = ptrChar4 + (sizeVar - 1), *ptrChar3 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)ptrVoid5 + 0x10U)) goto LAB_001077fb;\n                      *ptrChar3 = '\\0';\n                      ptrVoid5 = (void *)((long)ptrVoid5 + 0xc);\n                      intVar = (**(code **)(ptrUInt642[1] + 0x40))(ptrVoid5);\n                      uVar20 = (ulong)(uint)(intVar + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      ptrChar4 = (char *)concat(ptrChar4,(long)__ptr_00 + uVar20,0);\n                      *ptrChar3 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = ptrChar4;\n                    }\n                    ulongVar4 = *ptrUInt642;\n                    ptrChar3 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,ptrChar3,ulongVar4,ptrVoid,((long)ptrVoid5 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_and_free_memory_block_001088ae((ulong)byteVar,uintVar3,lVar27,ptrChar4);\n                    charVar2 = parse_debug_records_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    ulongVar4 = *ptrUInt642;\n                    ptrChar4 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,ptrChar4,ulongVar4,ptrVoid,((long)ptrVoid5 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)ptrVoid5 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      pptrVoid7 = pptrVoid7 + 2;\n    } while (pptrVoid7 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = process_debug_info_0010c892(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(ptrUInt642[1] + 8) == 1) {\n      lVar25 = 0;\n      for (ptrLong3 = ptrLong2; ptrLong3 < ptrLong2 + in_stack_00000010; ptrLong3 = ptrLong3 + 1) {\n        (**(code **)(ptrUInt642[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = initialize_buffer_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            ptrChar4 = (char *)0x0;\n            ptrChar3 = in_stack_00000150;\n            while (((*ptrChar3 != '\\0' && (sizeVar = strlen(ptrChar3), ptrChar3[sizeVar - 1] == '\\')) &&\n                   (ptrLong3 + 1 < ptrLong2 + in_stack_00000010))) {\n              ptrChar2 = (char *)xstrdup(ptrChar3);\n              sizeVar = strlen(ptrChar2);\n              ptrChar2[sizeVar - 1] = '\\0';\n              ptrChar3 = (char *)concat(ptrChar2,*(undefined8 *)(ptrLong3[1] + 8),0);\n              free(ptrChar2);\n              free(ptrChar4);\n              ptrLong3 = ptrLong3 + 1;\n              ptrChar4 = ptrChar3;\n            }\n            update_and_free_memory_block_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         ptrChar3);\n            bitStack = parse_debug_records_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (bitStack != '\\0') goto LAB_00106cac;\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      cleanup_memory_00108863();\n      if ((lVar25 != 0) && (charVar2 = process_debug_info_0010c892(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (bitStack == '\\0') {\n      if ((*(int *)(ptrUInt642[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        ptrChar4 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = ptrLong2;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      ptrUInt642 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)ptrUInt642 = 0;\n        ptrUInt642 = (undefined8 *)((long)ptrUInt642 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = ptrLong2[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          ptrChar4 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          ulongVar4 = dcgettext(0,ptrChar4,5);\n          print_error_message_00119ed0(ulongVar4);\n          goto LAB_00105981;\n        }\n        ptrChar4 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          uintVar3 = bfd_get_error();\n          bfd_errmsg(uintVar3);\n          ptrChar4 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(ptrUInt642[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(ptrUInt642[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(ptrUInt642[1] + 0x238))();\n                pcStack0000000000000038 = ptrChar4;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              intVar = strcmp(ptrChar4,\".bb\");\n              if (intVar == 0) {\n                charVar = start_block_debugging_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              intVar = strcmp(ptrChar4,\".eb\");\n              if (intVar == 0) {\n                charVar = end_block_debugging_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              intVar = strcmp(ptrChar4,\".bf\");\n              if (intVar == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charVar2 = record_debug_function_0010bc80(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    intVar = 0;\n                    if (bStack0000000000000101 != 0) {\n                      intVar = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar3 = _uStack0000000000000048[4];\n                      if (intVar3 == 0) break;\n                      charVar = record_line_debug_0010bf86(puStack0000000000000020,intVar + intVar3,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                ptrChar4 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar = strcmp(ptrChar4,\".ef\");\n                if (intVar != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                ptrChar4 = \"%ld: unexpected .ef\\n\";\n              }\n              ulongVar4 = dcgettext(0,ptrChar4,5);\n              print_error_message_00119ed0(ulongVar4);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          longVar = parse_coff_type_0010dac0();\n          if (longVar == 0) goto LAB_00105981;\n          charVar = process_debug_tag_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        ptrLong2 = DAT_001278d0 + in_stack_00000010;\n        ptrLong3 = DAT_001278d0;\n        do {\n          uintVar1 = *(uint *)(*ptrLong3 + 0x18);\n          if ((uintVar1 & 0x1000000) != 0) {\n            *(uint *)(*ptrLong3 + 0x18) = uintVar1 & 0xfeffffff;\n          }\n          ptrLong3 = ptrLong3 + 1;\n        } while (ptrLong2 != ptrLong3);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          ptrUInt = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *ptrUInt = *ptrUInt | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      intVar = bfd_get_error();\n      if (intVar != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    ptrLong2 = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)ptrUInt642 + 0x44) & 0x42;\n    DAT_001278c8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _bitStack = 0;\n      do {\n        intVar = DAT_001279c0;\n        ptrLong3 = (long *)ptrLong2[_bitStack];\n        ptrCode = (code *)ptrLong3[4];\n        uintVar1 = *(uint *)(ptrLong3 + 3);\n        ptrChar4 = (char *)ptrLong3[1];\n        ptrChar3 = ptrChar4;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          intVar3 = 0;\n          ptrUInt642 = DAT_001279c8;\n          while( true ) {\n            if ((intVar <= intVar3) || (ptrChar2 = (char *)ptrUInt642[5], ptrChar2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (ptrChar2 != \"\") break;\nLAB_0010750b:\n            intVar3 = intVar3 + 1;\n          }\n          intVar2 = strcmp(ptrChar2,ptrChar4);\n          if (intVar2 != 0) {\n            ptrUInt642 = (undefined8 *)*ptrUInt642;\n            goto LAB_0010750b;\n          }\n          free(ptrChar2);\n          uVar20 = uVar24 + 1;\n          ptrUInt642[5] = \"\";\n          ulongVar3 = initialize_section_data_0011a2e0(ptrUInt642);\n          ulongVar4 = DAT_001278f0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = ulongVar3;\n          lVar27 = htab_elements(ulongVar4);\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *ptrChar4;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          ptrChar4 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = ptrUInt642[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278f0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (ptrChar4 != (char *)0x0) {\nLAB_001064eb:\n          if (((*ptrChar4 == '_') && (ptrChar4[1] == '_')) &&\n             (intVar = strcmp(ptrChar4 + (ptrChar4[2] == '_'),\"__gnu_lto_slim\"), intVar == 0)) {\n            ulongVar4 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_message_and_exit_00119dd0(ulongVar4);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = ptrChar4;\n        lVar27 = htab_find(DAT_001278f0);\n        if (((lVar27 == 0) || (ptrChar3 = *(char **)(lVar27 + 8), ptrChar4 == ptrChar3)) &&\n           (ptrChar3 = ptrChar4, ptrPtrChar = DAT_001278f8, (uintVar1 & 0x100) != 0)) {\n          for (; ptrPtrChar != (char **)0x0; ptrPtrChar = (char **)ptrPtrChar[3]) {\n            intVar = strcmp(*ptrPtrChar,ptrChar4);\n            if (intVar == 0) {\n              ptrChar3 = ptrPtrChar[1];\n              break;\n            }\n          }\n        }\n        ptrLong3[1] = (long)ptrChar3;\n        charVar2 = *ptrChar3;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        ptrChar4 = DAT_00127928;\n        lVar27 = ptrUInt642[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((uintVar1 & 0x82) == 0 && (ptrCode != bfd_map_over_sections)) &&\n                ((*(byte *)(ptrLong3[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            ptrChar3 = ptrChar3 + 1;\n            ptrLong3[1] = (long)ptrChar3;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            ptrChar3 = ptrChar3 + 1;\n            ptrLong3[1] = (long)ptrChar3;\n            sizeVar = strlen(ptrChar3);\n            lVar27 = sizeVar + 2;\n            goto LAB_001066bc;\n          }\n          *ptrChar3 = charVar2;\n          ptrLong3[1] = (long)ptrChar3;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (ptrChar4 == (char *)0x0) goto LAB_00105b32;\n            sizeVar = strlen(ptrChar3);\n            sizeVar2 = strlen(ptrChar4);\n            ptrChar4 = (char *)xmalloc(sizeVar2 + sizeVar + 1);\n            ptrChar2 = ptrChar4;\n          }\n          else {\nLAB_0010668d:\n            ptrChar4 = DAT_00127928;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVar = strlen(ptrChar3);\n            lVar27 = sizeVar + 2;\n            if (ptrChar4 == (char *)0x0) {\n              ptrChar2 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVar = strlen(ptrChar4);\n              ptrChar2 = (char *)xmalloc(sizeVar + lVar27);\n            }\n            ptrChar4 = ptrChar2 + 1;\n            *ptrChar2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          ptrChar = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(ptrChar4,DAT_00127928);\n            sizeVar = strlen(ptrChar);\n            ptrChar4 = ptrChar4 + sizeVar;\n          }\n          strcpy(ptrChar4,ptrChar3);\n          ptrLong3[1] = (long)ptrChar2;\n          ptrChar3 = ptrChar2;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((uintVar1 & 0x20) == 0) &&\n           (((uintVar1 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(ptrLong3[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uintVar1 & 0x82) != 0 || ((*(byte *)(ptrLong3[4] + 0x25) & 0x10) != 0)))) ||\n             (intVar = bfd_decode_symclass(ptrLong3), intVar == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = ptrChar3;\n              htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uintVar1 & 0x82) == 0) && (ptrCode != bfd_map_over_sections)) &&\n                  ((*(byte *)(ptrLong3[4] + 0x25) & 0x10) == 0)) {\n            if ((uintVar1 & 4) == 0) {\n              if (((*(int *)(ptrUInt642[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(ptrLong3[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVar2 = bfd_is_local_label(ptrUInt642);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            ulongVar4 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(ulongVar4);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = ptrChar3;\n          htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uintVar1 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = ptrChar3;\n            htab_traverse(DAT_00127a10,pattern_matching_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((uintVar1 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = ptrChar3;\n            htab_traverse(DAT_00127a28,pattern_matching_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = process_binary_001159d0(ptrLong3[4]);\n          if (charVar2 == '\\0') {\n            if (((uintVar1 & 0x800002) == 0) && (ptrCode != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uintVar1 & 0x82) != 0) {\n                charVar2 = check_matching_pattern_00115d70(ptrChar3);\n                if ((charVar2 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                    (charVar2 = check_matching_pattern_00115d70(ptrChar3), charVar2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (uintVar2 = *(uint *)(ptrLong3 + 3), (uintVar2 & 0x200000) != 0)) ||\n                       (lVar27 = *ptrLong3, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)ptrLong3 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uintVar2 = *(uint *)(ptrLong3 + 3);\n                }\n                *(uint *)(ptrLong3 + 3) = uintVar2 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uintVar1 & 1) != 0) && (charVar2 = check_matching_pattern_00115d70(ptrChar3), charVar2 != '\\0')) {\n                *(uint *)(ptrLong3 + 3) = *(uint *)(ptrLong3 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVar2 = check_matching_pattern_00115d70(ptrChar3), charVar2 != '\\0')) {\n                *(uint *)(ptrLong3 + 3) = *(uint *)(ptrLong3 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (ptrCode != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = ptrLong3;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _bitStack = _bitStack + 1;\n      } while (in_stack_00000010 != _bitStack);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      ptrUInt642 = DAT_001279c8;\n      intVar = DAT_001279c0;\n      for (lVar27 = 0; lVar27 < intVar; lVar27 = lVar27 + 1) {\n        ptrChar4 = (char *)ptrUInt642[5];\n        if (ptrChar4 == (char *)0x0) {\n          longVar = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          ulongVar4 = initialize_section_data_0011a2e0(ptrUInt642,in_stack_00000008);\n          *(undefined8 *)(lVar25 + longVar) = ulongVar4;\n          intVar = DAT_001279c0;\n        }\n        else if (ptrChar4 != \"\") {\n          ulongVar4 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_message_and_exit_00119dd0(ulongVar4,ptrChar4);\n        }\n        ptrUInt642 = (undefined8 *)*ptrUInt642;\n      }\n    }\n    boolVar = DAT_001279a0 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((boolVar) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      intVar = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((intVar != 5) && (intVar != 2)) {\n        ulongVar4 = **(undefined8 **)(in_stack_00000008 + 8);\n        ulongVar3 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_001126c0(0,in_stack_00000008,0,ulongVar3,ulongVar4);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = improve_and_extract_code_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar2 = bfd_set_section_size(lVar25,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(lVar27,in_stack_00000140), charVar2 == '\\0')) {\n        ptrChar4 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        ulongVar4 = dcgettext(0,ptrChar4,5);\n        print_error_001126c0(0,in_stack_00000008,0,ulongVar4);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar2 == '\\0')) {\n        ptrChar4 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_00127a18);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a28), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_00127a08), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_00127a00), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279f8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279f0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278f0), lVar25 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(ptrUInt642,process_binary_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(ptrUInt642,process_and_reverse_section_contents_00116110,in_stack_00000008);\n  for (ptrUInt642 = DAT_001279e0; ptrUInt64 = DAT_001279d8, ptrUInt642 != (undefined8 *)0x0;\n      ptrUInt642 = (undefined8 *)*ptrUInt642) {\n    charVar2 = bfd_set_section_contents(in_stack_00000008,ptrUInt642[5],ptrUInt642[4],0,ptrUInt642[3]);\n    if (charVar2 == '\\0') {\n      print_error_001126c0(0,in_stack_00000008,ptrUInt642[5],0);\n      return 0;\n    }\n  }\n  for (; ptrUInt64 != (undefined8 *)0x0; ptrUInt64 = (undefined8 *)*ptrUInt64) {\n    ulongVar4 = *(undefined8 *)(ptrUInt64[5] + 0x60);\n    charVar2 = bfd_set_section_contents(in_stack_00000008,ulongVar4,ptrUInt64[4],0,ptrUInt64[3]);\n    if (charVar2 == '\\0') {\n      print_error_001126c0(0,in_stack_00000008,ulongVar4,0);\n      return 0;\n    }\n  }\n  if (ptrLong4 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      ulongVar4 = *ptrUInt642;\n      ulongVar3 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(ulongVar3,ulongVar4);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = DAT_00127a30, charVar2 != '\\0')) {\n      uintVar1 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(ptrUInt642);\n      uVar24 = (ulong)uintVar1;\n      if ((char)uintVar1 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        charVar2 = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (charVar2 != '\\0') {\n          return uVar24;\n        }\n        ulongVar4 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(ulongVar4,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          ulongVar4 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(ulongVar4);\n          return uVar24;\n        }\n        ulongVar4 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(ulongVar4);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      ulongVar4 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_001126c0(0,in_stack_00000008,0,ulongVar4);\n    }\n    else {\n      ulongVar4 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_001126c0(0,in_stack_00000008,0,ulongVar4,lVar25);\n    }\n    return 0;\n  }\n  ptrLong2 = (long *)0x0;\n  ptrUInt642 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (ptrUInt642 == (undefined8 *)0x0) {\n      do {\n        ptrLong2 = (long *)ptrLong4[3];\n        free((void *)ptrLong4[1]);\n        free(ptrLong4);\n        ptrLong4 = ptrLong2;\n      } while (ptrLong2 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(ptrUInt642[0x1a] + 4) == 7)) &&\n       (charVar2 = compare_strings_00113fb0(*ptrUInt642,\".gnu.build.attributes\"), charVar2 != '\\0')) {\n      if (ptrLong2 == (long *)0x0) {\n        ptrLong2 = ptrLong4;\n      }\n      ptrLong3 = ptrLong4;\n      if (*(undefined8 **)(*ptrLong2 + 0x60) == ptrUInt642) {\nLAB_0010625f:\n        ptrChar4 = \"error: failed to merge notes\";\n        if (ptrLong2[1] != 0) {\n          charVar2 = bfd_set_section_contents(in_stack_00000008,ptrUInt642,ptrLong2[1],0,ptrLong2[2]);\n          if (charVar2 == '\\0') {\n            ulongVar4 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_001126c0(0,in_stack_00000008,ptrUInt642,ulongVar4);\n            return 0;\n          }\n          ptrLong2 = (long *)ptrLong2[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          ptrLong2 = ptrLong3;\n          if (*(undefined8 **)(*ptrLong3 + 0x60) == ptrUInt642) goto LAB_0010625f;\n          ptrLong2 = (long *)ptrLong3[3];\n          ptrLong3 = ptrLong2;\n        } while (ptrLong2 != (long *)0x0);\n        ptrChar4 = \"error: failed to locate merged notes\";\n      }\n      ulongVar4 = dcgettext(0,ptrChar4,5);\n      print_error_001126c0(0,in_stack_00000008,ptrUInt642,ulongVar4);\n    }\nLAB_001061be:\n    ptrUInt642 = (undefined8 *)ptrUInt642[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_and_process_debug_info_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid calculateHash_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "calculate_hash_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_debug_records_0010c1c6",
                "param_1": "record",
                "param_2": "context",
                "puVar1": "nextRecordPtr",
                "cVar2": "debugRecordResult",
                "__ptr": "currentRecordPtr"
            },
            "code": "\nundefined processDebugRecords_0010c1c6(undefined8 record,long context,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *nextRecordPtr;\n  char debugRecordResult;\n  undefined8 *currentRecordPtr;\n  \n  currentRecordPtr = *(undefined8 **)(context + 0x78);\n  while( true ) {\n    if (currentRecordPtr == (undefined8 *)0x0) {\n      *(undefined8 *)(context + 0x78) = 0;\n      return 1;\n    }\n    debugRecordResult = debug_record_variable_0010c05d(record,currentRecordPtr[1],currentRecordPtr[2],*(undefined4 *)(currentRecordPtr + 3),currentRecordPtr[4],param_6,\n                         param_5);\n    if (debugRecordResult == '\\0') break;\n    nextRecordPtr = (undefined8 *)*currentRecordPtr;\n    free(currentRecordPtr);\n    currentRecordPtr = nextRecordPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "process_debug_records_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "baseAddress",
                "puVar4": "resultArray",
                "unaff_RBP": "framePointer",
                "unaff_R13": "dataArray",
                "uVar1": "arrayLength",
                "lVar2": "dataValue",
                "cVar3": "patternMatchResult",
                "puVar5": "currentResult",
                "uVar6": "currentIndex"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint arrayLength;\n  long dataValue;\n  char patternMatchResult;\n  long baseAddress;\n  undefined8 *resultArray;\n  undefined8 *currentResult;\n  long framePointer;\n  ulong currentIndex;\n  undefined8 *dataArray;\n  \n  arrayLength = *(uint *)(baseAddress + 0x78);\n  if (DAT_00127a48 == 7) {\n    resultArray = dataArray;\n    for (currentIndex = 0; currentIndex != arrayLength; currentIndex = currentIndex + 1) {\n      currentResult = resultArray;\n      if (((*(long **)dataArray[currentIndex] != (long *)0x0) &&\n          (dataValue = **(long **)dataArray[currentIndex], dataValue != 0)) &&\n         (patternMatchResult = check_matching_pattern_00115d70(*(undefined8 *)(dataValue + 8),DAT_00127a28), patternMatchResult != '\\0')) {\n        currentResult = resultArray + 1;\n        *resultArray = dataArray[currentIndex];\n      }\n      resultArray = currentResult;\n    }\n    *resultArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(framePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_00114d60",
                "param_1": "fileInfo",
                "iVar1": "feofResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errMsg",
                "uVar4": "errMessage",
                "__stream": "filePtr",
                "uVar5": "allocResult",
                "sVar6": "readSize",
                "lVar7": "totalReadSize",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readFileAndStore_00114d60(long fileInfo)\n\n{\n  int feofResult;\n  int *errnoPtr;\n  char *errMsg;\n  undefined8 errMessage;\n  FILE *filePtr;\n  undefined8 allocResult;\n  size_t readSize;\n  long totalReadSize;\n  long bufferSize;\n  \n  filePtr = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePtr == (FILE *)0x0) {\n    errnoPtr = __errno_location();\n    errMsg = strerror(*errnoPtr);\n    allocResult = *(undefined8 *)(fileInfo + 0x10);\n    errMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_message_and_exit_00119dd0(errMessage,allocResult,errMsg);\n  }\n  bufferSize = 0x1000;\n  totalReadSize = 0;\n  allocResult = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocResult;\n  while( true ) {\n    feofResult = feof(filePtr);\n    if (feofResult != 0) {\n      *(long *)(fileInfo + 0x18) = totalReadSize;\n      fclose(filePtr);\n      return;\n    }\n    if (totalReadSize == bufferSize) {\n      bufferSize = totalReadSize * 2;\n      allocResult = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = allocResult;\n    }\n    readSize = fread((void *)(*(long *)(fileInfo + 0x20) + totalReadSize),1,bufferSize - totalReadSize,filePtr);\n    feofResult = ferror(filePtr);\n    if (feofResult != 0) break;\n    totalReadSize = totalReadSize + readSize;\n  }\n  allocResult = *(undefined8 *)(fileInfo + 0x10);\n  errMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_message_and_exit_00119dd0(errMessage,allocResult);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_file_and_store_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_error_if_section_not_found_00108808",
                "unaff_RBP": "stack_base",
                "uVar1": "section_address",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_if_section_not_found_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long stack_base;\n  \n  section_address = *(undefined8 *)(stack_base + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_message_and_exit_00119dd0(error_message,section_address);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_error_if_section_not_found_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "ppbVar2": "linePtr",
                "pbVar3": "currentChar",
                "bVar4": "currentByte",
                "pbVar5": "nextChar",
                "pbVar6": "charPtr",
                "pbVar7": "prevChar",
                "unaff_EBP": "lineCounter",
                "unaff_R13": "callbackFn",
                "unaff_R14": "lineStart",
                "unaff_R15": "lineEnd",
                "in_stack_00000008": "formatStr",
                "in_stack_00000010": "returnAddress"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **linePtr;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  int lineCounter;\n  byte *charPtr;\n  undefined8 callbackFn;\n  byte *prevChar;\n  byte *lineStart;\n  byte *lineEnd;\n  undefined8 formatStr;\n  undefined8 *returnAddress;\n  \n  *lineStart = 0;\nLAB_00114520:\n  lineStart = lineStart + 1;\n  do {\n    currentByte = *lineStart;\n    prevChar = lineStart;\n    if (currentByte == 10) {\n      *lineStart = 0;\n      if (lineStart[1] == 0xd) {\n        prevChar = lineStart + 1;\n        nextChar = lineStart + 2;\n      }\n      else {\n        nextChar = lineStart + 1;\n      }\n    }\n    else if ((char)currentByte < '\\v') {\n      if (currentByte != 0) goto LAB_00114520;\n      nextChar = lineStart + 1;\n    }\n    else {\n      if (currentByte != 0xd) break;\n      *lineStart = 0;\n      nextChar = lineStart + 1;\n      if (lineStart[1] == 10) {\n        nextChar = lineStart + 2;\n        prevChar = lineStart + 1;\n      }\n    }\n    currentByte = *lineEnd;\n    while ((currentByte == 0x20 || (charPtr = lineEnd, currentByte == 9))) {\n      charPtr = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      currentByte = *charPtr;\n    }\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = charPtr[1];\n      charPtr = charPtr + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentByte = charPtr[1];\n      if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n            ((currentByte = charPtr[2], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = charPtr[3], currentByte == 9 || (currentByte == 0x20)))) &&\n          ((currentByte = charPtr[4], currentByte == 9 || (currentByte == 0x20)))) &&\n         ((currentByte = charPtr[5], currentByte == 9 || (currentByte == 0x20)))) {\n        currentByte = charPtr[6];\n        currentChar = charPtr + 6;\n        if ((currentByte == 9) || (currentByte == 0x20)) {\n          do {\n            do {\n              currentByte = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (currentByte == 0x20);\n          } while (currentByte == 9);\n        }\n      }\n      if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(uVar1,formatStr,lineCounter);\n      }\n    }\nLAB_00114599:\n    *charPtr = 0;\n    if (lineEnd < charPtr) {\n      linePtr = (byte **)htab_find_slot();\n      *linePtr = lineEnd;\n    }\n    lineCounter = lineCounter + 1;\n    lineStart = nextChar;\n    lineEnd = nextChar;\n    if (prevChar[1] == 0) {\n      *returnAddress = callbackFn;\n      return;\n    }\n  } while( true );\n  if (currentByte == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_00119940",
                "param_1": "vma_address",
                "param_2": "error_message",
                "uVar1": "translated_error",
                "local_20": "scan_result"
            },
            "code": "\nvoid check_and_print_error_00119940(undefined8 vma_address,undefined8 error_message)\n\n{\n  undefined8 translated_error;\n  char *scan_result [2];\n  \n  bfd_scan_vma(vma_address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  translated_error = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(translated_error,error_message,vma_address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_operation_0010540e",
                "param_1": "undefined",
                "param_2": "inputParam",
                "param_3": "operationCode",
                "in_RAX": "tempValue"
            },
            "code": "\nvoid executeOperation_0010540e(undefined8 undefined,long inputParam,uint operationCode)\n\n{\n  long tempValue;\n  \n  if ((operationCode == 2) && (*(int *)(*(long *)(inputParam + 8) + 8) == 2)) {\n    operationCode = (uint)*(byte *)(*(long *)(*(long *)(inputParam + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(tempValue + 0x380) + 0x78))(undefined,operationCode != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_operation_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_files_and_update_values_00113a4d",
                "param_1": "file_1",
                "param_2": "file_2",
                "param_3": "data_ptr",
                "cVar1": "result",
                "uVar2": "updated_value",
                "puVar3": "ptr",
                "auVar4": "result_array"
            },
            "code": "\nundefined8\nprocess_files_and_update_values_00113a4d(undefined8 file_1,undefined8 file_2,long data_ptr,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  char result;\n  undefined8 updated_value;\n  undefined8 *ptr;\n  undefined result_array [16];\n  \n  result = process_and_check_files_00112502(file_1,file_2,*(undefined8 *)(data_ptr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data_ptr + 0x28) == 0 && (*(long *)(data_ptr + 8) != 0)) ||\n      (result = process_and_update_data_0010ec73(file_2,*(undefined8 *)(data_ptr + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(data_ptr + 0x28) != (undefined8 *)0x0) {\n      for (ptr = (undefined8 *)**(undefined8 **)(data_ptr + 0x28); ptr != (undefined8 *)0x0;\n          ptr = (undefined8 *)*ptr) {\n        result = process_function_001135a5(file_1,file_2,ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptr = *(undefined8 **)(data_ptr + 0x10); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      result = process_files_and_update_values_00113a4d(file_1,file_2,ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    result_array = process_and_check_files_00112502(file_1,file_2,*(undefined8 *)(data_ptr + 0x20));\n    if (result_array[0] != '\\0') {\n      if ((*(long *)(data_ptr + 0x28) == 0) && (*(long *)(data_ptr + 8) != 0)) {\n        return result_array._0_8_;\n      }\n      updated_value = update_max_value_0010ed2c(file_2,*(undefined8 *)(data_ptr + 0x20),result_array._8_8_,param_5);\n      return updated_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_00112502",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_files_and_update_values_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "return_value",
                "unaff_RBX": "memory_address",
                "param_7": "input_param"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 return_value;\n  void *memory_address;\n  undefined8 input_param;\n  \n  input_param = return_value;\n  free(memory_address);\n  return input_param;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010e9a0",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_0010922b",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "allocate_memory_block_00113b71",
                "param_1": "input_value",
                "lVar1": "memory_block",
                "initialize_memory_block_00112904": "initialize_memory_block"
            },
            "code": "\nlong allocate_memory_block_00113b71(long input_value)\n\n{\n  long memory_block;\n  \n  if (input_value != 0) {\n    memory_block = initialize_memory_block(0x14,0);\n    if (memory_block == 0) {\n      memory_block = 0;\n    }\n    else {\n      *(long *)(memory_block + 0x10) = input_value;\n    }\n    return memory_block;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "allocate_memory_block_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_increment_00109dfe",
                "param_1": "object",
                "lVar1": "current_value",
                "local_40": "output_string"
            },
            "code": "\nvoid initialize_or_increment_00109dfe(long object)\n\n{\n  long current_value;\n  char output_string [40];\n  \n  if (*(long *)(object + 0x70) != 0) {\n    initialize_object_with_params_00109cf4(object,*(long *)(object + 0x70),0);\n    return;\n  }\n  current_value = *(long *)(object + 0x68);\n  *(long *)(object + 0x68) = current_value + 1;\n  *(long *)(object + 0x70) = current_value;\n  sprintf(output_string,\"%ld=%ld\",current_value,current_value);\n  initialize_object_00109b52(object,output_string,current_value,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_increment_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "param",
                "__s": "stringPtr",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long param)\n\n{\n  char *stringPtr;\n  size_t stringLength;\n  \n  if (*(long *)(param + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(param + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLength = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLength) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "concatenate_strings_0010ae0e",
                "param_1": "input",
                "lVar1": "structPointer",
                "lVar2": "stringsArray",
                "__ptr": "tempPointer",
                "pcVar3": "tempString",
                "sVar4": "stringLen1",
                "sVar5": "stringLen2",
                "pcVar6": "resultString",
                "uVar7": "returnValue",
                "lVar8": "resultLen",
                "uVar9": "counter",
                "uVar10": "arrayLen"
            },
            "code": "\nundefined8 concatenateStrings_0010ae0e(long input)\n\n{\n  long structPointer;\n  long stringsArray;\n  void *tempPointer;\n  char *tempString;\n  size_t stringLen1;\n  size_t stringLen2;\n  char *resultString;\n  undefined8 returnValue;\n  long resultLen;\n  uint counter;\n  ulong arrayLen;\n  \n  returnValue = 0;\n  structPointer = *(long *)(input + 0x60);\n  if (((structPointer != 0) && (*(char **)(structPointer + 8) != (char *)0x0)) &&\n     (resultString = *(char **)(structPointer + 0x20), resultString != (char *)0x0)) {\n    stringLen1 = strlen(*(char **)(structPointer + 8));\n    stringLen2 = strlen(resultString);\n    stringsArray = *(long *)(structPointer + 0x28);\n    if (stringsArray == 0) {\n      resultLen = stringLen1 + stringLen2 + 10;\n      arrayLen = 0;\n    }\n    else {\n      resultLen = stringLen1 + stringLen2 + 0x1e;\n      arrayLen = 0;\n      while( true ) {\n        resultString = *(char **)(stringsArray + arrayLen * 8);\n        if (resultString == (char *)0x0) break;\n        stringLen1 = strlen(resultString);\n        arrayLen = (ulong)((int)arrayLen + 1);\n        resultLen = resultLen + stringLen1;\n      }\n    }\n    if (*(char **)(structPointer + 0x30) != (char *)0x0) {\n      stringLen1 = strlen(*(char **)(structPointer + 0x30));\n      resultLen = resultLen + stringLen1;\n    }\n    if (*(char **)(structPointer + 0x38) != (char *)0x0) {\n      stringLen1 = strlen(*(char **)(structPointer + 0x38));\n      resultLen = resultLen + stringLen1;\n    }\n    resultString = (char *)xmalloc(resultLen);\n    structPointer = *(long *)(input + 0x60);\n    strcpy(resultString,*(char **)(structPointer + 8));\n    if (*(long *)(structPointer + 0x28) != 0) {\n      counter = 0;\n      stringLen1 = strlen(resultString);\n      sprintf(resultString + stringLen1,\"!%u,\",arrayLen);\n      while( true ) {\n        structPointer = *(long *)(input + 0x60);\n        arrayLen = (ulong)counter;\n        tempPointer = *(void **)(structPointer + 0x28);\n        tempString = *(char **)((long)tempPointer + arrayLen * 8);\n        if (tempString == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(resultString,tempString);\n        free(*(void **)(*(long *)(structPointer + 0x28) + arrayLen * 8));\n      }\n      free(tempPointer);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    structPointer = *(long *)(input + 0x60);\n    strcat(resultString,*(char **)(structPointer + 0x20));\n    free(*(void **)(structPointer + 0x20));\n    structPointer = *(long *)(input + 0x60);\n    *(undefined8 *)(structPointer + 0x20) = 0;\n    if (*(char **)(structPointer + 0x30) != (char *)0x0) {\n      strcat(resultString,*(char **)(structPointer + 0x30));\n      free(*(void **)(structPointer + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    stringLen1 = strlen(resultString);\n    structPointer = *(long *)(input + 0x60);\n    *(undefined2 *)(resultString + stringLen1) = 0x3b;\n    tempString = *(char **)(structPointer + 0x38);\n    if (tempString != (char *)0x0) {\n      strcpy(resultString + stringLen1 + 1,tempString);\n      free(*(void **)(structPointer + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    structPointer = *(long *)(input + 0x60);\n    *(char **)(structPointer + 8) = resultString;\n    returnValue = CONCAT71((int7)((ulong)structPointer >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "strcat",
                "strcpy",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_function_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "iVar1": "result",
                "cVar2": "status",
                "uVar3": "output",
                "puVar4": "currentItem",
                "puVar5": "itemList"
            },
            "code": "\nundefined8 processFunction_001135a5(undefined8 input1,undefined8 input2,long data)\n\n{\n  int result;\n  char status;\n  undefined8 output;\n  undefined8 *currentItem;\n  undefined8 *itemList;\n  \n  if (6 < *(uint *)(data + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(data + 0x14)) {\n  case 0:\n    status = process_debug_function_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (status != '\\0') {\n      output = process_string_0010e6a8(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 1:\n    status = process_debug_function_00112c1f(input1,input2,*(undefined8 *)(data + 0x20),data);\n    if (status != '\\0') {\n      output = combine_and_process_strings_0010e7c2(input2,*(undefined8 *)(data + 8));\n      return output;\n    }\n    break;\n  case 2:\n    status = process_debug_function_00112c1f(input1,input2,*(undefined8 *)(*(long *)(data + 0x20) + 8),0);\n    if (status != '\\0') {\n      output = process_input_0010e9a0(input2,*(undefined8 *)(data + 8),**(undefined4 **)(data + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(data + 0x20) + 4));\n      return output;\n    }\n    break;\n  case 3:\n    itemList = *(undefined8 **)(data + 0x20);\n    result = *(int *)(data + 0x18);\n    output = *(undefined8 *)(data + 8);\n    status = process_and_check_files_00112502(input1,input2,*(undefined8 *)(itemList[2] + 0x18));\n    if (((status != '\\0') && (status = process_debug_function_00112c1f(input1,input2,*itemList,0), status != '\\0')) &&\n       (status = process_string_0010eafe(input2,output,result == 2), status != '\\0')) {\n      for (currentItem = (undefined8 *)itemList[1]; currentItem != (undefined8 *)0x0;\n          currentItem = (undefined8 *)*currentItem) {\n        status = process_debug_function_00112c1f(input1,input2,currentItem[2],0);\n        if (status == '\\0') {\n          return 0;\n        }\n        status = process_and_print_string_0010ebb0(input2,currentItem[1],*(undefined4 *)(currentItem + 3));\n        if (status == '\\0') {\n          return 0;\n        }\n      }\n      itemList = (undefined8 *)itemList[2];\n      while( true ) {\n        if (itemList == (undefined8 *)0x0) {\n          output = get_one_00108f05(input2);\n          return output;\n        }\n        status = process_files_and_update_values_00113a4d(input1,input2,itemList);\n        if (status == '\\0') break;\n        itemList = (undefined8 *)*itemList;\n      }\n    }\n    break;\n  case 4:\n    output = process_and_format_string_0010e842(input2,*(undefined8 *)(data + 8),*(undefined8 *)(data + 0x20));\n    return output;\n  case 5:\n    output = process_and_free_string_0010e8a9(*(undefined8 *)(data + 0x20),input2,*(undefined8 *)(data + 8));\n    return output;\n  case 6:\n    status = process_debug_function_00112c1f(input1,input2,**(undefined8 **)(data + 0x20),0);\n    if (status != '\\0') {\n      output = process_string_and_free_0010e918(input2,*(undefined8 *)(data + 8),\n                           *(undefined8 *)(*(long *)(data + 0x20) + 8));\n      return output;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010e842",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112502",
                "FUN_0010e918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_function_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = combine_and_process_strings_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_input_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_and_check_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_debug_function_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_string_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_debug_function_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_print_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = get_one_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = process_and_format_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = process_and_free_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_and_free_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = construct_filename_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = construct_filename_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = construct_filename_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_entries_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_entries_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_entries_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = reorganize_and_improve_debugging_data_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_and_free_memory_block_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_debug_records_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_buffer_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_and_free_memory_block_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = parse_debug_records_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_debug_tag_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_block_debugging_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debugging_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = record_debug_function_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_line_debug_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = initialize_section_data_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_message_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = check_matching_pattern_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = check_matching_pattern_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = check_matching_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_matching_pattern_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = initialize_section_data_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = improve_and_extract_code_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_and_reverse_section_contents_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)process_build_attribute_notes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "printf",
                "bfd_set_file_flags",
                "bfd_get_arch",
                "bfd_set_start_address",
                "dcgettext",
                "bfd_get_mach",
                "FUN_001152b6"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ae0e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "demangle_and_initialize_0010b0fa",
                "param_3": "demangle_param",
                "param_4": "memory_param",
                "param_5": "flag_param",
                "uVar1": "demangle_code",
                "iVar2": "comparison_result",
                "pcVar3": "result",
                "plVar4": "ptr_list",
                "pcVar5": "auxiliary_result",
                "sVar6": "string_length",
                "__ptr": "memory_ptr",
                "lVar7": "name_length",
                "local_40": "local_buffer"
            },
            "code": "\n\n\nchar * demangleAndInitialize_0010b0fa(undefined8 param_1,undefined8 param_2,uint *demangle_param,long memory_param,\n                   undefined *flag_param)\n\n{\n  uint demangle_code;\n  int comparison_result;\n  char *result;\n  long *ptr_list;\n  char *auxiliary_result;\n  size_t string_length;\n  void *memory_ptr;\n  long name_length;\n  undefined local_buffer [16];\n  \n  if (flag_param != (undefined *)0x0) {\n    *flag_param = 0;\n  }\n  while( true ) {\n    demangle_code = *demangle_param;\n    if (0x29 < demangle_code) break;\n    if (0x17 < demangle_code) {\n      switch(demangle_code) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)demangleAndInitialize_0010b0fa(param_1,param_2,*(undefined8 *)(demangle_param + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*demangle_param) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)initialize_memory_block_with_param_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)allocate_memory_block_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)allocate_memory_block_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)initialize_memory_block_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,demangle_param,0x14,local_buffer);\n        if (result == (char *)0x0) {\n          auxiliary_result = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_memory_block_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          auxiliary_result = (char *)initialize_memory_block_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_memory_block_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_memory_block_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_memory_block_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          auxiliary_result = (char *)initialize_block_with_parameter_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          auxiliary_result = \"Unexpected demangled varargs\\n\";\n          if (flag_param == (undefined *)0x0) goto LAB_0010b6a9;\n          *flag_param = 1;\n        }\n        else {\n          auxiliary_result = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          auxiliary_result = (char *)dcgettext(0,auxiliary_result,5);\n          fprintf(_stderr,auxiliary_result);\n        }\n        auxiliary_result = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return auxiliary_result;\n      case 0x29:\n        if (*(long *)(demangle_param + 4) == 0) {\n          memory_ptr = (void *)initialize_memory_block_00113e17();\n        }\n        else {\n          memory_ptr = (void *)demangleAndInitialize_0010b0fa(param_1,param_2,*(long *)(demangle_param + 4),0,0);\n        }\n        if (memory_ptr != (void *)0x0) {\n          name_length = extract_arglist_demangled_names_0010b6ea(param_1,param_2,*(undefined8 *)(demangle_param + 6),local_buffer);\n          if (name_length != 0) {\n            result = (char *)initialize_memory_00113ce0(memory_ptr,name_length,local_buffer[0]);\n            return result;\n          }\n          free(memory_ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (demangle_code != 1) {\n      if (demangle_code == 4) {\n        result = (char *)cplus_demangle_print(3,demangle_param,0x14,local_buffer);\n        auxiliary_result = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          string_length = strlen(result);\n          auxiliary_result = (char *)find_string_in_memory_0010afd5(param_1,param_2,result,string_length & 0xffffffff,9);\n          free(result);\n          return auxiliary_result;\n        }\nLAB_0010b3d3:\n        auxiliary_result = (char *)dcgettext(0,auxiliary_result,5);\n        fprintf(_stderr,auxiliary_result);\n        return result;\n      }\n      if (demangle_code == 0) {\n        if ((memory_param == 0) || (ptr_list = (long *)extract_real_value_00113b1e(memory_param), ptr_list == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    memory_param = demangleAndInitialize_0010b0fa(param_1,param_2,*(undefined8 *)(demangle_param + 4),memory_param,0);\n    if (memory_param == 0) goto LAB_0010b38c;\n    demangle_param = *(uint **)(demangle_param + 6);\n    flag_param = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)demangle_code);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*ptr_list == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)find_string_in_memory_0010afd5(param_1,param_2,*(undefined8 *)(demangle_param + 4),demangle_param[6],0);\n    return result;\n  }\n  result = *(char **)(*ptr_list + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  auxiliary_result = (char *)get_return_value_001129f4(result);\n  if (auxiliary_result != (char *)0x0) {\n    string_length = strlen(auxiliary_result);\n    if ((demangle_param[6] == (uint)string_length) &&\n       (comparison_result = strncmp(auxiliary_result,*(char **)(demangle_param + 4),(long)(int)demangle_param[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  ptr_list = ptr_list + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "abort",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113dfe",
                "FUN_0010b0fa",
                "fprintf",
                "FUN_0010b6ea",
                "FUN_00113d3a",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "strncmp",
                "FUN_00113cb9",
                "FUN_00112904",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "demangle_and_initialize_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "uVar1": "msg",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "in_CL": "currentLineChar",
                "bVar4": "nextChar",
                "unaff_RBX": "line",
                "unaff_EBP": "lineIndex",
                "pbVar5": "nextLine",
                "unaff_R13": "msg",
                "unaff_R14": "line",
                "unaff_R15": "nextLine",
                "in_stack_00000008": "msg",
                "in_stack_00000010": "funcPtr"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 msg;\n  byte **slot;\n  byte *currentChar;\n  byte currentLineChar;\n  byte nextChar;\n  byte *line;\n  int lineIndex;\n  byte *nextLine;\n  undefined8 msg;\n  byte *line;\n  byte *nextLine;\n  undefined8 msg;\n  undefined8 *funcPtr;\n  \n  do {\n    nextLine = nextLine;\n    if (currentLineChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentLineChar == 10) || (currentLineChar == 0xd)) goto LAB_00114676;\n      if (currentLineChar == 0) goto LAB_00114599;\n      currentLineChar = nextLine[1];\n      nextLine = nextLine + 1;\n    } while ((currentLineChar != 0x20) && (currentLineChar != 9));\n    if ((char)currentLineChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentLineChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = nextLine[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = nextLine[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = nextLine[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = nextLine[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = nextLine[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = nextLine[6];\n        currentChar = nextLine + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        msg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(msg,msg,lineIndex);\n      }\n    }\nLAB_00114599:\n    *nextLine = 0;\n    if (nextLine < nextLine) {\n      slot = (byte **)htab_find_slot();\n      *slot = nextLine;\n    }\n    lineIndex = lineIndex + 1;\n    nextLine = line;\n    if (line[1] == 0) {\n      *funcPtr = msg;\n      return;\n    }\n    for (; nextChar = *nextLine, line = nextLine, nextChar != 10; nextLine = nextLine + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentChar = nextLine + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *nextLine = 0;\n          currentChar = nextLine + 1;\n          if (nextLine[1] == 10) {\n            currentChar = nextLine + 2;\n            line = nextLine + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *nextLine = 0;\n    if (nextLine[1] == 0xd) {\n      line = nextLine + 1;\n      currentChar = nextLine + 2;\n    }\n    else {\n      currentChar = nextLine + 1;\n    }\nLAB_00114553:\n    currentLineChar = *line;\n    nextLine = line;\n    while (line = currentChar, currentLineChar == 0x20) {\nLAB_00104c3f:\n      nextLine = nextLine + 1;\n      nextLine = nextLine + 1;\n      currentChar = line;\n      currentLineChar = *nextLine;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "reorganize_and_improve_debugging_data_0010554f",
                "param_7": "bfd_handle",
                "param_8": "num_sections",
                "param_17": "section_list",
                "param_21": "debug_link_filename",
                "param_23": "num_notes",
                "param_26": "note_list",
                "param_30": "section_data_list",
                "param_31": "section_data_sizes",
                "param_33": "debug_link_contents"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 reorganize_and_improve_debugging_data_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long bfd_handle;\n  ulong num_sections;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *section_list;\n  undefined8 in_stack_00000068;\n  undefined8 debug_link_filename;\n  long num_notes;\n  char *param_24;\n  long note_list;\n  long *section_data_list;\n  ulong section_data_sizes;\n  long param_32;\n  long in_stack_000000d8;\n  void *debug_link_contents;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    section_list = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    section_list = (long *)xmalloc(lVar14);\n    param_40 = section_list;\n    bfd_map_over_sections(bfd_handle,update_pointer_value_0010870e,&stack0x00000140);\n    qsort(section_list,(ulong)in_stack_00000068._4_4_,8,compare_records_0010875d);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = section_list + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(bfd_handle,*plVar28);\n          uVar13 = bfd_octets_per_byte(bfd_handle);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_001126c0(0,bfd_handle,*plVar28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127989 != '\\0') {\n      uVar12 = bfd_octets_per_byte(bfd_handle);\n      lVar14 = section_list[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_001126c0(0,bfd_handle,section_list[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)initialize_buffer_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              note_list = 0;\n              num_notes = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  num_notes = note_list;\n                  note_list = note_list + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + num_notes;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)num_notes);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_and_free_memory_block_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = parse_debug_records_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = process_debug_info_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + num_sections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = initialize_buffer_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + num_sections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          update_and_free_memory_block_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_debug_records_0011173a(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar14 != 0) && (cVar7 = process_debug_info_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (num_sections != 0)) {\n        param_40 = (long *)0x0;\n        section_data_list = plVar28;\n        param_32 = 0;\n        section_data_sizes = num_sections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)num_sections <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = process_debug_tag_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = start_block_debugging_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = end_block_debugging_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = record_debug_function_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_line_debug_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(bfd_handle + 0x44) & 0x42) != 0) && ((*(uint *)(bfd_handle + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(bfd_handle + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (num_sections != 0) {\n        plVar28 = DAT_001278d0 + num_sections;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(bfd_handle + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278d0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (num_sections == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = initialize_section_data_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278f8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(bfd_handle + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(bfd_handle + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(bfd_handle + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(bfd_handle + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a10,pattern_matching_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a28,pattern_matching_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = process_binary_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = check_matching_pattern_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = check_matching_pattern_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = check_matching_pattern_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = check_matching_pattern_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (num_sections != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = initialize_section_data_0011a2e0(puVar26,bfd_handle);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        num_sections = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(bfd_handle + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        debug_link_contents = (void *)0x0;\n        cVar7 = improve_and_extract_code_0011378f(bfd_handle,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(bfd_handle,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(bfd_handle,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(bfd_handle,lVar14,section_data_list,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(bfd_handle,lVar37,debug_link_contents,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_001126c0(0,bfd_handle,0,uVar17);\n          free(debug_link_contents);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(bfd_handle + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_001126c0(0,bfd_handle,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,process_binary_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(bfd_handle,DAT_001278c8,num_sections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,bfd_handle);\n    bfd_map_over_sections(unaff_R14,process_and_reverse_section_contents_00116110,bfd_handle);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(bfd_handle,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        print_error_001126c0(0,bfd_handle,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(bfd_handle,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        print_error_001126c0(0,bfd_handle,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(bfd_handle + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(bfd_handle + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = compare_strings_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(bfd_handle,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_001126c0(0,bfd_handle,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_001126c0(0,bfd_handle,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(bfd_handle,debug_link_filename), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*section_list + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(bfd_handle,*section_list,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                print_error_001126c0(0,bfd_handle,*section_list,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          section_list = section_list + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(bfd_handle + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(bfd_handle,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(bfd_handle + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(bfd_handle + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_001126c0(0,bfd_handle,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_001126c0(0,bfd_handle,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "bfd_get_section_by_name",
                "bfd_coff_get_auxent",
                "FUN_0010be1a",
                "bfd_coff_get_syment",
                "bfd_get_section_contents",
                "FUN_00113fb0",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010870e",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_0011a2e0",
                "htab_elements",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "FUN_001159d0",
                "xmalloc",
                "bfd_get_error",
                "bfd_map_over_sections",
                "bfd_set_error",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_00115d70",
                "FUN_00108863",
                "FUN_0011a170",
                "bfd_make_section_with_flags",
                "qsort",
                "bfd_set_symtab",
                "FUN_00112894",
                "FUN_0011173a",
                "bfd_map_over_sections",
                "strlen",
                "FUN_00116110",
                "bfd_is_local_label",
                "strcpy",
                "bfd_set_section_contents",
                "strcmp",
                "bfd_octets_per_byte",
                "htab_find",
                "FUN_00116030",
                "bfd_set_section_size",
                "fprintf",
                "FUN_00115dc0",
                "FUN_0010c892",
                "FUN_001126c0",
                "free",
                "bfd_decode_symclass",
                "FUN_001088ae",
                "FUN_0010875d",
                "FUN_0010be88",
                "xstrdup",
                "FUN_00119dd0",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "reorganize_and_improve_debugging_data_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_object_with_params_00109cf4",
                "param_1": "object_ptr",
                "param_2": "number",
                "param_3": "flag",
                "local_3c": "number_string"
            },
            "code": "\nvoid initialize_object_with_params_00109cf4(undefined8 object_ptr,undefined8 number,undefined4 flag)\n\n{\n  char number_string [28];\n  \n  sprintf(number_string,\"%ld\",number);\n  initialize_object_00109b52(object_ptr,number_string,number,0,flag);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d97",
                "FUN_0010bba1",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_object_with_params_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_and_extract_values_00109ab1",
                "param_1": "input_string",
                "param_2": "output_array",
                "uVar1": "parsed_value",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_and_extract_values_00109ab1(char **input_string,undefined4 *output_array,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_value;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *input_string;\n  if (*current_char == '(') {\n    *input_string = current_char + 1;\n    parsed_value = parse_numeric_input_00109a32(input_string,0);\n    *output_array = parsed_value;\n    if (**input_string == ',') {\n      *input_string = *input_string + 1;\n      parsed_value = parse_numeric_input_00109a32(input_string,0,param_3);\n      output_array[1] = parsed_value;\n      if (**input_string == ')') {\n        current_char = *input_string + 1;\n        *input_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_00108fb9(current_char);\n    result = 0;\n  }\n  else {\n    *output_array = 0;\n    current_char = (char *)parse_numeric_input_00109a32(input_string,0);\n    output_array[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_extract_values_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "process_binary_001159d0",
                "param_1": "binaryAddress",
                "uVar1": "result",
                "cVar2": "matchingPatternCheck",
                "uVar3": "sectionProcessingResult",
                "lVar4": "dataRetrieved",
                "lVar5": "currentDataOffset"
            },
            "code": "\nundefined4 processBinary_001159d0(long binaryAddress)\n\n{\n  undefined8 result;\n  char matchingPatternCheck;\n  undefined4 sectionProcessingResult;\n  long dataRetrieved;\n  long currentDataOffset;\n  \n  sectionProcessingResult = process_sections_00115b70();\n  if ((char)sectionProcessingResult == '\\0') {\n    if ((*(byte *)(binaryAddress + 0x27) & 2) == 0) {\n      return sectionProcessingResult;\n    }\n    dataRetrieved = retrieve_data_00115d00(*(undefined8 *)(binaryAddress + 0xd0),*(undefined8 *)(binaryAddress + 0xe0));\n    if ((dataRetrieved != 0) &&\n       (((result = *(undefined8 *)(dataRetrieved + 8), DAT_00127a48 != 7 ||\n         (matchingPatternCheck = check_matching_pattern_00115d70(result,DAT_00127a28), matchingPatternCheck != '\\0')) &&\n        (matchingPatternCheck = check_matching_pattern_00115d70(result,DAT_00127a18), matchingPatternCheck == '\\0')))) {\n      dataRetrieved = *(long *)(*(long *)(binaryAddress + 0xd0) + 0xc0);\n      currentDataOffset = dataRetrieved;\n      do {\n        if (currentDataOffset == 0) {\n          return 1;\n        }\n        matchingPatternCheck = process_sections_00115b70(currentDataOffset);\n        if (matchingPatternCheck == '\\0') {\n          return sectionProcessingResult;\n        }\n        currentDataOffset = *(long *)(*(long *)(currentDataOffset + 0xd0) + 0xc0);\n      } while (dataRetrieved != currentDataOffset);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_object_0010a77a",
                "param_1": "object",
                "uVar1": "value1",
                "lVar2": "objectPtr",
                "__s": "string1Ptr",
                "uVar3": "value2",
                "uVar4": "returnValue",
                "__s_00": "string2Ptr",
                "sVar5": "string2Length",
                "sVar6": "string1Length",
                "__s_01": "concatenatedStringPtr"
            },
            "code": "\nundefined4 processObject_0010a77a(long object)\n\n{\n  undefined value1;\n  long objectPtr;\n  char *string1Ptr;\n  undefined8 value2;\n  undefined4 returnValue;\n  char *string2Ptr;\n  size_t string2Length;\n  size_t string1Length;\n  char *concatenatedStringPtr;\n  \n  objectPtr = *(long *)(object + 0x60);\n  if ((objectPtr != 0) && (string1Ptr = *(char **)(objectPtr + 0x20), string1Ptr != (char *)0x0)) {\n    returnValue = *(undefined4 *)(objectPtr + 0x18);\n    value1 = *(undefined *)(objectPtr + 0x1c);\n    value2 = *(undefined8 *)(objectPtr + 0x10);\n    string2Ptr = (char *)extract_and_free_00109b2f();\n    string2Length = strlen(string2Ptr);\n    string1Length = strlen(string1Ptr);\n    concatenatedStringPtr = (char *)xmalloc(string2Length + 2 + string1Length);\n    sprintf(concatenatedStringPtr,\"%s%s;\",string2Ptr,string1Ptr);\n    free(string2Ptr);\n    free(string1Ptr);\n    returnValue = initialize_object_00109b52(object,concatenatedStringPtr,value2,value1,returnValue);\n    if ((char)returnValue != '\\0') {\n      free(concatenatedStringPtr);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_object_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "handle_error_0010543c",
                "unaff_RBP": "stackOffset",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar1": "fileHandle",
                "uVar4": "errorMessage"
            },
            "code": "\nvoid handleError_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  long stackOffset;\n  \n  errnoPtr = __errno_location();\n  errorString = strerror(*errnoPtr);\n  fileHandle = *(undefined8 *)(stackOffset + 0x10);\n  errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(errorMessage,fileHandle,errorString);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "handle_error_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "convert_and_format_data_0010a424",
                "param_1": "dataPtr",
                "param_2": "flag",
                "param_3": "numObjects",
                "param_4": "flag2",
                "cVar1": "result",
                "bVar2": "byteVar",
                "iVar3": "counter",
                "uVar4": "returnValue",
                "pcVar5": "str1",
                "__ptr": "objectArray",
                "uVar6": "extractedValue",
                "__s": "str2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "formattedStr",
                "lVar9": "index",
                "bVar10": "byteVar2",
                "lVar11": "index2",
                "uVar12": "charVar"
            },
            "code": "\nundefined4 convertAndFormatData_0010a424(long dataPtr,char flag,int numObjects,char flag2)\n\n{\n  char result;\n  byte byteVar;\n  int counter;\n  undefined4 returnValue;\n  char *str1;\n  undefined8 *objectArray;\n  undefined8 extractedValue;\n  char *str2;\n  size_t length1;\n  size_t length2;\n  char *formattedStr;\n  long index;\n  byte byteVar2;\n  long index2;\n  undefined charVar;\n  \n  if ((flag == '\\0') && (result = initialize_or_print_object_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  byteVar2 = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n  str1 = (char *)extract_and_free_00109b2f(dataPtr);\n  if (numObjects < 0) {\n    objectArray = (undefined8 *)0x0;\n    numObjects = 0;\nLAB_0010a582:\n    charVar = 1;\n    if (byteVar2 != 0) goto LAB_0010a596;\n  }\n  else {\n    if (numObjects != 0) {\n      counter = numObjects + 1;\n      objectArray = (undefined8 *)xmalloc((long)counter * 8);\n      index = (long)(numObjects + -1);\n      do {\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n        }\n        extractedValue = extract_and_free_00109b2f(dataPtr);\n        byteVar2 = byteVar & 1;\n        objectArray[index] = extractedValue;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (flag2 == '\\0') {\n        result = initialize_or_print_object_00109d97(dataPtr);\n        if (result == '\\0') {\n          return 0;\n        }\n        byteVar = 1;\n        if (byteVar2 == 0) {\n          byteVar = *(byte *)(*(long *)(dataPtr + 0x60) + 0x1c);\n        }\n        byteVar2 = byteVar & 1;\n        extractedValue = extract_and_free_00109b2f(dataPtr);\n        objectArray[(long)counter + -1] = extractedValue;\n        numObjects = counter;\n      }\n      goto LAB_0010a582;\n    }\n    objectArray = (undefined8 *)0x0;\n    if (flag2 != '\\0') goto LAB_0010a582;\n    objectArray = (undefined8 *)xmalloc(8);\n    result = initialize_or_print_object_00109d97(dataPtr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((byteVar2 != 0) || (*(char *)(*(long *)(dataPtr + 0x60) + 0x1c) != '\\0')) {\n      extractedValue = extract_and_free_00109b2f(dataPtr);\n      numObjects = 1;\n      charVar = 1;\n      *objectArray = extractedValue;\n      goto LAB_0010a596;\n    }\n    extractedValue = extract_and_free_00109b2f(dataPtr);\n    numObjects = 1;\n    *objectArray = extractedValue;\n  }\n  charVar = *(undefined *)(*(long *)(dataPtr + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)extract_and_free_00109b2f(dataPtr);\n  length1 = strlen(str1);\n  length2 = strlen(str2);\n  index = length1 + 10 + length2;\n  for (index2 = 0; (int)index2 < numObjects; index2 = index2 + 1) {\n    length1 = strlen((char *)objectArray[index2]);\n    index = index + length1;\n  }\n  formattedStr = (char *)xmalloc(index);\n  sprintf(formattedStr,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    length1 = strlen(formattedStr);\n    if (numObjects <= (int)index) break;\n    *(undefined2 *)(formattedStr + length1) = 0x2c;\n    str1 = (char *)objectArray[index];\n    index = index + 1;\n    strcpy(formattedStr + length1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(formattedStr + length1) = 0x3b;\n  free(objectArray);\n  returnValue = initialize_object_00109b52(dataPtr,formattedStr,0,charVar,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(formattedStr);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "FUN_00109d97",
                "strcpy",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "convert_and_format_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_binutils_version_00119970",
                "param_1": "version",
                "pcVar1": "copyRightMsg"
            },
            "code": "\nvoid printBinutilsVersion_00119970(undefined8 version)\n\n{\n  char *copyRightMsg;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyRightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightMsg);\n  copyRightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "exit",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_binutils_version_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_query_string_00114c80",
                "param_1": "queryString",
                "param_2": "defaultValue",
                "param_3": "errorMessage",
                "param_4": "extraData",
                "pcVar1": "equalSignPos",
                "uVar2": "result",
                "auVar3": "parsedData"
            },
            "code": "\nundefined  [16] parseQueryString_00114c80(char *queryString,undefined8 defaultValue,undefined8 errorMessage,undefined8 extraData)\n\n{\n  char *equalSignPos;\n  undefined8 result;\n  undefined parsedData [16];\n  \n  equalSignPos = strchr(queryString,0x3d);\n  if (equalSignPos != (char *)0x0) {\n    parsedData._0_8_ = (undefined8 *)xmalloc(0x30);\n    result = copy_and_null_terminate_string_0011a480(queryString,(long)equalSignPos - (long)queryString);\n    parsedData._0_8_[2] = equalSignPos + 1;\n    parsedData._0_8_[1] = result;\n    parsedData._0_8_[4] = 0;\n    parsedData._0_8_[3] = 0;\n    *parsedData._0_8_ = defaultValue;\n    parsedData._8_8_ = extraData;\n    return parsedData;\n  }\n  result = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_message_and_exit_00119dd0(result,errorMessage);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_001053b5",
                "FUN_0011a480",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_query_string_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_value_0010870e",
                "param_1": "destination",
                "param_2": "newValue",
                "param_3": "pointer",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid updatePointerValue_0010870e(undefined8 destination,undefined8 newValue,long *pointer)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointer;\n  *currentPointer = newValue;\n  *pointer = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "binary",
                "param_2": "coff_headers",
                "param_3": "debug_data",
                "param_4": "param4",
                "param_5": "type_code",
                "param_6": "symbol_table",
                "param_7": "flag",
                "param_8": "param8",
                "lVar1": "result",
                "cVar2": "flag2",
                "uVar3": "error_code",
                "uVar4": "result2",
                "lVar5": "memory_block",
                "uVar6": "result3",
                "plVar7": "ptr",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "byteVar",
                "iVar9": "index",
                "pcVar10": "type_name",
                "uVar11": "mask",
                "lVar12": "loop_counter",
                "uVar13": "temp1",
                "uVar14": "temp2",
                "uVar15": "temp3",
                "local_68": "local_buffer",
                "local_48": "local_char",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long binary,long *coff_headers,long debug_data,undefined8 param4,uint type_code,\n                 long *symbol_table,char flag,undefined8 param8)\n\n{\n  long result;\n  char flag2;\n  undefined4 error_code;\n  undefined8 result2;\n  long memory_block;\n  undefined8 result3;\n  long *ptr;\n  void *ptr1;\n  void *ptr2;\n  byte byteVar;\n  int index;\n  char *type_name;\n  ulong mask;\n  long loop_counter;\n  uint temp1;\n  uint temp2;\n  undefined8 temp3;\n  undefined local_buffer [32];\n  char local_char;\n  byte local_byte;\n  \n  memory_block = *(long *)(binary + 0x110);\n  if ((~*(uint *)(memory_block + 0x38) & type_code) != 0) {\n    temp1 = (int)type_code >> ((byte)*(undefined4 *)(memory_block + 0x44) & 0x1f);\n    mask = (ulong)(type_code & *(uint *)(memory_block + 0x40));\n    byteVar = (byte)*(undefined4 *)(memory_block + 0x3c);\n    temp1 = (temp1 ^ type_code) & *(uint *)(memory_block + 0x38) ^ temp1;\n    if (mask == 1L << (byteVar & 0x3f)) {\n      result2 = parse_coff_type_0010dac0(binary,coff_headers,debug_data,param4,temp1,symbol_table,flag,param8);\n      memory_block = allocate_memory_block_00113d3a(result2);\n      return memory_block;\n    }\n    if (mask != 2L << (byteVar & 0x3f)) {\n      if (mask != 3L << (byteVar & 0x3f)) {\n        result2 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(memory_block + 0x3c),\n                          temp1);\n        print_error_message_00119ed0(result2,type_code);\n        return 0;\n      }\n      temp2 = 0;\n      if (symbol_table != (long *)0x0) {\n        temp2 = (uint)*(ushort *)(symbol_table + 2);\n        ptr = symbol_table + 2;\n        for (index = 0; (*(short *)ptr != 0 && (index != 3)); index = index + 1) {\n          *(short *)ptr = *(short *)((long)ptr + 2);\n          ptr = (long *)((long)ptr + 2);\n        }\n        *(short *)ptr = 0;\n      }\n      temp3 = 0;\n      result2 = param8;\n      result3 = parse_coff_type_0010dac0(binary,coff_headers,debug_data,param4,temp1,symbol_table,0);\n      memory_block = *(long *)(debug_data + 0x28);\n      if (memory_block == 0) {\n        result2 = initialize_block_with_parameter_00113dfe(4,0,temp3,result2);\n        memory_block = initialize_debug_name_type_0010c218(param8,\"int\",result2);\n        *(long *)(debug_data + 0x28) = memory_block;\n      }\n      memory_block = initialize_memory_block_00113c43(result3,memory_block,0,(long)(int)(temp2 - 1),0);\n      return memory_block;\n    }\n    result2 = parse_coff_type_0010dac0(binary,coff_headers,debug_data,param4,temp1,symbol_table,flag,param8);\n    memory_block = initialize_memory_00113ce0(result2,0,0);\n    return memory_block;\n  }\n  if ((symbol_table != (long *)0x0) && (0 < *symbol_table)) {\n    ptr = (long *)allocate_and_initialize_memory_0010da0b(debug_data);\n    if (*ptr != 0) {\n      return *ptr;\n    }\n    memory_block = create_memory_block_00113e23(ptr,0);\n    return memory_block;\n  }\n  if (flag == '\\0') {\n    symbol_table = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    memory_block = initialize_memory_block_00113e17();\n    return memory_block;\n  }\n  memory_block = *(long *)(debug_data + 8 + (long)(int)type_code * 8);\n  if (memory_block != 0) {\n    return memory_block;\n  }\n  switch(type_code) {\n  default:\n    result2 = initialize_memory_block_00113e17();\n    type_name = \"void\";\n    break;\n  case 2:\n    result2 = initialize_block_with_parameter_00113dfe(1,0);\n    type_name = \"char\";\n    break;\n  case 3:\n    result2 = initialize_block_with_parameter_00113dfe(2,0);\n    type_name = \"short\";\n    break;\n  case 4:\n    result2 = initialize_block_with_parameter_00113dfe(4,0);\n    type_name = \"int\";\n    break;\n  case 5:\n    result2 = initialize_block_with_parameter_00113dfe(4,0);\n    type_name = \"long\";\n    break;\n  case 6:\n    result2 = initialize_memory_block_00113df2(4);\n    type_name = \"float\";\n    break;\n  case 7:\n    result2 = initialize_memory_block_00113df2(8);\n    type_name = \"double\";\n    break;\n  case 8:\n    if (symbol_table == (long *)0x0) {\n      memory_block = initialize_and_allocate_memory_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    result2 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (symbol_table == (long *)0x0) {\n      memory_block = initialize_and_allocate_memory_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    result2 = 9;\nLAB_0010de7a:\n    memory_block = extract_symbols_0010e07c(binary,coff_headers,debug_data,result2,symbol_table,param8);\nLAB_0010e046:\n    ptr = (long *)allocate_and_initialize_memory_0010da0b(debug_data,param4);\n    *ptr = memory_block;\n    return memory_block;\n  case 10:\n    if (symbol_table == (long *)0x0) {\n      memory_block = allocate_memory_block_00113d6e(0,0);\n    }\n    else {\n      memory_block = symbol_table[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      loop_counter = 0;\n      do {\n        while( true ) {\n          if ((memory_block <= coff_headers[3]) || (coff_headers[1] <= coff_headers[2])) goto LAB_0010e032;\n          index = (int)loop_counter;\n          result = *(long *)(*coff_headers + coff_headers[2] * 8);\n          flag2 = bfd_coff_get_syment(binary,result,local_buffer);\n          loop_counter = (long)index;\n          if (flag2 == '\\0') {\n            error_code = bfd_get_error();\n            result2 = bfd_errmsg(error_code);\n            result3 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(result3,result2);\n            free(ptr1);\n            free(ptr2);\n            memory_block = 0;\n            goto LAB_0010e046;\n          }\n          coff_headers[2] = coff_headers[2] + 1;\n          coff_headers[3] = (ulong)local_byte + 1 + coff_headers[3];\n          if (local_char != '\\x10') break;\n          if ((int)type_code <= index + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          loop_counter = *(long *)(result + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)index * 8) = *(undefined8 *)(result + 8);\n          *(long *)((long)ptr2 + (long)index * 8) =\n               *(long *)(result + 0x10) + *(long *)(loop_counter + 0x30);\n          loop_counter = (long)(index + 1);\n        }\n      } while (local_char != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + loop_counter * 8) = 0;\n      memory_block = allocate_memory_block_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    memory_block = initialize_memory_block_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    result2 = initialize_block_with_parameter_00113dfe(1,1);\n    type_name = \"unsigned char\";\n    break;\n  case 0xd:\n    result2 = initialize_block_with_parameter_00113dfe(2,1);\n    type_name = \"unsigned short\";\n    break;\n  case 0xe:\n    result2 = initialize_block_with_parameter_00113dfe(4,1);\n    type_name = \"unsigned int\";\n    break;\n  case 0xf:\n    result2 = initialize_block_with_parameter_00113dfe(4,1);\n    type_name = \"unsigned long\";\n    break;\n  case 0x10:\n    result2 = initialize_memory_block_00113df2(0xc);\n    type_name = \"long double\";\n  }\n  memory_block = initialize_debug_name_type_0010c218(param8,type_name,result2);\nLAB_0010e065:\n  *(long *)(debug_data + 8 + (long)(int)type_code * 8) = memory_block;\n  return memory_block;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010e07c",
                "FUN_00113da9",
                "FUN_00113c43",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_00113e23",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "__n": "length",
                "extraout_var": "extraVariable",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 extraVariable;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraVariable,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00108c86",
                "FUN_00113ede",
                "FUN_00107880",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_message_0010882c",
                "piVar1": "error_location",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_message_0010882c(void)\n\n{\n  int *error_location;\n  undefined8 error_message;\n  \n  error_location = __errno_location();\n  strerror(*error_location);\n  error_message = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_0010882c_00119ed0(error_message);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_message_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_and_print_string_0010ebb0",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "length",
                "param_4": "output",
                "cVar1": "suffix_character",
                "__s": "extracted_string",
                "sVar4": "prefix_length",
                "sVar5": "extracted_string_length",
                "__s_00": "result_string",
                "uVar2": "length_minus_one",
                "uVar3": "status"
            },
            "code": "\nundefined4 process_and_print_string_0010ebb0(undefined8 input,char *prefix,int length,undefined8 output)\n\n{\n  char suffix_character;\n  uint length_minus_one;\n  undefined4 status;\n  char *extracted_string;\n  size_t prefix_length;\n  size_t extracted_string_length;\n  char *result_string;\n  \n  extracted_string = (char *)extract_and_free_00109b2f();\n  length_minus_one = length - 1;\n  if (length_minus_one < 4) {\n    status = *(undefined4 *)(&DAT_00121340 + (ulong)length_minus_one * 4);\n    suffix_character = (&DAT_00121334)[length_minus_one];\n    prefix_length = strlen(prefix);\n    extracted_string_length = strlen(extracted_string);\n    result_string = (char *)xmalloc(prefix_length + 3 + extracted_string_length);\n    sprintf(result_string,\"%s:%c%s\",prefix,(ulong)(uint)(int)suffix_character,extracted_string);\n    free(extracted_string);\n    status = process_string_0010e2f0(input,status,0,output,result_string);\n    if ((char)status != '\\0') {\n      free(result_string);\n    }\n    return status;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_print_string_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_memory_block_00113b98",
                "param_1": "inputValue",
                "param_2": "paramValue",
                "param_3": "paramAddress",
                "param_4": "undefinedValue",
                "lVar1": "memoryBlock",
                "plVar2": "dynamicArray"
            },
            "code": "\nlong initializeMemoryBlock_00113b98(long inputValue,long paramValue,long paramAddress,undefined undefinedValue)\n\n{\n  long memoryBlock;\n  long *dynamicArray;\n  \n  if ((inputValue != 0) && (memoryBlock = initialize_memory_block_00112904(0x13,0), memoryBlock != 0)) {\n    dynamicArray = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)dynamicArray + 0x19) = 0;\n    *dynamicArray = inputValue;\n    *(undefined4 *)((long)dynamicArray + 0x1c) = 0;\n    dynamicArray[1] = paramValue;\n    dynamicArray[2] = paramAddress;\n    *(undefined *)(dynamicArray + 3) = undefinedValue;\n    *(long **)(memoryBlock + 0x10) = dynamicArray;\n    return memoryBlock;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_matching_pattern_00115d70",
                "param_1": "input_data",
                "param_2": "pattern_table",
                "lVar1": "pattern_match",
                "local_18": "matched_input_data",
                "local_10": "is_matched"
            },
            "code": "\nundefined check_matching_pattern_00115d70(undefined8 input_data,undefined8 pattern_table)\n\n{\n  long pattern_match;\n  undefined8 matched_input_data;\n  undefined is_matched;\n  \n  if (DAT_001279ea == '\\0') {\n    pattern_match = htab_find(pattern_table,input_data);\n    is_matched = pattern_match != 0;\n  }\n  else {\n    is_matched = 0;\n    matched_input_data = input_data;\n    htab_traverse(pattern_table,pattern_matching_0011a170,&matched_input_data);\n  }\n  return is_matched;\n}\n\n",
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_matching_pattern_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_to_buffer_00109be3",
                "param_1": "buffer",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "expandedBuffer",
                "puVar2": "newElement",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndAddToBuffer_00109be3(long buffer,undefined8 data,undefined4 length)\n\n{\n  undefined8 expandedBuffer;\n  undefined8 *newElement;\n  uint currentSize;\n  \n  if (*(uint *)(buffer + 0x2c) <= *(uint *)(buffer + 0x28)) {\n    currentSize = *(uint *)(buffer + 0x2c) + 10;\n    *(uint *)(buffer + 0x2c) = currentSize;\n    expandedBuffer = xrealloc(*(undefined8 *)(buffer + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(buffer + 0x20) = expandedBuffer;\n  }\n  currentSize = *(uint *)(buffer + 0x28);\n  newElement = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(buffer + 0x20));\n  *newElement = data;\n  *(undefined4 *)(newElement + 1) = length;\n  *(uint *)(buffer + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)newElement >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "expand_and_add_to_buffer_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00104943",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_and_null_terminate_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copyBuffer"
            },
            "code": "\nvoid copyAndNullTerminateString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copyBuffer;\n  \n  stringLength = strnlen(inputString,maxLength);\n  copyBuffer = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copyBuffer + stringLength) = 0;\n  memcpy(copyBuffer,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "memcpy",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_string_and_free_0010e918",
                "param_1": "result",
                "param_2": "input_string",
                "param_3": "value",
                "__s": "extracted_string",
                "sVar2": "input_length",
                "sVar3": "extracted_length",
                "__s_00": "new_string"
            },
            "code": "\nundefined4 process_string_and_free_0010e918(undefined8 result,char *input_string,undefined8 value)\n\n{\n  undefined4 uVar1;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_length;\n  char *new_string;\n  \n  extracted_string = (char *)extract_and_free_00109b2f();\n  input_length = strlen(input_string);\n  extracted_length = strlen(extracted_string);\n  new_string = (char *)xmalloc(input_length + 0x14 + extracted_length);\n  sprintf(new_string,\"%s:c=e%s,%ld\",input_string,extracted_string,value);\n  free(extracted_string);\n  uVar1 = process_string_0010e2f0(result,0x80,0,0,new_string);\n  if ((char)uVar1 != '\\0') {\n    free(new_string);\n  }\n  return uVar1;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_and_free_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "process_and_reverse_section_contents_00116110",
                "param_1": "inputBfd",
                "param_2": "inputSection",
                "param_3": "outputBfd",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "sectionIndex",
                "iVar4": "loopIndex1",
                "iVar5": "loopIndex2",
                "cVar6": "checkResult",
                "uVar7": "errorMessage",
                "__ptr": "buffer",
                "lVar8": "loopIndex3",
                "uVar9": "loopIndex4",
                "iVar10": "byteDivisor",
                "uVar11": "offset",
                "puVar12": "tempPtr",
                "lVar13": "sectionLength",
                "puVar14": "tempPtr1",
                "puVar15": "tempPtr2",
                "pvVar16": "tempPtr3",
                "uVar17": "offset1",
                "uVar18": "byteDivisor1",
                "uVar19": "offset2",
                "bVar20": "flag",
                "local_38": "sectionSize",
                "local_30": "sectionData"
            },
            "code": "\nvoid processAndReverseSectionContents_00116110(undefined8 inputBfd,undefined8 *inputSection,undefined8 outputBfd)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long sectionIndex;\n  int loopIndex1;\n  int loopIndex2;\n  char checkResult;\n  undefined8 errorMessage;\n  undefined8 *buffer;\n  long loopIndex3;\n  ulong loopIndex4;\n  int byteDivisor;\n  ulong offset;\n  undefined *tempPtr;\n  long sectionLength;\n  undefined8 *tempPtr1;\n  undefined8 *tempPtr2;\n  void *tempPtr3;\n  ulong offset1;\n  ulong byteDivisor1;\n  ulong offset2;\n  byte flag;\n  ulong sectionSize;\n  void *sectionData;\n  \n  flag = 0;\n  checkResult = check_binary_for_duplicates_00115f50(inputBfd,inputSection,1);\n  if (checkResult != '\\0') {\n    return;\n  }\n  sectionSize = inputSection[8];\n  sectionIndex = inputSection[0xc];\n  if (((*(byte *)((long)inputSection + 0x25) & 1) == 0) || ((*(byte *)(sectionIndex + 0x25) & 1) == 0)) {\n    sectionLength = process_entries_00114190(*inputSection,0,0x80);\n    if (sectionLength == 0) {\n      return;\n    }\n    if ((*(byte *)(sectionLength + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionSize);\n    tempPtr2 = buffer;\n    if (7 < sectionSize) {\n      for (byteDivisor1 = sectionSize >> 3; byteDivisor1 != 0; byteDivisor1 = byteDivisor1 - 1) {\n        *tempPtr2 = 0;\n        tempPtr2 = tempPtr2 + (ulong)flag * -2 + 1;\n      }\n    }\n    tempPtr1 = tempPtr2;\n    if ((sectionSize & 4) != 0) {\n      tempPtr1 = (undefined8 *)((long)tempPtr2 + (ulong)flag * -8 + 4);\n      *(undefined4 *)tempPtr2 = 0;\n    }\n    tempPtr2 = tempPtr1;\n    if ((sectionSize & 2) != 0) {\n      tempPtr2 = (undefined8 *)((long)tempPtr1 + (ulong)flag * -4 + 2);\n      *(undefined2 *)tempPtr1 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)tempPtr2 = 0;\n    }\n    checkResult = bfd_set_section_contents(outputBfd,sectionIndex,buffer,0);\n    if (checkResult != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_error_001126c0(0,outputBfd,sectionIndex,0);\n    free(buffer);\n    return;\n  }\n  sectionData = (void *)0x0;\n  checkResult = bfd_get_full_section_contents(inputBfd,inputSection,&sectionData);\n  if ((checkResult == '\\0') ||\n     (checkResult = bfd_convert_section_contents(inputBfd,inputSection,outputBfd,&sectionData,&sectionSize),\n     byteDivisor = DAT_00127908, checkResult == '\\0')) {\n    bfd_set_section_size(sectionIndex,0);\n    DAT_00127a40 = 1;\n    print_error_001126c0(0,inputBfd,inputSection,0);\n    free(sectionData);\n    return;\n  }\n  loopIndex1 = DAT_001264b8;\n  loopIndex2 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    byteDivisor1 = (ulong)DAT_00127908;\n    if (sectionSize % byteDivisor1 != 0) {\n      temp2 = *inputSection;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_message_and_exit_00119dd0(errorMessage,temp2,byteDivisor);\n    }\n    byteDivisor = DAT_00127908 / 2;\n    offset = 0;\n    while (offset2 = offset, loopIndex1 = DAT_001264b8, loopIndex2 = DAT_001264bc, offset2 < sectionSize) {\n      offset = byteDivisor1 + offset2;\n      offset1 = offset;\n      for (loopIndex4 = 0; loopIndex4 < (ulong)(long)byteDivisor; loopIndex4 = loopIndex4 + 1) {\n        offset1 = offset1 - 1;\n        tempPtr = (undefined *)(offset2 + loopIndex4 + (long)sectionData);\n        temp1 = *tempPtr;\n        *tempPtr = *(undefined *)((long)sectionData + offset1);\n        *(undefined *)((long)sectionData + offset1) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = loopIndex1;\n  DAT_001264bc = loopIndex2;\n  if (-1 < loopIndex2) {\n    byteDivisor1 = (ulong)DAT_00127a3c;\n    byteDivisor = (int)((ulong)inputSection[7] % byteDivisor1);\n    offset = ((long)loopIndex2 - (long)byteDivisor) + (long)sectionData;\n    if (loopIndex2 < byteDivisor) {\n      offset = offset + byteDivisor1;\n    }\n    sectionLength = (sectionSize + (long)sectionData) - offset;\n    tempPtr3 = sectionData;\n    for (; offset < sectionSize + (long)sectionData; offset = offset + byteDivisor1) {\n      for (loopIndex3 = 0; ((int)loopIndex3 < loopIndex1 && (loopIndex3 != sectionLength)); loopIndex3 = loopIndex3 + 1) {\n        *(undefined *)((long)tempPtr3 + loopIndex3) = *(undefined *)(offset + loopIndex3);\n      }\n      tempPtr3 = (void *)((long)tempPtr3 + loopIndex3);\n      sectionLength = sectionLength - byteDivisor1;\n    }\n    sectionSize = ((((byteDivisor1 - 1) + sectionSize) - (long)loopIndex2) / byteDivisor1) * (long)loopIndex1;\n    byteDivisor1 = *(ulong *)(sectionIndex + 0x38) / byteDivisor1;\n    *(ulong *)(sectionIndex + 0x38) = byteDivisor1;\n    if (loopIndex2 < byteDivisor) {\n      *(ulong *)(sectionIndex + 0x38) = byteDivisor1 + 1;\n      checkResult = bfd_set_section_contents(outputBfd,sectionIndex,sectionData,0,sectionSize);\n      if (checkResult == '\\0') {\n        cleanup_and_print_error_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  checkResult = bfd_set_section_contents(outputBfd,sectionIndex,sectionData,0,sectionSize);\n  if (checkResult == '\\0') {\n    cleanup_and_print_error_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_00115f50",
                "xmalloc",
                "bfd_set_section_size",
                "FUN_00114190",
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_001083de",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_and_reverse_section_contents_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorString;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorString = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorString,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_block_debugging_0010bf20",
                "param_1": "blockPtr",
                "param_2": "newParam",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "lVar1": "currentBlockPtr",
                "uVar2": "localizedErrMsg",
                "pcVar3": "errMsg",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endBlockDebugging_0010bf20(long blockPtr,undefined8 newParam,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  long currentBlockPtr;\n  undefined8 localizedErrMsg;\n  char *errMsg;\n  undefined returnValue [16];\n  \n  if ((*(long *)(blockPtr + 8) == 0) || (currentBlockPtr = *(long *)(blockPtr + 0x20), currentBlockPtr == 0)) {\n    errMsg = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlockPtr + 8) != 0) {\n      *(undefined8 *)(currentBlockPtr + 0x20) = newParam;\n      localizedErrMsg = CONCAT71((int7)((ulong)currentBlockPtr >> 8),1);\n      *(long *)(blockPtr + 0x20) = *(long *)(currentBlockPtr + 8);\n      goto LAB_0010bf84;\n    }\n    errMsg = \"debug_end_block: attempt to close top level block\";\n  }\n  localizedErrMsg = dcgettext(0,errMsg,5);\n  fprintf(_stderr,\"%s\\n\",localizedErrMsg);\n  localizedErrMsg = 0;\nLAB_0010bf84:\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = localizedErrMsg;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "end_block_debugging_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "process_binary_data_0010c95e",
                "param_1": "binaryData",
                "param_2": "byteArrayPtr",
                "param_3": "outputPtr",
                "bVar1": "currentByte",
                "bVar2": "nextByte",
                "pbVar3": "currentPtr",
                "bVar4": "signedFlag",
                "bVar5": "nextByteFlag",
                "bVar6": "unsignedFlag",
                "cVar7": "result",
                "uVar8": "extractedNumber",
                "pbVar9": "nextPtr",
                "lVar10": "typeFound",
                "uVar11": "returnCode",
                "pcVar12": "typeChar",
                "sVar13": "stringLength",
                "uVar14": "numberLength",
                "__ptr": "typeStringPtr",
                "lVar15": "memoryBlock",
                "puVar16": "unsignedLongPtr",
                "puVar17": "unsignedBytePtr",
                "ppcVar18": "stringArray",
                "pcVar19": "dataType",
                "local_49": "localUnsignedByte",
                "local_48": "localUnsignedLong",
                "local_40": "localPtrArray"
            },
            "code": "\nundefined8 processBinaryData_0010c95e(undefined8 *binaryData,byte **byteArrayPtr,long *outputPtr)\n\n{\n  byte currentByte;\n  byte nextByte;\n  byte *currentPtr;\n  bool signedFlag;\n  bool nextByteFlag;\n  bool unsignedFlag;\n  char result;\n  uint extractedNumber;\n  byte *nextPtr;\n  long typeFound;\n  undefined8 returnCode;\n  char *typeChar;\n  size_t stringLength;\n  ulong numberLength;\n  void *typeStringPtr;\n  long memoryBlock;\n  ulong *unsignedLongPtr;\n  undefined *unsignedBytePtr;\n  char **stringArray;\n  char *dataType;\n  byte *pnextByte0;\n  undefined localUnsignedByte;\n  ulong localUnsignedLong;\n  char *localPtrArray [2];\n  \n  while( true ) {\n    pnextByte0 = *byteArrayPtr;\n    currentByte = *pnextByte0;\n    if ('T' < (char)currentByte) break;\n    if ((char)currentByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(currentByte) {\n    case 0x41:\n      memoryBlock = 0;\n      currentPtr = pnextByte0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *byteArrayPtr = pnextByte0 + 1;\n      result = processBinaryData_0010c95e(binaryData,byteArrayPtr,outputPtr);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (outputPtr == (long *)0x0) {\n        return 1;\n      }\n      memoryBlock = allocate_memory_block_00113b71(*outputPtr);\n      *outputPtr = memoryBlock;\n      return 1;\n    case 0x46:\n      *byteArrayPtr = pnextByte0 + 1;\n      if (outputPtr == (long *)0x0) {\n        unsignedLongPtr = (ulong *)0x0;\n        stringArray = (char **)0x0;\n      }\n      else {\n        unsignedLongPtr = &localUnsignedLong;\n        stringArray = localPtrArray;\n      }\n      result = reverse_and_process_data_0010d882(binaryData,byteArrayPtr,stringArray,unsignedLongPtr);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**byteArrayPtr == 0x5f) {\n        *byteArrayPtr = *byteArrayPtr + 1;\n        result = processBinaryData_0010c95e(binaryData,byteArrayPtr,outputPtr);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (outputPtr == (long *)0x0) {\n          return 1;\n        }\n        memoryBlock = initialize_memory_00113ce0(*outputPtr,localPtrArray[0],localUnsignedLong & 0xff);\n        *outputPtr = memoryBlock;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *byteArrayPtr = pnextByte0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      localUnsignedByte = 0;\n      localPtrArray[0] = (char *)0x0;\n      localUnsignedLong = 0;\n      *byteArrayPtr = pnextByte0 + 1;\n      if (((&_sch_istable)[(ulong)pnextByte0[1] * 2] & 4) == 0) {\n        if (pnextByte0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        stringArray = localPtrArray;\n        if (outputPtr == (long *)0x0) {\n          stringArray = (char **)0x0;\n        }\n        result = parse_and_find_string_0010d559(binaryData,byteArrayPtr,stringArray);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        extractedNumber = extract_number_from_string_00108e76(byteArrayPtr);\n        currentPtr = *byteArrayPtr;\n        stringLength = strlen((char *)currentPtr);\n        if (stringLength < extractedNumber) goto switchD_0010cdf9_caseD_60;\n        *byteArrayPtr = currentPtr + extractedNumber;\n        if ((outputPtr != (long *)0x0) &&\n           (localPtrArray[0] = (char *)find_string_in_memory_0010afd5(*binaryData,binaryData[1],currentPtr,extractedNumber,9),\n           localPtrArray[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      nextByte = **byteArrayPtr;\n      if (currentByte == 0x4d) {\n        if ((nextByte == 0x43) || (nextByte == 0x56)) {\n          *byteArrayPtr = *byteArrayPtr + 1;\n        }\n        if (**byteArrayPtr != 0x46) goto switchD_0010cdf9_caseD_60;\n        *byteArrayPtr = *byteArrayPtr + 1;\n        if (outputPtr == (long *)0x0) {\n          unsignedBytePtr = (undefined *)0x0;\n          unsignedLongPtr = (ulong *)0x0;\n        }\n        else {\n          unsignedBytePtr = &localUnsignedByte;\n          unsignedLongPtr = &localUnsignedLong;\n        }\n        result = reverse_and_process_data_0010d882(binaryData,byteArrayPtr,unsignedLongPtr,unsignedBytePtr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**byteArrayPtr == 0x5f) {\n        *byteArrayPtr = *byteArrayPtr + 1;\n        result = processBinaryData_0010c95e(binaryData,byteArrayPtr,outputPtr);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (outputPtr == (long *)0x0) {\n          return 1;\n        }\n        if (currentByte != 0x4d) {\n          memoryBlock = initialize_memory_block_00113bfa(localPtrArray[0],*outputPtr);\n          *outputPtr = memoryBlock;\n          return 1;\n        }\n        memoryBlock = initialize_memory_block_00113b98(*outputPtr,localPtrArray[0],localUnsignedLong,localUnsignedByte);\n        *outputPtr = memoryBlock;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnCode = parse_and_find_string_0010d559(binaryData,byteArrayPtr,outputPtr);\n      return returnCode;\n    case 0x52:\n      *byteArrayPtr = pnextByte0 + 1;\n      result = processBinaryData_0010c95e(binaryData,byteArrayPtr,outputPtr);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (outputPtr == (long *)0x0) {\n        return 1;\n      }\n      memoryBlock = initialize_memory_block_00113cb9(*outputPtr);\n      *outputPtr = memoryBlock;\n      return 1;\n    case 0x54:\n      *byteArrayPtr = pnextByte0 + 1;\n      result = parse_number_00108ea1(byteArrayPtr,&localUnsignedLong);\n      if (result != '\\0') {\n        if ((uint)localUnsignedLong < *(uint *)(binaryData + 5)) {\n          localPtrArray[0] = *(char **)((localUnsignedLong & 0xffffffff) * 0x10 + binaryData[4]);\n          result = processBinaryData_0010c95e(binaryData,localPtrArray,outputPtr);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (currentByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *byteArrayPtr = pnextByte0 + 1;\n    result = processBinaryData_0010c95e(binaryData,byteArrayPtr,outputPtr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (outputPtr == (long *)0x0) {\n      return 1;\n    }\n    memoryBlock = allocate_memory_block_00113d3a(*outputPtr);\n    *outputPtr = memoryBlock;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  unsignedFlag = false;\n  signedFlag = false;\n  result = '\\0';\n  nextByteFlag = false;\n  do {\n    currentPtr = *byteArrayPtr;\n    currentByte = *currentPtr;\n    if (currentByte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)currentByte) {\n      if (currentByte == 0x56) {\n        unsignedFlag = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)currentByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)currentByte < '_') goto LAB_0010cdfb;\n      switch(currentByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (outputPtr == (long *)0x0) {\nLAB_0010d0aa:\n          *byteArrayPtr = currentPtr + 1;\n          return 1;\n        }\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,&DAT_00120436);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_memory_block_00112904(6,4);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        dataType = \"unsigned char\";\n        if ((result == '\\0') && (dataType = \"char\", signedFlag)) {\n          dataType = \"signed char\";\n        }\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,dataType);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_block_with_parameter_00113dfe(1,result);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        dataType = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,\"float\");\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_memory_block_00113df2(4);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        dataType = \"unsigned int\";\n        typeChar = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        dataType = \"long unsigned int\";\n        typeChar = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          dataType = typeChar;\n        }\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,dataType);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_block_with_parameter_00113dfe(4,result);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        dataType = \"long double\";\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,dataType);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_memory_block_00113df2(8);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        dataType = \"short unsigned int\";\n        if (result == '\\0') {\n          dataType = \"short int\";\n        }\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,dataType);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_block_with_parameter_00113dfe(2,result);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        stringArray = localPtrArray;\n        if (outputPtr == (long *)0x0) {\n          stringArray = (char **)0x0;\n        }\n        result = parse_string_0010d21c(binaryData,byteArrayPtr,stringArray);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (outputPtr == (long *)0x0) {\n          return 1;\n        }\n        stringLength = strlen(localPtrArray[0]);\n        memoryBlock = find_string_in_memory_0010afd5(*binaryData,binaryData[1],localPtrArray[0],stringLength & 0xffffffff,9);\n        *outputPtr = memoryBlock;\n        free(localPtrArray[0]);\n        memoryBlock = *outputPtr;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,&DAT_00120495);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_memory_block_00113e17();\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,\"__wchar_t\");\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_block_with_parameter_00113dfe(2,1);\n          *outputPtr = memoryBlock;\n          *byteArrayPtr = *byteArrayPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (outputPtr == (long *)0x0) goto LAB_0010d0aa;\n        dataType = \"long long unsigned int\";\n        if (result == '\\0') {\n          dataType = \"long long int\";\n        }\n        memoryBlock = find_named_type_in_binary_0010914e(*binaryData,dataType);\n        *outputPtr = memoryBlock;\n        if (memoryBlock == 0) {\n          memoryBlock = initialize_block_with_parameter_00113dfe(8,result);\n          *outputPtr = memoryBlock;\n        }\n      }\n      *byteArrayPtr = *byteArrayPtr + 1;\n      goto LAB_0010d1de;\n    }\n    if (currentByte == 0x43) {\n      nextByteFlag = true;\n      goto LAB_0010cd84;\n    }\n    if (currentByte != 0x53) goto LAB_0010cdc5;\n    signedFlag = true;\nLAB_0010cd84:\n    *byteArrayPtr = currentPtr + 1;\n  } while( true );\nLAB_0010ca26:\n  nextPtr = currentPtr + 1;\n  *byteArrayPtr = nextPtr;\n  currentByte = *nextPtr;\n  if (currentByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (currentByte == 0x5f) {\n    *byteArrayPtr = currentPtr + 2;\n    result = processBinaryData_0010c95e(binaryData,byteArrayPtr,outputPtr);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (outputPtr == (long *)0x0) {\n      return 1;\n    }\n    typeFound = find_named_type_in_binary_0010914e(*binaryData,\"int\");\n    if (typeFound == 0) {\n      typeFound = initialize_block_with_parameter_00113dfe(4,0);\n    }\n    memoryBlock = initialize_memory_block_00113c43(*outputPtr,typeFound,0,memoryBlock,0);\n    *outputPtr = memoryBlock;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  memoryBlock = memoryBlock * 10 + (long)((char)currentByte + -0x30);\n  currentPtr = nextPtr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)currentByte < ':') {\n    if ((char)currentByte < '0') {\n      if (currentByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_bad_name_error_0010911f(pnextByte0);\n      if (outputPtr == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((currentByte != 0x47) || (*byteArrayPtr = currentPtr + 1, ((&_sch_istable)[(ulong)currentPtr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  pnextByte0 = *byteArrayPtr;\n  extractedNumber = extract_number_from_string_00108e76(byteArrayPtr);\n  currentPtr = *byteArrayPtr;\n  stringLength = strlen((char *)currentPtr);\n  numberLength = (ulong)extractedNumber;\n  if (numberLength <= stringLength) {\n    *byteArrayPtr = currentPtr + numberLength;\n    if (outputPtr == (long *)0x0) {\n      return 1;\n    }\n    typeStringPtr = (void *)copy_and_null_terminate_00109a0b(currentPtr,numberLength);\n    memoryBlock = find_named_type_in_binary_0010914e(*binaryData,typeStringPtr);\n    *outputPtr = memoryBlock;\n    free(typeStringPtr);\n    if (*outputPtr == 0) {\n      memoryBlock = find_string_in_memory_0010afd5(*binaryData,binaryData[1],currentPtr,(int)*byteArrayPtr - (int)currentPtr,0);\n      *outputPtr = memoryBlock;\njoined_r0x0010d1d8:\n      if (memoryBlock == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (nextByteFlag) {\n      memoryBlock = allocate_memory_block_00113b71(*outputPtr);\n      *outputPtr = memoryBlock;\n    }\n    if (unsignedFlag) {\n      memoryBlock = initialize_memory_block_with_param_00113b4a(*outputPtr);\n      *outputPtr = memoryBlock;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_bad_name_error_0010911f(pnextByte0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "FUN_00108ea1",
                "FUN_00113c43",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113bfa",
                "FUN_0010d559",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113dfe",
                "FUN_0010911f",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_00108e76",
                "FUN_00113cb9",
                "free",
                "FUN_0010d21c",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "process_binary_data_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = construct_filename_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = compare_strings_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = compare_strings_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_entries_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_entries_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_entries_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = reorganize_and_improve_debugging_data_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_buffer_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_and_free_memory_block_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_debug_records_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stabs_entries_00108b3e();\n                      cleanup_memory_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              cleanup_memory_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_buffer_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_and_free_memory_block_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_debug_records_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stabs_entries_00108b3e();\n            cleanup_memory_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      cleanup_memory_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_info_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_debug_tag_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_block_debugging_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = end_block_debugging_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = record_debug_function_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = initialize_section_data_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_message_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_matching_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_matching_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = check_matching_pattern_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = check_matching_pattern_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = check_matching_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = check_matching_pattern_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = initialize_section_data_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_message_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = improve_and_extract_code_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_binary_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,process_and_reverse_section_contents_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = compare_strings_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = compare_strings_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)process_build_attribute_notes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_malloc_and_get_section",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_get_full_section_contents",
                "dcgettext",
                "bfd_get_section_by_name",
                "strerror",
                "bfd_set_section_size",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_00113fb0",
                "bfd_create_gnu_debuglink_section",
                "FUN_001126c0",
                "free",
                "FUN_00115530",
                "bfd_get_arch",
                "FUN_00114190",
                "fopen",
                "fwrite",
                "xmalloc",
                "FUN_00105828",
                "fclose",
                "__errno_location",
                "FUN_0010551d",
                "bfd_set_format",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoLocation",
                "pcVar3": "errMsg",
                "uVar4": "errorString",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "fileFlags",
                "uStack_24": "fileMode",
                "uStack_20": "fileOptions",
                "uStack_1c": "fileDescriptor"
            },
            "code": "\nvoid setFileModificationTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoLocation;\n  char *errMsg;\n  undefined8 errorString;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 fileFlags;\n  undefined4 fileMode;\n  undefined4 fileOptions;\n  undefined4 fileDescriptor;\n  \n  fileFlags = *(undefined4 *)(fileInfo + 0x58);\n  fileMode = *(undefined4 *)(fileInfo + 0x5c);\n  fileOptions = *(undefined4 *)(fileInfo + 0x60);\n  fileDescriptor = *(undefined4 *)(fileInfo + 100);\n  timeSpec1 = *(undefined4 *)(fileInfo + 0x48);\n  timeSpec2 = *(undefined4 *)(fileInfo + 0x4c);\n  timeSpec3 = *(undefined4 *)(fileInfo + 0x50);\n  timeSpec4 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errnoLocation = __errno_location();\n    errMsg = strerror(*errnoLocation);\n    errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(errorString,filePath,errMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010871c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_001053d5",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "hash_table",
                "param_2": "param_flag",
                "param_3": "param_size",
                "param_4": "param_value",
                "param_5": "input_string",
                "lVar1": "current_entry",
                "uVar2": "error_code",
                "lVar3": "entry_result",
                "uVar4": "error_message",
                "uVar5": "translated_error_message",
                "sVar6": "string_length",
                "lVar7": "list_index",
                "local_44": "local_value",
                "local_3c": "local_array"
            },
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined param_flag,int param_size,undefined8 param_value,char *input_string)\n\n{\n  long current_entry;\n  undefined4 error_code;\n  long entry_result;\n  undefined8 error_message;\n  undefined8 translated_error_message;\n  size_t string_length;\n  long list_index;\n  undefined4 local_value;\n  undefined uStack_40;\n  undefined uStack_3f;\n  undefined2 uStack_3e;\n  undefined4 local_array [3];\n  \n  if (input_string == (char *)0x0) {\n    list_index = 0;\n  }\n  else {\n    entry_result = bfd_hash_lookup(hash_table + 7,input_string,1,1);\n    if (entry_result == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      translated_error_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(translated_error_message,error_message);\n      return 0;\n    }\n    list_index = *(long *)(entry_result + 0x20);\n    if (list_index == -1) {\n      list_index = hash_table[6];\n      current_entry = hash_table[5];\n      *(long *)(entry_result + 0x20) = list_index;\n      if (current_entry == 0) {\n        hash_table[4] = entry_result;\n      }\n      else {\n        *(long *)(current_entry + 0x18) = entry_result;\n      }\n      hash_table[5] = entry_result;\n      string_length = strlen(input_string);\n      hash_table[6] = list_index + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(list_index,&local_value);\n  uStack_3f = 0;\n  uStack_40 = param_flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)param_size,&uStack_3e);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(param_value,local_array);\n  if ((ulong)hash_table[3] < hash_table[2] + 0xcU) {\n    hash_table[3] = hash_table[3] * 2;\n    list_index = xrealloc(hash_table[1]);\n    hash_table[1] = list_index;\n  }\n  list_index = hash_table[2];\n  entry_result = hash_table[1];\n  *(ulong *)(entry_result + list_index) = CONCAT26(uStack_3e,CONCAT15(uStack_3f,CONCAT14(uStack_40,local_value)));\n  *(undefined4 *)(entry_result + 8 + list_index) = local_array[0];\n  hash_table[2] = hash_table[2] + 0xc;\n  return CONCAT71((int7)((ulong)list_index >> 8),1);\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010e439",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010ed2c"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "errorString",
                "pcVar3": "commaIndex",
                "pcVar4": "nextSectionFlag",
                "sVar5": "sectionFlagLength",
                "iVar6": "sectionFlagIndex",
                "uVar7": "parsedFlags",
                "auVar8": "resultStruct"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 errorString;\n  char *commaIndex;\n  char *nextSectionFlag;\n  size_t sectionFlagLength;\n  int sectionFlagIndex;\n  uint parsedFlags;\n  undefined resultStruct [16];\n  \n  parsedFlags = 0;\n  do {\n    commaIndex = strchr(sectionFlags,0x2c);\n    if (commaIndex == (char *)0x0) {\n      sectionFlagLength = strlen(sectionFlags);\n      sectionFlagIndex = (int)sectionFlagLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaIndex + 1;\n      sectionFlagIndex = (int)commaIndex - (int)sectionFlags;\n    }\n    sectionFlagLength = (size_t)sectionFlagIndex;\n    result = strncasecmp(\"alloc\",sectionFlags,sectionFlagLength);\n    if (result == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,sectionFlagLength);\n      if (result == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,sectionFlagLength);\n        if (result == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,sectionFlagLength);\n          if (result == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,sectionFlagLength);\n            if (result == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,sectionFlagLength);\n              if (result == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,sectionFlagLength);\n                if (result == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,sectionFlagLength);\n                  if (result == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,sectionFlagLength);\n                    if (result == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,sectionFlagLength);\n                      if (result == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,sectionFlagLength);\n                        if (result == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,sectionFlagLength);\n                          if (result == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,sectionFlagLength);\n                            if (result != 0) {\n                              commaIndex = (char *)xmalloc((long)(sectionFlagIndex + 1));\n                              strncpy(commaIndex,sectionFlags,sectionFlagLength);\n                              commaIndex[sectionFlagLength] = '\\0';\n                              errorString = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(errorString,commaIndex);\n                              errorString = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_message_and_exit_00119dd0(errorString,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  resultStruct._4_4_ = 0;\n  resultStruct._0_4_ = parsedFlags;\n  resultStruct._8_8_ = param4;\n  return resultStruct;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "construct_filename_001125fa",
                "param_1": "arguments",
                "uVar1": "newLen",
                "ppcVar2": "ptrToCharPtr",
                "sVar3": "lenPtr",
                "sVar4": "lenArg",
                "__s": "filename"
            },
            "code": "\nchar * constructFilename_001125fa(char **arguments)\n\n{\n  ulong newLen;\n  char **ptrToCharPtr;\n  size_t lenPtr;\n  size_t lenArg;\n  char *filename;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptrToCharPtr = (char **)arguments[0x1d];\n  filename = *arguments;\n  if ((ptrToCharPtr != (char **)0x0) && ((*(byte *)((long)ptrToCharPtr + 0x49) & 0x10) == 0)) {\n    lenPtr = strlen(*ptrToCharPtr);\n    lenArg = strlen(filename);\n    newLen = lenPtr + 3 + lenArg;\n    if (DAT_00127a58 < newLen) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (newLen >> 1) + newLen;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    filename = DAT_00127a50;\n  }\n  return filename;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strlen",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "construct_filename_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined getOne_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "cleanup_memory_00108863",
                "puVar1": "currentBlock",
                "puVar2": "nextBlock"
            },
            "code": "\nvoid cleanupMemory_00108863(void)\n\n{\n  undefined4 *currentBlock;\n  undefined4 *nextBlock;\n  \n  currentBlock = (undefined4 *)&DAT_00127740;\n  do {\n    nextBlock = currentBlock + 6;\n    free(*(void **)(currentBlock + 4));\n    *(undefined8 *)(currentBlock + 4) = 0;\n    currentBlock = nextBlock;\n  } while (nextBlock != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "cleanup_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_pointer_00104020"
            },
            "code": "\nvoid executePointer_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_pointer_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_source_file_00108f08",
                "param_1": "debugContext",
                "param_2": "filename",
                "iVar1": "cmpResult",
                "uVar2": "returnStatus",
                "puVar3": "sourceFileList",
                "puVar4": "tempVar",
                "lVar5": "loopCounter",
                "puVar6": "ptrToFree",
                "pcVar7": "sourceFilename",
                "puVar8": "tempPtr",
                "bVar9": "index"
            },
            "code": "\n\n\nundefined8 addSourceFile_00108f08(long debugContext,char *filename)\n\n{\n  int cmpResult;\n  undefined8 returnStatus;\n  undefined8 *sourceFileList;\n  undefined8 *tempVar;\n  long loopCounter;\n  undefined8 *ptrToFree;\n  char *sourceFilename;\n  undefined8 *tempPtr;\n  byte index;\n  \n  index = 0;\n  sourceFilename = \"\";\n  if (filename != (char *)0x0) {\n    sourceFilename = filename;\n  }\n  if (*(long *)(debugContext + 8) == 0) {\n    returnStatus = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",returnStatus);\n    returnStatus = 0;\n  }\n  else {\n    for (sourceFileList = *(undefined8 **)(*(long *)(debugContext + 8) + 8); sourceFileList != (undefined8 *)0x0;\n        sourceFileList = (undefined8 *)*sourceFileList) {\n      cmpResult = filename_cmp(sourceFileList[1],sourceFilename);\n      if (cmpResult == 0) goto LAB_00108fad;\n    }\n    sourceFileList = (undefined8 *)xmalloc(0x18);\n    ptrToFree = *(undefined8 **)(debugContext + 0x10);\n    tempPtr = sourceFileList;\n    for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)tempPtr = 0;\n      tempPtr = (undefined8 *)((long)tempPtr + (ulong)index * -8 + 4);\n    }\n    sourceFileList[1] = sourceFilename;\n    tempPtr = (undefined8 *)*ptrToFree;\n    while (tempVar = tempPtr, tempVar != (undefined8 *)0x0) {\n      ptrToFree = tempVar;\n      tempPtr = (undefined8 *)*tempVar;\n    }\n    *ptrToFree = sourceFileList;\nLAB_00108fad:\n    *(undefined8 **)(debugContext + 0x10) = sourceFileList;\n    returnStatus = 1;\n  }\n  return returnStatus;\n}\n\n",
            "called": [
                "filename_cmp",
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_source_file_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_and_free_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeAndFreeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_and_free_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_entries_00114190",
                "param_1": "input",
                "param_2": "searchFlag",
                "param_3": "attributes",
                "uVar1": "flags",
                "plVar2": "entry",
                "pplVar3": "result",
                "iVar4": "comparisonResult",
                "uVar5": "errorMessage",
                "pplVar6": "currentEntry",
                "pplVar7": "previousEntry",
                "pplVar8": "nextEntry"
            },
            "code": "\nlong ** processEntries_00114190(long *input,char searchFlag,uint attributes)\n\n{\n  uint flags;\n  long *entry;\n  long **result;\n  int comparisonResult;\n  undefined8 errorMessage;\n  long **currentEntry;\n  long **previousEntry;\n  long **nextEntry;\n  \n  previousEntry = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (searchFlag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (searchFlag == '\\0') {\n    if ((attributes & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      currentEntry = (long **)*previousEntry;\n      if (currentEntry == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previousEntry = (long **)0x0;\n    }\n    else {\n      entry = DAT_00127900[1];\n      if (*(char *)entry == '!') {\n        comparisonResult = fnmatch((char *)((long)entry + 1),(char *)input,0);\n        currentEntry = previousEntry;\n        if (comparisonResult == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparisonResult = fnmatch((char *)entry,(char *)input,0);\n      if (comparisonResult != 0) goto LAB_001141e5;\n      currentEntry = (long **)*previousEntry;\n      if (currentEntry == (long **)0x0) goto LAB_00114245;\n    }\n    if ((attributes & *(uint *)((long)currentEntry + 0x14)) != 0) {\n      entry = currentEntry[1];\n      if (*(char *)entry == '!') {\n        comparisonResult = fnmatch((char *)((long)entry + 1),(char *)input,0);\n        if (comparisonResult == 0) {\nLAB_0011438e:\n          *(undefined *)(currentEntry + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparisonResult = fnmatch((char *)entry,(char *)input,0);\n        if ((previousEntry == (long **)0x0) && (comparisonResult == 0)) {\n          nextEntry = (long **)*currentEntry;\n          previousEntry = currentEntry;\n          if (nextEntry == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextEntry = (long **)*currentEntry;\n    currentEntry = previousEntry;\n    if (nextEntry != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparisonResult = strcmp((char *)DAT_00127900[1],(char *)input);\n    if (comparisonResult == 0) {\nLAB_001143cd:\n      flags = *(uint *)((long)previousEntry + 0x14);\n      if ((((flags & 1) != 0) && ((attributes & 2) != 0)) ||\n         (((attributes & 1) != 0 && ((flags & 2) != 0)))) {\n        errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_message_and_exit_00119dd0(errorMessage,input);\n      }\n      if ((((flags & 8) != 0) && ((attributes & 0x10) != 0)) || ((attributes & 0x18) == 0x18)) {\n        errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_message_and_exit_00119dd0(errorMessage,input);\n      }\n      if ((((flags & 0x20) == 0) || ((attributes & 0x40) == 0)) && ((attributes & 0x60) != 0x60)) {\n        *(uint *)((long)previousEntry + 0x14) = flags | attributes;\n        return previousEntry;\n      }\n      errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_message_and_exit_00119dd0(errorMessage,input);\n    }\n    previousEntry = (long **)*previousEntry;\n    if (previousEntry == (long **)0x0) goto LAB_001142a9;\n    comparisonResult = strcmp((char *)previousEntry[1],(char *)input);\n    if (comparisonResult == 0) goto LAB_001143cd;\n    nextEntry = (long **)*previousEntry;\n    currentEntry = (long **)0x0;\n    if (nextEntry == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previousEntry = currentEntry;\n      if (searchFlag == '\\0') {\n        while (currentEntry = nextEntry, result = previousEntry, nextEntry = currentEntry,\n              (attributes & *(uint *)((long)currentEntry + 0x14)) != 0) {\n          entry = currentEntry[1];\n          if (*(char *)entry == '!') {\n            comparisonResult = fnmatch((char *)((long)entry + 1),(char *)input,0);\n            if (comparisonResult == 0) goto LAB_0011438e;\n            nextEntry = (long **)*currentEntry;\n            if ((long **)*currentEntry == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparisonResult = fnmatch((char *)entry,(char *)input,0);\n            if ((previousEntry == (long **)0x0) && (comparisonResult == 0)) {\n              previousEntry = currentEntry;\n              nextEntry = (long **)*currentEntry;\n              if ((long **)*currentEntry == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextEntry = (long **)*currentEntry;\n              if ((long **)*currentEntry == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparisonResult = strcmp((char *)nextEntry[1],(char *)input);\n        result = currentEntry;\n        previousEntry = nextEntry;\n        if (comparisonResult == 0) goto LAB_001143cd;\n      }\n      currentEntry = result;\n      nextEntry = (long **)*nextEntry;\n      previousEntry = currentEntry;\n    } while (nextEntry != (long **)0x0);\nLAB_001142a1:\n    if (searchFlag != '\\0') {\nLAB_001142a9:\n      currentEntry = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(currentEntry + 3) = (undefined  [16])0x0;\n      *(undefined *)(currentEntry + 2) = 0;\n      *(uint *)((long)currentEntry + 0x14) = attributes;\n      currentEntry[5] = (long *)0x0;\n      previousEntry = currentEntry;\n      *currentEntry = (long *)DAT_00127900;\n      DAT_00127900 = previousEntry;\n      currentEntry[1] = input;\n      return currentEntry;\n    }\n  }\nLAB_00114212:\n  if (previousEntry == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previousEntry + 2) = 1;\n  return previousEntry;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba",
                "dcgettext",
                "fnmatch",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_entries_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_build_attribute_notes_00116490",
                "param_1": "param1",
                "param_2": "noteType",
                "param_3": "noteName",
                "param_4": "noteDescription",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "flag",
                "puVar5": "pointerVar1",
                "iVar6": "var6",
                "lVar7": "loopVar",
                "uVar8": "var8",
                "in_RAX": "inRegisterA",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr": "dynamicMemoryPtr",
                "uVar13": "var13",
                "unaff_RBX": "baseRegisterBX",
                "unaff_RBP": "basePointerBP",
                "puVar14": "pointerVar2",
                "puVar15": "pointerVar3",
                "cVar16": "charVar",
                "puVar17": "pointerVar4",
                "puVar18": "pointerVar5",
                "in_R11": "inRegisterR11",
                "unaff_R12": "baseRegisterR12",
                "puVar19": "pointerVar6",
                "unaff_R13": "unaffectedRegisterR13",
                "__nmemb": "numMembers",
                "unaff_R14": "baseRegisterR14",
                "puVar20": "pointerVar7",
                "bVar21": "byteVar",
                "iVar22": "var22",
                "unaff_retaddr": "unaffectedReturnAddress",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "in_stack_00000020": "stackVar1",
                "in_stack_00000028": "stackVar2",
                "in_stack_00000030": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\nulong processBuildAttributeNotes_00116490(undefined8 param1,ulong noteType,ulong noteName,long noteDescription)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  ulong var3;\n  bool flag;\n  ulong *pointerVar1;\n  int var6;\n  long loopVar;\n  undefined8 var8;\n  ulong inRegisterA;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *dynamicMemoryPtr;\n  ulong var13;\n  ulong baseRegisterBX;\n  ulong basePointerBP;\n  ulong *pointerVar2;\n  undefined *pointerVar3;\n  char charVar;\n  undefined *pointerVar4;\n  undefined *pointerVar5;\n  ulong inRegisterR11;\n  ulong *baseRegisterR12;\n  ulong *pointerVar6;\n  ulong unaffectedRegisterR13;\n  size_t numMembers;\n  undefined8 *baseRegisterR14;\n  ulong *pointerVar7;\n  byte byteVar;\n  int var22;\n  ulong unaffectedReturnAddress;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stackVar1;\n  ulong *stackVar2;\n  undefined *stackVar3;\n  uint stackVar4;\n  uint stackVar5;\n  undefined8 *stackVar6;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  loopVar = noteDescription;\n  var10 = basePointerBP;\n  var13 = unaffectedRegisterR13;\n  if (inRegisterA == 0) {\n    if (noteType == 0x100) {\n      baseRegisterR12[7] = unaffectedReturnAddress;\n      var11 = unaffectedReturnAddress;\nLAB_001164af:\n      var9 = unaffectedRegisterR13;\n      var13 = unaffectedRegisterR13;\n      unaffectedReturnAddress = var11;\n    }\n    else {\n      baseRegisterR12[7] = param9;\nLAB_0011669e:\n      var10 = basePointerBP;\n      var9 = basePointerBP;\n    }\nLAB_001164bb:\n    baseRegisterR12[8] = var9;\n    if (*(char *)((baseRegisterR12[3] - 1) + noteName) != '\\0') {\n      loopVar = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointerVar6 = baseRegisterR12 + 9;\n    if (0xb < baseRegisterBX) {\n      var9 = (**(code **)(baseRegisterR14[1] + 0x40))(loopVar);\n      *pointerVar6 = var9;\n      var9 = (**(code **)(baseRegisterR14[1] + 0x40))(loopVar + 4);\n      baseRegisterR12[10] = var9;\n      noteType = (**(code **)(baseRegisterR14[1] + 0x40))(loopVar + 8);\n      noteName = *pointerVar6;\n      baseRegisterR12[0xb] = noteType;\n      inRegisterA = baseRegisterR12[10];\n      var9 = noteName + 3 & 0xfffffffffffffffc;\n      baseRegisterR12[0xf] = var9;\n      if (inRegisterA != (inRegisterA + 3 & 0xfffffffffffffffc)) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < noteType - 0x100) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      var11 = var9 + inRegisterA + 0xc;\n      if (baseRegisterBX < var11) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (noteName < 2) {\n        loopVar = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      baseRegisterR12[0xc] = loopVar + 0xc;\n      inRegisterR11 = loopVar + 0xc + var9;\n      baseRegisterR12[0xd] = inRegisterR11;\n      baseRegisterBX = baseRegisterBX + (-0xc - (var9 + inRegisterA));\n      noteDescription = loopVar + var11;\n      basePointerBP = var10;\n      baseRegisterR12 = pointerVar6;\n      unaffectedRegisterR13 = var13;\n      if (noteName != 2) {\n        if (*(char *)(loopVar + 0xc) == '$') {\n          if ((*(char *)(loopVar + 0xd) == '\\x01') && (*(char *)(loopVar + 0xe) == '1')) {\n            var10 = processBuildAttributeNotes_00116490();\n            return var10;\n          }\n        }\n        else if ((((4 < noteName) && (*(char *)(loopVar + 0xc) == 'G')) &&\n                 (*(char *)(loopVar + 0xd) == 'A')) &&\n                ((*(char *)(loopVar + 0xe) == '$' && (*(char *)(loopVar + 0xf) == '\\x01')))) {\n          if (*(char *)(loopVar + 0x10) == '2') {\n            var10 = processBuildAttributeNotes_00116490();\n            return var10;\n          }\n          if (*(char *)(loopVar + 0x10) == '3') {\n            var10 = processBuildAttributeNotes_00116490();\n            return var10;\n          }\n          loopVar = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (baseRegisterBX != 0) {\n      loopVar = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stackVar4 | stackVar5 | param8) == 0) {\n      var1 = *baseRegisterR14;\n      var2 = *stackVar6;\n      var8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(var8,var1,var2);\nLAB_0011671b:\n      numMembers = ((long)pointerVar6 - (long)stackVar2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stackVar2,numMembers,0x48,compare_and_return_result_0011a1b0);\n      for (pointerVar2 = stackVar2; pointerVar2 < pointerVar6; pointerVar2 = pointerVar2 + 9) {\n        var10 = pointerVar2[2];\n        if (var10 != 0) {\n          var13 = pointerVar2[7];\n          var9 = pointerVar2[8];\n          pointerVar7 = pointerVar2;\n          var22 = 0;\n          if (var13 == var9) {\n            pointerVar2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                pointerVar1 = pointerVar7;\n                pointerVar7 = pointerVar1 + -9;\n                if (pointerVar7 < stackVar2) goto LAB_001167f5;\n                var11 = pointerVar1[-7];\n              } while (var11 == 0);\n              if ((*pointerVar7 != *pointerVar2) ||\n                 (var6 = memcmp((void *)pointerVar1[-6],(void *)pointerVar2[3],*pointerVar2), var6 != 0))\n              break;\n              var3 = pointerVar1[-2];\n              var12 = pointerVar1[-1];\n              if (var13 == var3) {\n                if (var9 == var12) {\n                  pointerVar2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (var9 <= var12) {\n                  pointerVar2[2] = 0;\n                  break;\n                }\n                if (var12 < var13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < var12) ||\n                     (var13 <= (var12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((var10 == 0x101) == (var11 == 0x101)) {\n                  if (var12 <= var9) {\n                    var12 = var9;\n                  }\n                  if (var3 < var13) {\n                    var13 = var3;\n                  }\n                  pointerVar1[-1] = var12;\n                  pointerVar1[-2] = var13;\n                  pointerVar2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (var3 <= var13) goto LAB_001167a6;\n                if (var12 < var13) goto LAB_0010852c;\n                if (var9 < var13) {\n                  if ((0xfffffffffffffff0 < var9) || (var3 <= (var9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (var9 != var12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              flag = var22 < 0x11;\n              var22 = var22 + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stackVar2,numMembers,0x48,compare_records_0011a250);\n      dynamicMemoryPtr = (undefined *)xmalloc(stackVar1 * 2);\n      param7 = 0;\n      param9 = 0;\n      pointerVar5 = dynamicMemoryPtr;\n      for (pointerVar2 = stackVar2; pointerVar2 < pointerVar6; pointerVar2 = pointerVar2 + 9) {\n        if (pointerVar2[2] != 0) {\n          pointerVar4 = pointerVar5 + 4;\n          pointerVar3 = pointerVar5 + 0xc;\n          if ((pointerVar2[7] == param9) && (pointerVar2[8] == param7)) {\n            (**(code **)(baseRegisterR14[1] + 0x50))(*pointerVar2,pointerVar5);\n            (**(code **)(baseRegisterR14[1] + 0x50))(0,pointerVar4);\n            (**(code **)(baseRegisterR14[1] + 0x50))(pointerVar2[2],pointerVar5 + 8);\n            var13 = pointerVar2[6];\n            var10 = *pointerVar2;\n            pointerVar5 = (undefined *)pointerVar2[3];\n            pointerVar4 = pointerVar3;\n            for (var9 = var10; var9 != 0; var9 = var9 - 1) {\n              *pointerVar4 = *pointerVar5;\n              pointerVar5 = pointerVar5 + (ulong)byteVar * -2 + 1;\n              pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n            }\n            if (var10 < var13) {\n              for (loopVar = var13 - var10; loopVar != 0; loopVar = loopVar + -1) {\n                *pointerVar4 = 0;\n                pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            pointerVar5 = pointerVar3 + var13;\n          }\n          else {\n            (**(code **)(baseRegisterR14[1] + 0x50))();\n            if (*(int *)(baseRegisterR14[1] + 8) == 5) {\n              charVar = (*(char *)(baseRegisterR14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(baseRegisterR14[1] + 0x50))(charVar,pointerVar4);\n            (**(code **)(baseRegisterR14[1] + 0x50))(pointerVar2[2],pointerVar5 + 8);\n            var10 = *pointerVar2;\n            pointerVar5 = (undefined *)pointerVar2[3];\n            pointerVar4 = pointerVar3;\n            for (var13 = var10; var13 != 0; var13 = var13 - 1) {\n              *pointerVar4 = *pointerVar5;\n              pointerVar5 = pointerVar5 + (ulong)byteVar * -2 + 1;\n              pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n            }\n            var13 = pointerVar2[6];\n            if (var10 < var13) {\n              for (loopVar = var13 - var10; loopVar != 0; loopVar = loopVar + -1) {\n                *pointerVar4 = 0;\n                pointerVar4 = pointerVar4 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            loopVar = baseRegisterR14[1];\n            pointerVar3 = pointerVar3 + var13;\n            pointerVar5 = pointerVar3 + 8;\n            if ((*(int *)(loopVar + 8) == 5) && (*(char *)(baseRegisterR14[0x22] + 4) == '\\x02')) {\n              (**(code **)(loopVar + 0x38))(pointerVar2[7],pointerVar3);\n              (**(code **)(baseRegisterR14[1] + 0x38))(pointerVar2[8],pointerVar5);\n              pointerVar5 = pointerVar3 + 0x10;\n            }\n            else {\n              (**(code **)(loopVar + 0x50))(pointerVar2[7],pointerVar3);\n              (**(code **)(baseRegisterR14[1] + 0x50))(pointerVar2[8],pointerVar3 + 4);\n            }\n            param9 = pointerVar2[7];\n            param7 = pointerVar2[8];\n          }\n        }\n      }\n      var13 = (long)pointerVar5 - (long)dynamicMemoryPtr;\n      var10 = var13;\n      pointerVar5 = dynamicMemoryPtr;\n      if (var13 < stackVar1) {\n        for (; stackVar1 = var13, var10 != 0; var10 = var10 - 1) {\n          *stackVar3 = *pointerVar5;\n          pointerVar5 = pointerVar5 + (ulong)byteVar * -2 + 1;\n          stackVar3 = stackVar3 + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(dynamicMemoryPtr);\nLAB_001166f8:\n      free(stackVar2);\n      return stackVar1;\n    }\n    if (((stackVar5 | param8) == 0) || (stackVar4 == 0)) {\n      if (stackVar5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    loopVar = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (inRegisterA == 0x10) {\n      var11 = (**(code **)(baseRegisterR14[1] + 0x28))(inRegisterR11);\n      var9 = (**(code **)(baseRegisterR14[1] + 0x28))(baseRegisterR12[4] + 8);\n      if (var9 < var11) {\n        var11 = var9;\n      }\nLAB_00116631:\n      if (baseRegisterR12[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = unaffectedReturnAddress;\n        }\n        noteName = *baseRegisterR12;\n        baseRegisterR12[7] = var11;\n        var13 = var9;\n        unaffectedReturnAddress = var11;\n        if (var9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = param9;\n        }\n        noteName = *baseRegisterR12;\n        baseRegisterR12[7] = var11;\n        var10 = var9;\n        param9 = var11;\n        if (var9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (inRegisterA < 0x11) {\n      if (inRegisterA == 4) {\n        var11 = (**(code **)(baseRegisterR14[1] + 0x40))(inRegisterR11);\n        var9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (inRegisterA == 8) {\n        var10 = process_build_attr_notes_001086af();\n        return var10;\n      }\n    }\n    loopVar = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (loopVar != 0) {\n    bfd_set_error(0x11);\n    print_error_001126c0(0,baseRegisterR14,stackVar6,loopVar);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "process_build_attribute_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_and_return_result_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetPtr",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtrList"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetPtr;\n  char *message;\n  long *targetList;\n  long *targetPtrList;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtrList = targetList;\n  while( true ) {\n    targetPtr = *targetPtrList;\n    targetPtrList = targetPtrList + 1;\n    if (targetPtr == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fprintf",
                "dcgettext",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "debug_end_function_0010be1a",
                "param_1": "function_data",
                "param_2": "end_address",
                "param_3": "unused_param",
                "param_4": "debug_msg",
                "lVar1": "current_block",
                "uVar2": "msg",
                "pcVar3": "error_msg",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] debug_end_function_0010be1a(long function_data,undefined8 end_address,undefined8 unused_param,undefined8 debug_msg)\n\n{\n  long current_block;\n  undefined8 msg;\n  char *error_msg;\n  undefined result [16];\n  \n  if (((*(long *)(function_data + 8) == 0) || (current_block = *(long *)(function_data + 0x20), current_block == 0)) ||\n     (*(long *)(function_data + 0x18) == 0)) {\n    error_msg = \"debug_end_function_0010be1a: no current function\";\n  }\n  else {\n    if (*(long *)(current_block + 8) == 0) {\n      *(undefined8 *)(current_block + 0x20) = end_address;\n      msg = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(undefined (*) [16])(function_data + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    error_msg = \"debug_end_function_0010be1a: some blocks were not closed\";\n  }\n  msg = dcgettext(0,error_msg,5);\n  fprintf(_stderr,\"%s\\n\",msg);\n  msg = 0;\nLAB_0010be86:\n  result._8_8_ = debug_msg;\n  result._0_8_ = msg;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "debug_end_function_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_001083b7",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_and_allocate_memory_00113da9",
                "param_1": "byte_count",
                "puVar1": "memory_block_ptr",
                "lVar2": "loop_counter",
                "puVar3": "current_ptr",
                "bVar4": "byte_increment",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initialize_and_allocate_memory_00113da9(byte byte_count,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *memory_block_ptr;\n  long loop_counter;\n  undefined8 *current_ptr;\n  byte byte_increment;\n  undefined result [16];\n  \n  byte_increment = 0;\n  result._0_8_ = initialize_memory_block_00112904(8 - (uint)byte_count);\n  if (result._0_8_ != 0) {\n    memory_block_ptr = (undefined8 *)xmalloc(0x28);\n    current_ptr = memory_block_ptr + 1;\n    for (loop_counter = 8; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)current_ptr = 0;\n      current_ptr = (undefined8 *)((long)current_ptr + (ulong)byte_increment * -8 + 4);\n    }\n    *memory_block_ptr = param_3;\n    *(undefined8 **)(result._0_8_ + 0x10) = memory_block_ptr;\n  }\n  result._8_8_ = param_4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_field2"
            },
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1[2];\n  if (record1_field2 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "update_object_0010a69a",
                "param_1": "object",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "condition",
                "param_5": "count",
                "uVar1": "result",
                "lVar2": "resizedArray",
                "sVar3": "length",
                "uVar4": "allocatedMemory",
                "uVar5": "flagSet",
                "local_60": "output"
            },
            "code": "\nundefined4 updateObject_0010a69a(long object,undefined8 value,int flag,char condition,uint count)\n\n{\n  undefined4 result;\n  long resizedArray;\n  size_t length;\n  undefined8 allocatedMemory;\n  undefined flagSet;\n  char output [48];\n  \n  if (flag == 0) {\n    output[0] = '\\0';\n    flagSet = 0;\n    resizedArray = 0;\n  }\n  else {\n    resizedArray = resize_array_00109c2e();\n    if (resizedArray < 0) {\n      return 0;\n    }\n    flagSet = 1;\n    sprintf(output,\"%ld=\",resizedArray);\n  }\n  length = strlen(output);\n  sprintf(output + length,\"%c%u\",(ulong)((-(uint)(condition == '\\0') & 2) + 0x73),(ulong)count);\n  result = initialize_object_00109b52(object,output,resizedArray,flagSet,count);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  resizedArray = *(long *)(object + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(resizedArray + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(object + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_object_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_sections_00115b70",
                "param_1": "sectionNames",
                "pcVar1": "currentSectionName",
                "iVar2": "comparisonResult",
                "iVar3": "sectionType",
                "lVar4": "result1",
                "lVar5": "result2",
                "uVar6": "returnValue",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 processSections_00115b70(char **sectionNames)\n\n{\n  char *currentSectionName;\n  int comparisonResult;\n  int sectionType;\n  long result1;\n  long result2;\n  undefined8 returnValue;\n  long *sectionList;\n  \n  result1 = process_entries_00114190(*sectionNames,0,4);\n  if (result1 == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      result1 = process_entries_00114190(*sectionNames,0,1);\n      result2 = process_entries_00114190(*sectionNames,0,2);\n      if (result1 != 0) {\n        if (result2 != 0) {\n          currentSectionName = *sectionNames;\n          returnValue = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_message_and_exit_00119dd0(returnValue,currentSectionName);\n        }\n        if (result1 != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          currentSectionName = *sectionNames;\n          sectionList = DAT_001279d8;\n          do {\n            sectionType = strcmp(currentSectionName,(char *)sectionList[1]);\n            if (sectionType == 0) {\n              returnValue = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_message_and_exit_00119dd0(returnValue,currentSectionName);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (result2 == 0)) {\n        return 1;\n      }\n    }\n    sectionType = DAT_00127a48;\n    if ((*(byte *)((long)sectionNames + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        currentSectionName = *sectionNames;\n        comparisonResult = strcmp(currentSectionName,\".gnu_debugaltlink\");\n        if ((comparisonResult != 0) && (comparisonResult = strcmp(currentSectionName,\".gnu_debuglink\"), comparisonResult != 0)) {\n          sectionType = strcmp(currentSectionName,\".reloc\");\n          if (sectionType != 0) {\n            return 1;\n          }\n          returnValue = process_input_0010829e();\n          return returnValue;\n        }\n      }\n      if (sectionType == 5) {\n        returnValue = check_string_length_and_compare_00113ede(sectionNames);\n        return returnValue;\n      }\n      if (sectionType == 4) {\n        return 0;\n      }\n    }\n    if (sectionType == 6) {\n      returnValue = validate_and_invert_result_001082b3();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_00114190",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "process_sections_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_binary_00116030",
                "param_1": "functionArray",
                "param_2": "binaryAddress",
                "plVar1": "pointerVar1",
                "lVar2": "longVar2",
                "lVar3": "longVar3",
                "lVar4": "longVar4",
                "iVar5": "intVar5",
                "in_RAX": "returnVal",
                "lVar6": "upperBound",
                "__ptr": "relocPtr",
                "lVar7": "canonicalizeResult",
                "extraout_RAX": "extraReturnValue",
                "lVar8": "loopVar",
                "uStack_28": "stackVar"
            },
            "code": "\n\n\nundefined8 processBinary_00116030(undefined8 *functionArray,long binaryAddress)\n\n{\n  long *pointerVar1;\n  long longVar2;\n  long longVar3;\n  long longVar4;\n  int intVar5;\n  undefined8 returnVal;\n  long upperBound;\n  void *relocPtr;\n  long canonicalizeResult;\n  undefined8 extraReturnValue;\n  long loopVar;\n  undefined8 stackVar;\n  \n  if (*(long *)(binaryAddress + 0x60) == 0) {\n    return returnVal;\n  }\n  upperBound = bfd_get_reloc_upper_bound();\n  if (upperBound < 0) {\n    if ((upperBound != -1) || (intVar5 = bfd_get_error(), intVar5 != 5)) {\n      print_error_message_0011a110(*functionArray);\n                    \n      xexit(1);\n    }\n  }\n  else if (upperBound != 0) {\n    relocPtr = (void *)xmalloc();\n    canonicalizeResult = bfd_canonicalize_reloc(functionArray,binaryAddress,relocPtr);\n    longVar4 = _DAT_00128680;\n    longVar3 = _DAT_00128568;\n    upperBound = _fwrite;\n    if (canonicalizeResult < 0) {\n      print_error_message_0011a110(*functionArray);\n                    \n      xexit(1);\n    }\n    if (canonicalizeResult != 0) {\n      loopVar = 0;\n      do {\n        pointerVar1 = **(long ***)((long)relocPtr + loopVar * 8);\n        if ((((pointerVar1 != (long *)0x0) && (longVar2 = *pointerVar1, longVar2 != 0)) && (longVar2 != upperBound)) &&\n           ((longVar2 != longVar4 && (longVar2 != longVar3)))) {\n          *(uint *)(longVar2 + 0x18) = *(uint *)(longVar2 + 0x18) | 0x20;\n        }\n        loopVar = loopVar + 1;\n      } while (canonicalizeResult != loopVar);\n    }\n    free(relocPtr);\n    return extraReturnValue;\n  }\n  return stackVar;\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_001083b7",
                "fwrite",
                "FUN_0011a110",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_and_compare_00113ede",
                "param_1": "string",
                "__s": "input_string",
                "sVar1": "string_length",
                "uVar2": "comparison_result"
            },
            "code": "\nundefined8 check_string_length_and_compare_00113ede(char **string)\n\n{\n  char *input_string;\n  size_t string_length;\n  undefined8 comparison_result;\n  \n  if (string == (char **)0x0) {\n    return 0;\n  }\n  input_string = *string;\n  if (input_string != (char *)0x0) {\n    string_length = strlen(input_string);\n    if (4 < (int)string_length) {\n      comparison_result = compare_strings_00113fb0(input_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return comparison_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "imported": false,
            "current_name": "check_string_length_and_compare_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1Value",
                "lVar2": "record2Value",
                "iVar3": "comparisonResult",
                "uVar4": "record2Flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long record1Value;\n  long record2Value;\n  int comparisonResult;\n  uint record2Flag;\n  \n  record1Value = *record1;\n  record2Value = *record2;\n  record2Flag = *(uint *)(record2Value + 0x24) & 0x102;\n  if ((*(uint *)(record1Value + 0x24) & 0x102) == 0x102) {\n    if (record2Flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (record2Flag == 0x102) {\n    return -1;\n  }\n  comparisonResult = 1;\n  if (*(ulong *)(record1Value + 0x38) <= *(ulong *)(record2Value + 0x38)) {\n    comparisonResult = -1;\n    if (*(ulong *)(record2Value + 0x38) <= *(ulong *)(record1Value + 0x38)) {\n      if (*(ulong *)(record2Value + 0x40) < *(ulong *)(record1Value + 0x40)) {\n        comparisonResult = 1;\n      }\n      else {\n        comparisonResult = -1;\n        if (*(ulong *)(record2Value + 0x40) <= *(ulong *)(record1Value + 0x40)) {\n          comparisonResult = 1;\n          if (*(uint *)(record1Value + 0x18) <= *(uint *)(record2Value + 0x18)) {\n            return -(uint)(*(uint *)(record1Value + 0x18) < *(uint *)(record2Value + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return comparisonResult;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_info_0010c892",
                "param_1": "debugData",
                "param_2": "functionData",
                "cVar1": "result",
                "lVar2": "memoryBlock",
                "lVar3": "debugTag",
                "uVar4": "returnValue",
                "puVar5": "debugRecords",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processDebugInfo_0010c892(undefined8 debugData,long functionData)\n\n{\n  char result;\n  long memoryBlock;\n  long debugTag;\n  undefined8 returnValue;\n  undefined8 *debugRecords;\n  int kind;\n  \n  if (*(char *)(functionData + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (debugRecords = *(undefined8 **)(functionData + 0x1a0); debugRecords != (undefined8 *)0x0;\n        debugRecords = (undefined8 *)*debugRecords) {\n      kind = *(int *)(debugRecords + 2);\n      debugTag = debugRecords[1];\n      if (kind != 0) {\n        if (debugTag != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          returnValue = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",returnValue);\n        }\nLAB_0010c910:\n        debugRecords[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (debugTag == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      memoryBlock = initialize_memory_block_00112904(kind,0);\n      if (memoryBlock == 0) goto LAB_0010c910;\n      debugTag = process_debug_tag_0010c6be(debugData,debugTag,memoryBlock);\n      debugRecords[3] = debugTag;\n      if (debugTag == 0) goto LAB_0010c916;\n    }\n    returnValue = 1;\n  }\n  else {\n    result = process_debug_records_0010c1c6();\n    if (result != '\\0') {\n      result = debug_end_function_0010be1a(debugData,*(undefined8 *)(functionData + 0x68));\n      if (result != '\\0') {\n        *(undefined *)(functionData + 0x60) = 0;\n        *(undefined8 *)(functionData + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "fprintf",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_memory_block_00112904",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "memoryBlock"
            },
            "code": "\nvoid initializeMemoryBlock_00112904(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 *memoryBlock;\n  \n  memoryBlock = (undefined4 *)xmalloc(0x18);\n  *memoryBlock = input1;\n  memoryBlock[1] = input2;\n  *(undefined (*) [16])(memoryBlock + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c6be",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113da9",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113d6e",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_0010c218",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnAddress",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnAddress;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00114460",
                "FUN_00115a90",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0011173a",
                "FUN_00114190",
                "FUN_0010afd5",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_0010ee3f",
                "FUN_00115f50",
                "FUN_0010b0fa",
                "FUN_0010554f",
                "FUN_00108898",
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_reverse_function_0011a390",
                "plVar4": "functionChain",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "uVar5": "counter"
            },
            "code": "\nvoid executeReverseFunction_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionChain;\n  uint counter;\n  \n  functionChain = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      counter = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)counter) {\n        index = (long)(int)counter;\n        counter = counter & 7;\n        (*(code *)functionChain[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (counter != 0) {\n            if (counter != 1) {\n              if (counter != 2) {\n                if (counter != 3) {\n                  if (counter != 4) {\n                    if (counter != 5) {\n                      if (counter != 6) {\n                        (*(code *)functionChain[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionChain[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionChain[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionChain[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionChain[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionChain[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionChain[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionChain[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionChain[tempIndex + 1])();\n            (*(code *)functionChain[tempIndex])();\n            (*(code *)functionChain[index])();\n            (*(code *)functionChain[tempIndex + -2])();\n            (*(code *)functionChain[tempIndex + -3])();\n            (*(code *)functionChain[tempIndex + -4])();\n            (*(code *)functionChain[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_reverse_function_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "process_and_format_string_0010e842",
                "param_1": "input_value",
                "param_2": "input_string",
                "param_3": "additional_int",
                "param_4": "user_data",
                "sVar1": "string_length",
                "__s": "formatted_string",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] process_and_format_string_0010e842(undefined8 input_value,char *input_string,undefined8 additional_int,undefined8 user_data)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,additional_int);\n  result._0_4_ = process_string_0010e2f0(input_value,0x80,0,0,formatted_string);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result._8_8_ = user_data;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_memory_block_00113cb9",
                "param_1": "inputValue",
                "lVar1": "memoryBlock",
                "initialize_memory_block_00112904": "allocateMemoryBlock"
            },
            "code": "\nlong initializeMemoryBlock_00113cb9(long inputValue)\n\n{\n  long memoryBlock;\n  \n  if (inputValue != 0) {\n    memoryBlock = allocateMemoryBlock(0xe,0);\n    if (memoryBlock == 0) {\n      memoryBlock = 0;\n    }\n    else {\n      *(long *)(memoryBlock + 0x10) = inputValue;\n    }\n    return memoryBlock;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_string_0010eafe",
                "param_1": "ptr1",
                "param_2": "inputString",
                "param_3": "character",
                "__s": "extractedString",
                "sVar2": "inputLength",
                "sVar3": "extractedLength",
                "__s_00": "allocatedString"
            },
            "code": "\nundefined4 processString_0010eafe(long ptr1,char *inputString,char character)\n\n{\n  undefined4 uVar1;\n  char *extractedString;\n  size_t inputLength;\n  size_t extractedLength;\n  char *allocatedString;\n  \n  if ((*(int *)(ptr1 + 0x1f8) == 0) && (*(long *)(ptr1 + 0x1e8) == -1)) {\n    extractedString = (char *)extract_and_free_00109b2f();\n    inputLength = strlen(inputString);\n    extractedLength = strlen(extractedString);\n    allocatedString = (char *)xmalloc(inputLength + 3 + extractedLength);\n    sprintf(allocatedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(character == '\\0') & 0x20) + 0x46),extractedString);\n    *(undefined8 *)(ptr1 + 0x1e8) = *(undefined8 *)(ptr1 + 0x10);\n    uVar1 = process_string_0010e2f0(ptr1,0x24,0,0,allocatedString);\n    if ((char)uVar1 != '\\0') {\n      free(allocatedString);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_memory_block_00113df2",
                "param_1": "block_size"
            },
            "code": "\nvoid initialize_memory_block_00113df2(undefined4 block_size)\n\n{\n  initialize_memory_block_00113df2_00112904(4,block_size);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "generate_object_info_0010a377",
                "param_1": "objectPointer",
                "cVar1": "flag",
                "__s": "extractedString1",
                "__s_00": "extractedString2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "combinedString",
                "uVar2": "result",
                "uVar5": "flagValue"
            },
            "code": "\nundefined4 generateObjectInfo_0010a377(long objectPointer)\n\n{\n  char flag;\n  undefined4 result;\n  char *extractedString1;\n  char *extractedString2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  undefined flagValue;\n  \n  flagValue = 1;\n  flag = *(char *)(*(long *)(objectPointer + 0x60) + 0x1c);\n  extractedString1 = (char *)extract_and_free_00109b2f();\n  if (flag == '\\0') {\n    flagValue = *(undefined *)(*(long *)(objectPointer + 0x60) + 0x1c);\n  }\n  extractedString2 = (char *)extract_and_free_00109b2f(objectPointer);\n  length1 = strlen(extractedString1);\n  length2 = strlen(extractedString2);\n  combinedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combinedString,\"@%s,%s\",extractedString2,extractedString1);\n  free(extractedString2);\n  free(extractedString1);\n  result = initialize_object_00109b52(objectPointer,combinedString,0,flagValue,0);\n  if ((char)result != '\\0') {\n    free(combinedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_object_info_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "reverse_and_process_data_0010d882",
                "param_1": "inputData",
                "param_2": "dataPointer",
                "param_3": "outputData",
                "param_4": "errorFlag",
                "iVar1": "iterationCount",
                "pcVar2": "currentChar",
                "cVar3": "currentCharacter",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentBuffer",
                "uVar6": "currentNumber",
                "bVar7": "isIterationActive",
                "local_50": "currentIndex",
                "local_4c": "bufferSize",
                "local_48": "numIterations",
                "local_44": "tempVar1",
                "local_40": "bufferArray"
            },
            "code": "\nundefined8 reverseAndProcessData_0010d882(long inputData,char **dataPointer,long *outputData,undefined *errorFlag)\n\n{\n  int iterationCount;\n  char *currentChar;\n  char currentCharacter;\n  long allocatedMemory;\n  char *currentBuffer;\n  ulong currentNumber;\n  bool isIterationActive;\n  uint currentIndex;\n  undefined4 bufferSize;\n  uint numIterations;\n  int tempVar1;\n  undefined8 bufferArray [2];\n  \n  currentChar = *dataPointer;\n  bufferSize = 10;\n  if (outputData != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *outputData = allocatedMemory;\n    *errorFlag = 0;\n  }\n  currentIndex = 0;\n  while( true ) {\n    currentBuffer = *dataPointer;\n    currentCharacter = *currentBuffer;\n    if ((currentCharacter == '_' || currentCharacter == '\\0') || (currentCharacter == 'e')) break;\n    if ((currentCharacter == 'N') || (currentCharacter == 'T')) {\n      *dataPointer = currentBuffer + 1;\n      if (currentCharacter == 'T') {\n        tempVar1 = 1;\n      }\n      else {\n        currentCharacter = parse_number_00108ea1(dataPointer,&tempVar1);\n        if (currentCharacter == '\\0') goto LAB_0010d958;\n      }\n      currentCharacter = parse_number_00108ea1(dataPointer,&numIterations);\n      if ((currentCharacter == '\\0') || (*(uint *)(inputData + 0x28) <= numIterations)) {\nLAB_0010d958:\n        print_bad_name_error_0010911f(currentChar);\n        return 0;\n      }\n      currentNumber = (ulong)numIterations;\n      while (iterationCount = tempVar1 + -1, isIterationActive = tempVar1 != 0, tempVar1 = iterationCount, isIterationActive) {\n        bufferArray[0] = *(undefined8 *)(*(long *)(inputData + 0x20) + currentNumber * 0x10);\n        currentCharacter = process_buffer_0010d7d4(inputData,bufferArray,outputData,&currentIndex,&bufferSize);\n        if (currentCharacter == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentCharacter = process_buffer_0010d7d4(inputData,dataPointer,outputData,&currentIndex,&bufferSize);\n      if (currentCharacter == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputData == (long *)0x0) {\n    if (currentCharacter != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputData + (ulong)currentIndex * 8) = 0;\n    if (*currentBuffer != 'e') goto LAB_0010d9fa;\n    *errorFlag = 1;\n  }\n  currentBuffer = currentBuffer + 1;\n  *dataPointer = currentBuffer;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentBuffer >> 8),1);\n}\n\n",
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "xmalloc",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "reverse_and_process_data_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_data_structure_00112925",
                "param_1": "dataStructure",
                "param_2": "paramValue1",
                "param_3": "paramValue2",
                "param_4": "paramValue3",
                "puVar1": "ptrAllocatedMemory",
                "pauVar2": "ptrArray",
                "lVar3": "loopCounter",
                "puVar4": "ptrTemp",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeDataStructure_00112925(undefined (**dataStructure) [16],undefined8 paramValue1,undefined4 paramValue2,undefined4 paramValue3)\n\n{\n  undefined4 *ptrAllocatedMemory;\n  undefined (*ptrArray) [16];\n  long loopCounter;\n  undefined4 *ptrTemp;\n  byte byteValue;\n  \n  byteValue = 0;\n  ptrAllocatedMemory = (undefined4 *)xmalloc(0x28);\n  ptrTemp = ptrAllocatedMemory;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptrTemp = 0;\n    ptrTemp = ptrTemp + (ulong)byteValue * -2 + 1;\n  }\n  ptrArray = *dataStructure;\n  *(undefined8 *)(ptrAllocatedMemory + 2) = paramValue1;\n  ptrAllocatedMemory[5] = paramValue2;\n  ptrAllocatedMemory[6] = paramValue3;\n  if (ptrArray == (undefined (*) [16])0x0) {\n    ptrArray = (undefined (*) [16])xmalloc(0x10);\n    *ptrArray = ZEXT816(0);\n    *dataStructure = ptrArray;\n    *(undefined (**) [16])(*ptrArray + 8) = ptrArray;\n  }\n  **(undefined8 **)(*ptrArray + 8) = ptrAllocatedMemory;\n  *(undefined4 **)(*ptrArray + 8) = ptrAllocatedMemory;\n  return ptrAllocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_0010bf86",
                "param_1": "data",
                "param_2": "record",
                "param_3": "line",
                "uVar1": "result",
                "puVar2": "currentUnitPtr",
                "uVar3": "index",
                "puVar4": "newRecordPtr",
                "lVar5": "counter",
                "puVar6": "recordPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordLineDebug_0010bf86(long data,undefined8 record,undefined8 line)\n\n{\n  undefined8 result;\n  undefined8 *currentUnitPtr;\n  ulong index;\n  undefined4 *newRecordPtr;\n  long counter;\n  undefined4 *recordPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(data + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    counter = *(long *)(data + 0x28);\n    if ((counter != 0) && (*(long *)(counter + 8) == *(long *)(data + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(counter + 0x10 + index * 8) == -1) {\n          currentUnitPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(counter + 0x10 + (long)currentUnitPtr * 8) = record;\n          *(undefined8 *)(counter + 0x60 + (long)currentUnitPtr * 8) = line;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    recordPtr = newRecordPtr;\n    for (counter = 0x2c; counter != 0; counter = counter + -1) {\n      *recordPtr = 0;\n      recordPtr = recordPtr + (ulong)flag * -2 + 1;\n    }\n    result = *(undefined8 *)(data + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = record;\n    *(undefined8 *)(newRecordPtr + 2) = result;\n    *(undefined8 *)(newRecordPtr + 0x18) = line;\n    recordPtr = newRecordPtr + 6;\n    for (counter = 0x48; counter != 0; counter = counter + -1) {\n      *(undefined *)recordPtr = 0xff;\n      recordPtr = (undefined4 *)((long)recordPtr + (ulong)flag * -2 + 1);\n    }\n    currentUnitPtr = *(undefined8 **)(data + 0x28);\n    if (currentUnitPtr == (undefined8 *)0x0) {\n      currentUnitPtr = *(undefined8 **)(data + 8);\n      currentUnitPtr[2] = newRecordPtr;\n    }\n    else {\n      *currentUnitPtr = newRecordPtr;\n    }\n    *(undefined4 **)(data + 0x28) = newRecordPtr;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)currentUnitPtr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_matching_0011a170",
                "param_1": "pattern",
                "param_2": "string",
                "__pattern": "currentPattern",
                "iVar1": "result"
            },
            "code": "\nint patternMatching_0011a170(char **pattern,char **string)\n\n{\n  char *currentPattern;\n  int result;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    result = fnmatch(currentPattern + 1,*string,0);\n    if (result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(currentPattern,*string,0);\n    if (result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_matching_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionInfo",
                "param_2": "paramValue1",
                "param_3": "paramValue2",
                "param_4": "paramValue3",
                "param_5": "paramValue4",
                "puVar1": "tempPtr",
                "uVar2": "errorMessage",
                "puVar3": "newPtr",
                "puVar7": "tempPtr2",
                "bVar8": "flag",
                "lVar5": "loopCounter",
                "puVar6": "lastPtr",
                "puVar4": "currentPtr"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionInfo,long paramValue1,long paramValue2,undefined4 paramValue3,undefined8 paramValue4)\n\n{\n  undefined8 *tempPtr;\n  undefined8 errorMessage;\n  undefined4 *newPtr;\n  undefined8 *currentPtr;\n  long loopCounter;\n  undefined8 *lastPtr;\n  undefined4 *tempPtr2;\n  byte flag;\n  \n  flag = 0;\n  if (paramValue1 == 0) {\n    return 0;\n  }\n  if (paramValue2 != 0) {\n    if ((*(long *)(functionInfo + 8) != 0) && (*(long *)(functionInfo + 0x18) != 0)) {\n      newPtr = (undefined4 *)xmalloc(0x28);\n      tempPtr2 = newPtr;\n      for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *tempPtr2 = 0;\n        tempPtr2 = tempPtr2 + (ulong)flag * -2 + 1;\n      }\n      loopCounter = *(long *)(functionInfo + 0x18);\n      *(long *)(newPtr + 2) = paramValue1;\n      *(long *)(newPtr + 4) = paramValue2;\n      newPtr[6] = paramValue3;\n      tempPtr = *(undefined8 **)(loopCounter + 8);\n      *(undefined8 *)(newPtr + 8) = paramValue4;\n      lastPtr = (undefined8 *)(loopCounter + 8);\n      while (currentPtr = tempPtr, currentPtr != (undefined8 *)0x0) {\n        lastPtr = currentPtr;\n        tempPtr = (undefined8 *)*currentPtr;\n      }\n      *lastPtr = newPtr;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_archive_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "writeMode",
                "ppcVar6": "archiveFile",
                "ppcVar3": "archivedFile",
                "unaff_R15": "archiveStruct",
                "cVar1": "success",
                "iVar2": "archType",
                "pcVar15": "path",
                "pcVar7": "currentPath",
                "pcVar10": "fileName",
                "uVar11": "errorMessage",
                "lVar12": "fileSize",
                "puVar8": "tempDirData",
                "piVar9": "errnoLocation",
                "lVar14": "bytesRead",
                "pvVar4": "buffer",
                "param_7": "openPath",
                "param_8": "fileDescriptor",
                "param_9": "tempDirPath",
                "param_10": "tempDirFile",
                "param_18": "filePermissions",
                "param_19": "fileSizeLimit",
                "unaff_R13": "fileData",
                "bVar17": "byteValue",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000030": "stackData"
            },
            "code": "\nvoid extractArchive_00104ea2(void)\n\n{\n  char success;\n  int archType;\n  char **archivedFile;\n  void *buffer;\n  long lVar5;\n  char **archiveFile;\n  char *currentPath;\n  undefined8 *tempDirData;\n  int *errnoLocation;\n  char *fileName;\n  undefined8 errorMessage;\n  long fileSize;\n  code *psuccess3;\n  long bytesRead;\n  int unaff_EBX;\n  stat *unaff_RBP;\n  char *path;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *fileData;\n  char **archiveStruct;\n  byte byteValue;\n  undefined8 returnAddress;\n  undefined8 *openPath;\n  long *fileDescriptor;\n  char *tempDirPath;\n  undefined8 *tempDirFile;\n  undefined8 writeMode;\n  undefined8 stackData;\n  uint filePermissions;\n  long fileSizeLimit;\n  \n  byteValue = 0;\ncode_r0x00104ea2:\n  archiveFile = (char **)bfd_openw(archivePath,writeMode);\n  if (archiveFile == (char **)0x0) {\nLAB_00104e80:\n    print_error_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    success = FUNC_00114e50(archiveStruct,archiveFile,returnAddress);\n    if (success == '\\0') {\n      archType = bfd_get_arch(archiveStruct);\n      if (archType == 0) goto LAB_00104d75;\n      success = bfd_close_all_done(archiveFile);\n      if (success != '\\0') goto LAB_00104ec9;\n      print_error_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    success = bfd_close(archiveFile);\n    archiveFile = archiveStruct;\n    if (success == '\\0') {\n      print_error_001126c0(archivePath,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (unaff_EBX == 0)) {\n      set_file_modification_time_0011a350(archivePath,unaff_RBP);\n    }\n    fileSize = bfd_openr(archivePath,writeMode);\n    fileData[2] = fileSize;\n    *fileDescriptor = fileSize;\n    fileDescriptor = (long *)(fileSize + 0xf0);\n    archiveStruct = (char **)bfd_openr_next_archived_file(tempDirFile,archiveFile);\n    bfd_close(archiveFile);\n    while ((DAT_00127a40 == 0 && (archiveStruct != (char **)0x0))) {\n      fileName = *archiveStruct;\n      currentPath = fileName;\n      if (*fileName == '/') {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(errorMessage,fileName);\n        goto LAB_00104e93;\n      }\n      while (*currentPath != '\\0') {\n        path = currentPath;\n        if ((*currentPath == '.') && (path = currentPath + 1, currentPath[1] == '.')) {\n          path = currentPath + 2;\n          if ((currentPath[2] == '\\0') || (currentPath[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*path != '\\0' && (*path != '/')); path = path + 1) {\n        }\n        currentPath = path;\n        if (*path == '/') {\n          extract_archive_001052a2();\n          return;\n        }\n      }\n      unaff_RBP = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      archType = stat(archivePath,unaff_RBP);\n      tempDirData = fileData;\n      if (-1 < archType) {\n        fileSize = create_temp_directory_0011a0e0(archivePath);\n        free(archivePath);\n        if (fileSize == 0) {\n          errnoLocation = __errno_location();\n          fileName = strerror(*errnoLocation);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(errorMessage,fileName);\n          goto LAB_00104e93;\n        }\n        tempDirData = (undefined8 *)xmalloc(0x18);\n        fileName = *archiveStruct;\n        *tempDirData = fileData;\n        tempDirData[2] = 0;\n        tempDirData[1] = fileSize;\n        archivePath = (char *)concat(fileSize,&DAT_0011b47d,fileName);\n      }\n      unaff_EBX = 0;\n      if (DAT_001279eb != '\\0') {\n        psVar16 = unaff_RBP;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)byteValue * -8 + 4);\n        }\n        archiveFile = (char **)archiveStruct[0x1d];\n        if ((char **)archiveStruct[0x1d] == (char **)0x0) {\n          archiveFile = archiveStruct;\n        }\n        unaff_EBX = (**(code **)(archiveFile[1] + 0x1e8))(archiveStruct,unaff_RBP);\n        if (unaff_EBX != 0) {\n          fileName = *archiveStruct;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(errorMessage,fileName);\n        }\n      }\n      fileData = (undefined8 *)xmalloc(0x18);\n      fileData[1] = archivePath;\n      *fileData = tempDirData;\n      fileData[2] = 0;\n      success = bfd_check_format(archiveStruct,1);\n      if (success != '\\0') {\n        if (stackData._7_1_ != '\\0') goto code_r0x00104ea2;\n        archiveFile = (char **)bfd_openw(archivePath,*(undefined8 *)archiveStruct[1]);\n        if (archiveFile == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_001126c0(0,archiveStruct,0,errorMessage);\n      archiveFile = (char **)bfd_openw(archivePath,writeMode);\n      if (archiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archivedFile = (char **)archiveStruct[0x1d];\n      if ((char **)archiveStruct[0x1d] == (char **)0x0) {\n        archivedFile = archiveStruct;\n      }\n      archType = (**(code **)(archivedFile[1] + 0x1e8))(archiveStruct);\n      fileSize = fileSizeLimit;\n      if (archType == 0) {\n        if (fileSizeLimit < 0) {\n          construct_filename_001125fa(archiveStruct);\n          errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(errorMessage);\n        }\n        else {\n          archType = bfd_seek(archiveStruct,0,0);\n          if (archType == 0) {\n            if (DAT_001279e9 != '\\0') {\n              fileName = *archiveFile;\n              errorMessage = construct_filename_001125fa(archiveStruct);\n              currentPath = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentPath,errorMessage,fileName);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*archiveFile,filePermissions | 0x100);\n                free(buffer);\n                success = bfd_close_all_done(archiveFile);\n                archiveFile = archiveStruct;\n                if (success == '\\0') {\n                  print_error_001126c0(archivePath,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytesRead = 0x2000;\n              if (fileSize < 0x2001) {\n                bytesRead = fileSize;\n              }\n              lVar5 = bfd_bread(buffer,bytesRead,archiveStruct);\n              archivedFile = archiveStruct;\n              if ((bytesRead != lVar5) ||\n                 (lVar5 = bfd_bwrite(buffer,bytesRead,archiveFile), archivedFile = archiveFile, bytesRead != lVar5))\n              break;\n              fileSize = fileSize - bytesRead;\n            }\n            print_error_001126c0(0,archivedFile,0,0);\n            free(buffer);\n          }\n          else {\n            errorMessage = construct_filename_001125fa(archiveStruct);\n            print_error_message_0011a110(errorMessage);\n          }\n        }\n      }\n      else {\n        print_error_001126c0(0,archiveStruct,0,0);\n      }\n      success = bfd_close_all_done(archiveFile);\n      if (success == '\\0') {\n        print_error_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a40 = 1;\n    }\n    *fileDescriptor = 0;\n    buffer = (void *)xstrdup(*openPath);\n    if (DAT_00127a40 == 0) {\n      psuccess3 = bfd_close;\n    }\n    else {\n      psuccess3 = bfd_close_all_done;\n    }\n    success = (*psuccess3)(openPath);\n    if (success == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*tempDirFile);\n    success = bfd_close(tempDirFile);\n    if (success == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (fileData != (undefined8 *)0x0) {\n    if (fileData[2] == 0) {\n      rmdir((char *)fileData[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)fileData[1]);\n    }\n    free((void *)fileData[1]);\n    tempDirData = (undefined8 *)*fileData;\n    free(fileData);\n    fileData = tempDirData;\n  }\n  rmdir(tempDirPath);\n  free(tempDirPath);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close_all_done",
                "FUN_001125fa",
                "bfd_close",
                "dcgettext",
                "FUN_00104ea2",
                "printf",
                "strerror",
                "rmdir",
                "FUN_001052a2",
                "bfd_check_format",
                "chmod",
                "bfd_bwrite",
                "bfd_close_all_done",
                "FUN_001126c0",
                "bfd_close",
                "FUN_0011a0e0",
                "free",
                "bfd_get_arch",
                "bfd_seek",
                "xstrdup",
                "bfd_openr_next_archived_file",
                "unlink",
                "FUN_0011a110",
                "bfd_openw",
                "xmalloc",
                "bfd_bread",
                "FUN_00114b84",
                "__errno_location",
                "bfd_openr",
                "FUN_0011a350",
                "stat",
                "concat",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_memory_00113ce0",
                "param_1": "memory_address",
                "param_2": "param_value",
                "lVar1": "memory_block_address",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ninitialize_memory_00113ce0(long memory_address,long param_value,undefined param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  long memory_block_address;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (memory_address != 0) {\n    memory_block_address = initialize_memory_00113ce0_block_00112904(0xd,0);\n    if (memory_block_address != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = memory_address;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = param_value;\n      *(undefined *)(allocated_memory + 2) = param_3;\n      *(long **)(memory_block_address + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  memory_block_address = 0;\nLAB_00113d2f:\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = memory_block_address;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file_ptr",
                "unaff_RBP": "buffer_info_ptr",
                "unaff_R12": "buffer_start",
                "unaff_R14": "buffer_end",
                "iVar1": "error_status",
                "sVar4": "bytes_read",
                "uVar2": "error_msg",
                "uVar3": "domain",
                "print_error_message_and_exit_00119dd0": "print_error_message_and_exit",
                "feof": "reached_end_of_file",
                "fclose": "close_file"
            },
            "code": "\nvoid read_and_resize_buffer_00114dc7(void)\n\n{\n  int error_status;\n  undefined8 error_msg;\n  undefined8 domain;\n  size_t bytes_read;\n  FILE *file_ptr;\n  long buffer_info_ptr;\n  long buffer_start;\n  long buffer_end;\n  \n  while( true ) {\n    bytes_read = fread((void *)(*(long *)(buffer_info_ptr + 0x20) + buffer_start),1,buffer_end - buffer_start,\n                  file_ptr);\n    error_status = ferror(file_ptr);\n    if (error_status != 0) {\n      domain = *(undefined8 *)(buffer_info_ptr + 0x10);\n      error_msg = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_message_and_exit(error_msg,domain);\n    }\n    buffer_start = buffer_start + bytes_read;\n    error_status = feof(file_ptr);\n    if (error_status != 0) break;\n    if (buffer_start == buffer_end) {\n      buffer_end = buffer_start * 2;\n      domain = xrealloc(*(undefined8 *)(buffer_info_ptr + 0x20),buffer_end);\n      *(undefined8 *)(buffer_info_ptr + 0x20) = domain;\n    }\n  }\n  *(long *)(buffer_info_ptr + 0x18) = buffer_start;\n  fclose(file_ptr);\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "fclose",
                "dcgettext",
                "FUN_00114dc7",
                "ferror",
                "xrealloc",
                "feof",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_file_00119f70",
                "param_1": "header",
                "param_2": "fileInfo",
                "uVar1": "headerSize",
                "cVar2": "flag",
                "iVar3": "arch",
                "uVar4": "headerEndianness",
                "uVar5": "dataEndianness",
                "__format": "formatString",
                "lVar6": "blockSize",
                "uVar7": "headerValue",
                "lVar8": "allocatedMemory"
            },
            "code": "\nundefined4 processBinaryFile_00119f70(undefined8 *header,undefined8 *fileInfo)\n\n{\n  undefined4 headerSize;\n  char flag;\n  int arch;\n  undefined8 headerEndianness;\n  undefined8 dataEndianness;\n  char *formatString;\n  long blockSize;\n  undefined8 headerValue;\n  long allocatedMemory;\n  \n  arch = *(int *)((long)fileInfo + 0xc) + 1;\n  *(int *)((long)fileInfo + 0xc) = arch;\n  if ((ulong)fileInfo[2] < (ulong)((long)arch * 0x60)) {\n    blockSize = 0x3000;\n    if (0x3f < arch) {\n      blockSize = (long)arch * 0xc0;\n    }\n    allocatedMemory = xrealloc(fileInfo[3]);\n    fileInfo[3] = allocatedMemory;\n    memset((void *)(allocatedMemory + fileInfo[2]),0,blockSize - fileInfo[2]);\n    fileInfo[2] = blockSize;\n  }\n  headerSize = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)fileInfo + 0xc) * 0x60 + fileInfo[3] + -0x60) = *header;\n  headerEndianness = check_endianness_00114e00(headerSize);\n  dataEndianness = check_endianness_00114e00(*(undefined4 *)(header + 2));\n  headerValue = *header;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerValue,dataEndianness,headerEndianness);\n  blockSize = bfd_openw(*fileInfo,*header);\n  if (blockSize == 0) {\n    print_error_message_0011a110(*fileInfo);\n    *(undefined4 *)(fileInfo + 1) = 1;\n  }\n  else {\n    arch = 2;\n    flag = bfd_set_format(blockSize,1);\n    if (flag == '\\0') {\n      arch = bfd_get_error();\n      if (arch != 5) {\n        print_error_message_0011a110(*header);\n        *(undefined4 *)(fileInfo + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(blockSize + 8) + 0x2a0))(blockSize,arch,0);\n        if (flag != '\\0') {\n          headerValue = bfd_printable_arch_mach(arch,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)fileInfo + 0xc) * 0x60 + fileInfo[3] + -0x58 + (ulong)(arch - 2)) =\n               1;\n        }\n        arch = arch + 1;\n      } while (arch != 0x57);\n    }\n    bfd_close_all_done(blockSize);\n  }\n  return *(undefined4 *)(fileInfo + 1);\n}\n\n",
            "called": [
                "printf",
                "bfd_openw",
                "bfd_get_error",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_set_format",
                "bfd_close_all_done",
                "FUN_0011a110",
                "FUN_001053d5",
                "xrealloc",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_binary_file_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "inputFd",
                "param_2": "outputFile",
                "param_3": "fileInfo",
                "iVar1": "originalErrno",
                "__fd": "outputFd",
                "iVar2": "readBytes",
                "_Var3": "fileOffset",
                "uVar4": "status",
                "sVar5": "writeBytes",
                "piVar6": "ptrErrno",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int inputFd,char *outputFile,long fileInfo)\n\n{\n  int originalErrno;\n  int outputFd;\n  int readBytes;\n  __off_t fileOffset;\n  ulong status;\n  size_t writeBytes;\n  int *ptrErrno;\n  undefined buffer [8200];\n  \n  if ((-1 < inputFd) && (fileOffset = lseek(inputFd,0,0), fileOffset == 0)) {\n    outputFd = open(outputFile,0x201);\n    if (outputFd < 0) {\n      status = close_file_and_return_error_00108237();\n      return status;\n    }\n    do {\n      status = read(inputFd,buffer,0x2000);\n      readBytes = (int)status;\n      if (readBytes < 1) {\n        ptrErrno = __errno_location();\n        originalErrno = *ptrErrno;\n        fchmod(outputFd,*(__mode_t *)(fileInfo + 0x18));\n        close(inputFd);\n        close(outputFd);\n        if (readBytes != 0) {\n          *ptrErrno = originalErrno;\n          return 0xffffffff;\n        }\n        return status & 0xffffffff;\n      }\n      writeBytes = write(outputFd,buffer,(long)readBytes);\n    } while (writeBytes == (long)readBytes);\n    ptrErrno = __errno_location();\n    readBytes = *ptrErrno;\n    close(inputFd);\n    close(outputFd);\n    *ptrErrno = readBytes;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "__errno_location",
                "FUN_00108237",
                "fchmod",
                "write",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_handle_errors_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetModificationTime",
                "unaff_R13": "fileModificationFlag",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorCodePtr",
                "uVar2": "errorMessage",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileAndHandleErrors_00108200(void)\n\n{\n  int *errorCodePtr;\n  undefined8 errorMessage;\n  char *filePath;\n  char shouldSetModificationTime;\n  ulong fileModificationFlag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorCodePtr = __errno_location();\n  strerror(*errorCodePtr);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(errorMessage);\n  unlink(filePath);\n  if (shouldSetModificationTime != '\\0') {\n    set_file_modification_time_0011a350();\n  }\n  returnValue._0_8_ = fileModificationFlag & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext",
                "FUN_0011a350",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_handle_errors_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 266258,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}